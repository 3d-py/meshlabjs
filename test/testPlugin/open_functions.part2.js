//Func
function __ZNSt3__13mapIP8MyVertexS2_NS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S2_EEEEEixERS7_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=9;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP32[(($__k)>>2)];
 var $__nd_i_0_in=$2;label=3;break;
 case 3: 
 var $__nd_i_0_in;
 var $6=(($__nd_i_0_in+16)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($4>>>0)<($8>>>0);
 if($9){label=4;break;}else{label=6;break;}
 case 4: 
 var $11=(($__nd_i_0_in)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=5;break;}else{var $__nd_i_0_in=$12;label=3;break;}
 case 5: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $15=(($__nd_i_0_in)|0);
 var $_02=$15;label=11;break;
 case 6: 
 var $17=($8>>>0)<($4>>>0);
 if($17){label=7;break;}else{label=10;break;}
 case 7: 
 var $19=(($__nd_i_0_in+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=8;break;}else{var $__nd_i_0_in=$20;label=3;break;}
 case 8: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $23=(($__nd_i_0_in+4)|0);
 var $_02=$23;label=11;break;
 case 9: 
 var $25=(($this+4)|0);
 var $26=$25;
 HEAP32[(($__parent)>>2)]=$26;
 var $27=(($25)|0);
 var $_02=$27;label=11;break;
 case 10: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $28=$__nd_i_0_in;
 var $29=($__nd_i_0_in|0)==0;
 if($29){var $_02=$__parent;label=11;break;}else{var $__r_0=$28;label=18;break;}
 case 11: 
 var $_02;
 var $30=_malloc(24);
 var $31=($30|0)==0;
 if($31){label=12;break;}else{var $_lcssa_i_i=$30;label=15;break;}
 case 12: 
 var $32=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $33=($32|0)==0;
 if($33){label=14;break;}else{label=13;break;}
 case 13: 
 var $35=$32;
 FUNCTION_TABLE[$35]();
 var $36=_malloc(24);
 var $37=($36|0)==0;
 if($37){label=12;break;}else{var $_lcssa_i_i=$36;label=15;break;}
 case 14: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=15192;
 ___cxa_throw($39,26096,(782));
 throw "Reached an unreachable!";
 case 15: 
 var $_lcssa_i_i;
 var $41=$_lcssa_i_i;
 var $42=(($_lcssa_i_i+16)|0);
 var $43=$42;
 var $44=HEAP32[(($__k)>>2)];
 HEAP32[(($43)>>2)]=$44;
 var $45=(($_lcssa_i_i+20)|0);
 var $46=$45;
 HEAP32[(($46)>>2)]=0;
 var $47=HEAP32[(($__parent)>>2)];
 var $48=$_lcssa_i_i;
 var $49=$_lcssa_i_i;
 HEAP32[(($49)>>2)]=0;
 var $50=(($_lcssa_i_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=0;
 var $52=(($_lcssa_i_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=$47;
 HEAP32[(($_02)>>2)]=$48;
 var $54=(($this)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){var $62=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $60=$57;
 HEAP32[(($54)>>2)]=$60;
 var $_pre=HEAP32[(($_02)>>2)];
 var $62=$_pre;label=17;break;
 case 17: 
 var $62;
 var $63=HEAP32[(($1)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($63,$62);
 var $64=(($this+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=((($65)+(1))|0);
 HEAP32[(($64)>>2)]=$66;
 var $__r_0=$41;label=18;break;
 case 18: 
 var $__r_0;
 var $67=(($__r_0+20)|0);
 STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($a,$b){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($a)>>2)];
 var $2=(($1)|0);
 var $3=HEAPF32[(($2)>>2)];
 var $4=(($1+4)|0);
 var $5=HEAPF32[(($4)>>2)];
 var $6=(($1+8)|0);
 var $7=HEAPF32[(($6)>>2)];
 var $8=HEAP32[(($b)>>2)];
 var $9=(($8)|0);
 var $10=HEAPF32[(($9)>>2)];
 var $11=(($8+4)|0);
 var $12=HEAPF32[(($11)>>2)];
 var $13=(($8+8)|0);
 var $14=HEAPF32[(($13)>>2)];
 var $15=$3==$10;
 var $16=$5==$12;
 var $or_cond=$15&$16;
 var $17=$7==$14;
 var $or_cond5=$or_cond&$17;
 if($or_cond5){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=($1>>>0)<($8>>>0);
 var $29=$19;label=8;break;
 case 3: 
 var $20=$7!=$14;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$7<$14;
 var $29=$22;label=8;break;
 case 5: 
 var $24=$5!=$12;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$5<$12;
 var $29=$26;label=8;break;
 case 7: 
 var $28=$3<$10;
 var $29=$28;label=8;break;
 case 8: 
 var $29;
 return $29;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($__x,$__y,$__z,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__y,$__x);
 var $2=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__z,$__y);
 if($1){label=5;break;}else{label=2;break;}
 case 2: 
 if($2){label=3;break;}else{var $_0=0;label=9;break;}
 case 3: 
 var $5=HEAP32[(($__y)>>2)];
 var $6=HEAP32[(($__z)>>2)];
 HEAP32[(($__y)>>2)]=$6;
 HEAP32[(($__z)>>2)]=$5;
 var $7=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__y,$__x);
 if($7){label=4;break;}else{var $_0=1;label=9;break;}
 case 4: 
 var $9=HEAP32[(($__x)>>2)];
 var $10=HEAP32[(($__y)>>2)];
 HEAP32[(($__x)>>2)]=$10;
 HEAP32[(($__y)>>2)]=$9;
 var $_0=2;label=9;break;
 case 5: 
 var $12=HEAP32[(($__x)>>2)];
 if($2){label=6;break;}else{label=7;break;}
 case 6: 
 var $14=HEAP32[(($__z)>>2)];
 HEAP32[(($__x)>>2)]=$14;
 HEAP32[(($__z)>>2)]=$12;
 var $_0=1;label=9;break;
 case 7: 
 var $16=HEAP32[(($__y)>>2)];
 HEAP32[(($__x)>>2)]=$16;
 HEAP32[(($__y)>>2)]=$12;
 var $17=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__z,$__y);
 if($17){label=8;break;}else{var $_0=1;label=9;break;}
 case 8: 
 var $19=HEAP32[(($__z)>>2)];
 HEAP32[(($__y)>>2)]=$19;
 HEAP32[(($__z)>>2)]=$12;
 var $_0=2;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17__sort4IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($__x1,$__x2,$__x3,$__c);
 var $2=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x4,$__x3);
 if($2){label=2;break;}else{var $__r_0=$1;label=5;break;}
 case 2: 
 var $4=HEAP32[(($__x3)>>2)];
 var $5=HEAP32[(($__x4)>>2)];
 HEAP32[(($__x3)>>2)]=$5;
 HEAP32[(($__x4)>>2)]=$4;
 var $6=((($1)+(1))|0);
 var $7=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x3,$__x2);
 if($7){label=3;break;}else{var $__r_0=$6;label=5;break;}
 case 3: 
 var $9=HEAP32[(($__x2)>>2)];
 var $10=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x2)>>2)]=$10;
 HEAP32[(($__x3)>>2)]=$9;
 var $11=((($1)+(2))|0);
 var $12=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x2,$__x1);
 if($12){label=4;break;}else{var $__r_0=$11;label=5;break;}
 case 4: 
 var $14=HEAP32[(($__x1)>>2)];
 var $15=HEAP32[(($__x2)>>2)];
 HEAP32[(($__x1)>>2)]=$15;
 HEAP32[(($__x2)>>2)]=$14;
 var $16=((($1)+(3))|0);
 var $__r_0=$16;label=5;break;
 case 5: 
 var $__r_0;
 return $__r_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17__sort5IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__17__sort4IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__c);
 var $2=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x5,$__x4);
 if($2){label=2;break;}else{var $__r_0=$1;label=6;break;}
 case 2: 
 var $4=HEAP32[(($__x4)>>2)];
 var $5=HEAP32[(($__x5)>>2)];
 HEAP32[(($__x4)>>2)]=$5;
 HEAP32[(($__x5)>>2)]=$4;
 var $6=((($1)+(1))|0);
 var $7=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x4,$__x3);
 if($7){label=3;break;}else{var $__r_0=$6;label=6;break;}
 case 3: 
 var $9=HEAP32[(($__x3)>>2)];
 var $10=HEAP32[(($__x4)>>2)];
 HEAP32[(($__x3)>>2)]=$10;
 HEAP32[(($__x4)>>2)]=$9;
 var $11=((($1)+(2))|0);
 var $12=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x3,$__x2);
 if($12){label=4;break;}else{var $__r_0=$11;label=6;break;}
 case 4: 
 var $14=HEAP32[(($__x2)>>2)];
 var $15=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x2)>>2)]=$15;
 HEAP32[(($__x3)>>2)]=$14;
 var $16=((($1)+(3))|0);
 var $17=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__x2,$__x1);
 if($17){label=5;break;}else{var $__r_0=$16;label=6;break;}
 case 5: 
 var $19=HEAP32[(($__x1)>>2)];
 var $20=HEAP32[(($__x2)>>2)];
 HEAP32[(($__x1)>>2)]=$20;
 HEAP32[(($__x2)>>2)]=$19;
 var $21=((($1)+(4))|0);
 var $__r_0=$21;label=6;break;
 case 6: 
 var $__r_0;
 return $__r_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__127__insertion_sort_incompleteIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEbT0_SB_T_($__first,$__last,$__comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__t=sp;
 var $1=$__last;
 var $2=$__first;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 switch(($4|0)){case 0:case 1:{ var $_0=1;label=15;break;}case 2:{ label=2;break;}case 3:{ label=4;break;}case 4:{ label=5;break;}case 5:{ label=6;break;}default:{label=7;break;}}break;
 case 2: 
 var $6=((($__last)-(4))|0);
 var $7=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($6,$__first);
 if($7){label=3;break;}else{var $_0=1;label=15;break;}
 case 3: 
 var $9=HEAP32[(($__first)>>2)];
 var $10=HEAP32[(($6)>>2)];
 HEAP32[(($__first)>>2)]=$10;
 HEAP32[(($6)>>2)]=$9;
 var $_0=1;label=15;break;
 case 4: 
 var $12=(($__first+4)|0);
 var $13=((($__last)-(4))|0);
 var $14=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($__first,$12,$13,$__comp);
 var $_0=1;label=15;break;
 case 5: 
 var $16=(($__first+4)|0);
 var $17=(($__first+8)|0);
 var $18=((($__last)-(4))|0);
 var $19=__ZNSt3__17__sort4IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_T_($__first,$16,$17,$18,$__comp);
 var $_0=1;label=15;break;
 case 6: 
 var $21=(($__first+4)|0);
 var $22=(($__first+8)|0);
 var $23=(($__first+12)|0);
 var $24=((($__last)-(4))|0);
 var $25=__ZNSt3__17__sort5IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_SB_T_($__first,$21,$22,$23,$24,$__comp);
 var $_0=1;label=15;break;
 case 7: 
 var $27=(($__first+8)|0);
 var $28=(($__first+4)|0);
 var $29=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($__first,$28,$27,$__comp);
 var $__count_0=0;var $__j_0=$27;label=8;break;
 case 8: 
 var $__j_0;
 var $__count_0;
 var $storemerge=(($__j_0+4)|0);
 var $31=($storemerge|0)==($__last|0);
 if($31){var $_0=1;label=15;break;}else{label=9;break;}
 case 9: 
 var $33=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($storemerge,$__j_0);
 if($33){label=10;break;}else{var $__count_0=$__count_0;var $__j_0=$storemerge;label=8;break;}
 case 10: 
 var $35=HEAP32[(($storemerge)>>2)];
 HEAP32[(($__t)>>2)]=$35;
 var $__k_0=$__j_0;var $__j_1=$storemerge;label=11;break;
 case 11: 
 var $__j_1;
 var $__k_0;
 var $37=HEAP32[(($__k_0)>>2)];
 HEAP32[(($__j_1)>>2)]=$37;
 var $38=($__k_0|0)==($__first|0);
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $40=((($__k_0)-(4))|0);
 var $41=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__t,$40);
 if($41){var $__j_1=$__k_0;var $__k_0=$40;label=11;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($__t)>>2)];
 HEAP32[(($__k_0)>>2)]=$42;
 var $43=((($__count_0)+(1))|0);
 var $44=($43|0)==8;
 if($44){label=14;break;}else{var $__count_0=$43;var $__j_0=$storemerge;label=8;break;}
 case 14: 
 var $46=(($__j_0+8)|0);
 var $47=($46|0)==($__last|0);
 var $_0=$47;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__treeINS_12__value_typeIP8MyVertexS3_EENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_12__value_typeIP8MyVertexS3_EENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_12__value_typeIP8MyVertexS3_EENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$8);
 var $9=$__nd;
 _free($9);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply10PlyElement7AddPropEPKciii($this,$na,$ti,$isl,$t2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=($na|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7176,6944,860,12368);
 throw "Reached an unreachable!";
 case 3: 
 var $6=($ti|0)>0;
 if($6){label=5;break;}else{label=4;break;}
 case 4: 
 ___assert_fail(6616,6944,861,12368);
 throw "Reached an unreachable!";
 case 5: 
 var $9=($ti|0)<9;
 if($9){label=7;break;}else{label=6;break;}
 case 6: 
 ___assert_fail(6328,6944,862,12368);
 throw "Reached an unreachable!";
 case 7: 
 var $12=($t2|0)>0;
 if($12){label=10;break;}else{label=8;break;}
 case 8: 
 var $14=($t2|0)==0;
 var $15=($isl|0)==0;
 var $or_cond=$14&$15;
 if($or_cond){label=12;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(6064,6944,863,12368);
 throw "Reached an unreachable!";
 case 10: 
 var $17=($t2|0)<9;
 if($17){label=12;break;}else{label=11;break;}
 case 11: 
 ___assert_fail(5832,6944,864,12368);
 throw "Reached an unreachable!";
 case 12: 
 var $19=$1;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=$2;
 var $storemerge_i=0;label=13;break;
 case 13: 
 var $storemerge_i;
 var $22=($storemerge_i>>>0)<3;
 if($22){label=14;break;}else{label=20;break;}
 case 14: 
 var $24=(($20+($storemerge_i<<2))|0);
 HEAP32[(($24)>>2)]=0;
 var $25=((($storemerge_i)+(1))|0);
 var $storemerge_i=$25;label=13;break;
 case 15: 
 var $lpad_loopexit25$0 = ___cxa_find_matching_catch(); var $lpad_loopexit25$1 = tempRet0;
 var $lpad_phi27$1=$lpad_loopexit25$1;var $lpad_phi27$0=$lpad_loopexit25$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit26$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit26$1 = tempRet0;
 var $lpad_phi27$1=$lpad_nonloopexit26$1;var $lpad_phi27$0=$lpad_nonloopexit26$0;label=17;break;
 case 17: 
 var $lpad_phi27$0;
 var $lpad_phi27$1;
 var $27=$2;
 var $28=HEAP8[(($27)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=19;break;}else{label=18;break;}
 case 18: 
 var $32=(($2+8)|0);
 var $33=HEAP32[(($32)>>2)];
 _free($33);
 label=19;break;
 case 19: 
 ___resumeException($lpad_phi27$0)
 case 20: 
 if($12){label=24;break;}else{label=21;break;}
 case 21: 
 var $35=($t2|0)==0;
 var $36=($isl|0)==0;
 var $or_cond28=$35&$36;
 if($or_cond28){label=24;break;}else{label=22;break;}
 case 22: 
 (function() { try { __THREW__ = 0; return ___assert_fail(6064,2760,161,12320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=16;break; }
 case 23: 
 throw "Reached an unreachable!";
 case 24: 
 var $39=(($2)|0);
 var $40=_strlen($na);
 var $41=($40>>>0)>4294967279;
 if($41){label=25;break;}else{label=27;break;}
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=16;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 var $44=($40>>>0)<11;
 if($44){label=28;break;}else{label=29;break;}
 case 28: 
 var $46=$40<<1;
 var $47=(($46)&255);
 HEAP8[(($19)>>0)]=$47;
 var $48=$1;
 var $49=(($48+1)|0);
 var $__p_0_i_i=$49;label=36;break;
 case 29: 
 var $50=((($40)+(16))|0);
 var $51=$50&-16;
 var $52=($51|0)==0;
 var $_size_i_i=($52?1:$51);
 var $53=_malloc($_size_i_i);
 var $54=($53|0)==0;
 if($54){label=30;break;}else{var $_lcssa_i_i=$53;label=35;break;}
 case 30: 
 var $55=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $56=($55|0)==0;
 if($56){label=33;break;}else{label=31;break;}
 case 31: 
 var $58=$55;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=15;break; }
 case 32: 
 var $59=_malloc($_size_i_i);
 var $60=($59|0)==0;
 if($60){label=30;break;}else{var $_lcssa_i_i=$59;label=35;break;}
 case 33: 
 var $62=___cxa_allocate_exception(4);
 var $63=$62;
 HEAP32[(($63)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($62,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=16;break; }
 case 34: 
 throw "Reached an unreachable!";
 case 35: 
 var $_lcssa_i_i;
 var $64=(($1+8)|0);
 HEAP32[(($64)>>2)]=$_lcssa_i_i;
 var $65=$51|1;
 var $66=(($1)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=(($1+4)|0);
 HEAP32[(($67)>>2)]=$40;
 var $__p_0_i_i=$_lcssa_i_i;label=36;break;
 case 36: 
 var $__p_0_i_i;
 assert($40 % 1 === 0);(_memcpy($__p_0_i_i, $na, $40)|0);
 var $68=(($__p_0_i_i+$40)|0);
 HEAP8[(($68)>>0)]=0;
 var $69=$2;
 var $70=HEAP8[(($69)>>0)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=38;break;}else{label=37;break;}
 case 37: 
 var $74=(($2+8)|0);
 var $75=HEAP32[(($74)>>2)];
 HEAP8[(($75)>>0)]=0;
 var $76=(($2+4)|0);
 HEAP32[(($76)>>2)]=0;
 label=39;break;
 case 38: 
 var $78=$2;
 var $79=(($78+1)|0);
 HEAP8[(($79)>>0)]=0;
 HEAP8[(($69)>>0)]=0;
 label=39;break;
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($39,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $81$0 = ___cxa_find_matching_catch(0); var $81$1 = tempRet0;
 var $82=$81$0;
 ___clang_call_terminate($82);
 throw "Reached an unreachable!";
 case 41: 
 assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 var $83=$1;
 var $storemerge1_i=0;label=42;break;
 case 42: 
 var $storemerge1_i;
 var $85=($storemerge1_i>>>0)<3;
 if($85){label=43;break;}else{label=44;break;}
 case 43: 
 var $87=(($83+($storemerge1_i<<2))|0);
 HEAP32[(($87)>>2)]=0;
 var $88=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$88;label=42;break;
 case 44: 
 var $89=HEAP8[(($19)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){label=46;break;}else{label=45;break;}
 case 45: 
 var $93=(($1+8)|0);
 var $94=HEAP32[(($93)>>2)];
 _free($94);
 label=46;break;
 case 46: 
 var $95=(($2+12)|0);
 HEAP32[(($95)>>2)]=$ti;
 var $96=(($2+16)|0);
 HEAP32[(($96)>>2)]=$isl;
 var $97=(($2+20)|0);
 HEAP32[(($97)>>2)]=$t2;
 var $98=(($2+24)|0);
 HEAP32[(($98)>>2)]=0;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $99=(($this+20)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($this+24)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100>>>0)<($102>>>0);
 if($103){label=47;break;}else{label=53;break;}
 case 47: 
 var $105=($100|0)==0;
 if($105){var $117=0;label=52;break;}else{label=48;break;}
 case 48: 
 var $107=$100;
 assert(12 % 1 === 0);HEAP32[(($107)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($107)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];HEAP32[((($107)+(8))>>2)]=HEAP32[((($69)+(8))>>2)];
 var $108=$2;
 var $storemerge_i3=0;label=49;break;
 case 49: 
 var $storemerge_i3;
 var $110=($storemerge_i3>>>0)<3;
 if($110){label=50;break;}else{label=51;break;}
 case 50: 
 var $112=(($108+($storemerge_i3<<2))|0);
 HEAP32[(($112)>>2)]=0;
 var $113=((($storemerge_i3)+(1))|0);
 var $storemerge_i3=$113;label=49;break;
 case 51: 
 var $114=(($100+12)|0);
 var $115=$114;
 var $116=$95;
 assert(64 % 1 === 0);(_memcpy($115, $116, 64)|0);
 var $_pre=HEAP32[(($99)>>2)];
 var $117=$_pre;label=52;break;
 case 52: 
 var $117;
 var $118=(($117+76)|0);
 HEAP32[(($99)>>2)]=$118;
 label=91;break;
 case 53: 
 var $120=(($this+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$100;
 var $123=$121;
 var $124=((($122)-($123))|0);
 var $125=(((($124|0))/(76))&-1);
 var $126=((($125)+(1))|0);
 var $127=($126>>>0)>56512727;
 if($127){label=54;break;}else{label=65;break;}
 case 54: 
 var $128=___cxa_allocate_exception(8);
 var $129=$128;
 HEAP32[(($129)>>2)]=15352;
 var $130=(($128+4)|0);
 var $131=_strlen(1736);
 var $132=((($131)+(13))|0);
 var $133=($132|0)==0;
 var $_size_i_i4=($133?1:$132);
 var $134=_malloc($_size_i_i4);
 var $135=($134|0)==0;
 if($135){label=55;break;}else{var $_lcssa_i_i6=$134;label=60;break;}
 case 55: 
 var $136=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $137=($136|0)==0;
 if($137){label=58;break;}else{label=56;break;}
 case 56: 
 var $139=$136;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$139]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=62;break; }
 case 57: 
 var $140=_malloc($_size_i_i4);
 var $141=($140|0)==0;
 if($141){label=55;break;}else{var $_lcssa_i_i6=$140;label=60;break;}
 case 58: 
 var $143=___cxa_allocate_exception(4);
 var $144=$143;
 HEAP32[(($144)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($143,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=63;break; }
 case 59: 
 throw "Reached an unreachable!";
 case 60: 
 var $_lcssa_i_i6;
 var $145=$_lcssa_i_i6;
 HEAP32[(($145)>>2)]=$131;
 var $146=(($_lcssa_i_i6+4)|0);
 var $147=$146;
 HEAP32[(($147)>>2)]=$131;
 var $148=(($_lcssa_i_i6+8)|0);
 var $149=$148;
 HEAP32[(($149)>>2)]=0;
 var $150=(($_lcssa_i_i6+12)|0);
 var $151=((($131)+(1))|0);
 assert($151 % 1 === 0);(_memcpy($150, 1736, $151)|0);
 var $152=$130;
 HEAP32[(($152)>>2)]=$150;
 HEAP32[(($129)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($128,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=95;break; }
 case 61: 
 throw "Reached an unreachable!";
 case 62: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=64;break;
 case 63: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=64;break;
 case 64: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($128);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=96;break;
 case 65: 
 var $155=$102;
 var $156=((($155)-($123))|0);
 var $157=(((($156|0))/(76))&-1);
 var $158=($157>>>0)<28256363;
 if($158){label=66;break;}else{var $162=56512727;label=67;break;}
 case 66: 
 var $159=$157<<1;
 var $160=($159>>>0)<($126>>>0);
 var $_=($160?$126:$159);
 var $161=($_|0)==0;
 if($161){var $178=0;var $177=$_;label=74;break;}else{var $162=$_;label=67;break;}
 case 67: 
 var $162;
 var $163=((($162)*(76))&-1);
 var $164=($163|0)==0;
 var $_size_i_i_i=($164?1:$163);
 var $165=_malloc($_size_i_i_i);
 var $166=($165|0)==0;
 if($166){label=68;break;}else{var $_lcssa_i_i_i=$165;label=73;break;}
 case 68: 
 var $167=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $168=($167|0)==0;
 if($168){label=71;break;}else{label=69;break;}
 case 69: 
 var $170=$167;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=94;break; }
 case 70: 
 var $171=_malloc($_size_i_i_i);
 var $172=($171|0)==0;
 if($172){label=68;break;}else{var $_lcssa_i_i_i=$171;label=73;break;}
 case 71: 
 var $174=___cxa_allocate_exception(4);
 var $175=$174;
 HEAP32[(($175)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($174,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=95;break; }
 case 72: 
 throw "Reached an unreachable!";
 case 73: 
 var $_lcssa_i_i_i;
 var $176=$_lcssa_i_i_i;
 var $178=$176;var $177=$162;label=74;break;
 case 74: 
 var $177;
 var $178;
 var $179=(($178+((($125)*(76))&-1))|0);
 var $180=(($178+((($177)*(76))&-1))|0);
 var $181=($179|0)==0;
 if($181){label=79;break;}else{label=75;break;}
 case 75: 
 var $183=$179;
 assert(12 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];HEAP32[((($183)+(8))>>2)]=HEAP32[((($69)+(8))>>2)];
 var $184=$2;
 var $storemerge_i_i=0;label=76;break;
 case 76: 
 var $storemerge_i_i;
 var $186=($storemerge_i_i>>>0)<3;
 if($186){label=77;break;}else{label=78;break;}
 case 77: 
 var $188=(($184+($storemerge_i_i<<2))|0);
 HEAP32[(($188)>>2)]=0;
 var $189=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$189;label=76;break;
 case 78: 
 var $190=(($178+((($125)*(76))&-1)+12)|0);
 var $191=$190;
 var $192=$95;
 assert(64 % 1 === 0);(_memcpy($191, $192, 64)|0);
 label=79;break;
 case 79: 
 var $_sum=((($125)+(1))|0);
 var $193=(($178+((($_sum)*(76))&-1))|0);
 var $194=HEAP32[(($120)>>2)];
 var $195=HEAP32[(($99)>>2)];
 var $_0=$195;var $__v_i_sroa_7_0=$179;label=80;break;
 case 80: 
 var $__v_i_sroa_7_0;
 var $_0;
 var $197=($_0|0)==($194|0);
 if($197){label=85;break;}else{label=81;break;}
 case 81: 
 var $199=((($_0)-(76))|0);
 var $200=((($__v_i_sroa_7_0)-(76))|0);
 var $201=$200;
 var $202=$199;
 assert(12 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($202)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($202)+(4))>>2)];HEAP32[((($201)+(8))>>2)]=HEAP32[((($202)+(8))>>2)];
 var $203=$199;
 var $storemerge_i_i_i=0;label=82;break;
 case 82: 
 var $storemerge_i_i_i;
 var $205=($storemerge_i_i_i>>>0)<3;
 if($205){label=83;break;}else{label=84;break;}
 case 83: 
 var $207=(($203+($storemerge_i_i_i<<2))|0);
 HEAP32[(($207)>>2)]=0;
 var $208=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$208;label=82;break;
 case 84: 
 var $209=((($__v_i_sroa_7_0)-(76)+12)|0);
 var $210=((($_0)-(76)+12)|0);
 var $211=$209;
 var $212=$210;
 assert(64 % 1 === 0);(_memcpy($211, $212, 64)|0);
 var $_0=$199;var $__v_i_sroa_7_0=$200;label=80;break;
 case 85: 
 var $213=HEAP32[(($120)>>2)];
 HEAP32[(($120)>>2)]=$__v_i_sroa_7_0;
 var $214=HEAP32[(($99)>>2)];
 HEAP32[(($99)>>2)]=$193;
 HEAP32[(($101)>>2)]=$180;
 var $__v_i_sroa_15_0=$214;label=86;break;
 case 86: 
 var $__v_i_sroa_15_0;
 var $215=($213|0)==($__v_i_sroa_15_0|0);
 if($215){label=89;break;}else{label=87;break;}
 case 87: 
 var $217=((($__v_i_sroa_15_0)-(76))|0);
 var $218=$217;
 var $219=HEAP8[(($218)>>0)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){var $__v_i_sroa_15_0=$217;label=86;break;}else{label=88;break;}
 case 88: 
 var $223=((($__v_i_sroa_15_0)-(76)+8)|0);
 var $224=HEAP32[(($223)>>2)];
 _free($224);
 var $__v_i_sroa_15_0=$217;label=86;break;
 case 89: 
 var $225=($213|0)==0;
 if($225){label=91;break;}else{label=90;break;}
 case 90: 
 var $227=$213;
 _free($227);
 label=91;break;
 case 91: 
 var $228=HEAP8[(($69)>>0)];
 var $229=$228&1;
 var $230=(($229<<24)>>24)==0;
 if($230){label=93;break;}else{label=92;break;}
 case 92: 
 var $232=(($2+8)|0);
 var $233=HEAP32[(($232)>>2)];
 _free($233);
 label=93;break;
 case 93: 
 STACKTOP=sp;return;
 case 94: 
 var $lpad_loopexit20$0 = ___cxa_find_matching_catch(); var $lpad_loopexit20$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit20$1;var $eh_lpad_body$0=$lpad_loopexit20$0;label=96;break;
 case 95: 
 var $lpad_nonloopexit21$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit21$1;var $eh_lpad_body$0=$lpad_nonloopexit21$0;label=96;break;
 case 96: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $234=HEAP8[(($69)>>0)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){label=98;break;}else{label=97;break;}
 case 97: 
 var $238=(($2+8)|0);
 var $239=HEAP32[(($238)>>2)];
 _free($239);
 label=98;break;
 case 98: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply7PlyFileD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+24)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_fclose($2);
 HEAP32[(($1)>>2)]=0;
 label=3;break;
 case 3: 
 var $6=(($this+56)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+40)|0);
 var $8=$7;
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($this+48)|0);
 var $14=HEAP32[(($13)>>2)];
 _free($14);
 label=5;break;
 case 5: 
 var $15=(($this+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=11;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+16)|0);
 label=7;break;
 case 7: 
 var $20=HEAP32[(($19)>>2)];
 var $21=($16|0)==($20|0);
 if($21){label=10;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)-(12))|0);
 HEAP32[(($19)>>2)]=$23;
 var $24=$23;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=7;break;}else{label=9;break;}
 case 9: 
 var $29=((($20)-(12)+8)|0);
 var $30=HEAP32[(($29)>>2)];
 _free($30);
 label=7;break;
 case 10: 
 var $31=HEAP32[(($15)>>2)];
 var $32=$31;
 _free($32);
 label=11;break;
 case 11: 
 var $33=(($this)|0);
 __ZNSt3__16vectorIN3vcg3ply10PlyElementENS_9allocatorIS3_EEED2Ev($33);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg3ply7PlyFile8FindTypeEPKc($name){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($name|0)==0;
 if($1){label=2;break;}else{var $storemerge=1;label=3;break;}
 case 2: 
 ___assert_fail(4176,6944,1278,10264);
 throw "Reached an unreachable!";
 case 3: 
 var $storemerge;
 var $3=($storemerge|0)<9;
 if($3){label=4;break;}else{var $storemerge1=-1;label=11;break;}
 case 4: 
 var $5=((28752+($storemerge<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=HEAP8[(($name)>>0)];
 var $8=HEAP8[(($6)>>0)];
 var $9=(($7<<24)>>24)!=(($8<<24)>>24);
 var $10=(($7<<24)>>24)==0;
 var $or_cond3_i=$9|$10;
 if($or_cond3_i){var $_lcssa_i=$7;var $_lcssa2_i=$8;label=6;break;}else{var $_014_i=$name;var $_05_i=$6;label=5;break;}
 case 5: 
 var $_05_i;
 var $_014_i;
 var $11=(($_014_i+1)|0);
 var $12=(($_05_i+1)|0);
 var $13=HEAP8[(($11)>>0)];
 var $14=HEAP8[(($12)>>0)];
 var $15=(($13<<24)>>24)!=(($14<<24)>>24);
 var $16=(($13<<24)>>24)==0;
 var $or_cond_i=$15|$16;
 if($or_cond_i){var $_lcssa_i=$13;var $_lcssa2_i=$14;label=6;break;}else{var $_014_i=$11;var $_05_i=$12;label=5;break;}
 case 6: 
 var $_lcssa2_i;
 var $_lcssa_i;
 var $17=(($_lcssa_i<<24)>>24)==(($_lcssa2_i<<24)>>24);
 if($17){var $storemerge1=$storemerge;label=11;break;}else{label=7;break;}
 case 7: 
 var $19=((28792+($storemerge<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP8[(($20)>>0)];
 var $22=(($7<<24)>>24)!=(($21<<24)>>24);
 var $or_cond3_i2=$22|$10;
 if($or_cond3_i2){var $_lcssa_i8=$7;var $_lcssa2_i7=$21;label=9;break;}else{var $_014_i4=$name;var $_05_i3=$20;label=8;break;}
 case 8: 
 var $_05_i3;
 var $_014_i4;
 var $23=(($_014_i4+1)|0);
 var $24=(($_05_i3+1)|0);
 var $25=HEAP8[(($23)>>0)];
 var $26=HEAP8[(($24)>>0)];
 var $27=(($25<<24)>>24)!=(($26<<24)>>24);
 var $28=(($25<<24)>>24)==0;
 var $or_cond_i5=$27|$28;
 if($or_cond_i5){var $_lcssa_i8=$25;var $_lcssa2_i7=$26;label=9;break;}else{var $_014_i4=$23;var $_05_i3=$24;label=8;break;}
 case 9: 
 var $_lcssa2_i7;
 var $_lcssa_i8;
 var $29=(($_lcssa_i8<<24)>>24)==(($_lcssa2_i7<<24)>>24);
 if($29){var $storemerge1=$storemerge;label=11;break;}else{label=10;break;}
 case 10: 
 var $31=((($storemerge)+(1))|0);
 var $storemerge=$31;label=3;break;
 case 11: 
 var $storemerge1;
 return $storemerge1;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply9ReadAsciiEP8_IO_FILEPKNS0_11PlyPropertyEPvi($fp,$pr,$mem,$0){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t_i2=sp;
 var $f_i3=(sp)+(8);
 var $t_i=(sp)+(16);
 var $f_i=(sp)+(24);
 var $n=(sp)+(32);
 var $2=($pr|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(4048,6944,3543,12280);
 throw "Reached an unreachable!";
 case 3: 
 var $5=($mem|0)==0;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 ___assert_fail(3856,6944,3544,12280);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($pr+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=34;break;}else{label=6;break;}
 case 6: 
 var $12=$n;
 var $13=(($pr+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$12,$14,3);
 var $16=($15|0)==0;
 if($16){var $_0=0;label=42;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($n)>>2)];
 var $19=($18|0)<12;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 ___assert_fail(3984,6944,3555,12280);
 throw "Reached an unreachable!";
 case 9: 
 var $22=(($pr+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=11;break;}
 case 10: 
 var $25=(($pr+12)|0);
 var $26=$t_i;
 var $27=$f_i;
 var $28=($fp|0)==0;
 var $storemerge=0;var $88=$18;label=25;break;
 case 11: 
 var $30=(($pr+64)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($mem+$31)|0);
 var $33=(($pr+60)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZN3vcg3plyL8StoreIntEPvii($32,$34,$18);
 var $35=(($pr+52)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==0;
 if($37){label=20;break;}else{label=12;break;}
 case 12: 
 var $39=HEAP32[(($n)>>2)];
 var $40=(($pr+40)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=((28712+($41<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($39|0)==0;
 if($44){var $req_0_i=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $46=(Math_imul($43,$39)|0);
 var $47=$43|$39;
 var $48=($47>>>0)>65535;
 if($48){label=14;break;}else{var $req_0_i=$46;label=15;break;}
 case 14: 
 var $50=(((($46>>>0))/(($39>>>0)))&-1);
 var $51=($50|0)==($43|0);
 var $__i=($51?$46:-1);
 var $req_0_i=$__i;label=15;break;
 case 15: 
 var $req_0_i;
 var $53=_malloc($req_0_i);
 var $54=($53|0)==0;
 if($54){label=18;break;}else{label=16;break;}
 case 16: 
 var $56=((($53)-(4))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $59=$58&3;
 var $60=($59|0)==0;
 if($60){label=19;break;}else{label=17;break;}
 case 17: 
 _memset($53, 0, $req_0_i)|0;
 label=19;break;
 case 18: 
 ___assert_fail(3880,6944,3567,12280);
 throw "Reached an unreachable!";
 case 19: 
 var $64=(($pr+44)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($mem+$65)|0);
 var $67=$66;
 HEAP32[(($67)>>2)]=$53;
 var $store_0_ph=$53;var $_pre_phi=$40;label=21;break;
 case 20: 
 var $69=(($pr+44)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($mem+$70)|0);
 var $_pre12=(($pr+40)|0);
 var $store_0_ph=$71;var $_pre_phi=$_pre12;label=21;break;
 case 21: 
 var $_pre_phi;
 var $store_0_ph;
 var $72=(($pr+36)|0);
 var $storemerge1=0;label=22;break;
 case 22: 
 var $storemerge1;
 var $74=HEAP32[(($n)>>2)];
 var $75=($storemerge1|0)<($74|0);
 if($75){label=23;break;}else{var $_0=1;label=42;break;}
 case 23: 
 var $77=HEAP32[(($_pre_phi)>>2)];
 var $78=((28712+($77<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(Math_imul($storemerge1,$79)|0);
 var $81=(($store_0_ph+$80)|0);
 var $82=HEAP32[(($72)>>2)];
 var $83=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$81,$82,$77);
 var $84=($83|0)==0;
 if($84){var $_0=0;label=42;break;}else{label=24;break;}
 case 24: 
 var $86=((($storemerge1)+(1))|0);
 var $storemerge1=$86;label=22;break;
 case 25: 
 var $88;
 var $storemerge;
 var $89=($storemerge|0)<($88|0);
 if($89){label=26;break;}else{var $_0=1;label=42;break;}
 case 26: 
 var $91=HEAP32[(($25)>>2)];
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 if($28){label=27;break;}else{label=28;break;}
 case 27: 
 ___assert_fail(7992,6944,563,12056);
 throw "Reached an unreachable!";
 case 28: 
 switch(($91|0)){case 1:case 2:case 3:case 4:case 5:case 6:{ label=29;break;}case 7:case 8:{ label=30;break;}default:{label=31;break;}}break;
 case 29: 
 var $95=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $96=($95|0)==-1;
 if($96){var $_0=0;label=42;break;}else{var $storemerge_i=$95;label=32;break;}
 case 30: 
 var $98=_fscanf($fp,3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$f_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $99=($98|0)==-1;
 if($99){var $_0=0;label=42;break;}else{var $storemerge_i=$98;label=32;break;}
 case 31: 
 ___assert_fail(4208,6944,578,12056);
 throw "Reached an unreachable!";
 case 32: 
 var $storemerge_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $101=($storemerge_i|0)==0;
 if($101){var $_0=0;label=42;break;}else{label=33;break;}
 case 33: 
 var $103=((($storemerge)+(1))|0);
 var $_pre=HEAP32[(($n)>>2)];
 var $storemerge=$103;var $88=$_pre;label=25;break;
 case 34: 
 var $105=(($pr+24)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){label=36;break;}else{label=35;break;}
 case 35: 
 var $109=(($pr+44)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($mem+$110)|0);
 var $112=(($pr+36)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($pr+40)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$111,$113,$115);
 var $_0=$116;label=42;break;
 case 36: 
 var $118=(($pr+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=$t_i2;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $121=$f_i3;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $122=($fp|0)==0;
 if($122){label=37;break;}else{label=38;break;}
 case 37: 
 ___assert_fail(7992,6944,563,12056);
 throw "Reached an unreachable!";
 case 38: 
 switch(($119|0)){case 1:case 2:case 3:case 4:case 5:case 6:{ label=39;break;}case 7:case 8:{ label=40;break;}default:{label=41;break;}}break;
 case 39: 
 var $126=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $127=($126|0)==-1;
 var $_=($127?0:$126);
 var $_0=$_;label=42;break;
 case 40: 
 var $129=_fscanf($fp,3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$f_i3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $130=($129|0)==-1;
 var $_13=($130?0:$129);
 STACKTOP=sp;return $_13;
 case 41: 
 ___assert_fail(4208,6944,578,12056);
 throw "Reached an unreachable!";
 case 42: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply7ReadBinEP8_IO_FILEPKNS0_11PlyPropertyEPvi($fp,$pr,$mem,$fmt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy_i=sp;
 var $n=(sp)+(8);
 var $1=($pr|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(4048,6944,3471,12296);
 throw "Reached an unreachable!";
 case 3: 
 var $4=(($pr+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=28;break;}else{label=4;break;}
 case 4: 
 var $8=$n;
 var $9=(($pr+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=__ZN3vcg3plyL11ReadScalarBEP8_IO_FILEPviii($fp,$8,$10,3,$fmt);
 var $12=($11|0)==0;
 if($12){var $_0=0;label=33;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[(($n)>>2)];
 var $15=($14|0)<12;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 ___assert_fail(3984,6944,3481,12296);
 throw "Reached an unreachable!";
 case 7: 
 var $18=(($pr+24)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 var $21=(($pr+12)|0);
 var $22=(($dummy_i)|0);
 var $23=($fp|0)==0;
 var $storemerge=0;var $83=$14;label=23;break;
 case 9: 
 var $25=(($pr+64)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($mem+$26)|0);
 var $28=(($pr+60)|0);
 var $29=HEAP32[(($28)>>2)];
 __ZN3vcg3plyL8StoreIntEPvii($27,$29,$14);
 var $30=(($pr+52)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==0;
 if($32){label=18;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($n)>>2)];
 var $35=(($pr+40)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((28712+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($34|0)==0;
 if($39){var $req_0_i=0;label=13;break;}else{label=11;break;}
 case 11: 
 var $41=(Math_imul($38,$34)|0);
 var $42=$38|$34;
 var $43=($42>>>0)>65535;
 if($43){label=12;break;}else{var $req_0_i=$41;label=13;break;}
 case 12: 
 var $45=(((($41>>>0))/(($34>>>0)))&-1);
 var $46=($45|0)==($38|0);
 var $__i=($46?$41:-1);
 var $req_0_i=$__i;label=13;break;
 case 13: 
 var $req_0_i;
 var $48=_malloc($req_0_i);
 var $49=($48|0)==0;
 if($49){label=16;break;}else{label=14;break;}
 case 14: 
 var $51=((($48)-(4))|0);
 var $52=$51;
 var $53=HEAP32[(($52)>>2)];
 var $54=$53&3;
 var $55=($54|0)==0;
 if($55){label=17;break;}else{label=15;break;}
 case 15: 
 _memset($48, 0, $req_0_i)|0;
 label=17;break;
 case 16: 
 ___assert_fail(3880,6944,3493,12296);
 throw "Reached an unreachable!";
 case 17: 
 var $59=(($pr+44)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($mem+$60)|0);
 var $62=$61;
 HEAP32[(($62)>>2)]=$48;
 var $store_0_ph=$48;var $_pre_phi=$35;label=19;break;
 case 18: 
 var $64=(($pr+44)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($mem+$65)|0);
 var $_pre6=(($pr+40)|0);
 var $store_0_ph=$66;var $_pre_phi=$_pre6;label=19;break;
 case 19: 
 var $_pre_phi;
 var $store_0_ph;
 var $67=(($pr+36)|0);
 var $storemerge1=0;label=20;break;
 case 20: 
 var $storemerge1;
 var $69=HEAP32[(($n)>>2)];
 var $70=($storemerge1|0)<($69|0);
 if($70){label=21;break;}else{var $_0=1;label=33;break;}
 case 21: 
 var $72=HEAP32[(($_pre_phi)>>2)];
 var $73=((28712+($72<<2))|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(Math_imul($storemerge1,$74)|0);
 var $76=(($store_0_ph+$75)|0);
 var $77=HEAP32[(($67)>>2)];
 var $78=__ZN3vcg3plyL11ReadScalarBEP8_IO_FILEPviii($fp,$76,$77,$72,$fmt);
 var $79=($78|0)==0;
 if($79){var $_0=0;label=33;break;}else{label=22;break;}
 case 22: 
 var $81=((($storemerge1)+(1))|0);
 var $storemerge1=$81;label=20;break;
 case 23: 
 var $83;
 var $storemerge;
 var $84=($storemerge|0)<($83|0);
 if($84){label=24;break;}else{var $_0=1;label=33;break;}
 case 24: 
 var $86=HEAP32[(($21)>>2)];
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 if($23){label=25;break;}else{label=26;break;}
 case 25: 
 ___assert_fail(7992,6944,589,12040);
 throw "Reached an unreachable!";
 case 26: 
 var $88=((28712+($86<<2))|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=_fread($22,1,$89,$fp);
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;

 var $91=($90|0)==0;
 if($91){var $_0=0;label=33;break;}else{label=27;break;}
 case 27: 
 var $93=((($storemerge)+(1))|0);
 var $_pre=HEAP32[(($n)>>2)];
 var $storemerge=$93;var $83=$_pre;label=23;break;
 case 28: 
 var $95=(($pr+24)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){label=30;break;}else{label=29;break;}
 case 29: 
 var $99=(($pr+44)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($mem+$100)|0);
 var $102=(($pr+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($pr+40)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=__ZN3vcg3plyL11ReadScalarBEP8_IO_FILEPviii($fp,$101,$103,$105,$fmt);
 var $_0=$106;label=33;break;
 case 30: 
 var $108=(($pr+12)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($dummy_i)|0);
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $111=($fp|0)==0;
 if($111){label=31;break;}else{label=32;break;}
 case 31: 
 ___assert_fail(7992,6944,589,12040);
 throw "Reached an unreachable!";
 case 32: 
 var $113=((28712+($109<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=_fread($110,1,$114,$fp);
 var $$etemp$3$0=8;
 var $$etemp$3$1=0;

 var $_0=$115;label=33;break;
 case 33: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply7PlyFile4ReadEPv($this,$mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+52)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(3808,6944,3616,12312);
 throw "Reached an unreachable!";
 case 3: 
 var $6=(($this+56)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 ___assert_fail(3760,6944,3617,12312);
 throw "Reached an unreachable!";
 case 5: 
 var $11=(($2+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($this+24)|0);
 var $i_sroa_0_0=$12;var $15=$2;label=6;break;
 case 6: 
 var $15;
 var $i_sroa_0_0;
 var $16=(($15+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($i_sroa_0_0|0)==($17|0);
 if($18){var $storemerge=0;label=9;break;}else{label=7;break;}
 case 7: 
 var $20=(($i_sroa_0_0+72)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=HEAP32[(($13)>>2)];
 var $23=(($i_sroa_0_0+28)|0);
 var $24=FUNCTION_TABLE[$21]($22,$mem,$23);
 if($24){label=8;break;}else{var $storemerge=-1;label=9;break;}
 case 8: 
 var $26=(($i_sroa_0_0+76)|0);
 var $_pre=HEAP32[(($1)>>2)];
 var $i_sroa_0_0=$26;var $15=$_pre;label=6;break;
 case 9: 
 var $storemerge;
 return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg3ply10PlyElementENS_9allocatorIS3_EEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=13;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+4)|0);
 label=3;break;
 case 3: 
 var $6=HEAP32[(($5)>>2)];
 var $7=($2|0)==($6|0);
 if($7){label=12;break;}else{label=4;break;}
 case 4: 
 var $9=((($6)-(28))|0);
 HEAP32[(($5)>>2)]=$9;
 var $10=((($6)-(28)+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=10;break;}else{label=5;break;}
 case 5: 
 var $14=((($6)-(28)+20)|0);
 label=6;break;
 case 6: 
 var $15=HEAP32[(($14)>>2)];
 var $16=($11|0)==($15|0);
 if($16){label=9;break;}else{label=7;break;}
 case 7: 
 var $18=((($15)-(76))|0);
 HEAP32[(($14)>>2)]=$18;
 var $19=$18;
 var $20=HEAP8[(($19)>>0)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 8: 
 var $24=((($15)-(76)+8)|0);
 var $25=HEAP32[(($24)>>2)];
 _free($25);
 label=6;break;
 case 9: 
 var $26=HEAP32[(($10)>>2)];
 var $27=$26;
 _free($27);
 label=10;break;
 case 10: 
 var $28=$9;
 var $29=HEAP8[(($28)>>0)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=3;break;}else{label=11;break;}
 case 11: 
 var $33=((($6)-(28)+8)|0);
 var $34=HEAP32[(($33)>>2)];
 _free($34);
 label=3;break;
 case 12: 
 var $35=HEAP32[(($1)>>2)];
 var $36=$35;
 _free($36);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply10PlyElementC2ERKS1_($this,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$0;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=13;break;
 case 3: 
 var $9=(($0+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($0+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$this;
 HEAP8[(($20)>>0)]=$19;
 var $21=$this;
 var $22=(($21+1)|0);
 var $__p_0_i=$22;label=12;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 var $26=_malloc($_size_i);
 var $27=($26|0)==0;
 if($27){label=8;break;}else{var $_lcssa_i=$26;label=11;break;}
 case 8: 
 var $28=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $29=($28|0)==0;
 if($29){label=10;break;}else{label=9;break;}
 case 9: 
 var $31=$28;
 FUNCTION_TABLE[$31]();
 var $32=_malloc($_size_i);
 var $33=($32|0)==0;
 if($33){label=8;break;}else{var $_lcssa_i=$32;label=11;break;}
 case 10: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=15192;
 ___cxa_throw($35,26096,(782));
 throw "Reached an unreachable!";
 case 11: 
 var $_lcssa_i;
 var $37=(($this+8)|0);
 HEAP32[(($37)>>2)]=$_lcssa_i;
 var $38=$24|1;
 var $39=(($this)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($this+4)|0);
 HEAP32[(($40)>>2)]=$12;
 var $__p_0_i=$_lcssa_i;label=12;break;
 case 12: 
 var $__p_0_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i, $10, $12)|0);
 var $41=(($__p_0_i+$12)|0);
 HEAP8[(($41)>>0)]=0;
 label=13;break;
 case 13: 
 var $42=(($this+12)|0);
 var $43=(($0+12)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP32[(($42)>>2)]=$44;
 var $45=(($this+16)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=(($this+20)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($this+24)|0);
 HEAP32[(($47)>>2)]=0;
 var $48=(($0+20)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($0+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$49;
 var $53=$51;
 var $54=((($52)-($53))|0);
 var $55=(((($54|0))/(76))&-1);
 var $56=($49|0)==($51|0);
 if($56){label=60;break;}else{label=14;break;}
 case 14: 
 var $58=($55>>>0)>56512727;
 if($58){label=15;break;}else{label=26;break;}
 case 15: 
 var $59=___cxa_allocate_exception(8);
 var $60=$59;
 HEAP32[(($60)>>2)]=15352;
 var $61=(($59+4)|0);
 var $62=_strlen(1736);
 var $63=((($62)+(13))|0);
 var $64=($63|0)==0;
 var $_size_i1_i_i=($64?1:$63);
 var $65=_malloc($_size_i1_i_i);
 var $66=($65|0)==0;
 if($66){label=16;break;}else{var $_lcssa_i3_i_i=$65;label=21;break;}
 case 16: 
 var $67=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $68=($67|0)==0;
 if($68){label=19;break;}else{label=17;break;}
 case 17: 
 var $70=$67;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=23;break; }
 case 18: 
 var $71=_malloc($_size_i1_i_i);
 var $72=($71|0)==0;
 if($72){label=16;break;}else{var $_lcssa_i3_i_i=$71;label=21;break;}
 case 19: 
 var $74=___cxa_allocate_exception(4);
 var $75=$74;
 HEAP32[(($75)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($74,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=24;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $_lcssa_i3_i_i;
 var $76=$_lcssa_i3_i_i;
 HEAP32[(($76)>>2)]=$62;
 var $77=(($_lcssa_i3_i_i+4)|0);
 var $78=$77;
 HEAP32[(($78)>>2)]=$62;
 var $79=(($_lcssa_i3_i_i+8)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=0;
 var $81=(($_lcssa_i3_i_i+12)|0);
 var $82=((($62)+(1))|0);
 assert($82 % 1 === 0);(_memcpy($81, 1736, $82)|0);
 var $83=$61;
 HEAP32[(($83)>>2)]=$81;
 HEAP32[(($60)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($59,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=54;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=25;break;
 case 24: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=25;break;
 case 25: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($59);
 var $eh_lpad_body_i$1=$lpad_phi$1;var $eh_lpad_body_i$0=$lpad_phi$0;label=55;break;
 case 26: 
 var $86=($49|0)==($51|0);
 var $_size_i_i_i=($86?1:$54);
 var $87=_malloc($_size_i_i_i);
 var $88=($87|0)==0;
 if($88){label=27;break;}else{var $_lcssa_i_i_i=$87;label=32;break;}
 case 27: 
 var $89=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $90=($89|0)==0;
 if($90){label=30;break;}else{label=28;break;}
 case 28: 
 var $92=$89;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=53;break; }
 case 29: 
 var $93=_malloc($_size_i_i_i);
 var $94=($93|0)==0;
 if($94){label=27;break;}else{var $_lcssa_i_i_i=$93;label=32;break;}
 case 30: 
 var $96=___cxa_allocate_exception(4);
 var $97=$96;
 HEAP32[(($97)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($96,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=54;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i_i;
 var $98=$_lcssa_i_i_i;
 HEAP32[(($46)>>2)]=$98;
 HEAP32[(($45)>>2)]=$98;
 var $99=(($98+((($55)*(76))&-1))|0);
 HEAP32[(($47)>>2)]=$99;
 var $100=HEAP32[(($50)>>2)];
 var $101=HEAP32[(($48)>>2)];
 var $_0=$100;var $103=$98;label=33;break;
 case 33: 
 var $103;
 var $_0;
 var $104=($_0|0)==($101|0);
 if($104){label=60;break;}else{label=34;break;}
 case 34: 
 var $106=($103|0)==0;
 if($106){var $152=0;label=51;break;}else{label=35;break;}
 case 35: 
 var $108=$_0;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=36;break;}else{label=37;break;}
 case 36: 
 var $113=$103;
 assert(12 % 1 === 0);HEAP32[(($113)>>2)]=HEAP32[(($108)>>2)];HEAP32[((($113)+(4))>>2)]=HEAP32[((($108)+(4))>>2)];HEAP32[((($113)+(8))>>2)]=HEAP32[((($108)+(8))>>2)];
 label=50;break;
 case 37: 
 var $115=(($_0+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($_0+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($118>>>0)>4294967279;
 if($119){label=38;break;}else{label=40;break;}
 case 38: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=54;break; }
 case 39: 
 throw "Reached an unreachable!";
 case 40: 
 var $122=($118>>>0)<11;
 if($122){label=41;break;}else{label=42;break;}
 case 41: 
 var $124=$118<<1;
 var $125=(($124)&255);
 var $126=$103;
 HEAP8[(($126)>>0)]=$125;
 var $127=$103;
 var $128=(($127+1)|0);
 var $__p_0_i_i_i_i=$128;label=49;break;
 case 42: 
 var $129=((($118)+(16))|0);
 var $130=$129&-16;
 var $131=($130|0)==0;
 var $_size_i_i_i_i=($131?1:$130);
 var $132=_malloc($_size_i_i_i_i);
 var $133=($132|0)==0;
 if($133){label=43;break;}else{var $_lcssa_i_i_i_i=$132;label=48;break;}
 case 43: 
 var $134=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $135=($134|0)==0;
 if($135){label=46;break;}else{label=44;break;}
 case 44: 
 var $137=$134;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=52;break; }
 case 45: 
 var $138=_malloc($_size_i_i_i_i);
 var $139=($138|0)==0;
 if($139){label=43;break;}else{var $_lcssa_i_i_i_i=$138;label=48;break;}
 case 46: 
 var $141=___cxa_allocate_exception(4);
 var $142=$141;
 HEAP32[(($142)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($141,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=54;break; }
 case 47: 
 throw "Reached an unreachable!";
 case 48: 
 var $_lcssa_i_i_i_i;
 var $143=(($103+8)|0);
 HEAP32[(($143)>>2)]=$_lcssa_i_i_i_i;
 var $144=$130|1;
 var $145=(($103)|0);
 HEAP32[(($145)>>2)]=$144;
 var $146=(($103+4)|0);
 HEAP32[(($146)>>2)]=$118;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=49;break;
 case 49: 
 var $__p_0_i_i_i_i;
 assert($118 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $116, $118)|0);
 var $147=(($__p_0_i_i_i_i+$118)|0);
 HEAP8[(($147)>>0)]=0;
 label=50;break;
 case 50: 
 var $148=(($103+12)|0);
 var $149=(($_0+12)|0);
 var $150=$148;
 var $151=$149;
 assert(64 % 1 === 0);(_memcpy($150, $151, 64)|0);
 var $_pre=HEAP32[(($46)>>2)];
 var $152=$_pre;label=51;break;
 case 51: 
 var $152;
 var $153=(($152+76)|0);
 HEAP32[(($46)>>2)]=$153;
 var $154=(($_0+76)|0);
 var $_0=$154;var $103=$153;label=33;break;
 case 52: 
 var $lpad_loopexit3$0 = ___cxa_find_matching_catch(); var $lpad_loopexit3$1 = tempRet0;
 var $eh_lpad_body_i$1=$lpad_loopexit3$1;var $eh_lpad_body_i$0=$lpad_loopexit3$0;label=55;break;
 case 53: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $eh_lpad_body_i$1=$lpad_loopexit6$1;var $eh_lpad_body_i$0=$lpad_loopexit6$0;label=55;break;
 case 54: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $eh_lpad_body_i$1=$lpad_nonloopexit7$1;var $eh_lpad_body_i$0=$lpad_nonloopexit7$0;label=55;break;
 case 55: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $155=HEAP32[(($45)>>2)];
 var $156=($155|0)==0;
 if($156){label=61;break;}else{label=56;break;}
 case 56: 
 var $157=HEAP32[(($46)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=59;break;}else{label=57;break;}
 case 57: 
 var $160=((($157)-(76))|0);
 HEAP32[(($46)>>2)]=$160;
 var $161=$160;
 var $162=HEAP8[(($161)>>0)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=56;break;}else{label=58;break;}
 case 58: 
 var $166=((($157)-(76)+8)|0);
 var $167=HEAP32[(($166)>>2)];
 _free($167);
 label=56;break;
 case 59: 
 var $168=HEAP32[(($45)>>2)];
 var $169=$168;
 _free($169);
 label=61;break;
 case 60: 
 var $170=HEAP32[(($43)>>2)];
 HEAP32[(($42)>>2)]=$170;
 return;
 case 61: 
 var $171=$this;
 var $172=HEAP8[(($171)>>0)];
 var $173=$172&1;
 var $174=(($173<<24)>>24)==0;
 if($174){label=63;break;}else{label=62;break;}
 case 62: 
 var $176=(($this+8)|0);
 var $177=HEAP32[(($176)>>2)];
 _free($177);
 label=63;break;
 case 63: 
 ___resumeException($eh_lpad_body_i$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$mem,$tf,$tm){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t_i9=sp;
 var $t_i6=(sp)+(8);
 var $t_i2=(sp)+(16);
 var $t_i=(sp)+(24);
 var $in=(sp)+(32);
 var $ui=(sp)+(40);
 var $fl=(sp)+(48);
 var $dd=(sp)+(56);
 switch(($tf|0)){case 2:{ label=14;break;}case 1:{ label=2;break;}case 3:{ label=26;break;}case 4:{ label=38;break;}case 5:{ label=50;break;}case 6:{ label=62;break;}case 7:{ label=74;break;}case 8:{ label=80;break;}default:{label=86;break;}}break;
 case 2: 
 var $2=$t_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $3=($fp|0)==0;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 ___assert_fail(7992,6944,453,10592);
 throw "Reached an unreachable!";
 case 4: 
 var $5=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($5|0)==-1;
 var $_=($6?0:$5);
 var $7=HEAP32[(($t_i)>>2)];
 var $8=(($7)&255);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 switch(($tm|0)){case 6:{ label=10;break;}case 7:{ label=11;break;}case 8:{ label=12;break;}case 1:{ label=5;break;}case 2:{ label=6;break;}case 3:{ label=7;break;}case 4:{ label=8;break;}case 5:{ label=9;break;}default:{label=13;break;}}break;
 case 5: 
 HEAP8[(($mem)>>0)]=$8;
 var $r_0=$_;label=87;break;
 case 6: 
 var $11=(($8<<24)>>24);
 var $12=$mem;
 HEAP16[(($12)>>1)]=$11;
 var $r_0=$_;label=87;break;
 case 7: 
 var $14=(($8<<24)>>24);
 var $15=$mem;
 HEAP32[(($15)>>2)]=$14;
 var $r_0=$_;label=87;break;
 case 8: 
 HEAP8[(($mem)>>0)]=$8;
 var $r_0=$_;label=87;break;
 case 9: 
 var $18=(($8<<24)>>24);
 var $19=$mem;
 HEAP16[(($19)>>1)]=$18;
 var $r_0=$_;label=87;break;
 case 10: 
 var $21=(($8<<24)>>24);
 var $22=$mem;
 HEAP32[(($22)>>2)]=$21;
 var $r_0=$_;label=87;break;
 case 11: 
 var $24=(($8<<24)>>24);
 var $25=$mem;
 HEAPF32[(($25)>>2)]=$24;
 var $r_0=$_;label=87;break;
 case 12: 
 var $27=(($8<<24)>>24);
 var $28=$mem;
 HEAPF64[(($28)>>3)]=$27;
 var $r_0=$_;label=87;break;
 case 13: 
 ___assert_fail(4208,6944,752,12120);
 throw "Reached an unreachable!";
 case 14: 
 var $31=$t_i2;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $32=($fp|0)==0;
 if($32){label=15;break;}else{label=16;break;}
 case 15: 
 ___assert_fail(7992,6944,465,12232);
 throw "Reached an unreachable!";
 case 16: 
 var $34=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $35=($34|0)==-1;
 var $_14=($35?0:$34);
 var $36=HEAP32[(($t_i2)>>2)];
 var $37=(($36)&65535);
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 switch(($tm|0)){case 1:{ label=17;break;}case 2:{ label=18;break;}case 3:{ label=19;break;}case 4:{ label=20;break;}case 5:{ label=21;break;}case 6:{ label=22;break;}case 7:{ label=23;break;}case 8:{ label=24;break;}default:{label=25;break;}}break;
 case 17: 
 var $39=(($36)&255);
 HEAP8[(($mem)>>0)]=$39;
 var $r_0=$_14;label=87;break;
 case 18: 
 var $41=$mem;
 HEAP16[(($41)>>1)]=$37;
 var $r_0=$_14;label=87;break;
 case 19: 
 var $43=(($37<<16)>>16);
 var $44=$mem;
 HEAP32[(($44)>>2)]=$43;
 var $r_0=$_14;label=87;break;
 case 20: 
 var $46=(($36)&255);
 HEAP8[(($mem)>>0)]=$46;
 var $r_0=$_14;label=87;break;
 case 21: 
 var $48=$mem;
 HEAP16[(($48)>>1)]=$37;
 var $r_0=$_14;label=87;break;
 case 22: 
 var $50=(($37<<16)>>16);
 var $51=$mem;
 HEAP32[(($51)>>2)]=$50;
 var $r_0=$_14;label=87;break;
 case 23: 
 var $53=(($37<<16)>>16);
 var $54=$mem;
 HEAPF32[(($54)>>2)]=$53;
 var $r_0=$_14;label=87;break;
 case 24: 
 var $56=(($37<<16)>>16);
 var $57=$mem;
 HEAPF64[(($57)>>3)]=$56;
 var $r_0=$_14;label=87;break;
 case 25: 
 ___assert_fail(4208,6944,767,12120);
 throw "Reached an unreachable!";
 case 26: 
 var $60=($fp|0)==0;
 if($60){label=27;break;}else{label=28;break;}
 case 27: 
 ___assert_fail(7992,6944,477,10640);
 throw "Reached an unreachable!";
 case 28: 
 var $62=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$in,tempVarArgs)); STACKTOP=tempVarArgs;
 var $63=($62|0)==-1;
 var $_15=($63?0:$62);
 switch(($tm|0)){case 1:{ label=29;break;}case 2:{ label=30;break;}case 3:{ label=31;break;}case 4:{ label=32;break;}case 5:{ label=33;break;}case 6:{ label=34;break;}case 7:{ label=35;break;}case 8:{ label=36;break;}default:{label=37;break;}}break;
 case 29: 
 var $65=HEAP32[(($in)>>2)];
 var $66=(($65)&255);
 HEAP8[(($mem)>>0)]=$66;
 var $r_0=$_15;label=87;break;
 case 30: 
 var $68=HEAP32[(($in)>>2)];
 var $69=(($68)&65535);
 var $70=$mem;
 HEAP16[(($70)>>1)]=$69;
 var $r_0=$_15;label=87;break;
 case 31: 
 var $72=HEAP32[(($in)>>2)];
 var $73=$mem;
 HEAP32[(($73)>>2)]=$72;
 var $r_0=$_15;label=87;break;
 case 32: 
 var $75=HEAP32[(($in)>>2)];
 var $76=(($75)&255);
 HEAP8[(($mem)>>0)]=$76;
 var $r_0=$_15;label=87;break;
 case 33: 
 var $78=HEAP32[(($in)>>2)];
 var $79=(($78)&65535);
 var $80=$mem;
 HEAP16[(($80)>>1)]=$79;
 var $r_0=$_15;label=87;break;
 case 34: 
 var $82=HEAP32[(($in)>>2)];
 var $83=$mem;
 HEAP32[(($83)>>2)]=$82;
 var $r_0=$_15;label=87;break;
 case 35: 
 var $85=HEAP32[(($in)>>2)];
 var $86=($85|0);
 var $87=$mem;
 HEAPF32[(($87)>>2)]=$86;
 var $r_0=$_15;label=87;break;
 case 36: 
 var $89=HEAP32[(($in)>>2)];
 var $90=($89|0);
 var $91=$mem;
 HEAPF64[(($91)>>3)]=$90;
 var $r_0=$_15;label=87;break;
 case 37: 
 ___assert_fail(4208,6944,782,12120);
 throw "Reached an unreachable!";
 case 38: 
 var $94=$t_i6;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $95=($fp|0)==0;
 if($95){label=39;break;}else{label=40;break;}
 case 39: 
 ___assert_fail(7992,6944,485,12200);
 throw "Reached an unreachable!";
 case 40: 
 var $97=_fscanf($fp,3232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $98=($97|0)==-1;
 var $_16=($98?0:$97);
 var $99=HEAP32[(($t_i6)>>2)];
 var $100=(($99)&255);
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 switch(($tm|0)){case 1:{ label=41;break;}case 2:{ label=42;break;}case 3:{ label=43;break;}case 4:{ label=44;break;}case 5:{ label=45;break;}case 6:{ label=46;break;}case 7:{ label=47;break;}case 8:{ label=48;break;}default:{label=49;break;}}break;
 case 41: 
 HEAP8[(($mem)>>0)]=$100;
 var $r_0=$_16;label=87;break;
 case 42: 
 var $103=(($99)&65535);
 var $104=$103&255;
 var $105=$mem;
 HEAP16[(($105)>>1)]=$104;
 var $r_0=$_16;label=87;break;
 case 43: 
 var $107=$99&255;
 var $108=$mem;
 HEAP32[(($108)>>2)]=$107;
 var $r_0=$_16;label=87;break;
 case 44: 
 HEAP8[(($mem)>>0)]=$100;
 var $r_0=$_16;label=87;break;
 case 45: 
 var $111=(($99)&65535);
 var $112=$111&255;
 var $113=$mem;
 HEAP16[(($113)>>1)]=$112;
 var $r_0=$_16;label=87;break;
 case 46: 
 var $115=$99&255;
 var $116=$mem;
 HEAP32[(($116)>>2)]=$115;
 var $r_0=$_16;label=87;break;
 case 47: 
 var $118=($100&255);
 var $119=$mem;
 HEAPF32[(($119)>>2)]=$118;
 var $r_0=$_16;label=87;break;
 case 48: 
 var $121=($100&255);
 var $122=$mem;
 HEAPF64[(($122)>>3)]=$121;
 var $r_0=$_16;label=87;break;
 case 49: 
 ___assert_fail(4208,6944,797,12120);
 throw "Reached an unreachable!";
 case 50: 
 var $125=$t_i9;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $126=($fp|0)==0;
 if($126){label=51;break;}else{label=52;break;}
 case 51: 
 ___assert_fail(7992,6944,498,12088);
 throw "Reached an unreachable!";
 case 52: 
 var $128=_fscanf($fp,3232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$t_i9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $129=($128|0)==-1;
 var $_17=($129?0:$128);
 var $130=HEAP32[(($t_i9)>>2)];
 var $131=(($130)&65535);
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 switch(($tm|0)){case 1:{ label=53;break;}case 2:{ label=54;break;}case 3:{ label=55;break;}case 4:{ label=56;break;}case 5:{ label=57;break;}case 6:{ label=58;break;}case 7:{ label=59;break;}case 8:{ label=60;break;}default:{label=61;break;}}break;
 case 53: 
 var $133=(($130)&255);
 HEAP8[(($mem)>>0)]=$133;
 var $r_0=$_17;label=87;break;
 case 54: 
 var $135=$mem;
 HEAP16[(($135)>>1)]=$131;
 var $r_0=$_17;label=87;break;
 case 55: 
 var $137=$130&65535;
 var $138=$mem;
 HEAP32[(($138)>>2)]=$137;
 var $r_0=$_17;label=87;break;
 case 56: 
 var $140=(($130)&255);
 HEAP8[(($mem)>>0)]=$140;
 var $r_0=$_17;label=87;break;
 case 57: 
 var $142=$mem;
 HEAP16[(($142)>>1)]=$131;
 var $r_0=$_17;label=87;break;
 case 58: 
 var $144=$130&65535;
 var $145=$mem;
 HEAP32[(($145)>>2)]=$144;
 var $r_0=$_17;label=87;break;
 case 59: 
 var $147=($131&65535);
 var $148=$mem;
 HEAPF32[(($148)>>2)]=$147;
 var $r_0=$_17;label=87;break;
 case 60: 
 var $150=($131&65535);
 var $151=$mem;
 HEAPF64[(($151)>>3)]=$150;
 var $r_0=$_17;label=87;break;
 case 61: 
 ___assert_fail(4208,6944,812,12120);
 throw "Reached an unreachable!";
 case 62: 
 var $154=($fp|0)==0;
 if($154){label=63;break;}else{label=64;break;}
 case 63: 
 ___assert_fail(7992,6944,511,10560);
 throw "Reached an unreachable!";
 case 64: 
 var $156=_fscanf($fp,3232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$ui,tempVarArgs)); STACKTOP=tempVarArgs;
 var $157=($156|0)==-1;
 var $_18=($157?0:$156);
 switch(($tm|0)){case 1:{ label=65;break;}case 2:{ label=66;break;}case 3:{ label=67;break;}case 4:{ label=68;break;}case 5:{ label=69;break;}case 6:{ label=70;break;}case 7:{ label=71;break;}case 8:{ label=72;break;}default:{label=73;break;}}break;
 case 65: 
 var $159=HEAP32[(($ui)>>2)];
 var $160=(($159)&255);
 HEAP8[(($mem)>>0)]=$160;
 var $r_0=$_18;label=87;break;
 case 66: 
 var $162=HEAP32[(($ui)>>2)];
 var $163=(($162)&65535);
 var $164=$mem;
 HEAP16[(($164)>>1)]=$163;
 var $r_0=$_18;label=87;break;
 case 67: 
 var $166=HEAP32[(($ui)>>2)];
 var $167=$mem;
 HEAP32[(($167)>>2)]=$166;
 var $r_0=$_18;label=87;break;
 case 68: 
 var $169=HEAP32[(($ui)>>2)];
 var $170=(($169)&255);
 HEAP8[(($mem)>>0)]=$170;
 var $r_0=$_18;label=87;break;
 case 69: 
 var $172=HEAP32[(($ui)>>2)];
 var $173=(($172)&65535);
 var $174=$mem;
 HEAP16[(($174)>>1)]=$173;
 var $r_0=$_18;label=87;break;
 case 70: 
 var $176=HEAP32[(($ui)>>2)];
 var $177=$mem;
 HEAP32[(($177)>>2)]=$176;
 var $r_0=$_18;label=87;break;
 case 71: 
 var $179=HEAP32[(($ui)>>2)];
 var $180=($179>>>0);
 var $181=$mem;
 HEAPF32[(($181)>>2)]=$180;
 var $r_0=$_18;label=87;break;
 case 72: 
 var $183=HEAP32[(($ui)>>2)];
 var $184=($183>>>0);
 var $185=$mem;
 HEAPF64[(($185)>>3)]=$184;
 var $r_0=$_18;label=87;break;
 case 73: 
 ___assert_fail(4208,6944,827,12120);
 throw "Reached an unreachable!";
 case 74: 
 var $188=($fp|0)==0;
 if($188){label=75;break;}else{label=76;break;}
 case 75: 
 ___assert_fail(7992,6944,519,12264);
 throw "Reached an unreachable!";
 case 76: 
 var $190=_fscanf($fp,3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$fl,tempVarArgs)); STACKTOP=tempVarArgs;
 var $191=($190|0)==-1;
 var $_19=($191?0:$190);
 if(($tm|0)==7){ label=77;break;}else if(($tm|0)==8){ label=78;break;}else{label=79;break;}
 case 77: 
 var $193=HEAPF32[(($fl)>>2)];
 var $194=$mem;
 HEAPF32[(($194)>>2)]=$193;
 var $r_0=$_19;label=87;break;
 case 78: 
 var $196=HEAPF32[(($fl)>>2)];
 var $197=$196;
 var $198=$mem;
 HEAPF64[(($198)>>3)]=$197;
 var $r_0=$_19;label=87;break;
 case 79: 
 ___assert_fail(4208,6944,836,12120);
 throw "Reached an unreachable!";
 case 80: 
 var $201=($fp|0)==0;
 if($201){label=81;break;}else{label=82;break;}
 case 81: 
 ___assert_fail(7992,6944,528,12152);
 throw "Reached an unreachable!";
 case 82: 
 var $203=_fscanf($fp,3440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$dd,tempVarArgs)); STACKTOP=tempVarArgs;
 var $204=($203|0)==-1;
 var $_20=($204?0:$203);
 if(($tm|0)==7){ label=83;break;}else if(($tm|0)==8){ label=84;break;}else{label=85;break;}
 case 83: 
 var $206=HEAPF64[(($dd)>>3)];
 var $207=$206;
 var $208=$mem;
 HEAPF32[(($208)>>2)]=$207;
 var $r_0=$_20;label=87;break;
 case 84: 
 var $210=HEAPF64[(($dd)>>3)];
 var $211=$mem;
 HEAPF64[(($211)>>3)]=$210;
 var $r_0=$_20;label=87;break;
 case 85: 
 ___assert_fail(4208,6944,845,12120);
 throw "Reached an unreachable!";
 case 86: 
 ___assert_fail(4208,6944,849,12120);
 throw "Reached an unreachable!";
 case 87: 
 var $r_0;
 STACKTOP=sp;return $r_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL8StoreIntEPvii($mem,$tm,$val){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(3856,6944,540,10608);
 throw "Reached an unreachable!";
 case 3: 
 switch(($tm|0)){case 7:{ label=10;break;}case 8:{ label=11;break;}case 1:{ label=4;break;}case 2:{ label=5;break;}case 3:{ label=6;break;}case 4:{ label=7;break;}case 5:{ label=8;break;}case 6:{ label=9;break;}default:{label=12;break;}}break;
 case 4: 
 var $5=(($val)&255);
 HEAP8[(($mem)>>0)]=$5;
 label=13;break;
 case 5: 
 var $7=(($val)&65535);
 var $8=$mem;
 HEAP16[(($8)>>1)]=$7;
 label=13;break;
 case 6: 
 var $10=$mem;
 HEAP32[(($10)>>2)]=$val;
 label=13;break;
 case 7: 
 var $12=(($val)&255);
 HEAP8[(($mem)>>0)]=$12;
 label=13;break;
 case 8: 
 var $14=(($val)&65535);
 var $15=$mem;
 HEAP16[(($15)>>1)]=$14;
 label=13;break;
 case 9: 
 var $17=$mem;
 HEAP32[(($17)>>2)]=$val;
 label=13;break;
 case 10: 
 var $19=($val|0);
 var $20=$mem;
 HEAPF32[(($20)>>2)]=$19;
 label=13;break;
 case 11: 
 var $22=($val|0);
 var $23=$mem;
 HEAPF64[(($23)>>3)]=$22;
 label=13;break;
 case 12: 
 ___assert_fail(4208,6944,552,10608);
 throw "Reached an unreachable!";
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL11ReadScalarBEP8_IO_FILEPviii($fp,$mem,$tf,$tm,$fmt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ch=sp;
 var $sh=(sp)+(8);
 var $in=(sp)+(16);
 var $uc=(sp)+(24);
 var $us=(sp)+(32);
 var $ui=(sp)+(40);
 var $fl=(sp)+(48);
 var $dd=(sp)+(56);
 switch(($tf|0)){case 2:{ label=14;break;}case 1:{ label=2;break;}case 3:{ label=28;break;}case 4:{ label=42;break;}case 5:{ label=54;break;}case 6:{ label=68;break;}case 7:{ label=82;break;}case 8:{ label=90;break;}default:{label=98;break;}}break;
 case 2: 
 var $2=($fp|0)==0;
 if($2){label=3;break;}else{label=4;break;}
 case 3: 
 ___assert_fail(7992,6944,197,10576);
 throw "Reached an unreachable!";
 case 4: 
 var $4=_fread($ch,1,1,$fp);
 switch(($tm|0)){case 6:{ label=10;break;}case 7:{ label=11;break;}case 8:{ label=12;break;}case 1:{ label=5;break;}case 2:{ label=6;break;}case 3:{ label=7;break;}case 4:{ label=8;break;}case 5:{ label=9;break;}default:{label=13;break;}}break;
 case 5: 
 var $6=HEAP8[(($ch)>>0)];
 HEAP8[(($mem)>>0)]=$6;
 var $r_0=$4;label=99;break;
 case 6: 
 var $8=HEAP8[(($ch)>>0)];
 var $9=(($8<<24)>>24);
 var $10=$mem;
 HEAP16[(($10)>>1)]=$9;
 var $r_0=$4;label=99;break;
 case 7: 
 var $12=HEAP8[(($ch)>>0)];
 var $13=(($12<<24)>>24);
 var $14=$mem;
 HEAP32[(($14)>>2)]=$13;
 var $r_0=$4;label=99;break;
 case 8: 
 var $16=HEAP8[(($ch)>>0)];
 HEAP8[(($mem)>>0)]=$16;
 var $r_0=$4;label=99;break;
 case 9: 
 var $18=HEAP8[(($ch)>>0)];
 var $19=(($18<<24)>>24);
 var $20=$mem;
 HEAP16[(($20)>>1)]=$19;
 var $r_0=$4;label=99;break;
 case 10: 
 var $22=HEAP8[(($ch)>>0)];
 var $23=(($22<<24)>>24);
 var $24=$mem;
 HEAP32[(($24)>>2)]=$23;
 var $r_0=$4;label=99;break;
 case 11: 
 var $26=HEAP8[(($ch)>>0)];
 var $27=(($26<<24)>>24);
 var $28=$mem;
 HEAPF32[(($28)>>2)]=$27;
 var $r_0=$4;label=99;break;
 case 12: 
 var $30=HEAP8[(($ch)>>0)];
 var $31=(($30<<24)>>24);
 var $32=$mem;
 HEAPF64[(($32)>>3)]=$31;
 var $r_0=$4;label=99;break;
 case 13: 
 ___assert_fail(4208,6944,620,12104);
 throw "Reached an unreachable!";
 case 14: 
 var $35=($fp|0)==0;
 if($35){label=15;break;}else{label=16;break;}
 case 15: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 16: 
 var $38=$sh;
 var $39=_fread($38,2,1,$fp);
 var $40=($fmt|0)==3;
 if($40){label=17;break;}else{label=18;break;}
 case 17: 
 var $41=HEAP16[(($sh)>>1)];
 var $42=_llvm_bswap_i16($41);
 HEAP16[(($sh)>>1)]=$42;
 label=18;break;
 case 18: 
 switch(($tm|0)){case 1:{ label=19;break;}case 2:{ label=20;break;}case 3:{ label=21;break;}case 4:{ label=22;break;}case 5:{ label=23;break;}case 6:{ label=24;break;}case 7:{ label=25;break;}case 8:{ label=26;break;}default:{label=27;break;}}break;
 case 19: 
 var $44=HEAP16[(($sh)>>1)];
 var $45=(($44)&255);
 HEAP8[(($mem)>>0)]=$45;
 var $r_0=$39;label=99;break;
 case 20: 
 var $47=HEAP16[(($sh)>>1)];
 var $48=$mem;
 HEAP16[(($48)>>1)]=$47;
 var $r_0=$39;label=99;break;
 case 21: 
 var $50=HEAP16[(($sh)>>1)];
 var $51=(($50<<16)>>16);
 var $52=$mem;
 HEAP32[(($52)>>2)]=$51;
 var $r_0=$39;label=99;break;
 case 22: 
 var $54=HEAP16[(($sh)>>1)];
 var $55=(($54)&255);
 HEAP8[(($mem)>>0)]=$55;
 var $r_0=$39;label=99;break;
 case 23: 
 var $57=HEAP16[(($sh)>>1)];
 var $58=$mem;
 HEAP16[(($58)>>1)]=$57;
 var $r_0=$39;label=99;break;
 case 24: 
 var $60=HEAP16[(($sh)>>1)];
 var $61=(($60<<16)>>16);
 var $62=$mem;
 HEAP32[(($62)>>2)]=$61;
 var $r_0=$39;label=99;break;
 case 25: 
 var $64=HEAP16[(($sh)>>1)];
 var $65=(($64<<16)>>16);
 var $66=$mem;
 HEAPF32[(($66)>>2)]=$65;
 var $r_0=$39;label=99;break;
 case 26: 
 var $68=HEAP16[(($sh)>>1)];
 var $69=(($68<<16)>>16);
 var $70=$mem;
 HEAPF64[(($70)>>3)]=$69;
 var $r_0=$39;label=99;break;
 case 27: 
 ___assert_fail(4208,6944,635,12104);
 throw "Reached an unreachable!";
 case 28: 
 var $73=($fp|0)==0;
 if($73){label=29;break;}else{label=30;break;}
 case 29: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 30: 
 var $76=$in;
 var $77=_fread($76,4,1,$fp);
 var $78=($fmt|0)==3;
 if($78){label=31;break;}else{label=32;break;}
 case 31: 
 var $79=HEAP32[(($in)>>2)];
 var $80=_llvm_bswap_i32($79);
 HEAP32[(($in)>>2)]=$80;
 label=32;break;
 case 32: 
 switch(($tm|0)){case 1:{ label=33;break;}case 2:{ label=34;break;}case 3:{ label=35;break;}case 4:{ label=36;break;}case 5:{ label=37;break;}case 6:{ label=38;break;}case 7:{ label=39;break;}case 8:{ label=40;break;}default:{label=41;break;}}break;
 case 33: 
 var $82=HEAP32[(($in)>>2)];
 var $83=(($82)&255);
 HEAP8[(($mem)>>0)]=$83;
 var $r_0=$77;label=99;break;
 case 34: 
 var $85=HEAP32[(($in)>>2)];
 var $86=(($85)&65535);
 var $87=$mem;
 HEAP16[(($87)>>1)]=$86;
 var $r_0=$77;label=99;break;
 case 35: 
 var $89=HEAP32[(($in)>>2)];
 var $90=$mem;
 HEAP32[(($90)>>2)]=$89;
 var $r_0=$77;label=99;break;
 case 36: 
 var $92=HEAP32[(($in)>>2)];
 var $93=(($92)&255);
 HEAP8[(($mem)>>0)]=$93;
 var $r_0=$77;label=99;break;
 case 37: 
 var $95=HEAP32[(($in)>>2)];
 var $96=(($95)&65535);
 var $97=$mem;
 HEAP16[(($97)>>1)]=$96;
 var $r_0=$77;label=99;break;
 case 38: 
 var $99=HEAP32[(($in)>>2)];
 var $100=$mem;
 HEAP32[(($100)>>2)]=$99;
 var $r_0=$77;label=99;break;
 case 39: 
 var $102=HEAP32[(($in)>>2)];
 var $103=($102|0);
 var $104=$mem;
 HEAPF32[(($104)>>2)]=$103;
 var $r_0=$77;label=99;break;
 case 40: 
 var $106=HEAP32[(($in)>>2)];
 var $107=($106|0);
 var $108=$mem;
 HEAPF64[(($108)>>3)]=$107;
 var $r_0=$77;label=99;break;
 case 41: 
 ___assert_fail(4208,6944,650,12104);
 throw "Reached an unreachable!";
 case 42: 
 var $111=($fp|0)==0;
 if($111){label=43;break;}else{label=44;break;}
 case 43: 
 ___assert_fail(7992,6944,244,12184);
 throw "Reached an unreachable!";
 case 44: 
 var $113=_fread($uc,1,1,$fp);
 switch(($tm|0)){case 1:{ label=45;break;}case 2:{ label=46;break;}case 3:{ label=47;break;}case 4:{ label=48;break;}case 5:{ label=49;break;}case 6:{ label=50;break;}case 7:{ label=51;break;}case 8:{ label=52;break;}default:{label=53;break;}}break;
 case 45: 
 var $115=HEAP8[(($uc)>>0)];
 HEAP8[(($mem)>>0)]=$115;
 var $r_0=$113;label=99;break;
 case 46: 
 var $117=HEAP8[(($uc)>>0)];
 var $118=($117&255);
 var $119=$mem;
 HEAP16[(($119)>>1)]=$118;
 var $r_0=$113;label=99;break;
 case 47: 
 var $121=HEAP8[(($uc)>>0)];
 var $122=($121&255);
 var $123=$mem;
 HEAP32[(($123)>>2)]=$122;
 var $r_0=$113;label=99;break;
 case 48: 
 var $125=HEAP8[(($uc)>>0)];
 HEAP8[(($mem)>>0)]=$125;
 var $r_0=$113;label=99;break;
 case 49: 
 var $127=HEAP8[(($uc)>>0)];
 var $128=($127&255);
 var $129=$mem;
 HEAP16[(($129)>>1)]=$128;
 var $r_0=$113;label=99;break;
 case 50: 
 var $131=HEAP8[(($uc)>>0)];
 var $132=($131&255);
 var $133=$mem;
 HEAP32[(($133)>>2)]=$132;
 var $r_0=$113;label=99;break;
 case 51: 
 var $135=HEAP8[(($uc)>>0)];
 var $136=($135&255);
 var $137=$mem;
 HEAPF32[(($137)>>2)]=$136;
 var $r_0=$113;label=99;break;
 case 52: 
 var $139=HEAP8[(($uc)>>0)];
 var $140=($139&255);
 var $141=$mem;
 HEAPF64[(($141)>>3)]=$140;
 var $r_0=$113;label=99;break;
 case 53: 
 ___assert_fail(4208,6944,665,12104);
 throw "Reached an unreachable!";
 case 54: 
 var $144=($fp|0)==0;
 if($144){label=55;break;}else{label=56;break;}
 case 55: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 56: 
 var $147=$us;
 var $148=_fread($147,2,1,$fp);
 var $149=($fmt|0)==3;
 if($149){label=57;break;}else{label=58;break;}
 case 57: 
 var $150=HEAP16[(($us)>>1)];
 var $151=_llvm_bswap_i16($150);
 HEAP16[(($us)>>1)]=$151;
 label=58;break;
 case 58: 
 switch(($tm|0)){case 1:{ label=59;break;}case 2:{ label=60;break;}case 3:{ label=61;break;}case 4:{ label=62;break;}case 5:{ label=63;break;}case 6:{ label=64;break;}case 7:{ label=65;break;}case 8:{ label=66;break;}default:{label=67;break;}}break;
 case 59: 
 var $153=HEAP16[(($us)>>1)];
 var $154=(($153)&255);
 HEAP8[(($mem)>>0)]=$154;
 var $r_0=$148;label=99;break;
 case 60: 
 var $156=HEAP16[(($us)>>1)];
 var $157=$mem;
 HEAP16[(($157)>>1)]=$156;
 var $r_0=$148;label=99;break;
 case 61: 
 var $159=HEAP16[(($us)>>1)];
 var $160=($159&65535);
 var $161=$mem;
 HEAP32[(($161)>>2)]=$160;
 var $r_0=$148;label=99;break;
 case 62: 
 var $163=HEAP16[(($us)>>1)];
 var $164=(($163)&255);
 HEAP8[(($mem)>>0)]=$164;
 var $r_0=$148;label=99;break;
 case 63: 
 var $166=HEAP16[(($us)>>1)];
 var $167=$mem;
 HEAP16[(($167)>>1)]=$166;
 var $r_0=$148;label=99;break;
 case 64: 
 var $169=HEAP16[(($us)>>1)];
 var $170=($169&65535);
 var $171=$mem;
 HEAP32[(($171)>>2)]=$170;
 var $r_0=$148;label=99;break;
 case 65: 
 var $173=HEAP16[(($us)>>1)];
 var $174=($173&65535);
 var $175=$mem;
 HEAPF32[(($175)>>2)]=$174;
 var $r_0=$148;label=99;break;
 case 66: 
 var $177=HEAP16[(($us)>>1)];
 var $178=($177&65535);
 var $179=$mem;
 HEAPF64[(($179)>>3)]=$178;
 var $r_0=$148;label=99;break;
 case 67: 
 ___assert_fail(4208,6944,680,12104);
 throw "Reached an unreachable!";
 case 68: 
 var $182=($fp|0)==0;
 if($182){label=69;break;}else{label=70;break;}
 case 69: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 70: 
 var $185=$ui;
 var $186=_fread($185,4,1,$fp);
 var $187=($fmt|0)==3;
 if($187){label=71;break;}else{label=72;break;}
 case 71: 
 var $188=HEAP32[(($ui)>>2)];
 var $189=_llvm_bswap_i32($188);
 HEAP32[(($ui)>>2)]=$189;
 label=72;break;
 case 72: 
 switch(($tm|0)){case 1:{ label=73;break;}case 2:{ label=74;break;}case 3:{ label=75;break;}case 4:{ label=76;break;}case 5:{ label=77;break;}case 6:{ label=78;break;}case 7:{ label=79;break;}case 8:{ label=80;break;}default:{label=81;break;}}break;
 case 73: 
 var $191=HEAP32[(($ui)>>2)];
 var $192=(($191)&255);
 HEAP8[(($mem)>>0)]=$192;
 var $r_0=$186;label=99;break;
 case 74: 
 var $194=HEAP32[(($ui)>>2)];
 var $195=(($194)&65535);
 var $196=$mem;
 HEAP16[(($196)>>1)]=$195;
 var $r_0=$186;label=99;break;
 case 75: 
 var $198=HEAP32[(($ui)>>2)];
 var $199=$mem;
 HEAP32[(($199)>>2)]=$198;
 var $r_0=$186;label=99;break;
 case 76: 
 var $201=HEAP32[(($ui)>>2)];
 var $202=(($201)&255);
 HEAP8[(($mem)>>0)]=$202;
 var $r_0=$186;label=99;break;
 case 77: 
 var $204=HEAP32[(($ui)>>2)];
 var $205=(($204)&65535);
 var $206=$mem;
 HEAP16[(($206)>>1)]=$205;
 var $r_0=$186;label=99;break;
 case 78: 
 var $208=HEAP32[(($ui)>>2)];
 var $209=$mem;
 HEAP32[(($209)>>2)]=$208;
 var $r_0=$186;label=99;break;
 case 79: 
 var $211=HEAP32[(($ui)>>2)];
 var $212=($211>>>0);
 var $213=$mem;
 HEAPF32[(($213)>>2)]=$212;
 var $r_0=$186;label=99;break;
 case 80: 
 var $215=HEAP32[(($ui)>>2)];
 var $216=($215>>>0);
 var $217=$mem;
 HEAPF64[(($217)>>3)]=$216;
 var $r_0=$186;label=99;break;
 case 81: 
 ___assert_fail(4208,6944,695,12104);
 throw "Reached an unreachable!";
 case 82: 
 var $220=($fp|0)==0;
 if($220){label=83;break;}else{label=84;break;}
 case 83: 
 ___assert_fail(7992,6944,291,12248);
 throw "Reached an unreachable!";
 case 84: 
 var $223=$fl;
 var $224=_fread($223,4,1,$fp);
 var $225=($fmt|0)==3;
 if($225){label=85;break;}else{label=86;break;}
 case 85: 
 var $226=$fl;
 var $227=HEAP32[(($226)>>2)];
 var $228=_llvm_bswap_i32($227);
 HEAP32[(($226)>>2)]=$228;
 label=86;break;
 case 86: 
 if(($tm|0)==7){ label=87;break;}else if(($tm|0)==8){ label=88;break;}else{label=89;break;}
 case 87: 
 var $230=HEAPF32[(($fl)>>2)];
 var $231=$mem;
 HEAPF32[(($231)>>2)]=$230;
 var $r_0=$224;label=99;break;
 case 88: 
 var $233=HEAPF32[(($fl)>>2)];
 var $234=$233;
 var $235=$mem;
 HEAPF64[(($235)>>3)]=$234;
 var $r_0=$224;label=99;break;
 case 89: 
 ___assert_fail(4208,6944,704,12104);
 throw "Reached an unreachable!";
 case 90: 
 var $238=($fp|0)==0;
 if($238){label=91;break;}else{label=92;break;}
 case 91: 
 ___assert_fail(7992,6944,310,12136);
 throw "Reached an unreachable!";
 case 92: 
 var $241=$dd;
 var $242=_fread($241,8,1,$fp);
 var $243=($fmt|0)==3;
 if($243){label=93;break;}else{label=94;break;}
 case 93: 
 ___assert_fail(4208,6944,189,12168);
 throw "Reached an unreachable!";
 case 94: 
 if(($tm|0)==7){ label=95;break;}else if(($tm|0)==8){ label=96;break;}else{label=97;break;}
 case 95: 
 var $246=HEAPF64[(($dd)>>3)];
 var $247=$246;
 var $248=$mem;
 HEAPF32[(($248)>>2)]=$247;
 var $r_0=$242;label=99;break;
 case 96: 
 var $250=HEAPF64[(($dd)>>3)];
 var $251=$mem;
 HEAPF64[(($251)>>3)]=$250;
 var $r_0=$242;label=99;break;
 case 97: 
 ___assert_fail(4208,6944,713,12104);
 throw "Reached an unreachable!";
 case 98: 
 ___assert_fail(4208,6944,717,12104);
 throw "Reached an unreachable!";
 case 99: 
 var $r_0;
 STACKTOP=sp;return $r_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL18cb_read_list_asciiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $1=($fp|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,477,10640);
 throw "Reached an unreachable!";
 case 3: 
 var $4=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$n,tempVarArgs)); STACKTOP=tempVarArgs;
 if(($4|0)==-1|($4|0)==0){ var $_0=0;label=18;break;}else{label=4;break;}
 case 4: 
 var $6=(($d+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=(($d+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($n)>>2)];
 __ZN3vcg3plyL8StoreIntEPvii($8,$10,$11);
 var $12=(($d+24)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=13;break;}else{label=5;break;}
 case 5: 
 var $16=HEAP32[(($n)>>2)];
 var $17=(($d+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=((28712+($18<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($16|0)==0;
 if($21){var $req_0_i=0;label=8;break;}else{label=6;break;}
 case 6: 
 var $23=(Math_imul($20,$16)|0);
 var $24=$20|$16;
 var $25=($24>>>0)>65535;
 if($25){label=7;break;}else{var $req_0_i=$23;label=8;break;}
 case 7: 
 var $27=(((($23>>>0))/(($16>>>0)))&-1);
 var $28=($27|0)==($20|0);
 var $__i=($28?$23:-1);
 var $req_0_i=$__i;label=8;break;
 case 8: 
 var $req_0_i;
 var $30=_malloc($req_0_i);
 var $31=($30|0)==0;
 if($31){label=11;break;}else{label=9;break;}
 case 9: 
 var $33=((($30)-(4))|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=$35&3;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=10;break;}
 case 10: 
 _memset($30, 0, $req_0_i)|0;
 label=12;break;
 case 11: 
 ___assert_fail(3880,6944,1920,10680);
 throw "Reached an unreachable!";
 case 12: 
 var $41=(($d+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($mem+$42)|0);
 var $44=$43;
 HEAP32[(($44)>>2)]=$30;
 var $store_0_ph=$30;var $_pre_phi=$17;label=14;break;
 case 13: 
 var $46=(($d+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($mem+$47)|0);
 var $_pre=(($d+12)|0);
 var $store_0_ph=$48;var $_pre_phi=$_pre;label=14;break;
 case 14: 
 var $_pre_phi;
 var $store_0_ph;
 var $49=(($d+8)|0);
 var $storemerge=0;label=15;break;
 case 15: 
 var $storemerge;
 var $51=HEAP32[(($n)>>2)];
 var $52=($storemerge|0)<($51|0);
 if($52){label=16;break;}else{var $_0=1;label=18;break;}
 case 16: 
 var $54=HEAP32[(($_pre_phi)>>2)];
 var $55=((28712+($54<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(Math_imul($storemerge,$56)|0);
 var $58=(($store_0_ph+$57)|0);
 var $59=HEAP32[(($49)>>2)];
 var $60=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$58,$59,$54);
 var $61=($60|0)==0;
 if($61){var $_0=0;label=18;break;}else{label=17;break;}
 case 17: 
 var $63=((($storemerge)+(1))|0);
 var $storemerge=$63;label=15;break;
 case 18: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL18cb_skip_list_asciiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $n=(sp)+(8);
 var $3=$n;
 var $4=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$3,3,3);
 var $5=($4|0)==0;
 if($5){var $_0=0;label=9;break;}else{label=2;break;}
 case 2: 
 var $6=$f_i;
 var $7=($fp|0)==0;
 var $storemerge=0;label=3;break;
 case 3: 
 var $storemerge;
 var $9=HEAP32[(($n)>>2)];
 var $10=($storemerge|0)<($9|0);
 if($10){label=4;break;}else{var $_0=1;label=9;break;}
 case 4: 
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 ___assert_fail(7992,6944,563,12056);
 throw "Reached an unreachable!";
 case 6: 
 var $14=_fscanf($fp,3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$f_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=($14|0)==-1;
 if($15){var $_0=0;label=9;break;}else{var $storemerge_i=$14;label=7;break;}
 case 7: 
 var $storemerge_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $16=($storemerge_i|0)==0;
 if($16){var $_0=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $18=((($storemerge)+(1))|0);
 var $storemerge=$18;label=3;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL13cb_read_asciiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;


 var $1=(($d+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($mem+$2)|0);
 var $4=(($d+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($d+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=__ZN3vcg3plyL11ReadScalarAEP8_IO_FILEPvii($fp,$3,$5,$7);
 var $9=($8|0)!=0;
 return $9;
}

//Func
function __ZN3vcg3plyL17cb_skip_int_asciiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1392,10704);
 throw "Reached an unreachable!";
 case 3: 
 var $6=_fscanf($fp,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$dummy,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6|0)!=-1;
 STACKTOP=sp;return $7;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL19cb_skip_float_asciiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1384,10656);
 throw "Reached an unreachable!";
 case 3: 
 var $6=_fscanf($fp,3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$dummy,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6|0)!=-1;
 STACKTOP=sp;return $7;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,1952,11952);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;var $36=$9;label=10;break;
 case 10: 
 var $36;
 var $storemerge;
 var $37=($storemerge&255)<($36&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=($storemerge&255);
 var $40=(($store_0_ph+$39)|0);
 var $41=_fread($40,1,1,$fp);
 var $42=($41|0)==0;
 if($42){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $44=((($storemerge)+(1))&255);
 var $_pre=HEAP8[(($n)>>0)];
 var $storemerge=$44;var $36=$_pre;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,1972,11856);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<1;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP16[(($47)>>1)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,1996,11880);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2020,11832);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $36=($storemerge&255)<($9&255);
 if($36){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $38=_fread($c,1,1,$fp);
 var $39=($38|0)==0;
 if($39){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $41=HEAP8[(($c)>>0)];
 var $42=($storemerge&255);
 var $43=(($store_0_ph+$42)|0);
 HEAP8[(($43)>>0)]=$41;
 var $44=((($storemerge)+(1))&255);
 var $storemerge=$44;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2044,11784);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<1;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP16[(($47)>>1)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2068,11808);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2092,11904);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAPF32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_chdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2116,11928);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=(($42<<24)>>24);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAPF64[(($47)>>3)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2142,11472);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,2,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP16[(($c)>>1)];
 var $47=_llvm_bswap_i16($46);
 HEAP16[(($c)>>1)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP16[(($c)>>1)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2165,11376);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($storemerge&255);
 var $53=$52<<1;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP16[(($55)>>1)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2188,11400);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=(($51<<16)>>16);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2211,11352);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,2,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP16[(($c)>>1)];
 var $47=_llvm_bswap_i16($46);
 HEAP16[(($c)>>1)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP16[(($c)>>1)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2234,11304);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($storemerge&255);
 var $53=$52<<1;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP16[(($55)>>1)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2257,11328);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=(($51<<16)>>16);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2280,11424);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=(($51<<16)>>16);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_shdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2303,11448);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=(($51<<16)>>16);
 var $53=($storemerge&255);
 var $54=$53<<3;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF64[(($56)>>3)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2329,11664);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,4,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP32[(($c)>>2)];
 var $47=_llvm_bswap_i32($46);
 HEAP32[(($c)>>2)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP32[(($c)>>2)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2352,11568);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=(($51)&65535);
 var $53=($storemerge&255);
 var $54=$53<<1;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP16[(($56)>>1)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ininEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $val=sp;
 var $val1=(sp)+(8);
 var $val2=(sp)+(16);
 var $val3=(sp)+(24);
 var $val4=(sp)+(32);
 var $1=(($d+28)|0);
 var $2=HEAP32[(($1)>>2)];
 switch(($2|0)){case 2:{ label=10;break;}case 6:{ label=16;break;}case 1:{ label=2;break;}case 3:{ label=22;break;}case 4:{ label=6;break;}default:{label=28;break;}}break;
 case 2: 
 var $4=($fp|0)==0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 ___assert_fail(7992,6944,197,10576);
 throw "Reached an unreachable!";
 case 4: 
 var $6=_fread($val,1,1,$fp);
 var $7=($6|0)==0;
 if($7){var $_0=0;label=49;break;}else{label=5;break;}
 case 5: 
 var $9=HEAP8[(($val)>>0)];
 var $10=(($9<<24)>>24);
 var $n_0=$10;label=29;break;
 case 6: 
 var $12=($fp|0)==0;
 if($12){label=7;break;}else{label=8;break;}
 case 7: 
 ___assert_fail(7992,6944,244,12184);
 throw "Reached an unreachable!";
 case 8: 
 var $14=_fread($val1,1,1,$fp);
 var $15=($14|0)==0;
 if($15){var $_0=0;label=49;break;}else{label=9;break;}
 case 9: 
 var $17=HEAP8[(($val1)>>0)];
 var $18=($17&255);
 var $n_0=$18;label=29;break;
 case 10: 
 var $20=(($d+40)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($fp|0)==0;
 if($22){label=11;break;}else{label=12;break;}
 case 11: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 12: 
 var $25=$val2;
 var $26=_fread($25,2,1,$fp);
 var $27=($21|0)==3;
 if($27){label=13;break;}else{label=14;break;}
 case 13: 
 var $28=HEAP16[(($val2)>>1)];
 var $29=_llvm_bswap_i16($28);
 HEAP16[(($val2)>>1)]=$29;
 label=14;break;
 case 14: 
 var $30=($26|0)==0;
 if($30){var $_0=0;label=49;break;}else{label=15;break;}
 case 15: 
 var $32=HEAP16[(($val2)>>1)];
 var $33=(($32<<16)>>16);
 var $n_0=$33;label=29;break;
 case 16: 
 var $35=(($d+40)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($fp|0)==0;
 if($37){label=17;break;}else{label=18;break;}
 case 17: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 18: 
 var $40=$val3;
 var $41=_fread($40,4,1,$fp);
 var $42=($36|0)==3;
 if($42){label=19;break;}else{label=20;break;}
 case 19: 
 var $43=HEAP32[(($val3)>>2)];
 var $44=_llvm_bswap_i32($43);
 HEAP32[(($val3)>>2)]=$44;
 label=20;break;
 case 20: 
 var $45=($41|0)==0;
 if($45){var $_0=0;label=49;break;}else{label=21;break;}
 case 21: 
 var $47=HEAP32[(($val3)>>2)];
 var $n_0=$47;label=29;break;
 case 22: 
 var $49=(($d+40)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($fp|0)==0;
 if($51){label=23;break;}else{label=24;break;}
 case 23: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 24: 
 var $54=$val4;
 var $55=_fread($54,4,1,$fp);
 var $56=($50|0)==3;
 if($56){label=25;break;}else{label=26;break;}
 case 25: 
 var $57=HEAP32[(($val4)>>2)];
 var $58=_llvm_bswap_i32($57);
 HEAP32[(($val4)>>2)]=$58;
 label=26;break;
 case 26: 
 var $59=($55|0)==0;
 if($59){var $_0=0;label=49;break;}else{label=27;break;}
 case 27: 
 var $61=HEAP32[(($val4)>>2)];
 var $n_0=$61;label=29;break;
 case 28: 
 ___assert_fail(4208,6944,2378,11592);
 throw "Reached an unreachable!";
 case 29: 
 var $n_0;
 var $64=(($d+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($mem+$65)|0);
 var $67=(($d+32)|0);
 var $68=HEAP32[(($67)>>2)];
 __ZN3vcg3plyL8StoreIntEPvii($66,$68,$n_0);
 var $69=(($d+24)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=38;break;}else{label=30;break;}
 case 30: 
 var $73=($n_0|0)==0;
 if($73){var $req_0_i=0;label=33;break;}else{label=31;break;}
 case 31: 
 var $75=$n_0<<2;
 var $76=($n_0>>>0)>65535;
 if($76){label=32;break;}else{var $req_0_i=$75;label=33;break;}
 case 32: 
 var $78=(((($75>>>0))/(($n_0>>>0)))&-1);
 var $79=($78|0)==4;
 var $__i=($79?$75:-1);
 var $req_0_i=$__i;label=33;break;
 case 33: 
 var $req_0_i;
 var $81=_malloc($req_0_i);
 var $82=($81|0)==0;
 if($82){label=36;break;}else{label=34;break;}
 case 34: 
 var $84=((($81)-(4))|0);
 var $85=$84;
 var $86=HEAP32[(($85)>>2)];
 var $87=$86&3;
 var $88=($87|0)==0;
 if($88){label=37;break;}else{label=35;break;}
 case 35: 
 _memset($81, 0, $req_0_i)|0;
 label=37;break;
 case 36: 
 ___assert_fail(3880,6944,2385,11592);
 throw "Reached an unreachable!";
 case 37: 
 var $92=(($d+16)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($mem+$93)|0);
 var $95=$94;
 HEAP32[(($95)>>2)]=$81;
 var $store_0_ph=$81;label=39;break;
 case 38: 
 var $97=(($d+16)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($mem+$98)|0);
 var $store_0_ph=$99;label=39;break;
 case 39: 
 var $store_0_ph;
 var $100=(($d+40)|0);
 var $101=($fp|0)==0;
 var $storemerge=0;label=40;break;
 case 40: 
 var $storemerge;
 var $103=($storemerge|0)<($n_0|0);
 if($103){label=41;break;}else{var $_0=1;label=49;break;}
 case 41: 
 var $105=$storemerge<<2;
 var $106=(($store_0_ph+$105)|0);
 var $107=$106;
 var $108=HEAP32[(($100)>>2)];
 if($101){label=42;break;}else{label=43;break;}
 case 42: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 43: 
 var $111=($106|0)==0;
 if($111){label=44;break;}else{label=45;break;}
 case 44: 
 ___assert_fail(3056,6944,226,10624);
 throw "Reached an unreachable!";
 case 45: 
 var $114=_fread($106,4,1,$fp);
 var $115=($108|0)==3;
 if($115){label=46;break;}else{label=47;break;}
 case 46: 
 var $116=HEAP32[(($107)>>2)];
 var $117=_llvm_bswap_i32($116);
 HEAP32[(($107)>>2)]=$117;
 label=47;break;
 case 47: 
 var $118=($114|0)==0;
 if($118){var $_0=0;label=49;break;}else{label=48;break;}
 case 48: 
 var $120=((($storemerge)+(1))|0);
 var $storemerge=$120;label=40;break;
 case 49: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2407,11544);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,4,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP32[(($c)>>2)];
 var $47=_llvm_bswap_i32($46);
 HEAP32[(($c)>>2)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP32[(($c)>>2)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2430,11496);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=(($51)&65535);
 var $53=($storemerge&255);
 var $54=$53<<1;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP16[(($56)>>1)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2453,11520);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($storemerge&255);
 var $53=$52<<2;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_inflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2476,11616);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($51|0);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_indoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2499,11640);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($51|0);
 var $53=($storemerge&255);
 var $54=$53<<3;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF64[(($56)>>3)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2524,11280);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $36=($storemerge&255)<($9&255);
 if($36){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $38=_fread($c,1,1,$fp);
 var $39=($38|0)==0;
 if($39){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $41=HEAP8[(($c)>>0)];
 var $42=($storemerge&255);
 var $43=(($store_0_ph+$42)|0);
 HEAP8[(($43)>>0)]=$41;
 var $44=((($storemerge)+(1))&255);
 var $storemerge=$44;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2547,11184);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<1;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP16[(($47)>>1)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2570,11208);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2593,11160);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $36=($storemerge&255)<($9&255);
 if($36){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $38=_fread($c,1,1,$fp);
 var $39=($38|0)==0;
 if($39){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $41=HEAP8[(($c)>>0)];
 var $42=($storemerge&255);
 var $43=(($store_0_ph+$42)|0);
 HEAP8[(($43)>>0)]=$41;
 var $44=((($storemerge)+(1))&255);
 var $storemerge=$44;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2616,11112);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<1;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP16[(($47)>>1)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2639,11136);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2662,11232);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<2;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAPF32[(($47)>>2)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ucdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2685,11256);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $37=($storemerge&255)<($9&255);
 if($37){label=11;break;}else{var $_0=1;label=13;break;}
 case 11: 
 var $39=_fread($c,1,1,$fp);
 var $40=($39|0)==0;
 if($40){var $_0=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $42=HEAP8[(($c)>>0)];
 var $43=($42&255);
 var $44=($storemerge&255);
 var $45=$44<<3;
 var $46=(($store_0_ph+$45)|0);
 var $47=$46;
 HEAPF64[(($47)>>3)]=$43;
 var $48=((($storemerge)+(1))&255);
 var $storemerge=$48;label=10;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uschEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2711,10896);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,2,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP16[(($c)>>1)];
 var $47=_llvm_bswap_i16($46);
 HEAP16[(($c)>>1)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP16[(($c)>>1)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2734,10800);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($storemerge&255);
 var $53=$52<<1;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP16[(($55)>>1)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2757,10824);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($51&65535);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2780,10776);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,2,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP16[(($c)>>1)];
 var $47=_llvm_bswap_i16($46);
 HEAP16[(($c)>>1)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP16[(($c)>>1)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_ususEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2803,10728);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($storemerge&255);
 var $53=$52<<1;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP16[(($55)>>1)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2826,10752);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($51&65535);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2849,10848);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($51&65535);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_usdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2872,10872);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,2,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP16[(($c)>>1)];
 var $48=_llvm_bswap_i16($47);
 HEAP16[(($c)>>1)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP16[(($c)>>1)];
 var $52=($51&65535);
 var $53=($storemerge&255);
 var $54=$53<<3;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF64[(($56)>>3)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uichEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2898,11088);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,4,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP32[(($c)>>2)];
 var $47=_llvm_bswap_i32($46);
 HEAP32[(($c)>>2)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP32[(($c)>>2)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uishEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2921,10992);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=(($51)&65535);
 var $53=($storemerge&255);
 var $54=$53<<1;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP16[(($56)>>1)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uiinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2944,11016);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($storemerge&255);
 var $53=$52<<2;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uiucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $_=($15?0:$10);
 var $16=_malloc($_);
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=4;break;}
 case 4: 
 var $19=((($16)-(4))|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&3;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($16, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2967,10968);
 throw "Reached an unreachable!";
 case 7: 
 var $27=(($d+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($mem+$28)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$16;
 var $store_0_ph=$16;label=9;break;
 case 8: 
 var $32=(($d+16)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($mem+$33)|0);
 var $store_0_ph=$34;label=9;break;
 case 9: 
 var $store_0_ph;
 var $35=(($d+40)|0);
 var $36=($fp|0)==0;
 var $37=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $39=($storemerge&255)<($9&255);
 if($39){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $41=HEAP32[(($35)>>2)];
 if($36){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $44=_fread($37,4,1,$fp);
 var $45=($41|0)==3;
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=HEAP32[(($c)>>2)];
 var $47=_llvm_bswap_i32($46);
 HEAP32[(($c)>>2)]=$47;
 label=15;break;
 case 15: 
 var $48=($44|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAP32[(($c)>>2)];
 var $51=(($50)&255);
 var $52=($storemerge&255);
 var $53=(($store_0_ph+$52)|0);
 HEAP8[(($53)>>0)]=$51;
 var $54=((($storemerge)+(1))&255);
 var $storemerge=$54;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uiusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<1;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,2990,10920);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=(($51)&65535);
 var $53=($storemerge&255);
 var $54=$53<<1;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAP16[(($56)>>1)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uiuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3013,10944);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($storemerge&255);
 var $53=$52<<2;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uiflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3036,11040);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($51>>>0);
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_uidoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3059,11064);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,4,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=HEAP32[(($c)>>2)];
 var $48=_llvm_bswap_i32($47);
 HEAP32[(($c)>>2)]=$48;
 label=15;break;
 case 15: 
 var $49=($45|0)==0;
 if($49){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $51=HEAP32[(($c)>>2)];
 var $52=($51>>>0);
 var $53=($storemerge&255);
 var $54=$53<<3;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF64[(($56)>>3)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_flflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3084,11688);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $39=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $41=($storemerge&255)<($9&255);
 if($41){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $43=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,291,12248);
 throw "Reached an unreachable!";
 case 13: 
 var $46=_fread($38,4,1,$fp);
 var $47=($43|0)==3;
 if($47){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=HEAP32[(($39)>>2)];
 var $49=_llvm_bswap_i32($48);
 HEAP32[(($39)>>2)]=$49;
 label=15;break;
 case 15: 
 var $50=($46|0)==0;
 if($50){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $52=HEAPF32[(($c)>>2)];
 var $53=($storemerge&255);
 var $54=$53<<2;
 var $55=(($store_0_ph+$54)|0);
 var $56=$55;
 HEAPF32[(($56)>>2)]=$52;
 var $57=((($storemerge)+(1))&255);
 var $storemerge=$57;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_fldoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3107,11712);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $39=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $41=($storemerge&255)<($9&255);
 if($41){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $43=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,291,12248);
 throw "Reached an unreachable!";
 case 13: 
 var $46=_fread($38,4,1,$fp);
 var $47=($43|0)==3;
 if($47){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=HEAP32[(($39)>>2)];
 var $49=_llvm_bswap_i32($48);
 HEAP32[(($39)>>2)]=$49;
 label=15;break;
 case 15: 
 var $50=($46|0)==0;
 if($50){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $52=HEAPF32[(($c)>>2)];
 var $53=$52;
 var $54=($storemerge&255);
 var $55=$54<<3;
 var $56=(($store_0_ph+$55)|0);
 var $57=$56;
 HEAPF64[(($57)>>3)]=$53;
 var $58=((($storemerge)+(1))&255);
 var $storemerge=$58;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_doflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<2;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3130,11736);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,310,12136);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,8,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 ___assert_fail(4208,6944,189,12168);
 throw "Reached an unreachable!";
 case 15: 
 var $48=($45|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAPF64[(($c)>>3)];
 var $51=$50;
 var $52=($storemerge&255);
 var $53=$52<<2;
 var $54=(($store_0_ph+$53)|0);
 var $55=$54;
 HEAPF32[(($55)>>2)]=$51;
 var $56=((($storemerge)+(1))&255);
 var $storemerge=$56;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_read_list_dodoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $c=(sp)+(8);
 var $1=_fread($n,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($d+36)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($mem+$5)|0);
 var $7=(($d+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP8[(($n)>>0)];
 var $10=($9&255);
 __ZN3vcg3plyL8StoreIntEPvii($6,$8,$10);
 var $11=(($d+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=8;break;}else{label=3;break;}
 case 3: 
 var $15=(($9<<24)>>24)==0;
 var $16=$10<<3;
 var $_=($15?0:$16);
 var $17=_malloc($_);
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=((($17)-(4))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&3;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 _memset($17, 0, $_)|0;
 label=7;break;
 case 6: 
 ___assert_fail(3880,6944,3153,11760);
 throw "Reached an unreachable!";
 case 7: 
 var $28=(($d+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($mem+$29)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$17;
 var $store_0_ph=$17;label=9;break;
 case 8: 
 var $33=(($d+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($mem+$34)|0);
 var $store_0_ph=$35;label=9;break;
 case 9: 
 var $store_0_ph;
 var $36=(($d+40)|0);
 var $37=($fp|0)==0;
 var $38=$c;
 var $storemerge=0;label=10;break;
 case 10: 
 var $storemerge;
 var $40=($storemerge&255)<($9&255);
 if($40){label=11;break;}else{var $_0=1;label=17;break;}
 case 11: 
 var $42=HEAP32[(($36)>>2)];
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 ___assert_fail(7992,6944,310,12136);
 throw "Reached an unreachable!";
 case 13: 
 var $45=_fread($38,8,1,$fp);
 var $46=($42|0)==3;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 ___assert_fail(4208,6944,189,12168);
 throw "Reached an unreachable!";
 case 15: 
 var $48=($45|0)==0;
 if($48){var $_0=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $50=HEAPF64[(($c)>>3)];
 var $51=($storemerge&255);
 var $52=$51<<3;
 var $53=(($store_0_ph+$52)|0);
 var $54=$53;
 HEAPF64[(($54)>>3)]=$50;
 var $55=((($storemerge)+(1))&255);
 var $storemerge=$55;label=10;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_skip_list_bin1EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $skip_buf=sp;
 var $n=(sp)+(512);
 var $3=_fread($n,1,1,$fp);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($skip_buf)|0);
 var $7=HEAP8[(($n)>>0)];
 var $8=($7&255);
 var $9=_fread($6,1,$8,$fp);
 var $10=($9|0)==0;
 var $_=($10?0:1);
 STACKTOP=sp;return $_;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_skip_list_bin2EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $skip_buf=sp;
 var $n=(sp)+(512);
 var $3=_fread($n,1,1,$fp);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($skip_buf)|0);
 var $7=HEAP8[(($n)>>0)];
 var $8=($7&255);
 var $9=_fread($6,2,$8,$fp);
 var $10=($9|0)==0;
 var $_=($10?0:1);
 STACKTOP=sp;return $_;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_skip_list_bin4EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $skip_buf=sp;
 var $n=(sp)+(512);
 var $3=_fread($n,1,1,$fp);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($skip_buf)|0);
 var $7=HEAP8[(($n)>>0)];
 var $8=($7&255);
 var $9=_fread($6,4,$8,$fp);
 var $10=($9|0)==0;
 var $_=($10?0:1);
 STACKTOP=sp;return $_;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL17cb_skip_list_bin8EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $skip_buf=sp;
 var $n=(sp)+(512);
 var $3=_fread($n,1,1,$fp);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($skip_buf)|0);
 var $7=HEAP8[(($n)>>0)];
 var $8=($7&255);
 var $9=_fread($6,8,$8,$fp);
 var $10=($9|0)==0;
 var $_=($10?0:1);
 STACKTOP=sp;return $_;
 case 3: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_chchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;


 var $1=(($d+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($mem+$2)|0);
 var $4=_fread($3,1,1,$fp);
 var $5=($4|0)!=0;
 return $5;
}

//Func
function __ZN3vcg3plyL12cb_read_chshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_chdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 var $_=($2?0:1);
 STACKTOP=sp;return $_;
}

//Func
function __ZN3vcg3plyL12cb_read_shchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP16[(($17)>>1)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13<<16)>>16);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP16[(($17)>>1)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13<<16)>>16);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13<<16)>>16);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_shdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,206,12216);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13<<16)>>16);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF64[(($18)>>3)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP16[(($18)>>1)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ininEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP16[(($18)>>1)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_inflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=($13|0);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_indoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,225,10624);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=($13|0);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF64[(($18)>>3)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucchEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=(($d+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($mem+$6)|0);
 HEAP8[(($7)>>0)]=$4;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAP16[(($9)>>1)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=(($d+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($mem+$6)|0);
 HEAP8[(($7)>>0)]=$4;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAP16[(($9)>>1)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAPF32[(($9)>>2)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ucdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=_fread($c,1,1,$fp);
 var $2=($1|0)==0;
 if($2){var $storemerge=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[(($c)>>0)];
 var $5=($4&255);
 var $6=(($d+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($mem+$7)|0);
 var $9=$8;
 HEAPF64[(($9)>>3)]=$5;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uschEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usshEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP16[(($17)>>1)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=($13&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_ususEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP16[(($17)>>1)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=($13&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=($13&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_usdoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,253,12072);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,2,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP16[(($c)>>1)];
 var $10=_llvm_bswap_i16($9);
 HEAP16[(($c)>>1)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP16[(($c)>>1)];
 var $14=($13&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF64[(($18)>>3)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uichEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uishEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP16[(($18)>>1)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uiinEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uiucEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&255);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 HEAP8[(($17)>>0)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uiusEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($13)&65535);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAP16[(($18)>>1)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uiuiEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uiflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=($13>>>0);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_uidoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,272,10544);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=HEAP32[(($c)>>2)];
 var $10=_llvm_bswap_i32($9);
 HEAP32[(($c)>>2)]=$10;
 label=5;break;
 case 5: 
 var $11=($7|0)==0;
 if($11){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $13=HEAP32[(($c)>>2)];
 var $14=($13>>>0);
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF64[(($18)>>3)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_flflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,291,12248);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$c;
 var $10=HEAP32[(($9)>>2)];
 var $11=_llvm_bswap_i32($10);
 HEAP32[(($9)>>2)]=$11;
 label=5;break;
 case 5: 
 var $12=($7|0)==0;
 if($12){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=HEAPF32[(($c)>>2)];
 var $15=(($d+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($mem+$16)|0);
 var $18=$17;
 HEAPF32[(($18)>>2)]=$14;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_fldoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,291,12248);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,4,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$c;
 var $10=HEAP32[(($9)>>2)];
 var $11=_llvm_bswap_i32($10);
 HEAP32[(($9)>>2)]=$11;
 label=5;break;
 case 5: 
 var $12=($7|0)==0;
 if($12){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=HEAPF32[(($c)>>2)];
 var $15=$14;
 var $16=(($d+16)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($mem+$17)|0);
 var $19=$18;
 HEAPF64[(($19)>>3)]=$15;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_doflEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,310,12136);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,8,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 ___assert_fail(4208,6944,189,12168);
 throw "Reached an unreachable!";
 case 5: 
 var $10=($7|0)==0;
 if($10){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $12=HEAPF64[(($c)>>3)];
 var $13=$12;
 var $14=(($d+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($mem+$15)|0);
 var $17=$16;
 HEAPF32[(($17)>>2)]=$13;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_read_dodoEP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$mem,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($d+40)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,310,12136);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$c;
 var $7=_fread($6,8,1,$fp);
 var $8=($2|0)==3;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 ___assert_fail(4208,6944,189,12168);
 throw "Reached an unreachable!";
 case 5: 
 var $10=($7|0)==0;
 if($10){var $storemerge=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $12=HEAPF64[(($c)>>3)];
 var $13=(($d+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($mem+$14)|0);
 var $16=$15;
 HEAPF64[(($16)>>3)]=$12;
 var $storemerge=1;label=7;break;
 case 7: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_skip_bin1EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1352,12024);
 throw "Reached an unreachable!";
 case 3: 
 var $6=(($dummy)|0);
 var $7=_fread($6,1,1,$fp);
 var $8=($7|0)!=0;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_skip_bin2EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1360,12008);
 throw "Reached an unreachable!";
 case 3: 
 var $6=(($dummy)|0);
 var $7=_fread($6,1,2,$fp);
 var $8=($7|0)!=0;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_skip_bin4EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1368,11992);
 throw "Reached an unreachable!";
 case 3: 
 var $6=(($dummy)|0);
 var $7=_fread($6,1,4,$fp);
 var $8=($7|0)!=0;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3plyL12cb_skip_bin8EP8_IO_FILEPvPNS0_14PropDescriptorE($fp,$0,$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dummy=sp;
 var $3=($fp|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(7992,6944,1376,11976);
 throw "Reached an unreachable!";
 case 3: 
 var $6=(($dummy)|0);
 var $7=_fread($6,1,8,$fp);
 var $8=($7|0)!=0;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function ___getTypeName($ti){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ti+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_strlen($2);
 var $4=((($3)+(1))|0);
 var $5=_malloc($4);
 var $6=($5|0)==0;
 if($6){var $_0_i=0;label=3;break;}else{label=2;break;}
 case 2: 
 assert($4 % 1 === 0);(_memcpy($5, $2, $4)|0);
 var $_0_i=$5;label=3;break;
 case 3: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __GLOBAL__I_a332(){
 var label=0;


 __embind_register_void(25976,4832);
 __embind_register_bool(26064,8688,1,1,0);
 __embind_register_integer(26056,7880,1,-128,127);
 __embind_register_integer(26072,7840,1,-128,127);
 __embind_register_integer(26032,7816,1,0,255);
 __embind_register_integer(25992,7792,2,-32768,32767);
 __embind_register_integer(25984,7768,2,0,65535);
 __embind_register_integer(26024,7056,4,-2147483648,2147483647);
 __embind_register_integer(26016,7032,4,0,-1);
 __embind_register_integer(26008,1272,4,-2147483648,2147483647);
 __embind_register_integer(26000,6992,4,0,-1);
 __embind_register_float(26040,6816,4);
 __embind_register_float(26048,6800,8);
 __embind_register_std_string(27496,8976);
 __embind_register_std_string(27472,7944);
 __embind_register_std_wstring(27448,4,7688);
 __embind_register_emval(28304,7464);
 __embind_register_memory_view(28392,0,7128);
 __embind_register_memory_view(28400,0,6856);
 __embind_register_memory_view(28360,1,6552);
 __embind_register_memory_view(28320,2,6240);
 __embind_register_memory_view(28312,3,6000);
 __embind_register_memory_view(28352,4,5800);
 __embind_register_memory_view(28344,5,5680);
 __embind_register_memory_view(28336,4,5584);
 __embind_register_memory_view(28328,5,5424);
 __embind_register_memory_view(28400,0,5336);
 __embind_register_memory_view(28360,1,5144);
 __embind_register_memory_view(28320,2,5000);
 __embind_register_memory_view(28312,3,4888);
 __embind_register_memory_view(28352,4,4736);
 __embind_register_memory_view(28344,5,4664);
 __embind_register_memory_view(28368,6,4480);
 __embind_register_memory_view(28384,7,4424);
 __embind_register_memory_view(28376,7,4352);
 return;
}

//Func
function __ZNSt3__18ios_base4InitC2Ev(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=HEAP32[((_stdin)>>2)];
 var $4=$2;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP32[((33192)>>2)]=17048;
 __ZNSt3__16localeC2Ev(33196);
 HEAP32[((33200)>>2)]=0; HEAP32[((33204)>>2)]=0; HEAP32[((33208)>>2)]=0; HEAP32[((33212)>>2)]=0; HEAP32[((33216)>>2)]=0; HEAP32[((33220)>>2)]=0;
 HEAP32[((33192)>>2)]=17936;
 HEAP32[((33224)>>2)]=$3;
 HEAP32[((33232)>>2)]=33320;
 HEAP32[((33240)>>2)]=-1;
 HEAP8[((33244)>>0)]=0;
 var $5=(($2)|0);
 var $6=HEAP32[((33196)>>2)];
 HEAP32[(($5)>>2)]=$6;
 var $7=(($6+4)|0);
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(33192,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $10=HEAP32[(($5)>>2)];
 var $11=(($10+4)|0);
 var $12=(tempValue=HEAP32[(($11)>>2)],HEAP32[(($11)>>2)]=tempValue+-1,tempValue);
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=9;break;}
 case 3: 
 var $15=(($10)|0);
 var $16=$10;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 FUNCTION_TABLE[$19]($15);
 label=9;break;
 case 4: 
 var $21$0 = ___cxa_find_matching_catch(); var $21$1 = tempRet0;
 var $22=HEAP32[(($5)>>2)];
 var $23=(($22+4)|0);
 var $24=(tempValue=HEAP32[(($23)>>2)],HEAP32[(($23)>>2)]=tempValue+-1,tempValue);
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($22)|0);
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+8)|0);
 var $31=HEAP32[(($30)>>2)];
 FUNCTION_TABLE[$31]($27);
 label=6;break;
 case 6: 
 HEAP32[((33192)>>2)]=17048;
 var $32=HEAP32[((33196)>>2)];
 var $33=(($32+4)|0);
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=(($32)|0);
 var $38=$32;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=8;break;
 case 8: 
 ___resumeException($21$0)
 case 9: 
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[((34184)>>2)]=17316;
 HEAP32[((34192)>>2)]=17336;
 HEAP32[((34188)>>2)]=0;
 HEAP32[((34216)>>2)]=33192;
 HEAP32[((34208)>>2)]=0;
 HEAP32[((34212)>>2)]=0;
 HEAP32[((34196)>>2)]=4098;
 HEAP32[((34204)>>2)]=0;
 HEAP32[((34200)>>2)]=6;
 _memset(34224, 0, 40)|0;
 __ZNSt3__16localeC2Ev(34220);
 HEAP32[((34264)>>2)]=0;
 HEAP32[((34268)>>2)]=-1;
 var $42=HEAP32[((_stdout)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(33096,$42,33328);
 HEAP32[((33920)>>2)]=17220;
 HEAP32[((33924)>>2)]=17240;
 HEAP32[((33948)>>2)]=33096;
 HEAP32[((33940)>>2)]=0;
 HEAP32[((33944)>>2)]=0;
 HEAP32[((33928)>>2)]=4098;
 HEAP32[((33936)>>2)]=0;
 HEAP32[((33932)>>2)]=6;
 _memset(33956, 0, 40)|0;
 __ZNSt3__16localeC2Ev(33952);
 HEAP32[((33996)>>2)]=0;
 HEAP32[((34000)>>2)]=-1;
 var $43=HEAP32[((_stderr)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(33144,$43,33336);
 HEAP32[((34096)>>2)]=17220;
 HEAP32[((34100)>>2)]=17240;
 HEAP32[((34124)>>2)]=33144;
 HEAP32[((34116)>>2)]=0;
 HEAP32[((34120)>>2)]=0;
 HEAP32[((34104)>>2)]=4098;
 HEAP32[((34112)>>2)]=0;
 HEAP32[((34108)>>2)]=6;
 _memset(34132, 0, 40)|0;
 __ZNSt3__16localeC2Ev(34128);
 HEAP32[((34172)>>2)]=0;
 HEAP32[((34176)>>2)]=-1;
 var $44=HEAP32[((34096)>>2)];
 var $45=((($44)-(12))|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $_sum=((($47)+(24))|0);
 var $48=((34096+$_sum)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 HEAP32[((34008)>>2)]=17220;
 HEAP32[((34012)>>2)]=17240;
 HEAP32[((34036)>>2)]=$50;
 var $not__i=($50|0)==0;
 var $51=($not__i&1);
 HEAP32[((34028)>>2)]=$51;
 HEAP32[((34032)>>2)]=0;
 HEAP32[((34016)>>2)]=4098;
 HEAP32[((34024)>>2)]=0;
 HEAP32[((34020)>>2)]=6;
 _memset(34044, 0, 40)|0;
 __ZNSt3__16localeC2Ev(34040);
 HEAP32[((34084)>>2)]=0;
 HEAP32[((34088)>>2)]=-1;
 var $52=HEAP32[((34184)>>2)];
 var $53=((($52)-(12))|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $_sum19=((($55)+(72))|0);
 var $56=((34184+$_sum19)|0);
 var $57=$56;
 HEAP32[(($57)>>2)]=33920;
 var $58=HEAP32[((34096)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum20=((($61)+(4))|0);
 var $62=((34096+$_sum20)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|8192;
 HEAP32[(($63)>>2)]=$65;
 var $66=HEAP32[((34096)>>2)];
 var $67=((($66)-(12))|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $_sum21=((($69)+(72))|0);
 var $70=((34096+$_sum21)|0);
 var $71=$70;
 HEAP32[(($71)>>2)]=33920;
 var $72=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 HEAP32[((33040)>>2)]=16976;
 __ZNSt3__16localeC2Ev(33044);
 HEAP32[((33048)>>2)]=0; HEAP32[((33052)>>2)]=0; HEAP32[((33056)>>2)]=0; HEAP32[((33060)>>2)]=0; HEAP32[((33064)>>2)]=0; HEAP32[((33068)>>2)]=0;
 HEAP32[((33040)>>2)]=17864;
 HEAP32[((33072)>>2)]=$3;
 HEAP32[((33080)>>2)]=33344;
 HEAP32[((33088)>>2)]=-1;
 HEAP8[((33092)>>0)]=0;
 var $73=(($1)|0);
 var $74=HEAP32[((33044)>>2)];
 HEAP32[(($73)>>2)]=$74;
 var $75=(($74+4)|0);
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(33040,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $78=HEAP32[(($73)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=11;break;}else{label=17;break;}
 case 11: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=17;break;
 case 12: 
 var $89$0 = ___cxa_find_matching_catch(); var $89$1 = tempRet0;
 var $90=HEAP32[(($73)>>2)];
 var $91=(($90+4)|0);
 var $92=(tempValue=HEAP32[(($91)>>2)],HEAP32[(($91)>>2)]=tempValue+-1,tempValue);
 var $93=($92|0)==0;
 if($93){label=13;break;}else{label=14;break;}
 case 13: 
 var $95=(($90)|0);
 var $96=$90;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+8)|0);
 var $99=HEAP32[(($98)>>2)];
 FUNCTION_TABLE[$99]($95);
 label=14;break;
 case 14: 
 HEAP32[((33040)>>2)]=16976;
 var $100=HEAP32[((33044)>>2)];
 var $101=(($100+4)|0);
 var $102=(tempValue=HEAP32[(($101)>>2)],HEAP32[(($101)>>2)]=tempValue+-1,tempValue);
 var $103=($102|0)==0;
 if($103){label=15;break;}else{label=16;break;}
 case 15: 
 var $105=(($100)|0);
 var $106=$100;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+8)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($105);
 label=16;break;
 case 16: 
 ___resumeException($89$0)
 case 17: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 HEAP32[((33832)>>2)]=17268;
 HEAP32[((33840)>>2)]=17288;
 HEAP32[((33836)>>2)]=0;
 HEAP32[((33864)>>2)]=33040;
 HEAP32[((33856)>>2)]=0;
 HEAP32[((33860)>>2)]=0;
 HEAP32[((33844)>>2)]=4098;
 HEAP32[((33852)>>2)]=0;
 HEAP32[((33848)>>2)]=6;
 _memset(33872, 0, 40)|0;
 __ZNSt3__16localeC2Ev(33868);
 HEAP32[((33912)>>2)]=0;
 HEAP32[((33916)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(32944,$42,33352);
 HEAP32[((33552)>>2)]=17172;
 HEAP32[((33556)>>2)]=17192;
 HEAP32[((33580)>>2)]=32944;
 HEAP32[((33572)>>2)]=0;
 HEAP32[((33576)>>2)]=0;
 HEAP32[((33560)>>2)]=4098;
 HEAP32[((33568)>>2)]=0;
 HEAP32[((33564)>>2)]=6;
 _memset(33588, 0, 40)|0;
 __ZNSt3__16localeC2Ev(33584);
 HEAP32[((33628)>>2)]=0;
 HEAP32[((33632)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(32992,$43,33360);
 HEAP32[((33728)>>2)]=17172;
 HEAP32[((33732)>>2)]=17192;
 HEAP32[((33756)>>2)]=32992;
 HEAP32[((33748)>>2)]=0;
 HEAP32[((33752)>>2)]=0;
 HEAP32[((33736)>>2)]=4098;
 HEAP32[((33744)>>2)]=0;
 HEAP32[((33740)>>2)]=6;
 _memset(33764, 0, 40)|0;
 __ZNSt3__16localeC2Ev(33760);
 HEAP32[((33804)>>2)]=0;
 HEAP32[((33808)>>2)]=-1;
 var $110=HEAP32[((33728)>>2)];
 var $111=((($110)-(12))|0);
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $_sum22=((($113)+(24))|0);
 var $114=((33728+$_sum22)|0);
 var $115=$114;
 var $116=HEAP32[(($115)>>2)];
 HEAP32[((33640)>>2)]=17172;
 HEAP32[((33644)>>2)]=17192;
 HEAP32[((33668)>>2)]=$116;
 var $not__i2=($116|0)==0;
 var $117=($not__i2&1);
 HEAP32[((33660)>>2)]=$117;
 HEAP32[((33664)>>2)]=0;
 HEAP32[((33648)>>2)]=4098;
 HEAP32[((33656)>>2)]=0;
 HEAP32[((33652)>>2)]=6;
 _memset(33676, 0, 40)|0;
 __ZNSt3__16localeC2Ev(33672);
 HEAP32[((33716)>>2)]=0;
 HEAP32[((33720)>>2)]=-1;
 var $118=HEAP32[((33832)>>2)];
 var $119=((($118)-(12))|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $_sum23=((($121)+(72))|0);
 var $122=((33832+$_sum23)|0);
 var $123=$122;
 HEAP32[(($123)>>2)]=33552;
 var $124=HEAP32[((33728)>>2)];
 var $125=((($124)-(12))|0);
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $_sum24=((($127)+(4))|0);
 var $128=((33728+$_sum24)|0);
 var $129=$128;
 var $130=HEAP32[(($129)>>2)];
 var $131=$130|8192;
 HEAP32[(($129)>>2)]=$131;
 var $132=HEAP32[((33728)>>2)];
 var $133=((($132)-(12))|0);
 var $134=$133;
 var $135=HEAP32[(($134)>>2)];
 var $_sum25=((($135)+(72))|0);
 var $136=((33728+$_sum25)|0);
 var $137=$136;
 HEAP32[(($137)>>2)]=33552;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(33920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(34008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(33552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(33640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $6$0 = ___cxa_find_matching_catch(0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}

//Func
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($ec)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre1=$what_arg;
 if($4){label=16;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP8[(($_pre1)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($what_arg+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=($6&255);
 var $14=$13>>>1;
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=($15|0)==0;
 if($16){var $19=$3;label=7;break;}else{label=6;break;}
 case 6: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,3864,2);
 var $_pre=HEAP32[(($2)>>2)];
 var $19=$_pre;label=7;break;
 case 7: 
 var $19;
 var $20=(($ec+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+24)|0);
 var $25=HEAP32[(($24)>>2)];
 FUNCTION_TABLE[$25]($1,$21,$19);
 var $26=$1;
 var $27=HEAP8[(($26)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($1+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($1+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $41=$34;var $40=$32;label=10;break;
 case 9: 
 var $36=$1;
 var $37=(($36+1)|0);
 var $38=($27&255);
 var $39=$38>>>1;
 var $41=$39;var $40=$37;label=10;break;
 case 10: 
 var $40;
 var $41;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$40,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $42=HEAP8[(($26)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=16;break;}else{label=12;break;}
 case 12: 
 var $46=(($1+8)|0);
 var $47=HEAP32[(($46)>>2)];
 _free($47);
 label=16;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP8[(($26)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=15;break;}else{label=14;break;}
 case 14: 
 var $54=(($1+8)|0);
 var $55=HEAP32[(($54)>>2)];
 _free($55);
 label=15;break;
 case 15: 
 ___resumeException($49$0)
 case 16: 
 var $56=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($_pre1)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($_pre1)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($_pre1)+(8))>>2)];
 HEAP32[(($_pre1)>>2)]=0; HEAP32[((($_pre1)+(4))>>2)]=0; HEAP32[((($_pre1)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec_0,$ec_1,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ec=sp;
 var $tmpcast=$ec;
 var $_02=$ec;
 HEAP32[(($_02)>>2)]=$ec_0;
 var $_1=(($tmpcast+4)|0);
 HEAP32[(($_1)>>2)]=$ec_1;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=_strlen($what_arg);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,$what_arg,$3);
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$tmpcast,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $5=(($this)|0);
 HEAP32[(($5)>>2)]=15256;
 var $6=$1;
 var $7=HEAP8[(($6)>>0)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=(($1+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $16=$12;label=5;break;
 case 4: 
 var $14=$1;
 var $15=(($14+1)|0);
 var $16=$15;label=5;break;
 case 5: 
 var $16;
 var $17=_strlen($16);
 var $18=((($17)+(13))|0);
 var $19=(function() { try { __THREW__ = 0; return __Znwj($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $21=$19;
 HEAP32[(($21)>>2)]=$17;
 var $22=(($19+4)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=$17;
 var $24=(($19+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 var $26=(($19+12)|0);
 var $27=((($17)+(1))|0);
 assert($27 % 1 === 0);(_memcpy($26, $16, $27)|0);
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$26;
 if($9){label=8;break;}else{label=7;break;}
 case 7: 
 var $30=(($1+8)|0);
 var $31=HEAP32[(($30)>>2)];
 _free($31);
 label=8;break;
 case 8: 
 var $32=$2;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 _free($38);
 label=10;break;
 case 10: 
 HEAP32[(($5)>>2)]=17432;
 var $39=(($this+8)|0);
 var $40=$39;
 var $ld$0$0=(($ec)|0);
 var $41$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($ec+4)|0);
 var $41$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($40)|0);
 HEAP32[(($st$2$0)>>2)]=$41$0;
 var $st$3$1=(($40+4)|0);
 HEAP32[(($st$3$1)>>2)]=$41$1;
 STACKTOP=sp;return;
 case 11: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=$43$0;
 var $45=$43$1;
 var $_0=$45;var $_01=$44;label=14;break;
 case 12: 
 var $46$0 = ___cxa_find_matching_catch(); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=$46$1;
 if($9){var $_0=$48;var $_01=$47;label=14;break;}else{label=13;break;}
 case 13: 
 var $50=(($1+8)|0);
 var $51=HEAP32[(($50)>>2)];
 _free($51);
 var $_0=$48;var $_01=$47;label=14;break;
 case 14: 
 var $_01;
 var $_0;
 var $52=$2;
 var $53=HEAP8[(($52)>>0)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 var $57=(($2+8)|0);
 var $58=HEAP32[(($57)>>2)];
 _free($58);
 label=16;break;
 case 16: 
 var $59$0=$_01;
 var $59$1=0;
 var $60$0=$59$0;
 var $60$1=$_0;
 ___resumeException($60$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112system_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=15256;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112system_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=15256;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=15352;
 var $2=(($0+4)|0);
 var $3=_strlen(8856);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, 8856, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 HEAP32[(($1)>>2)]=15320;
 ___cxa_throw($0,26160,(482));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=15352;
 var $2=(($0+4)|0);
 var $3=_strlen(8856);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, 8856, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 HEAP32[(($1)>>2)]=15288;
 ___cxa_throw($0,26144,(482));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=4;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$9,$11);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[(($19)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__n;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $19=(($__p_0+$__n)|0);
 HEAP8[(($19)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 var $13=$10&1;
 var $14=(($13<<24)>>24)==0;
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=7;break;
 case 6: 
 var $20=$this;
 var $21=(($20+1)|0);
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 _memmove($22,$__s,$__n,1,0);
 var $23=(($22+$__n)|0);
 HEAP8[(($23)>>0)]=0;
 var $24=HEAP8[(($1)>>0)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[(($1)>>0)]=$31;
 label=14;break;
 case 10: 
 if($14){label=12;break;}else{label=11;break;}
 case 11: 
 var $34=(($this+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=13;break;
 case 12: 
 var $37=($10&255);
 var $38=$37>>>1;
 var $39=$38;label=13;break;
 case 13: 
 var $39;
 var $40=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$40,$39,0,$39,$__n,$__s);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=5;break;}else{label=20;break;}
 case 5: 
 var $14=((($__n)-($11))|0);
 var $15=($11|0)==($__n|0);
 if($15){label=23;break;}else{label=6;break;}
 case 6: 
 if($4){var $23=10;var $22=$2;label=8;break;}else{label=7;break;}
 case 7: 
 var $18=(($this)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2;
 var $phitmp_i_i=((($20)-(1))|0);
 var $21=(($19)&255);
 var $23=$phitmp_i_i;var $22=$21;label=8;break;
 case 8: 
 var $22;
 var $23;
 var $24=$22&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=($22&255);
 var $31=$30>>>1;
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=((($23)-($32))|0);
 var $34=($33>>>0)<($14>>>0);
 if($34){label=12;break;}else{var $39=$22;label=13;break;}
 case 12: 
 var $36=((($14)-($23))|0);
 var $37=((($36)+($32))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$23,$37,$32,$32,0);
 var $_pre_i=HEAP8[(($1)>>0)];
 var $39=$_pre_i;label=13;break;
 case 13: 
 var $39;
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=(($this+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $48=$44;label=16;break;
 case 15: 
 var $46=$this;
 var $47=(($46+1)|0);
 var $48=$47;label=16;break;
 case 16: 
 var $48;
 var $49=(($48+$32)|0);
 _memset($49, 0, $14)|0;
 var $50=((($32)+($14))|0);
 var $51=HEAP8[(($1)>>0)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=19;break;
 case 18: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[(($1)>>0)]=$58;
 label=19;break;
 case 19: 
 var $59=(($48+$50)|0);
 HEAP8[(($59)>>0)]=0;
 label=23;break;
 case 20: 
 if($4){label=22;break;}else{label=21;break;}
 case 21: 
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+$__n)|0);
 HEAP8[(($64)>>0)]=0;
 var $65=(($this+4)|0);
 HEAP32[(($65)>>2)]=$__n;
 label=23;break;
 case 22: 
 var $67=$this;
 var $68=(($67+1+$__n)|0);
 HEAP8[(($68)>>0)]=0;
 var $69=$__n<<1;
 var $70=(($69)&255);
 HEAP8[(($1)>>0)]=$70;
 label=23;break;
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[(($4)>>0)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp_i=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp_i;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=$13&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=(($this+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $23=$19;label=8;break;
 case 7: 
 var $21=($13&255);
 var $22=$21>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $25=($24?$23:$__res_arg);
 var $26=($25>>>0)<11;
 if($26){var $30=10;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($25)+(16))|0);
 var $29=$28&-16;
 var $phitmp_i2=((($29)-(1))|0);
 var $30=$phitmp_i2;label=10;break;
 case 10: 
 var $30;
 var $31=($30|0)==($14|0);
 if($31){label=28;break;}else{label=11;break;}
 case 11: 
 var $33=($30|0)==10;
 if($33){label=12;break;}else{label=13;break;}
 case 12: 
 var $35=$this;
 var $36=(($35+1)|0);
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $59=$13;label=20;break;
 case 13: 
 var $40=($30>>>0)>($14>>>0);
 var $41=((($30)+(1))|0);
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($41);
 var $__new_data_0=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=28;break;
 case 17: 
 var $__new_data_0;
 var $50=HEAP8[(($4)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=(($this+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $__new_data_1=$__new_data_0;var $__p_0=$55;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $59=$50;label=20;break;
 case 19: 
 var $57=$this;
 var $58=(($57+1)|0);
 var $__new_data_1=$__new_data_0;var $__p_0=$58;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $59=$50;label=20;break;
 case 20: 
 var $59;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $60=$59&1;
 var $61=(($60<<24)>>24)==0;
 if($61){label=22;break;}else{label=21;break;}
 case 21: 
 var $63=(($this+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $68=$64;label=23;break;
 case 22: 
 var $66=($59&255);
 var $67=$66>>>1;
 var $68=$67;label=23;break;
 case 23: 
 var $68;
 var $69=((($68)+(1))|0);
 assert($69 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $69)|0);
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 _free($__p_0);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $73=((($30)+(1))|0);
 var $74=$73|1;
 var $75=(($this)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($this+4)|0);
 HEAP32[(($76)>>2)]=$23;
 var $77=(($this+8)|0);
 HEAP32[(($77)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $79=$23<<1;
 var $80=(($79)&255);
 HEAP8[(($4)>>0)]=$80;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=10;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0);
 var $18=HEAP8[(($1)>>0)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=$this;
 var $24=(($23+1)|0);
 var $25=$__sz_0<<1;
 var $26=((($25)+(2))|0);
 var $27=(($26)&255);
 HEAP8[(($1)>>0)]=$27;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$24;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $29=(($this+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($__sz_0)+(1))|0);
 var $32=(($this+4)|0);
 HEAP32[(($32)>>2)]=$31;
 var $_pn=$30;var $__p_0_sum_pre_phi=$31;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[(($__p_0)>>0)]=$__c;
 var $34=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[(($34)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=((($11)-($20))|0);
 var $22=($21>>>0)<($__n>>>0);
 if($22){label=15;break;}else{label=7;break;}
 case 7: 
 var $24=($__n|0)==0;
 if($24){label=16;break;}else{label=8;break;}
 case 8: 
 if($13){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=$this;
 var $31=(($30+1)|0);
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=(($32+$20)|0);
 assert($__n % 1 === 0);(_memcpy($33, $__s, $__n)|0);
 var $34=((($20)+($__n))|0);
 var $35=HEAP8[(($1)>>0)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=13;break;}else{label=12;break;}
 case 12: 
 var $39=(($this+4)|0);
 HEAP32[(($39)>>2)]=$34;
 label=14;break;
 case 13: 
 var $41=$34<<1;
 var $42=(($41)&255);
 HEAP8[(($1)>>0)]=$42;
 label=14;break;
 case 14: 
 var $43=(($32+$34)|0);
 HEAP8[(($43)>>0)]=0;
 label=16;break;
 case 15: 
 var $45=((($__n)-($11))|0);
 var $46=((($45)+($20))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$46,$20,$20,0,$__n,$__s);
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=($__n_add|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=(($27+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($33, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 var $38=((($35)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $39=(($27+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $40=(($15+$_sum1)|0);
 assert($38 % 1 === 0);(_memcpy($39, $40, $38)|0);
 label=15;break;
 case 15: 
 var $42=($__old_cap|0)==10;
 if($42){label=17;break;}else{label=16;break;}
 case 16: 
 _free($15);
 label=17;break;
 case 17: 
 var $45=(($this+8)|0);
 HEAP32[(($45)>>2)]=$27;
 var $46=$26|1;
 var $47=(($this)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=((($35)+($__n_add))|0);
 var $49=(($this+4)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=(($27+$48)|0);
 HEAP8[(($50)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=($__old_sz|0)==($__n_copy|0);
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=((($__old_sz)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $34=(($27+$_sum)|0);
 var $35=(($15+$__n_copy)|0);
 assert($33 % 1 === 0);(_memcpy($34, $35, $33)|0);
 label=13;break;
 case 13: 
 var $37=($__old_cap|0)==10;
 if($37){label=15;break;}else{label=14;break;}
 case 14: 
 _free($15);
 label=15;break;
 case 15: 
 var $40=(($this+8)|0);
 HEAP32[(($40)>>2)]=$27;
 var $41=$26|1;
 var $42=(($this)|0);
 HEAP32[(($42)>>2)]=$41;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=($3&255);
 var $11=$10>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($1|0)==-1;
 if($13){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=16;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 if($5){label=9;break;}else{label=8;break;}
 case 8: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=10;break;
 case 9: 
 var $20=$this;
 var $21=(($20+1)|0);
 var $22=$21;label=10;break;
 case 10: 
 var $22;
 var $23=($12>>>0)>($1>>>0);
 var $24=($23?$1:$12);
 var $25=($24|0)==0;
 if($25){label=14;break;}else{var $_02_i_i=$24;var $l_03_i_i=$22;var $r_04_i_i=$__s;label=11;break;}
 case 11: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $26=HEAP8[(($l_03_i_i)>>0)];
 var $27=HEAP8[(($r_04_i_i)>>0)];
 var $28=(($26<<24)>>24)==(($27<<24)>>24);
 if($28){label=12;break;}else{label=13;break;}
 case 12: 
 var $30=((($_02_i_i)-(1))|0);
 var $31=(($l_03_i_i+1)|0);
 var $32=(($r_04_i_i+1)|0);
 var $33=($30|0)==0;
 if($33){label=14;break;}else{var $_02_i_i=$30;var $l_03_i_i=$31;var $r_04_i_i=$32;label=11;break;}
 case 13: 
 var $34=($26&255);
 var $35=($27&255);
 var $36=((($34)-($35))|0);
 var $37=(($26<<24)>>24)==(($27<<24)>>24);
 if($37){label=14;break;}else{label=15;break;}
 case 14: 
 var $38=($12>>>0)<($1>>>0);
 var $__i=($23&1);
 var $___i=($38?-1:$__i);
 return $___i;
 case 15: 
 return $36;
 case 16: 
 var $40$0 = ___cxa_find_matching_catch(0); var $40$1 = tempRet0;
 var $41=$40$0;
 ___clang_call_terminate($41);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=($__sz|0)==0;
 if($20){label=8;break;}else{var $_023_i=$__s;var $_014_i=$__sz;var $_05_i=$__p_0;label=7;break;}
 case 7: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $21=((($_014_i)-(1))|0);
 var $22=(($_023_i+4)|0);
 var $23=HEAP32[(($_023_i)>>2)];
 var $24=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$23;
 var $25=($21|0)==0;
 if($25){label=8;break;}else{var $_023_i=$22;var $_014_i=$21;var $_05_i=$24;label=7;break;}
 case 8: 
 var $26=(($__p_0+($__sz<<2))|0);
 HEAP32[(($26)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=($__n|0)==0;
 if($20){label=8;break;}else{var $_012_i=$__n;var $_03_i=$__p_0;label=7;break;}
 case 7: 
 var $_03_i;
 var $_012_i;
 var $21=((($_012_i)-(1))|0);
 var $22=(($_03_i+4)|0);
 HEAP32[(($_03_i)>>2)]=$__c;
 var $23=($21|0)==0;
 if($23){label=8;break;}else{var $_012_i=$21;var $_03_i=$22;label=7;break;}
 case 8: 
 var $24=(($__p_0+($__n<<2))|0);
 HEAP32[(($24)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 _free($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=$__s;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=$__s;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=$this;
 var $10=HEAP8[(($9)>>0)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){var $19=1;var $18=$10;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($this)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&-2;
 var $phitmp_i_i=((($16)-(1))|0);
 var $17=(($15)&255);
 var $19=$phitmp_i_i;var $18=$17;label=5;break;
 case 5: 
 var $18;
 var $19;
 var $20=($8>>>0)>($19>>>0);
 if($20){label=12;break;}else{label=6;break;}
 case 6: 
 var $22=$18&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($this+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=9;break;
 case 8: 
 var $28=(($this+4)|0);
 var $29=$28;label=9;break;
 case 9: 
 var $29;
 _wmemmove($29,$__s,$8);
 var $30=(($29+($8<<2))|0);
 HEAP32[(($30)>>2)]=0;
 var $31=HEAP8[(($9)>>0)];
 var $32=$31&1;
 var $33=(($32<<24)>>24)==0;
 if($33){label=11;break;}else{label=10;break;}
 case 10: 
 var $35=(($this+4)|0);
 HEAP32[(($35)>>2)]=$8;
 label=25;break;
 case 11: 
 var $37=$7>>>1;
 var $38=(($37)&255);
 HEAP8[(($9)>>0)]=$38;
 label=25;break;
 case 12: 
 var $39=((($8)-($19))|0);
 var $40=(((1073741806)-($19))|0);
 var $41=($40>>>0)<($39>>>0);
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 14: 
 var $44=$18&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=16;break;}else{label=15;break;}
 case 15: 
 var $47=(($this+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $51=$48;label=17;break;
 case 16: 
 var $50=(($this+4)|0);
 var $51=$50;label=17;break;
 case 17: 
 var $51;
 var $52=($19>>>0)<536870887;
 if($52){label=18;break;}else{var $61=1073741807;label=20;break;}
 case 18: 
 var $54=$19<<1;
 var $55=($8>>>0)<($54>>>0);
 var $56=($55?$54:$8);
 var $57=($56>>>0)<2;
 if($57){var $61=2;label=20;break;}else{label=19;break;}
 case 19: 
 var $59=((($56)+(4))|0);
 var $60=$59&-4;
 var $61=$60;label=20;break;
 case 20: 
 var $61;
 var $62=$61<<2;
 var $63=__Znwj($62);
 var $64=$63;
 var $65=($8|0)==0;
 if($65){label=22;break;}else{var $_023_i_i_i=$__s;var $_014_i_i_i=$8;var $_05_i_i_i=$64;label=21;break;}
 case 21: 
 var $_05_i_i_i;
 var $_014_i_i_i;
 var $_023_i_i_i;
 var $66=((($_014_i_i_i)-(1))|0);
 var $67=(($_023_i_i_i+4)|0);
 var $68=HEAP32[(($_023_i_i_i)>>2)];
 var $69=(($_05_i_i_i+4)|0);
 HEAP32[(($_05_i_i_i)>>2)]=$68;
 var $70=($66|0)==0;
 if($70){label=22;break;}else{var $_023_i_i_i=$67;var $_014_i_i_i=$66;var $_05_i_i_i=$69;label=21;break;}
 case 22: 
 var $71=($19|0)==1;
 if($71){label=24;break;}else{label=23;break;}
 case 23: 
 var $73=$51;
 _free($73);
 label=24;break;
 case 24: 
 var $74=(($this+8)|0);
 HEAP32[(($74)>>2)]=$64;
 var $75=$61|1;
 var $76=(($this)|0);
 HEAP32[(($76)>>2)]=$75;
 var $77=(($this+4)|0);
 HEAP32[(($77)>>2)]=$8;
 var $78=(($64+($8<<2))|0);
 HEAP32[(($78)>>2)]=0;
 label=25;break;
 case 25: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<2;
 if($21){var $25=1;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $phitmp_i2=((($24)-(1))|0);
 var $25=$phitmp_i2;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)==($11|0);
 if($26){label=28;break;}else{label=9;break;}
 case 9: 
 var $28=($25|0)==1;
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 var $30=(($this+4)|0);
 var $31=(($this+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $__new_data_1=$30;var $__p_0=$32;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $54=$10;label=18;break;
 case 11: 
 var $34=($25>>>0)>($11>>>0);
 var $35=$25<<2;
 var $36=((($35)+(4))|0);
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $38=__Znwj($36);
 var $_sink=$38;label=15;break;
 case 13: 
 var $40=(function() { try { __THREW__ = 0; return __Znwj($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sink=$40;label=15;break; } else { label=14;break; }
 case 14: 
 var $42$0 = ___cxa_find_matching_catch(0); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=___cxa_begin_catch($43);
 ___cxa_end_catch();
 label=28;break;
 case 15: 
 var $_sink;
 var $45=$_sink;
 var $46=HEAP8[(($1)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=17;break;}else{label=16;break;}
 case 16: 
 var $50=(($this+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $__new_data_1=$45;var $__p_0=$51;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $54=$46;label=18;break;
 case 17: 
 var $53=(($this+4)|0);
 var $__new_data_1=$45;var $__p_0=$53;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $54=$46;label=18;break;
 case 18: 
 var $54;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=20;break;}else{label=19;break;}
 case 19: 
 var $58=(($this+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=21;break;
 case 20: 
 var $61=($54&255);
 var $62=$61>>>1;
 var $63=$62;label=21;break;
 case 21: 
 var $63;
 var $64=((($63)+(1))|0);
 var $65=($64|0)==0;
 if($65){label=23;break;}else{var $_023_i=$__p_0;var $_014_i=$64;var $_05_i=$__new_data_1;label=22;break;}
 case 22: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $66=((($_014_i)-(1))|0);
 var $67=(($_023_i+4)|0);
 var $68=HEAP32[(($_023_i)>>2)];
 var $69=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$68;
 var $70=($66|0)==0;
 if($70){label=23;break;}else{var $_023_i=$67;var $_014_i=$66;var $_05_i=$69;label=22;break;}
 case 23: 
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 var $72=$__p_0;
 _free($72);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $75=((($25)+(1))|0);
 var $76=$75|1;
 var $77=(($this)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($this+4)|0);
 HEAP32[(($78)>>2)]=$20;
 var $79=(($this+8)|0);
 HEAP32[(($79)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $81=$20<<1;
 var $82=(($81)&255);
 HEAP8[(($1)>>0)]=$82;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[(($1)>>0)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($this+4)|0);
 var $24=$__sz_0<<1;
 var $25=((($24)+(2))|0);
 var $26=(($25)&255);
 HEAP8[(($1)>>0)]=$26;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$23;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $28=(($this+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($__sz_0)+(1))|0);
 var $31=(($this+4)|0);
 HEAP32[(($31)>>2)]=$30;
 var $_pn=$29;var $__p_0_sum_pre_phi=$30;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $33=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($33)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $25=1073741807;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=9;break;
 case 9: 
 var $25;
 var $26=$25<<2;
 var $27=__Znwj($26);
 var $28=$27;
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{var $_023_i=$14;var $_014_i=$__n_copy;var $_05_i=$28;label=10;break;}
 case 10: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $30=((($_014_i)-(1))|0);
 var $31=(($_023_i+4)|0);
 var $32=HEAP32[(($_023_i)>>2)];
 var $33=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$32;
 var $34=($30|0)==0;
 if($34){label=11;break;}else{var $_023_i=$31;var $_014_i=$30;var $_05_i=$33;label=10;break;}
 case 11: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=14;break;}else{label=12;break;}
 case 12: 
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $37=(($14+($_sum1<<2))|0);
 var $38=(($28+($_sum<<2))|0);
 var $39=((($35)-($__n_copy))|0);
 var $_023_i3=$37;var $_014_i2=$39;var $_05_i1=$38;label=13;break;
 case 13: 
 var $_05_i1;
 var $_014_i2;
 var $_023_i3;
 var $40=((($_014_i2)-(1))|0);
 var $41=(($_023_i3+4)|0);
 var $42=HEAP32[(($_023_i3)>>2)];
 var $43=(($_05_i1+4)|0);
 HEAP32[(($_05_i1)>>2)]=$42;
 var $44=($40|0)==0;
 if($44){label=14;break;}else{var $_023_i3=$41;var $_014_i2=$40;var $_05_i1=$43;label=13;break;}
 case 14: 
 var $45=($__old_cap|0)==1;
 if($45){label=16;break;}else{label=15;break;}
 case 15: 
 var $47=$14;
 _free($47);
 label=16;break;
 case 16: 
 var $49=(($this+8)|0);
 HEAP32[(($49)>>2)]=$28;
 var $50=$25|1;
 var $51=(($this)|0);
 HEAP32[(($51)>>2)]=$50;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+24)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+16)|0);
 HEAP32[(($5)>>2)]=$state;
 label=4;break;
 case 3: 
 var $7=$state|1;
 var $8=(($this+16)|0);
 HEAP32[(($8)>>2)]=$7;
 label=4;break;
 case 4: 
 var $10=($3&1);
 var $11=$10|$state;
 var $12=(($this+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$11&$13;
 var $15=($14|0)==0;
 if($15){label=11;break;}else{label=5;break;}
 case 5: 
 var $17=___cxa_allocate_exception(16);
 var $18=HEAP8[((34400)>>0)];
 var $19=(($18<<24)>>24)==0;
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 var $21=___cxa_guard_acquire(34400);
 var $22=($21|0)==0;
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((30888)>>2)]=16816;

 label=8;break;
 case 8: 
 var $24=$17;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($24,1,30888,6040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $26=$17;
 HEAP32[(($26)>>2)]=16000;
 ___cxa_throw($17,26768,(124));
 throw "Reached an unreachable!";
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 ___cxa_free_exception($17);
 ___resumeException($28$0)
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=15976;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+32)|0);
 var $6=(($this+36)|0);
 var $i_01_i=$3;label=3;break;
 case 3: 
 var $i_01_i;
 var $8=((($i_01_i)-(1))|0);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=HEAP32[(($6)>>2)];
 var $13=(($12+($8<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11](0,$this,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $15=($8|0)==0;
 if($15){label=5;break;}else{var $i_01_i=$8;label=3;break;}
 case 5: 
 var $16=(($this+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$17;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=7;break;
 case 7: 
 var $28=(($this+32)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 _free($30);
 var $31=(($this+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 _free($33);
 var $34=(($this+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$35;
 _free($36);
 var $37=(($this+60)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 _free($39);
 return;
 case 8: 
 var $41$0 = ___cxa_find_matching_catch(0); var $41$1 = tempRet0;
 var $42=$41$0;
 ___clang_call_terminate($42);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17048;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17048;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17048;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[(($6)>>0)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[(($_01)>>0)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[(($9)>>0)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[(($_02)>>0)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[(($6)>>0)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[(($_02)>>0)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=16976;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=16976;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=16976;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=(($_01+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01=$20;var $__i_02=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_02+4)|0);
 var $21=((($__i_01)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_01=$21;var $_02=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}

//Func
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}

//Func
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP8[(($1)>>0)]=0;
 var $2=$__is;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$__is;
 var $_sum=((($6)+(16))|0);
 var $8=(($7+$_sum)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum13=((($6)+(72))|0);
 var $13=(($7+$_sum13)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $18=$6;label=4;break;}else{label=3;break;}
 case 3: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15);
 var $_pre=HEAP32[(($2)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert1=$_phi_trans_insert;
 var $_pre2=HEAP32[(($_phi_trans_insert1)>>2)];
 var $18=$_pre2;label=4;break;
 case 4: 
 var $18;
 var $_sum16=((($18)+(16))|0);
 var $19=(($7+$_sum16)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 var $23=($22&1);
 HEAP8[(($1)>>0)]=$23;
 label=6;break;
 case 5: 
 var $25=(($7+$6)|0);
 var $26=$25;
 var $27=$10|4;
 __ZNSt3__18ios_base5clearEj($26,$27);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[(($12)>>0)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum1_i=((($5)+(72))|0);
 var $19=(($6+$_sum1_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[(($12)>>0)]=1;
 var $25=HEAP32[(($1)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum1=((($28)+(24))|0);
 var $29=(($6+$_sum1)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=$31;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+24)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $38=($37|0)==-1;
 if($38){label=7;break;}else{label=15;break;}
 case 7: 
 var $40=HEAP32[(($1)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($6+$43)|0);
 var $45=$44;
 var $_sum2=((($43)+(16))|0);
 var $46=(($6+$_sum2)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$48|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($45,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $51$0 = ___cxa_find_matching_catch(0); var $51$1 = tempRet0;
 var $52=$51$0;
 var $_0=$52;label=10;break;
 case 9: 
 var $54$0 = ___cxa_find_matching_catch(0); var $54$1 = tempRet0;
 var $55=$54$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$55;label=10;break;
 case 10: 
 var $_0;
 var $57=___cxa_begin_catch($_0);
 var $58=HEAP32[(($1)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum3=((($61)+(16))|0);
 var $62=(($6+$_sum3)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|1;
 HEAP32[(($63)>>2)]=$65;
 var $_sum4=((($61)+(20))|0);
 var $66=(($6+$_sum4)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
 case 15: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $74$0 = ___cxa_find_matching_catch(); var $74$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($74$0)
 case 18: 
 var $77$0 = ___cxa_find_matching_catch(0); var $77$1 = tempRet0;
 var $78=$77$0;
 ___clang_call_terminate($78);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($this,$__dir){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sen=sp;
 var $1=(sp)+(8);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__sen,$this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $2=(($__sen)|0);
 var $3=HEAP8[(($2)>>0)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=10;break;}else{label=3;break;}
 case 3: 
 var $6=$this;
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)-(12))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$this;
 var $_sum=((($10)+(24))|0);
 var $12=(($11+$_sum)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=$14;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($1,$15,$$etemp$0$0,$$etemp$0$1,$__dir,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $21=(($1+8)|0);
 var $ld$1$0=(($21)|0);
 var $22$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($21+4)|0);
 var $22$1=HEAP32[(($ld$2$1)>>2)];
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $23=(($22$0|0) == ($$etemp$3$0|0)) & (($22$1|0) == ($$etemp$3$1|0));
 if($23){label=5;break;}else{label=10;break;}
 case 5: 
 var $25=HEAP32[(($6)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($11+$28)|0);
 var $30=$29;
 var $_sum1=((($28)+(16))|0);
 var $31=(($11+$_sum1)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=$33|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($30,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=6;break; }
 case 6: 
 var $36$0 = ___cxa_find_matching_catch(0); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=___cxa_begin_catch($37);
 var $39=$this;
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=$this;
 var $_sum2=((($43)+(16))|0);
 var $45=(($44+$_sum2)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=$47|1;
 HEAP32[(($46)>>2)]=$48;
 var $_sum3=((($43)+(20))|0);
 var $49=(($44+$_sum3)|0);
 var $50=$49;
 var $51=HEAP32[(($50)>>2)];
 var $52=$51&1;
 var $53=($52|0)==0;
 if($53){label=9;break;}else{label=7;break;}
 case 7: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 ___cxa_end_catch();
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
 case 11: 
 var $56$0 = ___cxa_find_matching_catch(); var $56$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 ___resumeException($56$0)
 case 13: 
 var $59$0 = ___cxa_find_matching_catch(0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}

//Func
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[(($12)>>0)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum1_i=((($5)+(72))|0);
 var $19=(($6+$_sum1_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[(($12)>>0)]=1;
 var $25=HEAP32[(($1)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum1=((($28)+(24))|0);
 var $29=(($6+$_sum1)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=$31;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+24)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $38=($37|0)==-1;
 if($38){label=7;break;}else{label=15;break;}
 case 7: 
 var $40=HEAP32[(($1)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($6+$43)|0);
 var $45=$44;
 var $_sum2=((($43)+(16))|0);
 var $46=(($6+$_sum2)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$48|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($45,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $51$0 = ___cxa_find_matching_catch(0); var $51$1 = tempRet0;
 var $52=$51$0;
 var $_0=$52;label=10;break;
 case 9: 
 var $54$0 = ___cxa_find_matching_catch(0); var $54$1 = tempRet0;
 var $55=$54$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$55;label=10;break;
 case 10: 
 var $_0;
 var $57=___cxa_begin_catch($_0);
 var $58=HEAP32[(($1)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum3=((($61)+(16))|0);
 var $62=(($6+$_sum3)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|1;
 HEAP32[(($63)>>2)]=$65;
 var $_sum4=((($61)+(20))|0);
 var $66=(($6+$_sum4)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $74$0 = ___cxa_find_matching_catch(); var $74$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($74$0)
 case 18: 
 var $77$0 = ___cxa_find_matching_catch(0); var $77$1 = tempRet0;
 var $78=$77$0;
 ___clang_call_terminate($78);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}

//Func
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}

//Func
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}

//Func
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 8696;
}

//Func
function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)!=1;
 var $2=($ev|0)<257;
 var $or_cond=$1&$2;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strerror($ev);
 var $5=_strlen($4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,$4,$5);
 label=4;break;
 case 3: 
 var $7=__Znwj(48);
 var $8=(($agg_result+8)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=(($agg_result)|0);
 HEAP32[(($9)>>2)]=49;
 var $10=(($agg_result+4)|0);
 HEAP32[(($10)>>2)]=35;
 assert(35 % 1 === 0);(_memcpy($7, 9512, 35)|0);
 var $11=(($7+35)|0);
 HEAP8[(($11)>>0)]=0;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=15256;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=15256;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;


 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17collateIcED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[(($_024)>>0)];
 var $5=HEAP8[(($_015)>>0)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg_result,$__lo,$__hi);
 return;
}

//Func
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[(($__p_01)>>0)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17collateIwED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg_result,$__lo,$__hi);
 return;
}

//Func
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__lv=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $__names=(sp)+(32);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[(($__v)>>0)]=0;
 label=6;break;
 case 4: 
 HEAP8[(($__v)>>0)]=1;
 label=6;break;
 case 5: 
 HEAP8[(($__v)>>0)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=35;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $_idx13=(($29+8)|0);
 var $34=$_idx13;
 var $_idx13_val=HEAP32[(($34)>>2)];
 var $_idx14=(($29+12)|0);
 var $35=$_idx14;
 var $_idx14_val=HEAP32[(($35)>>2)];
 var $36=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx13_val,$_idx14_val,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $37=$36;
 var $38=(($29+4)|0);
 var $39=$38;
 var $40=(tempValue=HEAP32[(($39)>>2)],HEAP32[(($39)>>2)]=tempValue+-1,tempValue);
 var $41=($40|0)==0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$29;
 var $44=$29;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($43);
 label=11;break;
 case 11: 
 var $48=HEAP32[(($28)>>2)];
 var $49=(($48+4)|0);
 var $50=$49;
 var $51=(tempValue=HEAP32[(($50)>>2)],HEAP32[(($50)>>2)]=tempValue+1,tempValue);
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $_idx=(($48+8)|0);
 var $53=$_idx;
 var $_idx_val=HEAP32[(($53)>>2)];
 var $_idx12=(($48+12)|0);
 var $54=$_idx12;
 var $_idx12_val=HEAP32[(($54)>>2)];
 var $55=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx12_val,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 var $56=$55;
 var $57=(($48+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+-1,tempValue);
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$48;
 var $63=$48;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+8)|0);
 var $66=HEAP32[(($65)>>2)];
 FUNCTION_TABLE[$66]($62);
 label=15;break;
 case 15: 
 var $67=(($__names)|0);
 var $68=$55;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($67,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $_02=$67;label=26;break; }
 case 16: 
 var $72=(($__names+12)|0);
 var $73=HEAP32[(($68)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($72,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { var $_02=$72;label=26;break; }
 case 17: 
 var $76=(($__e)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($__names+24)|0);
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$77,$67,$78,$37,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=30;break; }
 case 18: 
 var $80=($79|0)==($67|0);
 var $81=($80&1);
 HEAP8[(($__v)>>0)]=$81;
 var $82=(($__b)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($agg_result)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=$72;
 var $86=HEAP8[(($85)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=20;break;}else{label=19;break;}
 case 19: 
 var $90=(($__names+20)|0);
 var $91=HEAP32[(($90)>>2)];
 _free($91);
 label=20;break;
 case 20: 
 var $92=$__names;
 var $93=HEAP8[(($92)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=35;break;}else{label=21;break;}
 case 21: 
 var $97=(($__names+8)|0);
 var $98=HEAP32[(($97)>>2)];
 _free($98);
 label=35;break;
 case 22: 
 var $100$0 = ___cxa_find_matching_catch(); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=(($29+4)|0);
 var $104=$103;
 var $105=(tempValue=HEAP32[(($104)>>2)],HEAP32[(($104)>>2)]=tempValue+-1,tempValue);
 var $106=($105|0)==0;
 if($106){label=23;break;}else{var $_0=$101;var $_01=$102;label=36;break;}
 case 23: 
 var $108=$29;
 var $109=$29;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+8)|0);
 var $112=HEAP32[(($111)>>2)];
 FUNCTION_TABLE[$112]($108);
 var $_0=$101;var $_01=$102;label=36;break;
 case 24: 
 var $114$0 = ___cxa_find_matching_catch(); var $114$1 = tempRet0;
 var $115=$114$0;
 var $116=$114$1;
 var $117=(($48+4)|0);
 var $118=$117;
 var $119=(tempValue=HEAP32[(($118)>>2)],HEAP32[(($118)>>2)]=tempValue+-1,tempValue);
 var $120=($119|0)==0;
 if($120){label=25;break;}else{var $_0=$115;var $_01=$116;label=36;break;}
 case 25: 
 var $122=$48;
 var $123=$48;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+8)|0);
 var $126=HEAP32[(($125)>>2)];
 FUNCTION_TABLE[$126]($122);
 var $_0=$115;var $_01=$116;label=36;break;
 case 26: 
 var $_02;
 var $128$0 = ___cxa_find_matching_catch(); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $131=($67|0)==($_02|0);
 if($131){var $_0=$129;var $_01=$130;label=36;break;}else{var $132=$_02;label=27;break;}
 case 27: 
 var $132;
 var $133=((($132)-(12))|0);
 var $134=$133;
 var $135=HEAP8[(($134)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=29;break;}else{label=28;break;}
 case 28: 
 var $139=((($132)-(12)+8)|0);
 var $140=HEAP32[(($139)>>2)];
 _free($140);
 label=29;break;
 case 29: 
 var $141=($133|0)==($67|0);
 if($141){var $_0=$129;var $_01=$130;label=36;break;}else{var $132=$133;label=27;break;}
 case 30: 
 var $142$0 = ___cxa_find_matching_catch(); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$72;
 var $145=HEAP8[(($144)>>0)];
 var $146=$145&1;
 var $147=(($146<<24)>>24)==0;
 if($147){label=32;break;}else{label=31;break;}
 case 31: 
 var $149=(($__names+20)|0);
 var $150=HEAP32[(($149)>>2)];
 _free($150);
 label=32;break;
 case 32: 
 var $151=$__names;
 var $152=HEAP8[(($151)>>0)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=34;break;}else{label=33;break;}
 case 33: 
 var $156=(($__names+8)|0);
 var $157=HEAP32[(($156)>>2)];
 _free($157);
 label=34;break;
 case 34: 
 var $158=$142$1;
 var $_0=$143;var $_01=$158;label=36;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $_01;
 var $_0;
 var $159$0=$_0;
 var $159$1=0;
 var $160$0=$159$0;
 var $160$1=$_01;
 ___resumeException($160$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $161$0=$161$r;var $161$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$161$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$161$1;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP16[(($__v)>>1)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $161$0=$161$r;var $161$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$161$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$161$1;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF32[(($__v)>>2)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__grouping=(sp)+(32);
 var $__buf=(sp)+(48);
 var $__a_end=(sp)+(64);
 var $__g=(sp)+(72);
 var $__g_end=(sp)+(232);
 var $__dc=(sp)+(240);
 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=38;break; }
 case 3: 
 var $10=$9;
 var $11=(($__atoms)|0);
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+32)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($10,28584,28610,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=38;break; }
 case 4: 
 var $17=(($2+4)|0);
 var $18=$17;
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$2;
 var $23=$2;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+8)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($22);
 label=6;break;
 case 6: 
 var $this2_i_i_i5=$__buf;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 var $27=HEAP8[(($this2_i_i_i5)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($__buf+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $36=$32;var $_pre_phi35=$_pre34;var $_pre_phi37=$31;label=10;break;
 case 9: 
 var $34=$__buf;
 var $35=(($34+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $36=$35;var $_pre_phi35=$35;var $_pre_phi37=$_pre36;label=10;break;
 case 10: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $36;
 HEAP32[(($__a_end)>>2)]=$36;
 var $37=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $38=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$38;
 HEAP32[(($__dc)>>2)]=0;
 var $39=(($__b)|0);
 var $40=(($__e)|0);
 var $41=(($__buf)|0);
 var $42=(($__buf+4)|0);
 var $_pre=HEAP32[(($39)>>2)];
 var $__a_0=$36;var $_pre_i_i_i8=$_pre;label=11;break;
 case 11: 
 var $_pre_i_i_i8;
 var $__a_0;
 var $43=($_pre_i_i_i8|0)==0;
 if($43){var $57=0;label=16;break;}else{label=12;break;}
 case 12: 
 var $45=(($_pre_i_i_i8+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($_pre_i_i_i8+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=13;break;}else{var $57=$_pre_i_i_i8;label=16;break;}
 case 13: 
 var $50=$_pre_i_i_i8;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($_pre_i_i_i8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=40;break; }
 case 14: 
 var $55=($54|0)==-1;
 if($55){label=15;break;}else{var $57=$_pre_i_i_i8;label=16;break;}
 case 15: 
 HEAP32[(($39)>>2)]=0;
 var $57=0;label=16;break;
 case 16: 
 var $57;
 var $58=($57|0)==0;
 var $59=HEAP32[(($40)>>2)];
 var $60=($59|0)==0;
 if($60){label=22;break;}else{label=17;break;}
 case 17: 
 var $62=(($59+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=19;break;}else{label=18;break;}
 case 18: 
 if($58){var $76=$59;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$59;label=52;break;}
 case 19: 
 var $67=$59;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+36)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=40;break; }
 case 20: 
 var $72=($71|0)==-1;
 if($72){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($40)>>2)]=0;
 label=22;break;
 case 22: 
 if($58){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=52;break;}else{var $76=0;label=24;break;}
 case 23: 
 if($58){var $76=$59;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$59;label=52;break;}
 case 24: 
 var $76;
 var $77=HEAP32[(($__a_end)>>2)];
 var $78=HEAP8[(($this2_i_i_i5)>>0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($42)>>2)];
 var $86=$82;label=27;break;
 case 26: 
 var $84=($78&255);
 var $85=$84>>>1;
 var $86=$85;label=27;break;
 case 27: 
 var $86;
 var $87=(($__a_0+$86)|0);
 var $88=($77|0)==($87|0);
 if($88){label=28;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 28: 
 if($80){label=30;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($42)>>2)];
 var $95=$91;label=31;break;
 case 30: 
 var $93=($78&255);
 var $94=$93>>>1;
 var $95=$94;label=31;break;
 case 31: 
 var $95;
 var $96=$95<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $97=HEAP8[(($this2_i_i_i5)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $103=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $101=HEAP32[(($41)>>2)];
 var $102=$101&-2;
 var $phitmp_i24=((($102)-(1))|0);
 var $103=$phitmp_i24;label=34;break;
 case 34: 
 var $103;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $104=HEAP8[(($this2_i_i_i5)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){var $109=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $108=HEAP32[(($_pre_phi37)>>2)];
 var $109=$108;label=37;break;
 case 37: 
 var $109;
 var $110=(($109+$95)|0);
 HEAP32[(($__a_end)>>2)]=$110;
 var $__a_1=$109;label=44;break;
 case 38: 
 var $112$0 = ___cxa_find_matching_catch(); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=(($2+4)|0);
 var $116=$115;
 var $117=(tempValue=HEAP32[(($116)>>2)],HEAP32[(($116)>>2)]=tempValue+-1,tempValue);
 var $118=($117|0)==0;
 if($118){label=39;break;}else{var $_0=$113;var $_01=$114;label=78;break;}
 case 39: 
 var $120=$2;
 var $121=$2;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+8)|0);
 var $124=HEAP32[(($123)>>2)];
 FUNCTION_TABLE[$124]($120);
 var $_0=$113;var $_01=$114;label=78;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $126=$lpad_phi$0;
 var $127=$lpad_phi$1;
 var $128=HEAP8[(($this2_i_i_i5)>>0)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $_0=$126;var $_01=$127;label=78;break;}else{label=43;break;}
 case 43: 
 var $132=(($__buf+8)|0);
 var $133=HEAP32[(($132)>>2)];
 _free($133);
 var $_0=$126;var $_01=$127;label=78;break;
 case 44: 
 var $__a_1;
 var $135=(($57+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($57+16)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($136|0)==($138|0);
 if($139){label=45;break;}else{label=47;break;}
 case 45: 
 var $141=$57;
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=40;break; }
 case 46: 
 var $extract_t_i=(($145)&255);
 var $_0_i_off0_i=$extract_t_i;label=48;break;
 case 47: 
 var $147=HEAP8[(($136)>>0)];
 var $_0_i_off0_i=$147;label=48;break;
 case 48: 
 var $_0_i_off0_i;
 var $149=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$38,$__g_end,$11);
 var $150=($149|0)==0;
 if($150){label=49;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$76;label=52;break;}
 case 49: 
 var $152=HEAP32[(($135)>>2)];
 var $153=HEAP32[(($137)>>2)];
 var $154=($152|0)==($153|0);
 if($154){label=50;break;}else{label=51;break;}
 case 50: 
 var $156=$57;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+40)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i8=$57;label=11;break; } else { label=40;break; }
 case 51: 
 var $162=(($152+1)|0);
 HEAP32[(($135)>>2)]=$162;
 var $__a_0=$__a_1;var $_pre_i_i_i8=$57;label=11;break;
 case 52: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $164=HEAP32[(($__a_end)>>2)];
 var $165=$164;
 var $166=$__a_2;
 var $167=((($165)-($166))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=41;break; }
 case 53: 
 var $168=HEAP8[(($this2_i_i_i5)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){var $173=$_pre_phi35;label=55;break;}else{label=54;break;}
 case 54: 
 var $172=HEAP32[(($_pre_phi37)>>2)];
 var $173=$172;label=55;break;
 case 55: 
 var $173;
 var $174=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=41;break; }
 case 56: 
 var $176=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($173,$174,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $178=($176|0)==1;
 if($178){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 if($58){var $194=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $182=(($57+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($57+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=61;break;}else{var $194=$57;label=64;break;}
 case 61: 
 var $187=$57;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+36)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$190]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $192=($191|0)==-1;
 if($192){label=63;break;}else{var $194=$57;label=64;break;}
 case 63: 
 HEAP32[(($39)>>2)]=0;
 var $194=0;label=64;break;
 case 64: 
 var $194;
 var $195=($194|0)==0;
 var $196=($_pre_i2_i_i|0)==0;
 if($196){label=70;break;}else{label=65;break;}
 case 65: 
 var $198=(($_pre_i2_i_i+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($_pre_i2_i_i+16)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($199|0)==($201|0);
 if($202){label=67;break;}else{label=66;break;}
 case 66: 
 if($195){label=73;break;}else{label=72;break;}
 case 67: 
 var $203=$_pre_i2_i_i;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+36)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$206]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $208=($207|0)==-1;
 if($208){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($40)>>2)]=0;
 label=70;break;
 case 70: 
 if($195){label=72;break;}else{label=73;break;}
 case 71: 
 if($195){label=73;break;}else{label=72;break;}
 case 72: 
 var $211=HEAP32[(($__err)>>2)];
 var $212=$211|2;
 HEAP32[(($__err)>>2)]=$212;
 label=73;break;
 case 73: 
 var $214=(($agg_result)|0);
 HEAP32[(($214)>>2)]=$194;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $215=HEAP8[(($this2_i_i_i5)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=75;break;}else{label=74;break;}
 case 74: 
 var $219=(($__buf+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=75;break;
 case 75: 
 var $221=HEAP8[(($this2_i_i_i)>>0)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=77;break;}else{label=76;break;}
 case 76: 
 var $225=(($__grouping+8)|0);
 var $226=HEAP32[(($225)>>2)];
 _free($226);
 label=77;break;
 case 77: 
 STACKTOP=sp;return;
 case 78: 
 var $_01;
 var $_0;
 var $227=HEAP8[(($this2_i_i_i)>>0)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=80;break;}else{label=79;break;}
 case 79: 
 var $231=(($__grouping+8)|0);
 var $232=HEAP32[(($231)>>2)];
 _free($232);
 label=80;break;
 case 80: 
 var $233$0=$_0;
 var $233$1=0;
 var $234$0=$233$0;
 var $234$1=$_01;
 ___resumeException($234$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[(($4)>>0)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[(($8)>>0)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[(($__a)>>0)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[(($15)>>0)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP8[(($_01_i)>>0)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_01_i+1)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[(($61)>>0)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((28584+$47)|0);
 var $66=HEAP8[(($65)>>0)];
 var $67=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$67;
 HEAP8[(($1)>>0)]=$66;
 var $_0=0;label=23;break;
 case 22: 
 var $69=((28584+$47)|0);
 var $70=HEAP8[(($69)>>0)];
 var $71=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$71;
 HEAP8[(($1)>>0)]=$70;
 var $72=HEAP32[(($__dc)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($__dc)>>2)]=$73;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__clocEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((34392)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(34392);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1328,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 HEAP32[((30880)>>2)]=$7;

 label=5;break;
 case 5: 
 var $10=HEAP32[((30880)>>2)];
 return $10;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(); var $12$1 = tempRet0;

 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__lv=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $__names=(sp)+(32);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[(($__v)>>0)]=0;
 label=6;break;
 case 4: 
 HEAP8[(($__v)>>0)]=1;
 label=6;break;
 case 5: 
 HEAP8[(($__v)>>0)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=35;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $_idx13=(($29+8)|0);
 var $34=$_idx13;
 var $_idx13_val=HEAP32[(($34)>>2)];
 var $_idx14=(($29+12)|0);
 var $35=$_idx14;
 var $_idx14_val=HEAP32[(($35)>>2)];
 var $36=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx13_val,$_idx14_val,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $37=$36;
 var $38=(($29+4)|0);
 var $39=$38;
 var $40=(tempValue=HEAP32[(($39)>>2)],HEAP32[(($39)>>2)]=tempValue+-1,tempValue);
 var $41=($40|0)==0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$29;
 var $44=$29;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($43);
 label=11;break;
 case 11: 
 var $48=HEAP32[(($28)>>2)];
 var $49=(($48+4)|0);
 var $50=$49;
 var $51=(tempValue=HEAP32[(($50)>>2)],HEAP32[(($50)>>2)]=tempValue+1,tempValue);
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $_idx=(($48+8)|0);
 var $53=$_idx;
 var $_idx_val=HEAP32[(($53)>>2)];
 var $_idx12=(($48+12)|0);
 var $54=$_idx12;
 var $_idx12_val=HEAP32[(($54)>>2)];
 var $55=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx12_val,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 var $56=$55;
 var $57=(($48+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+-1,tempValue);
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$48;
 var $63=$48;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+8)|0);
 var $66=HEAP32[(($65)>>2)];
 FUNCTION_TABLE[$66]($62);
 label=15;break;
 case 15: 
 var $67=(($__names)|0);
 var $68=$55;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($67,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $_02=$67;label=26;break; }
 case 16: 
 var $72=(($__names+12)|0);
 var $73=HEAP32[(($68)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($72,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { var $_02=$72;label=26;break; }
 case 17: 
 var $76=(($__e)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($__names+24)|0);
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$77,$67,$78,$37,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=30;break; }
 case 18: 
 var $80=($79|0)==($67|0);
 var $81=($80&1);
 HEAP8[(($__v)>>0)]=$81;
 var $82=(($__b)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($agg_result)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=$72;
 var $86=HEAP8[(($85)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=20;break;}else{label=19;break;}
 case 19: 
 var $90=(($__names+20)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91;
 _free($92);
 label=20;break;
 case 20: 
 var $93=$__names;
 var $94=HEAP8[(($93)>>0)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=35;break;}else{label=21;break;}
 case 21: 
 var $98=(($__names+8)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$99;
 _free($100);
 label=35;break;
 case 22: 
 var $102$0 = ___cxa_find_matching_catch(); var $102$1 = tempRet0;
 var $103=$102$0;
 var $104=$102$1;
 var $105=(($29+4)|0);
 var $106=$105;
 var $107=(tempValue=HEAP32[(($106)>>2)],HEAP32[(($106)>>2)]=tempValue+-1,tempValue);
 var $108=($107|0)==0;
 if($108){label=23;break;}else{var $_0=$103;var $_01=$104;label=36;break;}
 case 23: 
 var $110=$29;
 var $111=$29;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($110);
 var $_0=$103;var $_01=$104;label=36;break;
 case 24: 
 var $116$0 = ___cxa_find_matching_catch(); var $116$1 = tempRet0;
 var $117=$116$0;
 var $118=$116$1;
 var $119=(($48+4)|0);
 var $120=$119;
 var $121=(tempValue=HEAP32[(($120)>>2)],HEAP32[(($120)>>2)]=tempValue+-1,tempValue);
 var $122=($121|0)==0;
 if($122){label=25;break;}else{var $_0=$117;var $_01=$118;label=36;break;}
 case 25: 
 var $124=$48;
 var $125=$48;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+8)|0);
 var $128=HEAP32[(($127)>>2)];
 FUNCTION_TABLE[$128]($124);
 var $_0=$117;var $_01=$118;label=36;break;
 case 26: 
 var $_02;
 var $130$0 = ___cxa_find_matching_catch(); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $133=($67|0)==($_02|0);
 if($133){var $_0=$131;var $_01=$132;label=36;break;}else{var $134=$_02;label=27;break;}
 case 27: 
 var $134;
 var $135=((($134)-(12))|0);
 var $136=$135;
 var $137=HEAP8[(($136)>>0)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=29;break;}else{label=28;break;}
 case 28: 
 var $141=((($134)-(12)+8)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$142;
 _free($143);
 label=29;break;
 case 29: 
 var $144=($135|0)==($67|0);
 if($144){var $_0=$131;var $_01=$132;label=36;break;}else{var $134=$135;label=27;break;}
 case 30: 
 var $145$0 = ___cxa_find_matching_catch(); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$72;
 var $148=HEAP8[(($147)>>0)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=32;break;}else{label=31;break;}
 case 31: 
 var $152=(($__names+20)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153;
 _free($154);
 label=32;break;
 case 32: 
 var $155=$__names;
 var $156=HEAP8[(($155)>>0)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=34;break;}else{label=33;break;}
 case 33: 
 var $160=(($__names+8)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$161;
 _free($162);
 label=34;break;
 case 34: 
 var $163=$145$1;
 var $_0=$146;var $_01=$163;label=36;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $_01;
 var $_0;
 var $164$0=$_0;
 var $164$1=0;
 var $165$0=$164$0;
 var $165$1=$_01;
 ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $169$0=$169$r;var $169$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$169$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$169$1;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP16[(($__v)>>1)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $169$0=$169$r;var $169$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$169$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$169$1;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF32[(($__v)>>2)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__grouping=(sp)+(104);
 var $__buf=(sp)+(120);
 var $__a_end=(sp)+(136);
 var $__g=(sp)+(144);
 var $__g_end=(sp)+(304);
 var $__dc=(sp)+(312);
 var $1=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $2=(($__iob+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $_idx=(($3+8)|0);
 var $8=$_idx;
 var $_idx_val=HEAP32[(($8)>>2)];
 var $_idx6=(($3+12)|0);
 var $9=$_idx6;
 var $_idx6_val=HEAP32[(($9)>>2)];
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=39;break; }
 case 3: 
 var $11=$10;
 var $12=(($__atoms)|0);
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+48)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$16]($11,28584,28610,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $18=(($3+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$3;
 var $24=$3;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=6;break;
 case 6: 
 var $this2_i_i_i5=$__buf;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 var $28=HEAP8[(($this2_i_i_i5)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($__buf+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $_pre36=$__buf;
 var $_pre37=(($_pre36+1)|0);
 var $37=$33;var $_pre_phi38=$_pre37;var $_pre_phi40=$32;label=10;break;
 case 9: 
 var $35=$__buf;
 var $36=(($35+1)|0);
 var $_pre39=(($__buf+8)|0);
 var $37=$36;var $_pre_phi38=$36;var $_pre_phi40=$_pre39;label=10;break;
 case 10: 
 var $_pre_phi40;
 var $_pre_phi38;
 var $37;
 HEAP32[(($__a_end)>>2)]=$37;
 var $38=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $39=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$39;
 HEAP32[(($__dc)>>2)]=0;
 var $40=(($__b)|0);
 var $41=(($__e)|0);
 var $42=(($__buf)|0);
 var $43=(($__buf+4)|0);
 var $_pre=HEAP32[(($40)>>2)];
 var $__a_0=$37;var $_pre_i_i_i9=$_pre;label=11;break;
 case 11: 
 var $_pre_i_i_i9;
 var $__a_0;
 var $44=($_pre_i_i_i9|0)==0;
 if($44){var $62=1;var $61=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $46=(($_pre_i_i_i9+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($_pre_i_i_i9+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 var $52=$_pre_i_i_i9;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($_pre_i_i_i9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i7=$56;label=15;break; } else { label=41;break; }
 case 14: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i_i_i7=$58;label=15;break;
 case 15: 
 var $_0_i_i_i_i7;
 var $59=($_0_i_i_i_i7|0)==-1;
 if($59){label=16;break;}else{var $62=0;var $61=$_pre_i_i_i9;label=17;break;}
 case 16: 
 HEAP32[(($40)>>2)]=0;
 var $62=1;var $61=0;label=17;break;
 case 17: 
 var $61;
 var $62;
 var $63=HEAP32[(($41)>>2)];
 var $64=($63|0)==0;
 if($64){label=23;break;}else{label=18;break;}
 case 18: 
 var $66=(($63+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($63+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$63;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i13=$76;label=21;break; } else { label=41;break; }
 case 20: 
 var $78=HEAP32[(($67)>>2)];
 var $_0_i_i1_i_i13=$78;label=21;break;
 case 21: 
 var $_0_i_i1_i_i13;
 var $79=($_0_i_i1_i_i13|0)==-1;
 if($79){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($41)>>2)]=0;
 label=23;break;
 case 23: 
 if($62){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=52;break;}else{var $83=0;label=25;break;}
 case 24: 
 if($62){var $83=$63;label=25;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$63;label=52;break;}
 case 25: 
 var $83;
 var $84=HEAP32[(($__a_end)>>2)];
 var $85=HEAP8[(($this2_i_i_i5)>>0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=27;break;}else{label=26;break;}
 case 26: 
 var $89=HEAP32[(($43)>>2)];
 var $93=$89;label=28;break;
 case 27: 
 var $91=($85&255);
 var $92=$91>>>1;
 var $93=$92;label=28;break;
 case 28: 
 var $93;
 var $94=(($__a_0+$93)|0);
 var $95=($84|0)==($94|0);
 if($95){label=29;break;}else{var $__a_1=$__a_0;label=45;break;}
 case 29: 
 if($87){label=31;break;}else{label=30;break;}
 case 30: 
 var $98=HEAP32[(($43)>>2)];
 var $102=$98;label=32;break;
 case 31: 
 var $100=($85&255);
 var $101=$100>>>1;
 var $102=$101;label=32;break;
 case 32: 
 var $102;
 var $103=$102<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $104=HEAP8[(($this2_i_i_i5)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){var $110=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $108=HEAP32[(($42)>>2)];
 var $109=$108&-2;
 var $phitmp_i28=((($109)-(1))|0);
 var $110=$phitmp_i28;label=35;break;
 case 35: 
 var $110;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $111=HEAP8[(($this2_i_i_i5)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){var $116=$_pre_phi38;label=38;break;}else{label=37;break;}
 case 37: 
 var $115=HEAP32[(($_pre_phi40)>>2)];
 var $116=$115;label=38;break;
 case 38: 
 var $116;
 var $117=(($116+$102)|0);
 HEAP32[(($__a_end)>>2)]=$117;
 var $__a_1=$116;label=45;break;
 case 39: 
 var $119$0 = ___cxa_find_matching_catch(); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=(($3+4)|0);
 var $123=$122;
 var $124=(tempValue=HEAP32[(($123)>>2)],HEAP32[(($123)>>2)]=tempValue+-1,tempValue);
 var $125=($124|0)==0;
 if($125){label=40;break;}else{var $_0=$120;var $_01=$121;label=79;break;}
 case 40: 
 var $127=$3;
 var $128=$3;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+8)|0);
 var $131=HEAP32[(($130)>>2)];
 FUNCTION_TABLE[$131]($127);
 var $_0=$120;var $_01=$121;label=79;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $133=$lpad_phi$0;
 var $134=$lpad_phi$1;
 var $135=HEAP8[(($this2_i_i_i5)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){var $_0=$133;var $_01=$134;label=79;break;}else{label=44;break;}
 case 44: 
 var $139=(($__buf+8)|0);
 var $140=HEAP32[(($139)>>2)];
 _free($140);
 var $_0=$133;var $_01=$134;label=79;break;
 case 45: 
 var $__a_1;
 var $142=(($61+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($61+16)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($143|0)==($145|0);
 if($146){label=46;break;}else{label=47;break;}
 case 46: 
 var $148=$61;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+36)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$152;label=48;break; } else { label=41;break; }
 case 47: 
 var $154=HEAP32[(($143)>>2)];
 var $_0_i_i=$154;label=48;break;
 case 48: 
 var $_0_i_i;
 var $156=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$39,$__g_end,$12);
 var $157=($156|0)==0;
 if($157){label=49;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$83;label=52;break;}
 case 49: 
 var $159=HEAP32[(($142)>>2)];
 var $160=HEAP32[(($144)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=50;break;}else{label=51;break;}
 case 50: 
 var $163=$61;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+40)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i9=$61;label=11;break; } else { label=41;break; }
 case 51: 
 var $169=(($159+4)|0);
 HEAP32[(($142)>>2)]=$169;
 var $__a_0=$__a_1;var $_pre_i_i_i9=$61;label=11;break;
 case 52: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $171=HEAP32[(($__a_end)>>2)];
 var $172=$171;
 var $173=$__a_2;
 var $174=((($172)-($173))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=42;break; }
 case 53: 
 var $175=HEAP8[(($this2_i_i_i5)>>0)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 if($177){var $180=$_pre_phi38;label=55;break;}else{label=54;break;}
 case 54: 
 var $179=HEAP32[(($_pre_phi40)>>2)];
 var $180=$179;label=55;break;
 case 55: 
 var $180;
 var $181=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=42;break; }
 case 56: 
 var $183=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($180,$181,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $185=($183|0)==1;
 if($185){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $188=($61|0)==0;
 if($188){var $206=1;var $205=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $190=(($61+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($61+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=61;break;}else{label=62;break;}
 case 61: 
 var $196=$61;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$200;label=63;break; } else { label=42;break; }
 case 62: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i_i_i=$202;label=63;break;
 case 63: 
 var $_0_i_i_i_i;
 var $203=($_0_i_i_i_i|0)==-1;
 if($203){label=64;break;}else{var $206=0;var $205=$61;label=65;break;}
 case 64: 
 HEAP32[(($40)>>2)]=0;
 var $206=1;var $205=0;label=65;break;
 case 65: 
 var $205;
 var $206;
 var $207=($_pre_i3_i_i|0)==0;
 if($207){label=71;break;}else{label=66;break;}
 case 66: 
 var $209=(($_pre_i3_i_i+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($_pre_i3_i_i+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=67;break;}else{label=68;break;}
 case 67: 
 var $215=$_pre_i3_i_i;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$218]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$219;label=69;break; } else { label=42;break; }
 case 68: 
 var $221=HEAP32[(($210)>>2)];
 var $_0_i_i1_i_i=$221;label=69;break;
 case 69: 
 var $_0_i_i1_i_i;
 var $222=($_0_i_i1_i_i|0)==-1;
 if($222){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($41)>>2)]=0;
 label=71;break;
 case 71: 
 if($206){label=73;break;}else{label=74;break;}
 case 72: 
 if($206){label=74;break;}else{label=73;break;}
 case 73: 
 var $225=HEAP32[(($__err)>>2)];
 var $226=$225|2;
 HEAP32[(($__err)>>2)]=$226;
 label=74;break;
 case 74: 
 var $228=(($agg_result)|0);
 HEAP32[(($228)>>2)]=$205;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $229=HEAP8[(($this2_i_i_i5)>>0)];
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 if($231){label=76;break;}else{label=75;break;}
 case 75: 
 var $233=(($__buf+8)|0);
 var $234=HEAP32[(($233)>>2)];
 _free($234);
 label=76;break;
 case 76: 
 var $235=HEAP8[(($this2_i_i_i)>>0)];
 var $236=$235&1;
 var $237=(($236<<24)>>24)==0;
 if($237){label=78;break;}else{label=77;break;}
 case 77: 
 var $239=(($__grouping+8)|0);
 var $240=HEAP32[(($239)>>2)];
 _free($240);
 label=78;break;
 case 78: 
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 79: 
 var $_01;
 var $_0;
 var $241=HEAP8[(($this2_i_i_i)>>0)];
 var $242=$241&1;
 var $243=(($242<<24)>>24)==0;
 if($243){label=81;break;}else{label=80;break;}
 case 80: 
 var $245=(($__grouping+8)|0);
 var $246=HEAP32[(($245)>>2)];
 _free($246);
 label=81;break;
 case 81: 
 var $247$0=$_0;
 var $247$1=0;
 var $248$0=$247$0;
 var $248$1=$_01;
 ___resumeException($248$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[(($__a)>>0)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[(($15)>>0)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP32[(($_01_i)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_01_i+4)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[(($62)>>0)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((28584+$48)|0);
 var $67=HEAP8[(($66)>>0)];
 var $68=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[(($1)>>0)]=$67;
 var $_0=0;label=23;break;
 case 22: 
 var $70=((28584+$48)|0);
 var $71=HEAP8[(($70)>>0)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[(($1)>>0)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,28584,28610,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 HEAP8[(($__thousands_sep)>>0)]=$23;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+20)|0);
 var $27=HEAP32[(($26)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $28=(($2+4)|0);
 var $29=$28;
 var $30=(tempValue=HEAP32[(($29)>>2)],HEAP32[(($29)>>2)]=tempValue+-1,tempValue);
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 var $33=$2;
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($33);
 label=10;break;
 case 10: 
 return;
 case 11: 
 var $39$0 = ___cxa_find_matching_catch(); var $39$1 = tempRet0;
 var $40=(($2+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 var $45=$2;
 var $46=$2;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=13;break;
 case 13: 
 ___resumeException($39$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=12;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,28584,28616,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 HEAP8[(($__decimal_point)>>0)]=$23;
 var $24=HEAP32[(($19)>>2)];
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 HEAP8[(($__thousands_sep)>>0)]=$27;
 var $28=$17;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $32=(($2+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$2;
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=11;break;
 case 11: 
 return;
 case 12: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=(($2+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 var $49=$2;
 var $50=$2;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=14;break;
 case 14: 
 ___resumeException($43$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[(($__in_units)>>0)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[(($__in_units)>>0)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[(($6)>>0)]=46;
 var $8=$__grouping;
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[(($__in_units)>>0)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+32)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP8[(($_01_i)>>0)];
 var $62=(($61<<24)>>24)==(($__ct<<24)>>24);
 var $63=(($_01_i+1)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=($66|0)>31;
 if($67){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $69=((28584+$66)|0);
 var $70=HEAP8[(($69)>>0)];
 if(($66|0)==25|($66|0)==24){ label=22;break;}else if(($66|0)==22|($66|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $72=HEAP32[(($__a_end)>>2)];
 var $73=($72|0)==($__a|0);
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=((($72)-(1))|0);
 var $76=HEAP8[(($75)>>0)];
 var $77=($76&255);
 var $78=$77&95;
 var $79=HEAP8[(($__exp)>>0)];
 var $80=($79&255);
 var $81=$80&127;
 var $82=($78|0)==($81|0);
 if($82){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $84=(($72+1)|0);
 HEAP32[(($__a_end)>>2)]=$84;
 HEAP8[(($72)>>0)]=$70;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[(($__exp)>>0)]=80;
 var $85=HEAP32[(($__a_end)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[(($85)>>0)]=$70;
 var $_0=0;label=36;break;
 case 26: 
 var $88=($70&255);
 var $89=$88&95;
 var $90=HEAP8[(($__exp)>>0)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[(($__exp)>>0)]=$94;
 var $95=HEAP8[(($__in_units)>>0)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[(($__in_units)>>0)]=0;
 var $98=$__grouping;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[(($120)>>0)]=$70;
 var $122=($66|0)>21;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,28584,28610,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 HEAP32[(($__thousands_sep)>>2)]=$23;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+20)|0);
 var $27=HEAP32[(($26)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $28=(($2+4)|0);
 var $29=$28;
 var $30=(tempValue=HEAP32[(($29)>>2)],HEAP32[(($29)>>2)]=tempValue+-1,tempValue);
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 var $33=$2;
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($33);
 label=10;break;
 case 10: 
 return;
 case 11: 
 var $39$0 = ___cxa_find_matching_catch(); var $39$1 = tempRet0;
 var $40=(($2+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 var $45=$2;
 var $46=$2;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=13;break;
 case 13: 
 ___resumeException($39$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=12;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,28584,28616,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 HEAP32[(($__decimal_point)>>2)]=$23;
 var $24=HEAP32[(($19)>>2)];
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 HEAP32[(($__thousands_sep)>>2)]=$27;
 var $28=$17;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $32=(($2+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$2;
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=11;break;
 case 11: 
 return;
 case 12: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=(($2+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 var $49=$2;
 var $50=$2;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=14;break;
 case 14: 
 ___resumeException($43$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[(($__in_units)>>0)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[(($__in_units)>>0)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[(($6)>>0)]=46;
 var $8=$__grouping;
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=($__ct|0)==($__thousands_sep|0);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[(($__in_units)>>0)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+128)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP32[(($_01_i)>>2)];
 var $62=($61|0)==($__ct|0);
 var $63=(($_01_i+4)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=$66>>2;
 var $68=($66|0)>124;
 if($68){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((28584+$67)|0);
 var $71=HEAP8[(($70)>>0)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[(($76)>>0)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[(($__exp)>>0)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[(($73)>>0)]=$71;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[(($__exp)>>0)]=80;
 label=34;break;
 case 26: 
 var $88=($71&255);
 var $89=$88&95;
 var $90=HEAP8[(($__exp)>>0)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[(($__exp)>>0)]=$94;
 var $95=HEAP8[(($__in_units)>>0)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[(($__in_units)>>0)]=0;
 var $98=$__grouping;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[(($120)>>0)]=$71;
 var $122=($66|0)>84;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__nm=(sp)+(8);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=31;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=25;break; }
 case 4: 
 var $_idx=(($17+8)|0);
 var $22=$_idx;
 var $_idx_val=HEAP32[(($22)>>2)];
 var $_idx5=(($17+12)|0);
 var $23=$_idx5;
 var $_idx5_val=HEAP32[(($23)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx5_val,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=25;break; }
 case 5: 
 var $25=$24;
 var $26=(($17+4)|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$17;
 var $32=$17;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 FUNCTION_TABLE[$35]($31);
 label=7;break;
 case 7: 
 var $36=$24;
 var $37=HEAP32[(($36)>>2)];
 if($__v){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=(($37+24)|0);
 var $40=HEAP32[(($39)>>2)];
 FUNCTION_TABLE[$40]($__nm,$25);
 label=10;break;
 case 9: 
 var $42=(($37+28)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($__nm,$25);
 label=10;break;
 case 10: 
 var $45=$__nm;
 var $46=HEAP8[(($45)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=12;break;}else{label=11;break;}
 case 11: 
 var $50=(($__nm+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $_pre2=$__nm;
 var $_pre3=(($_pre2+1)|0);
 var $_ph=$51;var $_pre_phi4=$_pre3;var $_pre_phi6=$50;label=13;break;
 case 12: 
 var $53=$__nm;
 var $54=(($53+1)|0);
 var $_pre5=(($__nm+8)|0);
 var $_ph=$54;var $_pre_phi4=$54;var $_pre_phi6=$_pre5;label=13;break;
 case 13: 
 var $_pre_phi6;
 var $_pre_phi4;
 var $_ph;
 var $55=(($__s)|0);
 var $56=(($__nm+4)|0);
 var $58=$_ph;var $57=$46;label=14;break;
 case 14: 
 var $57;
 var $58;
 var $59=$57&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=16;break;}else{label=15;break;}
 case 15: 
 var $62=HEAP32[(($_pre_phi6)>>2)];
 var $63=HEAP32[(($56)>>2)];
 var $68=$63;var $67=$62;label=17;break;
 case 16: 
 var $65=($57&255);
 var $66=$65>>>1;
 var $68=$66;var $67=$_pre_phi4;label=17;break;
 case 17: 
 var $67;
 var $68;
 var $69=(($67+$68)|0);
 var $70=($58|0)==($69|0);
 if($70){label=29;break;}else{label=18;break;}
 case 18: 
 var $72=HEAP8[(($58)>>0)];
 var $73=HEAP32[(($55)>>2)];
 var $74=($73|0)==0;
 if($74){label=24;break;}else{label=19;break;}
 case 19: 
 var $76=(($73+24)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($73+28)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=21;break;}else{label=20;break;}
 case 20: 
 var $81=(($77+1)|0);
 HEAP32[(($76)>>2)]=$81;
 HEAP8[(($77)>>0)]=$72;
 label=24;break;
 case 21: 
 var $82=$73;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+52)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($72&255);
 var $87=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($73,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $88=($87|0)==-1;
 if($88){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($55)>>2)]=0;
 label=24;break;
 case 24: 
 var $90=(($58+1)|0);
 var $_pre=HEAP8[(($45)>>0)];
 var $58=$90;var $57=$_pre;label=14;break;
 case 25: 
 var $92$0 = ___cxa_find_matching_catch(); var $92$1 = tempRet0;
 var $93=$92$0;
 var $94=$92$1;
 var $95=(($17+4)|0);
 var $96=$95;
 var $97=(tempValue=HEAP32[(($96)>>2)],HEAP32[(($96)>>2)]=tempValue+-1,tempValue);
 var $98=($97|0)==0;
 if($98){label=26;break;}else{var $_0=$93;var $_01=$94;label=32;break;}
 case 26: 
 var $100=$17;
 var $101=$17;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+8)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($100);
 var $_0=$93;var $_01=$94;label=32;break;
 case 27: 
 var $106$0 = ___cxa_find_matching_catch(); var $106$1 = tempRet0;
 var $107=$106$0;
 var $108=$106$1;
 var $109=HEAP8[(($45)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){var $_0=$107;var $_01=$108;label=32;break;}else{label=28;break;}
 case 28: 
 var $113=(($__nm+8)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 var $_0=$107;var $_01=$108;label=32;break;
 case 29: 
 var $116=HEAP32[(($55)>>2)];
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$116;
 if($60){label=31;break;}else{label=30;break;}
 case 30: 
 var $119=(($__nm+8)|0);
 var $120=HEAP32[(($119)>>2)];
 _free($120);
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $_01;
 var $_0;
 var $121$0=$_0;
 var $121$1=0;
 var $122$0=$121$0;
 var $122$1=$_01;
 ___resumeException($122$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((12880)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((12881)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((12882)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((12883)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((12884)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((12885)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7680,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__flags&2048;
 var $2=($1|0)==0;
 if($2){var $_0=$__fmtp;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($__fmtp+1)|0);
 HEAP8[(($__fmtp)>>0)]=43;
 var $_0=$4;label=3;break;
 case 3: 
 var $_0;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 if($7){var $_1_ph=$_0;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($_0+1)|0);
 HEAP8[(($_0)>>0)]=35;
 var $_1_ph=$9;label=5;break;
 case 5: 
 var $_1_ph;
 var $10=HEAP8[(($__len)>>0)];
 var $11=(($10<<24)>>24)==0;
 if($11){var $_1_lcssa=$_1_ph;label=7;break;}else{var $_012=$__len;var $_13=$_1_ph;var $12=$10;label=6;break;}
 case 6: 
 var $12;
 var $_13;
 var $_012;
 var $13=(($_012+1)|0);
 var $14=(($_13+1)|0);
 HEAP8[(($_13)>>0)]=$12;
 var $15=HEAP8[(($13)>>0)];
 var $16=(($15<<24)>>24)==0;
 if($16){var $_1_lcssa=$14;label=7;break;}else{var $_012=$13;var $_13=$14;var $12=$15;label=6;break;}
 case 7: 
 var $_1_lcssa;
 var $17=$__flags&74;
 if(($17|0)==64){ label=8;break;}else if(($17|0)==8){ label=9;break;}else{label=12;break;}
 case 8: 
 HEAP8[(($_1_lcssa)>>0)]=111;
 label=15;break;
 case 9: 
 var $20=$__flags&16384;
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP8[(($_1_lcssa)>>0)]=88;
 label=15;break;
 case 11: 
 HEAP8[(($_1_lcssa)>>0)]=120;
 label=15;break;
 case 12: 
 if($__signd){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP8[(($_1_lcssa)>>0)]=100;
 label=15;break;
 case 14: 
 HEAP8[(($_1_lcssa)>>0)]=117;
 label=15;break;
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(33824);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(33440);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 var $14=$__grouping;
 var $15=HEAP8[(($14)>>0)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=3;break;}else{label=2;break;}
 case 2: 
 var $19=(($__grouping+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=4;break;
 case 3: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=4;break;
 case 4: 
 var $24;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=12;break;}
 case 5: 
 var $27=$4;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($5,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $32=$__ne;
 var $33=$__nb;
 var $34=((($32)-($33))|0);
 var $35=(($__ob+$34)|0);
 HEAP32[(($__oe)>>2)]=$35;
 label=37;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=HEAP8[(($14)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 var $41=(($__grouping+8)|0);
 var $42=HEAP32[(($41)>>2)];
 _free($42);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $44=HEAP8[(($__nb)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=13;break;}else{var $__nf_0=$__nb;label=15;break;}
 case 13: 
 var $46=$4;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+28)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($5,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=8;break; }
 case 14: 
 var $51=(($__nb+1)|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__oe)>>2)]=$53;
 HEAP8[(($52)>>0)]=$50;
 var $__nf_0=$51;label=15;break;
 case 15: 
 var $__nf_0;
 var $55=$__ne;
 var $56=$__nf_0;
 var $57=((($55)-($56))|0);
 var $58=($57|0)>1;
 if($58){label=16;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 16: 
 var $60=HEAP8[(($__nf_0)>>0)];
 var $61=(($60<<24)>>24)==48;
 if($61){label=17;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 17: 
 var $63=(($__nf_0+1)|0);
 var $64=HEAP8[(($63)>>0)];
 if((($64<<24)>>24)==120|(($64<<24)>>24)==88){ label=18;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 18: 
 var $66=$4;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+28)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=8;break; }
 case 19: 
 var $71=HEAP32[(($__oe)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($__oe)>>2)]=$72;
 HEAP8[(($71)>>0)]=$70;
 var $73=HEAP8[(($63)>>0)];
 var $74=HEAP32[(($66)>>2)];
 var $75=(($74+28)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($5,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $78=(($__nf_0+2)|0);
 var $79=HEAP32[(($__oe)>>2)];
 var $80=(($79+1)|0);
 HEAP32[(($__oe)>>2)]=$80;
 HEAP8[(($79)>>0)]=$77;
 var $__nf_1=$78;label=21;break;
 case 21: 
 var $__nf_1;
 var $82=($__nf_1|0)==($__ne|0);
 if($82){label=24;break;}else{label=22;break;}
 case 22: 
 var $83=((($__ne)-(1))|0);
 var $84=($83>>>0)>($__nf_1>>>0);
 if($84){var $_012_i_i5=$__nf_1;var $85=$83;label=23;break;}else{label=24;break;}
 case 23: 
 var $85;
 var $_012_i_i5;
 var $86=HEAP8[(($_012_i_i5)>>0)];
 var $87=HEAP8[(($85)>>0)];
 HEAP8[(($_012_i_i5)>>0)]=$87;
 HEAP8[(($85)>>0)]=$86;
 var $88=(($_012_i_i5+1)|0);
 var $89=((($85)-(1))|0);
 var $90=($88>>>0)<($89>>>0);
 if($90){var $_012_i_i5=$88;var $85=$89;label=23;break;}else{label=24;break;}
 case 24: 
 var $91=$8;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 var $96=($__nf_1>>>0)<($__ne>>>0);
 if($96){label=26;break;}else{label=34;break;}
 case 26: 
 var $97=$__grouping;
 var $98=(($97+1)|0);
 var $99=$4;
 var $100=(($__grouping+4)|0);
 var $101=(($__grouping+8)|0);
 var $__dc_09=0;var $__dg_010=0;var $__p_011=$__nf_1;label=27;break;
 case 27: 
 var $__p_011;
 var $__dg_010;
 var $__dc_09;
 var $102=HEAP8[(($14)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=HEAP32[(($101)>>2)];
 var $_=($104?$98:$105);
 var $106=(($_+$__dg_010)|0);
 var $107=HEAP8[(($106)>>0)];
 var $108=(($107<<24)>>24)!=0;
 var $109=(($107<<24)>>24);
 var $110=($__dc_09|0)==($109|0);
 var $or_cond=$108&$110;
 if($or_cond){label=28;break;}else{var $__dg_1=$__dg_010;var $__dc_1=$__dc_09;label=32;break;}
 case 28: 
 var $112=HEAP32[(($__oe)>>2)];
 var $113=(($112+1)|0);
 HEAP32[(($__oe)>>2)]=$113;
 HEAP8[(($112)>>0)]=$95;
 var $114=HEAP8[(($14)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=30;break;}else{label=29;break;}
 case 29: 
 var $118=HEAP32[(($100)>>2)];
 var $122=$118;label=31;break;
 case 30: 
 var $120=($114&255);
 var $121=$120>>>1;
 var $122=$121;label=31;break;
 case 31: 
 var $122;
 var $123=((($122)-(1))|0);
 var $124=($__dg_010>>>0)<($123>>>0);
 var $125=($124&1);
 var $___dg_0=((($125)+($__dg_010))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=32;break;
 case 32: 
 var $__dc_1;
 var $__dg_1;
 var $127=HEAP8[(($__p_011)>>0)];
 var $128=HEAP32[(($99)>>2)];
 var $129=(($128+28)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($5,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=7;break; }
 case 33: 
 var $132=HEAP32[(($__oe)>>2)];
 var $133=(($132+1)|0);
 HEAP32[(($__oe)>>2)]=$133;
 HEAP8[(($132)>>0)]=$131;
 var $134=((($__dc_1)+(1))|0);
 var $135=(($__p_011+1)|0);
 var $136=($135>>>0)<($__ne>>>0);
 if($136){var $__dc_09=$134;var $__dg_010=$__dg_1;var $__p_011=$135;label=27;break;}else{label=34;break;}
 case 34: 
 var $137=$__nf_1;
 var $138=$__nb;
 var $139=((($137)-($138))|0);
 var $140=(($__ob+$139)|0);
 var $141=HEAP32[(($__oe)>>2)];
 var $142=($140|0)==($141|0);
 if($142){label=37;break;}else{label=35;break;}
 case 35: 
 var $143=((($141)-(1))|0);
 var $144=($143>>>0)>($140>>>0);
 if($144){var $_012_i_i=$140;var $145=$143;label=36;break;}else{label=37;break;}
 case 36: 
 var $145;
 var $_012_i_i;
 var $146=HEAP8[(($_012_i_i)>>0)];
 var $147=HEAP8[(($145)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$147;
 HEAP8[(($145)>>0)]=$146;
 var $148=(($_012_i_i+1)|0);
 var $149=((($145)-(1))|0);
 var $150=($148>>>0)<($149>>>0);
 if($150){var $_012_i_i=$148;var $145=$149;label=36;break;}else{label=37;break;}
 case 37: 
 var $151=($__np|0)==($__ne|0);
 if($151){label=38;break;}else{label=39;break;}
 case 38: 
 var $153=HEAP32[(($__oe)>>2)];
 var $storemerge=$153;label=40;break;
 case 39: 
 var $155=$__np;
 var $156=$__nb;
 var $157=((($155)-($156))|0);
 var $158=(($__ob+$157)|0);
 var $storemerge=$158;label=40;break;
 case 40: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $160=HEAP8[(($14)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=42;break;}else{label=41;break;}
 case 41: 
 var $164=(($__grouping+8)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7664,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,22,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $$etemp$3$0=41;
 var $$etemp$3$1=0;

 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 var $$etemp$4$0=41;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((12880)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((12881)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((12882)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((12883)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((12884)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((12885)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7680,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7664,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,23,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $$etemp$3$0=43;
 var $$etemp$3$1=0;

 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 var $$etemp$4$0=43;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,28880,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $41=0;var $40=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_127=$27;var $_18=$26;label=41;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(($__iob+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$33;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $35=HEAP32[(($__nb)>>2)];
 var $36=($35|0)==0;
 if($36){label=12;break;}else{var $__nc_2=$__nc_1;var $41=$35;var $40=$35;label=14;break;}
 case 12: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 HEAP32[(($39)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($38,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $40;
 var $41;
 var $__nc_2;
 var $42=(($40+$__nc_2)|0);
 var $43=HEAP32[(($5)>>2)];
 var $44=$43&176;
 if(($44|0)==16){ label=15;break;}else if(($44|0)==32){ var $_0_i=$42;label=21;break;}else{label=20;break;}
 case 15: 
 var $46=HEAP8[(($40)>>0)];
 if((($46<<24)>>24)==45|(($46<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $48=(($40+1)|0);
 var $_0_i=$48;label=21;break;
 case 17: 
 var $50=($__nc_2|0)>1;
 var $51=(($46<<24)>>24)==48;
 var $or_cond_i=$50&$51;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=(($40+1)|0);
 var $54=HEAP8[(($53)>>0)];
 if((($54<<24)>>24)==120|(($54<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $56=(($40+2)|0);
 var $_0_i=$56;label=21;break;
 case 20: 
 var $_0_i=$40;label=21;break;
 case 21: 
 var $_0_i;
 var $58=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $59=($40|0)==($8|0);
 if($59){var $__ob_0=$58;var $74=0;var $73=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $61=$__nc_2<<1;
 var $62=_malloc($61);
 var $63=($62|0)==0;
 if($63){label=23;break;}else{var $__ob_0=$62;var $74=$62;var $73=$40;label=26;break;}
 case 23: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $68=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $68;
 var $69$0 = ___cxa_find_matching_catch(); var $69$1 = tempRet0;
 var $70=$69$0;
 var $71=$69$1;
 var $_0=$70;var $_01=$71;var $119=$68;label=37;break;
 case 26: 
 var $73;
 var $74;
 var $__ob_0;
 var $75=(($__iob+28)|0);
 var $76=(($1)|0);
 var $77=HEAP32[(($75)>>2)];
 var $78=$77;
 HEAP32[(($76)>>2)]=$78;
 var $79=(($77+4)|0);
 var $80=$79;
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($73,$_0_i,$42,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=35;break; }
 case 27: 
 var $83=HEAP32[(($76)>>2)];
 var $84=(($83+4)|0);
 var $85=(tempValue=HEAP32[(($84)>>2)],HEAP32[(($84)>>2)]=tempValue+-1,tempValue);
 var $86=($85|0)==0;
 if($86){label=28;break;}else{label=29;break;}
 case 28: 
 var $88=(($83)|0);
 var $89=$83;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+8)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($88);
 label=29;break;
 case 29: 
 var $93=(($__s)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=HEAP32[(($__op)>>2)];
 var $96=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$94,$__ob_0,$95,$96,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $68=$74;label=25;break; }
 case 30: 
 var $98=(($2)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP32[(($93)>>2)]=$99;
 var $100=(($agg_result)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=($74|0)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 _free($74);
 label=32;break;
 case 32: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $103=($41|0)==0;
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 _free($41);
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
 case 35: 
 var $106$0 = ___cxa_find_matching_catch(); var $106$1 = tempRet0;
 var $107=$106$0;
 var $108=$106$1;
 var $109=HEAP32[(($76)>>2)];
 var $110=(($109+4)|0);
 var $111=(tempValue=HEAP32[(($110)>>2)],HEAP32[(($110)>>2)]=tempValue+-1,tempValue);
 var $112=($111|0)==0;
 if($112){label=36;break;}else{var $_0=$107;var $_01=$108;var $119=$74;label=37;break;}
 case 36: 
 var $114=(($109)|0);
 var $115=$109;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+8)|0);
 var $118=HEAP32[(($117)>>2)];
 FUNCTION_TABLE[$118]($114);
 var $_0=$107;var $_01=$108;var $119=$74;label=37;break;
 case 37: 
 var $119;
 var $_01;
 var $_0;
 var $120=($119|0)==0;
 if($120){label=39;break;}else{label=38;break;}
 case 38: 
 _free($119);
 label=39;break;
 case 39: 
 var $122=($41|0)==0;
 if($122){var $_127=$_01;var $_18=$_0;label=41;break;}else{label=40;break;}
 case 40: 
 _free($41);
 var $_127=$_01;var $_18=$_0;label=41;break;
 case 41: 
 var $_18;
 var $_127;
 var $124$0=$_18;
 var $124$1=0;
 var $125$0=$124$0;
 var $125$1=$_127;
 ___resumeException($125$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__flags&2048;
 var $2=($1|0)==0;
 if($2){var $_0=$__fmtp;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($__fmtp+1)|0);
 HEAP8[(($__fmtp)>>0)]=43;
 var $_0=$4;label=3;break;
 case 3: 
 var $_0;
 var $6=$__flags&1024;
 var $7=($6|0)==0;
 if($7){var $_1=$_0;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($_0+1)|0);
 HEAP8[(($_0)>>0)]=35;
 var $_1=$9;label=5;break;
 case 5: 
 var $_1;
 var $11=$__flags&260;
 var $12=$__flags>>>14;
 var $13=($11|0)==260;
 if($13){var $_2_ph=$_1;var $specify_precision_0_off0_ph=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $15=(($_1+1)|0);
 HEAP8[(($_1)>>0)]=46;
 var $16=(($_1+2)|0);
 HEAP8[(($15)>>0)]=42;
 var $_2_ph=$16;var $specify_precision_0_off0_ph=1;label=7;break;
 case 7: 
 var $specify_precision_0_off0_ph;
 var $_2_ph;
 var $17=HEAP8[(($__len)>>0)];
 var $18=(($17<<24)>>24)==0;
 if($18){var $_2_lcssa=$_2_ph;label=9;break;}else{var $_012=$__len;var $_23=$_2_ph;var $19=$17;label=8;break;}
 case 8: 
 var $19;
 var $_23;
 var $_012;
 var $20=(($_012+1)|0);
 var $21=(($_23+1)|0);
 HEAP8[(($_23)>>0)]=$19;
 var $22=HEAP8[(($20)>>0)];
 var $23=(($22<<24)>>24)==0;
 if($23){var $_2_lcssa=$21;label=9;break;}else{var $_012=$20;var $_23=$21;var $19=$22;label=8;break;}
 case 9: 
 var $_2_lcssa;
 if(($11|0)==4){ label=10;break;}else if(($11|0)==256){ label=13;break;}else{label=16;break;}
 case 10: 
 var $25=$12&1;
 var $26=($25|0)==0;
 if($26){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[(($_2_lcssa)>>0)]=70;
 label=23;break;
 case 12: 
 HEAP8[(($_2_lcssa)>>0)]=102;
 label=23;break;
 case 13: 
 var $30=$12&1;
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[(($_2_lcssa)>>0)]=69;
 label=23;break;
 case 15: 
 HEAP8[(($_2_lcssa)>>0)]=101;
 label=23;break;
 case 16: 
 var $35=$12&1;
 var $36=($35|0)!=0;
 if($13){label=17;break;}else{label=20;break;}
 case 17: 
 if($36){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP8[(($_2_lcssa)>>0)]=65;
 label=23;break;
 case 19: 
 HEAP8[(($_2_lcssa)>>0)]=97;
 label=23;break;
 case 20: 
 if($36){label=21;break;}else{label=22;break;}
 case 21: 
 HEAP8[(($_2_lcssa)>>0)]=71;
 label=23;break;
 case 22: 
 HEAP8[(($_2_lcssa)>>0)]=103;
 label=23;break;
 case 23: 
 return $specify_precision_0_off0_ph;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(33824);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(33440);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $14=HEAP8[(($__nb)>>0)];
 if((($14<<24)>>24)==45|(($14<<24)>>24)==43){ label=2;break;}else{var $__nf_0=$__nb;label=12;break;}
 case 2: 
 var $16=$4;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+28)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($5,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $21=(($__nb+1)|0);
 var $22=HEAP32[(($__oe)>>2)];
 var $23=(($22+1)|0);
 HEAP32[(($__oe)>>2)]=$23;
 HEAP8[(($22)>>0)]=$20;
 var $__nf_0=$21;label=12;break;
 case 4: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 5: 
 var $lpad_loopexit15$0 = ___cxa_find_matching_catch(); var $lpad_loopexit15$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit15$1;var $lpad_phi$0=$lpad_loopexit15$0;label=9;break;
 case 6: 
 var $lpad_loopexit23$0 = ___cxa_find_matching_catch(); var $lpad_loopexit23$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit23$1;var $lpad_phi$0=$lpad_loopexit23$0;label=9;break;
 case 7: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(); var $lpad_loopexit30$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit30$1;var $lpad_phi$0=$lpad_loopexit30$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit31$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit31$1;var $lpad_phi$0=$lpad_nonloopexit31$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $24=$__grouping;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=(($__grouping+8)|0);
 var $30=HEAP32[(($29)>>2)];
 _free($30);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 var $__nf_0;
 var $32=$__ne;
 var $33=$__nf_0;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>1;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $36=($__nf_0>>>0)<($__ne>>>0);
 if($36){var $__ns_126=$__nf_0;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=26;break;}
 case 14: 
 var $38=HEAP8[(($__nf_0)>>0)];
 var $39=(($38<<24)>>24)==48;
 if($39){label=15;break;}else{label=13;break;}
 case 15: 
 var $41=(($__nf_0+1)|0);
 var $42=HEAP8[(($41)>>0)];
 if((($42<<24)>>24)==120|(($42<<24)>>24)==88){ label=16;break;}else{label=13;break;}
 case 16: 
 var $44=$4;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+28)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 17: 
 var $49=HEAP32[(($__oe)>>2)];
 var $50=(($49+1)|0);
 HEAP32[(($__oe)>>2)]=$50;
 HEAP8[(($49)>>0)]=$48;
 var $51=(($__nf_0+2)|0);
 var $52=HEAP8[(($41)>>0)];
 var $53=HEAP32[(($44)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($5,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=8;break; }
 case 18: 
 var $57=HEAP32[(($__oe)>>2)];
 var $58=(($57+1)|0);
 HEAP32[(($__oe)>>2)]=$58;
 HEAP8[(($57)>>0)]=$56;
 var $59=($51>>>0)<($__ne>>>0);
 if($59){var $__ns_034=$51;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$51;label=26;break;}
 case 19: 
 var $60=(($__ns_034+1)|0);
 var $61=($60>>>0)<($__ne>>>0);
 if($61){var $__ns_034=$60;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$60;label=26;break;}
 case 20: 
 var $__ns_034;
 var $62=HEAP8[(($__ns_034)>>0)];
 var $63=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=7;break; }
 case 21: 
 var $65=(($62<<24)>>24);
 var $isdigittmp_i_i=((($65)-(48))|0);
 var $isdigit_i_i=($isdigittmp_i_i>>>0)<10;
 if($isdigit_i_i){label=19;break;}else{label=22;break;}
 case 22: 
 var $66=$65|32;
 var $67=((($66)-(97))|0);
 var $68=($67>>>0)<6;
 if($68){label=19;break;}else{var $__nf_1=$51;var $__ns_2=$__ns_034;label=26;break;}
 case 23: 
 var $70=($75>>>0)<($__ne>>>0);
 if($70){var $__ns_126=$75;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$75;label=26;break;}
 case 24: 
 var $__ns_126;
 var $71=HEAP8[(($__ns_126)>>0)];
 var $72=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=6;break; }
 case 25: 
 var $74=(($71<<24)>>24);
 var $isdigittmp_i=((($74)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 var $75=(($__ns_126+1)|0);
 if($isdigit_i){label=23;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__ns_126;label=26;break;}
 case 26: 
 var $__ns_2;
 var $__nf_1;
 var $76=$__grouping;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=28;break;}else{label=27;break;}
 case 27: 
 var $81=(($__grouping+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $86=$82;label=29;break;
 case 28: 
 var $84=($77&255);
 var $85=$84>>>1;
 var $86=$85;label=29;break;
 case 29: 
 var $86;
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=32;break;}
 case 30: 
 var $89=HEAP32[(($__oe)>>2)];
 var $90=$4;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+32)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($5,$__nf_1,$__ns_2,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=8;break; }
 case 31: 
 var $95=$__ns_2;
 var $96=$__nf_1;
 var $97=((($95)-($96))|0);
 var $98=HEAP32[(($__oe)>>2)];
 var $99=(($98+$97)|0);
 HEAP32[(($__oe)>>2)]=$99;
 label=48;break;
 case 32: 
 var $101=($__nf_1|0)==($__ns_2|0);
 if($101){label=35;break;}else{label=33;break;}
 case 33: 
 var $102=((($__ns_2)-(1))|0);
 var $103=($102>>>0)>($__nf_1>>>0);
 if($103){var $_012_i_i=$__nf_1;var $104=$102;label=34;break;}else{label=35;break;}
 case 34: 
 var $104;
 var $_012_i_i;
 var $105=HEAP8[(($_012_i_i)>>0)];
 var $106=HEAP8[(($104)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$106;
 HEAP8[(($104)>>0)]=$105;
 var $107=(($_012_i_i+1)|0);
 var $108=((($104)-(1))|0);
 var $109=($107>>>0)<($108>>>0);
 if($109){var $_012_i_i=$107;var $104=$108;label=34;break;}else{label=35;break;}
 case 35: 
 var $110=$8;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=8;break; }
 case 36: 
 var $115=($__nf_1>>>0)<($__ns_2>>>0);
 if($115){label=37;break;}else{label=45;break;}
 case 37: 
 var $116=$__grouping;
 var $117=(($116+1)|0);
 var $118=(($__grouping+4)|0);
 var $119=(($__grouping+8)|0);
 var $120=$4;
 var $__dc_018=0;var $__dg_019=0;var $__p_020=$__nf_1;label=38;break;
 case 38: 
 var $__p_020;
 var $__dg_019;
 var $__dc_018;
 var $121=HEAP8[(($76)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 var $124=HEAP32[(($119)>>2)];
 var $_=($123?$117:$124);
 var $125=(($_+$__dg_019)|0);
 var $126=HEAP8[(($125)>>0)];
 var $127=(($126<<24)>>24)>0;
 var $128=(($126<<24)>>24);
 var $129=($__dc_018|0)==($128|0);
 var $or_cond=$127&$129;
 if($or_cond){label=39;break;}else{var $__dg_1=$__dg_019;var $__dc_1=$__dc_018;label=43;break;}
 case 39: 
 var $131=HEAP32[(($__oe)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__oe)>>2)]=$132;
 HEAP8[(($131)>>0)]=$114;
 var $133=HEAP8[(($76)>>0)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=41;break;}else{label=40;break;}
 case 40: 
 var $137=HEAP32[(($118)>>2)];
 var $141=$137;label=42;break;
 case 41: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=42;break;
 case 42: 
 var $141;
 var $142=((($141)-(1))|0);
 var $143=($__dg_019>>>0)<($142>>>0);
 var $144=($143&1);
 var $___dg_0=((($144)+($__dg_019))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=43;break;
 case 43: 
 var $__dc_1;
 var $__dg_1;
 var $146=HEAP8[(($__p_020)>>0)];
 var $147=HEAP32[(($120)>>2)];
 var $148=(($147+28)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($5,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=5;break; }
 case 44: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+1)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP8[(($151)>>0)]=$150;
 var $153=((($__dc_1)+(1))|0);
 var $154=(($__p_020+1)|0);
 var $155=($154>>>0)<($__ns_2>>>0);
 if($155){var $__dc_018=$153;var $__dg_019=$__dg_1;var $__p_020=$154;label=38;break;}else{label=45;break;}
 case 45: 
 var $156=$__nf_1;
 var $157=$__nb;
 var $158=((($156)-($157))|0);
 var $159=(($__ob+$158)|0);
 var $160=HEAP32[(($__oe)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=48;break;}else{label=46;break;}
 case 46: 
 var $162=((($160)-(1))|0);
 var $163=($162>>>0)>($159>>>0);
 if($163){var $_012_i_i7=$159;var $164=$162;label=47;break;}else{label=48;break;}
 case 47: 
 var $164;
 var $_012_i_i7;
 var $165=HEAP8[(($_012_i_i7)>>0)];
 var $166=HEAP8[(($164)>>0)];
 HEAP8[(($_012_i_i7)>>0)]=$166;
 HEAP8[(($164)>>0)]=$165;
 var $167=(($_012_i_i7+1)|0);
 var $168=((($164)-(1))|0);
 var $169=($167>>>0)<($168>>>0);
 if($169){var $_012_i_i7=$167;var $164=$168;label=47;break;}else{label=48;break;}
 case 48: 
 var $170=($__ns_2>>>0)<($__ne>>>0);
 if($170){label=49;break;}else{var $__nf_3=$__ns_2;label=55;break;}
 case 49: 
 var $171=$4;
 var $__nf_214=$__ns_2;label=50;break;
 case 50: 
 var $__nf_214;
 var $173=HEAP8[(($__nf_214)>>0)];
 var $174=(($173<<24)>>24)==46;
 if($174){label=51;break;}else{label=53;break;}
 case 51: 
 var $176=$8;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=8;break; }
 case 52: 
 var $181=HEAP32[(($__oe)>>2)];
 var $182=(($181+1)|0);
 HEAP32[(($__oe)>>2)]=$182;
 HEAP8[(($181)>>0)]=$180;
 var $183=(($__nf_214+1)|0);
 var $__nf_3=$183;label=55;break;
 case 53: 
 var $185=HEAP32[(($171)>>2)];
 var $186=(($185+28)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($5,$173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=4;break; }
 case 54: 
 var $189=HEAP32[(($__oe)>>2)];
 var $190=(($189+1)|0);
 HEAP32[(($__oe)>>2)]=$190;
 HEAP8[(($189)>>0)]=$188;
 var $191=(($__nf_214+1)|0);
 var $192=($191>>>0)<($__ne>>>0);
 if($192){var $__nf_214=$191;label=50;break;}else{var $__nf_3=$191;label=55;break;}
 case 55: 
 var $__nf_3;
 var $193=HEAP32[(($__oe)>>2)];
 var $194=$4;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+32)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($5,$__nf_3,$__ne,$193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=8;break; }
 case 56: 
 var $199=$__nf_3;
 var $200=((($32)-($199))|0);
 var $201=HEAP32[(($__oe)>>2)];
 var $202=(($201+$200)|0);
 HEAP32[(($__oe)>>2)]=$202;
 var $203=($__np|0)==($__ne|0);
 if($203){var $storemerge=$202;label=58;break;}else{label=57;break;}
 case 57: 
 var $205=$__np;
 var $206=$__nb;
 var $207=((($205)-($206))|0);
 var $208=(($__ob+$207)|0);
 var $storemerge=$208;label=58;break;
 case 58: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $210=HEAP8[(($76)>>0)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=60;break;}else{label=59;break;}
 case 59: 
 var $214=(($__grouping+8)|0);
 var $215=HEAP32[(($214)>>2)];
 _free($215);
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,3896,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $39=0;var $38=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_127=$27;var $_18=$26;label=34;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$31;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $33=HEAP32[(($__nb)>>2)];
 var $34=($33|0)==0;
 if($34){label=12;break;}else{var $__nc_2=$__nc_1;var $39=$33;var $38=$33;label=14;break;}
 case 12: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $38;
 var $39;
 var $__nc_2;
 var $40=(($38+$__nc_2)|0);
 var $41=HEAP32[(($5)>>2)];
 var $42=$41&176;
 if(($42|0)==16){ label=15;break;}else if(($42|0)==32){ var $_0_i=$40;label=21;break;}else{label=20;break;}
 case 15: 
 var $44=HEAP8[(($38)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $46=(($38+1)|0);
 var $_0_i=$46;label=21;break;
 case 17: 
 var $48=($__nc_2|0)>1;
 var $49=(($44<<24)>>24)==48;
 var $or_cond_i=$48&$49;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $51=(($38+1)|0);
 var $52=HEAP8[(($51)>>0)];
 if((($52<<24)>>24)==120|(($52<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $54=(($38+2)|0);
 var $_0_i=$54;label=21;break;
 case 20: 
 var $_0_i=$38;label=21;break;
 case 21: 
 var $_0_i;
 var $56=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $57=($38|0)==($8|0);
 if($57){var $__ob_0=$56;var $72=0;var $71=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $59=$__nc_2<<1;
 var $60=_malloc($59);
 var $61=($60|0)==0;
 if($61){label=23;break;}else{var $__ob_0=$60;var $72=$60;var $71=$38;label=26;break;}
 case 23: 
 var $63=___cxa_allocate_exception(4);
 var $64=$63;
 HEAP32[(($64)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($63,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $66=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $66;
 var $67$0 = ___cxa_find_matching_catch(); var $67$1 = tempRet0;
 var $68=$67$0;
 var $69=$67$1;
 var $_0=$68;var $_01=$69;var $112=$66;label=33;break;
 case 26: 
 var $71;
 var $72;
 var $__ob_0;
 var $73=(($__iob+28)|0);
 var $74=(($1)|0);
 var $75=HEAP32[(($73)>>2)];
 var $76=$75;
 HEAP32[(($74)>>2)]=$76;
 var $77=(($75+4)|0);
 var $78=$77;
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($71,$_0_i,$40,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $81=HEAP32[(($74)>>2)];
 var $82=(($81+4)|0);
 var $83=(tempValue=HEAP32[(($82)>>2)],HEAP32[(($82)>>2)]=tempValue+-1,tempValue);
 var $84=($83|0)==0;
 if($84){label=28;break;}else{label=29;break;}
 case 28: 
 var $86=(($81)|0);
 var $87=$81;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+8)|0);
 var $90=HEAP32[(($89)>>2)];
 FUNCTION_TABLE[$90]($86);
 label=29;break;
 case 29: 
 var $91=(($__s)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=HEAP32[(($__op)>>2)];
 var $94=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$92,$__ob_0,$93,$94,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $66=$72;label=25;break; }
 case 30: 
 var $95=(($2)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($agg_result)|0);
 HEAP32[(($97)>>2)]=$96;
 _free($72);
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 _free($39);
 STACKTOP=sp;return;
 case 31: 
 var $99$0 = ___cxa_find_matching_catch(); var $99$1 = tempRet0;
 var $100=$99$0;
 var $101=$99$1;
 var $102=HEAP32[(($74)>>2)];
 var $103=(($102+4)|0);
 var $104=(tempValue=HEAP32[(($103)>>2)],HEAP32[(($103)>>2)]=tempValue+-1,tempValue);
 var $105=($104|0)==0;
 if($105){label=32;break;}else{var $_0=$100;var $_01=$101;var $112=$72;label=33;break;}
 case 32: 
 var $107=(($102)|0);
 var $108=$102;
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+8)|0);
 var $111=HEAP32[(($110)>>2)];
 FUNCTION_TABLE[$111]($107);
 var $_0=$100;var $_01=$101;var $112=$72;label=33;break;
 case 33: 
 var $112;
 var $_01;
 var $_0;
 _free($112);
 _free($39);
 var $_127=$_01;var $_18=$_0;label=34;break;
 case 34: 
 var $_18;
 var $_127;
 var $113$0=$_18;
 var $113$1=0;
 var $114$0=$113$0;
 var $114$1=$_127;
 ___resumeException($114$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($1)>>0)]=HEAP8[((12888)>>0)];HEAP8[((($1)+(1))>>0)]=HEAP8[((12889)>>0)];HEAP8[((($1)+(2))>>0)]=HEAP8[((12890)>>0)];HEAP8[((($1)+(3))>>0)]=HEAP8[((12891)>>0)];HEAP8[((($1)+(4))>>0)]=HEAP8[((12892)>>0)];HEAP8[((($1)+(5))>>0)]=HEAP8[((12893)>>0)];
 var $2=(($__nar)|0);
 var $3=__ZNSt3__16__clocEv();
 var $4=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$3,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($__nar+$4)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&176;
 if(($8|0)==16){ label=2;break;}else if(($8|0)==32){ var $_0_i=$5;label=8;break;}else{label=7;break;}
 case 2: 
 var $10=HEAP8[(($2)>>0)];
 if((($10<<24)>>24)==45|(($10<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $12=(($__nar+1)|0);
 var $_0_i=$12;label=8;break;
 case 4: 
 var $14=($4|0)>1;
 var $15=(($10<<24)>>24)==48;
 var $or_cond_i=$14&$15;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $17=(($__nar+1)|0);
 var $18=HEAP8[(($17)>>0)];
 if((($18<<24)>>24)==120|(($18<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($__nar+2)|0);
 var $_0_i=$20;label=8;break;
 case 7: 
 var $_0_i=$2;label=8;break;
 case 8: 
 var $_0_i;
 var $22=(($__o)|0);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;

 var $23=(($__iob+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+4)|0);
 var $26=$25;
 var $27=(tempValue=HEAP32[(($26)>>2)],HEAP32[(($26)>>2)]=tempValue+1,tempValue);
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 var $_idx=(($24+8)|0);
 var $29=$_idx;
 var $_idx_val=HEAP32[(($29)>>2)];
 var $_idx3=(($24+12)|0);
 var $30=$_idx3;
 var $_idx3_val=HEAP32[(($30)>>2)];
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 var $32=$31;
 var $33=(($24+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=$24;
 var $39=$24;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=12;break;
 case 12: 
 var $43=$31;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+32)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($32,$2,$5,$22);
 var $48=(($__o+$4)|0);
 var $49=($_0_i|0)==($5|0);
 if($49){var $__op_0=$48;label=17;break;}else{label=16;break;}
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(); var $51$1 = tempRet0;
 var $52=(($24+4)|0);
 var $53=$52;
 var $54=(tempValue=HEAP32[(($53)>>2)],HEAP32[(($53)>>2)]=tempValue+-1,tempValue);
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=15;break;}
 case 14: 
 var $57=$24;
 var $58=$24;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+8)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($57);
 label=15;break;
 case 15: 
 ___resumeException($51$0)
 case 16: 
 var $63=$__nar;
 var $64=$_0_i;
 var $65=((($64)-($63))|0);
 var $66=(($__o+$65)|0);
 var $__op_0=$66;label=17;break;
 case 17: 
 var $__op_0;
 var $68=(($__s)|0);
 var $69=HEAP32[(($68)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$69,$22,$__op_0,$48,$__iob,$__fl);
 var $$etemp$1$0=37;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__nm=(sp)+(8);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=31;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=25;break; }
 case 4: 
 var $_idx=(($17+8)|0);
 var $22=$_idx;
 var $_idx_val=HEAP32[(($22)>>2)];
 var $_idx4=(($17+12)|0);
 var $23=$_idx4;
 var $_idx4_val=HEAP32[(($23)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx4_val,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=25;break; }
 case 5: 
 var $25=$24;
 var $26=(($17+4)|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$17;
 var $32=$17;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 FUNCTION_TABLE[$35]($31);
 label=7;break;
 case 7: 
 var $36=$24;
 var $37=HEAP32[(($36)>>2)];
 if($__v){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=(($37+24)|0);
 var $40=HEAP32[(($39)>>2)];
 FUNCTION_TABLE[$40]($__nm,$25);
 label=10;break;
 case 9: 
 var $42=(($37+28)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($__nm,$25);
 label=10;break;
 case 10: 
 var $45=$__nm;
 var $46=HEAP8[(($45)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=12;break;}else{label=11;break;}
 case 11: 
 var $50=(($__nm+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $_pre2=(($__nm+4)|0);
 var $_ph=$51;var $_pre_phi=$_pre2;var $_pre_phi4=$50;label=13;break;
 case 12: 
 var $53=(($__nm+4)|0);
 var $_pre3=(($__nm+8)|0);
 var $_ph=$53;var $_pre_phi=$53;var $_pre_phi4=$_pre3;label=13;break;
 case 13: 
 var $_pre_phi4;
 var $_pre_phi;
 var $_ph;
 var $54=(($__s)|0);
 var $56=$_ph;var $55=$46;label=14;break;
 case 14: 
 var $55;
 var $56;
 var $57=$55&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=HEAP32[(($_pre_phi4)>>2)];
 var $61=HEAP32[(($_pre_phi)>>2)];
 var $66=$61;var $65=$60;label=17;break;
 case 16: 
 var $63=($55&255);
 var $64=$63>>>1;
 var $66=$64;var $65=$_pre_phi;label=17;break;
 case 17: 
 var $65;
 var $66;
 var $67=(($65+($66<<2))|0);
 var $68=($56|0)==($67|0);
 if($68){label=29;break;}else{label=18;break;}
 case 18: 
 var $70=HEAP32[(($56)>>2)];
 var $71=HEAP32[(($54)>>2)];
 var $72=($71|0)==0;
 if($72){label=24;break;}else{label=19;break;}
 case 19: 
 var $74=(($71+24)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($71+28)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($75|0)==($77|0);
 if($78){label=20;break;}else{label=21;break;}
 case 20: 
 var $80=$71;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+52)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($71,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$84;label=22;break; } else { label=27;break; }
 case 21: 
 var $86=(($75+4)|0);
 HEAP32[(($74)>>2)]=$86;
 HEAP32[(($75)>>2)]=$70;
 var $_0_i_i=$70;label=22;break;
 case 22: 
 var $_0_i_i;
 var $87=($_0_i_i|0)==-1;
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($54)>>2)]=0;
 label=24;break;
 case 24: 
 var $89=(($56+4)|0);
 var $_pre=HEAP8[(($45)>>0)];
 var $56=$89;var $55=$_pre;label=14;break;
 case 25: 
 var $91$0 = ___cxa_find_matching_catch(); var $91$1 = tempRet0;
 var $92=$91$0;
 var $93=$91$1;
 var $94=(($17+4)|0);
 var $95=$94;
 var $96=(tempValue=HEAP32[(($95)>>2)],HEAP32[(($95)>>2)]=tempValue+-1,tempValue);
 var $97=($96|0)==0;
 if($97){label=26;break;}else{var $_0=$92;var $_01=$93;label=32;break;}
 case 26: 
 var $99=$17;
 var $100=$17;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+8)|0);
 var $103=HEAP32[(($102)>>2)];
 FUNCTION_TABLE[$103]($99);
 var $_0=$92;var $_01=$93;label=32;break;
 case 27: 
 var $105$0 = ___cxa_find_matching_catch(); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP8[(($45)>>0)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){var $_0=$106;var $_01=$107;label=32;break;}else{label=28;break;}
 case 28: 
 var $112=(($__nm+8)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$113;
 _free($114);
 var $_0=$106;var $_01=$107;label=32;break;
 case 29: 
 var $116=HEAP32[(($54)>>2)];
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$116;
 if($58){label=31;break;}else{label=30;break;}
 case 30: 
 var $119=(($__nm+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$120;
 _free($121);
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $_01;
 var $_0;
 var $122$0=$_0;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_01;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((12880)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((12881)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((12882)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((12883)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((12884)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((12885)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7680,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(33816);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(33432);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 var $14=$__grouping;
 var $15=HEAP8[(($14)>>0)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=3;break;}else{label=2;break;}
 case 2: 
 var $19=(($__grouping+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=4;break;
 case 3: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=4;break;
 case 4: 
 var $24;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=12;break;}
 case 5: 
 var $27=$4;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($5,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $32=$__ne;
 var $33=$__nb;
 var $34=((($32)-($33))|0);
 var $35=(($__ob+($34<<2))|0);
 HEAP32[(($__oe)>>2)]=$35;
 var $151=$35;label=38;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=HEAP8[(($14)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 var $41=(($__grouping+8)|0);
 var $42=HEAP32[(($41)>>2)];
 _free($42);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $44=HEAP8[(($__nb)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=13;break;}else{var $__nf_0=$__nb;label=15;break;}
 case 13: 
 var $46=$4;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+44)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($5,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=8;break; }
 case 14: 
 var $51=(($__nb+1)|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $53=(($52+4)|0);
 HEAP32[(($__oe)>>2)]=$53;
 HEAP32[(($52)>>2)]=$50;
 var $__nf_0=$51;label=15;break;
 case 15: 
 var $__nf_0;
 var $55=$__ne;
 var $56=$__nf_0;
 var $57=((($55)-($56))|0);
 var $58=($57|0)>1;
 if($58){label=16;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 16: 
 var $60=HEAP8[(($__nf_0)>>0)];
 var $61=(($60<<24)>>24)==48;
 if($61){label=17;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 17: 
 var $63=(($__nf_0+1)|0);
 var $64=HEAP8[(($63)>>0)];
 if((($64<<24)>>24)==120|(($64<<24)>>24)==88){ label=18;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 18: 
 var $66=$4;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+44)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=8;break; }
 case 19: 
 var $71=HEAP32[(($__oe)>>2)];
 var $72=(($71+4)|0);
 HEAP32[(($__oe)>>2)]=$72;
 HEAP32[(($71)>>2)]=$70;
 var $73=HEAP8[(($63)>>0)];
 var $74=HEAP32[(($66)>>2)];
 var $75=(($74+44)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($5,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $78=(($__nf_0+2)|0);
 var $79=HEAP32[(($__oe)>>2)];
 var $80=(($79+4)|0);
 HEAP32[(($__oe)>>2)]=$80;
 HEAP32[(($79)>>2)]=$77;
 var $__nf_1=$78;label=21;break;
 case 21: 
 var $__nf_1;
 var $82=($__nf_1|0)==($__ne|0);
 if($82){label=24;break;}else{label=22;break;}
 case 22: 
 var $83=((($__ne)-(1))|0);
 var $84=($83>>>0)>($__nf_1>>>0);
 if($84){var $_012_i_i5=$__nf_1;var $85=$83;label=23;break;}else{label=24;break;}
 case 23: 
 var $85;
 var $_012_i_i5;
 var $86=HEAP8[(($_012_i_i5)>>0)];
 var $87=HEAP8[(($85)>>0)];
 HEAP8[(($_012_i_i5)>>0)]=$87;
 HEAP8[(($85)>>0)]=$86;
 var $88=(($_012_i_i5+1)|0);
 var $89=((($85)-(1))|0);
 var $90=($88>>>0)<($89>>>0);
 if($90){var $_012_i_i5=$88;var $85=$89;label=23;break;}else{label=24;break;}
 case 24: 
 var $91=$8;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 var $96=($__nf_1>>>0)<($__ne>>>0);
 if($96){label=27;break;}else{label=26;break;}
 case 26: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $137=$_pre;label=35;break;
 case 27: 
 var $97=$__grouping;
 var $98=(($97+1)|0);
 var $99=$4;
 var $100=(($__grouping+4)|0);
 var $101=(($__grouping+8)|0);
 var $__dc_08=0;var $__dg_09=0;var $__p_010=$__nf_1;label=28;break;
 case 28: 
 var $__p_010;
 var $__dg_09;
 var $__dc_08;
 var $102=HEAP8[(($14)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=HEAP32[(($101)>>2)];
 var $_=($104?$98:$105);
 var $106=(($_+$__dg_09)|0);
 var $107=HEAP8[(($106)>>0)];
 var $108=(($107<<24)>>24)!=0;
 var $109=(($107<<24)>>24);
 var $110=($__dc_08|0)==($109|0);
 var $or_cond=$108&$110;
 if($or_cond){label=29;break;}else{var $__dg_1=$__dg_09;var $__dc_1=$__dc_08;label=33;break;}
 case 29: 
 var $112=HEAP32[(($__oe)>>2)];
 var $113=(($112+4)|0);
 HEAP32[(($__oe)>>2)]=$113;
 HEAP32[(($112)>>2)]=$95;
 var $114=HEAP8[(($14)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=31;break;}else{label=30;break;}
 case 30: 
 var $118=HEAP32[(($100)>>2)];
 var $122=$118;label=32;break;
 case 31: 
 var $120=($114&255);
 var $121=$120>>>1;
 var $122=$121;label=32;break;
 case 32: 
 var $122;
 var $123=((($122)-(1))|0);
 var $124=($__dg_09>>>0)<($123>>>0);
 var $125=($124&1);
 var $___dg_0=((($125)+($__dg_09))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=33;break;
 case 33: 
 var $__dc_1;
 var $__dg_1;
 var $127=HEAP8[(($__p_010)>>0)];
 var $128=HEAP32[(($99)>>2)];
 var $129=(($128+44)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($5,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=7;break; }
 case 34: 
 var $132=HEAP32[(($__oe)>>2)];
 var $133=(($132+4)|0);
 HEAP32[(($__oe)>>2)]=$133;
 HEAP32[(($132)>>2)]=$131;
 var $134=((($__dc_1)+(1))|0);
 var $135=(($__p_010+1)|0);
 var $136=($135>>>0)<($__ne>>>0);
 if($136){var $__dc_08=$134;var $__dg_09=$__dg_1;var $__p_010=$135;label=28;break;}else{var $137=$133;label=35;break;}
 case 35: 
 var $137;
 var $138=$__nf_1;
 var $139=$__nb;
 var $140=((($138)-($139))|0);
 var $141=(($__ob+($140<<2))|0);
 var $142=($141|0)==($137|0);
 if($142){var $151=$137;label=38;break;}else{label=36;break;}
 case 36: 
 var $143=((($137)-(4))|0);
 var $144=($143>>>0)>($141>>>0);
 if($144){var $_012_i_i=$141;var $145=$143;label=37;break;}else{var $151=$137;label=38;break;}
 case 37: 
 var $145;
 var $_012_i_i;
 var $146=HEAP32[(($_012_i_i)>>2)];
 var $147=HEAP32[(($145)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$147;
 HEAP32[(($145)>>2)]=$146;
 var $148=(($_012_i_i+4)|0);
 var $149=((($145)-(4))|0);
 var $150=($148>>>0)<($149>>>0);
 if($150){var $_012_i_i=$148;var $145=$149;label=37;break;}else{var $151=$137;label=38;break;}
 case 38: 
 var $151;
 var $152=($__np|0)==($__ne|0);
 if($152){var $storemerge=$151;label=40;break;}else{label=39;break;}
 case 39: 
 var $154=$__np;
 var $155=$__nb;
 var $156=((($154)-($155))|0);
 var $157=(($__ob+($156<<2))|0);
 var $storemerge=$157;label=40;break;
 case 40: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $159=HEAP8[(($14)>>0)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)==0;
 if($161){label=42;break;}else{label=41;break;}
 case 41: 
 var $163=(($__grouping+8)|0);
 var $164=HEAP32[(($163)>>2)];
 _free($164);
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7664,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,22,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$3$0=164;
 var $$etemp$3$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$4$0=164;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((12880)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((12881)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((12882)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((12883)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((12884)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((12885)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7680,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,7664,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,23,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$3$0=172;
 var $$etemp$3$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$4$0=172;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,28880,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $41=0;var $40=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_125=$27;var $_16=$26;label=38;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(($__iob+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$33;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $35=HEAP32[(($__nb)>>2)];
 var $36=($35|0)==0;
 if($36){label=12;break;}else{var $__nc_2=$__nc_1;var $41=$35;var $40=$35;label=14;break;}
 case 12: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 HEAP32[(($39)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($38,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $40;
 var $41;
 var $__nc_2;
 var $42=(($40+$__nc_2)|0);
 var $43=HEAP32[(($5)>>2)];
 var $44=$43&176;
 if(($44|0)==16){ label=15;break;}else if(($44|0)==32){ var $_0_i=$42;label=21;break;}else{label=20;break;}
 case 15: 
 var $46=HEAP8[(($40)>>0)];
 if((($46<<24)>>24)==45|(($46<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $48=(($40+1)|0);
 var $_0_i=$48;label=21;break;
 case 17: 
 var $50=($__nc_2|0)>1;
 var $51=(($46<<24)>>24)==48;
 var $or_cond_i=$50&$51;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=(($40+1)|0);
 var $54=HEAP8[(($53)>>0)];
 if((($54<<24)>>24)==120|(($54<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $56=(($40+2)|0);
 var $_0_i=$56;label=21;break;
 case 20: 
 var $_0_i=$40;label=21;break;
 case 21: 
 var $_0_i;
 var $58=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $59=(($__o)|0);
 var $60=($40|0)==($8|0);
 if($60){var $__ob_0=$59;var $76=0;var $75=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $62=$__nc_2<<3;
 var $63=_malloc($62);
 var $64=$63;
 var $65=($63|0)==0;
 if($65){label=23;break;}else{var $__ob_0=$64;var $76=$64;var $75=$40;label=26;break;}
 case 23: 
 var $67=___cxa_allocate_exception(4);
 var $68=$67;
 HEAP32[(($68)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($67,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $70=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $70;
 var $71$0 = ___cxa_find_matching_catch(); var $71$1 = tempRet0;
 var $72=$71$0;
 var $73=$71$1;
 var $_0=$72;var $_01=$73;var $120=$70;label=35;break;
 case 26: 
 var $75;
 var $76;
 var $__ob_0;
 var $77=(($__iob+28)|0);
 var $78=(($1)|0);
 var $79=HEAP32[(($77)>>2)];
 var $80=$79;
 HEAP32[(($78)>>2)]=$80;
 var $81=(($79+4)|0);
 var $82=$81;
 var $83=(tempValue=HEAP32[(($82)>>2)],HEAP32[(($82)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($75,$_0_i,$42,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $85=HEAP32[(($78)>>2)];
 var $86=(($85+4)|0);
 var $87=(tempValue=HEAP32[(($86)>>2)],HEAP32[(($86)>>2)]=tempValue+-1,tempValue);
 var $88=($87|0)==0;
 if($88){label=28;break;}else{label=29;break;}
 case 28: 
 var $90=(($85)|0);
 var $91=$85;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP32[(($93)>>2)];
 FUNCTION_TABLE[$94]($90);
 label=29;break;
 case 29: 
 var $95=(($__s)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=HEAP32[(($__op)>>2)];
 var $98=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$96,$__ob_0,$97,$98,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $70=$76;label=25;break; }
 case 30: 
 var $100=(($2)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($95)>>2)]=$101;
 var $102=(($agg_result)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=($76|0)==0;
 if($103){label=32;break;}else{label=31;break;}
 case 31: 
 var $105=$76;
 _free($105);
 label=32;break;
 case 32: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 _free($41);
 STACKTOP=sp;return;
 case 33: 
 var $107$0 = ___cxa_find_matching_catch(); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 var $110=HEAP32[(($78)>>2)];
 var $111=(($110+4)|0);
 var $112=(tempValue=HEAP32[(($111)>>2)],HEAP32[(($111)>>2)]=tempValue+-1,tempValue);
 var $113=($112|0)==0;
 if($113){label=34;break;}else{var $_0=$108;var $_01=$109;var $120=$76;label=35;break;}
 case 34: 
 var $115=(($110)|0);
 var $116=$110;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+8)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($115);
 var $_0=$108;var $_01=$109;var $120=$76;label=35;break;
 case 35: 
 var $120;
 var $_01;
 var $_0;
 var $121=($120|0)==0;
 if($121){label=37;break;}else{label=36;break;}
 case 36: 
 var $123=$120;
 _free($123);
 label=37;break;
 case 37: 
 _free($41);
 var $_125=$_01;var $_16=$_0;label=38;break;
 case 38: 
 var $_16;
 var $_125;
 var $124$0=$_16;
 var $124$1=0;
 var $125$0=$124$0;
 var $125$1=$_125;
 ___resumeException($125$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(33816);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(33432);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $14=HEAP8[(($__nb)>>0)];
 if((($14<<24)>>24)==45|(($14<<24)>>24)==43){ label=2;break;}else{var $__nf_0=$__nb;label=12;break;}
 case 2: 
 var $16=$4;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+44)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($5,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $21=(($__nb+1)|0);
 var $22=HEAP32[(($__oe)>>2)];
 var $23=(($22+4)|0);
 HEAP32[(($__oe)>>2)]=$23;
 HEAP32[(($22)>>2)]=$20;
 var $__nf_0=$21;label=12;break;
 case 4: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 5: 
 var $lpad_loopexit14$0 = ___cxa_find_matching_catch(); var $lpad_loopexit14$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit14$1;var $lpad_phi$0=$lpad_loopexit14$0;label=9;break;
 case 6: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(); var $lpad_loopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit22$1;var $lpad_phi$0=$lpad_loopexit22$0;label=9;break;
 case 7: 
 var $lpad_loopexit29$0 = ___cxa_find_matching_catch(); var $lpad_loopexit29$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit29$1;var $lpad_phi$0=$lpad_loopexit29$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit30$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit30$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit30$1;var $lpad_phi$0=$lpad_nonloopexit30$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $24=$__grouping;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=(($__grouping+8)|0);
 var $30=HEAP32[(($29)>>2)];
 _free($30);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 var $__nf_0;
 var $32=$__ne;
 var $33=$__nf_0;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>1;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $36=($__nf_0>>>0)<($__ne>>>0);
 if($36){var $__ns_125=$__nf_0;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=26;break;}
 case 14: 
 var $38=HEAP8[(($__nf_0)>>0)];
 var $39=(($38<<24)>>24)==48;
 if($39){label=15;break;}else{label=13;break;}
 case 15: 
 var $41=(($__nf_0+1)|0);
 var $42=HEAP8[(($41)>>0)];
 if((($42<<24)>>24)==120|(($42<<24)>>24)==88){ label=16;break;}else{label=13;break;}
 case 16: 
 var $44=$4;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+44)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 17: 
 var $49=HEAP32[(($__oe)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__oe)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $51=(($__nf_0+2)|0);
 var $52=HEAP8[(($41)>>0)];
 var $53=HEAP32[(($44)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($5,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=8;break; }
 case 18: 
 var $57=HEAP32[(($__oe)>>2)];
 var $58=(($57+4)|0);
 HEAP32[(($__oe)>>2)]=$58;
 HEAP32[(($57)>>2)]=$56;
 var $59=($51>>>0)<($__ne>>>0);
 if($59){var $__ns_033=$51;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$51;label=26;break;}
 case 19: 
 var $60=(($__ns_033+1)|0);
 var $61=($60>>>0)<($__ne>>>0);
 if($61){var $__ns_033=$60;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$60;label=26;break;}
 case 20: 
 var $__ns_033;
 var $62=HEAP8[(($__ns_033)>>0)];
 var $63=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=7;break; }
 case 21: 
 var $65=(($62<<24)>>24);
 var $isdigittmp_i_i=((($65)-(48))|0);
 var $isdigit_i_i=($isdigittmp_i_i>>>0)<10;
 if($isdigit_i_i){label=19;break;}else{label=22;break;}
 case 22: 
 var $66=$65|32;
 var $67=((($66)-(97))|0);
 var $68=($67>>>0)<6;
 if($68){label=19;break;}else{var $__nf_1=$51;var $__ns_2=$__ns_033;label=26;break;}
 case 23: 
 var $70=($75>>>0)<($__ne>>>0);
 if($70){var $__ns_125=$75;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$75;label=26;break;}
 case 24: 
 var $__ns_125;
 var $71=HEAP8[(($__ns_125)>>0)];
 var $72=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=6;break; }
 case 25: 
 var $74=(($71<<24)>>24);
 var $isdigittmp_i=((($74)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 var $75=(($__ns_125+1)|0);
 if($isdigit_i){label=23;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__ns_125;label=26;break;}
 case 26: 
 var $__ns_2;
 var $__nf_1;
 var $76=$__grouping;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=28;break;}else{label=27;break;}
 case 27: 
 var $81=(($__grouping+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $86=$82;label=29;break;
 case 28: 
 var $84=($77&255);
 var $85=$84>>>1;
 var $86=$85;label=29;break;
 case 29: 
 var $86;
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=32;break;}
 case 30: 
 var $89=HEAP32[(($__oe)>>2)];
 var $90=$4;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+48)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($5,$__nf_1,$__ns_2,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=8;break; }
 case 31: 
 var $95=$__ns_2;
 var $96=$__nf_1;
 var $97=((($95)-($96))|0);
 var $98=HEAP32[(($__oe)>>2)];
 var $99=(($98+($97<<2))|0);
 HEAP32[(($__oe)>>2)]=$99;
 var $170=$99;label=49;break;
 case 32: 
 var $101=($__nf_1|0)==($__ns_2|0);
 if($101){label=35;break;}else{label=33;break;}
 case 33: 
 var $102=((($__ns_2)-(1))|0);
 var $103=($102>>>0)>($__nf_1>>>0);
 if($103){var $_012_i_i=$__nf_1;var $104=$102;label=34;break;}else{label=35;break;}
 case 34: 
 var $104;
 var $_012_i_i;
 var $105=HEAP8[(($_012_i_i)>>0)];
 var $106=HEAP8[(($104)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$106;
 HEAP8[(($104)>>0)]=$105;
 var $107=(($_012_i_i+1)|0);
 var $108=((($104)-(1))|0);
 var $109=($107>>>0)<($108>>>0);
 if($109){var $_012_i_i=$107;var $104=$108;label=34;break;}else{label=35;break;}
 case 35: 
 var $110=$8;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=8;break; }
 case 36: 
 var $115=($__nf_1>>>0)<($__ns_2>>>0);
 if($115){label=38;break;}else{label=37;break;}
 case 37: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $156=$_pre;label=46;break;
 case 38: 
 var $116=$__grouping;
 var $117=(($116+1)|0);
 var $118=(($__grouping+4)|0);
 var $119=(($__grouping+8)|0);
 var $120=$4;
 var $__dc_017=0;var $__dg_018=0;var $__p_019=$__nf_1;label=39;break;
 case 39: 
 var $__p_019;
 var $__dg_018;
 var $__dc_017;
 var $121=HEAP8[(($76)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 var $124=HEAP32[(($119)>>2)];
 var $_=($123?$117:$124);
 var $125=(($_+$__dg_018)|0);
 var $126=HEAP8[(($125)>>0)];
 var $127=(($126<<24)>>24)>0;
 var $128=(($126<<24)>>24);
 var $129=($__dc_017|0)==($128|0);
 var $or_cond=$127&$129;
 if($or_cond){label=40;break;}else{var $__dg_1=$__dg_018;var $__dc_1=$__dc_017;label=44;break;}
 case 40: 
 var $131=HEAP32[(($__oe)>>2)];
 var $132=(($131+4)|0);
 HEAP32[(($__oe)>>2)]=$132;
 HEAP32[(($131)>>2)]=$114;
 var $133=HEAP8[(($76)>>0)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=42;break;}else{label=41;break;}
 case 41: 
 var $137=HEAP32[(($118)>>2)];
 var $141=$137;label=43;break;
 case 42: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=43;break;
 case 43: 
 var $141;
 var $142=((($141)-(1))|0);
 var $143=($__dg_018>>>0)<($142>>>0);
 var $144=($143&1);
 var $___dg_0=((($144)+($__dg_018))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=44;break;
 case 44: 
 var $__dc_1;
 var $__dg_1;
 var $146=HEAP8[(($__p_019)>>0)];
 var $147=HEAP32[(($120)>>2)];
 var $148=(($147+44)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($5,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=5;break; }
 case 45: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+4)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP32[(($151)>>2)]=$150;
 var $153=((($__dc_1)+(1))|0);
 var $154=(($__p_019+1)|0);
 var $155=($154>>>0)<($__ns_2>>>0);
 if($155){var $__dc_017=$153;var $__dg_018=$__dg_1;var $__p_019=$154;label=39;break;}else{var $156=$152;label=46;break;}
 case 46: 
 var $156;
 var $157=$__nf_1;
 var $158=$__nb;
 var $159=((($157)-($158))|0);
 var $160=(($__ob+($159<<2))|0);
 var $161=($160|0)==($156|0);
 if($161){var $170=$156;label=49;break;}else{label=47;break;}
 case 47: 
 var $162=((($156)-(4))|0);
 var $163=($162>>>0)>($160>>>0);
 if($163){var $_012_i_i7=$160;var $164=$162;label=48;break;}else{var $170=$156;label=49;break;}
 case 48: 
 var $164;
 var $_012_i_i7;
 var $165=HEAP32[(($_012_i_i7)>>2)];
 var $166=HEAP32[(($164)>>2)];
 HEAP32[(($_012_i_i7)>>2)]=$166;
 HEAP32[(($164)>>2)]=$165;
 var $167=(($_012_i_i7+4)|0);
 var $168=((($164)-(4))|0);
 var $169=($167>>>0)<($168>>>0);
 if($169){var $_012_i_i7=$167;var $164=$168;label=48;break;}else{var $170=$156;label=49;break;}
 case 49: 
 var $170;
 var $171=($__ns_2>>>0)<($__ne>>>0);
 if($171){label=50;break;}else{var $__nf_3=$__ns_2;var $194=$170;label=56;break;}
 case 50: 
 var $172=$4;
 var $__nf_213=$__ns_2;label=51;break;
 case 51: 
 var $__nf_213;
 var $174=HEAP8[(($__nf_213)>>0)];
 var $175=(($174<<24)>>24)==46;
 if($175){label=52;break;}else{label=54;break;}
 case 52: 
 var $177=$8;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=8;break; }
 case 53: 
 var $182=HEAP32[(($__oe)>>2)];
 var $183=(($182+4)|0);
 HEAP32[(($__oe)>>2)]=$183;
 HEAP32[(($182)>>2)]=$181;
 var $184=(($__nf_213+1)|0);
 var $__nf_3=$184;var $194=$183;label=56;break;
 case 54: 
 var $186=HEAP32[(($172)>>2)];
 var $187=(($186+44)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($5,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=4;break; }
 case 55: 
 var $190=HEAP32[(($__oe)>>2)];
 var $191=(($190+4)|0);
 HEAP32[(($__oe)>>2)]=$191;
 HEAP32[(($190)>>2)]=$189;
 var $192=(($__nf_213+1)|0);
 var $193=($192>>>0)<($__ne>>>0);
 if($193){var $__nf_213=$192;label=51;break;}else{var $__nf_3=$192;var $194=$191;label=56;break;}
 case 56: 
 var $194;
 var $__nf_3;
 var $195=$4;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+48)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($5,$__nf_3,$__ne,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=8;break; }
 case 57: 
 var $200=$__nf_3;
 var $201=((($32)-($200))|0);
 var $202=HEAP32[(($__oe)>>2)];
 var $203=(($202+($201<<2))|0);
 HEAP32[(($__oe)>>2)]=$203;
 var $204=($__np|0)==($__ne|0);
 if($204){var $storemerge=$203;label=59;break;}else{label=58;break;}
 case 58: 
 var $206=$__np;
 var $207=$__nb;
 var $208=((($206)-($207))|0);
 var $209=(($__ob+($208<<2))|0);
 var $storemerge=$209;label=59;break;
 case 59: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $211=HEAP8[(($76)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=61;break;}else{label=60;break;}
 case 60: 
 var $215=(($__grouping+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=61;break;
 case 61: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,3896,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $39=0;var $38=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_125=$27;var $_16=$26;label=38;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$31;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $33=HEAP32[(($__nb)>>2)];
 var $34=($33|0)==0;
 if($34){label=12;break;}else{var $__nc_2=$__nc_1;var $39=$33;var $38=$33;label=14;break;}
 case 12: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $38;
 var $39;
 var $__nc_2;
 var $40=(($38+$__nc_2)|0);
 var $41=HEAP32[(($5)>>2)];
 var $42=$41&176;
 if(($42|0)==16){ label=15;break;}else if(($42|0)==32){ var $_0_i=$40;label=21;break;}else{label=20;break;}
 case 15: 
 var $44=HEAP8[(($38)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $46=(($38+1)|0);
 var $_0_i=$46;label=21;break;
 case 17: 
 var $48=($__nc_2|0)>1;
 var $49=(($44<<24)>>24)==48;
 var $or_cond_i=$48&$49;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $51=(($38+1)|0);
 var $52=HEAP8[(($51)>>0)];
 if((($52<<24)>>24)==120|(($52<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $54=(($38+2)|0);
 var $_0_i=$54;label=21;break;
 case 20: 
 var $_0_i=$38;label=21;break;
 case 21: 
 var $_0_i;
 var $56=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $57=(($__o)|0);
 var $58=($38|0)==($8|0);
 if($58){var $__ob_0=$57;var $74=0;var $73=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $60=$__nc_2<<3;
 var $61=_malloc($60);
 var $62=$61;
 var $63=($61|0)==0;
 if($63){label=23;break;}else{var $__ob_0=$62;var $74=$62;var $73=$38;label=26;break;}
 case 23: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $68=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $68;
 var $69$0 = ___cxa_find_matching_catch(); var $69$1 = tempRet0;
 var $70=$69$0;
 var $71=$69$1;
 var $_0=$70;var $_01=$71;var $118=$68;label=35;break;
 case 26: 
 var $73;
 var $74;
 var $__ob_0;
 var $75=(($__iob+28)|0);
 var $76=(($1)|0);
 var $77=HEAP32[(($75)>>2)];
 var $78=$77;
 HEAP32[(($76)>>2)]=$78;
 var $79=(($77+4)|0);
 var $80=$79;
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($73,$_0_i,$40,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $83=HEAP32[(($76)>>2)];
 var $84=(($83+4)|0);
 var $85=(tempValue=HEAP32[(($84)>>2)],HEAP32[(($84)>>2)]=tempValue+-1,tempValue);
 var $86=($85|0)==0;
 if($86){label=28;break;}else{label=29;break;}
 case 28: 
 var $88=(($83)|0);
 var $89=$83;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+8)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($88);
 label=29;break;
 case 29: 
 var $93=(($__s)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=HEAP32[(($__op)>>2)];
 var $96=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$94,$__ob_0,$95,$96,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $68=$74;label=25;break; }
 case 30: 
 var $98=(($2)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP32[(($93)>>2)]=$99;
 var $100=(($agg_result)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=($74|0)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 var $103=$74;
 _free($103);
 label=32;break;
 case 32: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 _free($39);
 STACKTOP=sp;return;
 case 33: 
 var $105$0 = ___cxa_find_matching_catch(); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($76)>>2)];
 var $109=(($108+4)|0);
 var $110=(tempValue=HEAP32[(($109)>>2)],HEAP32[(($109)>>2)]=tempValue+-1,tempValue);
 var $111=($110|0)==0;
 if($111){label=34;break;}else{var $_0=$106;var $_01=$107;var $118=$74;label=35;break;}
 case 34: 
 var $113=(($108)|0);
 var $114=$108;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+8)|0);
 var $117=HEAP32[(($116)>>2)];
 FUNCTION_TABLE[$117]($113);
 var $_0=$106;var $_01=$107;var $118=$74;label=35;break;
 case 35: 
 var $118;
 var $_01;
 var $_0;
 var $119=($118|0)==0;
 if($119){label=37;break;}else{label=36;break;}
 case 36: 
 var $121=$118;
 _free($121);
 label=37;break;
 case 37: 
 _free($39);
 var $_125=$_01;var $_16=$_0;label=38;break;
 case 38: 
 var $_16;
 var $_125;
 var $122$0=$_16;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_125;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($1)>>0)]=HEAP8[((12888)>>0)];HEAP8[((($1)+(1))>>0)]=HEAP8[((12889)>>0)];HEAP8[((($1)+(2))>>0)]=HEAP8[((12890)>>0)];HEAP8[((($1)+(3))>>0)]=HEAP8[((12891)>>0)];HEAP8[((($1)+(4))>>0)]=HEAP8[((12892)>>0)];HEAP8[((($1)+(5))>>0)]=HEAP8[((12893)>>0)];
 var $2=(($__nar)|0);
 var $3=__ZNSt3__16__clocEv();
 var $4=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$3,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($__nar+$4)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&176;
 if(($8|0)==16){ label=2;break;}else if(($8|0)==32){ var $_0_i=$5;label=8;break;}else{label=7;break;}
 case 2: 
 var $10=HEAP8[(($2)>>0)];
 if((($10<<24)>>24)==45|(($10<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $12=(($__nar+1)|0);
 var $_0_i=$12;label=8;break;
 case 4: 
 var $14=($4|0)>1;
 var $15=(($10<<24)>>24)==48;
 var $or_cond_i=$14&$15;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $17=(($__nar+1)|0);
 var $18=HEAP8[(($17)>>0)];
 if((($18<<24)>>24)==120|(($18<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($__nar+2)|0);
 var $_0_i=$20;label=8;break;
 case 7: 
 var $_0_i=$2;label=8;break;
 case 8: 
 var $_0_i;
 var $22=$__o;
 var $$etemp$0$0=148;
 var $$etemp$0$1=0;

 var $23=(($__iob+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+4)|0);
 var $26=$25;
 var $27=(tempValue=HEAP32[(($26)>>2)],HEAP32[(($26)>>2)]=tempValue+1,tempValue);
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 var $_idx=(($24+8)|0);
 var $29=$_idx;
 var $_idx_val=HEAP32[(($29)>>2)];
 var $_idx3=(($24+12)|0);
 var $30=$_idx3;
 var $_idx3_val=HEAP32[(($30)>>2)];
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 var $32=$31;
 var $33=(($24+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=$24;
 var $39=$24;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=12;break;
 case 12: 
 var $43=(($__o)|0);
 var $44=$31;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+48)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($32,$2,$5,$43);
 var $49=(($__o+($4<<2))|0);
 var $50=($_0_i|0)==($5|0);
 if($50){var $__op_0=$49;label=17;break;}else{label=16;break;}
 case 13: 
 var $52$0 = ___cxa_find_matching_catch(); var $52$1 = tempRet0;
 var $53=(($24+4)|0);
 var $54=$53;
 var $55=(tempValue=HEAP32[(($54)>>2)],HEAP32[(($54)>>2)]=tempValue+-1,tempValue);
 var $56=($55|0)==0;
 if($56){label=14;break;}else{label=15;break;}
 case 14: 
 var $58=$24;
 var $59=$24;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+8)|0);
 var $62=HEAP32[(($61)>>2)];
 FUNCTION_TABLE[$62]($58);
 label=15;break;
 case 15: 
 ___resumeException($52$0)
 case 16: 
 var $64=$__nar;
 var $65=$_0_i;
 var $66=((($65)-($64))|0);
 var $67=(($__o+($66<<2))|0);
 var $__op_0=$67;label=17;break;
 case 17: 
 var $__op_0;
 var $69=(($__s)|0);
 var $70=HEAP32[(($69)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$70,$43,$__op_0,$49,$__iob,$__fl);
 var $$etemp$1$0=148;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=18;break; }
 case 2: 
 var $_idx=(($5+8)|0);
 var $10=$_idx;
 var $_idx_val=HEAP32[(($10)>>2)];
 var $_idx3=(($5+12)|0);
 var $11=$_idx3;
 var $_idx3_val=HEAP32[(($11)>>2)];
 var $12=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $13=$12;
 var $14=(($5+4)|0);
 var $15=$14;
 var $16=(tempValue=HEAP32[(($15)>>2)],HEAP32[(($15)>>2)]=tempValue+-1,tempValue);
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$5;
 var $20=$5;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 FUNCTION_TABLE[$23]($19);
 label=5;break;
 case 5: 
 HEAP32[(($__err)>>2)]=0;
 var $24=($__fmtb|0)==($__fmte|0);
 if($24){var $_pre_i_i_i4=$__b_0;var $__e_sroa_0_10=$__e_0;label=63;break;}else{label=6;break;}
 case 6: 
 var $25=$12;
 var $26=(($12+8)|0);
 var $27=$26;
 var $28=$12;
 var $29=$this;
 var $30=(($2)|0);
 var $31=(($3)|0);
 var $32=(($1)|0);
 var $_0_ph36=$__fmtb;var $_pre37=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=7;break;
 case 7: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre37;
 var $_0_ph36;
 var $34=$_pre37;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=8;break;
 case 8: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $34;
 var $35=($34|0)==0;
 if($35){label=9;break;}else{var $_pre_i_i_i4=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=63;break;}
 case 9: 
 var $37=($__b_sroa_0_1|0)==0;
 if($37){var $50=0;var $__b_sroa_0_2=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $39=(($__b_sroa_0_1+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($__b_sroa_0_1+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=11;break;}else{var $50=$__b_sroa_0_1;var $__b_sroa_0_2=$__b_sroa_0_1;label=12;break;}
 case 11: 
 var $44=$__b_sroa_0_1;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($__b_sroa_0_1);
 var $49=($48|0)==-1;
 var $___b_sroa_0_1=($49?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($49?0:$__b_sroa_0_1);
 var $50=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=12;break;
 case 12: 
 var $__b_sroa_0_2;
 var $50;
 var $51=($50|0)==0;
 var $52=($__e_sroa_0_1|0)==0;
 if($52){label=16;break;}else{label=13;break;}
 case 13: 
 var $54=(($__e_sroa_0_1+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($__e_sroa_0_1+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 var $59=$__e_sroa_0_1;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__e_sroa_0_1);
 var $64=($63|0)==-1;
 if($64){label=16;break;}else{label=15;break;}
 case 15: 
 if($51){var $__e_sroa_0_4=$__e_sroa_0_1;label=21;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=17;break;}
 case 16: 
 if($51){var $__e_sroa_0_3=0;label=17;break;}else{var $__e_sroa_0_4=0;label=21;break;}
 case 17: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_3;label=63;break;
 case 18: 
 var $67$0 = ___cxa_find_matching_catch(); var $67$1 = tempRet0;
 var $68=(($5+4)|0);
 var $69=$68;
 var $70=(tempValue=HEAP32[(($69)>>2)],HEAP32[(($69)>>2)]=tempValue+-1,tempValue);
 var $71=($70|0)==0;
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 var $73=$5;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+8)|0);
 var $77=HEAP32[(($76)>>2)];
 FUNCTION_TABLE[$77]($73);
 label=20;break;
 case 20: 
 ___resumeException($67$0)
 case 21: 
 var $__e_sroa_0_4;
 var $79=HEAP8[(($_0_ph36)>>0)];
 var $80=HEAP32[(($25)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=FUNCTION_TABLE[$82]($13,$79,0);
 var $84=(($83<<24)>>24)==37;
 if($84){label=22;break;}else{label=31;break;}
 case 22: 
 var $86=(($_0_ph36+1)|0);
 var $87=($86|0)==($__fmte|0);
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_4;label=63;break;
 case 24: 
 var $90=HEAP8[(($86)>>0)];
 var $91=HEAP32[(($25)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($13,$90,0);
 if((($94<<24)>>24)==69|(($94<<24)>>24)==48){ label=25;break;}else{var $__opt_0=0;var $__cmd_0=$94;var $_1=$86;label=28;break;}
 case 25: 
 var $96=(($_0_ph36+2)|0);
 var $97=($96|0)==($__fmte|0);
 if($97){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_4;label=63;break;
 case 27: 
 var $100=HEAP8[(($96)>>0)];
 var $101=HEAP32[(($25)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($13,$100,0);
 var $__opt_0=$94;var $__cmd_0=$104;var $_1=$96;label=28;break;
 case 28: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $106=HEAP32[(($29)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP32[(($30)>>2)]=$50;
 HEAP32[(($31)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$108]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $109=HEAP32[(($32)>>2)];
 var $110=(($_1+1)|0);
 var $_0_ph_be=$110;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$109;label=29;break;
 case 29: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $111=($_0_ph_be|0)==($__fmte|0);
 if($111){var $_pre_i_i_i4=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=63;break;}else{label=30;break;}
 case 30: 
 var $_pre37_pre=HEAP32[(($__err)>>2)];
 var $_0_ph36=$_0_ph_be;var $_pre37=$_pre37_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=7;break;
 case 31: 
 var $113=HEAP8[(($_0_ph36)>>0)];
 var $isascii1_i=(($113<<24)>>24)>-1;
 if($isascii1_i){label=32;break;}else{label=54;break;}
 case 32: 
 var $114=(($113<<24)>>24);
 var $115=HEAP32[(($27)>>2)];
 var $116=(($115+($114<<1))|0);
 var $117=HEAP16[(($116)>>1)];
 var $118=$117&8192;
 var $119=(($118<<16)>>16)==0;
 if($119){label=54;break;}else{var $_0_pn=$_0_ph36;label=33;break;}
 case 33: 
 var $_0_pn;
 var $_2=(($_0_pn+1)|0);
 var $120=($_2|0)==($__fmte|0);
 if($120){var $_2_lcssa=$__fmte;label=36;break;}else{label=34;break;}
 case 34: 
 var $122=HEAP8[(($_2)>>0)];
 var $isascii1_i1=(($122<<24)>>24)>-1;
 if($isascii1_i1){label=35;break;}else{var $_2_lcssa=$_2;label=36;break;}
 case 35: 
 var $123=(($122<<24)>>24);
 var $124=(($115+($123<<1))|0);
 var $125=HEAP16[(($124)>>1)];
 var $126=$125&8192;
 var $127=(($126<<16)>>16)==0;
 if($127){var $_2_lcssa=$_2;label=36;break;}else{var $_0_pn=$_2;label=33;break;}
 case 36: 
 var $_2_lcssa;
 var $_pre_i_i_i13=$50;var $128=$__e_sroa_0_4;var $_pre_i2_i_i17=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=37;break;
 case 37: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i2_i_i17;
 var $128;
 var $_pre_i_i_i13;
 var $129=($_pre_i_i_i13|0)==0;
 if($129){var $142=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=40;break;}else{label=38;break;}
 case 38: 
 var $131=(($_pre_i_i_i13+12)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($_pre_i_i_i13+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($132|0)==($134|0);
 if($135){label=39;break;}else{var $142=$_pre_i_i_i13;var $__b_sroa_0_5=$__b_sroa_0_4;label=40;break;}
 case 39: 
 var $136=$_pre_i_i_i13;
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=FUNCTION_TABLE[$139]($_pre_i_i_i13);
 var $141=($140|0)==-1;
 var $___b_sroa_0_4=($141?0:$__b_sroa_0_4);
 var $__pre_i_i_i13=($141?0:$_pre_i_i_i13);
 var $142=$__pre_i_i_i13;var $__b_sroa_0_5=$___b_sroa_0_4;label=40;break;
 case 40: 
 var $__b_sroa_0_5;
 var $142;
 var $143=($142|0)==0;
 var $144=($128|0)==0;
 if($144){var $_pre_i2_i_i1739=$_pre_i2_i_i17;var $__e_sroa_0_7=$__e_sroa_0_6;label=44;break;}else{label=41;break;}
 case 41: 
 var $146=(($128+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($128+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($147|0)==($149|0);
 if($150){label=43;break;}else{label=42;break;}
 case 42: 
 if($143){var $159=$128;var $_pre_i2_i_i1738=$_pre_i2_i_i17;var $__e_sroa_0_8=$__e_sroa_0_6;label=46;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 43: 
 var $151=$128;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+36)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=FUNCTION_TABLE[$154]($128);
 var $156=($155|0)==-1;
 if($156){var $_pre_i2_i_i1739=0;var $__e_sroa_0_7=0;label=44;break;}else{label=45;break;}
 case 44: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i1739;
 if($143){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}else{var $159=0;var $_pre_i2_i_i1738=$_pre_i2_i_i1739;var $__e_sroa_0_8=$__e_sroa_0_7;label=46;break;}
 case 45: 
 var $157=($_pre_i2_i_i17|0)==0;
 var $tmp_i_i19=$143^$157;
 if($tmp_i_i19){var $159=$_pre_i2_i_i17;var $_pre_i2_i_i1738=$_pre_i2_i_i17;var $__e_sroa_0_8=$__e_sroa_0_6;label=46;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 46: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i1738;
 var $159;
 var $160=(($142+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($142+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=47;break;}else{label=48;break;}
 case 47: 
 var $166=$142;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($142);
 var $extract_t_i=(($170)&255);
 var $_0_i_off0_i=$extract_t_i;label=49;break;
 case 48: 
 var $172=HEAP8[(($161)>>0)];
 var $_0_i_off0_i=$172;label=49;break;
 case 49: 
 var $_0_i_off0_i;
 var $isascii1_i20=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i20){label=50;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 50: 
 var $173=(($_0_i_off0_i<<24)>>24);
 var $174=HEAP32[(($27)>>2)];
 var $175=(($174+($173<<1))|0);
 var $176=HEAP16[(($175)>>1)];
 var $177=$176&8192;
 var $178=(($177<<16)>>16)==0;
 if($178){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}else{label=51;break;}
 case 51: 
 var $180=HEAP32[(($160)>>2)];
 var $181=HEAP32[(($162)>>2)];
 var $182=($180|0)==($181|0);
 if($182){label=52;break;}else{label=53;break;}
 case 52: 
 var $184=$142;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+40)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($142);
 var $_pre_i_i_i13=$142;var $128=$159;var $_pre_i2_i_i17=$_pre_i2_i_i1738;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=37;break;
 case 53: 
 var $190=(($180+1)|0);
 HEAP32[(($160)>>2)]=$190;
 var $_pre_i_i_i13=$142;var $128=$159;var $_pre_i2_i_i17=$_pre_i2_i_i1738;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=37;break;
 case 54: 
 var $191=(($50+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($50+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($192|0)==($194|0);
 if($195){label=55;break;}else{label=56;break;}
 case 55: 
 var $197=$50;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+36)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=FUNCTION_TABLE[$200]($50);
 var $extract_t_i22=(($201)&255);
 var $_0_i_off0_i23=$extract_t_i22;label=57;break;
 case 56: 
 var $203=HEAP8[(($192)>>0)];
 var $_0_i_off0_i23=$203;label=57;break;
 case 57: 
 var $_0_i_off0_i23;
 var $204=HEAP32[(($28)>>2)];
 var $205=(($204+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($13,$_0_i_off0_i23);
 var $208=HEAP8[(($_0_ph36)>>0)];
 var $209=HEAP32[(($28)>>2)];
 var $210=(($209+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($13,$208);
 var $213=(($207<<24)>>24)==(($212<<24)>>24);
 if($213){label=58;break;}else{label=62;break;}
 case 58: 
 var $215=HEAP32[(($191)>>2)];
 var $216=HEAP32[(($193)>>2)];
 var $217=($215|0)==($216|0);
 if($217){label=59;break;}else{label=60;break;}
 case 59: 
 var $219=$50;
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+40)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=FUNCTION_TABLE[$222]($50);
 label=61;break;
 case 60: 
 var $225=(($215+1)|0);
 HEAP32[(($191)>>2)]=$225;
 label=61;break;
 case 61: 
 var $226=(($_0_ph36+1)|0);
 var $_0_ph_be=$226;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=29;break;
 case 62: 
 HEAP32[(($__err)>>2)]=4;
 var $34=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=8;break;
 case 63: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i4;
 var $227=($_pre_i_i_i4|0)==0;
 if($227){var $240=0;label=66;break;}else{label=64;break;}
 case 64: 
 var $229=(($_pre_i_i_i4+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($_pre_i_i_i4+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($230|0)==($232|0);
 if($233){label=65;break;}else{var $240=$_pre_i_i_i4;label=66;break;}
 case 65: 
 var $234=$_pre_i_i_i4;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=FUNCTION_TABLE[$237]($_pre_i_i_i4);
 var $239=($238|0)==-1;
 var $__pre_i_i_i4=($239?0:$_pre_i_i_i4);
 var $240=$__pre_i_i_i4;label=66;break;
 case 66: 
 var $240;
 var $241=($240|0)==0;
 var $242=($__e_sroa_0_10|0)==0;
 if($242){label=70;break;}else{label=67;break;}
 case 67: 
 var $244=(($__e_sroa_0_10+12)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($__e_sroa_0_10+16)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($245|0)==($247|0);
 if($248){label=68;break;}else{label=69;break;}
 case 68: 
 var $249=$__e_sroa_0_10;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+36)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=FUNCTION_TABLE[$252]($__e_sroa_0_10);
 var $254=($253|0)==-1;
 if($254){label=70;break;}else{label=69;break;}
 case 69: 
 if($241){label=72;break;}else{label=71;break;}
 case 70: 
 if($241){label=71;break;}else{label=72;break;}
 case 71: 
 var $256=HEAP32[(($__err)>>2)];
 var $257=$256|2;
 HEAP32[(($__err)>>2)]=$257;
 label=72;break;
 case 72: 
 var $259=(($agg_result)|0);
 HEAP32[(($259)>>2)]=$240;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,12872,12880);
 STACKTOP=sp;return;
}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[(($11)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $26=$19;var $25=$17;label=4;break;
 case 3: 
 var $21=$6;
 var $22=(($21+1)|0);
 var $23=($12&255);
 var $24=$23>>>1;
 var $26=$24;var $25=$22;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=(($25+$26)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$25,$27);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+24)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($1);
 var $6=(($5+168)|0);
 var $7=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$5,$6,$__ct,$__err,0);
 var $8=$7;
 var $9=$5;
 var $10=((($8)-($9))|0);
 var $11=($10|0)<168;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(((($10|0))/(12))&-1);
 var $14=(((($13|0))%(7))&-1);
 HEAP32[(($__w)>>2)]=$14;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+16)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($6+288)|0);
 var $8=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$6,$7,$__ct,$__err,0);
 var $9=$8;
 var $10=$6;
 var $11=((($9)-($10))|0);
 var $12=($11|0)<288;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=(((($11|0))/(12))&-1);
 var $15=(((($14|0))%(12))&-1);
 HEAP32[(($__m)>>2)]=$15;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+20)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,4);
 var $2=HEAP32[(($__err)>>2)];
 var $3=$2&4;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=($1|0)<69;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=((($1)+(2000))|0);
 var $__t_0=$8;label=5;break;
 case 4: 
 var $_off=((($1)-(69))|0);
 var $10=($_off>>>0)<31;
 var $11=((($1)+(1900))|0);
 var $_=($10?$11:$1);
 var $__t_0=$_;label=5;break;
 case 5: 
 var $__t_0;
 var $13=((($__t_0)-(1900))|0);
 HEAP32[(($__y)>>2)]=$13;
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($12+8)|0);
 var $17=$_idx;
 var $_idx_val=HEAP32[(($17)>>2)];
 var $_idx50=(($12+12)|0);
 var $18=$_idx50;
 var $_idx50_val=HEAP32[(($18)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx50_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$19;
 var $21=(($12+4)|0);
 var $22=$21;
 var $23=(tempValue=HEAP32[(($22)>>2)],HEAP32[(($22)>>2)]=tempValue+-1,tempValue);
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$12;
 var $27=$12;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($26);
 label=5;break;
 case 5: 
 var $31=(($__fmt<<24)>>24);
 switch(($31|0)){case 98:case 66:case 104:{ label=10;break;}case 99:{ label=11;break;}case 100:case 101:{ label=15;break;}case 68:{ label=18;break;}case 70:{ label=19;break;}case 72:{ label=20;break;}case 73:{ label=23;break;}case 106:{ label=26;break;}case 109:{ label=29;break;}case 77:{ label=32;break;}case 110:case 116:{ label=35;break;}case 112:{ label=66;break;}case 114:{ label=80;break;}case 82:{ label=81;break;}case 83:{ label=82;break;}case 84:{ label=85;break;}case 119:{ label=86;break;}case 120:{ label=89;break;}case 97:case 65:{ label=9;break;}case 88:{ label=90;break;}case 121:{ label=94;break;}case 89:{ label=95;break;}case 37:{ label=97;break;}default:{label=127;break;}}break;
 case 6: 
 var $33$0 = ___cxa_find_matching_catch(); var $33$1 = tempRet0;
 var $34=(($12+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$12;
 var $40=$12;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=8;break;
 case 8: 
 ___resumeException($33$0)
 case 9: 
 var $45=(($__tm+24)|0);
 var $46=(($__e)|0);
 var $47=HEAP32[(($46)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$45,$__b,$47,$__err,$20);
 label=128;break;
 case 10: 
 var $49=(($__tm+16)|0);
 var $50=(($__e)|0);
 var $51=HEAP32[(($50)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$49,$__b,$51,$__err,$20);
 label=128;break;
 case 11: 
 var $53=(($this+8)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($53);
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($__e)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$58;
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=13;break;}else{label=12;break;}
 case 12: 
 var $68=(($58+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($58+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $78=$71;var $77=$69;label=14;break;
 case 13: 
 var $73=$58;
 var $74=(($73+1)|0);
 var $75=($64&255);
 var $76=$75>>>1;
 var $78=$76;var $77=$74;label=14;break;
 case 14: 
 var $77;
 var $78;
 var $79=(($77+$78)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$60,$62,$__iob,$__err,$__tm,$77,$79);
 var $80=(($2)|0);
 var $81=HEAP32[(($80)>>2)];
 HEAP32[(($59)>>2)]=$81;
 label=128;break;
 case 15: 
 var $83=(($__e)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$84,$__err,$20,2);
 var $86=HEAP32[(($__err)>>2)];
 var $87=$86&4;
 var $88=($87|0)==0;
 var $89=($85|0)>0;
 var $or_cond_i=$88&$89;
 var $90=($85|0)<32;
 var $or_cond3_i=$or_cond_i&$90;
 if($or_cond3_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $92=(($__tm+12)|0);
 HEAP32[(($92)>>2)]=$85;
 label=128;break;
 case 17: 
 var $94=$86|4;
 HEAP32[(($__err)>>2)]=$94;
 label=128;break;
 case 18: 
 var $96=(($__b)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$97,$99,$__iob,$__err,$__tm,12864,12872);
 var $100=(($3)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($96)>>2)]=$101;
 label=128;break;
 case 19: 
 var $103=(($__b)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($__e)|0);
 var $106=HEAP32[(($105)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$104,$106,$__iob,$__err,$__tm,12856,12864);
 var $107=(($4)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP32[(($103)>>2)]=$108;
 label=128;break;
 case 20: 
 var $110=(($__e)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$111,$__err,$20,2);
 var $113=HEAP32[(($__err)>>2)];
 var $114=$113&4;
 var $115=($114|0)==0;
 var $116=($112|0)<24;
 var $or_cond_i8=$115&$116;
 if($or_cond_i8){label=21;break;}else{label=22;break;}
 case 21: 
 var $118=(($__tm+8)|0);
 HEAP32[(($118)>>2)]=$112;
 label=128;break;
 case 22: 
 var $120=$113|4;
 HEAP32[(($__err)>>2)]=$120;
 label=128;break;
 case 23: 
 var $122=(($__e)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$123,$__err,$20,2);
 var $125=HEAP32[(($__err)>>2)];
 var $126=$125&4;
 var $127=($126|0)==0;
 var $128=($124|0)>0;
 var $or_cond_i11=$127&$128;
 var $129=($124|0)<13;
 var $or_cond3_i12=$or_cond_i11&$129;
 if($or_cond3_i12){label=24;break;}else{label=25;break;}
 case 24: 
 var $131=(($__tm+8)|0);
 HEAP32[(($131)>>2)]=$124;
 label=128;break;
 case 25: 
 var $133=$125|4;
 HEAP32[(($__err)>>2)]=$133;
 label=128;break;
 case 26: 
 var $135=(($__e)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$136,$__err,$20,3);
 var $138=HEAP32[(($__err)>>2)];
 var $139=$138&4;
 var $140=($139|0)==0;
 var $141=($137|0)<366;
 var $or_cond_i15=$140&$141;
 if($or_cond_i15){label=27;break;}else{label=28;break;}
 case 27: 
 var $143=(($__tm+28)|0);
 HEAP32[(($143)>>2)]=$137;
 label=128;break;
 case 28: 
 var $145=$138|4;
 HEAP32[(($__err)>>2)]=$145;
 label=128;break;
 case 29: 
 var $147=(($__e)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$148,$__err,$20,2);
 var $150=HEAP32[(($__err)>>2)];
 var $151=$150&4;
 var $152=($151|0)==0;
 var $153=($149|0)<13;
 var $or_cond_i18=$152&$153;
 if($or_cond_i18){label=30;break;}else{label=31;break;}
 case 30: 
 var $155=(($__tm+16)|0);
 var $156=((($149)-(1))|0);
 HEAP32[(($155)>>2)]=$156;
 label=128;break;
 case 31: 
 var $158=$150|4;
 HEAP32[(($__err)>>2)]=$158;
 label=128;break;
 case 32: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$161,$__err,$20,2);
 var $163=HEAP32[(($__err)>>2)];
 var $164=$163&4;
 var $165=($164|0)==0;
 var $166=($162|0)<60;
 var $or_cond_i21=$165&$166;
 if($or_cond_i21){label=33;break;}else{label=34;break;}
 case 33: 
 var $168=(($__tm+4)|0);
 HEAP32[(($168)>>2)]=$162;
 label=128;break;
 case 34: 
 var $170=$163|4;
 HEAP32[(($__err)>>2)]=$170;
 label=128;break;
 case 35: 
 var $172=(($__e)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($__b)|0);
 var $175=(($19+8)|0);
 var $176=$175;
 var $_sroa_082_0=$173;label=36;break;
 case 36: 
 var $_sroa_082_0;
 var $177=HEAP32[(($174)>>2)];
 var $178=($177|0)==0;
 if($178){var $192=0;label=41;break;}else{label=37;break;}
 case 37: 
 var $180=(($177+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($177+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=38;break;}else{var $192=$177;label=41;break;}
 case 38: 
 var $185=$177;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=FUNCTION_TABLE[$188]($177);
 var $190=($189|0)==-1;
 if($190){label=40;break;}else{label=39;break;}
 case 39: 
 var $_pre_i_i_i_i26=HEAP32[(($174)>>2)];
 var $192=$_pre_i_i_i_i26;label=41;break;
 case 40: 
 HEAP32[(($174)>>2)]=0;
 var $192=0;label=41;break;
 case 41: 
 var $192;
 var $193=($192|0)==0;
 var $194=($_sroa_082_0|0)==0;
 if($194){label=45;break;}else{label=42;break;}
 case 42: 
 var $196=(($_sroa_082_0+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($_sroa_082_0+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($197|0)==($199|0);
 if($200){label=44;break;}else{label=43;break;}
 case 43: 
 if($193){var $_sroa_082_2=$_sroa_082_0;label=47;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_0;label=55;break;}
 case 44: 
 var $201=$_sroa_082_0;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($_sroa_082_0);
 var $206=($205|0)==-1;
 if($206){label=45;break;}else{label=46;break;}
 case 45: 
 if($193){var $_pre_i2_i_i6_i=0;label=55;break;}else{var $_sroa_082_2=0;label=47;break;}
 case 46: 
 if($193){var $_sroa_082_2=$_sroa_082_0;label=47;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_0;label=55;break;}
 case 47: 
 var $_sroa_082_2;
 var $208=HEAP32[(($174)>>2)];
 var $209=(($208+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($208+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=48;break;}else{label=49;break;}
 case 48: 
 var $215=$208;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($208);
 var $extract_t_i_i30=(($219)&255);
 var $_0_i_off0_i_i31=$extract_t_i_i30;label=50;break;
 case 49: 
 var $221=HEAP8[(($210)>>0)];
 var $_0_i_off0_i_i31=$221;label=50;break;
 case 50: 
 var $_0_i_off0_i_i31;
 var $isascii1_i_i=(($_0_i_off0_i_i31<<24)>>24)>-1;
 if($isascii1_i_i){label=51;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_2;label=55;break;}
 case 51: 
 var $222=(($_0_i_off0_i_i31<<24)>>24);
 var $223=HEAP32[(($176)>>2)];
 var $224=(($223+($222<<1))|0);
 var $225=HEAP16[(($224)>>1)];
 var $226=$225&8192;
 var $227=(($226<<16)>>16)==0;
 if($227){var $_pre_i2_i_i6_i=$_sroa_082_2;label=55;break;}else{label=52;break;}
 case 52: 
 var $229=HEAP32[(($174)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+16)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($231|0)==($233|0);
 if($234){label=53;break;}else{label=54;break;}
 case 53: 
 var $236=$229;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+40)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=FUNCTION_TABLE[$239]($229);
 var $_sroa_082_0=$_sroa_082_2;label=36;break;
 case 54: 
 var $242=(($231+1)|0);
 HEAP32[(($230)>>2)]=$242;
 var $_sroa_082_0=$_sroa_082_2;label=36;break;
 case 55: 
 var $_pre_i2_i_i6_i;
 var $243=HEAP32[(($174)>>2)];
 var $244=($243|0)==0;
 if($244){var $258=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $246=(($243+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($243+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=57;break;}else{var $258=$243;label=60;break;}
 case 57: 
 var $251=$243;
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+36)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=FUNCTION_TABLE[$254]($243);
 var $256=($255|0)==-1;
 if($256){label=59;break;}else{label=58;break;}
 case 58: 
 var $_pre_i_i_i2_i34=HEAP32[(($174)>>2)];
 var $258=$_pre_i_i_i2_i34;label=60;break;
 case 59: 
 HEAP32[(($174)>>2)]=0;
 var $258=0;label=60;break;
 case 60: 
 var $258;
 var $259=($258|0)==0;
 var $260=($_pre_i2_i_i6_i|0)==0;
 if($260){label=64;break;}else{label=61;break;}
 case 61: 
 var $262=(($_pre_i2_i_i6_i+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($_pre_i2_i_i6_i+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=62;break;}else{label=63;break;}
 case 62: 
 var $267=$_pre_i2_i_i6_i;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=FUNCTION_TABLE[$270]($_pre_i2_i_i6_i);
 var $272=($271|0)==-1;
 if($272){label=64;break;}else{label=63;break;}
 case 63: 
 if($259){label=128;break;}else{label=65;break;}
 case 64: 
 if($259){label=65;break;}else{label=128;break;}
 case 65: 
 var $274=HEAP32[(($__err)>>2)];
 var $275=$274|2;
 HEAP32[(($__err)>>2)]=$275;
 label=128;break;
 case 66: 
 var $277=(($__tm+8)|0);
 var $278=(($__e)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($this+8)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=(($282+8)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=FUNCTION_TABLE[$284]($280);
 var $286=$285;
 var $287=HEAP8[(($286)>>0)];
 var $288=$287&1;
 var $289=(($288<<24)>>24)==0;
 if($289){label=68;break;}else{label=67;break;}
 case 67: 
 var $291=(($285+4)|0);
 var $292=HEAP32[(($291)>>2)];
 var $296=$292;label=69;break;
 case 68: 
 var $294=($287&255);
 var $295=$294>>>1;
 var $296=$295;label=69;break;
 case 69: 
 var $296;
 var $297=(($285+12)|0);
 var $298=$297;
 var $299=HEAP8[(($298)>>0)];
 var $300=$299&1;
 var $301=(($300<<24)>>24)==0;
 if($301){label=71;break;}else{label=70;break;}
 case 70: 
 var $303=(($285+16)|0);
 var $304=HEAP32[(($303)>>2)];
 var $308=$304;label=72;break;
 case 71: 
 var $306=($299&255);
 var $307=$306>>>1;
 var $308=$307;label=72;break;
 case 72: 
 var $308;
 var $309=(((-$308))|0);
 var $310=($296|0)==($309|0);
 if($310){label=73;break;}else{label=74;break;}
 case 73: 
 var $312=HEAP32[(($__err)>>2)];
 var $313=$312|4;
 HEAP32[(($__err)>>2)]=$313;
 label=128;break;
 case 74: 
 var $315=(($285+24)|0);
 var $316=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$279,$285,$315,$20,$__err,0);
 var $317=$316;
 var $318=$285;
 var $319=((($317)-($318))|0);
 var $320=($316|0)==($285|0);
 if($320){label=75;break;}else{label=77;break;}
 case 75: 
 var $322=HEAP32[(($277)>>2)];
 var $323=($322|0)==12;
 if($323){label=76;break;}else{label=77;break;}
 case 76: 
 HEAP32[(($277)>>2)]=0;
 label=128;break;
 case 77: 
 var $326=($319|0)==12;
 if($326){label=78;break;}else{label=128;break;}
 case 78: 
 var $328=HEAP32[(($277)>>2)];
 var $329=($328|0)<12;
 if($329){label=79;break;}else{label=128;break;}
 case 79: 
 var $331=((($328)+(12))|0);
 HEAP32[(($277)>>2)]=$331;
 label=128;break;
 case 80: 
 var $333=(($__b)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($__e)|0);
 var $336=HEAP32[(($335)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$334,$336,$__iob,$__err,$__tm,12840,12851);
 var $337=(($5)|0);
 var $338=HEAP32[(($337)>>2)];
 HEAP32[(($333)>>2)]=$338;
 label=128;break;
 case 81: 
 var $340=(($__b)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$341,$343,$__iob,$__err,$__tm,12832,12837);
 var $344=(($6)|0);
 var $345=HEAP32[(($344)>>2)];
 HEAP32[(($340)>>2)]=$345;
 label=128;break;
 case 82: 
 var $347=(($__e)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$348,$__err,$20,2);
 var $350=HEAP32[(($__err)>>2)];
 var $351=$350&4;
 var $352=($351|0)==0;
 var $353=($349|0)<61;
 var $or_cond_i44=$352&$353;
 if($or_cond_i44){label=83;break;}else{label=84;break;}
 case 83: 
 var $355=(($__tm)|0);
 HEAP32[(($355)>>2)]=$349;
 label=128;break;
 case 84: 
 var $357=$350|4;
 HEAP32[(($__err)>>2)]=$357;
 label=128;break;
 case 85: 
 var $359=(($__b)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($__e)|0);
 var $362=HEAP32[(($361)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($7,$this,$360,$362,$__iob,$__err,$__tm,12824,12832);
 var $363=(($7)|0);
 var $364=HEAP32[(($363)>>2)];
 HEAP32[(($359)>>2)]=$364;
 label=128;break;
 case 86: 
 var $366=(($__e)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$367,$__err,$20,1);
 var $369=HEAP32[(($__err)>>2)];
 var $370=$369&4;
 var $371=($370|0)==0;
 var $372=($368|0)<7;
 var $or_cond_i47=$371&$372;
 if($or_cond_i47){label=87;break;}else{label=88;break;}
 case 87: 
 var $374=(($__tm+24)|0);
 HEAP32[(($374)>>2)]=$368;
 label=128;break;
 case 88: 
 var $376=$369|4;
 HEAP32[(($__err)>>2)]=$376;
 label=128;break;
 case 89: 
 var $378=$this;
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+20)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($__b)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=(($8)|0);
 HEAP32[(($384)>>2)]=$383;
 var $385=(($__e)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($9)|0);
 HEAP32[(($387)>>2)]=$386;
 FUNCTION_TABLE[$381]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=129;break;
 case 90: 
 var $389=(($this+8)|0);
 var $390=$389;
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+24)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=FUNCTION_TABLE[$393]($389);
 var $395=(($__b)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=(($__e)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=$394;
 var $400=HEAP8[(($399)>>0)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 if($402){label=92;break;}else{label=91;break;}
 case 91: 
 var $404=(($394+8)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=(($394+4)|0);
 var $407=HEAP32[(($406)>>2)];
 var $414=$407;var $413=$405;label=93;break;
 case 92: 
 var $409=$394;
 var $410=(($409+1)|0);
 var $411=($400&255);
 var $412=$411>>>1;
 var $414=$412;var $413=$410;label=93;break;
 case 93: 
 var $413;
 var $414;
 var $415=(($413+$414)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($10,$this,$396,$398,$__iob,$__err,$__tm,$413,$415);
 var $416=(($10)|0);
 var $417=HEAP32[(($416)>>2)];
 HEAP32[(($395)>>2)]=$417;
 label=128;break;
 case 94: 
 var $419=(($__tm+20)|0);
 var $420=(($__e)|0);
 var $421=HEAP32[(($420)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($419,$__b,$421,$__err,$20);
 label=128;break;
 case 95: 
 var $423=(($__e)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$424,$__err,$20,4);
 var $426=HEAP32[(($__err)>>2)];
 var $427=$426&4;
 var $428=($427|0)==0;
 if($428){label=96;break;}else{label=128;break;}
 case 96: 
 var $430=(($__tm+20)|0);
 var $431=((($425)-(1900))|0);
 HEAP32[(($430)>>2)]=$431;
 label=128;break;
 case 97: 
 var $433=(($__e)|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=(($__b)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($436|0)==0;
 if($437){var $451=0;label=102;break;}else{label=98;break;}
 case 98: 
 var $439=(($436+12)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($436+16)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=($440|0)==($442|0);
 if($443){label=99;break;}else{var $451=$436;label=102;break;}
 case 99: 
 var $444=$436;
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+36)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=FUNCTION_TABLE[$447]($436);
 var $449=($448|0)==-1;
 if($449){label=101;break;}else{label=100;break;}
 case 100: 
 var $_pre_i_i_i_i=HEAP32[(($435)>>2)];
 var $451=$_pre_i_i_i_i;label=102;break;
 case 101: 
 HEAP32[(($435)>>2)]=0;
 var $451=0;label=102;break;
 case 102: 
 var $451;
 var $452=($451|0)==0;
 var $453=($434|0)==0;
 if($453){label=106;break;}else{label=103;break;}
 case 103: 
 var $455=(($434+12)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($434+16)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($456|0)==($458|0);
 if($459){label=104;break;}else{label=105;break;}
 case 104: 
 var $460=$434;
 var $461=HEAP32[(($460)>>2)];
 var $462=(($461+36)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=FUNCTION_TABLE[$463]($434);
 var $465=($464|0)==-1;
 if($465){label=106;break;}else{label=105;break;}
 case 105: 
 if($452){var $_pre_i2_i_i611_i=$434;label=108;break;}else{label=107;break;}
 case 106: 
 if($452){label=107;break;}else{var $_pre_i2_i_i611_i=0;label=108;break;}
 case 107: 
 var $467=HEAP32[(($__err)>>2)];
 var $468=$467|6;
 HEAP32[(($__err)>>2)]=$468;
 label=128;break;
 case 108: 
 var $_pre_i2_i_i611_i;
 var $470=HEAP32[(($435)>>2)];
 var $471=(($470+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($470+16)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($472|0)==($474|0);
 if($475){label=109;break;}else{label=110;break;}
 case 109: 
 var $477=$470;
 var $478=HEAP32[(($477)>>2)];
 var $479=(($478+36)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=FUNCTION_TABLE[$480]($470);
 var $extract_t_i_i=(($481)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=111;break;
 case 110: 
 var $483=HEAP8[(($472)>>0)];
 var $_0_i_off0_i_i=$483;label=111;break;
 case 111: 
 var $_0_i_off0_i_i;
 var $484=$19;
 var $485=HEAP32[(($484)>>2)];
 var $486=(($485+36)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=FUNCTION_TABLE[$487]($20,$_0_i_off0_i_i,0);
 var $489=(($488<<24)>>24)==37;
 if($489){label=113;break;}else{label=112;break;}
 case 112: 
 var $491=HEAP32[(($__err)>>2)];
 var $492=$491|4;
 HEAP32[(($__err)>>2)]=$492;
 label=128;break;
 case 113: 
 var $494=HEAP32[(($435)>>2)];
 var $495=(($494+12)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($494+16)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($496|0)==($498|0);
 if($499){label=114;break;}else{label=115;break;}
 case 114: 
 var $501=$494;
 var $502=HEAP32[(($501)>>2)];
 var $503=(($502+40)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=FUNCTION_TABLE[$504]($494);
 var $_pre_i=HEAP32[(($435)>>2)];
 var $508=$_pre_i;label=116;break;
 case 115: 
 var $507=(($496+1)|0);
 HEAP32[(($495)>>2)]=$507;
 var $508=$494;label=116;break;
 case 116: 
 var $508;
 var $509=($508|0)==0;
 if($509){var $523=0;label=121;break;}else{label=117;break;}
 case 117: 
 var $511=(($508+12)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($508+16)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($512|0)==($514|0);
 if($515){label=118;break;}else{var $523=$508;label=121;break;}
 case 118: 
 var $516=$508;
 var $517=HEAP32[(($516)>>2)];
 var $518=(($517+36)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=FUNCTION_TABLE[$519]($508);
 var $521=($520|0)==-1;
 if($521){label=120;break;}else{label=119;break;}
 case 119: 
 var $_pre_i_i_i2_i=HEAP32[(($435)>>2)];
 var $523=$_pre_i_i_i2_i;label=121;break;
 case 120: 
 HEAP32[(($435)>>2)]=0;
 var $523=0;label=121;break;
 case 121: 
 var $523;
 var $524=($523|0)==0;
 var $525=($_pre_i2_i_i611_i|0)==0;
 if($525){label=125;break;}else{label=122;break;}
 case 122: 
 var $527=(($_pre_i2_i_i611_i+12)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(($_pre_i2_i_i611_i+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($528|0)==($530|0);
 if($531){label=123;break;}else{label=124;break;}
 case 123: 
 var $532=$_pre_i2_i_i611_i;
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533+36)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=FUNCTION_TABLE[$535]($_pre_i2_i_i611_i);
 var $537=($536|0)==-1;
 if($537){label=125;break;}else{label=124;break;}
 case 124: 
 if($524){label=128;break;}else{label=126;break;}
 case 125: 
 if($524){label=126;break;}else{label=128;break;}
 case 126: 
 var $539=HEAP32[(($__err)>>2)];
 var $540=$539|2;
 HEAP32[(($__err)>>2)]=$540;
 label=128;break;
 case 127: 
 var $542=HEAP32[(($__err)>>2)];
 var $543=$542|4;
 HEAP32[(($__err)>>2)]=$543;
 label=128;break;
 case 128: 
 var $544=(($__b)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=(($agg_result)|0);
 HEAP32[(($546)>>2)]=$545;
 label=129;break;
 case 129: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=22;break; }
 case 2: 
 var $_idx=(($5+8)|0);
 var $10=$_idx;
 var $_idx_val=HEAP32[(($10)>>2)];
 var $_idx3=(($5+12)|0);
 var $11=$_idx3;
 var $_idx3_val=HEAP32[(($11)>>2)];
 var $12=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $13=$12;
 var $14=(($5+4)|0);
 var $15=$14;
 var $16=(tempValue=HEAP32[(($15)>>2)],HEAP32[(($15)>>2)]=tempValue+-1,tempValue);
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$5;
 var $20=$5;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 FUNCTION_TABLE[$23]($19);
 label=5;break;
 case 5: 
 HEAP32[(($__err)>>2)]=0;
 var $24=($__fmtb|0)==($__fmte|0);
 if($24){var $_pre_i_i_i18=$__b_0;var $__e_sroa_0_10=$__e_0;label=67;break;}else{label=6;break;}
 case 6: 
 var $25=$12;
 var $26=$12;
 var $27=$12;
 var $28=$this;
 var $29=(($2)|0);
 var $30=(($3)|0);
 var $31=(($1)|0);
 var $_0_ph40=$__fmtb;var $_pre41=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=7;break;
 case 7: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre41;
 var $_0_ph40;
 var $33=$_pre41;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=8;break;
 case 8: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $33;
 var $34=($33|0)==0;
 if($34){label=9;break;}else{var $_pre_i_i_i18=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=67;break;}
 case 9: 
 var $36=($__b_sroa_0_1|0)==0;
 if($36){var $53=1;var $52=0;var $__b_sroa_0_2=0;label=14;break;}else{label=10;break;}
 case 10: 
 var $38=(($__b_sroa_0_1+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($__b_sroa_0_1+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $44=$__b_sroa_0_1;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($__b_sroa_0_1);
 var $_0_i_i_i_i=$48;label=13;break;
 case 12: 
 var $50=HEAP32[(($39)>>2)];
 var $_0_i_i_i_i=$50;label=13;break;
 case 13: 
 var $_0_i_i_i_i;
 var $51=($_0_i_i_i_i|0)==-1;
 var $___b_sroa_0_1=($51?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($51?0:$__b_sroa_0_1);
 var $_=($51?1:0);
 var $53=$_;var $52=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=14;break;
 case 14: 
 var $__b_sroa_0_2;
 var $52;
 var $53;
 var $54=($__e_sroa_0_1|0)==0;
 if($54){label=19;break;}else{label=15;break;}
 case 15: 
 var $56=(($__e_sroa_0_1+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($__e_sroa_0_1+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=16;break;}else{label=17;break;}
 case 16: 
 var $62=$__e_sroa_0_1;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=FUNCTION_TABLE[$65]($__e_sroa_0_1);
 var $_0_i_i1_i_i=$66;label=18;break;
 case 17: 
 var $68=HEAP32[(($57)>>2)];
 var $_0_i_i1_i_i=$68;label=18;break;
 case 18: 
 var $_0_i_i1_i_i;
 var $69=($_0_i_i1_i_i|0)==-1;
 if($69){label=19;break;}else{label=20;break;}
 case 19: 
 if($53){var $__e_sroa_0_3=0;label=21;break;}else{var $__e_sroa_0_4=0;label=25;break;}
 case 20: 
 if($53){var $__e_sroa_0_4=$__e_sroa_0_1;label=25;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=21;break;}
 case 21: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_3;label=67;break;
 case 22: 
 var $72$0 = ___cxa_find_matching_catch(); var $72$1 = tempRet0;
 var $73=(($5+4)|0);
 var $74=$73;
 var $75=(tempValue=HEAP32[(($74)>>2)],HEAP32[(($74)>>2)]=tempValue+-1,tempValue);
 var $76=($75|0)==0;
 if($76){label=23;break;}else{label=24;break;}
 case 23: 
 var $78=$5;
 var $79=$5;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+8)|0);
 var $82=HEAP32[(($81)>>2)];
 FUNCTION_TABLE[$82]($78);
 label=24;break;
 case 24: 
 ___resumeException($72$0)
 case 25: 
 var $__e_sroa_0_4;
 var $84=HEAP32[(($_0_ph40)>>2)];
 var $85=HEAP32[(($25)>>2)];
 var $86=(($85+52)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($13,$84,0);
 var $89=(($88<<24)>>24)==37;
 if($89){label=26;break;}else{label=35;break;}
 case 26: 
 var $91=(($_0_ph40+4)|0);
 var $92=($91|0)==($__fmte|0);
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 28: 
 var $95=HEAP32[(($91)>>2)];
 var $96=HEAP32[(($25)>>2)];
 var $97=(($96+52)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($13,$95,0);
 if((($99<<24)>>24)==69|(($99<<24)>>24)==48){ label=29;break;}else{var $__opt_0=0;var $__cmd_0=$99;var $_1=$91;label=32;break;}
 case 29: 
 var $101=(($_0_ph40+8)|0);
 var $102=($101|0)==($__fmte|0);
 if($102){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 31: 
 var $105=HEAP32[(($101)>>2)];
 var $106=HEAP32[(($25)>>2)];
 var $107=(($106+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($13,$105,0);
 var $__opt_0=$99;var $__cmd_0=$109;var $_1=$101;label=32;break;
 case 32: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $111=HEAP32[(($28)>>2)];
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 HEAP32[(($29)>>2)]=$52;
 HEAP32[(($30)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$113]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $114=HEAP32[(($31)>>2)];
 var $115=(($_1+4)|0);
 var $_0_ph_be=$115;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$114;label=33;break;
 case 33: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $116=($_0_ph_be|0)==($__fmte|0);
 if($116){var $_pre_i_i_i18=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=67;break;}else{label=34;break;}
 case 34: 
 var $_pre41_pre=HEAP32[(($__err)>>2)];
 var $_0_ph40=$_0_ph_be;var $_pre41=$_pre41_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=7;break;
 case 35: 
 var $118=HEAP32[(($_0_ph40)>>2)];
 var $119=HEAP32[(($26)>>2)];
 var $120=(($119+12)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($13,8192,$118);
 if($122){var $_0_pn=$_0_ph40;label=36;break;}else{label=58;break;}
 case 36: 
 var $_0_pn;
 var $_2=(($_0_pn+4)|0);
 var $123=($_2|0)==($__fmte|0);
 if($123){var $_2_lcssa=$__fmte;label=38;break;}else{label=37;break;}
 case 37: 
 var $125=HEAP32[(($_2)>>2)];
 var $126=HEAP32[(($26)>>2)];
 var $127=(($126+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($13,8192,$125);
 if($129){var $_0_pn=$_2;label=36;break;}else{var $_2_lcssa=$_2;label=38;break;}
 case 38: 
 var $_2_lcssa;
 var $_pre_i_i_i3=$52;var $130=$__e_sroa_0_4;var $_pre_i3_i_i9=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=39;break;
 case 39: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i3_i_i9;
 var $130;
 var $_pre_i_i_i3;
 var $131=($_pre_i_i_i3|0)==0;
 if($131){var $148=1;var $147=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}else{label=40;break;}
 case 40: 
 var $133=(($_pre_i_i_i3+12)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($_pre_i_i_i3+16)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($134|0)==($136|0);
 if($137){label=41;break;}else{label=42;break;}
 case 41: 
 var $139=$_pre_i_i_i3;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+36)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=FUNCTION_TABLE[$142]($_pre_i_i_i3);
 var $_0_i_i_i_i1=$143;label=43;break;
 case 42: 
 var $145=HEAP32[(($134)>>2)];
 var $_0_i_i_i_i1=$145;label=43;break;
 case 43: 
 var $_0_i_i_i_i1;
 var $146=($_0_i_i_i_i1|0)==-1;
 var $___b_sroa_0_4=($146?0:$__b_sroa_0_4);
 var $__pre_i_i_i3=($146?0:$_pre_i_i_i3);
 var $_4=($146?1:0);
 var $148=$_4;var $147=$__pre_i_i_i3;var $__b_sroa_0_5=$___b_sroa_0_4;label=44;break;
 case 44: 
 var $__b_sroa_0_5;
 var $147;
 var $148;
 var $149=($130|0)==0;
 if($149){var $_pre_i3_i_i943=$_pre_i3_i_i9;var $__e_sroa_0_7=$__e_sroa_0_6;label=49;break;}else{label=45;break;}
 case 45: 
 var $151=(($130+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($130+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=46;break;}else{label=47;break;}
 case 46: 
 var $157=$130;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($130);
 var $_0_i_i1_i_i7=$161;label=48;break;
 case 47: 
 var $163=HEAP32[(($152)>>2)];
 var $_0_i_i1_i_i7=$163;label=48;break;
 case 48: 
 var $_0_i_i1_i_i7;
 var $164=($_0_i_i1_i_i7|0)==-1;
 if($164){var $_pre_i3_i_i943=0;var $__e_sroa_0_7=0;label=49;break;}else{label=50;break;}
 case 49: 
 var $__e_sroa_0_7;
 var $_pre_i3_i_i943;
 if($148){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{var $166=0;var $_pre_i3_i_i942=$_pre_i3_i_i943;var $__e_sroa_0_8=$__e_sroa_0_7;label=51;break;}
 case 50: 
 var $phitmp_i4_i_i10=($_pre_i3_i_i9|0)==0;
 var $tmp_i_i12=$148^$phitmp_i4_i_i10;
 if($tmp_i_i12){var $166=$_pre_i3_i_i9;var $_pre_i3_i_i942=$_pre_i3_i_i9;var $__e_sroa_0_8=$__e_sroa_0_6;label=51;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 51: 
 var $__e_sroa_0_8;
 var $_pre_i3_i_i942;
 var $166;
 var $167=(($147+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($147+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=52;break;}else{label=53;break;}
 case 52: 
 var $173=$147;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=FUNCTION_TABLE[$176]($147);
 var $_0_i_i=$177;label=54;break;
 case 53: 
 var $179=HEAP32[(($168)>>2)];
 var $_0_i_i=$179;label=54;break;
 case 54: 
 var $_0_i_i;
 var $180=HEAP32[(($26)>>2)];
 var $181=(($180+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=FUNCTION_TABLE[$182]($13,8192,$_0_i_i);
 if($183){label=55;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 55: 
 var $185=HEAP32[(($167)>>2)];
 var $186=HEAP32[(($169)>>2)];
 var $187=($185|0)==($186|0);
 if($187){label=56;break;}else{label=57;break;}
 case 56: 
 var $189=$147;
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+40)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=FUNCTION_TABLE[$192]($147);
 var $_pre_i_i_i3=$147;var $130=$166;var $_pre_i3_i_i9=$_pre_i3_i_i942;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=39;break;
 case 57: 
 var $195=(($185+4)|0);
 HEAP32[(($167)>>2)]=$195;
 var $_pre_i_i_i3=$147;var $130=$166;var $_pre_i3_i_i9=$_pre_i3_i_i942;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=39;break;
 case 58: 
 var $197=(($52+12)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($52+16)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($198|0)==($200|0);
 if($201){label=59;break;}else{label=60;break;}
 case 59: 
 var $203=$52;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+36)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($52);
 var $_0_i_i13=$207;label=61;break;
 case 60: 
 var $209=HEAP32[(($198)>>2)];
 var $_0_i_i13=$209;label=61;break;
 case 61: 
 var $_0_i_i13;
 var $210=HEAP32[(($27)>>2)];
 var $211=(($210+28)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=FUNCTION_TABLE[$212]($13,$_0_i_i13);
 var $214=HEAP32[(($_0_ph40)>>2)];
 var $215=HEAP32[(($27)>>2)];
 var $216=(($215+28)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=FUNCTION_TABLE[$217]($13,$214);
 var $219=($213|0)==($218|0);
 if($219){label=62;break;}else{label=66;break;}
 case 62: 
 var $221=HEAP32[(($197)>>2)];
 var $222=HEAP32[(($199)>>2)];
 var $223=($221|0)==($222|0);
 if($223){label=63;break;}else{label=64;break;}
 case 63: 
 var $225=$52;
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+40)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=FUNCTION_TABLE[$228]($52);
 label=65;break;
 case 64: 
 var $231=(($221+4)|0);
 HEAP32[(($197)>>2)]=$231;
 label=65;break;
 case 65: 
 var $232=(($_0_ph40+4)|0);
 var $_0_ph_be=$232;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=33;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $33=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=8;break;
 case 67: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i18;
 var $234=($_pre_i_i_i18|0)==0;
 if($234){var $251=1;var $250=0;label=72;break;}else{label=68;break;}
 case 68: 
 var $236=(($_pre_i_i_i18+12)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($_pre_i_i_i18+16)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($237|0)==($239|0);
 if($240){label=69;break;}else{label=70;break;}
 case 69: 
 var $242=$_pre_i_i_i18;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+36)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=FUNCTION_TABLE[$245]($_pre_i_i_i18);
 var $_0_i_i_i_i16=$246;label=71;break;
 case 70: 
 var $248=HEAP32[(($237)>>2)];
 var $_0_i_i_i_i16=$248;label=71;break;
 case 71: 
 var $_0_i_i_i_i16;
 var $249=($_0_i_i_i_i16|0)==-1;
 var $__pre_i_i_i18=($249?0:$_pre_i_i_i18);
 var $_5=($249?1:0);
 var $251=$_5;var $250=$__pre_i_i_i18;label=72;break;
 case 72: 
 var $250;
 var $251;
 var $252=($__e_sroa_0_10|0)==0;
 if($252){label=77;break;}else{label=73;break;}
 case 73: 
 var $254=(($__e_sroa_0_10+12)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(($__e_sroa_0_10+16)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($255|0)==($257|0);
 if($258){label=74;break;}else{label=75;break;}
 case 74: 
 var $260=$__e_sroa_0_10;
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+36)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=FUNCTION_TABLE[$263]($__e_sroa_0_10);
 var $_0_i_i1_i_i22=$264;label=76;break;
 case 75: 
 var $266=HEAP32[(($255)>>2)];
 var $_0_i_i1_i_i22=$266;label=76;break;
 case 76: 
 var $_0_i_i1_i_i22;
 var $267=($_0_i_i1_i_i22|0)==-1;
 if($267){label=77;break;}else{label=78;break;}
 case 77: 
 if($251){label=79;break;}else{label=80;break;}
 case 78: 
 if($251){label=80;break;}else{label=79;break;}
 case 79: 
 var $269=HEAP32[(($__err)>>2)];
 var $270=$269|2;
 HEAP32[(($__err)>>2)]=$270;
 label=80;break;
 case 80: 
 var $272=(($agg_result)|0);
 HEAP32[(($272)>>2)]=$250;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,12792,12824);
 STACKTOP=sp;return;
}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[(($11)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $25=$19;var $24=$17;label=4;break;
 case 3: 
 var $21=(($6+4)|0);
 var $22=($12&255);
 var $23=$22>>>1;
 var $25=$23;var $24=$21;label=4;break;
 case 4: 
 var $24;
 var $25;
 var $26=(($24+($25<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$24,$26);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+24)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($1);
 var $6=(($5+168)|0);
 var $7=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$5,$6,$__ct,$__err,0);
 var $8=$7;
 var $9=$5;
 var $10=((($8)-($9))|0);
 var $11=($10|0)<168;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(((($10|0))/(12))&-1);
 var $14=(((($13|0))%(7))&-1);
 HEAP32[(($__w)>>2)]=$14;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+16)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($6+288)|0);
 var $8=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$6,$7,$__ct,$__err,0);
 var $9=$8;
 var $10=$6;
 var $11=((($9)-($10))|0);
 var $12=($11|0)<288;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=(((($11|0))/(12))&-1);
 var $15=(((($14|0))%(12))&-1);
 HEAP32[(($__m)>>2)]=$15;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+20)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,4);
 var $2=HEAP32[(($__err)>>2)];
 var $3=$2&4;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=($1|0)<69;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=((($1)+(2000))|0);
 var $__t_0=$8;label=5;break;
 case 4: 
 var $_off=((($1)-(69))|0);
 var $10=($_off>>>0)<31;
 var $11=((($1)+(1900))|0);
 var $_=($10?$11:$1);
 var $__t_0=$_;label=5;break;
 case 5: 
 var $__t_0;
 var $13=((($__t_0)-(1900))|0);
 HEAP32[(($__y)>>2)]=$13;
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($12+8)|0);
 var $17=$_idx;
 var $_idx_val=HEAP32[(($17)>>2)];
 var $_idx55=(($12+12)|0);
 var $18=$_idx55;
 var $_idx55_val=HEAP32[(($18)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx55_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$19;
 var $21=(($12+4)|0);
 var $22=$21;
 var $23=(tempValue=HEAP32[(($22)>>2)],HEAP32[(($22)>>2)]=tempValue+-1,tempValue);
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$12;
 var $27=$12;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($26);
 label=5;break;
 case 5: 
 var $31=(($__fmt<<24)>>24);
 switch(($31|0)){case 98:case 66:case 104:{ label=10;break;}case 121:{ label=100;break;}case 89:{ label=101;break;}case 37:{ label=103;break;}case 99:{ label=11;break;}case 100:case 101:{ label=15;break;}case 68:{ label=18;break;}case 70:{ label=19;break;}case 72:{ label=20;break;}case 73:{ label=23;break;}case 106:{ label=26;break;}case 109:{ label=29;break;}case 77:{ label=32;break;}case 110:case 116:{ label=35;break;}case 112:{ label=72;break;}case 114:{ label=86;break;}case 82:{ label=87;break;}case 83:{ label=88;break;}case 97:case 65:{ label=9;break;}case 84:{ label=91;break;}case 119:{ label=92;break;}case 120:{ label=95;break;}case 88:{ label=96;break;}default:{label=141;break;}}break;
 case 6: 
 var $33$0 = ___cxa_find_matching_catch(); var $33$1 = tempRet0;
 var $34=(($12+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$12;
 var $40=$12;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=8;break;
 case 8: 
 ___resumeException($33$0)
 case 9: 
 var $45=(($__tm+24)|0);
 var $46=(($__e)|0);
 var $47=HEAP32[(($46)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$45,$__b,$47,$__err,$20);
 label=142;break;
 case 10: 
 var $49=(($__tm+16)|0);
 var $50=(($__e)|0);
 var $51=HEAP32[(($50)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$49,$__b,$51,$__err,$20);
 label=142;break;
 case 11: 
 var $53=(($this+8)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($53);
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($__e)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$58;
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=13;break;}else{label=12;break;}
 case 12: 
 var $68=(($58+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($58+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $77=$71;var $76=$69;label=14;break;
 case 13: 
 var $73=(($58+4)|0);
 var $74=($64&255);
 var $75=$74>>>1;
 var $77=$75;var $76=$73;label=14;break;
 case 14: 
 var $76;
 var $77;
 var $78=(($76+($77<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$60,$62,$__iob,$__err,$__tm,$76,$78);
 var $79=(($2)|0);
 var $80=HEAP32[(($79)>>2)];
 HEAP32[(($59)>>2)]=$80;
 label=142;break;
 case 15: 
 var $82=(($__e)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$83,$__err,$20,2);
 var $85=HEAP32[(($__err)>>2)];
 var $86=$85&4;
 var $87=($86|0)==0;
 var $88=($84|0)>0;
 var $or_cond_i=$87&$88;
 var $89=($84|0)<32;
 var $or_cond3_i=$or_cond_i&$89;
 if($or_cond3_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $91=(($__tm+12)|0);
 HEAP32[(($91)>>2)]=$84;
 label=142;break;
 case 17: 
 var $93=$85|4;
 HEAP32[(($__err)>>2)]=$93;
 label=142;break;
 case 18: 
 var $95=(($__b)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$96,$98,$__iob,$__err,$__tm,12760,12792);
 var $99=(($3)|0);
 var $100=HEAP32[(($99)>>2)];
 HEAP32[(($95)>>2)]=$100;
 label=142;break;
 case 19: 
 var $102=(($__b)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($__e)|0);
 var $105=HEAP32[(($104)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$103,$105,$__iob,$__err,$__tm,12728,12760);
 var $106=(($4)|0);
 var $107=HEAP32[(($106)>>2)];
 HEAP32[(($102)>>2)]=$107;
 label=142;break;
 case 20: 
 var $109=(($__e)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$110,$__err,$20,2);
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112&4;
 var $114=($113|0)==0;
 var $115=($111|0)<24;
 var $or_cond_i8=$114&$115;
 if($or_cond_i8){label=21;break;}else{label=22;break;}
 case 21: 
 var $117=(($__tm+8)|0);
 HEAP32[(($117)>>2)]=$111;
 label=142;break;
 case 22: 
 var $119=$112|4;
 HEAP32[(($__err)>>2)]=$119;
 label=142;break;
 case 23: 
 var $121=(($__e)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$122,$__err,$20,2);
 var $124=HEAP32[(($__err)>>2)];
 var $125=$124&4;
 var $126=($125|0)==0;
 var $127=($123|0)>0;
 var $or_cond_i11=$126&$127;
 var $128=($123|0)<13;
 var $or_cond3_i12=$or_cond_i11&$128;
 if($or_cond3_i12){label=24;break;}else{label=25;break;}
 case 24: 
 var $130=(($__tm+8)|0);
 HEAP32[(($130)>>2)]=$123;
 label=142;break;
 case 25: 
 var $132=$124|4;
 HEAP32[(($__err)>>2)]=$132;
 label=142;break;
 case 26: 
 var $134=(($__e)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$135,$__err,$20,3);
 var $137=HEAP32[(($__err)>>2)];
 var $138=$137&4;
 var $139=($138|0)==0;
 var $140=($136|0)<366;
 var $or_cond_i15=$139&$140;
 if($or_cond_i15){label=27;break;}else{label=28;break;}
 case 27: 
 var $142=(($__tm+28)|0);
 HEAP32[(($142)>>2)]=$136;
 label=142;break;
 case 28: 
 var $144=$137|4;
 HEAP32[(($__err)>>2)]=$144;
 label=142;break;
 case 29: 
 var $146=(($__e)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$147,$__err,$20,2);
 var $149=HEAP32[(($__err)>>2)];
 var $150=$149&4;
 var $151=($150|0)==0;
 var $152=($148|0)<13;
 var $or_cond_i18=$151&$152;
 if($or_cond_i18){label=30;break;}else{label=31;break;}
 case 30: 
 var $154=(($__tm+16)|0);
 var $155=((($148)-(1))|0);
 HEAP32[(($154)>>2)]=$155;
 label=142;break;
 case 31: 
 var $157=$149|4;
 HEAP32[(($__err)>>2)]=$157;
 label=142;break;
 case 32: 
 var $159=(($__e)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$160,$__err,$20,2);
 var $162=HEAP32[(($__err)>>2)];
 var $163=$162&4;
 var $164=($163|0)==0;
 var $165=($161|0)<60;
 var $or_cond_i21=$164&$165;
 if($or_cond_i21){label=33;break;}else{label=34;break;}
 case 33: 
 var $167=(($__tm+4)|0);
 HEAP32[(($167)>>2)]=$161;
 label=142;break;
 case 34: 
 var $169=$162|4;
 HEAP32[(($__err)>>2)]=$169;
 label=142;break;
 case 35: 
 var $171=(($__e)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($__b)|0);
 var $174=$19;
 var $_sroa_087_0=$172;label=36;break;
 case 36: 
 var $_sroa_087_0;
 var $175=HEAP32[(($173)>>2)];
 var $176=($175|0)==0;
 if($176){var $193=1;label=43;break;}else{label=37;break;}
 case 37: 
 var $178=(($175+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($175+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=38;break;}else{label=39;break;}
 case 38: 
 var $184=$175;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($175);
 var $_0_i_i_i_i_i25=$188;label=40;break;
 case 39: 
 var $190=HEAP32[(($179)>>2)];
 var $_0_i_i_i_i_i25=$190;label=40;break;
 case 40: 
 var $_0_i_i_i_i_i25;
 var $191=($_0_i_i_i_i_i25|0)==-1;
 if($191){label=42;break;}else{label=41;break;}
 case 41: 
 var $_pre_i_i_i_i27=HEAP32[(($173)>>2)];
 var $phitmp_i_i_i_i28=($_pre_i_i_i_i27|0)==0;
 var $193=$phitmp_i_i_i_i28;label=43;break;
 case 42: 
 HEAP32[(($173)>>2)]=0;
 var $193=1;label=43;break;
 case 43: 
 var $193;
 var $194=($_sroa_087_0|0)==0;
 if($194){label=48;break;}else{label=44;break;}
 case 44: 
 var $196=(($_sroa_087_0+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($_sroa_087_0+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($197|0)==($199|0);
 if($200){label=45;break;}else{label=46;break;}
 case 45: 
 var $202=$_sroa_087_0;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+36)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=FUNCTION_TABLE[$205]($_sroa_087_0);
 var $_0_i_i1_i_i_i31=$206;label=47;break;
 case 46: 
 var $208=HEAP32[(($197)>>2)];
 var $_0_i_i1_i_i_i31=$208;label=47;break;
 case 47: 
 var $_0_i_i1_i_i_i31;
 var $209=($_0_i_i1_i_i_i31|0)==-1;
 if($209){label=48;break;}else{label=49;break;}
 case 48: 
 if($193){var $_pre_i3_i_i9_i=0;label=57;break;}else{var $_sroa_087_2=0;label=50;break;}
 case 49: 
 if($193){var $_sroa_087_2=$_sroa_087_0;label=50;break;}else{var $_pre_i3_i_i9_i=$_sroa_087_0;label=57;break;}
 case 50: 
 var $_sroa_087_2;
 var $211=HEAP32[(($173)>>2)];
 var $212=(($211+12)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($211+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=($213|0)==($215|0);
 if($216){label=51;break;}else{label=52;break;}
 case 51: 
 var $218=$211;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+36)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($211);
 var $_0_i_i_i33=$222;label=53;break;
 case 52: 
 var $224=HEAP32[(($213)>>2)];
 var $_0_i_i_i33=$224;label=53;break;
 case 53: 
 var $_0_i_i_i33;
 var $225=HEAP32[(($174)>>2)];
 var $226=(($225+12)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=FUNCTION_TABLE[$227]($20,8192,$_0_i_i_i33);
 if($228){label=54;break;}else{var $_pre_i3_i_i9_i=$_sroa_087_2;label=57;break;}
 case 54: 
 var $230=HEAP32[(($173)>>2)];
 var $231=(($230+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($230+16)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($232|0)==($234|0);
 if($235){label=55;break;}else{label=56;break;}
 case 55: 
 var $237=$230;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($230);
 var $_sroa_087_0=$_sroa_087_2;label=36;break;
 case 56: 
 var $243=(($232+4)|0);
 HEAP32[(($231)>>2)]=$243;
 var $_sroa_087_0=$_sroa_087_2;label=36;break;
 case 57: 
 var $_pre_i3_i_i9_i;
 var $245=HEAP32[(($173)>>2)];
 var $246=($245|0)==0;
 if($246){var $263=1;label=64;break;}else{label=58;break;}
 case 58: 
 var $248=(($245+12)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($245+16)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($249|0)==($251|0);
 if($252){label=59;break;}else{label=60;break;}
 case 59: 
 var $254=$245;
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+36)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=FUNCTION_TABLE[$257]($245);
 var $_0_i_i_i_i1_i35=$258;label=61;break;
 case 60: 
 var $260=HEAP32[(($249)>>2)];
 var $_0_i_i_i_i1_i35=$260;label=61;break;
 case 61: 
 var $_0_i_i_i_i1_i35;
 var $261=($_0_i_i_i_i1_i35|0)==-1;
 if($261){label=63;break;}else{label=62;break;}
 case 62: 
 var $_pre_i_i_i3_i37=HEAP32[(($173)>>2)];
 var $phitmp_i_i_i4_i38=($_pre_i_i_i3_i37|0)==0;
 var $263=$phitmp_i_i_i4_i38;label=64;break;
 case 63: 
 HEAP32[(($173)>>2)]=0;
 var $263=1;label=64;break;
 case 64: 
 var $263;
 var $264=($_pre_i3_i_i9_i|0)==0;
 if($264){label=69;break;}else{label=65;break;}
 case 65: 
 var $266=(($_pre_i3_i_i9_i+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($_pre_i3_i_i9_i+16)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($267|0)==($269|0);
 if($270){label=66;break;}else{label=67;break;}
 case 66: 
 var $272=$_pre_i3_i_i9_i;
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+36)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=FUNCTION_TABLE[$275]($_pre_i3_i_i9_i);
 var $_0_i_i1_i_i7_i41=$276;label=68;break;
 case 67: 
 var $278=HEAP32[(($267)>>2)];
 var $_0_i_i1_i_i7_i41=$278;label=68;break;
 case 68: 
 var $_0_i_i1_i_i7_i41;
 var $279=($_0_i_i1_i_i7_i41|0)==-1;
 if($279){label=69;break;}else{label=70;break;}
 case 69: 
 if($263){label=71;break;}else{label=142;break;}
 case 70: 
 if($263){label=142;break;}else{label=71;break;}
 case 71: 
 var $281=HEAP32[(($__err)>>2)];
 var $282=$281|2;
 HEAP32[(($__err)>>2)]=$282;
 label=142;break;
 case 72: 
 var $284=(($__tm+8)|0);
 var $285=(($__e)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($this+8)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+8)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=FUNCTION_TABLE[$291]($287);
 var $293=$292;
 var $294=HEAP8[(($293)>>0)];
 var $295=$294&1;
 var $296=(($295<<24)>>24)==0;
 if($296){label=74;break;}else{label=73;break;}
 case 73: 
 var $298=(($292+4)|0);
 var $299=HEAP32[(($298)>>2)];
 var $303=$299;label=75;break;
 case 74: 
 var $301=($294&255);
 var $302=$301>>>1;
 var $303=$302;label=75;break;
 case 75: 
 var $303;
 var $304=(($292+12)|0);
 var $305=$304;
 var $306=HEAP8[(($305)>>0)];
 var $307=$306&1;
 var $308=(($307<<24)>>24)==0;
 if($308){label=77;break;}else{label=76;break;}
 case 76: 
 var $310=(($292+16)|0);
 var $311=HEAP32[(($310)>>2)];
 var $315=$311;label=78;break;
 case 77: 
 var $313=($306&255);
 var $314=$313>>>1;
 var $315=$314;label=78;break;
 case 78: 
 var $315;
 var $316=(((-$315))|0);
 var $317=($303|0)==($316|0);
 if($317){label=79;break;}else{label=80;break;}
 case 79: 
 var $319=HEAP32[(($__err)>>2)];
 var $320=$319|4;
 HEAP32[(($__err)>>2)]=$320;
 label=142;break;
 case 80: 
 var $322=(($292+24)|0);
 var $323=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$286,$292,$322,$20,$__err,0);
 var $324=$323;
 var $325=$292;
 var $326=((($324)-($325))|0);
 var $327=($323|0)==($292|0);
 if($327){label=81;break;}else{label=83;break;}
 case 81: 
 var $329=HEAP32[(($284)>>2)];
 var $330=($329|0)==12;
 if($330){label=82;break;}else{label=83;break;}
 case 82: 
 HEAP32[(($284)>>2)]=0;
 label=142;break;
 case 83: 
 var $333=($326|0)==12;
 if($333){label=84;break;}else{label=142;break;}
 case 84: 
 var $335=HEAP32[(($284)>>2)];
 var $336=($335|0)<12;
 if($336){label=85;break;}else{label=142;break;}
 case 85: 
 var $338=((($335)+(12))|0);
 HEAP32[(($284)>>2)]=$338;
 label=142;break;
 case 86: 
 var $340=(($__b)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$341,$343,$__iob,$__err,$__tm,12680,12724);
 var $344=(($5)|0);
 var $345=HEAP32[(($344)>>2)];
 HEAP32[(($340)>>2)]=$345;
 label=142;break;
 case 87: 
 var $347=(($__b)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($__e)|0);
 var $350=HEAP32[(($349)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$348,$350,$__iob,$__err,$__tm,12656,12676);
 var $351=(($6)|0);
 var $352=HEAP32[(($351)>>2)];
 HEAP32[(($347)>>2)]=$352;
 label=142;break;
 case 88: 
 var $354=(($__e)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$355,$__err,$20,2);
 var $357=HEAP32[(($__err)>>2)];
 var $358=$357&4;
 var $359=($358|0)==0;
 var $360=($356|0)<61;
 var $or_cond_i49=$359&$360;
 if($or_cond_i49){label=89;break;}else{label=90;break;}
 case 89: 
 var $362=(($__tm)|0);
 HEAP32[(($362)>>2)]=$356;
 label=142;break;
 case 90: 
 var $364=$357|4;
 HEAP32[(($__err)>>2)]=$364;
 label=142;break;
 case 91: 
 var $366=(($__b)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($__e)|0);
 var $369=HEAP32[(($368)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($7,$this,$367,$369,$__iob,$__err,$__tm,12624,12656);
 var $370=(($7)|0);
 var $371=HEAP32[(($370)>>2)];
 HEAP32[(($366)>>2)]=$371;
 label=142;break;
 case 92: 
 var $373=(($__e)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$374,$__err,$20,1);
 var $376=HEAP32[(($__err)>>2)];
 var $377=$376&4;
 var $378=($377|0)==0;
 var $379=($375|0)<7;
 var $or_cond_i52=$378&$379;
 if($or_cond_i52){label=93;break;}else{label=94;break;}
 case 93: 
 var $381=(($__tm+24)|0);
 HEAP32[(($381)>>2)]=$375;
 label=142;break;
 case 94: 
 var $383=$376|4;
 HEAP32[(($__err)>>2)]=$383;
 label=142;break;
 case 95: 
 var $385=$this;
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+20)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=(($__b)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(($8)|0);
 HEAP32[(($391)>>2)]=$390;
 var $392=(($__e)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=(($9)|0);
 HEAP32[(($394)>>2)]=$393;
 FUNCTION_TABLE[$388]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=143;break;
 case 96: 
 var $396=(($this+8)|0);
 var $397=$396;
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398+24)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=FUNCTION_TABLE[$400]($396);
 var $402=(($__b)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($__e)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=$401;
 var $407=HEAP8[(($406)>>0)];
 var $408=$407&1;
 var $409=(($408<<24)>>24)==0;
 if($409){label=98;break;}else{label=97;break;}
 case 97: 
 var $411=(($401+8)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($401+4)|0);
 var $414=HEAP32[(($413)>>2)];
 var $420=$414;var $419=$412;label=99;break;
 case 98: 
 var $416=(($401+4)|0);
 var $417=($407&255);
 var $418=$417>>>1;
 var $420=$418;var $419=$416;label=99;break;
 case 99: 
 var $419;
 var $420;
 var $421=(($419+($420<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($10,$this,$403,$405,$__iob,$__err,$__tm,$419,$421);
 var $422=(($10)|0);
 var $423=HEAP32[(($422)>>2)];
 HEAP32[(($402)>>2)]=$423;
 label=142;break;
 case 100: 
 var $425=(($__tm+20)|0);
 var $426=(($__e)|0);
 var $427=HEAP32[(($426)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($425,$__b,$427,$__err,$20);
 label=142;break;
 case 101: 
 var $429=(($__e)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$430,$__err,$20,4);
 var $432=HEAP32[(($__err)>>2)];
 var $433=$432&4;
 var $434=($433|0)==0;
 if($434){label=102;break;}else{label=142;break;}
 case 102: 
 var $436=(($__tm+20)|0);
 var $437=((($431)-(1900))|0);
 HEAP32[(($436)>>2)]=$437;
 label=142;break;
 case 103: 
 var $439=(($__e)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($__b)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=($442|0)==0;
 if($443){var $460=1;label=110;break;}else{label=104;break;}
 case 104: 
 var $445=(($442+12)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=(($442+16)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=($446|0)==($448|0);
 if($449){label=105;break;}else{label=106;break;}
 case 105: 
 var $451=$442;
 var $452=HEAP32[(($451)>>2)];
 var $453=(($452+36)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=FUNCTION_TABLE[$454]($442);
 var $_0_i_i_i_i_i=$455;label=107;break;
 case 106: 
 var $457=HEAP32[(($446)>>2)];
 var $_0_i_i_i_i_i=$457;label=107;break;
 case 107: 
 var $_0_i_i_i_i_i;
 var $458=($_0_i_i_i_i_i|0)==-1;
 if($458){label=109;break;}else{label=108;break;}
 case 108: 
 var $_pre_i_i_i_i=HEAP32[(($441)>>2)];
 var $phitmp_i_i_i_i=($_pre_i_i_i_i|0)==0;
 var $460=$phitmp_i_i_i_i;label=110;break;
 case 109: 
 HEAP32[(($441)>>2)]=0;
 var $460=1;label=110;break;
 case 110: 
 var $460;
 var $461=($440|0)==0;
 if($461){label=115;break;}else{label=111;break;}
 case 111: 
 var $463=(($440+12)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(($440+16)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=($464|0)==($466|0);
 if($467){label=112;break;}else{label=113;break;}
 case 112: 
 var $469=$440;
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+36)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=FUNCTION_TABLE[$472]($440);
 var $_0_i_i1_i_i_i=$473;label=114;break;
 case 113: 
 var $475=HEAP32[(($464)>>2)];
 var $_0_i_i1_i_i_i=$475;label=114;break;
 case 114: 
 var $_0_i_i1_i_i_i;
 var $476=($_0_i_i1_i_i_i|0)==-1;
 if($476){label=115;break;}else{label=116;break;}
 case 115: 
 if($460){label=117;break;}else{var $_pre_i3_i_i915_i=0;label=118;break;}
 case 116: 
 if($460){var $_pre_i3_i_i915_i=$440;label=118;break;}else{label=117;break;}
 case 117: 
 var $478=HEAP32[(($__err)>>2)];
 var $479=$478|6;
 HEAP32[(($__err)>>2)]=$479;
 label=142;break;
 case 118: 
 var $_pre_i3_i_i915_i;
 var $481=HEAP32[(($441)>>2)];
 var $482=(($481+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=(($481+16)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($483|0)==($485|0);
 if($486){label=119;break;}else{label=120;break;}
 case 119: 
 var $488=$481;
 var $489=HEAP32[(($488)>>2)];
 var $490=(($489+36)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=FUNCTION_TABLE[$491]($481);
 var $_0_i_i_i=$492;label=121;break;
 case 120: 
 var $494=HEAP32[(($483)>>2)];
 var $_0_i_i_i=$494;label=121;break;
 case 121: 
 var $_0_i_i_i;
 var $495=$19;
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+52)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=FUNCTION_TABLE[$498]($20,$_0_i_i_i,0);
 var $500=(($499<<24)>>24)==37;
 if($500){label=123;break;}else{label=122;break;}
 case 122: 
 var $502=HEAP32[(($__err)>>2)];
 var $503=$502|4;
 HEAP32[(($__err)>>2)]=$503;
 label=142;break;
 case 123: 
 var $505=HEAP32[(($441)>>2)];
 var $506=(($505+12)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(($505+16)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=($507|0)==($509|0);
 if($510){label=124;break;}else{label=125;break;}
 case 124: 
 var $512=$505;
 var $513=HEAP32[(($512)>>2)];
 var $514=(($513+40)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=FUNCTION_TABLE[$515]($505);
 var $_pre_i=HEAP32[(($441)>>2)];
 var $519=$_pre_i;label=126;break;
 case 125: 
 var $518=(($507+4)|0);
 HEAP32[(($506)>>2)]=$518;
 var $519=$505;label=126;break;
 case 126: 
 var $519;
 var $520=($519|0)==0;
 if($520){var $537=1;label=133;break;}else{label=127;break;}
 case 127: 
 var $522=(($519+12)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($519+16)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=($523|0)==($525|0);
 if($526){label=128;break;}else{label=129;break;}
 case 128: 
 var $528=$519;
 var $529=HEAP32[(($528)>>2)];
 var $530=(($529+36)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=FUNCTION_TABLE[$531]($519);
 var $_0_i_i_i_i1_i=$532;label=130;break;
 case 129: 
 var $534=HEAP32[(($523)>>2)];
 var $_0_i_i_i_i1_i=$534;label=130;break;
 case 130: 
 var $_0_i_i_i_i1_i;
 var $535=($_0_i_i_i_i1_i|0)==-1;
 if($535){label=132;break;}else{label=131;break;}
 case 131: 
 var $_pre_i_i_i3_i=HEAP32[(($441)>>2)];
 var $phitmp_i_i_i4_i=($_pre_i_i_i3_i|0)==0;
 var $537=$phitmp_i_i_i4_i;label=133;break;
 case 132: 
 HEAP32[(($441)>>2)]=0;
 var $537=1;label=133;break;
 case 133: 
 var $537;
 var $538=($_pre_i3_i_i915_i|0)==0;
 if($538){label=138;break;}else{label=134;break;}
 case 134: 
 var $540=(($_pre_i3_i_i915_i+12)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=(($_pre_i3_i_i915_i+16)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=($541|0)==($543|0);
 if($544){label=135;break;}else{label=136;break;}
 case 135: 
 var $546=$_pre_i3_i_i915_i;
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+36)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=FUNCTION_TABLE[$549]($_pre_i3_i_i915_i);
 var $_0_i_i1_i_i7_i=$550;label=137;break;
 case 136: 
 var $552=HEAP32[(($541)>>2)];
 var $_0_i_i1_i_i7_i=$552;label=137;break;
 case 137: 
 var $_0_i_i1_i_i7_i;
 var $553=($_0_i_i1_i_i7_i|0)==-1;
 if($553){label=138;break;}else{label=139;break;}
 case 138: 
 if($537){label=140;break;}else{label=142;break;}
 case 139: 
 if($537){label=142;break;}else{label=140;break;}
 case 140: 
 var $555=HEAP32[(($__err)>>2)];
 var $556=$555|2;
 HEAP32[(($__err)>>2)]=$556;
 label=142;break;
 case 141: 
 var $558=HEAP32[(($__err)>>2)];
 var $559=$558|4;
 HEAP32[(($__err)>>2)]=$559;
 label=142;break;
 case 142: 
 var $560=(($__b)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($agg_result)|0);
 HEAP32[(($562)>>2)]=$561;
 label=143;break;
 case 143: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 return;
}

//Func
function __ZNSt3__110__time_putD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $5=($2|0)==($3|0);
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 return;
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(104);
 var $3=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $4=(($__nar+100)|0);
 HEAP32[(($__ne)>>2)]=$4;
 var $5=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($5,$3,$__ne,$__tm,$__fmt,$__mod);
 var $6=HEAP32[(($__ne)>>2)];
 var $7=(($__s)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($3|0)==($6|0);
 if($9){var $30=$8;label=7;break;}else{var $_01_i_i=$3;var $10=$8;label=2;break;}
 case 2: 
 var $10;
 var $_01_i_i;
 var $11=HEAP8[(($_01_i_i)>>0)];
 var $12=($10|0)==0;
 if($12){var $27=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $14=(($10+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($10+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($15|0)==($17|0);
 if($18){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=(($15+1)|0);
 HEAP32[(($14)>>2)]=$19;
 HEAP8[(($15)>>0)]=$11;
 var $27=$10;label=6;break;
 case 5: 
 var $20=$10;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+52)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($11&255);
 var $25=FUNCTION_TABLE[$23]($10,$24);
 var $26=($25|0)==-1;
 var $__i=($26?0:$10);
 var $27=$__i;label=6;break;
 case 6: 
 var $27;
 var $28=(($_01_i_i+1)|0);
 var $29=($28|0)==($6|0);
 if($29){var $30=$27;label=7;break;}else{var $_01_i_i=$28;var $10=$27;label=2;break;}
 case 7: 
 var $30;
 var $31=(($agg_result)|0);
 HEAP32[(($31)>>2)]=$30;
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt=sp;
 var $1=(($fmt)|0);
 HEAP8[(($1)>>0)]=37;
 var $2=(($fmt+1)|0);
 HEAP8[(($2)>>0)]=$__fmt;
 var $3=(($fmt+2)|0);
 HEAP8[(($3)>>0)]=$__mod;
 var $4=(($fmt+3)|0);
 HEAP8[(($4)>>0)]=0;
 var $5=(($__mod<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[(($2)>>0)]=$__mod;
 HEAP8[(($3)>>0)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=HEAP32[(($__ne)>>2)];
 var $9=$8;
 var $10=$__nb;
 var $11=((($9)-($10))|0);
 var $12=(($this)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_strftime_l($__nb,$11,$1,$__tm,$13);
 var $15=(($__nb+$14)|0);
 HEAP32[(($__ne)>>2)]=$15;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}

//Func
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 return;
}

//Func
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar_i=sp;
 var $__ne_i=(sp)+(104);
 var $mb_i=(sp)+(112);
 var $__nb_i=(sp)+(120);
 var $__nar=(sp)+(128);
 var $3=$__nar;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $4=(($__nar)|0);
 var $5=(($this+8)|0);
 var $6=$__ne_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$mb_i;
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $8=$__nb_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i=$mb_i;
 var $9=(($__nar_i)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $10=(($__nar_i+100)|0);
 HEAP32[(($__ne_i)>>2)]=$10;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($5,$9,$__ne_i,$__tm,$__fmt,$__mod);
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $st$6$0=(($mb_i)|0);
 HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
 var $st$7$1=(($mb_i+4)|0);
 HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
 HEAP32[(($__nb_i)>>2)]=$9;
 var $11=(($5)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_uselocale($12);
 var $14=_mbsrtowcs($4,$__nb_i,100,$tmpcast_i);
 var $15=($13|0)==0;
 if($15){label=4;break;}else{label=2;break;}
 case 2: 
 var $17=(function() { try { __THREW__ = 0; return _uselocale($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $19$0 = ___cxa_find_matching_catch(0); var $19$1 = tempRet0;
 var $20=$19$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 4: 
 var $21=($14|0)==-1;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__121__throw_runtime_errorEPKc(4640);
 throw "Reached an unreachable!";
 case 6: 
 var $23=(($__nar+($14<<2))|0);
 var $$etemp$8$0=100;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $24=(($__s)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($14|0)==0;
 if($26){var $48=$25;label=13;break;}else{var $_01_i_i=$4;var $27=$25;label=7;break;}
 case 7: 
 var $27;
 var $_01_i_i;
 var $28=HEAP32[(($_01_i_i)>>2)];
 var $29=($27|0)==0;
 if($29){var $45=0;label=12;break;}else{label=8;break;}
 case 8: 
 var $31=(($27+24)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($27+28)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$27;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+52)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($27,$28);
 var $_0_i_i_i_i=$41;label=11;break;
 case 10: 
 var $43=(($32+4)|0);
 HEAP32[(($31)>>2)]=$43;
 HEAP32[(($32)>>2)]=$28;
 var $_0_i_i_i_i=$28;label=11;break;
 case 11: 
 var $_0_i_i_i_i;
 var $44=($_0_i_i_i_i|0)==-1;
 var $__i=($44?0:$27);
 var $45=$__i;label=12;break;
 case 12: 
 var $45;
 var $46=(($_01_i_i+4)|0);
 var $47=($46|0)==($23|0);
 if($47){var $48=$45;label=13;break;}else{var $_01_i_i=$46;var $27=$45;label=7;break;}
 case 13: 
 var $48;
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 var $$etemp$12$0=400;
 var $$etemp$12$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[(($3)>>0)]=45;
 var $4=(($2+2)|0);
 HEAP8[(($4)>>0)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[(($3)>>0)]=45;
 var $4=(($2+2)|0);
 HEAP8[(($4)>>0)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}

//Func
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}

//Func
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__wbuf=sp;
 var $__wb=(sp)+(104);
 var $__wn=(sp)+(112);
 var $__neg=(sp)+(120);
 var $__atoms=(sp)+(128);
 var $__nbuf=(sp)+(144);
 var $1=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=870;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx=(($6+8)|0);
 var $12=$_idx;
 var $_idx_val=HEAP32[(($12)>>2)];
 var $_idx5=(($6+12)|0);
 var $13=$_idx5;
 var $_idx5_val=HEAP32[(($13)>>2)];
 var $14=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx5_val,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $15=$14;
 HEAP8[(($__neg)>>0)]=0;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$17,$__intl,$7,$19,$__err,$__neg,$15,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 if($20){label=5;break;}else{label=24;break;}
 case 5: 
 var $23=(($__atoms)|0);
 var $24=$14;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($15,12608,12618,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $29=(($__nbuf)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $30=HEAP32[(($__wn)>>2)];
 var $31=HEAP32[(($2)>>2)];
 var $32=$30;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>98;
 if($35){label=7;break;}else{var $__nc_0=$29;var $54=0;label=13;break;}
 case 7: 
 var $36=((($34)+(2))|0);
 var $37=_malloc($36);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $__nc_0=$37;var $54=$37;label=13;break;}
 case 8: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $42$0 = ___cxa_find_matching_catch(); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=$42$1;
 var $_0=$43;var $_01=$44;label=45;break;
 case 11: 
 var $46$0 = ___cxa_find_matching_catch(); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=$46$1;
 var $_0=$47;var $_01=$48;label=45;break;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=$50$0;
 var $52=$50$1;
 _free($54);
 var $_0=$51;var $_01=$52;label=45;break;
 case 13: 
 var $54;
 var $__nc_0;
 var $55=HEAP8[(($__neg)>>0)];
 var $56=(($55<<24)>>24)==0;
 if($56){var $__nc_1=$__nc_0;label=15;break;}else{label=14;break;}
 case 14: 
 var $58=(($__nc_0+1)|0);
 HEAP8[(($__nc_0)>>0)]=45;
 var $__nc_1=$58;label=15;break;
 case 15: 
 var $__nc_1;
 var $60=($31>>>0)<($30>>>0);
 if($60){label=16;break;}else{var $__nc_2_lcssa=$__nc_1;label=21;break;}
 case 16: 
 var $61=(($__atoms+10)|0);
 var $62=$__atoms;
 var $__nc_27=$__nc_1;var $__w_08=$31;label=17;break;
 case 17: 
 var $__w_08;
 var $__nc_27;
 var $64=HEAP8[(($__w_08)>>0)];
 var $_01_i=$23;label=19;break;
 case 18: 
 var $66=($70|0)==($61|0);
 if($66){var $_0_lcssa_i=$61;label=20;break;}else{var $_01_i=$70;label=19;break;}
 case 19: 
 var $_01_i;
 var $68=HEAP8[(($_01_i)>>0)];
 var $69=(($68<<24)>>24)==(($64<<24)>>24);
 var $70=(($_01_i+1)|0);
 if($69){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $71=$_0_lcssa_i;
 var $72=((($71)-($62))|0);
 var $73=((12608+$72)|0);
 var $74=HEAP8[(($73)>>0)];
 HEAP8[(($__nc_27)>>0)]=$74;
 var $75=(($__w_08+1)|0);
 var $76=(($__nc_27+1)|0);
 var $77=HEAP32[(($__wn)>>2)];
 var $78=($75>>>0)<($77>>>0);
 if($78){var $__nc_27=$76;var $__w_08=$75;label=17;break;}else{var $__nc_2_lcssa=$76;label=21;break;}
 case 21: 
 var $__nc_2_lcssa;
 HEAP8[(($__nc_2_lcssa)>>0)]=0;
 var $79=_sscanf($29,3336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $80=($79|0)==1;
 if($80){label=23;break;}else{label=22;break;}
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(2696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=12;break; }
 case 23: 
 _free($54);
 label=24;break;
 case 24: 
 var $83=(($__b)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($84|0)==0;
 if($85){var $99=0;label=30;break;}else{label=25;break;}
 case 25: 
 var $87=(($84+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($84+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($88|0)==($90|0);
 if($91){label=26;break;}else{var $99=$84;label=30;break;}
 case 26: 
 var $92=$84;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+36)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=11;break; }
 case 27: 
 var $97=($96|0)==-1;
 if($97){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre_i_i_i=HEAP32[(($83)>>2)];
 var $99=$_pre_i_i_i;label=30;break;
 case 29: 
 HEAP32[(($83)>>2)]=0;
 var $99=0;label=30;break;
 case 30: 
 var $99;
 var $100=($99|0)==0;
 var $101=HEAP32[(($16)>>2)];
 var $102=($101|0)==0;
 if($102){label=36;break;}else{label=31;break;}
 case 31: 
 var $104=(($101+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($101+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 if($100){label=39;break;}else{label=38;break;}
 case 33: 
 var $109=$101;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=11;break; }
 case 34: 
 var $114=($113|0)==-1;
 if($114){label=35;break;}else{label=37;break;}
 case 35: 
 HEAP32[(($16)>>2)]=0;
 label=36;break;
 case 36: 
 if($100){label=38;break;}else{label=39;break;}
 case 37: 
 if($100){label=39;break;}else{label=38;break;}
 case 38: 
 var $117=HEAP32[(($__err)>>2)];
 var $118=$117|2;
 HEAP32[(($__err)>>2)]=$118;
 label=39;break;
 case 39: 
 var $120=HEAP32[(($83)>>2)];
 var $121=(($agg_result)|0);
 HEAP32[(($121)>>2)]=$120;
 var $122=(($6+4)|0);
 var $123=$122;
 var $124=(tempValue=HEAP32[(($123)>>2)],HEAP32[(($123)>>2)]=tempValue+-1,tempValue);
 var $125=($124|0)==0;
 if($125){label=40;break;}else{label=41;break;}
 case 40: 
 var $127=$6;
 var $128=$6;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+8)|0);
 var $131=HEAP32[(($130)>>2)];
 FUNCTION_TABLE[$131]($127);
 label=41;break;
 case 41: 
 var $132=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=42;break;}
 case 42: 
 var $135=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=43;break; }
 case 43: 
 var $137$0 = ___cxa_find_matching_catch(0); var $137$1 = tempRet0;
 var $138=$137$0;
 ___clang_call_terminate($138);
 throw "Reached an unreachable!";
 case 44: 
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 STACKTOP=sp;return;
 case 45: 
 var $_01;
 var $_0;
 var $140=(($6+4)|0);
 var $141=$140;
 var $142=(tempValue=HEAP32[(($141)>>2)],HEAP32[(($141)>>2)]=tempValue+-1,tempValue);
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=47;break;}
 case 46: 
 var $145=$6;
 var $146=$6;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+8)|0);
 var $149=HEAP32[(($148)>>2)];
 FUNCTION_TABLE[$149]($145);
 label=47;break;
 case 47: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $150=($_pre|0)==0;
 if($150){label=50;break;}else{label=48;break;}
 case 48: 
 var $_pre17=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre17]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $153$0 = ___cxa_find_matching_catch(0); var $153$1 = tempRet0;
 var $154=$153$0;
 ___clang_call_terminate($154);
 throw "Reached an unreachable!";
 case 50: 
 var $155$0=$_0;
 var $155$1=0;
 var $156$0=$155$0;
 var $156$1=$_01;
 ___resumeException($156$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}

//Func
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(24);
 var $4=(sp)+(40);
 var $5=(sp)+(56);
 var $6=(sp)+(72);
 var $7=(sp)+(80);
 var $8=(sp)+(96);
 var $9=(sp)+(112);
 var $10=(sp)+(128);
 var $11=(sp)+(144);
 var $__gbuf=(sp)+(152);
 var $__gb=(sp)+(552);
 var $__gn=(sp)+(560);
 var $__ge=(sp)+(568);
 var $__pat=(sp)+(576);
 var $__grp=(sp)+(584);
 var $__sym=(sp)+(600);
 var $__psn=(sp)+(616);
 var $__nsn=(sp)+(632);
 var $__spaces=(sp)+(648);
 var $__et=(sp)+(664);
 HEAP32[(($11)>>2)]=$__we;
 var $12=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $13=(($__gbuf)|0);
 var $14=(($__gb)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=(($__gb+4)|0);
 HEAP32[(($15)>>2)]=870;
 HEAP32[(($__gn)>>2)]=$13;
 var $16=(($__gbuf+400)|0);
 HEAP32[(($__ge)>>2)]=$16;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i13=$__sym;
 HEAP32[(($this2_i_i_i13)>>2)]=0; HEAP32[((($this2_i_i_i13)+(4))>>2)]=0; HEAP32[((($this2_i_i_i13)+(8))>>2)]=0;
 var $this2_i_i_i14=$__psn;
 HEAP32[(($this2_i_i_i14)>>2)]=0; HEAP32[((($this2_i_i_i14)+(4))>>2)]=0; HEAP32[((($this2_i_i_i14)+(8))>>2)]=0;
 var $this2_i_i_i16=$__nsn;
 HEAP32[(($this2_i_i_i16)>>2)]=0; HEAP32[((($this2_i_i_i16)+(4))>>2)]=0; HEAP32[((($this2_i_i_i16)+(8))>>2)]=0;
 var $this2_i_i_i19=$__spaces;
 HEAP32[(($this2_i_i_i19)>>2)]=0; HEAP32[((($this2_i_i_i19)+(4))>>2)]=0; HEAP32[((($this2_i_i_i19)+(8))>>2)]=0;
 var $17=$1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $18=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $19=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $20=$4;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $21=$5;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $22=$6;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $23=$7;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $24=$8;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $25=$9;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $26=$10;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 if($__intl){label=2;break;}else{label=32;break;}
 case 2: 
 var $tmpcast1_i=$1;
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(34296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=83;break; }
 case 3: 
 var $_idx33=(($__loc_0_0_val+8)|0);
 var $_idx33_val=HEAP32[(($_idx33)>>2)];
 var $_idx34=(($__loc_0_0_val+12)|0);
 var $_idx34_val=HEAP32[(($_idx34)>>2)];
 var $29=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx33_val,$_idx34_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=83;break; }
 case 4: 
 var $30=$29;
 var $31=$29;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+44)|0);
 var $34=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($tmpcast1_i,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=83;break; }
 case 5: 
 var $35=HEAP32[(($1)>>2)];
 HEAP32[(($__pat)>>2)]=$35;
 var $36=$29;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+32)|0);
 var $39=HEAP32[(($38)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($2,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=83;break; }
 case 6: 
 var $40=HEAP8[(($this2_i_i_i16)>>0)];
 var $41=$40&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=8;break;}else{label=7;break;}
 case 7: 
 var $44=(($__nsn+8)|0);
 var $45=HEAP32[(($44)>>2)];
 HEAP8[(($45)>>0)]=0;
 var $46=(($__nsn+4)|0);
 HEAP32[(($46)>>2)]=0;
 label=9;break;
 case 8: 
 var $48=$__nsn;
 var $49=(($48+1)|0);
 HEAP8[(($49)>>0)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=9;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(0); var $51$1 = tempRet0;
 var $52=$51$0;
 ___clang_call_terminate($52);
 throw "Reached an unreachable!";
 case 11: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $_pre3=HEAP32[(($36)>>2)];
 var $_phi_trans_insert=(($_pre3+28)|0);
 var $_pre4=HEAP32[(($_phi_trans_insert)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre4]($3,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=83;break; }
 case 12: 
 var $53=HEAP8[(($this2_i_i_i14)>>0)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=(($__psn+8)|0);
 var $58=HEAP32[(($57)>>2)];
 HEAP8[(($58)>>0)]=0;
 var $59=(($__psn+4)|0);
 HEAP32[(($59)>>2)]=0;
 label=15;break;
 case 14: 
 var $61=$__psn;
 var $62=(($61+1)|0);
 HEAP8[(($62)>>0)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $64$0 = ___cxa_find_matching_catch(0); var $64$1 = tempRet0;
 var $65=$64$0;
 ___clang_call_terminate($65);
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $_phi_trans_insert5=$29;
 var $_pre6=HEAP32[(($_phi_trans_insert5)>>2)];
 var $_phi_trans_insert7=(($_pre6+12)|0);
 var $_pre8=HEAP32[(($_phi_trans_insert7)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre8]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=83;break; }
 case 18: 
 var $67=HEAP32[(($_phi_trans_insert5)>>2)];
 var $68=(($67+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=83;break; }
 case 19: 
 var $71=HEAP32[(($36)>>2)];
 var $72=(($71+20)|0);
 var $73=HEAP32[(($72)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($4,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=83;break; }
 case 20: 
 var $74=HEAP8[(($this2_i_i_i)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=22;break;}else{label=21;break;}
 case 21: 
 var $78=(($__grp+8)|0);
 var $79=HEAP32[(($78)>>2)];
 HEAP8[(($79)>>0)]=0;
 var $80=(($__grp+4)|0);
 HEAP32[(($80)>>2)]=0;
 label=23;break;
 case 22: 
 var $82=$__grp;
 var $83=(($82+1)|0);
 HEAP8[(($83)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $85$0 = ___cxa_find_matching_catch(0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $_pre9=HEAP32[(($36)>>2)];
 var $_phi_trans_insert10=(($_pre9+24)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre11]($5,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=83;break; }
 case 26: 
 var $87=HEAP8[(($this2_i_i_i13)>>0)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=28;break;}else{label=27;break;}
 case 27: 
 var $91=(($__sym+8)|0);
 var $92=HEAP32[(($91)>>2)];
 HEAP8[(($92)>>0)]=0;
 var $93=(($__sym+4)|0);
 HEAP32[(($93)>>2)]=0;
 label=29;break;
 case 28: 
 var $95=$__sym;
 var $96=(($95+1)|0);
 HEAP8[(($96)>>0)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=29;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=30;break; }
 case 30: 
 var $98$0 = ___cxa_find_matching_catch(0); var $98$1 = tempRet0;
 var $99=$98$0;
 ___clang_call_terminate($99);
 throw "Reached an unreachable!";
 case 31: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $_phi_trans_insert12=$29;
 var $_pre13=HEAP32[(($_phi_trans_insert12)>>2)];
 var $_phi_trans_insert14=(($_pre13+36)|0);
 var $_pre15=HEAP32[(($_phi_trans_insert14)>>2)];
 var $100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre15]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$100;var $__ts_0=$70;var $__dp_0=$66;label=62;break; } else { label=83;break; }
 case 32: 
 var $tmpcast_i=$6;
 var $102=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(34304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=83;break; }
 case 33: 
 var $_idx=(($__loc_0_0_val+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx32=(($__loc_0_0_val+12)|0);
 var $_idx32_val=HEAP32[(($_idx32)>>2)];
 var $103=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx32_val,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=83;break; }
 case 34: 
 var $104=$103;
 var $105=$103;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($tmpcast_i,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=83;break; }
 case 35: 
 var $109=HEAP32[(($6)>>2)];
 HEAP32[(($__pat)>>2)]=$109;
 var $110=$103;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+32)|0);
 var $113=HEAP32[(($112)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($7,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=83;break; }
 case 36: 
 var $114=HEAP8[(($this2_i_i_i16)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=(($__nsn+8)|0);
 var $119=HEAP32[(($118)>>2)];
 HEAP8[(($119)>>0)]=0;
 var $120=(($__nsn+4)|0);
 HEAP32[(($120)>>2)]=0;
 label=39;break;
 case 38: 
 var $122=$__nsn;
 var $123=(($122+1)|0);
 HEAP8[(($123)>>0)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=39;break;
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $125$0 = ___cxa_find_matching_catch(0); var $125$1 = tempRet0;
 var $126=$125$0;
 ___clang_call_terminate($126);
 throw "Reached an unreachable!";
 case 41: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $_pre21=HEAP32[(($110)>>2)];
 var $_phi_trans_insert22=(($_pre21+28)|0);
 var $_pre23=HEAP32[(($_phi_trans_insert22)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre23]($8,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=83;break; }
 case 42: 
 var $127=HEAP8[(($this2_i_i_i14)>>0)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=44;break;}else{label=43;break;}
 case 43: 
 var $131=(($__psn+8)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP8[(($132)>>0)]=0;
 var $133=(($__psn+4)|0);
 HEAP32[(($133)>>2)]=0;
 label=45;break;
 case 44: 
 var $135=$__psn;
 var $136=(($135+1)|0);
 HEAP8[(($136)>>0)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=45;break;
 case 45: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=46;break; }
 case 46: 
 var $138$0 = ___cxa_find_matching_catch(0); var $138$1 = tempRet0;
 var $139=$138$0;
 ___clang_call_terminate($139);
 throw "Reached an unreachable!";
 case 47: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 HEAP32[(($24)>>2)]=0; HEAP32[((($24)+(4))>>2)]=0; HEAP32[((($24)+(8))>>2)]=0;
 var $_phi_trans_insert24=$103;
 var $_pre25=HEAP32[(($_phi_trans_insert24)>>2)];
 var $_phi_trans_insert26=(($_pre25+12)|0);
 var $_pre27=HEAP32[(($_phi_trans_insert26)>>2)];
 var $140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre27]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=83;break; }
 case 48: 
 var $141=HEAP32[(($_phi_trans_insert24)>>2)];
 var $142=(($141+16)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=83;break; }
 case 49: 
 var $145=HEAP32[(($110)>>2)];
 var $146=(($145+20)|0);
 var $147=HEAP32[(($146)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($9,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=83;break; }
 case 50: 
 var $148=HEAP8[(($this2_i_i_i)>>0)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=52;break;}else{label=51;break;}
 case 51: 
 var $152=(($__grp+8)|0);
 var $153=HEAP32[(($152)>>2)];
 HEAP8[(($153)>>0)]=0;
 var $154=(($__grp+4)|0);
 HEAP32[(($154)>>2)]=0;
 label=53;break;
 case 52: 
 var $156=$__grp;
 var $157=(($156+1)|0);
 HEAP8[(($157)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $159$0 = ___cxa_find_matching_catch(0); var $159$1 = tempRet0;
 var $160=$159$0;
 ___clang_call_terminate($160);
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0; HEAP32[((($25)+(8))>>2)]=0;
 var $_pre28=HEAP32[(($110)>>2)];
 var $_phi_trans_insert29=(($_pre28+24)|0);
 var $_pre30=HEAP32[(($_phi_trans_insert29)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre30]($10,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=83;break; }
 case 56: 
 var $161=HEAP8[(($this2_i_i_i13)>>0)];
 var $162=$161&1;
 var $163=(($162<<24)>>24)==0;
 if($163){label=58;break;}else{label=57;break;}
 case 57: 
 var $165=(($__sym+8)|0);
 var $166=HEAP32[(($165)>>2)];
 HEAP8[(($166)>>0)]=0;
 var $167=(($__sym+4)|0);
 HEAP32[(($167)>>2)]=0;
 label=59;break;
 case 58: 
 var $169=$__sym;
 var $170=(($169+1)|0);
 HEAP8[(($170)>>0)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=59;break;
 case 59: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=60;break; }
 case 60: 
 var $172$0 = ___cxa_find_matching_catch(0); var $172$1 = tempRet0;
 var $173=$172$0;
 ___clang_call_terminate($173);
 throw "Reached an unreachable!";
 case 61: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
 HEAP32[(($26)>>2)]=0; HEAP32[((($26)+(4))>>2)]=0; HEAP32[((($26)+(8))>>2)]=0;
 var $_phi_trans_insert31=$103;
 var $_pre32=HEAP32[(($_phi_trans_insert31)>>2)];
 var $_phi_trans_insert33=(($_pre32+36)|0);
 var $_pre34=HEAP32[(($_phi_trans_insert33)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre34]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$174;var $__ts_0=$144;var $__dp_0=$140;label=62;break; } else { label=83;break; }
 case 62: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $176=(($__wb)|0);
 var $177=HEAP32[(($176)>>2)];
 HEAP32[(($__wn)>>2)]=$177;
 var $178=(($__b)|0);
 var $179=$__pat;
 var $180=(($__ct+8)|0);
 var $181=$__nsn;
 var $182=(($181+1)|0);
 var $183=(($__nsn+4)|0);
 var $184=(($__nsn+8)|0);
 var $185=$__psn;
 var $186=(($185+1)|0);
 var $187=(($__psn+4)|0);
 var $188=(($__psn+8)|0);
 var $189=$__flags&512;
 var $190=($189|0)!=0;
 var $191=$__sym;
 var $192=(($191+1)|0);
 var $193=(($__sym+8)|0);
 var $194=(($__sym+4)|0);
 var $195=$__spaces;
 var $196=(($195+1)|0);
 var $197=(($__spaces+8)|0);
 var $198=(($__spaces+4)|0);
 var $199=(($179+3)|0);
 var $200=(($__grp+4)|0);
 var $__p_0241=0;var $__trailing_sign_0243=0;var $202=$13;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=63;break;
 case 63: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $202;
 var $__trailing_sign_0243;
 var $__p_0241;
 var $203=HEAP32[(($178)>>2)];
 var $204=($203|0)==0;
 if($204){var $218=0;label=69;break;}else{label=64;break;}
 case 64: 
 var $206=(($203+12)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($203+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($207|0)==($209|0);
 if($210){label=65;break;}else{var $218=$203;label=69;break;}
 case 65: 
 var $211=$203;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=82;break; }
 case 66: 
 var $216=($215|0)==-1;
 if($216){label=68;break;}else{label=67;break;}
 case 67: 
 var $_pre_i_i_i23=HEAP32[(($178)>>2)];
 var $218=$_pre_i_i_i23;label=69;break;
 case 68: 
 HEAP32[(($178)>>2)]=0;
 var $218=0;label=69;break;
 case 69: 
 var $218;
 var $219=($218|0)==0;
 var $220=($__e_sroa_0_0|0)==0;
 if($220){label=74;break;}else{label=70;break;}
 case 70: 
 var $222=(($__e_sroa_0_0+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($__e_sroa_0_0+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($223|0)==($225|0);
 if($226){label=72;break;}else{label=71;break;}
 case 71: 
 if($219){var $__e_sroa_0_2=$__e_sroa_0_0;label=76;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_0;label=352;break;}
 case 72: 
 var $227=$__e_sroa_0_0;
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+36)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$230]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=82;break; }
 case 73: 
 var $232=($231|0)==-1;
 if($232){label=74;break;}else{label=75;break;}
 case 74: 
 if($219){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=0;label=352;break;}else{var $__e_sroa_0_2=0;label=76;break;}
 case 75: 
 if($219){var $__e_sroa_0_2=$__e_sroa_0_0;label=76;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_0;label=352;break;}
 case 76: 
 var $__e_sroa_0_2;
 var $235=(($179+$__p_0241)|0);
 var $236=HEAP8[(($235)>>0)];
 var $237=(($236<<24)>>24);
 switch(($237|0)){case 0:{ label=111;break;}case 3:{ label=136;break;}case 2:{ label=205;break;}case 4:{ var $__ng_0=0;var $780=$__e_sroa_0_2;var $779=$202;var $_pre_i2_i_i150=$__e_sroa_0_2;var $__e_sroa_0_10=$__e_sroa_0_2;label=257;break;}case 1:{ label=98;break;}default:{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}}break;
 case 77: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=84;break;
 case 78: 
 var $lpad_loopexit212$0 = ___cxa_find_matching_catch(); var $lpad_loopexit212$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit212$1;var $lpad_phi$0=$lpad_loopexit212$0;label=84;break;
 case 79: 
 var $lpad_loopexit217$0 = ___cxa_find_matching_catch(); var $lpad_loopexit217$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit217$1;var $lpad_phi$0=$lpad_loopexit217$0;label=84;break;
 case 80: 
 var $lpad_loopexit219$0 = ___cxa_find_matching_catch(); var $lpad_loopexit219$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit219$1;var $lpad_phi$0=$lpad_loopexit219$0;label=84;break;
 case 81: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(); var $lpad_loopexit225$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit225$1;var $lpad_phi$0=$lpad_loopexit225$0;label=84;break;
 case 82: 
 var $lpad_loopexit227$0 = ___cxa_find_matching_catch(); var $lpad_loopexit227$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit227$1;var $lpad_phi$0=$lpad_loopexit227$0;label=84;break;
 case 83: 
 var $lpad_nonloopexit228$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit228$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit228$1;var $lpad_phi$0=$lpad_nonloopexit228$0;label=84;break;
 case 84: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $238=HEAP8[(($this2_i_i_i19)>>0)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=86;break;}else{label=85;break;}
 case 85: 
 var $242=(($__spaces+8)|0);
 var $243=HEAP32[(($242)>>2)];
 _free($243);
 label=86;break;
 case 86: 
 var $244=HEAP8[(($this2_i_i_i16)>>0)];
 var $245=$244&1;
 var $246=(($245<<24)>>24)==0;
 if($246){label=88;break;}else{label=87;break;}
 case 87: 
 var $248=(($__nsn+8)|0);
 var $249=HEAP32[(($248)>>2)];
 _free($249);
 label=88;break;
 case 88: 
 var $250=HEAP8[(($this2_i_i_i14)>>0)];
 var $251=$250&1;
 var $252=(($251<<24)>>24)==0;
 if($252){label=90;break;}else{label=89;break;}
 case 89: 
 var $254=(($__psn+8)|0);
 var $255=HEAP32[(($254)>>2)];
 _free($255);
 label=90;break;
 case 90: 
 var $256=HEAP8[(($this2_i_i_i13)>>0)];
 var $257=$256&1;
 var $258=(($257<<24)>>24)==0;
 if($258){label=92;break;}else{label=91;break;}
 case 91: 
 var $260=(($__sym+8)|0);
 var $261=HEAP32[(($260)>>2)];
 _free($261);
 label=92;break;
 case 92: 
 var $262=HEAP8[(($this2_i_i_i)>>0)];
 var $263=$262&1;
 var $264=(($263<<24)>>24)==0;
 if($264){label=94;break;}else{label=93;break;}
 case 93: 
 var $266=(($__grp+8)|0);
 var $267=HEAP32[(($266)>>2)];
 _free($267);
 label=94;break;
 case 94: 
 var $268=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $269=($268|0)==0;
 if($269){label=97;break;}else{label=95;break;}
 case 95: 
 var $271=HEAP32[(($15)>>2)];
 var $272=$268;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$271]($272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=96;break; }
 case 96: 
 var $274$0 = ___cxa_find_matching_catch(0); var $274$1 = tempRet0;
 var $275=$274$0;
 ___clang_call_terminate($275);
 throw "Reached an unreachable!";
 case 97: 
 ___resumeException($lpad_phi$0)
 case 98: 
 var $cond=($__p_0241|0)==3;
 if($cond){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_2;label=352;break;}else{label=99;break;}
 case 99: 
 var $278=HEAP32[(($178)>>2)];
 var $279=(($278+12)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($278+16)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($280|0)==($282|0);
 if($283){label=100;break;}else{label=102;break;}
 case 100: 
 var $285=$278;
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+36)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$288]($278) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=82;break; }
 case 101: 
 var $extract_t_i33=(($289)&255);
 var $_0_i_off0_i34=$extract_t_i33;label=103;break;
 case 102: 
 var $291=HEAP8[(($280)>>0)];
 var $_0_i_off0_i34=$291;label=103;break;
 case 103: 
 var $_0_i_off0_i34;
 var $isascii1_i=(($_0_i_off0_i34<<24)>>24)>-1;
 if($isascii1_i){label=104;break;}else{label=110;break;}
 case 104: 
 var $292=(($_0_i_off0_i34<<24)>>24);
 var $293=HEAP32[(($180)>>2)];
 var $294=(($293+($292<<1))|0);
 var $295=HEAP16[(($294)>>1)];
 var $296=$295&8192;
 var $297=(($296<<16)>>16)==0;
 if($297){label=110;break;}else{label=105;break;}
 case 105: 
 var $299=HEAP32[(($178)>>2)];
 var $300=(($299+12)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($299+16)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($301|0)==($303|0);
 if($304){label=106;break;}else{label=108;break;}
 case 106: 
 var $306=$299;
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307+40)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=82;break; }
 case 107: 
 var $extract_t_i37=(($310)&255);
 var $_0_i_off0_i38=$extract_t_i37;label=109;break;
 case 108: 
 var $312=(($301+1)|0);
 HEAP32[(($300)>>2)]=$312;
 var $313=HEAP8[(($301)>>0)];
 var $_0_i_off0_i38=$313;label=109;break;
 case 109: 
 var $_0_i_off0_i38;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=111;break; } else { label=82;break; }
 case 110: 
 var $314=HEAP32[(($__err)>>2)];
 var $315=$314|4;
 HEAP32[(($__err)>>2)]=$315;
 var $_0=0;label=385;break;
 case 111: 
 var $317=($__p_0241|0)==3;
 if($317){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_2;label=352;break;}else{var $318=$__e_sroa_0_2;var $_pre_i2_i_i45=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=112;break;}
 case 112: 
 var $__e_sroa_0_3;
 var $_pre_i2_i_i45;
 var $318;
 var $319=HEAP32[(($178)>>2)];
 var $320=($319|0)==0;
 if($320){var $334=0;label=118;break;}else{label=113;break;}
 case 113: 
 var $322=(($319+12)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=(($319+16)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=($323|0)==($325|0);
 if($326){label=114;break;}else{var $334=$319;label=118;break;}
 case 114: 
 var $327=$319;
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328+36)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$330]($319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=81;break; }
 case 115: 
 var $332=($331|0)==-1;
 if($332){label=117;break;}else{label=116;break;}
 case 116: 
 var $_pre_i_i_i41=HEAP32[(($178)>>2)];
 var $334=$_pre_i_i_i41;label=118;break;
 case 117: 
 HEAP32[(($178)>>2)]=0;
 var $334=0;label=118;break;
 case 118: 
 var $334;
 var $335=($334|0)==0;
 var $336=($318|0)==0;
 if($336){var $_pre_i2_i_i45249=$_pre_i2_i_i45;var $__e_sroa_0_4=$__e_sroa_0_3;label=123;break;}else{label=119;break;}
 case 119: 
 var $338=(($318+12)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($318+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($339|0)==($341|0);
 if($342){label=121;break;}else{label=120;break;}
 case 120: 
 if($335){var $352=$318;var $_pre_i2_i_i45251=$_pre_i2_i_i45;var $__e_sroa_0_5=$__e_sroa_0_3;label=125;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=351;break;}
 case 121: 
 var $343=$318;
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+36)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$346]($318) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=122;break; } else { label=81;break; }
 case 122: 
 var $348=($347|0)==-1;
 if($348){var $_pre_i2_i_i45249=0;var $__e_sroa_0_4=0;label=123;break;}else{label=124;break;}
 case 123: 
 var $__e_sroa_0_4;
 var $_pre_i2_i_i45249;
 if($335){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45249;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=351;break;}else{var $352=0;var $_pre_i2_i_i45251=$_pre_i2_i_i45249;var $__e_sroa_0_5=$__e_sroa_0_4;label=125;break;}
 case 124: 
 var $350=($_pre_i2_i_i45|0)==0;
 var $tmp_i_i47=$335^$350;
 if($tmp_i_i47){var $352=$_pre_i2_i_i45;var $_pre_i2_i_i45251=$_pre_i2_i_i45;var $__e_sroa_0_5=$__e_sroa_0_3;label=125;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=351;break;}
 case 125: 
 var $__e_sroa_0_5;
 var $_pre_i2_i_i45251;
 var $352;
 var $353=HEAP32[(($178)>>2)];
 var $354=(($353+12)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($353+16)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=($355|0)==($357|0);
 if($358){label=126;break;}else{label=128;break;}
 case 126: 
 var $360=$353;
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361+36)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$363]($353) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=81;break; }
 case 127: 
 var $extract_t_i51=(($364)&255);
 var $_0_i_off0_i52=$extract_t_i51;label=129;break;
 case 128: 
 var $366=HEAP8[(($355)>>0)];
 var $_0_i_off0_i52=$366;label=129;break;
 case 129: 
 var $_0_i_off0_i52;
 var $isascii1_i55=(($_0_i_off0_i52<<24)>>24)>-1;
 if($isascii1_i55){label=130;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45251;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=351;break;}
 case 130: 
 var $367=(($_0_i_off0_i52<<24)>>24);
 var $368=HEAP32[(($180)>>2)];
 var $369=(($368+($367<<1))|0);
 var $370=HEAP16[(($369)>>1)];
 var $371=$370&8192;
 var $372=(($371<<16)>>16)==0;
 if($372){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45251;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=351;break;}else{label=131;break;}
 case 131: 
 var $374=HEAP32[(($178)>>2)];
 var $375=(($374+12)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(($374+16)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=($376|0)==($378|0);
 if($379){label=132;break;}else{label=134;break;}
 case 132: 
 var $381=$374;
 var $382=HEAP32[(($381)>>2)];
 var $383=(($382+40)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$384]($374) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=81;break; }
 case 133: 
 var $extract_t_i57=(($385)&255);
 var $_0_i_off0_i59=$extract_t_i57;label=135;break;
 case 134: 
 var $387=(($376+1)|0);
 HEAP32[(($375)>>2)]=$387;
 var $388=HEAP8[(($376)>>0)];
 var $_0_i_off0_i59=$388;label=135;break;
 case 135: 
 var $_0_i_off0_i59;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $318=$352;var $_pre_i2_i_i45=$_pre_i2_i_i45251;var $__e_sroa_0_3=$__e_sroa_0_5;label=112;break; } else { label=81;break; }
 case 136: 
 var $390=HEAP8[(($this2_i_i_i14)>>0)];
 var $391=$390&1;
 var $392=(($391<<24)>>24)==0;
 if($392){label=138;break;}else{label=137;break;}
 case 137: 
 var $394=HEAP32[(($187)>>2)];
 var $398=$394;label=139;break;
 case 138: 
 var $396=($390&255);
 var $397=$396>>>1;
 var $398=$397;label=139;break;
 case 139: 
 var $398;
 var $399=HEAP8[(($this2_i_i_i16)>>0)];
 var $400=$399&1;
 var $401=(($400<<24)>>24)==0;
 if($401){label=141;break;}else{label=140;break;}
 case 140: 
 var $403=HEAP32[(($183)>>2)];
 var $407=$403;label=142;break;
 case 141: 
 var $405=($399&255);
 var $406=$405>>>1;
 var $407=$406;label=142;break;
 case 142: 
 var $407;
 var $408=(((-$407))|0);
 var $409=($398|0)==($408|0);
 if($409){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}else{label=143;break;}
 case 143: 
 if($392){label=145;break;}else{label=144;break;}
 case 144: 
 var $412=HEAP32[(($187)>>2)];
 var $416=$412;label=146;break;
 case 145: 
 var $414=($390&255);
 var $415=$414>>>1;
 var $416=$415;label=146;break;
 case 146: 
 var $416;
 var $417=($416|0)==0;
 if($417){label=151;break;}else{label=147;break;}
 case 147: 
 if($401){label=149;break;}else{label=148;break;}
 case 148: 
 var $420=HEAP32[(($183)>>2)];
 var $424=$420;label=150;break;
 case 149: 
 var $422=($399&255);
 var $423=$422>>>1;
 var $424=$423;label=150;break;
 case 150: 
 var $424;
 var $425=($424|0)==0;
 if($425){label=151;break;}else{label=180;break;}
 case 151: 
 if($392){label=153;break;}else{label=152;break;}
 case 152: 
 var $428=HEAP32[(($187)>>2)];
 var $432=$428;label=154;break;
 case 153: 
 var $430=($390&255);
 var $431=$430>>>1;
 var $432=$431;label=154;break;
 case 154: 
 var $432;
 var $433=($432|0)==0;
 var $434=HEAP32[(($178)>>2)];
 var $435=(($434+12)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=(($434+16)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=($436|0)==($438|0);
 if($433){label=168;break;}else{label=155;break;}
 case 155: 
 if($439){label=156;break;}else{label=158;break;}
 case 156: 
 var $442=$434;
 var $443=HEAP32[(($442)>>2)];
 var $444=(($443+36)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$445]($434) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=157;break; } else { label=82;break; }
 case 157: 
 var $extract_t_i90=(($446)&255);
 var $_pre252=HEAP8[(($this2_i_i_i14)>>0)];
 var $_0_i_off0_i91=$extract_t_i90;var $449=$_pre252;label=159;break;
 case 158: 
 var $448=HEAP8[(($436)>>0)];
 var $_0_i_off0_i91=$448;var $449=$390;label=159;break;
 case 159: 
 var $449;
 var $_0_i_off0_i91;
 var $450=$449&1;
 var $451=(($450<<24)>>24)==0;
 var $452=HEAP32[(($188)>>2)];
 var $_=($451?$186:$452);
 var $453=HEAP8[(($_)>>0)];
 var $454=(($_0_i_off0_i91<<24)>>24)==(($453<<24)>>24);
 if($454){label=160;break;}else{label=167;break;}
 case 160: 
 var $456=HEAP32[(($178)>>2)];
 var $457=(($456+12)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=(($456+16)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($458|0)==($460|0);
 if($461){label=161;break;}else{label=162;break;}
 case 161: 
 var $463=$456;
 var $464=HEAP32[(($463)>>2)];
 var $465=(($464+40)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$466]($456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=82;break; }
 case 162: 
 var $469=(($458+1)|0);
 HEAP32[(($457)>>2)]=$469;
 label=163;break;
 case 163: 
 var $470=HEAP8[(($this2_i_i_i14)>>0)];
 var $471=$470&1;
 var $472=(($471<<24)>>24)==0;
 if($472){label=165;break;}else{label=164;break;}
 case 164: 
 var $474=HEAP32[(($187)>>2)];
 var $478=$474;label=166;break;
 case 165: 
 var $476=($470&255);
 var $477=$476>>>1;
 var $478=$477;label=166;break;
 case 166: 
 var $478;
 var $479=($478>>>0)>1;
 var $__psn___trailing_sign_0=($479?$__psn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 167: 
 HEAP8[(($__neg)>>0)]=1;
 var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 168: 
 if($439){label=169;break;}else{label=171;break;}
 case 169: 
 var $483=$434;
 var $484=HEAP32[(($483)>>2)];
 var $485=(($484+36)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$486]($434) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=82;break; }
 case 170: 
 var $extract_t_i112=(($487)&255);
 var $_pre=HEAP8[(($this2_i_i_i16)>>0)];
 var $_0_i_off0_i113=$extract_t_i112;var $490=$_pre;label=172;break;
 case 171: 
 var $489=HEAP8[(($436)>>0)];
 var $_0_i_off0_i113=$489;var $490=$399;label=172;break;
 case 172: 
 var $490;
 var $_0_i_off0_i113;
 var $491=$490&1;
 var $492=(($491<<24)>>24)==0;
 var $493=HEAP32[(($184)>>2)];
 var $_277=($492?$182:$493);
 var $494=HEAP8[(($_277)>>0)];
 var $495=(($_0_i_off0_i113<<24)>>24)==(($494<<24)>>24);
 if($495){label=173;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}
 case 173: 
 var $497=HEAP32[(($178)>>2)];
 var $498=(($497+12)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=(($497+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($499|0)==($501|0);
 if($502){label=174;break;}else{label=175;break;}
 case 174: 
 var $504=$497;
 var $505=HEAP32[(($504)>>2)];
 var $506=(($505+40)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$507]($497) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=176;break; } else { label=82;break; }
 case 175: 
 var $510=(($499+1)|0);
 HEAP32[(($498)>>2)]=$510;
 label=176;break;
 case 176: 
 HEAP8[(($__neg)>>0)]=1;
 var $511=HEAP8[(($this2_i_i_i16)>>0)];
 var $512=$511&1;
 var $513=(($512<<24)>>24)==0;
 if($513){label=178;break;}else{label=177;break;}
 case 177: 
 var $515=HEAP32[(($183)>>2)];
 var $519=$515;label=179;break;
 case 178: 
 var $517=($511&255);
 var $518=$517>>>1;
 var $519=$518;label=179;break;
 case 179: 
 var $519;
 var $520=($519>>>0)>1;
 var $__nsn___trailing_sign_0=($520?$__nsn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 180: 
 var $522=HEAP32[(($178)>>2)];
 var $523=(($522+12)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($522+16)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($524|0)==($526|0);
 if($527){label=181;break;}else{label=183;break;}
 case 181: 
 var $529=$522;
 var $530=HEAP32[(($529)>>2)];
 var $531=(($530+36)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$532]($522) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { label=82;break; }
 case 182: 
 var $extract_t_i120=(($533)&255);
 var $_pre253=HEAP8[(($this2_i_i_i14)>>0)];
 var $_pre16=HEAP32[(($178)>>2)];
 var $_phi_trans_insert17=(($_pre16+12)|0);
 var $_pre18=HEAP32[(($_phi_trans_insert17)>>2)];
 var $_phi_trans_insert19=(($_pre16+16)|0);
 var $_pre20=HEAP32[(($_phi_trans_insert19)>>2)];
 var $_0_i_off0_i121=$extract_t_i120;var $539=$_pre253;var $538=$_pre16;var $537=$_pre18;var $536=$_pre20;label=184;break;
 case 183: 
 var $535=HEAP8[(($524)>>0)];
 var $_0_i_off0_i121=$535;var $539=$390;var $538=$522;var $537=$524;var $536=$526;label=184;break;
 case 184: 
 var $536;
 var $537;
 var $538;
 var $539;
 var $_0_i_off0_i121;
 var $540=$539&1;
 var $541=(($540<<24)>>24)==0;
 var $542=HEAP32[(($188)>>2)];
 var $_278=($541?$186:$542);
 var $543=HEAP8[(($_278)>>0)];
 var $544=(($_0_i_off0_i121<<24)>>24)==(($543<<24)>>24);
 var $545=(($538+12)|0);
 var $546=($537|0)==($536|0);
 if($544){label=185;break;}else{label=192;break;}
 case 185: 
 if($546){label=186;break;}else{label=187;break;}
 case 186: 
 var $549=$538;
 var $550=HEAP32[(($549)>>2)];
 var $551=(($550+40)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$552]($538) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { label=82;break; }
 case 187: 
 var $555=(($537+1)|0);
 HEAP32[(($545)>>2)]=$555;
 label=188;break;
 case 188: 
 var $556=HEAP8[(($this2_i_i_i14)>>0)];
 var $557=$556&1;
 var $558=(($557<<24)>>24)==0;
 if($558){label=190;break;}else{label=189;break;}
 case 189: 
 var $560=HEAP32[(($187)>>2)];
 var $564=$560;label=191;break;
 case 190: 
 var $562=($556&255);
 var $563=$562>>>1;
 var $564=$563;label=191;break;
 case 191: 
 var $564;
 var $565=($564>>>0)>1;
 var $__psn___trailing_sign_09=($565?$__psn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__psn___trailing_sign_09;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 192: 
 if($546){label=193;break;}else{label=195;break;}
 case 193: 
 var $568=$538;
 var $569=HEAP32[(($568)>>2)];
 var $570=(($569+36)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$571]($538) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=82;break; }
 case 194: 
 var $extract_t_i130=(($572)&255);
 var $_0_i_off0_i131=$extract_t_i130;label=196;break;
 case 195: 
 var $574=HEAP8[(($537)>>0)];
 var $_0_i_off0_i131=$574;label=196;break;
 case 196: 
 var $_0_i_off0_i131;
 var $575=HEAP8[(($this2_i_i_i16)>>0)];
 var $576=$575&1;
 var $577=(($576<<24)>>24)==0;
 var $578=HEAP32[(($184)>>2)];
 var $_279=($577?$182:$578);
 var $579=HEAP8[(($_279)>>0)];
 var $580=(($_0_i_off0_i131<<24)>>24)==(($579<<24)>>24);
 if($580){label=197;break;}else{label=204;break;}
 case 197: 
 var $582=HEAP32[(($178)>>2)];
 var $583=(($582+12)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($582+16)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($584|0)==($586|0);
 if($587){label=198;break;}else{label=199;break;}
 case 198: 
 var $589=$582;
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+40)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$592]($582) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=82;break; }
 case 199: 
 var $595=(($584+1)|0);
 HEAP32[(($583)>>2)]=$595;
 label=200;break;
 case 200: 
 HEAP8[(($__neg)>>0)]=1;
 var $596=HEAP8[(($this2_i_i_i16)>>0)];
 var $597=$596&1;
 var $598=(($597<<24)>>24)==0;
 if($598){label=202;break;}else{label=201;break;}
 case 201: 
 var $600=HEAP32[(($183)>>2)];
 var $604=$600;label=203;break;
 case 202: 
 var $602=($596&255);
 var $603=$602>>>1;
 var $604=$603;label=203;break;
 case 203: 
 var $604;
 var $605=($604>>>0)>1;
 var $__nsn___trailing_sign_010=($605?$__nsn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__nsn___trailing_sign_010;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 204: 
 var $607=HEAP32[(($__err)>>2)];
 var $608=$607|4;
 HEAP32[(($__err)>>2)]=$608;
 var $_0=0;label=385;break;
 case 205: 
 var $610=($__trailing_sign_0243|0)!=0;
 var $611=($__p_0241>>>0)<2;
 var $or_cond=$610|$611;
 if($or_cond){label=209;break;}else{label=206;break;}
 case 206: 
 var $613=($__p_0241|0)==2;
 if($613){label=207;break;}else{var $618=0;label=208;break;}
 case 207: 
 var $615=HEAP8[(($199)>>0)];
 var $616=(($615<<24)>>24)!=0;
 var $618=$616;label=208;break;
 case 208: 
 var $618;
 var $brmerge=$190|$618;
 if($brmerge){label=209;break;}else{var $__trailing_sign_1=0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}
 case 209: 
 var $619=HEAP8[(($this2_i_i_i13)>>0)];
 var $620=$619&1;
 var $621=(($620<<24)>>24)==0;
 var $622=HEAP32[(($193)>>2)];
 var $_280=($621?$192:$622);
 var $623=($__p_0241|0)==0;
 if($623){var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{label=210;break;}
 case 210: 
 var $625=((($__p_0241)-(1))|0);
 var $626=(($179+$625)|0);
 var $627=HEAP8[(($626)>>0)];
 var $switch=($627&255)<2;
 if($switch){label=211;break;}else{var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}
 case 211: 
 var $628=($619&255);
 var $629=$628>>>1;
 var $630=HEAP32[(($194)>>2)];
 var $_282=($621?$629:$630);
 var $631=(($_280+$_282)|0);
 var $632=$_280;label=212;break;
 case 212: 
 var $632;
 var $633=($632|0)==($631|0);
 if($633){label=215;break;}else{label=213;break;}
 case 213: 
 var $635=HEAP8[(($632)>>0)];
 var $isascii1_i174=(($635<<24)>>24)>-1;
 if($isascii1_i174){label=214;break;}else{label=215;break;}
 case 214: 
 var $636=(($635<<24)>>24);
 var $637=HEAP32[(($180)>>2)];
 var $638=(($637+($636<<1))|0);
 var $639=HEAP16[(($638)>>1)];
 var $640=$639&8192;
 var $641=(($640<<16)>>16)==0;
 var $642=(($632+1)|0);
 if($641){label=215;break;}else{var $632=$642;label=212;break;}
 case 215: 
 var $643=$632;
 var $644=$_280;
 var $645=((($643)-($644))|0);
 var $646=HEAP8[(($this2_i_i_i19)>>0)];
 var $647=$646&1;
 var $648=(($647<<24)>>24)==0;
 if($648){label=217;break;}else{label=216;break;}
 case 216: 
 var $650=HEAP32[(($198)>>2)];
 var $654=$650;label=218;break;
 case 217: 
 var $652=($646&255);
 var $653=$652>>>1;
 var $654=$653;label=218;break;
 case 218: 
 var $654;
 var $655=($645>>>0)>($654>>>0);
 if($655){var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{label=219;break;}
 case 219: 
 if($648){label=221;break;}else{label=220;break;}
 case 220: 
 var $658=HEAP32[(($197)>>2)];
 var $659=HEAP32[(($198)>>2)];
 var $_sum=((($659)-($645))|0);
 var $660=(($658+$_sum)|0);
 var $667=$659;var $666=$658;var $665=$660;label=222;break;
 case 221: 
 var $662=($646&255);
 var $663=$662>>>1;
 var $_sum268=((($663)-($645))|0);
 var $664=(($195+1+$_sum268)|0);
 var $667=$663;var $666=$196;var $665=$664;label=222;break;
 case 222: 
 var $665;
 var $666;
 var $667;
 var $668=(($666+$667)|0);
 var $669=($665|0)==($668|0);
 if($669){var $681=$632;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{var $671=$665;var $670=$_280;label=223;break;}
 case 223: 
 var $670;
 var $671;
 var $672=HEAP8[(($671)>>0)];
 var $673=HEAP8[(($670)>>0)];
 var $674=(($672<<24)>>24)==(($673<<24)>>24);
 if($674){label=224;break;}else{var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}
 case 224: 
 var $676=(($671+1)|0);
 var $677=(($670+1)|0);
 var $678=($676|0)==($668|0);
 if($678){var $681=$632;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{var $671=$676;var $670=$677;label=223;break;}
 case 225: 
 var $__e_sroa_0_6;
 var $_pre_i2_i_i168;
 var $679;
 var $680;
 var $681;
 var $682=$680&1;
 var $683=(($682<<24)>>24)==0;
 if($683){label=227;break;}else{label=226;break;}
 case 226: 
 var $685=HEAP32[(($193)>>2)];
 var $686=HEAP32[(($194)>>2)];
 var $691=$686;var $690=$685;label=228;break;
 case 227: 
 var $688=($680&255);
 var $689=$688>>>1;
 var $691=$689;var $690=$192;label=228;break;
 case 228: 
 var $690;
 var $691;
 var $692=(($690+$691)|0);
 var $693=($681|0)==($692|0);
 if($693){var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}else{label=229;break;}
 case 229: 
 var $695=HEAP32[(($178)>>2)];
 var $696=($695|0)==0;
 if($696){var $710=0;label=235;break;}else{label=230;break;}
 case 230: 
 var $698=(($695+12)|0);
 var $699=HEAP32[(($698)>>2)];
 var $700=(($695+16)|0);
 var $701=HEAP32[(($700)>>2)];
 var $702=($699|0)==($701|0);
 if($702){label=231;break;}else{var $710=$695;label=235;break;}
 case 231: 
 var $703=$695;
 var $704=HEAP32[(($703)>>2)];
 var $705=(($704+36)|0);
 var $706=HEAP32[(($705)>>2)];
 var $707=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$706]($695) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=232;break; } else { label=80;break; }
 case 232: 
 var $708=($707|0)==-1;
 if($708){label=234;break;}else{label=233;break;}
 case 233: 
 var $_pre_i_i_i164=HEAP32[(($178)>>2)];
 var $710=$_pre_i_i_i164;label=235;break;
 case 234: 
 HEAP32[(($178)>>2)]=0;
 var $710=0;label=235;break;
 case 235: 
 var $710;
 var $711=($710|0)==0;
 var $712=($679|0)==0;
 if($712){var $_pre_i2_i_i168256=$_pre_i2_i_i168;var $__e_sroa_0_7=$__e_sroa_0_6;label=240;break;}else{label=236;break;}
 case 236: 
 var $714=(($679+12)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($679+16)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=($715|0)==($717|0);
 if($718){label=238;break;}else{label=237;break;}
 case 237: 
 if($711){var $728=$679;var $_pre_i2_i_i168255=$_pre_i2_i_i168;var $__e_sroa_0_8=$__e_sroa_0_6;label=242;break;}else{var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}
 case 238: 
 var $719=$679;
 var $720=HEAP32[(($719)>>2)];
 var $721=(($720+36)|0);
 var $722=HEAP32[(($721)>>2)];
 var $723=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$722]($679) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=239;break; } else { label=80;break; }
 case 239: 
 var $724=($723|0)==-1;
 if($724){var $_pre_i2_i_i168256=0;var $__e_sroa_0_7=0;label=240;break;}else{label=241;break;}
 case 240: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i168256;
 if($711){var $761=$_pre_i2_i_i168256;var $__e_sroa_0_9=$__e_sroa_0_7;label=251;break;}else{var $728=0;var $_pre_i2_i_i168255=$_pre_i2_i_i168256;var $__e_sroa_0_8=$__e_sroa_0_7;label=242;break;}
 case 241: 
 var $726=($_pre_i2_i_i168|0)==0;
 var $tmp_i_i170=$711^$726;
 if($tmp_i_i170){var $728=$_pre_i2_i_i168;var $_pre_i2_i_i168255=$_pre_i2_i_i168;var $__e_sroa_0_8=$__e_sroa_0_6;label=242;break;}else{var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}
 case 242: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i168255;
 var $728;
 var $729=HEAP32[(($178)>>2)];
 var $730=(($729+12)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=(($729+16)|0);
 var $733=HEAP32[(($732)>>2)];
 var $734=($731|0)==($733|0);
 if($734){label=243;break;}else{label=245;break;}
 case 243: 
 var $736=$729;
 var $737=HEAP32[(($736)>>2)];
 var $738=(($737+36)|0);
 var $739=HEAP32[(($738)>>2)];
 var $740=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$739]($729) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=80;break; }
 case 244: 
 var $extract_t_i159=(($740)&255);
 var $_0_i_off0_i160=$extract_t_i159;label=246;break;
 case 245: 
 var $742=HEAP8[(($731)>>0)];
 var $_0_i_off0_i160=$742;label=246;break;
 case 246: 
 var $_0_i_off0_i160;
 var $743=HEAP8[(($681)>>0)];
 var $744=(($_0_i_off0_i160<<24)>>24)==(($743<<24)>>24);
 if($744){label=247;break;}else{var $761=$_pre_i2_i_i168255;var $__e_sroa_0_9=$__e_sroa_0_8;label=251;break;}
 case 247: 
 var $746=HEAP32[(($178)>>2)];
 var $747=(($746+12)|0);
 var $748=HEAP32[(($747)>>2)];
 var $749=(($746+16)|0);
 var $750=HEAP32[(($749)>>2)];
 var $751=($748|0)==($750|0);
 if($751){label=248;break;}else{label=249;break;}
 case 248: 
 var $753=$746;
 var $754=HEAP32[(($753)>>2)];
 var $755=(($754+40)|0);
 var $756=HEAP32[(($755)>>2)];
 var $757=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$756]($746) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=80;break; }
 case 249: 
 var $759=(($748+1)|0);
 HEAP32[(($747)>>2)]=$759;
 label=250;break;
 case 250: 
 var $760=(($681+1)|0);
 var $_pre254=HEAP8[(($this2_i_i_i13)>>0)];
 var $681=$760;var $680=$_pre254;var $679=$728;var $_pre_i2_i_i168=$_pre_i2_i_i168255;var $__e_sroa_0_6=$__e_sroa_0_8;label=225;break;
 case 251: 
 var $__e_sroa_0_9;
 var $761;
 if($190){label=252;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$761;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=351;break;}
 case 252: 
 var $763=HEAP8[(($this2_i_i_i13)>>0)];
 var $764=$763&1;
 var $765=(($764<<24)>>24)==0;
 if($765){label=254;break;}else{label=253;break;}
 case 253: 
 var $767=HEAP32[(($193)>>2)];
 var $768=HEAP32[(($194)>>2)];
 var $773=$768;var $772=$767;label=255;break;
 case 254: 
 var $770=($763&255);
 var $771=$770>>>1;
 var $773=$771;var $772=$192;label=255;break;
 case 255: 
 var $772;
 var $773;
 var $774=(($772+$773)|0);
 var $775=($681|0)==($774|0);
 if($775){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$761;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=351;break;}else{label=256;break;}
 case 256: 
 var $777=HEAP32[(($__err)>>2)];
 var $778=$777|4;
 HEAP32[(($__err)>>2)]=$778;
 var $_0=0;label=385;break;
 case 257: 
 var $__e_sroa_0_10;
 var $_pre_i2_i_i150;
 var $779;
 var $780;
 var $__ng_0;
 var $781=HEAP32[(($178)>>2)];
 var $782=($781|0)==0;
 if($782){var $796=0;label=263;break;}else{label=258;break;}
 case 258: 
 var $784=(($781+12)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($781+16)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($785|0)==($787|0);
 if($788){label=259;break;}else{var $796=$781;label=263;break;}
 case 259: 
 var $789=$781;
 var $790=HEAP32[(($789)>>2)];
 var $791=(($790+36)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$792]($781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=78;break; }
 case 260: 
 var $794=($793|0)==-1;
 if($794){label=262;break;}else{label=261;break;}
 case 261: 
 var $_pre_i_i_i146=HEAP32[(($178)>>2)];
 var $796=$_pre_i_i_i146;label=263;break;
 case 262: 
 HEAP32[(($178)>>2)]=0;
 var $796=0;label=263;break;
 case 263: 
 var $796;
 var $797=($796|0)==0;
 var $798=($780|0)==0;
 if($798){var $811=$_pre_i2_i_i150;var $__e_sroa_0_11=$__e_sroa_0_10;label=268;break;}else{label=264;break;}
 case 264: 
 var $800=(($780+12)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($780+16)|0);
 var $803=HEAP32[(($802)>>2)];
 var $804=($801|0)==($803|0);
 if($804){label=266;break;}else{label=265;break;}
 case 265: 
 if($797){var $816=$780;var $815=$_pre_i2_i_i150;var $__e_sroa_0_12=$__e_sroa_0_10;label=270;break;}else{var $_pre_i2_i_i106=$_pre_i2_i_i150;var $__e_sroa_0_13=$__e_sroa_0_10;label=291;break;}
 case 266: 
 var $805=$780;
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+36)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$808]($780) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=267;break; } else { label=78;break; }
 case 267: 
 var $810=($809|0)==-1;
 if($810){var $811=0;var $__e_sroa_0_11=0;label=268;break;}else{label=269;break;}
 case 268: 
 var $__e_sroa_0_11;
 var $811;
 if($797){var $_pre_i2_i_i106=$811;var $__e_sroa_0_13=$__e_sroa_0_11;label=291;break;}else{var $816=0;var $815=$811;var $__e_sroa_0_12=$__e_sroa_0_11;label=270;break;}
 case 269: 
 var $813=($_pre_i2_i_i150|0)==0;
 var $tmp_i_i152=$797^$813;
 if($tmp_i_i152){var $816=$_pre_i2_i_i150;var $815=$_pre_i2_i_i150;var $__e_sroa_0_12=$__e_sroa_0_10;label=270;break;}else{var $_pre_i2_i_i106=$_pre_i2_i_i150;var $__e_sroa_0_13=$__e_sroa_0_10;label=291;break;}
 case 270: 
 var $__e_sroa_0_12;
 var $815;
 var $816;
 var $817=HEAP32[(($178)>>2)];
 var $818=(($817+12)|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=(($817+16)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=($819|0)==($821|0);
 if($822){label=271;break;}else{label=273;break;}
 case 271: 
 var $824=$817;
 var $825=HEAP32[(($824)>>2)];
 var $826=(($825+36)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$827]($817) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=78;break; }
 case 272: 
 var $extract_t_i141=(($828)&255);
 var $_0_i_off0_i142=$extract_t_i141;label=274;break;
 case 273: 
 var $830=HEAP8[(($819)>>0)];
 var $_0_i_off0_i142=$830;label=274;break;
 case 274: 
 var $_0_i_off0_i142;
 var $isascii1_i139=(($_0_i_off0_i142<<24)>>24)>-1;
 if($isascii1_i139){label=275;break;}else{label=280;break;}
 case 275: 
 var $831=(($_0_i_off0_i142<<24)>>24);
 var $832=HEAP32[(($180)>>2)];
 var $833=(($832+($831<<1))|0);
 var $834=HEAP16[(($833)>>1)];
 var $835=$834&2048;
 var $836=(($835<<16)>>16)==0;
 if($836){label=280;break;}else{label=276;break;}
 case 276: 
 var $838=HEAP32[(($__wn)>>2)];
 var $839=HEAP32[(($11)>>2)];
 var $840=($838|0)==($839|0);
 if($840){label=277;break;}else{var $843=$838;label=279;break;}
 case 277: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=78;break; }
 case 278: 
 var $_pre263=HEAP32[(($__wn)>>2)];
 var $843=$_pre263;label=279;break;
 case 279: 
 var $843;
 var $844=(($843+1)|0);
 HEAP32[(($__wn)>>2)]=$844;
 HEAP8[(($843)>>0)]=$_0_i_off0_i142;
 var $845=((($__ng_0)+(1))|0);
 var $__ng_1=$845;var $866=$779;label=288;break;
 case 280: 
 var $846=HEAP8[(($this2_i_i_i)>>0)];
 var $847=$846&1;
 var $848=(($847<<24)>>24)==0;
 if($848){label=282;break;}else{label=281;break;}
 case 281: 
 var $850=HEAP32[(($200)>>2)];
 var $854=$850;label=283;break;
 case 282: 
 var $852=($846&255);
 var $853=$852>>>1;
 var $854=$853;label=283;break;
 case 283: 
 var $854;
 var $855=($854|0)!=0;
 var $856=($__ng_0|0)!=0;
 var $or_cond6=$855&$856;
 var $857=(($_0_i_off0_i142<<24)>>24)==(($__ts_0<<24)>>24);
 var $or_cond12=$or_cond6&$857;
 if($or_cond12){label=284;break;}else{var $_pre_i2_i_i106=$815;var $__e_sroa_0_13=$__e_sroa_0_12;label=291;break;}
 case 284: 
 var $859=HEAP32[(($__ge)>>2)];
 var $860=($779|0)==($859|0);
 if($860){label=285;break;}else{var $863=$779;label=287;break;}
 case 285: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=286;break; } else { label=78;break; }
 case 286: 
 var $_pre265=HEAP32[(($__gn)>>2)];
 var $863=$_pre265;label=287;break;
 case 287: 
 var $863;
 var $864=(($863+4)|0);
 HEAP32[(($__gn)>>2)]=$864;
 HEAP32[(($863)>>2)]=$__ng_0;
 var $__ng_1=0;var $866=$864;label=288;break;
 case 288: 
 var $866;
 var $__ng_1;
 var $867=HEAP32[(($178)>>2)];
 var $868=(($867+12)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(($867+16)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=($869|0)==($871|0);
 if($872){label=289;break;}else{label=290;break;}
 case 289: 
 var $874=$867;
 var $875=HEAP32[(($874)>>2)];
 var $876=(($875+40)|0);
 var $877=HEAP32[(($876)>>2)];
 var $878=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$877]($867) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $780=$816;var $779=$866;var $_pre_i2_i_i150=$815;var $__e_sroa_0_10=$__e_sroa_0_12;label=257;break; } else { label=78;break; }
 case 290: 
 var $880=(($869+1)|0);
 HEAP32[(($868)>>2)]=$880;
 var $__ng_0=$__ng_1;var $780=$816;var $779=$866;var $_pre_i2_i_i150=$815;var $__e_sroa_0_10=$__e_sroa_0_12;label=257;break;
 case 291: 
 var $__e_sroa_0_13;
 var $_pre_i2_i_i106;
 var $882=HEAP32[(($14)>>2)];
 var $883=($882|0)!=($779|0);
 var $884=($__ng_0|0)!=0;
 var $or_cond8=$883&$884;
 if($or_cond8){label=292;break;}else{var $893=$779;label=296;break;}
 case 292: 
 var $886=HEAP32[(($__ge)>>2)];
 var $887=($779|0)==($886|0);
 if($887){label=293;break;}else{var $890=$779;label=295;break;}
 case 293: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=82;break; }
 case 294: 
 var $_pre259=HEAP32[(($__gn)>>2)];
 var $890=$_pre259;label=295;break;
 case 295: 
 var $890;
 var $891=(($890+4)|0);
 HEAP32[(($__gn)>>2)]=$891;
 HEAP32[(($890)>>2)]=$__ng_0;
 var $893=$891;label=296;break;
 case 296: 
 var $893;
 var $894=($__fd_0|0)>0;
 if($894){label=297;break;}else{var $1056=$_pre_i2_i_i106;var $__fd_1=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=349;break;}
 case 297: 
 var $896=HEAP32[(($178)>>2)];
 var $897=($896|0)==0;
 if($897){var $911=0;label=303;break;}else{label=298;break;}
 case 298: 
 var $899=(($896+12)|0);
 var $900=HEAP32[(($899)>>2)];
 var $901=(($896+16)|0);
 var $902=HEAP32[(($901)>>2)];
 var $903=($900|0)==($902|0);
 if($903){label=299;break;}else{var $911=$896;label=303;break;}
 case 299: 
 var $904=$896;
 var $905=HEAP32[(($904)>>2)];
 var $906=(($905+36)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$907]($896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=82;break; }
 case 300: 
 var $909=($908|0)==-1;
 if($909){label=302;break;}else{label=301;break;}
 case 301: 
 var $_pre_i_i_i102=HEAP32[(($178)>>2)];
 var $911=$_pre_i_i_i102;label=303;break;
 case 302: 
 HEAP32[(($178)>>2)]=0;
 var $911=0;label=303;break;
 case 303: 
 var $911;
 var $912=($911|0)==0;
 var $913=($_pre_i2_i_i106|0)==0;
 if($913){var $__e_sroa_0_14=$__e_sroa_0_13;label=308;break;}else{label=304;break;}
 case 304: 
 var $915=(($_pre_i2_i_i106+12)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=(($_pre_i2_i_i106+16)|0);
 var $918=HEAP32[(($917)>>2)];
 var $919=($916|0)==($918|0);
 if($919){label=306;break;}else{label=305;break;}
 case 305: 
 if($912){var $927=$_pre_i2_i_i106;var $__e_sroa_0_15=$__e_sroa_0_13;label=310;break;}else{label=315;break;}
 case 306: 
 var $920=$_pre_i2_i_i106;
 var $921=HEAP32[(($920)>>2)];
 var $922=(($921+36)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($_pre_i2_i_i106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=307;break; } else { label=82;break; }
 case 307: 
 var $925=($924|0)==-1;
 if($925){var $__e_sroa_0_14=0;label=308;break;}else{label=309;break;}
 case 308: 
 var $__e_sroa_0_14;
 if($912){label=315;break;}else{var $927=0;var $__e_sroa_0_15=$__e_sroa_0_14;label=310;break;}
 case 309: 
 if($912){var $927=$_pre_i2_i_i106;var $__e_sroa_0_15=$__e_sroa_0_13;label=310;break;}else{label=315;break;}
 case 310: 
 var $__e_sroa_0_15;
 var $927;
 var $928=HEAP32[(($178)>>2)];
 var $929=(($928+12)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=(($928+16)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($930|0)==($932|0);
 if($933){label=311;break;}else{label=313;break;}
 case 311: 
 var $935=$928;
 var $936=HEAP32[(($935)>>2)];
 var $937=(($936+36)|0);
 var $938=HEAP32[(($937)>>2)];
 var $939=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$938]($928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=82;break; }
 case 312: 
 var $extract_t_i94=(($939)&255);
 var $_0_i_off0_i95=$extract_t_i94;label=314;break;
 case 313: 
 var $941=HEAP8[(($930)>>0)];
 var $_0_i_off0_i95=$941;label=314;break;
 case 314: 
 var $_0_i_off0_i95;
 var $942=(($_0_i_off0_i95<<24)>>24)==(($__dp_0<<24)>>24);
 if($942){label=316;break;}else{label=315;break;}
 case 315: 
 var $944=HEAP32[(($__err)>>2)];
 var $945=$944|4;
 HEAP32[(($__err)>>2)]=$945;
 var $_0=0;label=385;break;
 case 316: 
 var $947=HEAP32[(($178)>>2)];
 var $948=(($947+12)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=(($947+16)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=($949|0)==($951|0);
 if($952){label=317;break;}else{label=318;break;}
 case 317: 
 var $954=$947;
 var $955=HEAP32[(($954)>>2)];
 var $956=(($955+40)|0);
 var $957=HEAP32[(($956)>>2)];
 var $958=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$957]($947) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $962=$927;var $961=$__fd_0;var $_pre_i2_i_i80=$927;var $__e_sroa_0_16=$__e_sroa_0_15;label=319;break; } else { label=82;break; }
 case 318: 
 var $960=(($949+1)|0);
 HEAP32[(($948)>>2)]=$960;
 var $962=$927;var $961=$__fd_0;var $_pre_i2_i_i80=$927;var $__e_sroa_0_16=$__e_sroa_0_15;label=319;break;
 case 319: 
 var $__e_sroa_0_16;
 var $_pre_i2_i_i80;
 var $961;
 var $962;
 var $963=HEAP32[(($178)>>2)];
 var $964=($963|0)==0;
 if($964){var $978=0;label=325;break;}else{label=320;break;}
 case 320: 
 var $966=(($963+12)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=(($963+16)|0);
 var $969=HEAP32[(($968)>>2)];
 var $970=($967|0)==($969|0);
 if($970){label=321;break;}else{var $978=$963;label=325;break;}
 case 321: 
 var $971=$963;
 var $972=HEAP32[(($971)>>2)];
 var $973=(($972+36)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$974]($963) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=322;break; } else { label=79;break; }
 case 322: 
 var $976=($975|0)==-1;
 if($976){label=324;break;}else{label=323;break;}
 case 323: 
 var $_pre_i_i_i76=HEAP32[(($178)>>2)];
 var $978=$_pre_i_i_i76;label=325;break;
 case 324: 
 HEAP32[(($178)>>2)]=0;
 var $978=0;label=325;break;
 case 325: 
 var $978;
 var $979=($978|0)==0;
 var $980=($962|0)==0;
 if($980){var $_pre_i2_i_i80261_ph=$_pre_i2_i_i80;var $__e_sroa_0_17=$__e_sroa_0_16;label=330;break;}else{label=326;break;}
 case 326: 
 var $982=(($962+12)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=(($962+16)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=($983|0)==($985|0);
 if($986){label=328;break;}else{label=327;break;}
 case 327: 
 if($979){var $_pre_i2_i_i80261272=$_pre_i2_i_i80;var $995=$962;var $__e_sroa_0_18=$__e_sroa_0_16;label=332;break;}else{label=338;break;}
 case 328: 
 var $987=$962;
 var $988=HEAP32[(($987)>>2)];
 var $989=(($988+36)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$990]($962) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=329;break; } else { label=79;break; }
 case 329: 
 var $992=($991|0)==-1;
 if($992){var $_pre_i2_i_i80261_ph=0;var $__e_sroa_0_17=0;label=330;break;}else{label=331;break;}
 case 330: 
 var $__e_sroa_0_17;
 var $_pre_i2_i_i80261_ph;
 if($979){label=338;break;}else{var $_pre_i2_i_i80261272=$_pre_i2_i_i80261_ph;var $995=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=332;break;}
 case 331: 
 var $993=($_pre_i2_i_i80|0)==0;
 var $tmp_i_i82=$979^$993;
 if($tmp_i_i82){var $_pre_i2_i_i80261272=$_pre_i2_i_i80;var $995=$_pre_i2_i_i80;var $__e_sroa_0_18=$__e_sroa_0_16;label=332;break;}else{label=338;break;}
 case 332: 
 var $__e_sroa_0_18;
 var $995;
 var $_pre_i2_i_i80261272;
 var $996=HEAP32[(($178)>>2)];
 var $997=(($996+12)|0);
 var $998=HEAP32[(($997)>>2)];
 var $999=(($996+16)|0);
 var $1000=HEAP32[(($999)>>2)];
 var $1001=($998|0)==($1000|0);
 if($1001){label=333;break;}else{label=335;break;}
 case 333: 
 var $1003=$996;
 var $1004=HEAP32[(($1003)>>2)];
 var $1005=(($1004+36)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1006]($996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=79;break; }
 case 334: 
 var $extract_t_i70=(($1007)&255);
 var $_0_i_off0_i71=$extract_t_i70;label=336;break;
 case 335: 
 var $1009=HEAP8[(($998)>>0)];
 var $_0_i_off0_i71=$1009;label=336;break;
 case 336: 
 var $_0_i_off0_i71;
 var $isascii1_i68=(($_0_i_off0_i71<<24)>>24)>-1;
 if($isascii1_i68){label=337;break;}else{label=338;break;}
 case 337: 
 var $1010=(($_0_i_off0_i71<<24)>>24);
 var $1011=HEAP32[(($180)>>2)];
 var $1012=(($1011+($1010<<1))|0);
 var $1013=HEAP16[(($1012)>>1)];
 var $1014=$1013&2048;
 var $1015=(($1014<<16)>>16)==0;
 if($1015){label=338;break;}else{label=339;break;}
 case 338: 
 var $1016=HEAP32[(($__err)>>2)];
 var $1017=$1016|4;
 HEAP32[(($__err)>>2)]=$1017;
 var $_0=0;label=385;break;
 case 339: 
 var $1019=HEAP32[(($__wn)>>2)];
 var $1020=HEAP32[(($11)>>2)];
 var $1021=($1019|0)==($1020|0);
 if($1021){label=340;break;}else{label=341;break;}
 case 340: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=341;break; } else { label=79;break; }
 case 341: 
 var $1024=HEAP32[(($178)>>2)];
 var $1025=(($1024+12)|0);
 var $1026=HEAP32[(($1025)>>2)];
 var $1027=(($1024+16)|0);
 var $1028=HEAP32[(($1027)>>2)];
 var $1029=($1026|0)==($1028|0);
 if($1029){label=342;break;}else{label=344;break;}
 case 342: 
 var $1031=$1024;
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=(($1032+36)|0);
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1034]($1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=79;break; }
 case 343: 
 var $extract_t_i62=(($1035)&255);
 var $_0_i_off0_i63=$extract_t_i62;label=345;break;
 case 344: 
 var $1037=HEAP8[(($1026)>>0)];
 var $_0_i_off0_i63=$1037;label=345;break;
 case 345: 
 var $_0_i_off0_i63;
 var $1038=HEAP32[(($__wn)>>2)];
 var $1039=(($1038+1)|0);
 HEAP32[(($__wn)>>2)]=$1039;
 HEAP8[(($1038)>>0)]=$_0_i_off0_i63;
 var $1040=((($961)-(1))|0);
 var $1041=HEAP32[(($178)>>2)];
 var $1042=(($1041+12)|0);
 var $1043=HEAP32[(($1042)>>2)];
 var $1044=(($1041+16)|0);
 var $1045=HEAP32[(($1044)>>2)];
 var $1046=($1043|0)==($1045|0);
 if($1046){label=346;break;}else{label=348;break;}
 case 346: 
 var $1048=$1041;
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=(($1049+40)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1051]($1041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=347;break; } else { label=79;break; }
 case 347: 
 var $1053=($1040|0)>0;
 if($1053){var $962=$995;var $961=$1040;var $_pre_i2_i_i80=$_pre_i2_i_i80261272;var $__e_sroa_0_16=$__e_sroa_0_18;label=319;break;}else{var $1056=$_pre_i2_i_i80261272;var $__fd_1=$1040;var $__e_sroa_0_19=$__e_sroa_0_18;label=349;break;}
 case 348: 
 var $1055=(($1043+1)|0);
 HEAP32[(($1042)>>2)]=$1055;
 label=347;break;
 case 349: 
 var $__e_sroa_0_19;
 var $__fd_1;
 var $1056;
 var $1057=HEAP32[(($__wn)>>2)];
 var $1058=HEAP32[(($176)>>2)];
 var $1059=($1057|0)==($1058|0);
 if($1059){label=350;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$893;var $1063=$1056;var $__fd_2=$__fd_1;var $__e_sroa_0_20=$__e_sroa_0_19;label=351;break;}
 case 350: 
 var $1061=HEAP32[(($__err)>>2)];
 var $1062=$1061|4;
 HEAP32[(($__err)>>2)]=$1062;
 var $_0=0;label=385;break;
 case 351: 
 var $__e_sroa_0_20;
 var $__fd_2;
 var $1063;
 var $1064;
 var $__trailing_sign_1;
 var $1065=((($__p_0241)+(1))|0);
 var $1066=($1065>>>0)<4;
 if($1066){var $__p_0241=$1065;var $__trailing_sign_0243=$__trailing_sign_1;var $202=$1064;var $__fd_0=$__fd_2;var $__e_sroa_0_0=$__e_sroa_0_20;label=63;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $1068=$1064;var $1067=$1063;label=352;break;}
 case 352: 
 var $1067;
 var $1068;
 var $__trailing_sign_0_lcssa;
 var $1069=($__trailing_sign_0_lcssa|0)==0;
 if($1069){label=382;break;}else{label=353;break;}
 case 353: 
 var $1070=$__trailing_sign_0_lcssa;
 var $1071=$__trailing_sign_0_lcssa;
 var $1072=(($1071+1)|0);
 var $1073=(($__trailing_sign_0_lcssa+8)|0);
 var $1074=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;var $1075=$1067;var $_pre_i2_i_i=$1067;label=354;break;
 case 354: 
 var $_pre_i2_i_i;
 var $1075;
 var $__i_0;
 var $1076=HEAP8[(($1070)>>0)];
 var $1077=$1076&1;
 var $1078=(($1077<<24)>>24)==0;
 if($1078){label=356;break;}else{label=355;break;}
 case 355: 
 var $1080=HEAP32[(($1074)>>2)];
 var $1084=$1080;label=357;break;
 case 356: 
 var $1082=($1076&255);
 var $1083=$1082>>>1;
 var $1084=$1083;label=357;break;
 case 357: 
 var $1084;
 var $1085=($__i_0>>>0)<($1084>>>0);
 if($1085){label=358;break;}else{label=382;break;}
 case 358: 
 var $1087=HEAP32[(($178)>>2)];
 var $1088=($1087|0)==0;
 if($1088){var $1102=0;label=364;break;}else{label=359;break;}
 case 359: 
 var $1090=(($1087+12)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=(($1087+16)|0);
 var $1093=HEAP32[(($1092)>>2)];
 var $1094=($1091|0)==($1093|0);
 if($1094){label=360;break;}else{var $1102=$1087;label=364;break;}
 case 360: 
 var $1095=$1087;
 var $1096=HEAP32[(($1095)>>2)];
 var $1097=(($1096+36)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1098]($1087) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=361;break; } else { label=77;break; }
 case 361: 
 var $1100=($1099|0)==-1;
 if($1100){label=363;break;}else{label=362;break;}
 case 362: 
 var $_pre_i_i_i=HEAP32[(($178)>>2)];
 var $1102=$_pre_i_i_i;label=364;break;
 case 363: 
 HEAP32[(($178)>>2)]=0;
 var $1102=0;label=364;break;
 case 364: 
 var $1102;
 var $1103=($1102|0)==0;
 var $1104=($1075|0)==0;
 if($1104){var $_pre_i2_i_i267_ph=$_pre_i2_i_i;label=369;break;}else{label=365;break;}
 case 365: 
 var $1106=(($1075+12)|0);
 var $1107=HEAP32[(($1106)>>2)];
 var $1108=(($1075+16)|0);
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1107|0)==($1109|0);
 if($1110){label=367;break;}else{label=366;break;}
 case 366: 
 if($1103){var $_pre_i2_i_i267275=$_pre_i2_i_i;var $1119=$1075;label=371;break;}else{label=378;break;}
 case 367: 
 var $1111=$1075;
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=(($1112+36)|0);
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1114]($1075) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=368;break; } else { label=77;break; }
 case 368: 
 var $1116=($1115|0)==-1;
 if($1116){var $_pre_i2_i_i267_ph=0;label=369;break;}else{label=370;break;}
 case 369: 
 var $_pre_i2_i_i267_ph;
 if($1103){label=378;break;}else{var $_pre_i2_i_i267275=$_pre_i2_i_i267_ph;var $1119=0;label=371;break;}
 case 370: 
 var $1117=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$1103^$1117;
 if($tmp_i_i){var $_pre_i2_i_i267275=$_pre_i2_i_i;var $1119=$_pre_i2_i_i;label=371;break;}else{label=378;break;}
 case 371: 
 var $1119;
 var $_pre_i2_i_i267275;
 var $1120=HEAP32[(($178)>>2)];
 var $1121=(($1120+12)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=(($1120+16)|0);
 var $1124=HEAP32[(($1123)>>2)];
 var $1125=($1122|0)==($1124|0);
 if($1125){label=372;break;}else{label=374;break;}
 case 372: 
 var $1127=$1120;
 var $1128=HEAP32[(($1127)>>2)];
 var $1129=(($1128+36)|0);
 var $1130=HEAP32[(($1129)>>2)];
 var $1131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1130]($1120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=373;break; } else { label=77;break; }
 case 373: 
 var $extract_t_i=(($1131)&255);
 var $_0_i_off0_i=$extract_t_i;label=375;break;
 case 374: 
 var $1133=HEAP8[(($1122)>>0)];
 var $_0_i_off0_i=$1133;label=375;break;
 case 375: 
 var $_0_i_off0_i;
 var $1134=HEAP8[(($1070)>>0)];
 var $1135=$1134&1;
 var $1136=(($1135<<24)>>24)==0;
 if($1136){var $1139=$1072;label=377;break;}else{label=376;break;}
 case 376: 
 var $1138=HEAP32[(($1073)>>2)];
 var $1139=$1138;label=377;break;
 case 377: 
 var $1139;
 var $1140=(($1139+$__i_0)|0);
 var $1141=HEAP8[(($1140)>>0)];
 var $1142=(($_0_i_off0_i<<24)>>24)==(($1141<<24)>>24);
 if($1142){label=379;break;}else{label=378;break;}
 case 378: 
 var $1144=HEAP32[(($__err)>>2)];
 var $1145=$1144|4;
 HEAP32[(($__err)>>2)]=$1145;
 var $_0=0;label=385;break;
 case 379: 
 var $1147=((($__i_0)+(1))|0);
 var $1148=HEAP32[(($178)>>2)];
 var $1149=(($1148+12)|0);
 var $1150=HEAP32[(($1149)>>2)];
 var $1151=(($1148+16)|0);
 var $1152=HEAP32[(($1151)>>2)];
 var $1153=($1150|0)==($1152|0);
 if($1153){label=380;break;}else{label=381;break;}
 case 380: 
 var $1155=$1148;
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=(($1156+40)|0);
 var $1158=HEAP32[(($1157)>>2)];
 var $1159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1158]($1148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1147;var $1075=$1119;var $_pre_i2_i_i=$_pre_i2_i_i267275;label=354;break; } else { label=77;break; }
 case 381: 
 var $1161=(($1150+1)|0);
 HEAP32[(($1149)>>2)]=$1161;
 var $__i_0=$1147;var $1075=$1119;var $_pre_i2_i_i=$_pre_i2_i_i267275;label=354;break;
 case 382: 
 var $1162=HEAP32[(($14)>>2)];
 var $1163=($1162|0)==($1068|0);
 if($1163){var $_0=1;label=385;break;}else{label=383;break;}
 case 383: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1162,$1068,$__et);
 var $1165=HEAP32[(($__et)>>2)];
 var $1166=($1165|0)==0;
 if($1166){var $_0=1;label=385;break;}else{label=384;break;}
 case 384: 
 var $1168=HEAP32[(($__err)>>2)];
 var $1169=$1168|4;
 HEAP32[(($__err)>>2)]=$1169;
 var $_0=0;label=385;break;
 case 385: 
 var $_0;
 var $1171=HEAP8[(($this2_i_i_i19)>>0)];
 var $1172=$1171&1;
 var $1173=(($1172<<24)>>24)==0;
 if($1173){label=387;break;}else{label=386;break;}
 case 386: 
 var $1175=HEAP32[(($197)>>2)];
 _free($1175);
 label=387;break;
 case 387: 
 var $1176=HEAP8[(($this2_i_i_i16)>>0)];
 var $1177=$1176&1;
 var $1178=(($1177<<24)>>24)==0;
 if($1178){label=389;break;}else{label=388;break;}
 case 388: 
 var $1180=HEAP32[(($184)>>2)];
 _free($1180);
 label=389;break;
 case 389: 
 var $1181=HEAP8[(($this2_i_i_i14)>>0)];
 var $1182=$1181&1;
 var $1183=(($1182<<24)>>24)==0;
 if($1183){label=391;break;}else{label=390;break;}
 case 390: 
 var $1185=HEAP32[(($188)>>2)];
 _free($1185);
 label=391;break;
 case 391: 
 var $1186=HEAP8[(($this2_i_i_i13)>>0)];
 var $1187=$1186&1;
 var $1188=(($1187<<24)>>24)==0;
 if($1188){label=393;break;}else{label=392;break;}
 case 392: 
 var $1190=HEAP32[(($193)>>2)];
 _free($1190);
 label=393;break;
 case 393: 
 var $1191=HEAP8[(($this2_i_i_i)>>0)];
 var $1192=$1191&1;
 var $1193=(($1192<<24)>>24)==0;
 if($1193){label=395;break;}else{label=394;break;}
 case 394: 
 var $1195=(($__grp+8)|0);
 var $1196=HEAP32[(($1195)>>2)];
 _free($1196);
 label=395;break;
 case 395: 
 var $1197=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $1198=($1197|0)==0;
 if($1198){label=398;break;}else{label=396;break;}
 case 396: 
 var $1200=HEAP32[(($15)>>2)];
 var $1201=$1197;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1200]($1201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=398;break; } else { label=397;break; }
 case 397: 
 var $1203$0 = ___cxa_find_matching_catch(0); var $1203$1 = tempRet0;
 var $1204=$1203$0;
 ___clang_call_terminate($1204);
 throw "Reached an unreachable!";
 case 398: 
 var $$etemp$21$0=400;
 var $$etemp$21$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

