//Func
function __ZN9MeshLabJs8openMeshENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$fileName){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+568)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $oi_i_i=sp;
 var $f_i_i_i=(sp)+(32);
 var $fi_i2_i_i=(sp)+(80);
 var $vi_i3_i_i=(sp)+(88);
 var $buf_i_i_i_i=(sp)+(96);
 var $strInput_i_i_i_i=(sp)+(184);
 var $facenum_i_i_i_i=(sp)+(200);
 var $attr_i_i_i_i=(sp)+(208);
 var $norm_i_i_i_i=(sp)+(216);
 var $tri_i_i_i_i=(sp)+(232);
 var $facenum_i_i_i=(sp)+(272);
 var $fi_i_i_i=(sp)+(280);
 var $vi_i_i_i=(sp)+(288);
 var $attr_i_i_i=(sp)+(296);
 var $norm_i_i_i=(sp)+(304);
 var $tri_i_i_i=(sp)+(320);
 var $pi_i_i=(sp)+(360);
 var $1=(sp)+(400);
 var $2=(sp)+(416);
 var $3=(sp)+(432);
 var $4=(sp)+(448);
 var $5=(sp)+(464);
 var $6=(sp)+(480);
 var $7=(sp)+(496);
 var $8=(sp)+(512);
 var $9=(sp)+(528);
 var $10=(sp)+(544);
 var $loadmask=(sp)+(560);
 var $11=(($this)|0);
 var $12=$fileName;
 var $13=HEAP8[(($12)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 var $17=(($fileName+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=4;break;
 case 3: 
 var $20=$fileName;
 var $21=(($20+1)|0);
 var $22=$21;label=4;break;
 case 4: 
 var $22;
 var $23=$1;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $24=$2;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $25=$3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $26=$4;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $27=$5;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $28=$6;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $29=$7;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $30=$8;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $31=$9;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $32=$10;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $33=_strlen($22);
 var $34=($33>>>0)>4294967279;
 if($34){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 6: 
 var $37=($33>>>0)<11;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$33<<1;
 var $40=(($39)&255);
 HEAP8[(($23)>>0)]=$40;
 var $41=$1;
 var $42=(($41+1)|0);
 var $__p_0_i_i=$42;label=13;break;
 case 8: 
 var $43=((($33)+(16))|0);
 var $44=$43&-16;
 var $45=($44|0)==0;
 var $_size_i_i=($45?1:$44);
 var $46=_malloc($_size_i_i);
 var $47=($46|0)==0;
 if($47){label=9;break;}else{var $_lcssa_i_i=$46;label=12;break;}
 case 9: 
 var $48=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $49=($48|0)==0;
 if($49){label=11;break;}else{label=10;break;}
 case 10: 
 var $51=$48;
 FUNCTION_TABLE[$51]();
 var $52=_malloc($_size_i_i);
 var $53=($52|0)==0;
 if($53){label=9;break;}else{var $_lcssa_i_i=$52;label=12;break;}
 case 11: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 HEAP32[(($56)>>2)]=15192;
 ___cxa_throw($55,26096,(782));
 throw "Reached an unreachable!";
 case 12: 
 var $_lcssa_i_i;
 var $57=(($1+8)|0);
 HEAP32[(($57)>>2)]=$_lcssa_i_i;
 var $58=$44|1;
 var $59=(($1)|0);
 HEAP32[(($59)>>2)]=$58;
 var $60=(($1+4)|0);
 HEAP32[(($60)>>2)]=$33;
 var $__p_0_i_i=$_lcssa_i_i;label=13;break;
 case 13: 
 var $__p_0_i_i;
 assert($33 % 1 === 0);(_memcpy($__p_0_i_i, $22, $33)|0);
 var $61=(($__p_0_i_i+$33)|0);
 HEAP8[(($61)>>0)]=0;
 var $62=_strlen(5504);
 var $63=($62>>>0)>4294967279;
 if($63){label=14;break;}else{label=16;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $66=($62>>>0)<11;
 if($66){label=17;break;}else{label=18;break;}
 case 17: 
 var $68=$62<<1;
 var $69=(($68)&255);
 HEAP8[(($24)>>0)]=$69;
 var $70=$2;
 var $71=(($70+1)|0);
 var $__p_0_i3_i=$71;label=25;break;
 case 18: 
 var $72=((($62)+(16))|0);
 var $73=$72&-16;
 var $74=($73|0)==0;
 var $_size_i8_i=($74?1:$73);
 var $75=_malloc($_size_i8_i);
 var $76=($75|0)==0;
 if($76){label=19;break;}else{var $_lcssa_i10_i=$75;label=24;break;}
 case 19: 
 var $77=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $78=($77|0)==0;
 if($78){label=22;break;}else{label=20;break;}
 case 20: 
 var $80=$77;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=40;break; }
 case 21: 
 var $81=_malloc($_size_i8_i);
 var $82=($81|0)==0;
 if($82){label=19;break;}else{var $_lcssa_i10_i=$81;label=24;break;}
 case 22: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 HEAP32[(($85)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=41;break; }
 case 23: 
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i10_i;
 var $86=(($2+8)|0);
 HEAP32[(($86)>>2)]=$_lcssa_i10_i;
 var $87=$73|1;
 var $88=(($2)|0);
 HEAP32[(($88)>>2)]=$87;
 var $89=(($2+4)|0);
 HEAP32[(($89)>>2)]=$62;
 var $__p_0_i3_i=$_lcssa_i10_i;label=25;break;
 case 25: 
 var $__p_0_i3_i;
 assert($62 % 1 === 0);(_memcpy($__p_0_i3_i, 5504, $62)|0);
 var $90=(($__p_0_i3_i+$62)|0);
 HEAP8[(($90)>>0)]=0;
 var $91=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=43;break; }
 case 26: 
 var $93=HEAP8[(($24)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 var $97=(($2+8)|0);
 var $98=HEAP32[(($97)>>2)];
 _free($98);
 label=28;break;
 case 28: 
 var $99=HEAP8[(($23)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($1+8)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=30;break;
 case 30: 
 if($91){label=31;break;}else{label=47;break;}
 case 31: 
 var $106=$pi_i_i;
 var $$etemp$10$0=40;
 var $$etemp$10$1=0;

 var $107=(($pi_i_i+28)|0);
 var $108=$107;
 var $storemerge_i_i_i=0;label=32;break;
 case 32: 
 var $storemerge_i_i_i;
 var $110=($storemerge_i_i_i>>>0)<3;
 if($110){label=33;break;}else{label=34;break;}
 case 33: 
 var $112=(($108+($storemerge_i_i_i<<2))|0);
 HEAP32[(($112)>>2)]=0;
 var $113=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$113;label=32;break;
 case 34: 
 var $114=$pi_i_i;
 HEAP32[(($114)>>2)]=0; HEAP32[((($114)+(4))>>2)]=0; HEAP32[((($114)+(8))>>2)]=0; HEAP32[((($114)+(12))>>2)]=0; HEAP32[((($114)+(16))>>2)]=0; HEAP32[((($114)+(20))>>2)]=0; HEAP32[((($114)+(24))>>2)]=0;
 var $115=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE4OpenERS3_PKcRNS1_7PlyInfoE($11,$22,$pi_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=37;break; }
 case 35: 
 var $117=(($pi_i_i+4)|0);
 var $118=HEAP32[(($117)>>2)];
 HEAP32[(($loadmask)>>2)]=$118;
 var $119=(($pi_i_i+28)|0);
 var $120=$119;
 var $121=HEAP8[(($120)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){var $storemerge4=$115;label=251;break;}else{label=36;break;}
 case 36: 
 var $125=(($pi_i_i+36)|0);
 var $126=HEAP32[(($125)>>2)];
 _free($126);
 var $storemerge4=$115;label=251;break;
 case 37: 
 var $128$0 = ___cxa_find_matching_catch(); var $128$1 = tempRet0;
 var $129=(($pi_i_i+28)|0);
 var $130=$129;
 var $131=HEAP8[(($130)>>0)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=39;break;}else{label=38;break;}
 case 38: 
 var $135=(($pi_i_i+36)|0);
 var $136=HEAP32[(($135)>>2)];
 _free($136);
 label=39;break;
 case 39: 
 ___resumeException($128$0)
 case 40: 
 var $lpad_loopexit40$0 = ___cxa_find_matching_catch(); var $lpad_loopexit40$1 = tempRet0;
 var $lpad_phi42$1=$lpad_loopexit40$1;var $lpad_phi42$0=$lpad_loopexit40$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit41$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit41$1 = tempRet0;
 var $lpad_phi42$1=$lpad_nonloopexit41$1;var $lpad_phi42$0=$lpad_nonloopexit41$0;label=42;break;
 case 42: 
 var $lpad_phi42$0;
 var $lpad_phi42$1;
 var $138=$lpad_phi42$0;
 var $139=$lpad_phi42$1;
 var $_07=$139;var $_08=$138;label=45;break;
 case 43: 
 var $141$0 = ___cxa_find_matching_catch(); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $144=HEAP8[(($24)>>0)];
 var $145=$144&1;
 var $146=(($145<<24)>>24)==0;
 if($146){var $_07=$143;var $_08=$142;label=45;break;}else{label=44;break;}
 case 44: 
 var $148=(($2+8)|0);
 var $149=HEAP32[(($148)>>2)];
 _free($149);
 var $_07=$143;var $_08=$142;label=45;break;
 case 45: 
 var $_08;
 var $_07;
 var $150=HEAP8[(($23)>>0)];
 var $151=$150&1;
 var $152=(($151<<24)>>24)==0;
 if($152){var $_5=$_07;var $_513=$_08;label=250;break;}else{label=46;break;}
 case 46: 
 var $154=(($1+8)|0);
 var $155=HEAP32[(($154)>>2)];
 _free($155);
 var $_5=$_07;var $_513=$_08;label=250;break;
 case 47: 
 var $157=_strlen($22);
 var $158=($157>>>0)>4294967279;
 if($158){label=48;break;}else{label=49;break;}
 case 48: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 49: 
 var $161=($157>>>0)<11;
 if($161){label=50;break;}else{label=51;break;}
 case 50: 
 var $163=$157<<1;
 var $164=(($163)&255);
 HEAP8[(($25)>>0)]=$164;
 var $165=$3;
 var $166=(($165+1)|0);
 var $__p_0_i19_i=$166;label=56;break;
 case 51: 
 var $167=((($157)+(16))|0);
 var $168=$167&-16;
 var $169=($168|0)==0;
 var $_size_i21_i=($169?1:$168);
 var $170=_malloc($_size_i21_i);
 var $171=($170|0)==0;
 if($171){label=52;break;}else{var $_lcssa_i23_i=$170;label=55;break;}
 case 52: 
 var $172=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $173=($172|0)==0;
 if($173){label=54;break;}else{label=53;break;}
 case 53: 
 var $175=$172;
 FUNCTION_TABLE[$175]();
 var $176=_malloc($_size_i21_i);
 var $177=($176|0)==0;
 if($177){label=52;break;}else{var $_lcssa_i23_i=$176;label=55;break;}
 case 54: 
 var $179=___cxa_allocate_exception(4);
 var $180=$179;
 HEAP32[(($180)>>2)]=15192;
 ___cxa_throw($179,26096,(782));
 throw "Reached an unreachable!";
 case 55: 
 var $_lcssa_i23_i;
 var $181=(($3+8)|0);
 HEAP32[(($181)>>2)]=$_lcssa_i23_i;
 var $182=$168|1;
 var $183=(($3)|0);
 HEAP32[(($183)>>2)]=$182;
 var $184=(($3+4)|0);
 HEAP32[(($184)>>2)]=$157;
 var $__p_0_i19_i=$_lcssa_i23_i;label=56;break;
 case 56: 
 var $__p_0_i19_i;
 assert($157 % 1 === 0);(_memcpy($__p_0_i19_i, $22, $157)|0);
 var $185=(($__p_0_i19_i+$157)|0);
 HEAP8[(($185)>>0)]=0;
 var $186=_strlen(7232);
 var $187=($186>>>0)>4294967279;
 if($187){label=57;break;}else{label=59;break;}
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=138;break; }
 case 58: 
 throw "Reached an unreachable!";
 case 59: 
 var $190=($186>>>0)<11;
 if($190){label=60;break;}else{label=61;break;}
 case 60: 
 var $192=$186<<1;
 var $193=(($192)&255);
 HEAP8[(($26)>>0)]=$193;
 var $194=$4;
 var $195=(($194+1)|0);
 var $__p_0_i28_i=$195;label=68;break;
 case 61: 
 var $196=((($186)+(16))|0);
 var $197=$196&-16;
 var $198=($197|0)==0;
 var $_size_i32_i=($198?1:$197);
 var $199=_malloc($_size_i32_i);
 var $200=($199|0)==0;
 if($200){label=62;break;}else{var $_lcssa_i34_i=$199;label=67;break;}
 case 62: 
 var $201=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $202=($201|0)==0;
 if($202){label=65;break;}else{label=63;break;}
 case 63: 
 var $204=$201;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=137;break; }
 case 64: 
 var $205=_malloc($_size_i32_i);
 var $206=($205|0)==0;
 if($206){label=62;break;}else{var $_lcssa_i34_i=$205;label=67;break;}
 case 65: 
 var $208=___cxa_allocate_exception(4);
 var $209=$208;
 HEAP32[(($209)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($208,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=138;break; }
 case 66: 
 throw "Reached an unreachable!";
 case 67: 
 var $_lcssa_i34_i;
 var $210=(($4+8)|0);
 HEAP32[(($210)>>2)]=$_lcssa_i34_i;
 var $211=$197|1;
 var $212=(($4)|0);
 HEAP32[(($212)>>2)]=$211;
 var $213=(($4+4)|0);
 HEAP32[(($213)>>2)]=$186;
 var $__p_0_i28_i=$_lcssa_i34_i;label=68;break;
 case 68: 
 var $__p_0_i28_i;
 assert($186 % 1 === 0);(_memcpy($__p_0_i28_i, 7232, $186)|0);
 var $214=(($__p_0_i28_i+$186)|0);
 HEAP8[(($214)>>0)]=0;
 var $215=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($3,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=140;break; }
 case 69: 
 var $217=HEAP8[(($26)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=71;break;}else{label=70;break;}
 case 70: 
 var $221=(($4+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=71;break;
 case 71: 
 var $223=HEAP8[(($25)>>0)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=73;break;}else{label=72;break;}
 case 72: 
 var $227=(($3+8)|0);
 var $228=HEAP32[(($227)>>2)];
 _free($228);
 label=73;break;
 case 73: 
 if($215){label=74;break;}else{label=144;break;}
 case 74: 
 var $230=_fopen($22,1064);
 var $231=($230|0)==0;
 if($231){var $storemerge4=1;label=251;break;}else{label=75;break;}
 case 75: 
 var $233=_fclose($230);
 var $234=HEAP32[(($loadmask)>>2)];
 var $235=$234|65;
 HEAP32[(($loadmask)>>2)]=$235;
 var $236=__ZN3vcg3tri2io11ImporterSTLI6MyMeshE11IsSTLBinaryEPKc($22);
 if($236){label=76;break;}else{label=118;break;}
 case 76: 
 var $238=$facenum_i_i_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $239=$fi_i_i_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $240=$vi_i_i_i;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $241=$attr_i_i_i;
 var $$etemp$14$0=2;
 var $$etemp$14$1=0;

 var $242=$norm_i_i_i;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $243=$tri_i_i_i;
 var $$etemp$16$0=36;
 var $$etemp$16$1=0;

 var $244=_fopen($22,4320);
 var $245=($244|0)==0;
 if($245){var $storemerge4=1;label=251;break;}else{label=77;break;}
 case 77: 
 var $247=(($buf_i_i_i_i)|0);
 var $$etemp$17$0=81;
 var $$etemp$17$1=0;

 var $248=$strInput_i_i_i_i;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $249=$facenum_i_i_i_i;
 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $250=$attr_i_i_i_i;
 var $$etemp$20$0=2;
 var $$etemp$20$1=0;

 var $251=$norm_i_i_i_i;
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $252=$tri_i_i_i_i;
 var $$etemp$22$0=36;
 var $$etemp$22$1=0;

 var $253=__ZN3vcg3tri2io11ImporterSTLI6MyMeshE11IsSTLBinaryEPKc($22);
 if($253){label=78;break;}else{label=107;break;}
 case 78: 
 var $255=_fopen($22,4320);
 var $256=_fread($247,1,80,$255);
 var $257=_strlen($247);
 var $258=($257>>>0)>4294967279;
 if($258){label=79;break;}else{label=80;break;}
 case 79: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 80: 
 var $261=($257>>>0)<11;
 if($261){label=81;break;}else{label=82;break;}
 case 81: 
 var $263=$257<<1;
 var $264=(($263)&255);
 HEAP8[(($248)>>0)]=$264;
 var $265=$strInput_i_i_i_i;
 var $266=(($265+1)|0);
 var $__p_0_i_i_i_i_i=$266;label=87;break;
 case 82: 
 var $267=((($257)+(16))|0);
 var $268=$267&-16;
 var $269=($268|0)==0;
 var $_size_i_i_i_i_i=($269?1:$268);
 var $270=_malloc($_size_i_i_i_i_i);
 var $271=($270|0)==0;
 if($271){label=83;break;}else{var $_lcssa_i_i_i_i_i=$270;label=86;break;}
 case 83: 
 var $272=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $273=($272|0)==0;
 if($273){label=85;break;}else{label=84;break;}
 case 84: 
 var $275=$272;
 FUNCTION_TABLE[$275]();
 var $276=_malloc($_size_i_i_i_i_i);
 var $277=($276|0)==0;
 if($277){label=83;break;}else{var $_lcssa_i_i_i_i_i=$276;label=86;break;}
 case 85: 
 var $279=___cxa_allocate_exception(4);
 var $280=$279;
 HEAP32[(($280)>>2)]=15192;
 ___cxa_throw($279,26096,(782));
 throw "Reached an unreachable!";
 case 86: 
 var $_lcssa_i_i_i_i_i;
 var $281=(($strInput_i_i_i_i+8)|0);
 HEAP32[(($281)>>2)]=$_lcssa_i_i_i_i_i;
 var $282=$268|1;
 var $283=(($strInput_i_i_i_i)|0);
 HEAP32[(($283)>>2)]=$282;
 var $284=(($strInput_i_i_i_i+4)|0);
 HEAP32[(($284)>>2)]=$257;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i_i_i_i;label=87;break;
 case 87: 
 var $__p_0_i_i_i_i_i;
 assert($257 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $247, $257)|0);
 var $285=(($__p_0_i_i_i_i_i+$257)|0);
 HEAP8[(($285)>>0)]=0;
 var $286=HEAP8[(($248)>>0)];
 var $287=$286&1;
 var $288=(($287<<24)>>24)==0;
 if($288){label=89;break;}else{label=88;break;}
 case 88: 
 var $290=(($strInput_i_i_i_i+8)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(($strInput_i_i_i_i+4)|0);
 var $293=HEAP32[(($292)>>2)];
 var $300=$293;var $299=$291;label=90;break;
 case 89: 
 var $295=$strInput_i_i_i_i;
 var $296=(($295+1)|0);
 var $297=($286&255);
 var $298=$297>>>1;
 var $300=$298;var $299=$296;label=90;break;
 case 90: 
 var $299;
 var $300;
 var $301=_strlen(9176);
 var $302=($300|0)==-1;
 var $303=($302?-1:$300);
 var $304=((($300)-($303))|0);
 var $305=($301>>>0)<($304>>>0);
 var $306=((($303)+($301))|0);
 var $_=($305?$306:$300);
 var $307=(($299+$_)|0);
 var $308=((9176+$301)|0);
 var $309=(function() { try { __THREW__ = 0; return __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($299,$307,9176,$308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=93;break; }
 case 91: 
 var $311=($301|0)!=0;
 var $312=($309|0)==($307|0);
 var $or_cond=$311&$312;
 if($or_cond){var $storemerge5_i_i_i_i=-1;label=94;break;}else{label=92;break;}
 case 92: 
 var $314=$309;
 var $315=$299;
 var $316=((($314)-($315))|0);
 var $storemerge5_i_i_i_i=$316;label=94;break;
 case 93: 
 var $318$0 = ___cxa_find_matching_catch(0); var $318$1 = tempRet0;
 var $319=$318$0;
 ___clang_call_terminate($319);
 throw "Reached an unreachable!";
 case 94: 
 var $storemerge5_i_i_i_i;
 if($288){label=96;break;}else{label=95;break;}
 case 95: 
 var $321=(($strInput_i_i_i_i+8)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($strInput_i_i_i_i+4)|0);
 var $324=HEAP32[(($323)>>2)];
 var $331=$324;var $330=$322;label=97;break;
 case 96: 
 var $326=$strInput_i_i_i_i;
 var $327=(($326+1)|0);
 var $328=($286&255);
 var $329=$328>>>1;
 var $331=$329;var $330=$327;label=97;break;
 case 97: 
 var $330;
 var $331;
 var $332=_strlen(9136);
 var $333=($331|0)==-1;
 var $334=($333?-1:$331);
 var $335=((($331)-($334))|0);
 var $336=($332>>>0)<($335>>>0);
 var $337=((($334)+($332))|0);
 var $_46=($336?$337:$331);
 var $338=(($330+$_46)|0);
 var $339=((9136+$332)|0);
 var $340=(function() { try { __THREW__ = 0; return __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($330,$338,9136,$339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 var $341=($332|0)!=0;
 var $342=($340|0)==($338|0);
 var $or_cond47=$341&$342;
 var $343=($storemerge5_i_i_i_i|0)==-1;
 var $344=_fread($249,4,1,$255);
 var $345=HEAP32[(($facenum_i_i_i_i)>>2)];
 var $346=($345|0)>1000;
 var $347=(($tri_i_i_i_i)|0);
 var $348=(($tri_i_i_i_i+36)|0);
 var $storemerge2_i_i_i_i=0;label=100;break;
 case 99: 
 var $350$0 = ___cxa_find_matching_catch(0); var $350$1 = tempRet0;
 var $351=$350$0;
 ___clang_call_terminate($351);
 throw "Reached an unreachable!";
 case 100: 
 var $storemerge2_i_i_i_i;
 var $_48=($346?1000:$345);
 var $352=($storemerge2_i_i_i_i|0)<($_48|0);
 if($352){var $354=$347;label=101;break;}else{var $storemerge3_i_i_i_i=0;label=104;break;}
 case 101: 
 var $354;
 var $355=(($354+12)|0);
 var $356=($355|0)==($348|0);
 if($356){label=102;break;}else{var $354=$355;label=101;break;}
 case 102: 
 var $358=_fread($251,12,1,$255);
 var $359=_fread($252,12,3,$255);
 var $360=_fread($250,2,1,$255);
 var $361=HEAP16[(($attr_i_i_i_i)>>1)];
 var $362=(($361<<16)>>16)==0;
 if($362){label=103;break;}else{var $storemerge3_i_i_i_i=1;label=104;break;}
 case 103: 
 var $364=((($storemerge2_i_i_i_i)+(1))|0);
 var $storemerge2_i_i_i_i=$364;label=100;break;
 case 104: 
 var $storemerge3_i_i_i_i;
 var $365=HEAP8[(($248)>>0)];
 var $366=$365&1;
 var $367=(($366<<24)>>24)==0;
 if($367){label=106;break;}else{label=105;break;}
 case 105: 
 var $369=(($strInput_i_i_i_i+8)|0);
 var $370=HEAP32[(($369)>>2)];
 _free($370);
 label=106;break;
 case 106: 
 var $$etemp$23$0=81;
 var $$etemp$23$1=0;

 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $$etemp$25$0=4;
 var $$etemp$25$1=0;

 var $$etemp$26$0=2;
 var $$etemp$26$1=0;

 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $$etemp$28$0=36;
 var $$etemp$28$1=0;

 if($storemerge3_i_i_i_i){label=108;break;}else{label=107;break;}
 case 107: 
 var $371=HEAP32[(($loadmask)>>2)];
 var $372=$371&-257;
 HEAP32[(($loadmask)>>2)]=$372;
 label=108;break;
 case 108: 
 var $374=_fseek($244,80,0);
 var $375=_fread($238,4,1,$244);
 var $376=(($this)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($376);
 var $377=HEAP32[(($facenum_i_i_i)>>2)];
 __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($fi_i_i_i,$11,$377);
 var $378=((($377)*(3))&-1);
 __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($vi_i_i_i,$11,$378);
 var $379=(($tri_i_i_i)|0);
 var $380=(($tri_i_i_i+36)|0);
 var $381=(($vi_i_i_i)|0);
 var $382=(($fi_i_i_i)|0);
 var $storemerge_i_i40_i=0;label=109;break;
 case 109: 
 var $storemerge_i_i40_i;
 var $384=($storemerge_i_i40_i|0)<($377|0);
 if($384){var $386=$379;label=110;break;}else{label=117;break;}
 case 110: 
 var $386;
 var $387=(($386+12)|0);
 var $388=($387|0)==($380|0);
 if($388){label=111;break;}else{var $386=$387;label=110;break;}
 case 111: 
 var $390=_fread($242,12,1,$244);
 var $391=_fread($243,12,3,$244);
 var $392=_fread($241,2,1,$244);
 var $393=HEAP32[(($382)>>2)];
 var $storemerge1_i_i_i=0;label=112;break;
 case 112: 
 var $storemerge1_i_i_i;
 var $395=($storemerge1_i_i_i|0)<3;
 if($395){label=113;break;}else{label=116;break;}
 case 113: 
 var $396=HEAP32[(($381)>>2)];
 var $397=(($tri_i_i_i+((($storemerge1_i_i_i)*(12))&-1))|0);
 var $398=HEAPF32[(($397)>>2)];
 var $399=(($396)|0);
 HEAPF32[(($399)>>2)]=$398;
 var $400=(($tri_i_i_i+((($storemerge1_i_i_i)*(12))&-1)+4)|0);
 var $401=HEAPF32[(($400)>>2)];
 var $402=(($396+4)|0);
 HEAPF32[(($402)>>2)]=$401;
 var $403=(($tri_i_i_i+((($storemerge1_i_i_i)*(12))&-1)+8)|0);
 var $404=HEAPF32[(($403)>>2)];
 var $405=(($396+8)|0);
 HEAPF32[(($405)>>2)]=$404;
 var $406=($storemerge1_i_i_i|0)>-1;
 if($406){label=115;break;}else{label=114;break;}
 case 114: 
 ___assert_fail(9184,8624,173,10320);
 throw "Reached an unreachable!";
 case 115: 
 var $408=(($393+16+($storemerge1_i_i_i<<2))|0);
 HEAP32[(($408)>>2)]=$396;
 var $409=(($396+28)|0);
 HEAP32[(($381)>>2)]=$409;
 var $410=((($storemerge1_i_i_i)+(1))|0);
 var $storemerge1_i_i_i=$410;label=112;break;
 case 116: 
 var $412=(($393+32)|0);
 HEAP32[(($382)>>2)]=$412;
 var $413=((($storemerge_i_i40_i)+(1))|0);
 var $storemerge_i_i40_i=$413;label=109;break;
 case 117: 
 var $415=_fclose($244);
 var $storemerge4=0;label=251;break;
 case 118: 
 var $417=$f_i_i_i;
 var $$etemp$29$0=48;
 var $$etemp$29$1=0;

 var $418=$fi_i2_i_i;
 var $$etemp$30$0=4;
 var $$etemp$30$1=0;

 var $419=$vi_i3_i_i;
 var $$etemp$31$0=4;
 var $$etemp$31$1=0;

 var $420=_fopen($22,1064);
 var $421=($420|0)==0;
 if($421){var $storemerge4=1;label=251;break;}else{label=119;break;}
 case 119: 
 var $423=_ftell($420);
 var $424=_fseek($420,0,2);
 var $425=_ftell($420);
 var $426=_fseek($420,$423,0);
 var $427=(($this)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($427);
 label=120;break;
 case 120: 
 var $429=_getc($420);
 var $430=($429|0)==10;
 if($430){label=121;break;}else{label=120;break;}
 case 121: 
 var $432=(($f_i_i_i+12)|0);
 var $433=(($f_i_i_i+48)|0);
 var $435=$432;label=122;break;
 case 122: 
 var $435;
 var $436=(($435+12)|0);
 var $437=($436|0)==($433|0);
 if($437){label=123;break;}else{var $435=$436;label=122;break;}
 case 123: 
 var $438=(($f_i_i_i)|0);
 var $439=(($f_i_i_i+4)|0);
 var $440=(($f_i_i_i+8)|0);
 var $441=(($f_i_i_i+12)|0);
 var $442=(($f_i_i_i+16)|0);
 var $443=(($f_i_i_i+20)|0);
 var $444=(($f_i_i_i+24)|0);
 var $445=(($f_i_i_i+28)|0);
 var $446=(($f_i_i_i+32)|0);
 var $447=(($f_i_i_i+36)|0);
 var $448=(($f_i_i_i+40)|0);
 var $449=(($f_i_i_i+44)|0);
 var $450=(($vi_i3_i_i)|0);
 var $451=(($fi_i2_i_i)|0);
 var $lineCnt_i_i_i_0=0;label=124;break;
 case 124: 
 var $lineCnt_i_i_i_0;
 var $452=_feof($420);
 var $453=($452|0)==0;
 if($453){label=125;break;}else{label=136;break;}
 case 125: 
 var $455=_fscanf($420,9416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$438,HEAP32[(((tempVarArgs)+(8))>>2)]=$439,HEAP32[(((tempVarArgs)+(16))>>2)]=$440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $456=($455|0)==3;
 if($456){label=127;break;}else{label=126;break;}
 case 126: 
 var $458=((($lineCnt_i_i_i_0)+(1))|0);
 var $lineCnt_i_i_i_0=$458;label=124;break;
 case 127: 
 var $460=_fscanf($420,9376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $461=_fscanf($420,9280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$441,HEAP32[(((tempVarArgs)+(8))>>2)]=$442,HEAP32[(((tempVarArgs)+(16))>>2)]=$443,tempVarArgs)); STACKTOP=tempVarArgs;
 var $462=($461|0)==3;
 if($462){label=128;break;}else{var $storemerge4=2;label=251;break;}
 case 128: 
 var $464=_fscanf($420,9280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$444,HEAP32[(((tempVarArgs)+(8))>>2)]=$445,HEAP32[(((tempVarArgs)+(16))>>2)]=$446,tempVarArgs)); STACKTOP=tempVarArgs;
 var $465=($464|0)==3;
 if($465){label=129;break;}else{var $storemerge4=2;label=251;break;}
 case 129: 
 var $467=_fscanf($420,9280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$447,HEAP32[(((tempVarArgs)+(8))>>2)]=$448,HEAP32[(((tempVarArgs)+(16))>>2)]=$449,tempVarArgs)); STACKTOP=tempVarArgs;
 var $468=($467|0)==3;
 if($468){label=130;break;}else{var $storemerge4=2;label=251;break;}
 case 130: 
 var $470=_fscanf($420,9248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $471=_fscanf($420,9248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $472=((($lineCnt_i_i_i_0)+(7))|0);
 var $473=_feof($420);
 var $474=($473|0)==0;
 if($474){label=131;break;}else{label=136;break;}
 case 131: 
 __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($fi_i2_i_i,$11,1);
 __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($vi_i3_i_i,$11,3);
 var $476=HEAP32[(($451)>>2)];
 var $storemerge_i5_i_i=0;label=132;break;
 case 132: 
 var $storemerge_i5_i_i;
 var $478=($storemerge_i5_i_i|0)<3;
 if($478){label=133;break;}else{var $lineCnt_i_i_i_0=$472;label=124;break;}
 case 133: 
 var $479=HEAP32[(($450)>>2)];
 var $480=(($f_i_i_i+12+((($storemerge_i5_i_i)*(12))&-1))|0);
 var $481=HEAPF32[(($480)>>2)];
 var $482=(($479)|0);
 HEAPF32[(($482)>>2)]=$481;
 var $483=(($f_i_i_i+12+((($storemerge_i5_i_i)*(12))&-1)+4)|0);
 var $484=HEAPF32[(($483)>>2)];
 var $485=(($479+4)|0);
 HEAPF32[(($485)>>2)]=$484;
 var $486=(($f_i_i_i+12+((($storemerge_i5_i_i)*(12))&-1)+8)|0);
 var $487=HEAPF32[(($486)>>2)];
 var $488=(($479+8)|0);
 HEAPF32[(($488)>>2)]=$487;
 var $489=($storemerge_i5_i_i|0)>-1;
 if($489){label=135;break;}else{label=134;break;}
 case 134: 
 ___assert_fail(9184,8624,173,10320);
 throw "Reached an unreachable!";
 case 135: 
 var $491=(($476+16+($storemerge_i5_i_i<<2))|0);
 HEAP32[(($491)>>2)]=$479;
 var $492=(($479+28)|0);
 HEAP32[(($450)>>2)]=$492;
 var $493=((($storemerge_i5_i_i)+(1))|0);
 var $storemerge_i5_i_i=$493;label=132;break;
 case 136: 
 var $495=_fclose($420);
 var $storemerge4=0;label=251;break;
 case 137: 
 var $lpad_loopexit35$0 = ___cxa_find_matching_catch(); var $lpad_loopexit35$1 = tempRet0;
 var $lpad_phi37$1=$lpad_loopexit35$1;var $lpad_phi37$0=$lpad_loopexit35$0;label=139;break;
 case 138: 
 var $lpad_nonloopexit36$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit36$1 = tempRet0;
 var $lpad_phi37$1=$lpad_nonloopexit36$1;var $lpad_phi37$0=$lpad_nonloopexit36$0;label=139;break;
 case 139: 
 var $lpad_phi37$0;
 var $lpad_phi37$1;
 var $497=$lpad_phi37$0;
 var $498=$lpad_phi37$1;
 var $_1=$498;var $_19=$497;label=142;break;
 case 140: 
 var $500$0 = ___cxa_find_matching_catch(); var $500$1 = tempRet0;
 var $501=$500$0;
 var $502=$500$1;
 var $503=HEAP8[(($26)>>0)];
 var $504=$503&1;
 var $505=(($504<<24)>>24)==0;
 if($505){var $_1=$502;var $_19=$501;label=142;break;}else{label=141;break;}
 case 141: 
 var $507=(($4+8)|0);
 var $508=HEAP32[(($507)>>2)];
 _free($508);
 var $_1=$502;var $_19=$501;label=142;break;
 case 142: 
 var $_19;
 var $_1;
 var $509=HEAP8[(($25)>>0)];
 var $510=$509&1;
 var $511=(($510<<24)>>24)==0;
 if($511){var $_5=$_1;var $_513=$_19;label=250;break;}else{label=143;break;}
 case 143: 
 var $513=(($3+8)|0);
 var $514=HEAP32[(($513)>>2)];
 _free($514);
 var $_5=$_1;var $_513=$_19;label=250;break;
 case 144: 
 var $516=_strlen($22);
 var $517=($516>>>0)>4294967279;
 if($517){label=145;break;}else{label=146;break;}
 case 145: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 146: 
 var $520=($516>>>0)<11;
 if($520){label=147;break;}else{label=148;break;}
 case 147: 
 var $522=$516<<1;
 var $523=(($522)&255);
 HEAP8[(($27)>>0)]=$523;
 var $524=$5;
 var $525=(($524+1)|0);
 var $__p_0_i44_i=$525;label=153;break;
 case 148: 
 var $526=((($516)+(16))|0);
 var $527=$526&-16;
 var $528=($527|0)==0;
 var $_size_i46_i=($528?1:$527);
 var $529=_malloc($_size_i46_i);
 var $530=($529|0)==0;
 if($530){label=149;break;}else{var $_lcssa_i48_i=$529;label=152;break;}
 case 149: 
 var $531=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $532=($531|0)==0;
 if($532){label=151;break;}else{label=150;break;}
 case 150: 
 var $534=$531;
 FUNCTION_TABLE[$534]();
 var $535=_malloc($_size_i46_i);
 var $536=($535|0)==0;
 if($536){label=149;break;}else{var $_lcssa_i48_i=$535;label=152;break;}
 case 151: 
 var $538=___cxa_allocate_exception(4);
 var $539=$538;
 HEAP32[(($539)>>2)]=15192;
 ___cxa_throw($538,26096,(782));
 throw "Reached an unreachable!";
 case 152: 
 var $_lcssa_i48_i;
 var $540=(($5+8)|0);
 HEAP32[(($540)>>2)]=$_lcssa_i48_i;
 var $541=$527|1;
 var $542=(($5)|0);
 HEAP32[(($542)>>2)]=$541;
 var $543=(($5+4)|0);
 HEAP32[(($543)>>2)]=$516;
 var $__p_0_i44_i=$_lcssa_i48_i;label=153;break;
 case 153: 
 var $__p_0_i44_i;
 assert($516 % 1 === 0);(_memcpy($__p_0_i44_i, $22, $516)|0);
 var $544=(($__p_0_i44_i+$516)|0);
 HEAP8[(($544)>>0)]=0;
 var $545=_strlen(7024);
 var $546=($545>>>0)>4294967279;
 if($546){label=154;break;}else{label=156;break;}
 case 154: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=155;break; } else { label=173;break; }
 case 155: 
 throw "Reached an unreachable!";
 case 156: 
 var $549=($545>>>0)<11;
 if($549){label=157;break;}else{label=158;break;}
 case 157: 
 var $551=$545<<1;
 var $552=(($551)&255);
 HEAP8[(($28)>>0)]=$552;
 var $553=$6;
 var $554=(($553+1)|0);
 var $__p_0_i53_i=$554;label=165;break;
 case 158: 
 var $555=((($545)+(16))|0);
 var $556=$555&-16;
 var $557=($556|0)==0;
 var $_size_i57_i=($557?1:$556);
 var $558=_malloc($_size_i57_i);
 var $559=($558|0)==0;
 if($559){label=159;break;}else{var $_lcssa_i59_i=$558;label=164;break;}
 case 159: 
 var $560=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $561=($560|0)==0;
 if($561){label=162;break;}else{label=160;break;}
 case 160: 
 var $563=$560;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$563]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=161;break; } else { label=172;break; }
 case 161: 
 var $564=_malloc($_size_i57_i);
 var $565=($564|0)==0;
 if($565){label=159;break;}else{var $_lcssa_i59_i=$564;label=164;break;}
 case 162: 
 var $567=___cxa_allocate_exception(4);
 var $568=$567;
 HEAP32[(($568)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($567,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=173;break; }
 case 163: 
 throw "Reached an unreachable!";
 case 164: 
 var $_lcssa_i59_i;
 var $569=(($6+8)|0);
 HEAP32[(($569)>>2)]=$_lcssa_i59_i;
 var $570=$556|1;
 var $571=(($6)|0);
 HEAP32[(($571)>>2)]=$570;
 var $572=(($6+4)|0);
 HEAP32[(($572)>>2)]=$545;
 var $__p_0_i53_i=$_lcssa_i59_i;label=165;break;
 case 165: 
 var $__p_0_i53_i;
 assert($545 % 1 === 0);(_memcpy($__p_0_i53_i, 7024, $545)|0);
 var $573=(($__p_0_i53_i+$545)|0);
 HEAP8[(($573)>>0)]=0;
 var $574=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($5,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=175;break; }
 case 166: 
 var $576=HEAP8[(($28)>>0)];
 var $577=$576&1;
 var $578=(($577<<24)>>24)==0;
 if($578){label=168;break;}else{label=167;break;}
 case 167: 
 var $580=(($6+8)|0);
 var $581=HEAP32[(($580)>>2)];
 _free($581);
 label=168;break;
 case 168: 
 var $582=HEAP8[(($27)>>0)];
 var $583=$582&1;
 var $584=(($583<<24)>>24)==0;
 if($584){label=170;break;}else{label=169;break;}
 case 169: 
 var $586=(($5+8)|0);
 var $587=HEAP32[(($586)>>2)];
 _free($587);
 label=170;break;
 case 170: 
 if($574){label=171;break;}else{label=179;break;}
 case 171: 
 var $589=__ZN3vcg3tri2io11ImporterOFFI6MyMeshE4OpenERS3_PKcRiPFbiS7_E($11,$22,$loadmask,0);
 var $storemerge4=$589;label=251;break;
 case 172: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(); var $lpad_loopexit30$1 = tempRet0;
 var $lpad_phi32$1=$lpad_loopexit30$1;var $lpad_phi32$0=$lpad_loopexit30$0;label=174;break;
 case 173: 
 var $lpad_nonloopexit31$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit31$1 = tempRet0;
 var $lpad_phi32$1=$lpad_nonloopexit31$1;var $lpad_phi32$0=$lpad_nonloopexit31$0;label=174;break;
 case 174: 
 var $lpad_phi32$0;
 var $lpad_phi32$1;
 var $591=$lpad_phi32$0;
 var $592=$lpad_phi32$1;
 var $_2=$592;var $_210=$591;label=177;break;
 case 175: 
 var $594$0 = ___cxa_find_matching_catch(); var $594$1 = tempRet0;
 var $595=$594$0;
 var $596=$594$1;
 var $597=HEAP8[(($28)>>0)];
 var $598=$597&1;
 var $599=(($598<<24)>>24)==0;
 if($599){var $_2=$596;var $_210=$595;label=177;break;}else{label=176;break;}
 case 176: 
 var $601=(($6+8)|0);
 var $602=HEAP32[(($601)>>2)];
 _free($602);
 var $_2=$596;var $_210=$595;label=177;break;
 case 177: 
 var $_210;
 var $_2;
 var $603=HEAP8[(($27)>>0)];
 var $604=$603&1;
 var $605=(($604<<24)>>24)==0;
 if($605){var $_5=$_2;var $_513=$_210;label=250;break;}else{label=178;break;}
 case 178: 
 var $607=(($5+8)|0);
 var $608=HEAP32[(($607)>>2)];
 _free($608);
 var $_5=$_2;var $_513=$_210;label=250;break;
 case 179: 
 var $610=_strlen($22);
 var $611=($610>>>0)>4294967279;
 if($611){label=180;break;}else{label=181;break;}
 case 180: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 181: 
 var $614=($610>>>0)<11;
 if($614){label=182;break;}else{label=183;break;}
 case 182: 
 var $616=$610<<1;
 var $617=(($616)&255);
 HEAP8[(($29)>>0)]=$617;
 var $618=$7;
 var $619=(($618+1)|0);
 var $__p_0_i68_i=$619;label=188;break;
 case 183: 
 var $620=((($610)+(16))|0);
 var $621=$620&-16;
 var $622=($621|0)==0;
 var $_size_i70_i=($622?1:$621);
 var $623=_malloc($_size_i70_i);
 var $624=($623|0)==0;
 if($624){label=184;break;}else{var $_lcssa_i72_i=$623;label=187;break;}
 case 184: 
 var $625=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $626=($625|0)==0;
 if($626){label=186;break;}else{label=185;break;}
 case 185: 
 var $628=$625;
 FUNCTION_TABLE[$628]();
 var $629=_malloc($_size_i70_i);
 var $630=($629|0)==0;
 if($630){label=184;break;}else{var $_lcssa_i72_i=$629;label=187;break;}
 case 186: 
 var $632=___cxa_allocate_exception(4);
 var $633=$632;
 HEAP32[(($633)>>2)]=15192;
 ___cxa_throw($632,26096,(782));
 throw "Reached an unreachable!";
 case 187: 
 var $_lcssa_i72_i;
 var $634=(($7+8)|0);
 HEAP32[(($634)>>2)]=$_lcssa_i72_i;
 var $635=$621|1;
 var $636=(($7)|0);
 HEAP32[(($636)>>2)]=$635;
 var $637=(($7+4)|0);
 HEAP32[(($637)>>2)]=$610;
 var $__p_0_i68_i=$_lcssa_i72_i;label=188;break;
 case 188: 
 var $__p_0_i68_i;
 assert($610 % 1 === 0);(_memcpy($__p_0_i68_i, $22, $610)|0);
 var $638=(($__p_0_i68_i+$610)|0);
 HEAP8[(($638)>>0)]=0;
 var $639=_strlen(6680);
 var $640=($639>>>0)>4294967279;
 if($640){label=189;break;}else{label=191;break;}
 case 189: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=190;break; } else { label=208;break; }
 case 190: 
 throw "Reached an unreachable!";
 case 191: 
 var $643=($639>>>0)<11;
 if($643){label=192;break;}else{label=193;break;}
 case 192: 
 var $645=$639<<1;
 var $646=(($645)&255);
 HEAP8[(($30)>>0)]=$646;
 var $647=$8;
 var $648=(($647+1)|0);
 var $__p_0_i77_i=$648;label=200;break;
 case 193: 
 var $649=((($639)+(16))|0);
 var $650=$649&-16;
 var $651=($650|0)==0;
 var $_size_i81_i=($651?1:$650);
 var $652=_malloc($_size_i81_i);
 var $653=($652|0)==0;
 if($653){label=194;break;}else{var $_lcssa_i83_i=$652;label=199;break;}
 case 194: 
 var $654=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $655=($654|0)==0;
 if($655){label=197;break;}else{label=195;break;}
 case 195: 
 var $657=$654;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$657]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=207;break; }
 case 196: 
 var $658=_malloc($_size_i81_i);
 var $659=($658|0)==0;
 if($659){label=194;break;}else{var $_lcssa_i83_i=$658;label=199;break;}
 case 197: 
 var $661=___cxa_allocate_exception(4);
 var $662=$661;
 HEAP32[(($662)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($661,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=198;break; } else { label=208;break; }
 case 198: 
 throw "Reached an unreachable!";
 case 199: 
 var $_lcssa_i83_i;
 var $663=(($8+8)|0);
 HEAP32[(($663)>>2)]=$_lcssa_i83_i;
 var $664=$650|1;
 var $665=(($8)|0);
 HEAP32[(($665)>>2)]=$664;
 var $666=(($8+4)|0);
 HEAP32[(($666)>>2)]=$639;
 var $__p_0_i77_i=$_lcssa_i83_i;label=200;break;
 case 200: 
 var $__p_0_i77_i;
 assert($639 % 1 === 0);(_memcpy($__p_0_i77_i, 6680, $639)|0);
 var $667=(($__p_0_i77_i+$639)|0);
 HEAP8[(($667)>>0)]=0;
 var $668=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($7,$8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=201;break; } else { label=210;break; }
 case 201: 
 var $670=HEAP8[(($30)>>0)];
 var $671=$670&1;
 var $672=(($671<<24)>>24)==0;
 if($672){label=203;break;}else{label=202;break;}
 case 202: 
 var $674=(($8+8)|0);
 var $675=HEAP32[(($674)>>2)];
 _free($675);
 label=203;break;
 case 203: 
 var $676=HEAP8[(($29)>>0)];
 var $677=$676&1;
 var $678=(($677<<24)>>24)==0;
 if($678){label=205;break;}else{label=204;break;}
 case 204: 
 var $680=(($7+8)|0);
 var $681=HEAP32[(($680)>>2)];
 _free($681);
 label=205;break;
 case 205: 
 if($668){label=206;break;}else{label=214;break;}
 case 206: 
 var $683=$oi_i_i;
 var $$etemp$32$0=28;
 var $$etemp$32$1=0;

 var $684=(($oi_i_i)|0);
 var $685=(($oi_i_i+4)|0);
 var $686=(($oi_i_i+20)|0);
 HEAP32[(($686)>>2)]=0;
 HEAP32[(($684)>>2)]=-1;
 HEAP32[(($685)>>2)]=0;
 var $687=__ZN3vcg3tri2io11ImporterOBJI6MyMeshE4OpenERS3_PKcRNS4_4InfoE($11,$22,$oi_i_i);
 var $688=HEAP32[(($684)>>2)];
 HEAP32[(($loadmask)>>2)]=$688;
 var $$etemp$33$0=28;
 var $$etemp$33$1=0;

 var $storemerge4=$687;label=251;break;
 case 207: 
 var $lpad_loopexit25$0 = ___cxa_find_matching_catch(); var $lpad_loopexit25$1 = tempRet0;
 var $lpad_phi27$1=$lpad_loopexit25$1;var $lpad_phi27$0=$lpad_loopexit25$0;label=209;break;
 case 208: 
 var $lpad_nonloopexit26$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit26$1 = tempRet0;
 var $lpad_phi27$1=$lpad_nonloopexit26$1;var $lpad_phi27$0=$lpad_nonloopexit26$0;label=209;break;
 case 209: 
 var $lpad_phi27$0;
 var $lpad_phi27$1;
 var $690=$lpad_phi27$0;
 var $691=$lpad_phi27$1;
 var $_3=$691;var $_311=$690;label=212;break;
 case 210: 
 var $693$0 = ___cxa_find_matching_catch(); var $693$1 = tempRet0;
 var $694=$693$0;
 var $695=$693$1;
 var $696=HEAP8[(($30)>>0)];
 var $697=$696&1;
 var $698=(($697<<24)>>24)==0;
 if($698){var $_3=$695;var $_311=$694;label=212;break;}else{label=211;break;}
 case 211: 
 var $700=(($8+8)|0);
 var $701=HEAP32[(($700)>>2)];
 _free($701);
 var $_3=$695;var $_311=$694;label=212;break;
 case 212: 
 var $_311;
 var $_3;
 var $702=HEAP8[(($29)>>0)];
 var $703=$702&1;
 var $704=(($703<<24)>>24)==0;
 if($704){var $_5=$_3;var $_513=$_311;label=250;break;}else{label=213;break;}
 case 213: 
 var $706=(($7+8)|0);
 var $707=HEAP32[(($706)>>2)];
 _free($707);
 var $_5=$_3;var $_513=$_311;label=250;break;
 case 214: 
 var $709=_strlen($22);
 var $710=($709>>>0)>4294967279;
 if($710){label=215;break;}else{label=216;break;}
 case 215: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 216: 
 var $713=($709>>>0)<11;
 if($713){label=217;break;}else{label=218;break;}
 case 217: 
 var $715=$709<<1;
 var $716=(($715)&255);
 HEAP8[(($31)>>0)]=$716;
 var $717=$9;
 var $718=(($717+1)|0);
 var $__p_0_i92_i=$718;label=223;break;
 case 218: 
 var $719=((($709)+(16))|0);
 var $720=$719&-16;
 var $721=($720|0)==0;
 var $_size_i94_i=($721?1:$720);
 var $722=_malloc($_size_i94_i);
 var $723=($722|0)==0;
 if($723){label=219;break;}else{var $_lcssa_i96_i=$722;label=222;break;}
 case 219: 
 var $724=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $725=($724|0)==0;
 if($725){label=221;break;}else{label=220;break;}
 case 220: 
 var $727=$724;
 FUNCTION_TABLE[$727]();
 var $728=_malloc($_size_i94_i);
 var $729=($728|0)==0;
 if($729){label=219;break;}else{var $_lcssa_i96_i=$728;label=222;break;}
 case 221: 
 var $731=___cxa_allocate_exception(4);
 var $732=$731;
 HEAP32[(($732)>>2)]=15192;
 ___cxa_throw($731,26096,(782));
 throw "Reached an unreachable!";
 case 222: 
 var $_lcssa_i96_i;
 var $733=(($9+8)|0);
 HEAP32[(($733)>>2)]=$_lcssa_i96_i;
 var $734=$720|1;
 var $735=(($9)|0);
 HEAP32[(($735)>>2)]=$734;
 var $736=(($9+4)|0);
 HEAP32[(($736)>>2)]=$709;
 var $__p_0_i92_i=$_lcssa_i96_i;label=223;break;
 case 223: 
 var $__p_0_i92_i;
 assert($709 % 1 === 0);(_memcpy($__p_0_i92_i, $22, $709)|0);
 var $737=(($__p_0_i92_i+$709)|0);
 HEAP8[(($737)>>0)]=0;
 var $738=_strlen(6424);
 var $739=($738>>>0)>4294967279;
 if($739){label=224;break;}else{label=226;break;}
 case 224: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=225;break; } else { label=244;break; }
 case 225: 
 throw "Reached an unreachable!";
 case 226: 
 var $742=($738>>>0)<11;
 if($742){label=227;break;}else{label=228;break;}
 case 227: 
 var $744=$738<<1;
 var $745=(($744)&255);
 HEAP8[(($32)>>0)]=$745;
 var $746=$10;
 var $747=(($746+1)|0);
 var $__p_0_i101_i=$747;label=235;break;
 case 228: 
 var $748=((($738)+(16))|0);
 var $749=$748&-16;
 var $750=($749|0)==0;
 var $_size_i105_i=($750?1:$749);
 var $751=_malloc($_size_i105_i);
 var $752=($751|0)==0;
 if($752){label=229;break;}else{var $_lcssa_i107_i=$751;label=234;break;}
 case 229: 
 var $753=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $754=($753|0)==0;
 if($754){label=232;break;}else{label=230;break;}
 case 230: 
 var $756=$753;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$756]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=231;break; } else { label=243;break; }
 case 231: 
 var $757=_malloc($_size_i105_i);
 var $758=($757|0)==0;
 if($758){label=229;break;}else{var $_lcssa_i107_i=$757;label=234;break;}
 case 232: 
 var $760=___cxa_allocate_exception(4);
 var $761=$760;
 HEAP32[(($761)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($760,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=233;break; } else { label=244;break; }
 case 233: 
 throw "Reached an unreachable!";
 case 234: 
 var $_lcssa_i107_i;
 var $762=(($10+8)|0);
 HEAP32[(($762)>>2)]=$_lcssa_i107_i;
 var $763=$749|1;
 var $764=(($10)|0);
 HEAP32[(($764)>>2)]=$763;
 var $765=(($10+4)|0);
 HEAP32[(($765)>>2)]=$738;
 var $__p_0_i101_i=$_lcssa_i107_i;label=235;break;
 case 235: 
 var $__p_0_i101_i;
 assert($738 % 1 === 0);(_memcpy($__p_0_i101_i, 6424, $738)|0);
 var $766=(($__p_0_i101_i+$738)|0);
 HEAP8[(($766)>>0)]=0;
 var $767=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($9,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=236;break; } else { label=246;break; }
 case 236: 
 var $769=HEAP8[(($32)>>0)];
 var $770=$769&1;
 var $771=(($770<<24)>>24)==0;
 if($771){label=238;break;}else{label=237;break;}
 case 237: 
 var $773=(($10+8)|0);
 var $774=HEAP32[(($773)>>2)];
 _free($774);
 label=238;break;
 case 238: 
 var $775=HEAP8[(($31)>>0)];
 var $776=$775&1;
 var $777=(($776<<24)>>24)==0;
 if($777){label=240;break;}else{label=239;break;}
 case 239: 
 var $779=(($9+8)|0);
 var $780=HEAP32[(($779)>>2)];
 _free($780);
 label=240;break;
 case 240: 
 if($767){label=241;break;}else{var $storemerge4=1;label=251;break;}
 case 241: 
 HEAP32[((31592)>>2)]=1;
 var $782=_fopen($22,4320);
 HEAP32[((31608)>>2)]=$782;
 var $783=($782|0)==0;
 if($783){var $storemerge4=3;label=251;break;}else{label=242;break;}
 case 242: 
 var $785=__ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE11DeserializeERS3_Ri($11,$loadmask);
 var $786=HEAP32[((31608)>>2)];
 var $787=_fclose($786);
 var $storemerge4=$785;label=251;break;
 case 243: 
 var $lpad_loopexit20$0 = ___cxa_find_matching_catch(); var $lpad_loopexit20$1 = tempRet0;
 var $lpad_phi22$1=$lpad_loopexit20$1;var $lpad_phi22$0=$lpad_loopexit20$0;label=245;break;
 case 244: 
 var $lpad_nonloopexit21$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit21$1 = tempRet0;
 var $lpad_phi22$1=$lpad_nonloopexit21$1;var $lpad_phi22$0=$lpad_nonloopexit21$0;label=245;break;
 case 245: 
 var $lpad_phi22$0;
 var $lpad_phi22$1;
 var $789=$lpad_phi22$0;
 var $790=$lpad_phi22$1;
 var $_4=$790;var $_412=$789;label=248;break;
 case 246: 
 var $792$0 = ___cxa_find_matching_catch(); var $792$1 = tempRet0;
 var $793=$792$0;
 var $794=$792$1;
 var $795=HEAP8[(($32)>>0)];
 var $796=$795&1;
 var $797=(($796<<24)>>24)==0;
 if($797){var $_4=$794;var $_412=$793;label=248;break;}else{label=247;break;}
 case 247: 
 var $799=(($10+8)|0);
 var $800=HEAP32[(($799)>>2)];
 _free($800);
 var $_4=$794;var $_412=$793;label=248;break;
 case 248: 
 var $_412;
 var $_4;
 var $801=HEAP8[(($31)>>0)];
 var $802=$801&1;
 var $803=(($802<<24)>>24)==0;
 if($803){var $_5=$_4;var $_513=$_412;label=250;break;}else{label=249;break;}
 case 249: 
 var $805=(($9+8)|0);
 var $806=HEAP32[(($805)>>2)];
 _free($806);
 var $_5=$_4;var $_513=$_412;label=250;break;
 case 250: 
 var $_513;
 var $_5;
 var $807$0=$_513;
 var $807$1=0;
 var $808$0=$807$0;
 var $808$1=$_5;
 ___resumeException($808$0)
 case 251: 
 var $storemerge4;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $809=($storemerge4|0)==0;
 if($809){label=253;break;}else{label=252;break;}
 case 252: 
 var $puts=_puts(400);
 _exit(-1);
 throw "Reached an unreachable!";
 case 253: 
 var $812=(($this+44)|0);
 var $813=HEAP32[(($812)>>2)];
 var $814=(($this+12)|0);
 var $815=HEAP32[(($814)>>2)];
 var $816=_printf(7728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$813,HEAP32[(((tempVarArgs)+(8))>>2)]=$815,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN9MeshLabJs15getVertexNumberEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}

//Func
function __ZN9MeshLabJs13getFaceNumberEv($this){
 var label=0;


 var $1=(($this+44)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}

//Func
function __ZN9MeshLabJs13getFaceVectorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)*(3))&-1);
 var $4$0=_llvm_umul_with_overflow_i32($3,4);
 var $4$1=tempRet0;
 var $5=$4$1;
 var $6=$4$0;
 var $7=($5?-1:$6);
 var $8=($7|0)==0;
 var $_size_i=($8?1:$7);
 var $9=_malloc($_size_i);
 var $10=($9|0)==0;
 if($10){label=2;break;}else{var $_lcssa_i=$9;label=5;break;}
 case 2: 
 var $11=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $12=($11|0)==0;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=$11;
 FUNCTION_TABLE[$14]();
 var $15=_malloc($_size_i);
 var $16=($15|0)==0;
 if($16){label=2;break;}else{var $_lcssa_i=$15;label=5;break;}
 case 4: 
 var $18=___cxa_allocate_exception(4);
 var $19=$18;
 HEAP32[(($19)>>2)]=15192;
 ___cxa_throw($18,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i;
 var $20=$_lcssa_i;
 var $21=(($this+32)|0);
 var $22=(($this)|0);
 var $storemerge=0;var $k_0=0;label=6;break;
 case 6: 
 var $k_0;
 var $storemerge;
 var $24=HEAP32[(($1)>>2)];
 var $25=($storemerge|0)<($24|0);
 if($25){var $storemerge1=0;var $k_1=$k_0;label=7;break;}else{label=12;break;}
 case 7: 
 var $k_1;
 var $storemerge1;
 var $26=($storemerge1|0)<3;
 if($26){label=8;break;}else{label=11;break;}
 case 8: 
 var $28=HEAP32[(($21)>>2)];
 var $29=($storemerge1|0)>-1;
 if($29){label=10;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(9184,8624,174,10248);
 throw "Reached an unreachable!";
 case 10: 
 var $32=(($28+($storemerge<<5)+16+($storemerge1<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=HEAP32[(($22)>>2)];
 var $35=$33;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=(((($37|0))/(28))&-1);
 var $39=(($20+($k_1<<2))|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=((($k_1)+(1))|0);
 var $41=((($storemerge1)+(1))|0);
 var $storemerge1=$41;var $k_1=$40;label=7;break;
 case 11: 
 var $43=((($storemerge)+(1))|0);
 var $storemerge=$43;var $k_0=$k_1;label=6;break;
 case 12: 
 var $45=$_lcssa_i;
 return $45;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN9MeshLabJs15getVertexVectorEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)*(3))&-1);
 var $5$0=_llvm_umul_with_overflow_i32($4,4);
 var $5$1=tempRet0;
 var $6=$5$1;
 var $7=$5$0;
 var $8=($6?-1:$7);
 var $9=($8|0)==0;
 var $_size_i=($9?1:$8);
 var $10=_malloc($_size_i);
 var $11=($10|0)==0;
 if($11){label=2;break;}else{var $_lcssa_i=$10;label=5;break;}
 case 2: 
 var $12=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=$12;
 FUNCTION_TABLE[$15]();
 var $16=_malloc($_size_i);
 var $17=($16|0)==0;
 if($17){label=2;break;}else{var $_lcssa_i=$16;label=5;break;}
 case 4: 
 var $19=___cxa_allocate_exception(4);
 var $20=$19;
 HEAP32[(($20)>>2)]=15192;
 ___cxa_throw($19,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i;
 var $21=$_lcssa_i;
 var $22=(($this)|0);
 var $23=(($1)|0);
 var $24=(($1+4)|0);
 var $25=(($1+8)|0);
 var $storemerge=0;var $k_0=0;label=6;break;
 case 6: 
 var $k_0;
 var $storemerge;
 var $27=HEAP32[(($2)>>2)];
 var $28=($storemerge|0)<($27|0);
 if($28){var $storemerge1=0;var $k_1=$k_0;label=7;break;}else{label=12;break;}
 case 7: 
 var $k_1;
 var $storemerge1;
 var $29=($storemerge1|0)<3;
 if($29){label=8;break;}else{label=11;break;}
 case 8: 
 var $31=HEAP32[(($22)>>2)];
 var $32=(($31+((($storemerge)*(28))&-1))|0);
 var $33=HEAPF32[(($32)>>2)];
 HEAPF32[(($23)>>2)]=$33;
 var $34=(($31+((($storemerge)*(28))&-1)+4)|0);
 var $35=HEAPF32[(($34)>>2)];
 HEAPF32[(($24)>>2)]=$35;
 var $36=(($31+((($storemerge)*(28))&-1)+8)|0);
 var $37=HEAPF32[(($36)>>2)];
 HEAPF32[(($25)>>2)]=$37;
 var $38=($storemerge1|0)>-1;
 if($38){label=10;break;}else{label=9;break;}
 case 9: 
 ___assert_fail(10200,9640,220,1104);
 throw "Reached an unreachable!";
 case 10: 
 var $41=(($1+($storemerge1<<2))|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=(($21+($k_1<<2))|0);
 HEAPF32[(($43)>>2)]=$42;
 var $44=((($k_1)+(1))|0);
 var $45=((($storemerge1)+(1))|0);
 var $storemerge1=$45;var $k_1=$44;label=7;break;
 case 11: 
 var $47=((($storemerge)+(1))|0);
 var $storemerge=$47;var $k_0=$k_1;label=6;break;
 case 12: 
 var $49=$_lcssa_i;
 STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN9MeshLabJs7getMeshEv($this){
 var label=0;


 var $1=$this;
 return $1;
}

//Func
function __ZN10emscripten8internal13MethodInvokerIM9MeshLabJsFjvEjPS2_JEE6invokeERKS4_S5_($method,$wireThis){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=(($method)|0);
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$1$1;
 var $3=$2>>1;
 var $4=$wireThis;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$1$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $19=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 var $20=FUNCTION_TABLE[$19]($6);
 return $20;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal13MethodInvokerIM9MeshLabJsFivEiPS2_JEE6invokeERKS4_S5_($method,$wireThis){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=(($method)|0);
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$1$1;
 var $3=$2>>1;
 var $4=$wireThis;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$1$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $19=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 var $20=FUNCTION_TABLE[$19]($6);
 return $20;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal13MethodInvokerIM9MeshLabJsFiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $ld$0$0=(($method)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $3=$2$1;
 var $4=$3>>1;
 var $5=$wireThis;
 var $6=(($5+$4)|0);
 var $7=$6;
 var $8=$2$0;
 var $9=$3&1;
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=$6;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+$8)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=4;break;
 case 3: 
 var $18=$8;
 var $20=$18;label=4;break;
 case 4: 
 var $20;
 var $21=(($args+4)|0);
 var $22=(($args)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23>>>0)>4294967279;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 6: 
 var $27=($23>>>0)<11;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 var $29=$23<<1;
 var $30=(($29)&255);
 var $31=$1;
 HEAP8[(($31)>>0)]=$30;
 var $32=$1;
 var $33=(($32+1)|0);
 var $__p_0_i_i=$33;label=13;break;
 case 8: 
 var $34=((($23)+(16))|0);
 var $35=$34&-16;
 var $36=($35|0)==0;
 var $_size_i_i=($36?1:$35);
 var $37=_malloc($_size_i_i);
 var $38=($37|0)==0;
 if($38){label=9;break;}else{var $_lcssa_i_i=$37;label=12;break;}
 case 9: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=10;break;}
 case 10: 
 var $42=$39;
 FUNCTION_TABLE[$42]();
 var $43=_malloc($_size_i_i);
 var $44=($43|0)==0;
 if($44){label=9;break;}else{var $_lcssa_i_i=$43;label=12;break;}
 case 11: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 ___cxa_throw($46,26096,(782));
 throw "Reached an unreachable!";
 case 12: 
 var $_lcssa_i_i;
 var $48=(($1+8)|0);
 HEAP32[(($48)>>2)]=$_lcssa_i_i;
 var $49=$35|1;
 var $50=(($1)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=(($1+4)|0);
 HEAP32[(($51)>>2)]=$23;
 var $__p_0_i_i=$_lcssa_i_i;label=13;break;
 case 13: 
 var $__p_0_i_i;
 assert($23 % 1 === 0);(_memcpy($__p_0_i_i, $21, $23)|0);
 var $52=(($__p_0_i_i+$23)|0);
 HEAP8[(($52)>>0)]=0;
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$20]($7,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 var $55=$1;
 var $56=HEAP8[(($55)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=(($1+8)|0);
 var $61=HEAP32[(($60)>>2)];
 _free($61);
 label=16;break;
 case 16: 
 STACKTOP=sp;return $53;
 case 17: 
 var $63$0 = ___cxa_find_matching_catch(); var $63$1 = tempRet0;
 var $64=$1;
 var $65=HEAP8[(($64)>>0)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=19;break;}else{label=18;break;}
 case 18: 
 var $69=(($1+8)|0);
 var $70=HEAP32[(($69)>>2)];
 _free($70);
 label=19;break;
 case 19: 
 ___resumeException($63$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal12operator_newI9MeshLabJsJEEEPT_DpOT0_(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_malloc(304);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_lcssa_i=$1;label=5;break;}
 case 2: 
 var $3=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$3;
 FUNCTION_TABLE[$6]();
 var $7=_malloc(304);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i=$7;label=5;break;}
 case 4: 
 var $10=___cxa_allocate_exception(4);
 var $11=$10;
 HEAP32[(($11)>>2)]=15192;
 ___cxa_throw($10,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i;
 var $12=$_lcssa_i;
 HEAP32[(($12)>>2)]=0;
 var $13=(($_lcssa_i+4)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=0;
 var $15=(($_lcssa_i+8)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=0;
 var $17=(($_lcssa_i+16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=0;
 var $19=(($_lcssa_i+20)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=0;
 var $21=(($_lcssa_i+24)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=0;
 var $23=(($_lcssa_i+32)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=0;
 var $25=(($_lcssa_i+36)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=0;
 var $27=(($_lcssa_i+40)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=0;
 var $29=(($_lcssa_i+48)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=0;
 var $31=(($_lcssa_i+52)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=0;
 var $33=(($_lcssa_i+56)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $35=(($_lcssa_i+64)|0);
 var $36=$35;
 HEAPF32[(($36)>>2)]=1;
 var $37=(($_lcssa_i+76)|0);
 var $38=$37;
 HEAPF32[(($38)>>2)]=-1;
 var $39=(($_lcssa_i+68)|0);
 var $40=$39;
 HEAPF32[(($40)>>2)]=1;
 var $41=(($_lcssa_i+80)|0);
 var $42=$41;
 HEAPF32[(($42)>>2)]=-1;
 var $43=(($_lcssa_i+72)|0);
 var $44=$43;
 HEAPF32[(($44)>>2)]=1;
 var $45=(($_lcssa_i+84)|0);
 var $46=$45;
 HEAPF32[(($46)>>2)]=-1;
 var $47=(($_lcssa_i+88)|0);
 var $48=$47;
 var $49=(($_lcssa_i+92)|0);
 var $50=$49;
 var $51=(($_lcssa_i+100)|0);
 var $52=$51;
 var $53=(($_lcssa_i+104)|0);
 var $54=$53;
 var $55=(($_lcssa_i+116)|0);
 var $56=(($_lcssa_i+120)|0);
 var $57=$56;
 HEAP32[(($57)>>2)]=0;
 var $58=(($_lcssa_i+124)|0);
 var $59=$58;
 HEAP32[(($59)>>2)]=0;
 var $60=$56;
 var $61=$55;
 HEAP32[(($47)>>2)]=0; HEAP32[((($47)+(4))>>2)]=0; HEAP32[((($47)+(8))>>2)]=0; HEAP32[((($47)+(12))>>2)]=0; HEAP32[((($47)+(16))>>2)]=0; HEAP32[((($47)+(20))>>2)]=0;
 HEAP32[(($61)>>2)]=$60;
 var $62=(($_lcssa_i+128)|0);
 var $63=(($_lcssa_i+132)|0);
 var $64=$63;
 HEAP32[(($64)>>2)]=0;
 var $65=(($_lcssa_i+136)|0);
 var $66=$65;
 HEAP32[(($66)>>2)]=0;
 var $67=$63;
 var $68=$62;
 HEAP32[(($68)>>2)]=$67;
 var $69=(($_lcssa_i+140)|0);
 var $70=(($_lcssa_i+144)|0);
 var $71=$70;
 HEAP32[(($71)>>2)]=0;
 var $72=(($_lcssa_i+148)|0);
 var $73=$72;
 HEAP32[(($73)>>2)]=0;
 var $74=$70;
 var $75=$69;
 HEAP32[(($75)>>2)]=$74;
 var $76=(($_lcssa_i+152)|0);
 var $77=(($_lcssa_i+156)|0);
 var $78=$77;
 HEAP32[(($78)>>2)]=0;
 var $79=(($_lcssa_i+160)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=0;
 var $81=$77;
 var $82=$76;
 HEAP32[(($82)>>2)]=$81;
 var $83=(($_lcssa_i+164)|0);
 var $84=(($_lcssa_i+220)|0);
 var $85=$84;
 _memset($83, 0, 56)|0;
 (function() { try { __THREW__ = 0; return __ZN3vcg8Matrix44IfE11SetIdentityEv($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=6;break; }
 case 6: 
 var $87$0 = ___cxa_find_matching_catch(); var $87$1 = tempRet0;
 var $88=$76;
 var $89=HEAP32[(($78)>>2)];
 var $90=$89;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($88,$90);
 var $91=$69;
 var $92=HEAP32[(($71)>>2)];
 var $93=$92;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($91,$93);
 var $94=$62;
 var $95=HEAP32[(($64)>>2)];
 var $96=$95;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($94,$96);
 var $97=$55;
 var $98=HEAP32[(($57)>>2)];
 var $99=$98;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($97,$99);
 var $100=HEAP32[(($52)>>2)];
 var $101=($100|0)==0;
 if($101){label=11;break;}else{label=7;break;}
 case 7: 
 var $102=HEAP32[(($54)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=10;break;}else{label=8;break;}
 case 8: 
 var $105=((($102)-(12))|0);
 HEAP32[(($54)>>2)]=$105;
 var $106=$105;
 var $107=HEAP8[(($106)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=7;break;}else{label=9;break;}
 case 9: 
 var $111=((($102)-(12)+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=7;break;
 case 10: 
 var $113=HEAP32[(($52)>>2)];
 var $114=$113;
 _free($114);
 label=11;break;
 case 11: 
 var $115=HEAP32[(($48)>>2)];
 var $116=($115|0)==0;
 if($116){label=16;break;}else{label=12;break;}
 case 12: 
 var $117=HEAP32[(($50)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=15;break;}else{label=13;break;}
 case 13: 
 var $120=((($117)-(12))|0);
 HEAP32[(($50)>>2)]=$120;
 var $121=$120;
 var $122=HEAP8[(($121)>>0)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=12;break;}else{label=14;break;}
 case 14: 
 var $126=((($117)-(12)+8)|0);
 var $127=HEAP32[(($126)>>2)];
 _free($127);
 label=12;break;
 case 15: 
 var $128=HEAP32[(($48)>>2)];
 var $129=$128;
 _free($129);
 label=16;break;
 case 16: 
 var $130=HEAP32[(($30)>>2)];
 var $131=($130|0)==0;
 if($131){label=21;break;}else{label=17;break;}
 case 17: 
 var $_pre3=HEAP32[(($32)>>2)];
 var $134=$_pre3;label=18;break;
 case 18: 
 var $134;
 var $135=($130|0)==($134|0);
 if($135){label=20;break;}else{label=19;break;}
 case 19: 
 var $137=((($134)-(1))|0);
 HEAP32[(($32)>>2)]=$137;
 var $134=$137;label=18;break;
 case 20: 
 var $138=(($130)|0);
 _free($138);
 label=21;break;
 case 21: 
 var $139=HEAP32[(($24)>>2)];
 var $140=($139|0)==0;
 if($140){label=26;break;}else{label=22;break;}
 case 22: 
 var $_pre2=HEAP32[(($26)>>2)];
 var $143=$_pre2;label=23;break;
 case 23: 
 var $143;
 var $144=($139|0)==($143|0);
 if($144){label=25;break;}else{label=24;break;}
 case 24: 
 var $146=((($143)-(32))|0);
 HEAP32[(($26)>>2)]=$146;
 var $143=$146;label=23;break;
 case 25: 
 var $147=$139;
 _free($147);
 label=26;break;
 case 26: 
 var $148=HEAP32[(($18)>>2)];
 var $149=($148|0)==0;
 if($149){label=31;break;}else{label=27;break;}
 case 27: 
 var $_pre1=HEAP32[(($20)>>2)];
 var $152=$_pre1;label=28;break;
 case 28: 
 var $152;
 var $153=($148|0)==($152|0);
 if($153){label=30;break;}else{label=29;break;}
 case 29: 
 var $155=((($152)-(1))|0);
 HEAP32[(($20)>>2)]=$155;
 var $152=$155;label=28;break;
 case 30: 
 var $156=(($148)|0);
 _free($156);
 label=31;break;
 case 31: 
 var $157=HEAP32[(($12)>>2)];
 var $158=($157|0)==0;
 if($158){label=37;break;}else{label=32;break;}
 case 32: 
 var $_pre=HEAP32[(($14)>>2)];
 var $161=$_pre;label=33;break;
 case 33: 
 var $161;
 var $162=($157|0)==($161|0);
 if($162){label=35;break;}else{label=34;break;}
 case 34: 
 var $164=((($161)-(28))|0);
 HEAP32[(($14)>>2)]=$164;
 var $161=$164;label=33;break;
 case 35: 
 var $165=$157;
 _free($165);
 label=37;break;
 case 36: 
 var $167=$_lcssa_i;
 var $168=$_lcssa_i;
 var $169=(($_lcssa_i+284)|0);
 var $170=$169;
 HEAPF32[(($170)>>2)]=0;
 var $171=(($_lcssa_i+288)|0);
 var $172=$171;
 HEAPF32[(($172)>>2)]=0;
 var $173=(($_lcssa_i+292)|0);
 var $174=$173;
 HEAPF32[(($174)>>2)]=0;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($168);
 return $167;
 case 37: 
 _free($_lcssa_i);
 ___resumeException($87$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+116)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+120)|0);
 var $4=$3;
 var $i_sroa_0_0=$2;label=2;break;
 case 2: 
 var $i_sroa_0_0;
 var $6=($i_sroa_0_0|0)==($4|0);
 if($6){label=10;break;}else{label=3;break;}
 case 3: 
 var $8=(($i_sroa_0_0+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=5;break;}else{label=4;break;}
 case 4: 
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 FUNCTION_TABLE[$15]($9);
 label=5;break;
 case 5: 
 var $17=(($i_sroa_0_0+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=6;break;}else{var $storemerge_i=$18;label=7;break;}
 case 6: 
 var $20=(($i_sroa_0_0)|0);
 var $_018=$20;label=8;break;
 case 7: 
 var $storemerge_i;
 var $22=(($storemerge_i)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){var $31=$storemerge_i;label=9;break;}else{var $storemerge_i=$23;label=7;break;}
 case 8: 
 var $_018;
 var $26=(($_018+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($_018|0)==($29|0);
 if($30){var $31=$27;label=9;break;}else{var $_018=$27;label=8;break;}
 case 9: 
 var $31;
 var $32=$31;
 var $i_sroa_0_0=$32;label=2;break;
 case 10: 
 var $34=(($this+116)|0);
 var $35=(($this+120)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($34,$37);
 var $38=(($this+124)|0);
 HEAP32[(($38)>>2)]=0;
 var $39=(($34)|0);
 HEAP32[(($39)>>2)]=$4;
 HEAP32[(($35)>>2)]=0;
 var $40=(($this+128)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($this+132)|0);
 var $43=$42;
 var $i_sroa_0_1=$41;label=11;break;
 case 11: 
 var $i_sroa_0_1;
 var $45=($i_sroa_0_1|0)==($43|0);
 if($45){label=19;break;}else{label=12;break;}
 case 12: 
 var $47=(($i_sroa_0_1+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=14;break;}else{label=13;break;}
 case 13: 
 var $51=$48;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$54]($48);
 label=14;break;
 case 14: 
 var $56=(($i_sroa_0_1+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=15;break;}else{var $storemerge_i2=$57;label=16;break;}
 case 15: 
 var $59=(($i_sroa_0_1)|0);
 var $_017=$59;label=17;break;
 case 16: 
 var $storemerge_i2;
 var $61=(($storemerge_i2)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){var $70=$storemerge_i2;label=18;break;}else{var $storemerge_i2=$62;label=16;break;}
 case 17: 
 var $_017;
 var $65=(($_017+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($_017|0)==($68|0);
 if($69){var $70=$66;label=18;break;}else{var $_017=$66;label=17;break;}
 case 18: 
 var $70;
 var $71=$70;
 var $i_sroa_0_1=$71;label=11;break;
 case 19: 
 var $73=(($this+128)|0);
 var $74=(($this+132)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$75;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($73,$76);
 var $77=(($this+136)|0);
 HEAP32[(($77)>>2)]=0;
 var $78=(($73)|0);
 HEAP32[(($78)>>2)]=$43;
 HEAP32[(($74)>>2)]=0;
 var $79=(($this+140)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($this+144)|0);
 var $82=$81;
 var $i_sroa_0_2=$80;label=20;break;
 case 20: 
 var $i_sroa_0_2;
 var $84=($i_sroa_0_2|0)==($82|0);
 if($84){label=28;break;}else{label=21;break;}
 case 21: 
 var $86=(($i_sroa_0_2+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=23;break;}else{label=22;break;}
 case 22: 
 var $90=$87;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+4)|0);
 var $93=HEAP32[(($92)>>2)];
 FUNCTION_TABLE[$93]($87);
 label=23;break;
 case 23: 
 var $95=(($i_sroa_0_2+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){label=24;break;}else{var $storemerge_i7=$96;label=25;break;}
 case 24: 
 var $98=(($i_sroa_0_2)|0);
 var $_016=$98;label=26;break;
 case 25: 
 var $storemerge_i7;
 var $100=(($storemerge_i7)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==0;
 if($102){var $109=$storemerge_i7;label=27;break;}else{var $storemerge_i7=$101;label=25;break;}
 case 26: 
 var $_016;
 var $104=(($_016+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($_016|0)==($107|0);
 if($108){var $109=$105;label=27;break;}else{var $_016=$105;label=26;break;}
 case 27: 
 var $109;
 var $110=$109;
 var $i_sroa_0_2=$110;label=20;break;
 case 28: 
 var $112=(($this+140)|0);
 var $113=(($this+144)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($112,$115);
 var $116=(($this+148)|0);
 HEAP32[(($116)>>2)]=0;
 var $117=(($112)|0);
 HEAP32[(($117)>>2)]=$82;
 HEAP32[(($113)>>2)]=0;
 var $118=(($this+152)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($this+156)|0);
 var $121=$120;
 var $i_sroa_0_3=$119;label=29;break;
 case 29: 
 var $i_sroa_0_3;
 var $123=($i_sroa_0_3|0)==($121|0);
 if($123){label=37;break;}else{label=30;break;}
 case 30: 
 var $125=(($i_sroa_0_3+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==0;
 if($127){label=32;break;}else{label=31;break;}
 case 31: 
 var $129=$126;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+4)|0);
 var $132=HEAP32[(($131)>>2)];
 FUNCTION_TABLE[$132]($126);
 label=32;break;
 case 32: 
 var $134=(($i_sroa_0_3+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==0;
 if($136){label=33;break;}else{var $storemerge_i12=$135;label=34;break;}
 case 33: 
 var $137=(($i_sroa_0_3)|0);
 var $_0=$137;label=35;break;
 case 34: 
 var $storemerge_i12;
 var $139=(($storemerge_i12)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 if($141){var $148=$storemerge_i12;label=36;break;}else{var $storemerge_i12=$140;label=34;break;}
 case 35: 
 var $_0;
 var $143=(($_0+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($_0|0)==($146|0);
 if($147){var $148=$144;label=36;break;}else{var $_0=$144;label=35;break;}
 case 36: 
 var $148;
 var $149=$148;
 var $i_sroa_0_3=$149;label=29;break;
 case 37: 
 var $151=(($this+152)|0);
 var $152=(($this+156)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($151,$154);
 var $155=(($this+160)|0);
 HEAP32[(($155)>>2)]=0;
 var $156=(($151)|0);
 HEAP32[(($156)>>2)]=$121;
 HEAP32[(($152)>>2)]=0;
 var $157=(($this+32)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($this+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $fi_sroa_0_0=$158;label=38;break;
 case 38: 
 var $fi_sroa_0_0;
 var $162=($fi_sroa_0_0|0)==($160|0);
 if($162){label=40;break;}else{label=39;break;}
 case 39: 
 var $164=(($fi_sroa_0_0+32)|0);
 var $fi_sroa_0_0=$164;label=38;break;
 case 40: 
 var $166=(($this)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($this+4)|0);
 var $_pre=HEAP32[(($168)>>2)];
 var $170=$_pre;label=41;break;
 case 41: 
 var $170;
 var $171=($167|0)==($170|0);
 if($171){var $174=$160;label=43;break;}else{label=42;break;}
 case 42: 
 var $173=((($170)-(28))|0);
 HEAP32[(($168)>>2)]=$173;
 var $170=$173;label=41;break;
 case 43: 
 var $174;
 var $175=($158|0)==($174|0);
 if($175){label=45;break;}else{label=44;break;}
 case 44: 
 var $177=((($174)-(32))|0);
 HEAP32[(($159)>>2)]=$177;
 var $174=$177;label=43;break;
 case 45: 
 var $178=(($this+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($this+20)|0);
 var $_pre22=HEAP32[(($180)>>2)];
 var $182=$_pre22;label=46;break;
 case 46: 
 var $182;
 var $183=($179|0)==($182|0);
 if($183){label=48;break;}else{label=47;break;}
 case 47: 
 var $185=((($182)-(1))|0);
 HEAP32[(($180)>>2)]=$185;
 var $182=$185;label=46;break;
 case 48: 
 var $186=(($this+12)|0);
 HEAP32[(($186)>>2)]=0;
 var $187=(($this+28)|0);
 HEAP32[(($187)>>2)]=0;
 var $188=(($this+44)|0);
 HEAP32[(($188)>>2)]=0;
 var $189=(($this+60)|0);
 HEAP32[(($189)>>2)]=0;
 var $190=(($this+300)|0);
 HEAP32[(($190)>>2)]=0;
 var $191=(($this+112)|0);
 HEAP32[(($191)>>2)]=0;
 var $192=(($this+296)|0);
 var $193=$192;
 tempBigInt=-8355712;HEAP8[(($193)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(3))>>0)]=tempBigInt&0xff;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}

//Func
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$__nd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=5;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$8);
 var $9=(($__nd+20)|0);
 var $10=$9;
 var $11=HEAP8[(($10)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__nd+28)|0);
 var $16=HEAP32[(($15)>>2)];
 _free($16);
 label=4;break;
 case 4: 
 var $17=$__nd;
 _free($17);
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg8Matrix44IfE11SetIdentityEv($this){
 var label=0;


 var $0=$this;
 _memset($0, 0, 64)|0;
 var $1=(($this)|0);
 HEAPF32[(($1)>>2)]=1;
 var $2=(($this+20)|0);
 HEAPF32[(($2)>>2)]=1;
 var $3=(($this+40)|0);
 HEAPF32[(($3)>>2)]=1;
 var $4=(($this+60)|0);
 HEAPF32[(($4)>>2)]=1;
 return;
}

//Func
function __ZN10emscripten8internal7InvokerIP9MeshLabJsJEE6invokeEPFS3_vE($fn){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]();
 return $1;
}

//Func
function __ZN10emscripten8internal13getActualTypeI9MeshLabJsEEPKvPT_($ptr){
 var label=0;


 return 28528;
}

//Func
function __ZN10emscripten8internal14raw_destructorI9MeshLabJsEEvPT_($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=35;break;}else{label=2;break;}
 case 2: 
 var $3=(($ptr)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($3);
 var $4=(($ptr+152)|0);
 var $5=(($ptr+156)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($4,$7);
 var $8=(($ptr+140)|0);
 var $9=(($ptr+144)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($8,$11);
 var $12=(($ptr+128)|0);
 var $13=(($ptr+132)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($12,$15);
 var $16=(($ptr+116)|0);
 var $17=(($ptr+120)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($16,$19);
 var $20=(($ptr+100)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=8;break;}else{label=3;break;}
 case 3: 
 var $24=(($ptr+104)|0);
 label=4;break;
 case 4: 
 var $25=HEAP32[(($24)>>2)];
 var $26=($21|0)==($25|0);
 if($26){label=7;break;}else{label=5;break;}
 case 5: 
 var $28=((($25)-(12))|0);
 HEAP32[(($24)>>2)]=$28;
 var $29=$28;
 var $30=HEAP8[(($29)>>0)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=4;break;}else{label=6;break;}
 case 6: 
 var $34=((($25)-(12)+8)|0);
 var $35=HEAP32[(($34)>>2)];
 _free($35);
 label=4;break;
 case 7: 
 var $36=HEAP32[(($20)>>2)];
 var $37=$36;
 _free($37);
 label=8;break;
 case 8: 
 var $38=(($ptr+88)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=14;break;}else{label=9;break;}
 case 9: 
 var $42=(($ptr+92)|0);
 label=10;break;
 case 10: 
 var $43=HEAP32[(($42)>>2)];
 var $44=($39|0)==($43|0);
 if($44){label=13;break;}else{label=11;break;}
 case 11: 
 var $46=((($43)-(12))|0);
 HEAP32[(($42)>>2)]=$46;
 var $47=$46;
 var $48=HEAP8[(($47)>>0)];
 var $49=$48&1;
 var $50=(($49<<24)>>24)==0;
 if($50){label=10;break;}else{label=12;break;}
 case 12: 
 var $52=((($43)-(12)+8)|0);
 var $53=HEAP32[(($52)>>2)];
 _free($53);
 label=10;break;
 case 13: 
 var $54=HEAP32[(($38)>>2)];
 var $55=$54;
 _free($55);
 label=14;break;
 case 14: 
 var $56=(($ptr+48)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=19;break;}else{label=15;break;}
 case 15: 
 var $60=(($ptr+52)|0);
 var $_pre3=HEAP32[(($60)>>2)];
 var $62=$_pre3;label=16;break;
 case 16: 
 var $62;
 var $63=($57|0)==($62|0);
 if($63){label=18;break;}else{label=17;break;}
 case 17: 
 var $65=((($62)-(1))|0);
 HEAP32[(($60)>>2)]=$65;
 var $62=$65;label=16;break;
 case 18: 
 var $66=(($57)|0);
 _free($66);
 label=19;break;
 case 19: 
 var $67=(($ptr+32)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=24;break;}else{label=20;break;}
 case 20: 
 var $71=(($ptr+36)|0);
 var $_pre2=HEAP32[(($71)>>2)];
 var $73=$_pre2;label=21;break;
 case 21: 
 var $73;
 var $74=($68|0)==($73|0);
 if($74){label=23;break;}else{label=22;break;}
 case 22: 
 var $76=((($73)-(32))|0);
 HEAP32[(($71)>>2)]=$76;
 var $73=$76;label=21;break;
 case 23: 
 var $77=$68;
 _free($77);
 label=24;break;
 case 24: 
 var $78=(($ptr+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=29;break;}else{label=25;break;}
 case 25: 
 var $82=(($ptr+20)|0);
 var $_pre1=HEAP32[(($82)>>2)];
 var $84=$_pre1;label=26;break;
 case 26: 
 var $84;
 var $85=($79|0)==($84|0);
 if($85){label=28;break;}else{label=27;break;}
 case 27: 
 var $87=((($84)-(1))|0);
 HEAP32[(($82)>>2)]=$87;
 var $84=$87;label=26;break;
 case 28: 
 var $88=(($79)|0);
 _free($88);
 label=29;break;
 case 29: 
 var $89=(($ptr)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==0;
 if($91){label=34;break;}else{label=30;break;}
 case 30: 
 var $93=(($ptr+4)|0);
 var $_pre=HEAP32[(($93)>>2)];
 var $95=$_pre;label=31;break;
 case 31: 
 var $95;
 var $96=($90|0)==($95|0);
 if($96){label=33;break;}else{label=32;break;}
 case 32: 
 var $98=((($95)-(28))|0);
 HEAP32[(($93)>>2)]=$98;
 var $95=$98;label=31;break;
 case 33: 
 var $99=$90;
 _free($99);
 label=34;break;
 case 34: 
 var $100=$ptr;
 _free($100);
 label=35;break;
 case 35: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io8ImporterI6MyMeshE13FileExtensionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_($filename,$extension){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $loc1=sp;
 var $end=(sp)+(8);
 __ZNSt3__16localeC2Ev($loc1);
 var $1=(($loc1)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=73;break; }
 case 2: 
 var $4=(($2+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($2+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>($3>>>0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=(($7+($3<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=15224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,26112,(1060)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=73;break; }
 case 5: 
 throw "Reached an unreachable!";
 case 6: 
 var $19=$14;
 var $20=$filename;
 var $21=HEAP8[(($20)>>0)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($filename+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($filename+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($filename+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $41=$30;var $40=$26;var $39=$28;label=9;break;
 case 8: 
 var $32=$filename;
 var $33=(($32+1)|0);
 var $34=$filename;
 var $35=(($34+1)|0);
 var $36=($21&255);
 var $37=$36>>>1;
 var $41=$37;var $40=$33;var $39=$35;label=9;break;
 case 9: 
 var $39;
 var $40;
 var $41;
 var $_sum=((($41)-(1))|0);
 var $42=(($39+$_sum)|0);
 var $43=$14;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+24)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($19,$40,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=73;break; }
 case 10: 
 var $48=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=73;break; }
 case 11: 
 var $49=HEAP32[(($4)>>2)];
 var $50=HEAP32[(($6)>>2)];
 var $51=$49;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=$53>>2;
 var $55=($54>>>0)>($48>>>0);
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=(($50+($48<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=13;break;}else{label=15;break;}
 case 13: 
 var $59=___cxa_allocate_exception(4);
 var $60=$59;
 HEAP32[(($60)>>2)]=15224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($59,26112,(1060)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=73;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $62=$57;
 var $63=$extension;
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=17;break;}else{label=16;break;}
 case 16: 
 var $68=(($extension+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($extension+8)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($extension+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $84=$73;var $83=$69;var $82=$71;label=18;break;
 case 17: 
 var $75=$extension;
 var $76=(($75+1)|0);
 var $77=$extension;
 var $78=(($77+1)|0);
 var $79=($64&255);
 var $80=$79>>>1;
 var $84=$80;var $83=$76;var $82=$78;label=18;break;
 case 18: 
 var $82;
 var $83;
 var $84;
 var $_sum2=((($84)-(1))|0);
 var $85=(($82+$_sum2)|0);
 var $86=$57;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+24)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($62,$83,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=73;break; }
 case 19: 
 var $91=HEAP8[(($20)>>0)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){label=21;break;}else{label=20;break;}
 case 20: 
 var $95=(($filename+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $100=$96;label=22;break;
 case 21: 
 var $98=($91&255);
 var $99=$98>>>1;
 var $100=$99;label=22;break;
 case 22: 
 var $100;
 var $101=HEAP8[(($63)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=24;break;}else{label=23;break;}
 case 23: 
 var $105=(($extension+4)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=((($100)-($106))|0);
 var $108=(($extension+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $117=$109;var $116=$107;label=25;break;
 case 24: 
 var $111=($101&255);
 var $112=$111>>>1;
 var $113=((($100)-($112))|0);
 var $114=($101&255);
 var $115=$114>>>1;
 var $117=$115;var $116=$113;label=25;break;
 case 25: 
 var $116;
 var $117;
 if($93){label=27;break;}else{label=26;break;}
 case 26: 
 var $119=(($filename+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $124=$120;label=28;break;
 case 27: 
 var $122=($91&255);
 var $123=$122>>>1;
 var $124=$123;label=28;break;
 case 28: 
 var $124;
 var $125=($124>>>0)<($116>>>0);
 if($125){label=29;break;}else{label=31;break;}
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=73;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 if($93){label=33;break;}else{label=32;break;}
 case 32: 
 var $129=(($filename+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $134=$130;label=34;break;
 case 33: 
 var $132=$filename;
 var $133=(($132+1)|0);
 var $134=$133;label=34;break;
 case 34: 
 var $134;
 var $135=(($134+$116)|0);
 var $136=((($124)-($116))|0);
 var $137=($136>>>0)<($117>>>0);
 var $138=($137?$136:$117);
 var $139=($138>>>0)>4294967279;
 if($139){label=35;break;}else{label=37;break;}
 case 35: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=73;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $142=($138>>>0)<11;
 if($142){label=38;break;}else{label=39;break;}
 case 38: 
 var $144=$138<<1;
 var $145=(($144)&255);
 var $146=$end;
 HEAP8[(($146)>>0)]=$145;
 var $147=$end;
 var $148=(($147+1)|0);
 var $__p_0_i=$148;var $_pre_phi=$146;label=46;break;
 case 39: 
 var $149=((($138)+(16))|0);
 var $150=$149&-16;
 var $151=($150|0)==0;
 var $_size_i=($151?1:$150);
 var $152=_malloc($_size_i);
 var $153=($152|0)==0;
 if($153){label=40;break;}else{var $_lcssa_i=$152;label=45;break;}
 case 40: 
 var $154=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $155=($154|0)==0;
 if($155){label=43;break;}else{label=41;break;}
 case 41: 
 var $157=$154;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$157]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=72;break; }
 case 42: 
 var $158=_malloc($_size_i);
 var $159=($158|0)==0;
 if($159){label=40;break;}else{var $_lcssa_i=$158;label=45;break;}
 case 43: 
 var $161=___cxa_allocate_exception(4);
 var $162=$161;
 HEAP32[(($162)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($161,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=73;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $_lcssa_i;
 var $163=(($end+8)|0);
 HEAP32[(($163)>>2)]=$_lcssa_i;
 var $164=$150|1;
 var $165=(($end)|0);
 HEAP32[(($165)>>2)]=$164;
 var $166=(($end+4)|0);
 HEAP32[(($166)>>2)]=$138;
 var $_pre=$end;
 var $__p_0_i=$_lcssa_i;var $_pre_phi=$_pre;label=46;break;
 case 46: 
 var $_pre_phi;
 var $__p_0_i;
 assert($138 % 1 === 0);(_memcpy($__p_0_i, $135, $138)|0);
 var $168=(($__p_0_i+$138)|0);
 HEAP8[(($168)>>0)]=0;
 var $169=HEAP8[(($_pre_phi)>>0)];
 var $170=$169&1;
 var $171=(($170<<24)>>24)==0;
 if($171){label=48;break;}else{label=47;break;}
 case 47: 
 var $173=(($end+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $178=$174;label=49;break;
 case 48: 
 var $176=($169&255);
 var $177=$176>>>1;
 var $178=$177;label=49;break;
 case 49: 
 var $178;
 var $179=HEAP8[(($63)>>0)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=51;break;}else{label=50;break;}
 case 50: 
 var $183=(($extension+4)|0);
 var $184=HEAP32[(($183)>>2)];
 var $188=$184;label=52;break;
 case 51: 
 var $186=($179&255);
 var $187=$186>>>1;
 var $188=$187;label=52;break;
 case 52: 
 var $188;
 var $189=($178|0)==($188|0);
 if($189){label=53;break;}else{var $_0=0;label=67;break;}
 case 53: 
 if($171){label=55;break;}else{label=54;break;}
 case 54: 
 var $192=(($end+8)|0);
 var $193=HEAP32[(($192)>>2)];
 var $197=$193;label=56;break;
 case 55: 
 var $195=$end;
 var $196=(($195+1)|0);
 var $197=$196;label=56;break;
 case 56: 
 var $197;
 if($181){label=58;break;}else{label=57;break;}
 case 57: 
 var $199=(($extension+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $204=$200;label=59;break;
 case 58: 
 var $202=$extension;
 var $203=(($202+1)|0);
 var $204=$203;label=59;break;
 case 59: 
 var $204;
 if($171){var $__lhs_sz_i_0=$178;var $__rp_i_0=$204;var $__lp_i_0=$197;label=64;break;}else{label=60;break;}
 case 60: 
 var $206=($178|0)==0;
 if($206){var $_018=1;label=68;break;}else{var $_02_i_i=$178;var $l_03_i_i=$197;var $r_04_i_i=$204;label=61;break;}
 case 61: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $207=HEAP8[(($l_03_i_i)>>0)];
 var $208=HEAP8[(($r_04_i_i)>>0)];
 var $209=(($207<<24)>>24)==(($208<<24)>>24);
 if($209){label=62;break;}else{label=63;break;}
 case 62: 
 var $211=((($_02_i_i)-(1))|0);
 var $212=(($l_03_i_i+1)|0);
 var $213=(($r_04_i_i+1)|0);
 var $214=($211|0)==0;
 if($214){var $_0=1;label=67;break;}else{var $_02_i_i=$211;var $l_03_i_i=$212;var $r_04_i_i=$213;label=61;break;}
 case 63: 
 var $phitmp=(($207<<24)>>24)==(($208<<24)>>24);
 var $_0=$phitmp;label=67;break;
 case 64: 
 var $__lp_i_0;
 var $__rp_i_0;
 var $__lhs_sz_i_0;
 var $216=($__lhs_sz_i_0|0)==0;
 if($216){var $_0=1;label=67;break;}else{label=65;break;}
 case 65: 
 var $218=HEAP8[(($__lp_i_0)>>0)];
 var $219=HEAP8[(($__rp_i_0)>>0)];
 var $220=(($218<<24)>>24)==(($219<<24)>>24);
 if($220){label=66;break;}else{var $_0=0;label=67;break;}
 case 66: 
 var $222=((($__lhs_sz_i_0)-(1))|0);
 var $223=(($__lp_i_0+1)|0);
 var $224=(($__rp_i_0+1)|0);
 var $__lhs_sz_i_0=$222;var $__rp_i_0=$224;var $__lp_i_0=$223;label=64;break;
 case 67: 
 var $_0;
 if($171){var $_019=$_0;label=69;break;}else{var $_018=$_0;label=68;break;}
 case 68: 
 var $_018;
 var $225=(($end+8)|0);
 var $226=HEAP32[(($225)>>2)];
 _free($226);
 var $_019=$_018;label=69;break;
 case 69: 
 var $_019;
 var $227=HEAP32[(($1)>>2)];
 var $228=(($227+4)|0);
 var $229=(tempValue=HEAP32[(($228)>>2)],HEAP32[(($228)>>2)]=tempValue+-1,tempValue);
 var $230=($229|0)==0;
 if($230){label=70;break;}else{label=71;break;}
 case 70: 
 var $232=(($227)|0);
 var $233=$227;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+8)|0);
 var $236=HEAP32[(($235)>>2)];
 FUNCTION_TABLE[$236]($232);
 label=71;break;
 case 71: 
 STACKTOP=sp;return $_019;
 case 72: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=74;break;
 case 73: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=74;break;
 case 74: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $238=HEAP32[(($1)>>2)];
 var $239=(($238+4)|0);
 var $240=(tempValue=HEAP32[(($239)>>2)],HEAP32[(($239)>>2)]=tempValue+-1,tempValue);
 var $241=($240|0)==0;
 if($241){label=75;break;}else{label=76;break;}
 case 75: 
 var $243=(($238)|0);
 var $244=$238;
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+8)|0);
 var $247=HEAP32[(($246)>>2)];
 FUNCTION_TABLE[$247]($243);
 label=76;break;
 case 76: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE4OpenERS3_PKcRiPFbiS7_E($mesh,$filename,$loadmask,$cb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i_i58_i=sp;
 var $f_i_i_i_i=(sp)+(112);
 var $tokens_i=(sp)+(224);
 var $header_i=(sp)+(240);
 var $v_iter_i=(sp)+(256);
 var $str_i=(sp)+(264);
 var $0=(sp)+(280);
 var $qtmp_i=(sp)+(288);
 var $1=(sp)+(304);
 var $vertIndices_i=(sp)+(312);
 var $polygonVect_i=(sp)+(328);
 var $q_i=(sp)+(344);
 var $indexTriangulatedVect_i=(sp)+(360);
 var $loopVect_i=(sp)+(376);
 var $stream=(sp)+(392);
 var $2=(($stream+108)|0);
 var $3=(($stream)|0);
 var $4=(($stream+8)|0);
 HEAP32[(($3)>>2)]=28556;
 var $5=$stream;
 var $6=$stream;
 var $7=(($stream+108)|0);
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=28576;
 var $9=(($stream+4)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=HEAP32[(($5)>>2)];
 var $11=((($10)-(12))|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$4;
 var $_sum5=((($13)+(24))|0);
 var $15=(($6+$_sum5)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=$14;
 var $_sum6=((($13)+(16))|0);
 var $17=(($6+$_sum6)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=0;
 var $_sum7=((($13)+(20))|0);
 var $19=(($6+$_sum7)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=0;
 var $_sum8=((($13)+(4))|0);
 var $21=(($6+$_sum8)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=4098;
 var $_sum9=((($13)+(12))|0);
 var $23=(($6+$_sum9)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=0;
 var $_sum10=((($13)+(8))|0);
 var $25=(($6+$_sum10)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=6;
 var $_sum11=((($13)+(32))|0);
 var $27=(($6+$_sum11)|0);
 var $_sum12=((($13)+(28))|0);
 var $28=(($6+$_sum12)|0);
 var $29=$28;
 _memset($27, 0, 40)|0;
 __ZNSt3__16localeC2Ev($29);
 var $_sum=((($13)+(72))|0);
 var $30=(($6+$_sum)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=0;
 var $_sum1=((($13)+(76))|0);
 var $32=(($6+$_sum1)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=-1;
 HEAP32[(($3)>>2)]=17124;
 HEAP32[(($2)>>2)]=17144;
 var $34=(($stream+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($34,$filename,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $38=($36|0)==0;
 if($38){label=4;break;}else{label=8;break;}
 case 4: 
 var $40=HEAP32[(($5)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($6+$43)|0);
 var $45=$44;
 var $_sum3=((($43)+(16))|0);
 var $46=(($6+$_sum3)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$48|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($45,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=6;break; }
 case 5: 
 var $51$0 = ___cxa_find_matching_catch(); var $51$1 = tempRet0;
 var $52=$51$0;
 var $53=$51$1;
 var $_036=$53;var $_037=$52;label=7;break;
 case 6: 
 var $55$0 = ___cxa_find_matching_catch(); var $55$1 = tempRet0;
 var $56=$55$0;
 var $57=$55$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($34);
 var $_036=$57;var $_037=$56;label=7;break;
 case 7: 
 var $_037;
 var $_036;
 var $59=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($59);
 var $60$0=$_037;
 var $60$1=0;
 var $61$0=$60$0;
 var $61$1=$_036;
 ___resumeException($61$0)
 case 8: 
 var $62=HEAP32[(($5)>>2)];
 var $63=((($62)-(12))|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $_sum2=((($65)+(16))|0);
 var $66=(($6+$_sum2)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&5;
 var $70=($69|0)==0;
 if($70){label=9;break;}else{var $storemerge=1;label=397;break;}
 case 9: 
 var $72=$stream;
 var $73=$tokens_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $74=$header_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $75=$v_iter_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $76=$str_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $77=$0;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $78=$qtmp_i;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $79=$1;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $80=$vertIndices_i;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $81=$polygonVect_i;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $82=$q_i;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $83=$indexTriangulatedVect_i;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $84=$loopVect_i;
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $85=(($tokens_i)|0);
 HEAP32[(($85)>>2)]=0;
 var $86=(($tokens_i+4)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=(($tokens_i+8)|0);
 HEAP32[(($87)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $89=HEAP32[(($85)>>2)];
 var $90=HEAP32[(($86)>>2)];
 var $91=($89|0)==($90|0);
 if($91){var $_5=3;var $1206=$89;label=387;break;}else{label=14;break;}
 case 11: 
 var $lpad_loopexit96$0 = ___cxa_find_matching_catch(); var $lpad_loopexit96$1 = tempRet0;
 var $lpad_phi98$1=$lpad_loopexit96$1;var $lpad_phi98$0=$lpad_loopexit96$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit97$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit97$1 = tempRet0;
 var $lpad_phi98$1=$lpad_nonloopexit97$1;var $lpad_phi98$0=$lpad_nonloopexit97$0;label=13;break;
 case 13: 
 var $lpad_phi98$0;
 var $lpad_phi98$1;
 var $93=$lpad_phi98$0;
 var $94=$lpad_phi98$1;
 var $_430=$93;var $_435=$94;label=392;break;
 case 14: 
 var $96=$89;
 var $97=HEAP8[(($96)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=15;break;}else{label=16;break;}
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];
 label=29;break;
 case 16: 
 var $102=(($89+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($89+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105>>>0)>4294967279;
 if($106){label=17;break;}else{label=19;break;}
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=12;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $109=($105>>>0)<11;
 if($109){label=20;break;}else{label=21;break;}
 case 20: 
 var $111=$105<<1;
 var $112=(($111)&255);
 HEAP8[(($74)>>0)]=$112;
 var $113=$header_i;
 var $114=(($113+1)|0);
 var $__p_0_i_i=$114;label=28;break;
 case 21: 
 var $115=((($105)+(16))|0);
 var $116=$115&-16;
 var $117=($116|0)==0;
 var $_size_i_i=($117?1:$116);
 var $118=_malloc($_size_i_i);
 var $119=($118|0)==0;
 if($119){label=22;break;}else{var $_lcssa_i_i=$118;label=27;break;}
 case 22: 
 var $120=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $121=($120|0)==0;
 if($121){label=25;break;}else{label=23;break;}
 case 23: 
 var $123=$120;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=11;break; }
 case 24: 
 var $124=_malloc($_size_i_i);
 var $125=($124|0)==0;
 if($125){label=22;break;}else{var $_lcssa_i_i=$124;label=27;break;}
 case 25: 
 var $127=___cxa_allocate_exception(4);
 var $128=$127;
 HEAP32[(($128)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($127,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=12;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 var $_lcssa_i_i;
 var $129=(($header_i+8)|0);
 HEAP32[(($129)>>2)]=$_lcssa_i_i;
 var $130=$116|1;
 var $131=(($header_i)|0);
 HEAP32[(($131)>>2)]=$130;
 var $132=(($header_i+4)|0);
 HEAP32[(($132)>>2)]=$105;
 var $__p_0_i_i=$_lcssa_i_i;label=28;break;
 case 28: 
 var $__p_0_i_i;
 assert($105 % 1 === 0);(_memcpy($__p_0_i_i, $103, $105)|0);
 var $133=(($__p_0_i_i+$105)|0);
 HEAP8[(($133)>>0)]=0;
 label=29;break;
 case 29: 
 var $134=HEAP8[(($74)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=31;break;}else{label=30;break;}
 case 30: 
 var $138=(($header_i+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($header_i+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $148=$141;var $147=$139;label=32;break;
 case 31: 
 var $143=$header_i;
 var $144=(($143+1)|0);
 var $145=($134&255);
 var $146=$145>>>1;
 var $148=$146;var $147=$144;label=32;break;
 case 32: 
 var $147;
 var $148;
 var $149=_strlen(9792);
 var $150=($148|0)==-1;
 var $151=($150?-1:$148);
 var $152=((($148)-($151))|0);
 var $153=($149>>>0)<($152>>>0);
 var $154=((($151)+($149))|0);
 var $_=($153?$154:$148);
 var $155=(($147+$_)|0);
 var $156=((9792+$149)|0);
 var $157=(function() { try { __THREW__ = 0; return __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($147,$155,9792,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 var $159=($149|0)!=0;
 var $160=($157|0)==($155|0);
 var $or_cond=$159&$160;
 if($or_cond){var $_4=3;label=382;break;}else{label=35;break;}
 case 34: 
 var $162$0 = ___cxa_find_matching_catch(0); var $162$1 = tempRet0;
 var $163=$162$0;
 ___clang_call_terminate($163);
 throw "Reached an unreachable!";
 case 35: 
 var $164=$157;
 var $165=$147;
 var $166=((($164)-($165))|0);
 var $phitmp_i=($166|0)==-1;
 if($phitmp_i){var $_4=3;label=382;break;}else{label=36;break;}
 case 36: 
 if($136){label=38;break;}else{label=37;break;}
 case 37: 
 var $169=(($header_i+8)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($header_i+4)|0);
 var $172=HEAP32[(($171)>>2)];
 var $179=$172;var $178=$170;label=39;break;
 case 38: 
 var $174=$header_i;
 var $175=(($174+1)|0);
 var $176=($134&255);
 var $177=$176>>>1;
 var $179=$177;var $178=$175;label=39;break;
 case 39: 
 var $178;
 var $179;
 var $180=_strlen(9792);
 var $181=($179|0)==-1;
 var $182=($181?-1:$179);
 var $183=((($179)-($182))|0);
 var $184=($180>>>0)<($183>>>0);
 var $185=((($182)+($180))|0);
 var $_123=($184?$185:$179);
 var $186=(($178+$_123)|0);
 var $187=((9792+$180)|0);
 var $188=(function() { try { __THREW__ = 0; return __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($178,$186,9792,$187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=43;break; }
 case 40: 
 var $190=($180|0)!=0;
 var $191=($188|0)==($186|0);
 var $or_cond124=$190&$191;
 if($or_cond124){var $storemerge2_in_i_ph=-1;label=42;break;}else{label=41;break;}
 case 41: 
 var $193=$188;
 var $194=$178;
 var $195=((($193)-($194))|0);
 var $storemerge2_in_i_ph=$195;label=42;break;
 case 42: 
 var $storemerge2_in_i_ph;
 var $196=$header_i;
 var $197=(($196+1)|0);
 var $198=(($header_i+8)|0);
 var $199=HEAP32[(($198)>>2)];
 var $storemerge2_in_i=$storemerge2_in_i_ph;var $isNormalDefined_i_0=0;var $isColorDefined_i_0=0;var $isTexCoordDefined_i_0=0;var $homogeneousComponents_i_0=0;label=44;break;
 case 43: 
 var $201$0 = ___cxa_find_matching_catch(0); var $201$1 = tempRet0;
 var $202=$201$0;
 ___clang_call_terminate($202);
 throw "Reached an unreachable!";
 case 44: 
 var $homogeneousComponents_i_0;
 var $isTexCoordDefined_i_0;
 var $isColorDefined_i_0;
 var $isNormalDefined_i_0;
 var $storemerge2_in_i;
 var $storemerge2_i=((($storemerge2_in_i)-(1))|0);
 var $203=($storemerge2_i|0)>-1;
 if($203){label=45;break;}else{label=59;break;}
 case 45: 
 var $_125=($136?$197:$199);
 var $204=(($_125+$storemerge2_i)|0);
 var $205=HEAP8[(($204)>>0)];
 var $206=(($205<<24)>>24)==67;
 if($206){var $storemerge2_in_i=$storemerge2_i;var $isNormalDefined_i_0=$isNormalDefined_i_0;var $isColorDefined_i_0=1;var $isTexCoordDefined_i_0=$isTexCoordDefined_i_0;var $homogeneousComponents_i_0=$homogeneousComponents_i_0;label=44;break;}else{label=53;break;}
 case 46: 
 var $lpad_loopexit75$0 = ___cxa_find_matching_catch(); var $lpad_loopexit75$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit75$1;var $lpad_phi77$0=$lpad_loopexit75$0;label=52;break;
 case 47: 
 var $lpad_loopexit80$0 = ___cxa_find_matching_catch(); var $lpad_loopexit80$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit80$1;var $lpad_phi77$0=$lpad_loopexit80$0;label=52;break;
 case 48: 
 var $lpad_loopexit83$0 = ___cxa_find_matching_catch(); var $lpad_loopexit83$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit83$1;var $lpad_phi77$0=$lpad_loopexit83$0;label=52;break;
 case 49: 
 var $lpad_loopexit88$0 = ___cxa_find_matching_catch(); var $lpad_loopexit88$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit88$1;var $lpad_phi77$0=$lpad_loopexit88$0;label=52;break;
 case 50: 
 var $lpad_loopexit91$0 = ___cxa_find_matching_catch(); var $lpad_loopexit91$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit91$1;var $lpad_phi77$0=$lpad_loopexit91$0;label=52;break;
 case 51: 
 var $lpad_nonloopexit92$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit92$1 = tempRet0;
 var $lpad_phi77$1=$lpad_nonloopexit92$1;var $lpad_phi77$0=$lpad_nonloopexit92$0;label=52;break;
 case 52: 
 var $lpad_phi77$0;
 var $lpad_phi77$1;
 var $207=$lpad_phi77$0;
 var $208=$lpad_phi77$1;
 var $_329=$207;var $_334=$208;label=384;break;
 case 53: 
 var $_126=($136?$197:$199);
 var $209=(($_126+$storemerge2_i)|0);
 var $210=HEAP8[(($209)>>0)];
 var $211=(($210<<24)>>24)==78;
 if($211){var $storemerge2_in_i=$storemerge2_i;var $isNormalDefined_i_0=1;var $isColorDefined_i_0=$isColorDefined_i_0;var $isTexCoordDefined_i_0=$isTexCoordDefined_i_0;var $homogeneousComponents_i_0=$homogeneousComponents_i_0;label=44;break;}else{label=54;break;}
 case 54: 
 var $213=($storemerge2_i|0)>0;
 if($213){label=55;break;}else{label=57;break;}
 case 55: 
 var $214=((($storemerge2_in_i)-(2))|0);
 var $_128=($136?$197:$199);
 var $215=(($_128+$214)|0);
 var $216=HEAP8[(($215)>>0)];
 var $217=(($216<<24)>>24)==83;
 if($217){label=56;break;}else{label=57;break;}
 case 56: 
 var $_129=($136?$197:$199);
 var $218=(($_129+$storemerge2_i)|0);
 var $219=HEAP8[(($218)>>0)];
 var $220=(($219<<24)>>24)==84;
 if($220){var $storemerge2_in_i=$storemerge2_i;var $isNormalDefined_i_0=$isNormalDefined_i_0;var $isColorDefined_i_0=$isColorDefined_i_0;var $isTexCoordDefined_i_0=1;var $homogeneousComponents_i_0=$homogeneousComponents_i_0;label=44;break;}else{label=57;break;}
 case 57: 
 var $_130=($136?$197:$199);
 var $221=(($_130+$storemerge2_i)|0);
 var $222=HEAP8[(($221)>>0)];
 var $223=(($222<<24)>>24)==52;
 if($223){var $storemerge2_in_i=$storemerge2_i;var $isNormalDefined_i_0=$isNormalDefined_i_0;var $isColorDefined_i_0=$isColorDefined_i_0;var $isTexCoordDefined_i_0=$isTexCoordDefined_i_0;var $homogeneousComponents_i_0=1;label=44;break;}else{label=58;break;}
 case 58: 
 var $_131=($136?$197:$199);
 var $224=(($_131+$storemerge2_i)|0);
 var $225=HEAP8[(($224)>>0)];
 var $226=(($225<<24)>>24)==110;
 if($226){var $_4=6;label=382;break;}else{var $storemerge2_in_i=$storemerge2_i;var $isNormalDefined_i_0=$isNormalDefined_i_0;var $isColorDefined_i_0=$isColorDefined_i_0;var $isTexCoordDefined_i_0=$isTexCoordDefined_i_0;var $homogeneousComponents_i_0=$homogeneousComponents_i_0;label=44;break;}
 case 59: 
 var $228=HEAP32[(($86)>>2)];
 var $229=HEAP32[(($85)>>2)];
 var $230=$228;
 var $231=$229;
 var $232=((($230)-($231))|0);
 var $233=($232|0)==12;
 if($233){label=60;break;}else{var $storemerge_i_i=$229;var $_pn=$229;label=61;break;}
 case 60: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=51;break; }
 case 61: 
 var $_pn;
 var $storemerge_i_i;
 var $_024=(($_pn+12)|0);
 var $236=($_024|0)==($228|0);
 if($236){label=71;break;}else{label=62;break;}
 case 62: 
 var $238=$storemerge_i_i;
 var $239=HEAP8[(($238)>>0)];
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=64;break;}else{label=63;break;}
 case 63: 
 var $243=(($storemerge_i_i+8)|0);
 var $244=HEAP32[(($243)>>2)];
 HEAP8[(($244)>>0)]=0;
 var $245=(($storemerge_i_i+4)|0);
 HEAP32[(($245)>>2)]=0;
 label=65;break;
 case 64: 
 var $247=$storemerge_i_i;
 var $248=(($247+1)|0);
 HEAP8[(($248)>>0)]=0;
 HEAP8[(($238)>>0)]=0;
 label=65;break;
 case 65: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($storemerge_i_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=66;break; }
 case 66: 
 var $250$0 = ___cxa_find_matching_catch(0); var $250$1 = tempRet0;
 var $251=$250$0;
 ___clang_call_terminate($251);
 throw "Reached an unreachable!";
 case 67: 
 var $252=$_024;
 assert(12 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($252)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($252)+(4))>>2)];HEAP32[((($238)+(8))>>2)]=HEAP32[((($252)+(8))>>2)];
 var $253=$_024;
 var $storemerge1_i_i=0;label=68;break;
 case 68: 
 var $storemerge1_i_i;
 var $255=($storemerge1_i_i>>>0)<3;
 if($255){label=69;break;}else{label=70;break;}
 case 69: 
 var $257=(($253+($storemerge1_i_i<<2))|0);
 HEAP32[(($257)>>2)]=0;
 var $258=((($storemerge1_i_i)+(1))|0);
 var $storemerge1_i_i=$258;label=68;break;
 case 70: 
 var $259=(($storemerge_i_i+12)|0);
 var $storemerge_i_i=$259;var $_pn=$_024;label=61;break;
 case 71: 
 var $260=HEAP32[(($86)>>2)];
 var $261=($storemerge_i_i|0)==($260|0);
 if($261){label=74;break;}else{label=72;break;}
 case 72: 
 var $263=((($260)-(12))|0);
 HEAP32[(($86)>>2)]=$263;
 var $264=$263;
 var $265=HEAP8[(($264)>>0)];
 var $266=$265&1;
 var $267=(($266<<24)>>24)==0;
 if($267){label=71;break;}else{label=73;break;}
 case 73: 
 var $269=((($260)-(12)+8)|0);
 var $270=HEAP32[(($269)>>2)];
 _free($270);
 label=71;break;
 case 74: 
 var $271=$isNormalDefined_i_0&1;
 var $272=(($271<<24)>>24)==0;
 var $_133=($272?65:81);
 var $_134=($272?65:81);
 var $273=$isTexCoordDefined_i_0&1;
 var $274=(($273<<24)>>24)==0;
 var $275=$_134|32;
 var $storemerge121=($274?$_133:$275);
 var $276=($274?$_134:$275);
 var $277=$isColorDefined_i_0&1;
 var $278=(($277<<24)>>24)==0;
 var $279=$276|260;
 var $storemerge121_=($278?$storemerge121:$279);
 HEAP32[(($loadmask)>>2)]=$storemerge121_;
 var $280=(($mesh)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($280);
 var $281=HEAP32[(($86)>>2)];
 var $282=HEAP32[(($85)>>2)];
 var $283=$281;
 var $284=$282;
 var $285=((($283)-($284))|0);
 var $286=(((($285|0))/(12))&-1);
 var $287=($286>>>0)<3;
 if($287){var $_4=2;label=382;break;}else{label=75;break;}
 case 75: 
 var $289=$282;
 var $290=HEAP8[(($289)>>0)];
 var $291=$290&1;
 var $292=(($291<<24)>>24)==0;
 if($292){label=77;break;}else{label=76;break;}
 case 76: 
 var $294=(($282+8)|0);
 var $295=HEAP32[(($294)>>2)];
 var $_0_i_i=$295;label=78;break;
 case 77: 
 var $297=$282;
 var $298=(($297+1)|0);
 var $_0_i_i=$298;label=78;break;
 case 78: 
 var $_0_i_i;
 var $299=HEAP8[(($_0_i_i)>>0)];
 var $300=(($299<<24)>>24)==32;
 if($300){label=79;break;}else{label=80;break;}
 case 79: 
 var $301=(($_0_i_i+1)|0);
 var $_0_i_i=$301;label=78;break;
 case 80: 
 var $302=(($299<<24)>>24);
 var $303=((($302)-(9))|0);
 var $phitmp=($303>>>0)>4;
 var $304=(($_0_i_i+1)|0);
 if($phitmp){label=81;break;}else{var $_0_i_i=$304;label=78;break;}
 case 81: 
 if(($302|0)==45){ label=82;break;}else if(($302|0)==43){ var $neg_0_i_i=0;label=83;break;}else{var $neg_1_ph_i_i=0;var $_1_ph_i_i=$_0_i_i;var $308=$299;label=84;break;}
 case 82: 
 var $neg_0_i_i=1;label=83;break;
 case 83: 
 var $neg_0_i_i;
 var $_pre_i_i=HEAP8[(($304)>>0)];
 var $neg_1_ph_i_i=$neg_0_i_i;var $_1_ph_i_i=$304;var $308=$_pre_i_i;label=84;break;
 case 84: 
 var $308;
 var $_1_ph_i_i;
 var $neg_1_ph_i_i;
 var $309=(($308<<24)>>24);
 var $310=((($309)-(48))|0);
 var $311=($310>>>0)<10;
 if($311){var $_12_i_i=$_1_ph_i_i;var $n_03_i_i=0;var $312=$308;label=85;break;}else{var $n_0_lcssa_i_i=0;label=86;break;}
 case 85: 
 var $312;
 var $n_03_i_i;
 var $_12_i_i;
 var $313=((($n_03_i_i)*(10))&-1);
 var $314=(($_12_i_i+1)|0);
 var $315=(($312<<24)>>24);
 var $_neg1_i_i=((($313)+(48))|0);
 var $316=((($_neg1_i_i)-($315))|0);
 var $317=HEAP8[(($314)>>0)];
 var $318=(($317<<24)>>24);
 var $319=((($318)-(48))|0);
 var $320=($319>>>0)<10;
 if($320){var $_12_i_i=$314;var $n_03_i_i=$316;var $312=$317;label=85;break;}else{var $n_0_lcssa_i_i=$316;label=86;break;}
 case 86: 
 var $n_0_lcssa_i_i;
 var $321=($neg_1_ph_i_i|0)!=0;
 var $322=(((-$n_0_lcssa_i_i))|0);
 var $323=($321?$n_0_lcssa_i_i:$322);
 var $324=(($282+12)|0);
 var $325=$324;
 var $326=HEAP8[(($325)>>0)];
 var $327=$326&1;
 var $328=(($327<<24)>>24)==0;
 if($328){label=88;break;}else{label=87;break;}
 case 87: 
 var $330=(($282+20)|0);
 var $331=HEAP32[(($330)>>2)];
 var $_0_i29_i=$331;label=89;break;
 case 88: 
 var $333=$324;
 var $334=(($333+1)|0);
 var $_0_i29_i=$334;label=89;break;
 case 89: 
 var $_0_i29_i;
 var $335=HEAP8[(($_0_i29_i)>>0)];
 var $336=(($335<<24)>>24)==32;
 if($336){label=90;break;}else{label=91;break;}
 case 90: 
 var $337=(($_0_i29_i+1)|0);
 var $_0_i29_i=$337;label=89;break;
 case 91: 
 var $338=(($335<<24)>>24);
 var $339=((($338)-(9))|0);
 var $phitmp14=($339>>>0)>4;
 var $340=(($_0_i29_i+1)|0);
 if($phitmp14){label=92;break;}else{var $_0_i29_i=$340;label=89;break;}
 case 92: 
 if(($338|0)==45){ label=93;break;}else if(($338|0)==43){ var $neg_0_i32_i=0;label=94;break;}else{var $neg_1_ph_i35_i=0;var $_1_ph_i34_i=$_0_i29_i;var $344=$335;label=95;break;}
 case 93: 
 var $neg_0_i32_i=1;label=94;break;
 case 94: 
 var $neg_0_i32_i;
 var $_pre_i33_i=HEAP8[(($340)>>0)];
 var $neg_1_ph_i35_i=$neg_0_i32_i;var $_1_ph_i34_i=$340;var $344=$_pre_i33_i;label=95;break;
 case 95: 
 var $344;
 var $_1_ph_i34_i;
 var $neg_1_ph_i35_i;
 var $345=(($344<<24)>>24);
 var $346=((($345)-(48))|0);
 var $347=($346>>>0)<10;
 if($347){var $_12_i38_i=$_1_ph_i34_i;var $n_03_i37_i=0;var $348=$344;label=96;break;}else{var $n_0_lcssa_i41_i=0;label=97;break;}
 case 96: 
 var $348;
 var $n_03_i37_i;
 var $_12_i38_i;
 var $349=((($n_03_i37_i)*(10))&-1);
 var $350=(($_12_i38_i+1)|0);
 var $351=(($348<<24)>>24);
 var $_neg1_i39_i=((($349)+(48))|0);
 var $352=((($_neg1_i39_i)-($351))|0);
 var $353=HEAP8[(($350)>>0)];
 var $354=(($353<<24)>>24);
 var $355=((($354)-(48))|0);
 var $356=($355>>>0)<10;
 if($356){var $_12_i38_i=$350;var $n_03_i37_i=$352;var $348=$353;label=96;break;}else{var $n_0_lcssa_i41_i=$352;label=97;break;}
 case 97: 
 var $n_0_lcssa_i41_i;
 var $357=($neg_1_ph_i35_i|0)!=0;
 var $358=(((-$n_0_lcssa_i41_i))|0);
 var $359=($357?$n_0_lcssa_i41_i:$358);
 var $360=(($282+24)|0);
 var $361=$360;
 var $362=HEAP8[(($361)>>0)];
 var $363=$362&1;
 var $364=(($363<<24)>>24)==0;
 if($364){label=99;break;}else{label=98;break;}
 case 98: 
 var $366=(($282+32)|0);
 var $367=HEAP32[(($366)>>2)];
 var $_0_i43_i=$367;label=100;break;
 case 99: 
 var $369=$360;
 var $370=(($369+1)|0);
 var $_0_i43_i=$370;label=100;break;
 case 100: 
 var $_0_i43_i;
 var $371=HEAP8[(($_0_i43_i)>>0)];
 var $372=(($371<<24)>>24)==32;
 if($372){label=101;break;}else{label=102;break;}
 case 101: 
 var $373=(($_0_i43_i+1)|0);
 var $_0_i43_i=$373;label=100;break;
 case 102: 
 var $374=(($371<<24)>>24);
 var $375=((($374)-(9))|0);
 var $phitmp15=($375>>>0)>4;
 var $376=(($_0_i43_i+1)|0);
 if($phitmp15){label=103;break;}else{var $_0_i43_i=$376;label=100;break;}
 case 103: 
 if(($374|0)==45|($374|0)==43){ label=104;break;}else{var $_1_ph_i48_i=$_0_i43_i;var $379=$371;label=105;break;}
 case 104: 
 var $_pre_i47_i=HEAP8[(($376)>>0)];
 var $_1_ph_i48_i=$376;var $379=$_pre_i47_i;label=105;break;
 case 105: 
 var $379;
 var $_1_ph_i48_i;
 var $380=(($379<<24)>>24);
 var $381=((($380)-(48))|0);
 var $382=($381>>>0)<10;
 if($382){var $_12_i52_i=$_1_ph_i48_i;var $n_03_i51_i=0;var $383=$379;label=106;break;}else{label=107;break;}
 case 106: 
 var $383;
 var $n_03_i51_i;
 var $_12_i52_i;
 var $384=((($n_03_i51_i)*(10))&-1);
 var $385=(($_12_i52_i+1)|0);
 var $386=(($383<<24)>>24);
 var $_neg1_i53_i=((($384)+(48))|0);
 var $387=((($_neg1_i53_i)-($386))|0);
 var $388=HEAP8[(($385)>>0)];
 var $389=(($388<<24)>>24);
 var $390=((($389)-(48))|0);
 var $391=($390>>>0)<10;
 if($391){var $_12_i52_i=$385;var $n_03_i51_i=$387;var $383=$388;label=106;break;}else{label=107;break;}
 case 107: 
 var $392=$homogeneousComponents_i_0&1;
 var $393=(($392<<24)>>24)==0;
 if($393){label=108;break;}else{var $_4=4;label=382;break;}
 case 108: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($v_iter_i,$mesh,$323) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=51;break; }
 case 109: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=51;break; }
 case 110: 
 var $397=($cb|0)==0;
 var $398=$f_i_i_i_i;
 var $399=(($f_i_i_i_i+4)|0);
 var $400=(($f_i_i_i_i+8)|0);
 var $401=(($f_i_i_i_i+44)|0);
 var $402=(($f_i_i_i_i+76)|0);
 var $403=(($f_i_i_i_i+104)|0);
 var $404=(($f_i_i_i_i+108)|0);
 var $405=(($f_i_i_i_i+100)|0);
 var $406=(($v_iter_i)|0);
 var $407=(($str_i+8)|0);
 var $408=$str_i;
 var $409=(($408+1)|0);
 var $410=(($str_i)|0);
 var $411=(($str_i+4)|0);
 var $412=($273&255);
 var $413=$412<<1;
 var $414=$f_i_i_i58_i;
 var $415=(($f_i_i_i58_i+4)|0);
 var $416=(($f_i_i_i58_i+8)|0);
 var $417=(($f_i_i_i58_i+44)|0);
 var $418=(($f_i_i_i58_i+76)|0);
 var $419=(($f_i_i_i58_i+104)|0);
 var $420=(($f_i_i_i58_i+108)|0);
 var $421=(($f_i_i_i58_i+100)|0);
 var $k_i_0=0;var $i_i_0=0;label=111;break;
 case 111: 
 var $i_i_0;
 var $k_i_0;
 var $423=($i_i_0>>>0)<($323>>>0);
 if($423){label=112;break;}else{label=168;break;}
 case 112: 
 var $_not=$397^1;
 var $425=(((($i_i_0>>>0))%(1000))&-1);
 var $426=($425|0)==0;
 var $or_cond136=$_not&$426;
 if($or_cond136){label=113;break;}else{label=114;break;}
 case 113: 
 var $428=((($i_i_0)*(50))&-1);
 var $429=(((($428>>>0))/(($323>>>0)))&-1);
 var $430=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$cb]($429,2888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=50;break; }
 case 114: 
 var $431=HEAP32[(($406)>>2)];
 var $storemerge12_i=0;var $k_i_1=$k_i_0;label=115;break;
 case 115: 
 var $k_i_1;
 var $storemerge12_i;
 var $433=($storemerge12_i>>>0)<3;
 if($433){label=116;break;}else{label=126;break;}
 case 116: 
 var $435=HEAP32[(($86)>>2)];
 var $436=HEAP32[(($85)>>2)];
 var $437=$435;
 var $438=$436;
 var $439=((($437)-($438))|0);
 var $440=(((($439|0))/(12))&-1);
 var $441=($k_i_1|0)==($440|0);
 if($441){label=117;break;}else{var $k_i_2=$k_i_1;var $448=$436;label=119;break;}
 case 117: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=46;break; }
 case 118: 
 var $444=HEAP32[(($86)>>2)];
 var $445=HEAP32[(($85)>>2)];
 var $446=($444|0)==($445|0);
 if($446){var $_4=2;label=382;break;}else{var $k_i_2=0;var $448=$445;label=119;break;}
 case 119: 
 var $448;
 var $k_i_2;
 var $449=(($448+((($k_i_2)*(12))&-1))|0);
 var $450=$449;
 var $451=HEAP8[(($450)>>0)];
 var $452=$451&1;
 var $453=(($452<<24)>>24)==0;
 if($453){label=121;break;}else{label=120;break;}
 case 120: 
 var $455=(($448+((($k_i_2)*(12))&-1)+8)|0);
 var $456=HEAP32[(($455)>>2)];
 var $460=$456;label=122;break;
 case 121: 
 var $458=$449;
 var $459=(($458+1)|0);
 var $460=$459;label=122;break;
 case 122: 
 var $460;
 var $$etemp$12$0=112;
 var $$etemp$12$1=0;

 _memset($398, 0, 108)|0;
 HEAP32[(($399)>>2)]=$460;
 HEAP32[(($400)>>2)]=-1;
 HEAP32[(($401)>>2)]=$460;
 HEAP32[(($402)>>2)]=-1;
 HEAP32[(($403)>>2)]=0;
 var $461=$460;
 var $462=$461^-1;
 HEAP32[(($404)>>2)]=$462;
 HEAP32[(($405)>>2)]=-1;
 var $463=___floatscan($f_i_i_i_i,1,1);
 var $$etemp$13$0=112;
 var $$etemp$13$1=0;

 var $464=$463;
 var $465=($storemerge12_i|0)>-1;
 var $466=($storemerge12_i|0)<3;
 var $or_cond137=$465&$466;
 if($or_cond137){label=125;break;}else{label=123;break;}
 case 123: 
 (function() { try { __THREW__ = 0; return ___assert_fail(10200,9640,220,1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=51;break; }
 case 124: 
 throw "Reached an unreachable!";
 case 125: 
 var $468=(($431+($storemerge12_i<<2))|0);
 HEAPF32[(($468)>>2)]=$464;
 var $469=((($k_i_2)+(1))|0);
 var $470=((($storemerge12_i)+(1))|0);
 var $storemerge12_i=$470;var $k_i_1=$469;label=115;break;
 case 126: 
 if($272){var $k_i_5=$k_i_1;label=138;break;}else{var $storemerge14_i=0;var $k_i_3=$k_i_1;label=127;break;}
 case 127: 
 var $k_i_3;
 var $storemerge14_i;
 var $472=($storemerge14_i>>>0)<3;
 if($472){label=128;break;}else{var $k_i_5=$k_i_3;label=138;break;}
 case 128: 
 var $474=HEAP32[(($86)>>2)];
 var $475=HEAP32[(($85)>>2)];
 var $476=$474;
 var $477=$475;
 var $478=((($476)-($477))|0);
 var $479=(((($478|0))/(12))&-1);
 var $480=($k_i_3|0)==($479|0);
 if($480){label=129;break;}else{var $k_i_4=$k_i_3;var $487=$475;label=131;break;}
 case 129: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=47;break; }
 case 130: 
 var $483=HEAP32[(($86)>>2)];
 var $484=HEAP32[(($85)>>2)];
 var $485=($483|0)==($484|0);
 if($485){var $_4=2;label=382;break;}else{var $k_i_4=0;var $487=$484;label=131;break;}
 case 131: 
 var $487;
 var $k_i_4;
 var $488=(($487+((($k_i_4)*(12))&-1))|0);
 var $489=$488;
 var $490=HEAP8[(($489)>>0)];
 var $491=$490&1;
 var $492=(($491<<24)>>24)==0;
 if($492){label=133;break;}else{label=132;break;}
 case 132: 
 var $494=(($487+((($k_i_4)*(12))&-1)+8)|0);
 var $495=HEAP32[(($494)>>2)];
 var $499=$495;label=134;break;
 case 133: 
 var $497=$488;
 var $498=(($497+1)|0);
 var $499=$498;label=134;break;
 case 134: 
 var $499;
 var $$etemp$14$0=112;
 var $$etemp$14$1=0;

 _memset($414, 0, 108)|0;
 HEAP32[(($415)>>2)]=$499;
 HEAP32[(($416)>>2)]=-1;
 HEAP32[(($417)>>2)]=$499;
 HEAP32[(($418)>>2)]=-1;
 HEAP32[(($419)>>2)]=0;
 var $500=$499;
 var $501=$500^-1;
 HEAP32[(($420)>>2)]=$501;
 HEAP32[(($421)>>2)]=-1;
 var $502=___floatscan($f_i_i_i58_i,1,1);
 var $$etemp$15$0=112;
 var $$etemp$15$1=0;

 var $503=$502;
 var $504=($storemerge14_i|0)>-1;
 var $505=($storemerge14_i|0)<3;
 var $or_cond138=$504&$505;
 if($or_cond138){label=137;break;}else{label=135;break;}
 case 135: 
 (function() { try { __THREW__ = 0; return ___assert_fail(10200,9640,220,1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=136;break; } else { label=51;break; }
 case 136: 
 throw "Reached an unreachable!";
 case 137: 
 var $507=(($431+12+($storemerge14_i<<2))|0);
 HEAPF32[(($507)>>2)]=$503;
 var $508=((($k_i_4)+(1))|0);
 var $509=((($storemerge14_i)+(1))|0);
 var $storemerge14_i=$509;var $k_i_3=$508;label=127;break;
 case 138: 
 var $k_i_5;
 if($278){var $k_i_6=$k_i_5;label=143;break;}else{label=139;break;}
 case 139: 
 var $511=HEAP32[(($86)>>2)];
 var $512=HEAP32[(($85)>>2)];
 var $513=$511;
 var $514=$512;
 var $515=((($513)-($514))|0);
 var $516=(((($515|0))/(12))&-1);
 var $517=((($516)-($k_i_5))|0);
 var $518=((($517)-($413))|0);
 var $519=($518|0)<0;
 var $520=($518|0)>4;
 var $or_cond139=$519|$520;
 if($or_cond139){var $_4=2;label=382;break;}else{label=140;break;}
 case 140: 
 var $522=($518|0)>0;
 if($522){label=141;break;}else{label=142;break;}
 case 141: 
 var $524=HEAP32[(($loadmask)>>2)];
 var $525=$524|4;
 HEAP32[(($loadmask)>>2)]=$525;
 label=142;break;
 case 142: 
 var $527=((($k_i_5)+($518))|0);
 var $k_i_6=$527;label=143;break;
 case 143: 
 var $k_i_6;
 if($274){var $k_i_9=$k_i_6;var $587=$431;label=167;break;}else{var $storemerge13_i=0;var $k_i_7=$k_i_6;label=144;break;}
 case 144: 
 var $k_i_7;
 var $storemerge13_i;
 var $529=($storemerge13_i>>>0)<2;
 if($529){label=145;break;}else{label=166;break;}
 case 145: 
 var $531=HEAP32[(($86)>>2)];
 var $532=HEAP32[(($85)>>2)];
 var $533=$531;
 var $534=$532;
 var $535=((($533)-($534))|0);
 var $536=(((($535|0))/(12))&-1);
 var $537=($k_i_7|0)==($536|0);
 if($537){label=146;break;}else{var $k_i_8=$k_i_7;var $544=$532;label=148;break;}
 case 146: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=49;break; }
 case 147: 
 var $540=HEAP32[(($86)>>2)];
 var $541=HEAP32[(($85)>>2)];
 var $542=($540|0)==($541|0);
 if($542){var $_4=2;label=382;break;}else{var $k_i_8=0;var $544=$541;label=148;break;}
 case 148: 
 var $544;
 var $k_i_8;
 var $545=(($544+((($k_i_8)*(12))&-1))|0);
 var $546=$545;
 var $547=HEAP8[(($546)>>0)];
 var $548=$547&1;
 var $549=(($548<<24)>>24)==0;
 if($549){label=149;break;}else{label=150;break;}
 case 149: 
 assert(12 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($546)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($546)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($546)+(8))>>2)];
 label=163;break;
 case 150: 
 var $552=(($544+((($k_i_8)*(12))&-1)+8)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($544+((($k_i_8)*(12))&-1)+4)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=($555>>>0)>4294967279;
 if($556){label=151;break;}else{label=153;break;}
 case 151: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=152;break; } else { label=51;break; }
 case 152: 
 throw "Reached an unreachable!";
 case 153: 
 var $559=($555>>>0)<11;
 if($559){label=154;break;}else{label=155;break;}
 case 154: 
 var $561=$555<<1;
 var $562=(($561)&255);
 HEAP8[(($76)>>0)]=$562;
 var $__p_0_i64_i=$409;label=162;break;
 case 155: 
 var $563=((($555)+(16))|0);
 var $564=$563&-16;
 var $565=($564|0)==0;
 var $_size_i68_i=($565?1:$564);
 var $566=_malloc($_size_i68_i);
 var $567=($566|0)==0;
 if($567){label=156;break;}else{var $_lcssa_i70_i=$566;label=161;break;}
 case 156: 
 var $568=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $569=($568|0)==0;
 if($569){label=159;break;}else{label=157;break;}
 case 157: 
 var $571=$568;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$571]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { label=48;break; }
 case 158: 
 var $572=_malloc($_size_i68_i);
 var $573=($572|0)==0;
 if($573){label=156;break;}else{var $_lcssa_i70_i=$572;label=161;break;}
 case 159: 
 var $575=___cxa_allocate_exception(4);
 var $576=$575;
 HEAP32[(($576)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($575,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=160;break; } else { label=51;break; }
 case 160: 
 throw "Reached an unreachable!";
 case 161: 
 var $_lcssa_i70_i;
 HEAP32[(($407)>>2)]=$_lcssa_i70_i;
 var $577=$564|1;
 HEAP32[(($410)>>2)]=$577;
 HEAP32[(($411)>>2)]=$555;
 var $__p_0_i64_i=$_lcssa_i70_i;label=162;break;
 case 162: 
 var $__p_0_i64_i;
 assert($555 % 1 === 0);(_memcpy($__p_0_i64_i, $553, $555)|0);
 var $578=(($__p_0_i64_i+$555)|0);
 HEAP8[(($578)>>0)]=0;
 label=163;break;
 case 163: 
 var $579=((($k_i_8)+(1))|0);
 var $580=HEAP8[(($76)>>0)];
 var $581=$580&1;
 var $582=(($581<<24)>>24)==0;
 if($582){label=165;break;}else{label=164;break;}
 case 164: 
 var $584=HEAP32[(($407)>>2)];
 _free($584);
 label=165;break;
 case 165: 
 var $585=((($storemerge13_i)+(1))|0);
 var $storemerge13_i=$585;var $k_i_7=$579;label=144;break;
 case 166: 
 var $_pre=HEAP32[(($406)>>2)];
 var $k_i_9=$k_i_7;var $587=$_pre;label=167;break;
 case 167: 
 var $587;
 var $k_i_9;
 var $588=((($i_i_0)+(1))|0);
 var $589=(($587+28)|0);
 HEAP32[(($406)>>2)]=$589;
 var $k_i_0=$k_i_9;var $i_i_0=$588;label=111;break;
 case 168: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($0,$mesh,$359) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=169;break; } else { label=51;break; }
 case 169: 
 var $592=(($qtmp_i)|0);
 HEAP32[(($592)>>2)]=0;
 var $593=(($qtmp_i+4)|0);
 HEAP32[(($593)>>2)]=0;
 var $594=(($qtmp_i+8)|0);
 HEAP32[(($594)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE($qtmp_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=175;break; }
 case 170: 
 var $595=$stream;
 var $596=$stream;
 var $597=(($polygonVect_i)|0);
 var $598=(($polygonVect_i+4)|0);
 var $599=(($polygonVect_i+8)|0);
 var $600=(($vertIndices_i)|0);
 var $601=(($mesh)|0);
 var $602=(($vertIndices_i+4)|0);
 var $603=(($q_i)|0);
 var $604=(($mesh+32)|0);
 var $605=(($q_i+4)|0);
 var $606=(($indexTriangulatedVect_i)|0);
 var $607=(($indexTriangulatedVect_i+4)|0);
 var $608=(($indexTriangulatedVect_i+8)|0);
 var $609=(($loopVect_i)|0);
 var $610=(($loopVect_i+4)|0);
 var $611=(($loopVect_i+8)|0);
 var $storemerge3_i=0;var $_025=0;var $isColorDefined_i_2=$isColorDefined_i_0;var $nFaces_i_0=$359;label=171;break;
 case 171: 
 var $nFaces_i_0;
 var $isColorDefined_i_2;
 var $_025;
 var $storemerge3_i;
 var $613=($storemerge3_i>>>0)<($nFaces_i_0>>>0);
 if($613){label=172;break;}else{var $_3=$_025;var $_038=0;label=371;break;}
 case 172: 
 var $615=HEAP32[(($595)>>2)];
 var $616=((($615)-(12))|0);
 var $617=$616;
 var $618=HEAP32[(($617)>>2)];
 var $_sum_i=((($618)+(16))|0);
 var $619=(($596+$_sum_i)|0);
 var $620=$619;
 var $621=HEAP32[(($620)>>2)];
 var $622=$621&5;
 var $623=($622|0)==0;
 if($623){label=177;break;}else{var $_3=2;var $_038=1;label=371;break;}
 case 173: 
 var $lpad_loopexit61$0 = ___cxa_find_matching_catch(); var $lpad_loopexit61$1 = tempRet0;
 var $lpad_phi63$1=$lpad_loopexit61$1;var $lpad_phi63$0=$lpad_loopexit61$0;label=176;break;
 case 174: 
 var $lpad_loopexit65$0 = ___cxa_find_matching_catch(); var $lpad_loopexit65$1 = tempRet0;
 var $lpad_phi63$1=$lpad_loopexit65$1;var $lpad_phi63$0=$lpad_loopexit65$0;label=176;break;
 case 175: 
 var $lpad_nonloopexit66$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit66$1 = tempRet0;
 var $lpad_phi63$1=$lpad_nonloopexit66$1;var $lpad_phi63$0=$lpad_nonloopexit66$0;label=176;break;
 case 176: 
 var $lpad_phi63$0;
 var $lpad_phi63$1;
 var $624=$lpad_phi63$0;
 var $625=$lpad_phi63$1;
 var $_228=$624;var $_233=$625;label=377;break;
 case 177: 
 var $_not140=$397^1;
 var $627=(((($storemerge3_i>>>0))%(1000))&-1);
 var $628=($627|0)==0;
 var $or_cond142=$_not140&$628;
 if($or_cond142){label=178;break;}else{label=179;break;}
 case 178: 
 var $630=((($storemerge3_i)*(50))&-1);
 var $631=(((($630>>>0))/(($nFaces_i_0>>>0)))&-1);
 var $632=((($631)+(50))|0);
 var $633=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$cb]($632,2416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { label=174;break; }
 case 179: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=180;break; } else { label=174;break; }
 case 180: 
 var $636=HEAP32[(($85)>>2)];
 var $637=$636;
 var $638=HEAP8[(($637)>>0)];
 var $639=$638&1;
 var $640=(($639<<24)>>24)==0;
 if($640){label=182;break;}else{label=181;break;}
 case 181: 
 var $642=(($636+8)|0);
 var $643=HEAP32[(($642)>>2)];
 var $_0_i75_i=$643;label=183;break;
 case 182: 
 var $645=$636;
 var $646=(($645+1)|0);
 var $_0_i75_i=$646;label=183;break;
 case 183: 
 var $_0_i75_i;
 var $647=HEAP8[(($_0_i75_i)>>0)];
 var $648=(($647<<24)>>24)==32;
 if($648){label=184;break;}else{label=185;break;}
 case 184: 
 var $649=(($_0_i75_i+1)|0);
 var $_0_i75_i=$649;label=183;break;
 case 185: 
 var $650=(($647<<24)>>24);
 var $651=((($650)-(9))|0);
 var $phitmp16=($651>>>0)>4;
 var $652=(($_0_i75_i+1)|0);
 if($phitmp16){label=186;break;}else{var $_0_i75_i=$652;label=183;break;}
 case 186: 
 if(($650|0)==45){ label=187;break;}else if(($650|0)==43){ var $neg_0_i78_i=0;label=188;break;}else{var $neg_1_ph_i81_i=0;var $_1_ph_i80_i=$_0_i75_i;var $656=$647;label=189;break;}
 case 187: 
 var $neg_0_i78_i=1;label=188;break;
 case 188: 
 var $neg_0_i78_i;
 var $_pre_i79_i=HEAP8[(($652)>>0)];
 var $neg_1_ph_i81_i=$neg_0_i78_i;var $_1_ph_i80_i=$652;var $656=$_pre_i79_i;label=189;break;
 case 189: 
 var $656;
 var $_1_ph_i80_i;
 var $neg_1_ph_i81_i;
 var $657=(($656<<24)>>24);
 var $658=((($657)-(48))|0);
 var $659=($658>>>0)<10;
 if($659){var $_12_i84_i=$_1_ph_i80_i;var $n_03_i83_i=0;var $660=$656;label=190;break;}else{var $n_0_lcssa_i87_i=0;label=191;break;}
 case 190: 
 var $660;
 var $n_03_i83_i;
 var $_12_i84_i;
 var $661=((($n_03_i83_i)*(10))&-1);
 var $662=(($_12_i84_i+1)|0);
 var $663=(($660<<24)>>24);
 var $_neg1_i85_i=((($661)+(48))|0);
 var $664=((($_neg1_i85_i)-($663))|0);
 var $665=HEAP8[(($662)>>0)];
 var $666=(($665<<24)>>24);
 var $667=((($666)-(48))|0);
 var $668=($667>>>0)<10;
 if($668){var $_12_i84_i=$662;var $n_03_i83_i=$664;var $660=$665;label=190;break;}else{var $n_0_lcssa_i87_i=$664;label=191;break;}
 case 191: 
 var $n_0_lcssa_i87_i;
 var $669=($neg_1_ph_i81_i|0)!=0;
 var $670=(((-$n_0_lcssa_i87_i))|0);
 var $671=($669?$n_0_lcssa_i87_i:$670);
 var $672=($671|0)<3;
 if($672){var $_3=7;var $_038=1;label=371;break;}else{label=192;break;}
 case 192: 
 var $674=($671|0)==3;
 if($674){var $storemerge11_i=0;var $k_i_10=1;label=193;break;}else{label=212;break;}
 case 193: 
 var $k_i_10;
 var $storemerge11_i;
 var $675=($storemerge11_i|0)<3;
 if($675){label=194;break;}else{var $_2=$_025;var $nFaces_i_1=$nFaces_i_0;var $f17_i_1=$storemerge3_i;label=368;break;}
 case 194: 
 var $677=HEAP32[(($86)>>2)];
 var $678=HEAP32[(($85)>>2)];
 var $679=$677;
 var $680=$678;
 var $681=((($679)-($680))|0);
 var $682=(((($681|0))/(12))&-1);
 var $683=($k_i_10|0)==($682|0);
 if($683){label=195;break;}else{var $k_i_11=$k_i_10;var $690=$678;label=197;break;}
 case 195: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=173;break; }
 case 196: 
 var $686=HEAP32[(($86)>>2)];
 var $687=HEAP32[(($85)>>2)];
 var $688=($686|0)==($687|0);
 if($688){var $_3=2;var $_038=1;label=371;break;}else{var $k_i_11=0;var $690=$687;label=197;break;}
 case 197: 
 var $690;
 var $k_i_11;
 var $691=(($690+((($k_i_11)*(12))&-1))|0);
 var $692=$691;
 var $693=HEAP8[(($692)>>0)];
 var $694=$693&1;
 var $695=(($694<<24)>>24)==0;
 if($695){label=199;break;}else{label=198;break;}
 case 198: 
 var $697=(($690+((($k_i_11)*(12))&-1)+8)|0);
 var $698=HEAP32[(($697)>>2)];
 var $_0_i89_i=$698;label=200;break;
 case 199: 
 var $700=$691;
 var $701=(($700+1)|0);
 var $_0_i89_i=$701;label=200;break;
 case 200: 
 var $_0_i89_i;
 var $702=HEAP8[(($_0_i89_i)>>0)];
 var $703=(($702<<24)>>24)==32;
 if($703){label=201;break;}else{label=202;break;}
 case 201: 
 var $704=(($_0_i89_i+1)|0);
 var $_0_i89_i=$704;label=200;break;
 case 202: 
 var $705=(($702<<24)>>24);
 var $706=((($705)-(9))|0);
 var $phitmp19=($706>>>0)>4;
 var $707=(($_0_i89_i+1)|0);
 if($phitmp19){label=203;break;}else{var $_0_i89_i=$707;label=200;break;}
 case 203: 
 if(($705|0)==45){ label=204;break;}else if(($705|0)==43){ var $neg_0_i92_i=0;label=205;break;}else{var $neg_1_ph_i95_i=0;var $_1_ph_i94_i=$_0_i89_i;var $711=$702;label=206;break;}
 case 204: 
 var $neg_0_i92_i=1;label=205;break;
 case 205: 
 var $neg_0_i92_i;
 var $_pre_i93_i=HEAP8[(($707)>>0)];
 var $neg_1_ph_i95_i=$neg_0_i92_i;var $_1_ph_i94_i=$707;var $711=$_pre_i93_i;label=206;break;
 case 206: 
 var $711;
 var $_1_ph_i94_i;
 var $neg_1_ph_i95_i;
 var $712=(($711<<24)>>24);
 var $713=((($712)-(48))|0);
 var $714=($713>>>0)<10;
 if($714){var $_12_i98_i=$_1_ph_i94_i;var $n_03_i97_i=0;var $715=$711;label=207;break;}else{var $n_0_lcssa_i101_i=0;label=208;break;}
 case 207: 
 var $715;
 var $n_03_i97_i;
 var $_12_i98_i;
 var $716=((($n_03_i97_i)*(10))&-1);
 var $717=(($_12_i98_i+1)|0);
 var $718=(($715<<24)>>24);
 var $_neg1_i99_i=((($716)+(48))|0);
 var $719=((($_neg1_i99_i)-($718))|0);
 var $720=HEAP8[(($717)>>0)];
 var $721=(($720<<24)>>24);
 var $722=((($721)-(48))|0);
 var $723=($722>>>0)<10;
 if($723){var $_12_i98_i=$717;var $n_03_i97_i=$719;var $715=$720;label=207;break;}else{var $n_0_lcssa_i101_i=$719;label=208;break;}
 case 208: 
 var $n_0_lcssa_i101_i;
 var $724=($neg_1_ph_i95_i|0)!=0;
 var $725=(((-$n_0_lcssa_i101_i))|0);
 var $726=($724?$n_0_lcssa_i101_i:$725);
 var $727=HEAP32[(($601)>>2)];
 var $728=(($727+((($726)*(28))&-1))|0);
 var $729=HEAP32[(($604)>>2)];
 var $730=($storemerge11_i|0)>-1;
 if($730){label=211;break;}else{label=209;break;}
 case 209: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,173,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { label=175;break; }
 case 210: 
 throw "Reached an unreachable!";
 case 211: 
 var $732=(($729+($storemerge3_i<<5)+16+($storemerge11_i<<2))|0);
 HEAP32[(($732)>>2)]=$728;
 var $733=((($k_i_11)+(1))|0);
 var $734=((($storemerge11_i)+(1))|0);
 var $storemerge11_i=$734;var $k_i_10=$733;label=193;break;
 case 212: 
 var $736=((($671)-(3))|0);
 var $737=((($nFaces_i_0)+($736))|0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($1,$mesh,$736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { label=174;break; }
 case 213: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vertIndices_i,$671) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=214;break; } else { label=174;break; }
 case 214: 
 HEAP32[(($597)>>2)]=0;
 HEAP32[(($598)>>2)]=0;
 HEAP32[(($599)>>2)]=0;
 var $740=($671|0)==0;
 if($740){var $776=0;label=234;break;}else{label=215;break;}
 case 215: 
 var $742=($671>>>0)>357913941;
 if($742){label=216;break;}else{label=218;break;}
 case 216: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=217;break; } else { label=228;break; }
 case 217: 
 throw "Reached an unreachable!";
 case 218: 
 var $745=((($671)*(12))&-1);
 var $746=($745|0)==0;
 var $_size_i_i_i=($746?1:$745);
 var $747=_malloc($_size_i_i_i);
 var $748=($747|0)==0;
 if($748){label=219;break;}else{var $_lcssa_i_i_i=$747;label=224;break;}
 case 219: 
 var $749=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $750=($749|0)==0;
 if($750){label=222;break;}else{label=220;break;}
 case 220: 
 var $752=$749;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$752]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=221;break; } else { label=227;break; }
 case 221: 
 var $753=_malloc($_size_i_i_i);
 var $754=($753|0)==0;
 if($754){label=219;break;}else{var $_lcssa_i_i_i=$753;label=224;break;}
 case 222: 
 var $756=___cxa_allocate_exception(4);
 var $757=$756;
 HEAP32[(($757)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($756,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=223;break; } else { label=228;break; }
 case 223: 
 throw "Reached an unreachable!";
 case 224: 
 var $_lcssa_i_i_i;
 var $758=$_lcssa_i_i_i;
 HEAP32[(($598)>>2)]=$758;
 HEAP32[(($597)>>2)]=$758;
 var $759=(($758+((($671)*(12))&-1))|0);
 HEAP32[(($599)>>2)]=$759;
 var $_023=$671;var $760=$758;label=225;break;
 case 225: 
 var $760;
 var $_023;
 var $761=(($760+12)|0);
 var $762=((($_023)-(1))|0);
 var $763=($762|0)==0;
 if($763){label=226;break;}else{var $_023=$762;var $760=$761;label=225;break;}
 case 226: 
 HEAP32[(($598)>>2)]=$761;
 var $776=$758;label=234;break;
 case 227: 
 var $lpad_loopexit41$0 = ___cxa_find_matching_catch(); var $lpad_loopexit41$1 = tempRet0;
 var $lpad_phi43$1=$lpad_loopexit41$1;var $lpad_phi43$0=$lpad_loopexit41$0;label=229;break;
 case 228: 
 var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit42$1 = tempRet0;
 var $lpad_phi43$1=$lpad_nonloopexit42$1;var $lpad_phi43$0=$lpad_nonloopexit42$0;label=229;break;
 case 229: 
 var $lpad_phi43$0;
 var $lpad_phi43$1;
 var $765=$lpad_phi43$0;
 var $766=$lpad_phi43$1;
 var $767=HEAP32[(($597)>>2)];
 var $768=($767|0)==0;
 if($768){var $_127=$765;var $_132=$766;label=363;break;}else{label=230;break;}
 case 230: 
 var $_pre118=HEAP32[(($598)>>2)];
 var $771=$_pre118;label=231;break;
 case 231: 
 var $771;
 var $772=($767|0)==($771|0);
 if($772){label=233;break;}else{label=232;break;}
 case 232: 
 var $774=((($771)-(12))|0);
 HEAP32[(($598)>>2)]=$774;
 var $771=$774;label=231;break;
 case 233: 
 var $775=$767;
 _free($775);
 var $_127=$765;var $_132=$766;label=363;break;
 case 234: 
 var $776;
 var $storemerge4_i=0;var $k_i_12=1;label=235;break;
 case 235: 
 var $k_i_12;
 var $storemerge4_i;
 var $778=($storemerge4_i|0)<($671|0);
 if($778){label=236;break;}else{label=254;break;}
 case 236: 
 var $780=HEAP32[(($86)>>2)];
 var $781=HEAP32[(($85)>>2)];
 var $782=$780;
 var $783=$781;
 var $784=((($782)-($783))|0);
 var $785=(((($784|0))/(12))&-1);
 var $786=($k_i_12|0)==($785|0);
 if($786){label=237;break;}else{var $k_i_13=$k_i_12;var $796=$781;label=242;break;}
 case 237: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($72,$tokens_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=238;break; } else { label=239;break; }
 case 238: 
 var $789=HEAP32[(($86)>>2)];
 var $790=HEAP32[(($85)>>2)];
 var $791=($789|0)==($790|0);
 if($791){var $storemerge10_i=1;var $_1=2;var $f17_i_0=$storemerge3_i;var $1124=$776;label=347;break;}else{var $k_i_13=0;var $796=$790;label=242;break;}
 case 239: 
 var $lpad_loopexit46$0 = ___cxa_find_matching_catch(); var $lpad_loopexit46$1 = tempRet0;
 var $lpad_phi48$1=$lpad_loopexit46$1;var $lpad_phi48$0=$lpad_loopexit46$0;label=241;break;
 case 240: 
 var $lpad_nonloopexit47$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit47$1 = tempRet0;
 var $lpad_phi48$1=$lpad_nonloopexit47$1;var $lpad_phi48$0=$lpad_nonloopexit47$0;label=241;break;
 case 241: 
 var $lpad_phi48$0;
 var $lpad_phi48$1;
 var $793=$lpad_phi48$0;
 var $794=$lpad_phi48$1;
 var $_026=$793;var $_031=$794;var $1142=$776;label=358;break;
 case 242: 
 var $796;
 var $k_i_13;
 var $797=(($796+((($k_i_13)*(12))&-1))|0);
 var $798=$797;
 var $799=HEAP8[(($798)>>0)];
 var $800=$799&1;
 var $801=(($800<<24)>>24)==0;
 if($801){label=244;break;}else{label=243;break;}
 case 243: 
 var $803=(($796+((($k_i_13)*(12))&-1)+8)|0);
 var $804=HEAP32[(($803)>>2)];
 var $_0_i104_i=$804;label=245;break;
 case 244: 
 var $806=$797;
 var $807=(($806+1)|0);
 var $_0_i104_i=$807;label=245;break;
 case 245: 
 var $_0_i104_i;
 var $808=HEAP8[(($_0_i104_i)>>0)];
 var $809=(($808<<24)>>24)==32;
 if($809){label=246;break;}else{label=247;break;}
 case 246: 
 var $810=(($_0_i104_i+1)|0);
 var $_0_i104_i=$810;label=245;break;
 case 247: 
 var $811=(($808<<24)>>24);
 var $812=((($811)-(9))|0);
 var $phitmp18=($812>>>0)>4;
 var $813=(($_0_i104_i+1)|0);
 if($phitmp18){label=248;break;}else{var $_0_i104_i=$813;label=245;break;}
 case 248: 
 if(($811|0)==45){ label=249;break;}else if(($811|0)==43){ var $neg_0_i107_i=0;label=250;break;}else{var $neg_1_ph_i110_i=0;var $_1_ph_i109_i=$_0_i104_i;var $817=$808;label=251;break;}
 case 249: 
 var $neg_0_i107_i=1;label=250;break;
 case 250: 
 var $neg_0_i107_i;
 var $_pre_i108_i=HEAP8[(($813)>>0)];
 var $neg_1_ph_i110_i=$neg_0_i107_i;var $_1_ph_i109_i=$813;var $817=$_pre_i108_i;label=251;break;
 case 251: 
 var $817;
 var $_1_ph_i109_i;
 var $neg_1_ph_i110_i;
 var $818=(($817<<24)>>24);
 var $819=((($818)-(48))|0);
 var $820=($819>>>0)<10;
 if($820){var $_12_i113_i=$_1_ph_i109_i;var $n_03_i112_i=0;var $821=$817;label=252;break;}else{var $n_0_lcssa_i116_i=0;label=253;break;}
 case 252: 
 var $821;
 var $n_03_i112_i;
 var $_12_i113_i;
 var $822=((($n_03_i112_i)*(10))&-1);
 var $823=(($_12_i113_i+1)|0);
 var $824=(($821<<24)>>24);
 var $_neg1_i114_i=((($822)+(48))|0);
 var $825=((($_neg1_i114_i)-($824))|0);
 var $826=HEAP8[(($823)>>0)];
 var $827=(($826<<24)>>24);
 var $828=((($827)-(48))|0);
 var $829=($828>>>0)<10;
 if($829){var $_12_i113_i=$823;var $n_03_i112_i=$825;var $821=$826;label=252;break;}else{var $n_0_lcssa_i116_i=$825;label=253;break;}
 case 253: 
 var $n_0_lcssa_i116_i;
 var $830=($neg_1_ph_i110_i|0)!=0;
 var $831=(((-$n_0_lcssa_i116_i))|0);
 var $832=($830?$n_0_lcssa_i116_i:$831);
 var $833=HEAP32[(($600)>>2)];
 var $834=(($833+($storemerge4_i<<2))|0);
 HEAP32[(($834)>>2)]=$832;
 var $835=HEAP32[(($601)>>2)];
 var $836=(($835+((($832)*(28))&-1))|0);
 var $837=HEAPF32[(($836)>>2)];
 var $838=(($776+((($storemerge4_i)*(12))&-1))|0);
 HEAPF32[(($838)>>2)]=$837;
 var $839=(($835+((($832)*(28))&-1)+4)|0);
 var $840=HEAPF32[(($839)>>2)];
 var $841=(($776+((($storemerge4_i)*(12))&-1)+4)|0);
 HEAPF32[(($841)>>2)]=$840;
 var $842=(($835+((($832)*(28))&-1)+8)|0);
 var $843=HEAPF32[(($842)>>2)];
 var $844=(($776+((($storemerge4_i)*(12))&-1)+8)|0);
 HEAPF32[(($844)>>2)]=$843;
 var $845=((($k_i_13)+(1))|0);
 var $846=((($storemerge4_i)+(1))|0);
 var $storemerge4_i=$846;var $k_i_12=$845;label=235;break;
 case 254: 
 var $848=($671|0)==4;
 if($848){label=255;break;}else{label=277;break;}
 case 255: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($q_i,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=240;break; }
 case 256: 
 var $850=HEAP32[(($603)>>2)];
 var $storemerge7_i=0;label=257;break;
 case 257: 
 var $storemerge7_i;
 var $852=($storemerge7_i|0)<4;
 if($852){label=258;break;}else{label=264;break;}
 case 258: 
 var $854=HEAP32[(($600)>>2)];
 var $855=(($854+($storemerge7_i<<2))|0);
 var $856=HEAP32[(($855)>>2)];
 var $857=HEAP32[(($601)>>2)];
 var $858=(($857+((($856)*(28))&-1))|0);
 var $859=(($850+($storemerge7_i<<2))|0);
 HEAP32[(($859)>>2)]=$858;
 var $860=((($storemerge7_i)+(1))|0);
 var $storemerge7_i=$860;label=257;break;
 case 259: 
 var $862$0 = ___cxa_find_matching_catch(); var $862$1 = tempRet0;
 var $863=$862$0;
 var $864=$862$1;
 var $865=($850|0)==0;
 if($865){var $_026=$863;var $_031=$864;var $1142=$776;label=358;break;}else{label=260;break;}
 case 260: 
 var $_pre105=HEAP32[(($605)>>2)];
 var $868=$_pre105;label=261;break;
 case 261: 
 var $868;
 var $869=($850|0)==($868|0);
 if($869){label=263;break;}else{label=262;break;}
 case 262: 
 var $871=((($868)-(4))|0);
 HEAP32[(($605)>>2)]=$871;
 var $868=$871;label=261;break;
 case 263: 
 var $872=$850;
 _free($872);
 var $_026=$863;var $_031=$864;var $1142=$776;label=358;break;
 case 264: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE($q_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge8_i=0;label=265;break; } else { label=259;break; }
 case 265: 
 var $storemerge8_i;
 var $874=($storemerge8_i|0)<4;
 if($874){label=266;break;}else{var $storemerge9_i=0;label=267;break;}
 case 266: 
 var $876=(($850+($storemerge8_i<<2))|0);
 var $877=HEAP32[(($601)>>2)];
 var $878=HEAP32[(($876)>>2)];
 var $879=$877;
 var $880=$878;
 var $881=HEAP32[(($600)>>2)];
 var $882=((($880)-($879))|0);
 var $883=(($881+($storemerge8_i<<2))|0);
 var $884=(((($882|0))/(28))&-1);
 HEAP32[(($883)>>2)]=$884;
 var $885=((($storemerge8_i)+(1))|0);
 var $storemerge8_i=$885;label=265;break;
 case 267: 
 var $storemerge9_i;
 var $886=($storemerge9_i|0)<2;
 if($886){label=268;break;}else{label=272;break;}
 case 268: 
 var $887=HEAP32[(($600)>>2)];
 var $888=HEAP32[(($887)>>2)];
 var $889=HEAP32[(($601)>>2)];
 var $890=HEAP32[(($604)>>2)];
 var $891=((($storemerge3_i)+($storemerge9_i))|0);
 var $892=(($889+((($888)*(28))&-1))|0);
 var $893=(($890+($891<<5)+16)|0);
 HEAP32[(($893)>>2)]=$892;
 var $894=((($storemerge9_i)+(1))|0);
 var $895=(($887+($894<<2))|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=HEAP32[(($601)>>2)];
 var $898=HEAP32[(($604)>>2)];
 var $899=(($897+((($896)*(28))&-1))|0);
 var $900=(($898+($891<<5)+20)|0);
 HEAP32[(($900)>>2)]=$899;
 var $901=((($storemerge9_i)+(2))|0);
 var $902=(($887+($901<<2))|0);
 var $903=HEAP32[(($902)>>2)];
 var $904=HEAP32[(($601)>>2)];
 var $905=HEAP32[(($604)>>2)];
 var $906=(($904+((($903)*(28))&-1))|0);
 var $907=(($905+($891<<5)+24)|0);
 HEAP32[(($907)>>2)]=$906;
 var $908=($storemerge9_i|0)>0;
 var $909=HEAP32[(($604)>>2)];
 var $910=(($909+($891<<5)+28)|0);
 var $911=HEAP32[(($910)>>2)];
 if($908){label=269;break;}else{label=270;break;}
 case 269: 
 var $913=$911|262144;
 HEAP32[(($910)>>2)]=$913;
 var $914=($storemerge9_i|0)<1;
 label=271;break;
 case 270: 
 var $916=$911|1048576;
 HEAP32[(($910)>>2)]=$916;
 label=271;break;
 case 271: 
 var $918=HEAP32[(($loadmask)>>2)];
 var $919=$918|131072;
 HEAP32[(($loadmask)>>2)]=$919;
 var $storemerge9_i=$894;label=267;break;
 case 272: 
 var $921=($850|0)==0;
 if($921){var $_pre100=$776;label=346;break;}else{label=273;break;}
 case 273: 
 var $_pre106=HEAP32[(($605)>>2)];
 var $924=$_pre106;label=274;break;
 case 274: 
 var $924;
 var $925=($850|0)==($924|0);
 if($925){label=276;break;}else{label=275;break;}
 case 275: 
 var $927=((($924)-(4))|0);
 HEAP32[(($605)>>2)]=$927;
 var $924=$927;label=274;break;
 case 276: 
 var $928=$850;
 _free($928);
 var $_pre100=$776;label=346;break;
 case 277: 
 HEAP32[(($606)>>2)]=0;
 HEAP32[(($607)>>2)]=0;
 HEAP32[(($608)>>2)]=0;
 HEAP32[(($609)>>2)]=0;
 HEAP32[(($610)>>2)]=0;
 HEAP32[(($611)>>2)]=0;
 var $930=_malloc(12);
 var $931=($930|0)==0;
 if($931){label=278;break;}else{var $_lcssa_i_i_i_i=$930;label=283;break;}
 case 278: 
 var $932=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $933=($932|0)==0;
 if($933){label=281;break;}else{label=279;break;}
 case 279: 
 var $935=$932;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$935]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=280;break; } else { label=311;break; }
 case 280: 
 var $936=_malloc(12);
 var $937=($936|0)==0;
 if($937){label=278;break;}else{var $_lcssa_i_i_i_i=$936;label=283;break;}
 case 281: 
 var $939=___cxa_allocate_exception(4);
 var $940=$939;
 HEAP32[(($940)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($939,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=282;break; } else { label=313;break; }
 case 282: 
 throw "Reached an unreachable!";
 case 283: 
 var $_lcssa_i_i_i_i;
 var $941=$_lcssa_i_i_i_i;
 var $942=(($941+12)|0);
 var $943=($941|0)==0;
 if($943){label=285;break;}else{label=284;break;}
 case 284: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($941,$polygonVect_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=285;break; } else { label=297;break; }
 case 285: 
 var $945=HEAP32[(($609)>>2)];
 var $946=HEAP32[(($610)>>2)];
 var $_0=$946;var $__v_i_i_sroa_9_0=$941;label=286;break;
 case 286: 
 var $__v_i_i_sroa_9_0;
 var $_0;
 var $948=($_0|0)==($945|0);
 if($948){label=288;break;}else{label=287;break;}
 case 287: 
 var $950=((($_0)-(12))|0);
 var $951=((($__v_i_i_sroa_9_0)-(12))|0);
 var $952=(($951)|0);
 HEAP32[(($952)>>2)]=0;
 var $953=((($__v_i_i_sroa_9_0)-(12)+4)|0);
 HEAP32[(($953)>>2)]=0;
 var $954=((($__v_i_i_sroa_9_0)-(12)+8)|0);
 HEAP32[(($954)>>2)]=0;
 var $955=(($950)|0);
 var $956=HEAP32[(($955)>>2)];
 HEAP32[(($952)>>2)]=$956;
 var $957=((($_0)-(12)+4)|0);
 var $958=HEAP32[(($957)>>2)];
 HEAP32[(($953)>>2)]=$958;
 var $959=((($_0)-(12)+8)|0);
 var $960=HEAP32[(($959)>>2)];
 HEAP32[(($954)>>2)]=$960;
 HEAP32[(($959)>>2)]=0;
 HEAP32[(($957)>>2)]=0;
 HEAP32[(($955)>>2)]=0;
 var $_0=$950;var $__v_i_i_sroa_9_0=$951;label=286;break;
 case 288: 
 var $961=HEAP32[(($609)>>2)];
 HEAP32[(($609)>>2)]=$__v_i_i_sroa_9_0;
 var $962=HEAP32[(($610)>>2)];
 HEAP32[(($610)>>2)]=$942;
 HEAP32[(($611)>>2)]=$942;
 var $__v_i_i_sroa_18_0=$962;label=289;break;
 case 289: 
 var $__v_i_i_sroa_18_0;
 var $963=($961|0)==($__v_i_i_sroa_18_0|0);
 if($963){label=295;break;}else{label=290;break;}
 case 290: 
 var $965=((($__v_i_i_sroa_18_0)-(12))|0);
 var $966=(($965)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==0;
 if($968){var $__v_i_i_sroa_18_0=$965;label=289;break;}else{label=291;break;}
 case 291: 
 var $970=((($__v_i_i_sroa_18_0)-(12)+4)|0);
 var $_pre108=HEAP32[(($970)>>2)];
 var $972=$_pre108;label=292;break;
 case 292: 
 var $972;
 var $973=($967|0)==($972|0);
 if($973){label=294;break;}else{label=293;break;}
 case 293: 
 var $975=((($972)-(12))|0);
 HEAP32[(($970)>>2)]=$975;
 var $972=$975;label=292;break;
 case 294: 
 var $976=$967;
 _free($976);
 var $__v_i_i_sroa_18_0=$965;label=289;break;
 case 295: 
 var $977=($961|0)==0;
 if($977){label=305;break;}else{label=296;break;}
 case 296: 
 var $979=$961;
 _free($979);
 label=305;break;
 case 297: 
 var $981$0 = ___cxa_find_matching_catch(); var $981$1 = tempRet0;
 var $__v_i_i_sroa_18_1=$941;label=298;break;
 case 298: 
 var $__v_i_i_sroa_18_1;
 var $982=($941|0)==($__v_i_i_sroa_18_1|0);
 if($982){label=304;break;}else{label=299;break;}
 case 299: 
 var $984=((($__v_i_i_sroa_18_1)-(12))|0);
 var $985=(($984)|0);
 var $986=HEAP32[(($985)>>2)];
 var $987=($986|0)==0;
 if($987){var $__v_i_i_sroa_18_1=$984;label=298;break;}else{label=300;break;}
 case 300: 
 var $989=((($__v_i_i_sroa_18_1)-(12)+4)|0);
 var $_pre109=HEAP32[(($989)>>2)];
 var $991=$_pre109;label=301;break;
 case 301: 
 var $991;
 var $992=($986|0)==($991|0);
 if($992){label=303;break;}else{label=302;break;}
 case 302: 
 var $994=((($991)-(12))|0);
 HEAP32[(($989)>>2)]=$994;
 var $991=$994;label=301;break;
 case 303: 
 var $995=$986;
 _free($995);
 var $__v_i_i_sroa_18_1=$984;label=298;break;
 case 304: 
 var $996=$941;
 _free($996);
 var $eh_lpad_body138_i$1=$981$1;var $eh_lpad_body138_i$0=$981$0;label=314;break;
 case 305: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($loopVect_i,$indexTriangulatedVect_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge5_i=0;label=306;break; } else { label=312;break; }
 case 306: 
 var $storemerge5_i;
 var $997=HEAP32[(($607)>>2)];
 var $998=HEAP32[(($606)>>2)];
 var $999=$997;
 var $1000=$998;
 var $1001=((($999)-($1000))|0);
 var $1002=$1001>>2;
 var $1003=($storemerge5_i>>>0)<($1002>>>0);
 if($1003){label=307;break;}else{label=331;break;}
 case 307: 
 var $1004=(($998+($storemerge5_i<<2))|0);
 var $1005=HEAP32[(($600)>>2)];
 var $1006=HEAP32[(($1004)>>2)];
 var $1007=(($1005+($1006<<2))|0);
 var $1008=HEAP32[(($1007)>>2)];
 var $1009=HEAP32[(($601)>>2)];
 var $1010=HEAP32[(($604)>>2)];
 var $1011=(((($storemerge5_i>>>0))/(3))&-1);
 var $1012=((($storemerge3_i)+($1011))|0);
 var $1013=(($1009+((($1008)*(28))&-1))|0);
 var $1014=(($1010+($1012<<5)+16)|0);
 HEAP32[(($1014)>>2)]=$1013;
 var $1015=((($storemerge5_i)+(1))|0);
 var $1016=HEAP32[(($606)>>2)];
 var $1017=(($1016+($1015<<2))|0);
 var $1018=HEAP32[(($1017)>>2)];
 var $1019=(($1005+($1018<<2))|0);
 var $1020=HEAP32[(($1019)>>2)];
 var $1021=HEAP32[(($601)>>2)];
 var $1022=HEAP32[(($604)>>2)];
 var $1023=(($1021+((($1020)*(28))&-1))|0);
 var $1024=(($1022+($1012<<5)+20)|0);
 HEAP32[(($1024)>>2)]=$1023;
 var $1025=((($storemerge5_i)+(2))|0);
 var $1026=HEAP32[(($606)>>2)];
 var $1027=(($1026+($1025<<2))|0);
 var $1028=HEAP32[(($1027)>>2)];
 var $1029=(($1005+($1028<<2))|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=HEAP32[(($601)>>2)];
 var $1032=HEAP32[(($604)>>2)];
 var $1033=(($1031+((($1030)*(28))&-1))|0);
 var $1034=(($1032+($1012<<5)+24)|0);
 HEAP32[(($1034)>>2)]=$1033;
 var $storemerge6_i=0;label=308;break;
 case 308: 
 var $storemerge6_i;
 var $1036=($storemerge6_i|0)<3;
 if($1036){label=309;break;}else{label=330;break;}
 case 309: 
 var $1038=((($storemerge5_i)+($storemerge6_i))|0);
 var $1039=HEAP32[(($606)>>2)];
 var $1040=((($storemerge6_i)+(1))|0);
 var $1041=(($1039+($1038<<2))|0);
 var $1042=(((($1040|0))%(3))&-1);
 var $1043=HEAP32[(($1041)>>2)];
 var $1044=((($storemerge5_i)+($1042))|0);
 var $1045=((($1043)+(1))|0);
 var $1046=(($1039+($1044<<2))|0);
 var $1047=(((($1045|0))%(($671|0)))&-1);
 var $1048=HEAP32[(($1046)>>2)];
 var $1049=($1047|0)==($1048|0);
 var $1050=HEAP32[(($604)>>2)];
 var $1051=262144<<$storemerge6_i;
 if($1049){label=310;break;}else{label=329;break;}
 case 310: 
 var $1053=$1051^-1;
 var $1054=(($1050+($1012<<5)+28)|0);
 var $1055=HEAP32[(($1054)>>2)];
 var $1056=$1055&$1053;
 HEAP32[(($1054)>>2)]=$1056;
 var $storemerge6_i=$1040;label=308;break;
 case 311: 
 var $lpad_loopexit51$0 = ___cxa_find_matching_catch(); var $lpad_loopexit51$1 = tempRet0;
 var $eh_lpad_body138_i$1=$lpad_loopexit51$1;var $eh_lpad_body138_i$0=$lpad_loopexit51$0;label=314;break;
 case 312: 
 var $lpad_loopexit68$0 = ___cxa_find_matching_catch(); var $lpad_loopexit68$1 = tempRet0;
 var $eh_lpad_body138_i$1=$lpad_loopexit68$1;var $eh_lpad_body138_i$0=$lpad_loopexit68$0;label=314;break;
 case 313: 
 var $lpad_nonloopexit69$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit69$1 = tempRet0;
 var $eh_lpad_body138_i$1=$lpad_nonloopexit69$1;var $eh_lpad_body138_i$0=$lpad_nonloopexit69$0;label=314;break;
 case 314: 
 var $eh_lpad_body138_i$0;
 var $eh_lpad_body138_i$1;
 var $1057=$eh_lpad_body138_i$0;
 var $1058=$eh_lpad_body138_i$1;
 var $1059=HEAP32[(($609)>>2)];
 var $1060=($1059|0)==0;
 if($1060){label=323;break;}else{label=315;break;}
 case 315: 
 var $_pre111=HEAP32[(($610)>>2)];
 var $1062=$_pre111;label=316;break;
 case 316: 
 var $1062;
 var $1063=($1059|0)==($1062|0);
 if($1063){label=322;break;}else{label=317;break;}
 case 317: 
 var $1065=((($1062)-(12))|0);
 HEAP32[(($610)>>2)]=$1065;
 var $1066=(($1065)|0);
 var $1067=HEAP32[(($1066)>>2)];
 var $1068=($1067|0)==0;
 if($1068){var $1062=$1065;label=316;break;}else{label=318;break;}
 case 318: 
 var $1070=((($1062)-(12)+4)|0);
 var $_pre112=HEAP32[(($1070)>>2)];
 var $1072=$_pre112;label=319;break;
 case 319: 
 var $1072;
 var $1073=($1067|0)==($1072|0);
 if($1073){label=321;break;}else{label=320;break;}
 case 320: 
 var $1075=((($1072)-(12))|0);
 HEAP32[(($1070)>>2)]=$1075;
 var $1072=$1075;label=319;break;
 case 321: 
 var $1076=$1067;
 _free($1076);
 var $1062=$1065;label=316;break;
 case 322: 
 var $1077=$1059;
 _free($1077);
 label=323;break;
 case 323: 
 var $1078=HEAP32[(($606)>>2)];
 var $1079=($1078|0)==0;
 if($1079){label=328;break;}else{label=324;break;}
 case 324: 
 var $_pre110=HEAP32[(($607)>>2)];
 var $1082=$_pre110;label=325;break;
 case 325: 
 var $1082;
 var $1083=($1078|0)==($1082|0);
 if($1083){label=327;break;}else{label=326;break;}
 case 326: 
 var $1085=((($1082)-(4))|0);
 HEAP32[(($607)>>2)]=$1085;
 var $1082=$1085;label=325;break;
 case 327: 
 var $1086=$1078;
 _free($1086);
 label=328;break;
 case 328: 
 var $_pre103=HEAP32[(($597)>>2)];
 var $_026=$1057;var $_031=$1058;var $1142=$_pre103;label=358;break;
 case 329: 
 var $1088=(($1050+($1012<<5)+28)|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=$1089|$1051;
 HEAP32[(($1088)>>2)]=$1090;
 var $storemerge6_i=$1040;label=308;break;
 case 330: 
 var $1092=((($storemerge5_i)+(3))|0);
 var $storemerge5_i=$1092;label=306;break;
 case 331: 
 var $1094=HEAP32[(($609)>>2)];
 var $1095=($1094|0)==0;
 if($1095){var $1113=$998;label=340;break;}else{label=332;break;}
 case 332: 
 var $_pre115=HEAP32[(($610)>>2)];
 var $1097=$_pre115;label=333;break;
 case 333: 
 var $1097;
 var $1098=($1094|0)==($1097|0);
 if($1098){label=339;break;}else{label=334;break;}
 case 334: 
 var $1100=((($1097)-(12))|0);
 HEAP32[(($610)>>2)]=$1100;
 var $1101=(($1100)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==0;
 if($1103){var $1097=$1100;label=333;break;}else{label=335;break;}
 case 335: 
 var $1105=((($1097)-(12)+4)|0);
 var $_pre116=HEAP32[(($1105)>>2)];
 var $1107=$_pre116;label=336;break;
 case 336: 
 var $1107;
 var $1108=($1102|0)==($1107|0);
 if($1108){label=338;break;}else{label=337;break;}
 case 337: 
 var $1110=((($1107)-(12))|0);
 HEAP32[(($1105)>>2)]=$1110;
 var $1107=$1110;label=336;break;
 case 338: 
 var $1111=$1102;
 _free($1111);
 var $1097=$1100;label=333;break;
 case 339: 
 var $1112=$1094;
 _free($1112);
 var $_pre113=HEAP32[(($606)>>2)];
 var $1113=$_pre113;label=340;break;
 case 340: 
 var $1113;
 var $1114=($1113|0)==0;
 if($1114){label=345;break;}else{label=341;break;}
 case 341: 
 var $_pre114=HEAP32[(($607)>>2)];
 var $1117=$_pre114;label=342;break;
 case 342: 
 var $1117;
 var $1118=($1113|0)==($1117|0);
 if($1118){label=344;break;}else{label=343;break;}
 case 343: 
 var $1120=((($1117)-(4))|0);
 HEAP32[(($607)>>2)]=$1120;
 var $1117=$1120;label=342;break;
 case 344: 
 var $1121=$1113;
 _free($1121);
 label=345;break;
 case 345: 
 var $_pre100_pre=HEAP32[(($597)>>2)];
 var $_pre100=$_pre100_pre;label=346;break;
 case 346: 
 var $_pre100;
 var $1122=((($storemerge3_i)+($736))|0);
 var $storemerge10_i=0;var $_1=$_025;var $f17_i_0=$1122;var $1124=$_pre100;label=347;break;
 case 347: 
 var $1124;
 var $f17_i_0;
 var $_1;
 var $storemerge10_i;
 var $1125=($1124|0)==0;
 if($1125){label=352;break;}else{label=348;break;}
 case 348: 
 var $_pre102=HEAP32[(($598)>>2)];
 var $1128=$_pre102;label=349;break;
 case 349: 
 var $1128;
 var $1129=($1124|0)==($1128|0);
 if($1129){label=351;break;}else{label=350;break;}
 case 350: 
 var $1131=((($1128)-(12))|0);
 HEAP32[(($598)>>2)]=$1131;
 var $1128=$1131;label=349;break;
 case 351: 
 var $1132=$1124;
 _free($1132);
 label=352;break;
 case 352: 
 var $1133=HEAP32[(($600)>>2)];
 var $1134=($1133|0)==0;
 if($1134){label=357;break;}else{label=353;break;}
 case 353: 
 var $_pre101=HEAP32[(($602)>>2)];
 var $1137=$_pre101;label=354;break;
 case 354: 
 var $1137;
 var $1138=($1133|0)==($1137|0);
 if($1138){label=356;break;}else{label=355;break;}
 case 355: 
 var $1140=((($1137)-(4))|0);
 HEAP32[(($602)>>2)]=$1140;
 var $1137=$1140;label=354;break;
 case 356: 
 var $1141=$1133;
 _free($1141);
 label=357;break;
 case 357: 
 var $cond=($storemerge10_i|0)==0;
 if($cond){var $_2=$_1;var $nFaces_i_1=$737;var $f17_i_1=$f17_i_0;label=368;break;}else{var $_3=$_1;var $_038=$storemerge10_i;label=371;break;}
 case 358: 
 var $1142;
 var $_031;
 var $_026;
 var $1143=($1142|0)==0;
 if($1143){var $_127=$_026;var $_132=$_031;label=363;break;}else{label=359;break;}
 case 359: 
 var $_pre104=HEAP32[(($598)>>2)];
 var $1146=$_pre104;label=360;break;
 case 360: 
 var $1146;
 var $1147=($1142|0)==($1146|0);
 if($1147){label=362;break;}else{label=361;break;}
 case 361: 
 var $1149=((($1146)-(12))|0);
 HEAP32[(($598)>>2)]=$1149;
 var $1146=$1149;label=360;break;
 case 362: 
 var $1150=$1142;
 _free($1150);
 var $_127=$_026;var $_132=$_031;label=363;break;
 case 363: 
 var $_132;
 var $_127;
 var $1151=HEAP32[(($600)>>2)];
 var $1152=($1151|0)==0;
 if($1152){var $_228=$_127;var $_233=$_132;label=377;break;}else{label=364;break;}
 case 364: 
 var $_pre117=HEAP32[(($602)>>2)];
 var $1155=$_pre117;label=365;break;
 case 365: 
 var $1155;
 var $1156=($1151|0)==($1155|0);
 if($1156){label=367;break;}else{label=366;break;}
 case 366: 
 var $1158=((($1155)-(4))|0);
 HEAP32[(($602)>>2)]=$1158;
 var $1155=$1158;label=365;break;
 case 367: 
 var $1159=$1151;
 _free($1159);
 var $_228=$_127;var $_233=$_132;label=377;break;
 case 368: 
 var $f17_i_1;
 var $nFaces_i_1;
 var $_2;
 var $1160=HEAP32[(($86)>>2)];
 var $1161=HEAP32[(($85)>>2)];
 var $1162=$1160;
 var $1163=$1161;
 var $1164=((($1162)-($1163))|0);
 var $1165=(((($1164|0))/(12))&-1);
 var $1166=((($1165)-($671))|0);
 var $1167=($1166|0)!=1;
 var $1168=($1167&1);
 var $1169=$isColorDefined_i_2&1;
 var $1170=$1169|$1168;
 var $1171=(($1170<<24)>>24)==0;
 if($1171){label=370;break;}else{label=369;break;}
 case 369: 
 var $1173=HEAP32[(($loadmask)>>2)];
 var $1174=$1173|256;
 HEAP32[(($loadmask)>>2)]=$1174;
 label=370;break;
 case 370: 
 var $1176=((($f17_i_1)+(1))|0);
 var $storemerge3_i=$1176;var $_025=$_2;var $isColorDefined_i_2=$1170;var $nFaces_i_0=$nFaces_i_1;label=171;break;
 case 371: 
 var $_038;
 var $_3;
 var $1177=HEAP32[(($592)>>2)];
 var $1178=($1177|0)==0;
 if($1178){label=376;break;}else{label=372;break;}
 case 372: 
 var $_pre119=HEAP32[(($593)>>2)];
 var $1181=$_pre119;label=373;break;
 case 373: 
 var $1181;
 var $1182=($1177|0)==($1181|0);
 if($1182){label=375;break;}else{label=374;break;}
 case 374: 
 var $1184=((($1181)-(4))|0);
 HEAP32[(($593)>>2)]=$1184;
 var $1181=$1184;label=373;break;
 case 375: 
 var $1185=$1177;
 _free($1185);
 label=376;break;
 case 376: 
 var $cond4=($_038|0)==0;
 var $__3=($cond4?0:$_3);
 var $_4=$__3;label=382;break;
 case 377: 
 var $_233;
 var $_228;
 var $1186=HEAP32[(($592)>>2)];
 var $1187=($1186|0)==0;
 if($1187){var $_329=$_228;var $_334=$_233;label=384;break;}else{label=378;break;}
 case 378: 
 var $_pre99=HEAP32[(($593)>>2)];
 var $1190=$_pre99;label=379;break;
 case 379: 
 var $1190;
 var $1191=($1186|0)==($1190|0);
 if($1191){label=381;break;}else{label=380;break;}
 case 380: 
 var $1193=((($1190)-(4))|0);
 HEAP32[(($593)>>2)]=$1193;
 var $1190=$1193;label=379;break;
 case 381: 
 var $1194=$1186;
 _free($1194);
 var $_329=$_228;var $_334=$_233;label=384;break;
 case 382: 
 var $_4;
 var $1195=HEAP8[(($74)>>0)];
 var $1196=$1195&1;
 var $1197=(($1196<<24)>>24)==0;
 if($1197){label=386;break;}else{label=383;break;}
 case 383: 
 var $1199=(($header_i+8)|0);
 var $1200=HEAP32[(($1199)>>2)];
 _free($1200);
 label=386;break;
 case 384: 
 var $_334;
 var $_329;
 var $1201=HEAP8[(($74)>>0)];
 var $1202=$1201&1;
 var $1203=(($1202<<24)>>24)==0;
 if($1203){var $_430=$_329;var $_435=$_334;label=392;break;}else{label=385;break;}
 case 385: 
 var $1205=HEAP32[(($198)>>2)];
 _free($1205);
 var $_430=$_329;var $_435=$_334;label=392;break;
 case 386: 
 var $_pr=HEAP32[(($85)>>2)];
 var $_5=$_4;var $1206=$_pr;label=387;break;
 case 387: 
 var $1206;
 var $_5;
 var $1207=($1206|0)==0;
 if($1207){var $storemerge=$_5;label=397;break;}else{label=388;break;}
 case 388: 
 var $1208=HEAP32[(($86)>>2)];
 var $1209=($1206|0)==($1208|0);
 if($1209){label=391;break;}else{label=389;break;}
 case 389: 
 var $1211=((($1208)-(12))|0);
 HEAP32[(($86)>>2)]=$1211;
 var $1212=$1211;
 var $1213=HEAP8[(($1212)>>0)];
 var $1214=$1213&1;
 var $1215=(($1214<<24)>>24)==0;
 if($1215){label=388;break;}else{label=390;break;}
 case 390: 
 var $1217=((($1208)-(12)+8)|0);
 var $1218=HEAP32[(($1217)>>2)];
 _free($1218);
 label=388;break;
 case 391: 
 var $1219=HEAP32[(($85)>>2)];
 var $1220=$1219;
 _free($1220);
 var $storemerge=$_5;label=397;break;
 case 392: 
 var $_435;
 var $_430;
 var $1221=HEAP32[(($85)>>2)];
 var $1222=($1221|0)==0;
 if($1222){label=398;break;}else{label=393;break;}
 case 393: 
 var $1223=HEAP32[(($86)>>2)];
 var $1224=($1221|0)==($1223|0);
 if($1224){label=396;break;}else{label=394;break;}
 case 394: 
 var $1226=((($1223)-(12))|0);
 HEAP32[(($86)>>2)]=$1226;
 var $1227=$1226;
 var $1228=HEAP8[(($1227)>>0)];
 var $1229=$1228&1;
 var $1230=(($1229<<24)>>24)==0;
 if($1230){label=393;break;}else{label=395;break;}
 case 395: 
 var $1232=((($1223)-(12)+8)|0);
 var $1233=HEAP32[(($1232)>>2)];
 _free($1233);
 label=393;break;
 case 396: 
 var $1234=HEAP32[(($85)>>2)];
 var $1235=$1234;
 _free($1235);
 label=398;break;
 case 397: 
 var $storemerge;
 HEAP32[(($3)>>2)]=17124;
 var $1237=(($7)|0);
 HEAP32[(($1237)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($34);
 var $1238=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($1238);
 STACKTOP=sp;return $storemerge;
 case 398: 
 var $1240$0=$_430;
 var $1240$1=0;
 var $1241$0=$1240$0;
 var $1241$1=$_435;
 HEAP32[(($3)>>2)]=17124;
 var $1242=(($7)|0);
 HEAP32[(($1242)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($34);
 var $1243=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($1243);
 ___resumeException($1241$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE11DeserializeERS3_Ri($m,$mask){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+648)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h_i_i_i_i_i=(sp)+(16);
 var $3=(sp)+(48);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $h_i_i_i_i=(sp)+(80);
 var $6=(sp)+(112);
 var $7=(sp)+(128);
 var $8=(sp)+(136);
 var $h_i_i_i=(sp)+(144);
 var $9=(sp)+(176);
 var $10=(sp)+(192);
 var $11=(sp)+(200);
 var $h_i_i179=(sp)+(208);
 var $12=(sp)+(240);
 var $13=(sp)+(256);
 var $14=(sp)+(264);
 var $h_i_i130=(sp)+(272);
 var $15=(sp)+(304);
 var $16=(sp)+(320);
 var $17=(sp)+(328);
 var $h_i_i=(sp)+(336);
 var $18=(sp)+(368);
 var $19=(sp)+(384);
 var $20=(sp)+(400);
 var $21=(sp)+(416);
 var $22=(sp)+(432);
 var $23=(sp)+(448);
 var $24=(sp)+(464);
 var $nameF=(sp)+(480);
 var $nameV=(sp)+(496);
 var $fnameF=(sp)+(512);
 var $fnameV=(sp)+(528);
 var $vertSize=(sp)+(544);
 var $faceSize=(sp)+(552);
 var $lbbox=(sp)+(560);
 var $offsetV=(sp)+(584);
 var $offsetF=(sp)+(592);
 var $_string=(sp)+(600);
 var $_trash=(sp)+(616);
 var $n=(sp)+(632);
 var $sz=(sp)+(640);
 var $25=(($nameF)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=(($nameF+4)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($nameF+8)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($nameV)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($nameV+4)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=(($nameV+8)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=(($fnameF)|0);
 HEAP32[(($31)>>2)]=0;
 var $32=(($fnameF+4)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=(($fnameF+8)|0);
 HEAP32[(($33)>>2)]=0;
 var $34=(($fnameV)|0);
 HEAP32[(($34)>>2)]=0;
 var $35=(($fnameV+4)|0);
 HEAP32[(($35)>>2)]=0;
 var $36=(($fnameV+8)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=(($lbbox)|0);
 HEAPF32[(($37)>>2)]=1;
 var $38=(($lbbox+12)|0);
 HEAPF32[(($38)>>2)]=-1;
 var $39=(($lbbox+4)|0);
 HEAPF32[(($39)>>2)]=1;
 var $40=(($lbbox+16)|0);
 HEAPF32[(($40)>>2)]=-1;
 var $41=(($lbbox+8)|0);
 HEAPF32[(($41)>>2)]=1;
 var $42=(($lbbox+20)|0);
 HEAPF32[(($42)>>2)]=-1;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE9GetHeaderERNSt3__16vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEESF_RjSG_RNS_4Box3IfEERi($fnameV,$fnameF,$vertSize,$faceSize,$lbbox,$mask) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=176;break; }
 case 2: 
 var $43=HEAPF32[(($37)>>2)];
 var $44=(($m+64)|0);
 HEAPF32[(($44)>>2)]=$43;
 var $45=(($lbbox+4)|0);
 var $46=HEAPF32[(($45)>>2)];
 var $47=(($m+68)|0);
 HEAPF32[(($47)>>2)]=$46;
 var $48=(($lbbox+8)|0);
 var $49=HEAPF32[(($48)>>2)];
 var $50=(($m+72)|0);
 HEAPF32[(($50)>>2)]=$49;
 var $51=HEAPF32[(($38)>>2)];
 var $52=(($m+76)|0);
 HEAPF32[(($52)>>2)]=$51;
 var $53=(($lbbox+16)|0);
 var $54=HEAPF32[(($53)>>2)];
 var $55=(($m+80)|0);
 HEAPF32[(($55)>>2)]=$54;
 var $56=(($lbbox+20)|0);
 var $57=HEAPF32[(($56)>>2)];
 var $58=(($m+84)|0);
 HEAPF32[(($58)>>2)]=$57;
 var $59=$24;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $60=_strlen(4720);
 var $61=($60>>>0)>4294967279;
 if($61){label=3;break;}else{label=5;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=176;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $64=($60>>>0)<11;
 if($64){label=6;break;}else{label=7;break;}
 case 6: 
 var $66=$60<<1;
 var $67=(($66)&255);
 HEAP8[(($59)>>0)]=$67;
 var $68=$24;
 var $69=(($68+1)|0);
 var $__p_0_i_i=$69;label=14;break;
 case 7: 
 var $70=((($60)+(16))|0);
 var $71=$70&-16;
 var $72=($71|0)==0;
 var $_size_i_i=($72?1:$71);
 var $73=_malloc($_size_i_i);
 var $74=($73|0)==0;
 if($74){label=8;break;}else{var $_lcssa_i_i=$73;label=13;break;}
 case 8: 
 var $75=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $76=($75|0)==0;
 if($76){label=11;break;}else{label=9;break;}
 case 9: 
 var $78=$75;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$78]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=175;break; }
 case 10: 
 var $79=_malloc($_size_i_i);
 var $80=($79|0)==0;
 if($80){label=8;break;}else{var $_lcssa_i_i=$79;label=13;break;}
 case 11: 
 var $82=___cxa_allocate_exception(4);
 var $83=$82;
 HEAP32[(($83)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($82,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=176;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i;
 var $84=(($24+8)|0);
 HEAP32[(($84)>>2)]=$_lcssa_i_i;
 var $85=$71|1;
 var $86=(($24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($24+4)|0);
 HEAP32[(($87)>>2)]=$60;
 var $__p_0_i_i=$_lcssa_i_i;label=14;break;
 case 14: 
 var $__p_0_i_i;
 assert($60 % 1 === 0);(_memcpy($__p_0_i_i, 4720, $60)|0);
 var $88=(($__p_0_i_i+$60)|0);
 HEAP8[(($88)>>0)]=0;
 var $89=HEAP32[(($26)>>2)];
 var $90=HEAP32[(($27)>>2)];
 var $91=($89>>>0)<($90>>>0);
 if($91){label=15;break;}else{label=21;break;}
 case 15: 
 var $93=($89|0)==0;
 if($93){var $102=0;label=20;break;}else{label=16;break;}
 case 16: 
 var $95=$89;
 assert(12 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
 var $96=$24;
 var $storemerge_i=0;label=17;break;
 case 17: 
 var $storemerge_i;
 var $98=($storemerge_i>>>0)<3;
 if($98){label=18;break;}else{label=19;break;}
 case 18: 
 var $100=(($96+($storemerge_i<<2))|0);
 HEAP32[(($100)>>2)]=0;
 var $101=((($storemerge_i)+(1))|0);
 var $storemerge_i=$101;label=17;break;
 case 19: 
 var $_pre=HEAP32[(($26)>>2)];
 var $102=$_pre;label=20;break;
 case 20: 
 var $102;
 var $103=(($102+12)|0);
 HEAP32[(($26)>>2)]=$103;
 label=22;break;
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameF,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=72;break; }
 case 22: 
 var $105=HEAP8[(($59)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=24;break;}else{label=23;break;}
 case 23: 
 var $109=(($24+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=24;break;
 case 24: 
 var $111=$23;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $112=_strlen(4408);
 var $113=($112>>>0)>4294967279;
 if($113){label=25;break;}else{label=27;break;}
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=176;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 var $116=($112>>>0)<11;
 if($116){label=28;break;}else{label=29;break;}
 case 28: 
 var $118=$112<<1;
 var $119=(($118)&255);
 HEAP8[(($111)>>0)]=$119;
 var $120=$23;
 var $121=(($120+1)|0);
 var $__p_0_i_i_i=$121;label=36;break;
 case 29: 
 var $122=((($112)+(16))|0);
 var $123=$122&-16;
 var $124=($123|0)==0;
 var $_size_i_i_i=($124?1:$123);
 var $125=_malloc($_size_i_i_i);
 var $126=($125|0)==0;
 if($126){label=30;break;}else{var $_lcssa_i_i_i=$125;label=35;break;}
 case 30: 
 var $127=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $128=($127|0)==0;
 if($128){label=33;break;}else{label=31;break;}
 case 31: 
 var $130=$127;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=174;break; }
 case 32: 
 var $131=_malloc($_size_i_i_i);
 var $132=($131|0)==0;
 if($132){label=30;break;}else{var $_lcssa_i_i_i=$131;label=35;break;}
 case 33: 
 var $134=___cxa_allocate_exception(4);
 var $135=$134;
 HEAP32[(($135)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($134,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=176;break; }
 case 34: 
 throw "Reached an unreachable!";
 case 35: 
 var $_lcssa_i_i_i;
 var $136=(($23+8)|0);
 HEAP32[(($136)>>2)]=$_lcssa_i_i_i;
 var $137=$123|1;
 var $138=(($23)|0);
 HEAP32[(($138)>>2)]=$137;
 var $139=(($23+4)|0);
 HEAP32[(($139)>>2)]=$112;
 var $__p_0_i_i_i=$_lcssa_i_i_i;label=36;break;
 case 36: 
 var $__p_0_i_i_i;
 assert($112 % 1 === 0);(_memcpy($__p_0_i_i_i, 4408, $112)|0);
 var $140=(($__p_0_i_i_i+$112)|0);
 HEAP8[(($140)>>0)]=0;
 var $141=HEAP32[(($26)>>2)];
 var $142=HEAP32[(($27)>>2)];
 var $143=($141>>>0)<($142>>>0);
 if($143){label=37;break;}else{label=43;break;}
 case 37: 
 var $145=($141|0)==0;
 if($145){var $154=0;label=42;break;}else{label=38;break;}
 case 38: 
 var $147=$141;
 assert(12 % 1 === 0);HEAP32[(($147)>>2)]=HEAP32[(($111)>>2)];HEAP32[((($147)+(4))>>2)]=HEAP32[((($111)+(4))>>2)];HEAP32[((($147)+(8))>>2)]=HEAP32[((($111)+(8))>>2)];
 var $148=$23;
 var $storemerge_i_i=0;label=39;break;
 case 39: 
 var $storemerge_i_i;
 var $150=($storemerge_i_i>>>0)<3;
 if($150){label=40;break;}else{label=41;break;}
 case 40: 
 var $152=(($148+($storemerge_i_i<<2))|0);
 HEAP32[(($152)>>2)]=0;
 var $153=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$153;label=39;break;
 case 41: 
 var $_pre441=HEAP32[(($26)>>2)];
 var $154=$_pre441;label=42;break;
 case 42: 
 var $154;
 var $155=(($154+12)|0);
 HEAP32[(($26)>>2)]=$155;
 label=44;break;
 case 43: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameF,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=70;break; }
 case 44: 
 var $157=HEAP8[(($111)>>0)];
 var $158=$157&1;
 var $159=(($158<<24)>>24)==0;
 if($159){label=46;break;}else{label=45;break;}
 case 45: 
 var $161=(($23+8)|0);
 var $162=HEAP32[(($161)>>2)];
 _free($162);
 label=46;break;
 case 46: 
 var $163=$22;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $164=_strlen(4336);
 var $165=($164>>>0)>4294967279;
 if($165){label=47;break;}else{label=49;break;}
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=176;break; }
 case 48: 
 throw "Reached an unreachable!";
 case 49: 
 var $168=($164>>>0)<11;
 if($168){label=50;break;}else{label=51;break;}
 case 50: 
 var $170=$164<<1;
 var $171=(($170)&255);
 HEAP8[(($163)>>0)]=$171;
 var $172=$22;
 var $173=(($172+1)|0);
 var $__p_0_i_i_i_i=$173;label=58;break;
 case 51: 
 var $174=((($164)+(16))|0);
 var $175=$174&-16;
 var $176=($175|0)==0;
 var $_size_i_i_i_i=($176?1:$175);
 var $177=_malloc($_size_i_i_i_i);
 var $178=($177|0)==0;
 if($178){label=52;break;}else{var $_lcssa_i_i_i_i=$177;label=57;break;}
 case 52: 
 var $179=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $180=($179|0)==0;
 if($180){label=55;break;}else{label=53;break;}
 case 53: 
 var $182=$179;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$182]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=173;break; }
 case 54: 
 var $183=_malloc($_size_i_i_i_i);
 var $184=($183|0)==0;
 if($184){label=52;break;}else{var $_lcssa_i_i_i_i=$183;label=57;break;}
 case 55: 
 var $186=___cxa_allocate_exception(4);
 var $187=$186;
 HEAP32[(($187)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($186,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=176;break; }
 case 56: 
 throw "Reached an unreachable!";
 case 57: 
 var $_lcssa_i_i_i_i;
 var $188=(($22+8)|0);
 HEAP32[(($188)>>2)]=$_lcssa_i_i_i_i;
 var $189=$175|1;
 var $190=(($22)|0);
 HEAP32[(($190)>>2)]=$189;
 var $191=(($22+4)|0);
 HEAP32[(($191)>>2)]=$164;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=58;break;
 case 58: 
 var $__p_0_i_i_i_i;
 assert($164 % 1 === 0);(_memcpy($__p_0_i_i_i_i, 4336, $164)|0);
 var $192=(($__p_0_i_i_i_i+$164)|0);
 HEAP8[(($192)>>0)]=0;
 var $193=HEAP32[(($26)>>2)];
 var $194=HEAP32[(($27)>>2)];
 var $195=($193>>>0)<($194>>>0);
 if($195){label=59;break;}else{label=65;break;}
 case 59: 
 var $197=($193|0)==0;
 if($197){var $206=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $199=$193;
 assert(12 % 1 === 0);HEAP32[(($199)>>2)]=HEAP32[(($163)>>2)];HEAP32[((($199)+(4))>>2)]=HEAP32[((($163)+(4))>>2)];HEAP32[((($199)+(8))>>2)]=HEAP32[((($163)+(8))>>2)];
 var $200=$22;
 var $storemerge_i_i_i=0;label=61;break;
 case 61: 
 var $storemerge_i_i_i;
 var $202=($storemerge_i_i_i>>>0)<3;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=(($200+($storemerge_i_i_i<<2))|0);
 HEAP32[(($204)>>2)]=0;
 var $205=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$205;label=61;break;
 case 63: 
 var $_pre442=HEAP32[(($26)>>2)];
 var $206=$_pre442;label=64;break;
 case 64: 
 var $206;
 var $207=(($206+12)|0);
 HEAP32[(($26)>>2)]=$207;
 label=66;break;
 case 65: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameF,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=68;break; }
 case 66: 
 var $209=HEAP8[(($163)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=74;break;}else{label=67;break;}
 case 67: 
 var $213=(($22+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=74;break;
 case 68: 
 var $216$0 = ___cxa_find_matching_catch(); var $216$1 = tempRet0;
 var $217=HEAP8[(($163)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){var $eh_lpad_body$1=$216$1;var $eh_lpad_body$0=$216$0;label=177;break;}else{label=69;break;}
 case 69: 
 var $221=(($22+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 var $eh_lpad_body$1=$216$1;var $eh_lpad_body$0=$216$0;label=177;break;
 case 70: 
 var $224$0 = ___cxa_find_matching_catch(); var $224$1 = tempRet0;
 var $225=HEAP8[(($111)>>0)];
 var $226=$225&1;
 var $227=(($226<<24)>>24)==0;
 if($227){var $eh_lpad_body$1=$224$1;var $eh_lpad_body$0=$224$0;label=177;break;}else{label=71;break;}
 case 71: 
 var $229=(($23+8)|0);
 var $230=HEAP32[(($229)>>2)];
 _free($230);
 var $eh_lpad_body$1=$224$1;var $eh_lpad_body$0=$224$0;label=177;break;
 case 72: 
 var $232$0 = ___cxa_find_matching_catch(); var $232$1 = tempRet0;
 var $233=HEAP8[(($59)>>0)];
 var $234=$233&1;
 var $235=(($234<<24)>>24)==0;
 if($235){var $eh_lpad_body$1=$232$1;var $eh_lpad_body$0=$232$0;label=177;break;}else{label=73;break;}
 case 73: 
 var $237=(($24+8)|0);
 var $238=HEAP32[(($237)>>2)];
 _free($238);
 var $eh_lpad_body$1=$232$1;var $eh_lpad_body$0=$232$0;label=177;break;
 case 74: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $239=$21;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $240=_strlen(4720);
 var $241=($240>>>0)>4294967279;
 if($241){label=75;break;}else{label=77;break;}
 case 75: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=176;break; }
 case 76: 
 throw "Reached an unreachable!";
 case 77: 
 var $244=($240>>>0)<11;
 if($244){label=78;break;}else{label=79;break;}
 case 78: 
 var $246=$240<<1;
 var $247=(($246)&255);
 HEAP8[(($239)>>0)]=$247;
 var $248=$21;
 var $249=(($248+1)|0);
 var $__p_0_i_i40=$249;label=86;break;
 case 79: 
 var $250=((($240)+(16))|0);
 var $251=$250&-16;
 var $252=($251|0)==0;
 var $_size_i_i35=($252?1:$251);
 var $253=_malloc($_size_i_i35);
 var $254=($253|0)==0;
 if($254){label=80;break;}else{var $_lcssa_i_i38=$253;label=85;break;}
 case 80: 
 var $255=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $256=($255|0)==0;
 if($256){label=83;break;}else{label=81;break;}
 case 81: 
 var $258=$255;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$258]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=172;break; }
 case 82: 
 var $259=_malloc($_size_i_i35);
 var $260=($259|0)==0;
 if($260){label=80;break;}else{var $_lcssa_i_i38=$259;label=85;break;}
 case 83: 
 var $262=___cxa_allocate_exception(4);
 var $263=$262;
 HEAP32[(($263)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($262,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=176;break; }
 case 84: 
 throw "Reached an unreachable!";
 case 85: 
 var $_lcssa_i_i38;
 var $264=(($21+8)|0);
 HEAP32[(($264)>>2)]=$_lcssa_i_i38;
 var $265=$251|1;
 var $266=(($21)|0);
 HEAP32[(($266)>>2)]=$265;
 var $267=(($21+4)|0);
 HEAP32[(($267)>>2)]=$240;
 var $__p_0_i_i40=$_lcssa_i_i38;label=86;break;
 case 86: 
 var $__p_0_i_i40;
 assert($240 % 1 === 0);(_memcpy($__p_0_i_i40, 4720, $240)|0);
 var $268=(($__p_0_i_i40+$240)|0);
 HEAP8[(($268)>>0)]=0;
 var $269=HEAP32[(($29)>>2)];
 var $270=HEAP32[(($30)>>2)];
 var $271=($269>>>0)<($270>>>0);
 if($271){label=87;break;}else{label=93;break;}
 case 87: 
 var $273=($269|0)==0;
 if($273){var $282=0;label=92;break;}else{label=88;break;}
 case 88: 
 var $275=$269;
 assert(12 % 1 === 0);HEAP32[(($275)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($275)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($275)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];
 var $276=$21;
 var $storemerge_i42=0;label=89;break;
 case 89: 
 var $storemerge_i42;
 var $278=($storemerge_i42>>>0)<3;
 if($278){label=90;break;}else{label=91;break;}
 case 90: 
 var $280=(($276+($storemerge_i42<<2))|0);
 HEAP32[(($280)>>2)]=0;
 var $281=((($storemerge_i42)+(1))|0);
 var $storemerge_i42=$281;label=89;break;
 case 91: 
 var $_pre443=HEAP32[(($29)>>2)];
 var $282=$_pre443;label=92;break;
 case 92: 
 var $282;
 var $283=(($282+12)|0);
 HEAP32[(($29)>>2)]=$283;
 label=94;break;
 case 93: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameV,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=144;break; }
 case 94: 
 var $285=HEAP8[(($239)>>0)];
 var $286=$285&1;
 var $287=(($286<<24)>>24)==0;
 if($287){label=96;break;}else{label=95;break;}
 case 95: 
 var $289=(($21+8)|0);
 var $290=HEAP32[(($289)>>2)];
 _free($290);
 label=96;break;
 case 96: 
 var $291=$20;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $292=_strlen(4520);
 var $293=($292>>>0)>4294967279;
 if($293){label=97;break;}else{label=99;break;}
 case 97: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=176;break; }
 case 98: 
 throw "Reached an unreachable!";
 case 99: 
 var $296=($292>>>0)<11;
 if($296){label=100;break;}else{label=101;break;}
 case 100: 
 var $298=$292<<1;
 var $299=(($298)&255);
 HEAP8[(($291)>>0)]=$299;
 var $300=$20;
 var $301=(($300+1)|0);
 var $__p_0_i_i_i53=$301;label=108;break;
 case 101: 
 var $302=((($292)+(16))|0);
 var $303=$302&-16;
 var $304=($303|0)==0;
 var $_size_i_i_i48=($304?1:$303);
 var $305=_malloc($_size_i_i_i48);
 var $306=($305|0)==0;
 if($306){label=102;break;}else{var $_lcssa_i_i_i51=$305;label=107;break;}
 case 102: 
 var $307=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $308=($307|0)==0;
 if($308){label=105;break;}else{label=103;break;}
 case 103: 
 var $310=$307;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$310]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=171;break; }
 case 104: 
 var $311=_malloc($_size_i_i_i48);
 var $312=($311|0)==0;
 if($312){label=102;break;}else{var $_lcssa_i_i_i51=$311;label=107;break;}
 case 105: 
 var $314=___cxa_allocate_exception(4);
 var $315=$314;
 HEAP32[(($315)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($314,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=176;break; }
 case 106: 
 throw "Reached an unreachable!";
 case 107: 
 var $_lcssa_i_i_i51;
 var $316=(($20+8)|0);
 HEAP32[(($316)>>2)]=$_lcssa_i_i_i51;
 var $317=$303|1;
 var $318=(($20)|0);
 HEAP32[(($318)>>2)]=$317;
 var $319=(($20+4)|0);
 HEAP32[(($319)>>2)]=$292;
 var $__p_0_i_i_i53=$_lcssa_i_i_i51;label=108;break;
 case 108: 
 var $__p_0_i_i_i53;
 assert($292 % 1 === 0);(_memcpy($__p_0_i_i_i53, 4520, $292)|0);
 var $320=(($__p_0_i_i_i53+$292)|0);
 HEAP8[(($320)>>0)]=0;
 var $321=HEAP32[(($29)>>2)];
 var $322=HEAP32[(($30)>>2)];
 var $323=($321>>>0)<($322>>>0);
 if($323){label=109;break;}else{label=115;break;}
 case 109: 
 var $325=($321|0)==0;
 if($325){var $334=0;label=114;break;}else{label=110;break;}
 case 110: 
 var $327=$321;
 assert(12 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($291)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($291)+(4))>>2)];HEAP32[((($327)+(8))>>2)]=HEAP32[((($291)+(8))>>2)];
 var $328=$20;
 var $storemerge_i_i55=0;label=111;break;
 case 111: 
 var $storemerge_i_i55;
 var $330=($storemerge_i_i55>>>0)<3;
 if($330){label=112;break;}else{label=113;break;}
 case 112: 
 var $332=(($328+($storemerge_i_i55<<2))|0);
 HEAP32[(($332)>>2)]=0;
 var $333=((($storemerge_i_i55)+(1))|0);
 var $storemerge_i_i55=$333;label=111;break;
 case 113: 
 var $_pre444=HEAP32[(($29)>>2)];
 var $334=$_pre444;label=114;break;
 case 114: 
 var $334;
 var $335=(($334+12)|0);
 HEAP32[(($29)>>2)]=$335;
 label=116;break;
 case 115: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameV,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=142;break; }
 case 116: 
 var $337=HEAP8[(($291)>>0)];
 var $338=$337&1;
 var $339=(($338<<24)>>24)==0;
 if($339){label=118;break;}else{label=117;break;}
 case 117: 
 var $341=(($20+8)|0);
 var $342=HEAP32[(($341)>>2)];
 _free($342);
 label=118;break;
 case 118: 
 var $343=$19;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $344=_strlen(4472);
 var $345=($344>>>0)>4294967279;
 if($345){label=119;break;}else{label=121;break;}
 case 119: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { label=176;break; }
 case 120: 
 throw "Reached an unreachable!";
 case 121: 
 var $348=($344>>>0)<11;
 if($348){label=122;break;}else{label=123;break;}
 case 122: 
 var $350=$344<<1;
 var $351=(($350)&255);
 HEAP8[(($343)>>0)]=$351;
 var $352=$19;
 var $353=(($352+1)|0);
 var $__p_0_i_i_i_i66=$353;label=130;break;
 case 123: 
 var $354=((($344)+(16))|0);
 var $355=$354&-16;
 var $356=($355|0)==0;
 var $_size_i_i_i_i61=($356?1:$355);
 var $357=_malloc($_size_i_i_i_i61);
 var $358=($357|0)==0;
 if($358){label=124;break;}else{var $_lcssa_i_i_i_i64=$357;label=129;break;}
 case 124: 
 var $359=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $360=($359|0)==0;
 if($360){label=127;break;}else{label=125;break;}
 case 125: 
 var $362=$359;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$362]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=170;break; }
 case 126: 
 var $363=_malloc($_size_i_i_i_i61);
 var $364=($363|0)==0;
 if($364){label=124;break;}else{var $_lcssa_i_i_i_i64=$363;label=129;break;}
 case 127: 
 var $366=___cxa_allocate_exception(4);
 var $367=$366;
 HEAP32[(($367)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($366,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=176;break; }
 case 128: 
 throw "Reached an unreachable!";
 case 129: 
 var $_lcssa_i_i_i_i64;
 var $368=(($19+8)|0);
 HEAP32[(($368)>>2)]=$_lcssa_i_i_i_i64;
 var $369=$355|1;
 var $370=(($19)|0);
 HEAP32[(($370)>>2)]=$369;
 var $371=(($19+4)|0);
 HEAP32[(($371)>>2)]=$344;
 var $__p_0_i_i_i_i66=$_lcssa_i_i_i_i64;label=130;break;
 case 130: 
 var $__p_0_i_i_i_i66;
 assert($344 % 1 === 0);(_memcpy($__p_0_i_i_i_i66, 4472, $344)|0);
 var $372=(($__p_0_i_i_i_i66+$344)|0);
 HEAP8[(($372)>>0)]=0;
 var $373=HEAP32[(($29)>>2)];
 var $374=HEAP32[(($30)>>2)];
 var $375=($373>>>0)<($374>>>0);
 if($375){label=131;break;}else{label=137;break;}
 case 131: 
 var $377=($373|0)==0;
 if($377){var $386=0;label=136;break;}else{label=132;break;}
 case 132: 
 var $379=$373;
 assert(12 % 1 === 0);HEAP32[(($379)>>2)]=HEAP32[(($343)>>2)];HEAP32[((($379)+(4))>>2)]=HEAP32[((($343)+(4))>>2)];HEAP32[((($379)+(8))>>2)]=HEAP32[((($343)+(8))>>2)];
 var $380=$19;
 var $storemerge_i_i_i68=0;label=133;break;
 case 133: 
 var $storemerge_i_i_i68;
 var $382=($storemerge_i_i_i68>>>0)<3;
 if($382){label=134;break;}else{label=135;break;}
 case 134: 
 var $384=(($380+($storemerge_i_i_i68<<2))|0);
 HEAP32[(($384)>>2)]=0;
 var $385=((($storemerge_i_i_i68)+(1))|0);
 var $storemerge_i_i_i68=$385;label=133;break;
 case 135: 
 var $_pre445=HEAP32[(($29)>>2)];
 var $386=$_pre445;label=136;break;
 case 136: 
 var $386;
 var $387=(($386+12)|0);
 HEAP32[(($29)>>2)]=$387;
 label=138;break;
 case 137: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($nameV,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=138;break; } else { label=140;break; }
 case 138: 
 var $389=HEAP8[(($343)>>0)];
 var $390=$389&1;
 var $391=(($390<<24)>>24)==0;
 if($391){label=146;break;}else{label=139;break;}
 case 139: 
 var $393=(($19+8)|0);
 var $394=HEAP32[(($393)>>2)];
 _free($394);
 label=146;break;
 case 140: 
 var $396$0 = ___cxa_find_matching_catch(); var $396$1 = tempRet0;
 var $397=HEAP8[(($343)>>0)];
 var $398=$397&1;
 var $399=(($398<<24)>>24)==0;
 if($399){var $eh_lpad_body$1=$396$1;var $eh_lpad_body$0=$396$0;label=177;break;}else{label=141;break;}
 case 141: 
 var $401=(($19+8)|0);
 var $402=HEAP32[(($401)>>2)];
 _free($402);
 var $eh_lpad_body$1=$396$1;var $eh_lpad_body$0=$396$0;label=177;break;
 case 142: 
 var $404$0 = ___cxa_find_matching_catch(); var $404$1 = tempRet0;
 var $405=HEAP8[(($291)>>0)];
 var $406=$405&1;
 var $407=(($406<<24)>>24)==0;
 if($407){var $eh_lpad_body$1=$404$1;var $eh_lpad_body$0=$404$0;label=177;break;}else{label=143;break;}
 case 143: 
 var $409=(($20+8)|0);
 var $410=HEAP32[(($409)>>2)];
 _free($410);
 var $eh_lpad_body$1=$404$1;var $eh_lpad_body$0=$404$0;label=177;break;
 case 144: 
 var $412$0 = ___cxa_find_matching_catch(); var $412$1 = tempRet0;
 var $413=HEAP8[(($239)>>0)];
 var $414=$413&1;
 var $415=(($414<<24)>>24)==0;
 if($415){var $eh_lpad_body$1=$412$1;var $eh_lpad_body$0=$412$0;label=177;break;}else{label=145;break;}
 case 145: 
 var $417=(($21+8)|0);
 var $418=HEAP32[(($417)>>2)];
 _free($418);
 var $eh_lpad_body$1=$412$1;var $eh_lpad_body$0=$412$0;label=177;break;
 case 146: 
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $420=HEAP32[(($35)>>2)];
 var $421=HEAP32[(($34)>>2)];
 var $422=$420;
 var $423=$421;
 var $424=((($422)-($423))|0);
 var $425=HEAP32[(($29)>>2)];
 var $426=HEAP32[(($28)>>2)];
 var $427=$425;
 var $428=$426;
 var $429=((($427)-($428))|0);
 var $430=($424|0)==($429|0);
 if($430){var $_sroa_0298_0=$421;var $_sroa_0300_0=$426;label=147;break;}else{var $_0322=1;label=643;break;}
 case 147: 
 var $_sroa_0300_0;
 var $_sroa_0298_0;
 var $432=($_sroa_0298_0|0)==($420|0);
 if($432){label=178;break;}else{label=148;break;}
 case 148: 
 var $434=$_sroa_0298_0;
 var $435=HEAP8[(($434)>>0)];
 var $436=$435&1;
 var $437=(($436<<24)>>24)==0;
 if($437){label=150;break;}else{label=149;break;}
 case 149: 
 var $439=(($_sroa_0298_0+4)|0);
 var $440=HEAP32[(($439)>>2)];
 var $444=$440;label=151;break;
 case 150: 
 var $442=($435&255);
 var $443=$442>>>1;
 var $444=$443;label=151;break;
 case 151: 
 var $444;
 var $445=$_sroa_0300_0;
 var $446=HEAP8[(($445)>>0)];
 var $447=$446&1;
 var $448=(($447<<24)>>24)==0;
 if($448){label=153;break;}else{label=152;break;}
 case 152: 
 var $450=(($_sroa_0300_0+4)|0);
 var $451=HEAP32[(($450)>>2)];
 var $455=$451;label=154;break;
 case 153: 
 var $453=($446&255);
 var $454=$453>>>1;
 var $455=$454;label=154;break;
 case 154: 
 var $455;
 var $456=($444|0)==($455|0);
 if($456){label=155;break;}else{var $_0322=1;label=643;break;}
 case 155: 
 if($437){label=157;break;}else{label=156;break;}
 case 156: 
 var $459=(($_sroa_0298_0+8)|0);
 var $460=HEAP32[(($459)>>2)];
 var $464=$460;label=158;break;
 case 157: 
 var $462=$_sroa_0298_0;
 var $463=(($462+1)|0);
 var $464=$463;label=158;break;
 case 158: 
 var $464;
 if($448){label=160;break;}else{label=159;break;}
 case 159: 
 var $466=(($_sroa_0300_0+8)|0);
 var $467=HEAP32[(($466)>>2)];
 var $471=$467;label=161;break;
 case 160: 
 var $469=$_sroa_0300_0;
 var $470=(($469+1)|0);
 var $471=$470;label=161;break;
 case 161: 
 var $471;
 if($437){var $__lhs_sz_i_i_i_i_i_i_0=$444;var $__rp_i_i_i_i_i_i_0=$471;var $__lp_i_i_i_i_i_i_0=$464;label=165;break;}else{label=162;break;}
 case 162: 
 var $473=($444|0)==0;
 if($473){label=169;break;}else{var $_02_i_i=$444;var $l_03_i_i=$464;var $r_04_i_i=$471;label=163;break;}
 case 163: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $474=HEAP8[(($l_03_i_i)>>0)];
 var $475=HEAP8[(($r_04_i_i)>>0)];
 var $476=(($474<<24)>>24)==(($475<<24)>>24);
 if($476){label=164;break;}else{label=168;break;}
 case 164: 
 var $478=((($_02_i_i)-(1))|0);
 var $479=(($l_03_i_i+1)|0);
 var $480=(($r_04_i_i+1)|0);
 var $481=($478|0)==0;
 if($481){label=169;break;}else{var $_02_i_i=$478;var $l_03_i_i=$479;var $r_04_i_i=$480;label=163;break;}
 case 165: 
 var $__lp_i_i_i_i_i_i_0;
 var $__rp_i_i_i_i_i_i_0;
 var $__lhs_sz_i_i_i_i_i_i_0;
 var $482=($__lhs_sz_i_i_i_i_i_i_0|0)==0;
 if($482){label=169;break;}else{label=166;break;}
 case 166: 
 var $484=HEAP8[(($__lp_i_i_i_i_i_i_0)>>0)];
 var $485=HEAP8[(($__rp_i_i_i_i_i_i_0)>>0)];
 var $486=(($484<<24)>>24)==(($485<<24)>>24);
 if($486){label=167;break;}else{var $_0322=1;label=643;break;}
 case 167: 
 var $488=((($__lhs_sz_i_i_i_i_i_i_0)-(1))|0);
 var $489=(($__lp_i_i_i_i_i_i_0+1)|0);
 var $490=(($__rp_i_i_i_i_i_i_0+1)|0);
 var $__lhs_sz_i_i_i_i_i_i_0=$488;var $__rp_i_i_i_i_i_i_0=$490;var $__lp_i_i_i_i_i_i_0=$489;label=165;break;
 case 168: 
 var $491=(($474<<24)>>24)==(($475<<24)>>24);
 if($491){label=169;break;}else{var $_0322=1;label=643;break;}
 case 169: 
 var $492=(($_sroa_0298_0+12)|0);
 var $493=(($_sroa_0300_0+12)|0);
 var $_sroa_0298_0=$492;var $_sroa_0300_0=$493;label=147;break;
 case 170: 
 var $lpad_loopexit423$0 = ___cxa_find_matching_catch(); var $lpad_loopexit423$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit423$1;var $eh_lpad_body$0=$lpad_loopexit423$0;label=177;break;
 case 171: 
 var $lpad_loopexit426$0 = ___cxa_find_matching_catch(); var $lpad_loopexit426$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit426$1;var $eh_lpad_body$0=$lpad_loopexit426$0;label=177;break;
 case 172: 
 var $lpad_loopexit429$0 = ___cxa_find_matching_catch(); var $lpad_loopexit429$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit429$1;var $eh_lpad_body$0=$lpad_loopexit429$0;label=177;break;
 case 173: 
 var $lpad_loopexit432$0 = ___cxa_find_matching_catch(); var $lpad_loopexit432$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit432$1;var $eh_lpad_body$0=$lpad_loopexit432$0;label=177;break;
 case 174: 
 var $lpad_loopexit435$0 = ___cxa_find_matching_catch(); var $lpad_loopexit435$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit435$1;var $eh_lpad_body$0=$lpad_loopexit435$0;label=177;break;
 case 175: 
 var $lpad_loopexit438$0 = ___cxa_find_matching_catch(); var $lpad_loopexit438$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit438$1;var $eh_lpad_body$0=$lpad_loopexit438$0;label=177;break;
 case 176: 
 var $lpad_nonloopexit439$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit439$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit439$1;var $eh_lpad_body$0=$lpad_nonloopexit439$0;label=177;break;
 case 177: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $494=$eh_lpad_body$0;
 var $495=$eh_lpad_body$1;
 var $_0318=$495;var $_0319=$494;label=664;break;
 case 178: 
 var $496=HEAP32[(($32)>>2)];
 var $497=HEAP32[(($31)>>2)];
 var $498=$496;
 var $499=$497;
 var $500=((($498)-($499))|0);
 var $501=HEAP32[(($26)>>2)];
 var $502=HEAP32[(($25)>>2)];
 var $503=$501;
 var $504=$502;
 var $505=((($503)-($504))|0);
 var $506=($500|0)==($505|0);
 if($506){var $_sroa_0312_0=$502;var $_sroa_0310_0=$497;label=179;break;}else{var $_0322=2;label=643;break;}
 case 179: 
 var $_sroa_0310_0;
 var $_sroa_0312_0;
 var $508=($_sroa_0310_0|0)==($496|0);
 if($508){label=202;break;}else{label=180;break;}
 case 180: 
 var $510=$_sroa_0310_0;
 var $511=HEAP8[(($510)>>0)];
 var $512=$511&1;
 var $513=(($512<<24)>>24)==0;
 if($513){label=182;break;}else{label=181;break;}
 case 181: 
 var $515=(($_sroa_0310_0+4)|0);
 var $516=HEAP32[(($515)>>2)];
 var $520=$516;label=183;break;
 case 182: 
 var $518=($511&255);
 var $519=$518>>>1;
 var $520=$519;label=183;break;
 case 183: 
 var $520;
 var $521=$_sroa_0312_0;
 var $522=HEAP8[(($521)>>0)];
 var $523=$522&1;
 var $524=(($523<<24)>>24)==0;
 if($524){label=185;break;}else{label=184;break;}
 case 184: 
 var $526=(($_sroa_0312_0+4)|0);
 var $527=HEAP32[(($526)>>2)];
 var $531=$527;label=186;break;
 case 185: 
 var $529=($522&255);
 var $530=$529>>>1;
 var $531=$530;label=186;break;
 case 186: 
 var $531;
 var $532=($520|0)==($531|0);
 if($532){label=187;break;}else{var $_0322=2;label=643;break;}
 case 187: 
 if($513){label=189;break;}else{label=188;break;}
 case 188: 
 var $535=(($_sroa_0310_0+8)|0);
 var $536=HEAP32[(($535)>>2)];
 var $540=$536;label=190;break;
 case 189: 
 var $538=$_sroa_0310_0;
 var $539=(($538+1)|0);
 var $540=$539;label=190;break;
 case 190: 
 var $540;
 if($524){label=192;break;}else{label=191;break;}
 case 191: 
 var $542=(($_sroa_0312_0+8)|0);
 var $543=HEAP32[(($542)>>2)];
 var $547=$543;label=193;break;
 case 192: 
 var $545=$_sroa_0312_0;
 var $546=(($545+1)|0);
 var $547=$546;label=193;break;
 case 193: 
 var $547;
 if($513){var $__lhs_sz_i_i_i_i_i_i5_0=$520;var $__lp_i_i_i_i_i_i6_0=$540;var $__rp_i_i_i_i_i_i7_0=$547;label=197;break;}else{label=194;break;}
 case 194: 
 var $549=($520|0)==0;
 if($549){label=201;break;}else{var $_02_i_i93=$520;var $l_03_i_i92=$540;var $r_04_i_i91=$547;label=195;break;}
 case 195: 
 var $r_04_i_i91;
 var $l_03_i_i92;
 var $_02_i_i93;
 var $550=HEAP8[(($l_03_i_i92)>>0)];
 var $551=HEAP8[(($r_04_i_i91)>>0)];
 var $552=(($550<<24)>>24)==(($551<<24)>>24);
 if($552){label=196;break;}else{label=200;break;}
 case 196: 
 var $554=((($_02_i_i93)-(1))|0);
 var $555=(($l_03_i_i92+1)|0);
 var $556=(($r_04_i_i91+1)|0);
 var $557=($554|0)==0;
 if($557){label=201;break;}else{var $_02_i_i93=$554;var $l_03_i_i92=$555;var $r_04_i_i91=$556;label=195;break;}
 case 197: 
 var $__rp_i_i_i_i_i_i7_0;
 var $__lp_i_i_i_i_i_i6_0;
 var $__lhs_sz_i_i_i_i_i_i5_0;
 var $558=($__lhs_sz_i_i_i_i_i_i5_0|0)==0;
 if($558){label=201;break;}else{label=198;break;}
 case 198: 
 var $560=HEAP8[(($__lp_i_i_i_i_i_i6_0)>>0)];
 var $561=HEAP8[(($__rp_i_i_i_i_i_i7_0)>>0)];
 var $562=(($560<<24)>>24)==(($561<<24)>>24);
 if($562){label=199;break;}else{var $_0322=2;label=643;break;}
 case 199: 
 var $564=((($__lhs_sz_i_i_i_i_i_i5_0)-(1))|0);
 var $565=(($__lp_i_i_i_i_i_i6_0+1)|0);
 var $566=(($__rp_i_i_i_i_i_i7_0+1)|0);
 var $__lhs_sz_i_i_i_i_i_i5_0=$564;var $__lp_i_i_i_i_i_i6_0=$565;var $__rp_i_i_i_i_i_i7_0=$566;label=197;break;
 case 200: 
 var $567=(($550<<24)>>24)==(($551<<24)>>24);
 if($567){label=201;break;}else{var $_0322=2;label=643;break;}
 case 201: 
 var $568=(($_sroa_0310_0+12)|0);
 var $569=(($_sroa_0312_0+12)|0);
 var $_sroa_0312_0=$569;var $_sroa_0310_0=$568;label=179;break;
 case 202: 
 HEAP32[(($offsetV)>>2)]=0;
 HEAP32[(($offsetF)>>2)]=0;
 var $570=HEAP32[(($vertSize)>>2)];
 var $571=($570|0)==0;
 if($571){label=204;break;}else{label=203;break;}
 case 203: 
 var $573=$offsetV;
 var $574=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($573,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=204;break; } else { label=176;break; }
 case 204: 
 var $576=HEAP32[(($faceSize)>>2)];
 var $577=($576|0)==0;
 if($577){label=206;break;}else{label=205;break;}
 case 205: 
 var $579=$offsetF;
 var $580=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($579,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { label=176;break; }
 case 206: 
 var $582=(($m+164)|0);
 var $583=$582;
 var $584=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($583,132,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=207;break; } else { label=176;break; }
 case 207: 
 var $586=(($m+12)|0);
 var $587=$586;
 var $588=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($587,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=208;break; } else { label=176;break; }
 case 208: 
 var $590=(($m+44)|0);
 var $591=$590;
 var $592=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($591,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=209;break; } else { label=176;break; }
 case 209: 
 var $594=(($m+300)|0);
 var $595=$594;
 var $596=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($595,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { label=176;break; }
 case 210: 
 var $598=(($m+64)|0);
 var $599=$598;
 var $600=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($599,24,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { label=176;break; }
 case 211: 
 var $602=(($m+296)|0);
 var $603=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($602,4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=212;break; } else { label=176;break; }
 case 212: 
 var $605=(($m)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($605,$570) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { label=176;break; }
 case 213: 
 if($571){label=215;break;}else{label=214;break;}
 case 214: 
 var $608=(($m)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=$609;
 var $611=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($610,28,$570) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=215;break; } else { label=176;break; }
 case 215: 
 var $613=(($m+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($613,$576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { label=176;break; }
 case 216: 
 if($577){label=218;break;}else{label=217;break;}
 case 217: 
 var $616=(($m+32)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=$617;
 var $619=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($618,32,$576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { label=176;break; }
 case 218: 
 var $621=$_string;
 var $storemerge=0;label=219;break;
 case 219: 
 var $storemerge;
 var $623=($storemerge>>>0)<3;
 if($623){label=220;break;}else{label=221;break;}
 case 220: 
 var $625=(($621+($storemerge<<2))|0);
 HEAP32[(($625)>>2)]=0;
 var $626=((($storemerge)+(1))|0);
 var $storemerge=$626;label=219;break;
 case 221: 
 var $627=$_trash;
 var $storemerge2=0;label=222;break;
 case 222: 
 var $storemerge2;
 var $629=($storemerge2>>>0)<3;
 if($629){label=223;break;}else{label=224;break;}
 case 223: 
 var $631=(($627+($storemerge2<<2))|0);
 HEAP32[(($631)>>2)]=0;
 var $632=((($storemerge2)+(1))|0);
 var $storemerge2=$632;label=222;break;
 case 224: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=225;break; } else { label=307;break; }
 case 225: 
 var $634=$n;
 var $635=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($634,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=226;break; } else { label=307;break; }
 case 226: 
 var $636=$sz;
 var $637=(($m+4)|0);
 var $638=(($m)|0);
 var $639=$_string;
 var $640=$_string;
 var $641=(($640+1)|0);
 var $642=$18;
 var $643=$18;
 var $644=(($643+1)|0);
 var $645=$16;
 var $646=$17;
 var $647=$h_i_i;
 var $648=(($h_i_i+4)|0);
 var $649=$648;
 var $650=(($h_i_i+4)|0);
 var $651=(($h_i_i+16)|0);
 var $652=(($h_i_i+20)|0);
 var $653=(($h_i_i)|0);
 var $654=(($m+112)|0);
 var $655=(($h_i_i+24)|0);
 var $656=(($m+116)|0);
 var $657=(($16)|0);
 var $658=$650;
 var $659=(($18+8)|0);
 var $660=(($h_i_i+12)|0);
 var $661=(($17)|0);
 var $662=(($m+120)|0);
 var $663=$662;
 var $664=(($18+4)|0);
 var $665=(($18)|0);
 var $666=(($_string+8)|0);
 var $storemerge3=0;label=227;break;
 case 227: 
 var $storemerge3;
 var $667=HEAP32[(($n)>>2)];
 var $668=($storemerge3>>>0)<($667>>>0);
 if($668){label=228;break;}else{label=312;break;}
 case 228: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=229;break; } else { label=306;break; }
 case 229: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_string) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=230;break; } else { label=306;break; }
 case 230: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=231;break; } else { label=306;break; }
 case 231: 
 var $673=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($636,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=232;break; } else { label=306;break; }
 case 232: 
 var $674=HEAP32[(($sz)>>2)];
 var $675=HEAP32[(($637)>>2)];
 var $676=HEAP32[(($638)>>2)];
 var $677=$675;
 var $678=$676;
 var $679=((($677)-($678))|0);
 var $680=(((($679|0))/(28))&-1);
 var $681=(Math_imul($674,$680)|0);
 var $682=($681|0)==0;
 if($682){var $688=0;var $687=$675;var $686=$676;label=234;break;}else{label=233;break;}
 case 233: 
 var $684=_malloc($681);
 var $_pre446=HEAP32[(($637)>>2)];
 var $_pre447=HEAP32[(($638)>>2)];
 var $688=$684;var $687=$_pre446;var $686=$_pre447;label=234;break;
 case 234: 
 var $686;
 var $687;
 var $688;
 var $689=$687;
 var $690=$686;
 var $691=((($689)-($690))|0);
 var $692=(((($691|0))/(28))&-1);
 var $693=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($688,$674,$692) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=235;break; } else { label=306;break; }
 case 235: 
 var $694=HEAP8[(($639)>>0)];
 var $695=$694&1;
 var $696=(($695<<24)>>24)==0;
 var $697=HEAP32[(($666)>>2)];
 var $_=($696?$641:$697);
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $698=($674|0)==1;
 if($698){label=236;break;}else{label=294;break;}
 case 236: 
 var $699=_strlen($_);
 var $700=($699>>>0)>4294967279;
 if($700){label=237;break;}else{label=239;break;}
 case 237: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=238;break; } else { label=307;break; }
 case 238: 
 throw "Reached an unreachable!";
 case 239: 
 var $703=($699>>>0)<11;
 if($703){label=240;break;}else{label=241;break;}
 case 240: 
 var $705=$699<<1;
 var $706=(($705)&255);
 HEAP8[(($642)>>0)]=$706;
 var $__p_0_i_i104=$644;label=248;break;
 case 241: 
 var $707=((($699)+(16))|0);
 var $708=$707&-16;
 var $709=($708|0)==0;
 var $_size_i_i99=($709?1:$708);
 var $710=_malloc($_size_i_i99);
 var $711=($710|0)==0;
 if($711){label=242;break;}else{var $_lcssa_i_i102=$710;label=247;break;}
 case 242: 
 var $712=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $713=($712|0)==0;
 if($713){label=245;break;}else{label=243;break;}
 case 243: 
 var $715=$712;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$715]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=305;break; }
 case 244: 
 var $716=_malloc($_size_i_i99);
 var $717=($716|0)==0;
 if($717){label=242;break;}else{var $_lcssa_i_i102=$716;label=247;break;}
 case 245: 
 var $719=___cxa_allocate_exception(4);
 var $720=$719;
 HEAP32[(($720)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($719,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=307;break; }
 case 246: 
 throw "Reached an unreachable!";
 case 247: 
 var $_lcssa_i_i102;
 HEAP32[(($659)>>2)]=$_lcssa_i_i102;
 var $721=$708|1;
 HEAP32[(($665)>>2)]=$721;
 HEAP32[(($664)>>2)]=$699;
 var $__p_0_i_i104=$_lcssa_i_i102;label=248;break;
 case 248: 
 var $__p_0_i_i104;
 assert($699 % 1 === 0);(_memcpy($__p_0_i_i104, $_, $699)|0);
 var $722=(($__p_0_i_i104+$699)|0);
 HEAP8[(($722)>>0)]=0;
 var $$etemp$13$0=8;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=28;
 var $$etemp$15$1=0;

 var $storemerge_i_i_i106=0;label=249;break;
 case 249: 
 var $storemerge_i_i_i106;
 var $724=($storemerge_i_i_i106>>>0)<3;
 if($724){label=250;break;}else{label=251;break;}
 case 250: 
 var $726=(($649+($storemerge_i_i_i106<<2))|0);
 HEAP32[(($726)>>2)]=0;
 var $727=((($storemerge_i_i_i106)+(1))|0);
 var $storemerge_i_i_i106=$727;label=249;break;
 case 251: 
 var $728=HEAP8[(($642)>>0)];
 var $729=$728&1;
 var $730=(($729<<24)>>24)==0;
 if($730){label=253;break;}else{label=252;break;}
 case 252: 
 var $732=HEAP32[(($659)>>2)];
 var $733=HEAP32[(($664)>>2)];
 var $738=$733;var $737=$732;label=254;break;
 case 253: 
 var $735=($728&255);
 var $736=$735>>>1;
 var $738=$736;var $737=$644;label=254;break;
 case 254: 
 var $737;
 var $738;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($650,$737,$738) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=255;break; } else { label=264;break; }
 case 255: 
 if($730){label=257;break;}else{label=256;break;}
 case 256: 
 var $740=HEAP32[(($664)>>2)];
 var $744=$740;label=258;break;
 case 257: 
 var $742=($728&255);
 var $743=$742>>>1;
 var $744=$743;label=258;break;
 case 258: 
 var $744;
 var $745=($744|0)==0;
 if($745){label=267;break;}else{label=259;break;}
 case 259: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($17,$656,$h_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=264;break; }
 case 260: 
 var $747=HEAP32[(($661)>>2)];
 var $748=($747|0)==($663|0);
 if($748){label=267;break;}else{label=261;break;}
 case 261: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=262;break; } else { label=265;break; }
 case 262: 
 throw "Reached an unreachable!";
 case 263: 
 var $lpad_loopexit410$0 = ___cxa_find_matching_catch(); var $lpad_loopexit410$1 = tempRet0;
 var $lpad_phi412$1=$lpad_loopexit410$1;var $lpad_phi412$0=$lpad_loopexit410$0;label=266;break;
 case 264: 
 var $lpad_loopexit417$0 = ___cxa_find_matching_catch(); var $lpad_loopexit417$1 = tempRet0;
 var $lpad_phi412$1=$lpad_loopexit417$1;var $lpad_phi412$0=$lpad_loopexit417$0;label=266;break;
 case 265: 
 var $lpad_nonloopexit418$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit418$1 = tempRet0;
 var $lpad_phi412$1=$lpad_nonloopexit418$1;var $lpad_phi412$0=$lpad_nonloopexit418$0;label=266;break;
 case 266: 
 var $lpad_phi412$0;
 var $lpad_phi412$1;
 var $751=$lpad_phi412$0;
 var $752=$lpad_phi412$1;
 var $_0325=$751;var $_0326=$752;label=284;break;
 case 267: 
 HEAP32[(($651)>>2)]=1;
 HEAP32[(($652)>>2)]=0;
 var $754=_malloc(24);
 var $755=($754|0)==0;
 if($755){label=268;break;}else{var $_lcssa_i_i_i109=$754;label=273;break;}
 case 268: 
 var $756=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $757=($756|0)==0;
 if($757){label=271;break;}else{label=269;break;}
 case 269: 
 var $759=$756;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$759]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=263;break; }
 case 270: 
 var $760=_malloc(24);
 var $761=($760|0)==0;
 if($761){label=268;break;}else{var $_lcssa_i_i_i109=$760;label=273;break;}
 case 271: 
 var $763=___cxa_allocate_exception(4);
 var $764=$763;
 HEAP32[(($764)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($763,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=265;break; }
 case 272: 
 throw "Reached an unreachable!";
 case 273: 
 var $_lcssa_i_i_i109;
 var $765=$_lcssa_i_i_i109;
 HEAP32[(($765)>>2)]=18920;
 var $766=(($_lcssa_i_i_i109+4)|0);
 var $767=$766;
 HEAP32[(($767)>>2)]=$605;
 var $768=(($_lcssa_i_i_i109+8)|0);
 var $769=$768;
 var $770=(($_lcssa_i_i_i109+12)|0);
 var $771=$770;
 var $772=$768;
 var $773=(($m+8)|0);
 HEAP32[(($768)>>2)]=0; HEAP32[((($768)+(4))>>2)]=0; HEAP32[((($768)+(8))>>2)]=0; HEAP32[((($768)+(12))>>2)]=0;
 var $774=HEAP32[(($773)>>2)];
 var $775=(($m)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=$774;
 var $778=$776;
 var $779=((($777)-($778))|0);
 var $780=(((($779|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE7reserveEj($772,$780) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=274;break; } else { label=275;break; }
 case 274: 
 var $782=HEAP32[(($767)>>2)];
 var $783=(($782+4)|0);
 var $784=HEAP32[(($783)>>2)];
 var $785=(($782)|0);
 var $786=HEAP32[(($785)>>2)];
 var $787=$784;
 var $788=$786;
 var $789=((($787)-($788))|0);
 var $790=(((($789|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($772,$790) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=281;break; } else { label=275;break; }
 case 275: 
 var $792$0 = ___cxa_find_matching_catch(); var $792$1 = tempRet0;
 var $793=$792$0;
 var $794=$792$1;
 var $795=HEAP32[(($769)>>2)];
 var $796=($795|0)==0;
 if($796){label=280;break;}else{label=276;break;}
 case 276: 
 var $_pre448=HEAP32[(($771)>>2)];
 var $799=$_pre448;label=277;break;
 case 277: 
 var $799;
 var $800=($795|0)==($799|0);
 if($800){label=279;break;}else{label=278;break;}
 case 278: 
 var $802=((($799)-(1))|0);
 HEAP32[(($771)>>2)]=$802;
 var $799=$802;label=277;break;
 case 279: 
 _free($795);
 label=280;break;
 case 280: 
 _free($_lcssa_i_i_i109);
 var $_0325=$793;var $_0326=$794;label=284;break;
 case 281: 
 var $803=$_lcssa_i_i_i109;
 HEAP32[(($653)>>2)]=$803;
 var $804=HEAP32[(($654)>>2)];
 var $805=((($804)+(1))|0);
 HEAP32[(($654)>>2)]=$805;
 HEAP32[(($655)>>2)]=$805;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($16,$656,$h_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=282;break; } else { label=264;break; }
 case 282: 
 var $806=HEAP32[(($657)>>2)];
 var $807=(($806+16)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=HEAP8[(($658)>>0)];
 var $810=$809&1;
 var $811=(($810<<24)>>24)==0;
 if($811){label=287;break;}else{label=283;break;}
 case 283: 
 var $813=HEAP32[(($660)>>2)];
 _free($813);
 label=287;break;
 case 284: 
 var $_0326;
 var $_0325;
 var $815=HEAP8[(($658)>>0)];
 var $816=$815&1;
 var $817=(($816<<24)>>24)==0;
 if($817){label=286;break;}else{label=285;break;}
 case 285: 
 var $819=HEAP32[(($660)>>2)];
 _free($819);
 label=286;break;
 case 286: 
 var $820=HEAP8[(($642)>>0)];
 var $821=$820&1;
 var $822=(($821<<24)>>24)==0;
 if($822){label=293;break;}else{label=292;break;}
 case 287: 
 var $$etemp$16$0=8;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=28;
 var $$etemp$18$1=0;

 var $823=HEAP8[(($642)>>0)];
 var $824=$823&1;
 var $825=(($824<<24)>>24)==0;
 if($825){label=289;break;}else{label=288;break;}
 case 288: 
 var $827=HEAP32[(($659)>>2)];
 _free($827);
 label=289;break;
 case 289: 
 var $828=(($808+8)|0);
 var $829=$828;
 var $storemerge_i112=0;label=290;break;
 case 290: 
 var $storemerge_i112;
 var $830=HEAP32[(($637)>>2)];
 var $831=HEAP32[(($638)>>2)];
 var $832=$830;
 var $833=$831;
 var $834=((($832)-($833))|0);
 var $835=(((($834|0))/(28))&-1);
 var $836=($storemerge_i112>>>0)<($835>>>0);
 if($836){label=291;break;}else{label=295;break;}
 case 291: 
 var $838=HEAP32[(($829)>>2)];
 var $839=(($838+$storemerge_i112)|0);
 var $840=(($688+$storemerge_i112)|0);
 var $841=HEAP8[(($840)>>0)];
 HEAP8[(($839)>>0)]=$841;
 var $842=((($storemerge_i112)+(1))|0);
 var $storemerge_i112=$842;label=290;break;
 case 292: 
 var $844=HEAP32[(($659)>>2)];
 _free($844);
 label=293;break;
 case 293: 
 var $845$0=$_0325;
 var $845$1=0;
 var $846$0=$845$0;
 var $846$1=$_0326;
 var $eh_lpad_body119$1=$846$1;var $eh_lpad_body119$0=$846$0;label=308;break;
 case 294: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io3DerI6MyMeshsNS1_2C2IS3_ldiEEE9AddAttribILi0EEEvRS3_PKcjPv($m,$_,$674,$688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=306;break; }
 case 295: 
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $848=($688|0)==0;
 if($848){label=297;break;}else{label=296;break;}
 case 296: 
 _free($688);
 label=297;break;
 case 297: 
 var $851=((($storemerge3)+(1))|0);
 var $storemerge3=$851;label=227;break;
 case 298: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit$1;var $eh_lpad_body119$0=$lpad_loopexit$0;label=308;break;
 case 299: 
 var $lpad_loopexit338$0 = ___cxa_find_matching_catch(); var $lpad_loopexit338$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit338$1;var $eh_lpad_body119$0=$lpad_loopexit338$0;label=308;break;
 case 300: 
 var $lpad_loopexit350$0 = ___cxa_find_matching_catch(); var $lpad_loopexit350$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit350$1;var $eh_lpad_body119$0=$lpad_loopexit350$0;label=308;break;
 case 301: 
 var $lpad_loopexit363$0 = ___cxa_find_matching_catch(); var $lpad_loopexit363$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit363$1;var $eh_lpad_body119$0=$lpad_loopexit363$0;label=308;break;
 case 302: 
 var $lpad_loopexit376$0 = ___cxa_find_matching_catch(); var $lpad_loopexit376$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit376$1;var $eh_lpad_body119$0=$lpad_loopexit376$0;label=308;break;
 case 303: 
 var $lpad_loopexit390$0 = ___cxa_find_matching_catch(); var $lpad_loopexit390$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit390$1;var $eh_lpad_body119$0=$lpad_loopexit390$0;label=308;break;
 case 304: 
 var $lpad_loopexit399$0 = ___cxa_find_matching_catch(); var $lpad_loopexit399$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit399$1;var $eh_lpad_body119$0=$lpad_loopexit399$0;label=308;break;
 case 305: 
 var $lpad_loopexit405$0 = ___cxa_find_matching_catch(); var $lpad_loopexit405$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit405$1;var $eh_lpad_body119$0=$lpad_loopexit405$0;label=308;break;
 case 306: 
 var $lpad_loopexit414$0 = ___cxa_find_matching_catch(); var $lpad_loopexit414$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_loopexit414$1;var $eh_lpad_body119$0=$lpad_loopexit414$0;label=308;break;
 case 307: 
 var $lpad_nonloopexit415$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit415$1 = tempRet0;
 var $eh_lpad_body119$1=$lpad_nonloopexit415$1;var $eh_lpad_body119$0=$lpad_nonloopexit415$0;label=308;break;
 case 308: 
 var $eh_lpad_body119$0;
 var $eh_lpad_body119$1;
 var $852=$eh_lpad_body119$0;
 var $853=$eh_lpad_body119$1;
 var $854=$_trash;
 var $855=HEAP8[(($854)>>0)];
 var $856=$855&1;
 var $857=(($856<<24)>>24)==0;
 if($857){label=310;break;}else{label=309;break;}
 case 309: 
 var $859=(($_trash+8)|0);
 var $860=HEAP32[(($859)>>2)];
 _free($860);
 label=310;break;
 case 310: 
 var $861=$_string;
 var $862=HEAP8[(($861)>>0)];
 var $863=$862&1;
 var $864=(($863<<24)>>24)==0;
 if($864){var $_0318=$853;var $_0319=$852;label=664;break;}else{label=311;break;}
 case 311: 
 var $866=(($_string+8)|0);
 var $867=HEAP32[(($866)>>2)];
 _free($867);
 var $_0318=$853;var $_0319=$852;label=664;break;
 case 312: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=313;break; } else { label=307;break; }
 case 313: 
 var $870=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($634,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=314;break; } else { label=307;break; }
 case 314: 
 var $871=(($m+36)|0);
 var $872=(($m+32)|0);
 var $873=$15;
 var $874=$15;
 var $875=(($874+1)|0);
 var $876=$13;
 var $877=$14;
 var $878=$h_i_i130;
 var $879=(($h_i_i130+4)|0);
 var $880=$879;
 var $881=(($h_i_i130+4)|0);
 var $882=(($h_i_i130+16)|0);
 var $883=(($h_i_i130+20)|0);
 var $884=(($h_i_i130)|0);
 var $885=(($h_i_i130+24)|0);
 var $886=(($m+140)|0);
 var $887=(($13)|0);
 var $888=$881;
 var $889=(($15+8)|0);
 var $890=(($h_i_i130+12)|0);
 var $891=(($14)|0);
 var $892=(($m+144)|0);
 var $893=$892;
 var $894=(($15+4)|0);
 var $895=(($15)|0);
 var $storemerge4=0;label=315;break;
 case 315: 
 var $storemerge4;
 var $896=HEAP32[(($n)>>2)];
 var $897=($storemerge4>>>0)<($896>>>0);
 if($897){label=316;break;}else{label=386;break;}
 case 316: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=317;break; } else { label=304;break; }
 case 317: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_string) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=304;break; }
 case 318: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=304;break; }
 case 319: 
 var $902=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($636,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=320;break; } else { label=304;break; }
 case 320: 
 var $903=HEAP32[(($sz)>>2)];
 var $904=HEAP32[(($871)>>2)];
 var $905=HEAP32[(($872)>>2)];
 var $906=$904;
 var $907=$905;
 var $908=((($906)-($907))|0);
 var $909=$908>>5;
 var $910=(Math_imul($903,$909)|0);
 var $911=($910|0)==0;
 if($911){var $917=0;var $916=$904;var $915=$905;label=322;break;}else{label=321;break;}
 case 321: 
 var $913=_malloc($910);
 var $_pre449=HEAP32[(($871)>>2)];
 var $_pre450=HEAP32[(($872)>>2)];
 var $917=$913;var $916=$_pre449;var $915=$_pre450;label=322;break;
 case 322: 
 var $915;
 var $916;
 var $917;
 var $918=$916;
 var $919=$915;
 var $920=((($918)-($919))|0);
 var $921=$920>>5;
 var $922=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($917,$903,$921) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=323;break; } else { label=304;break; }
 case 323: 
 var $923=HEAP8[(($639)>>0)];
 var $924=$923&1;
 var $925=(($924<<24)>>24)==0;
 var $926=HEAP32[(($666)>>2)];
 var $_454=($925?$641:$926);
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $927=($903|0)==1;
 if($927){label=324;break;}else{label=382;break;}
 case 324: 
 var $928=_strlen($_454);
 var $929=($928>>>0)>4294967279;
 if($929){label=325;break;}else{label=327;break;}
 case 325: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=326;break; } else { label=307;break; }
 case 326: 
 throw "Reached an unreachable!";
 case 327: 
 var $932=($928>>>0)<11;
 if($932){label=328;break;}else{label=329;break;}
 case 328: 
 var $934=$928<<1;
 var $935=(($934)&255);
 HEAP8[(($873)>>0)]=$935;
 var $__p_0_i_i139=$875;label=336;break;
 case 329: 
 var $936=((($928)+(16))|0);
 var $937=$936&-16;
 var $938=($937|0)==0;
 var $_size_i_i134=($938?1:$937);
 var $939=_malloc($_size_i_i134);
 var $940=($939|0)==0;
 if($940){label=330;break;}else{var $_lcssa_i_i137=$939;label=335;break;}
 case 330: 
 var $941=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $942=($941|0)==0;
 if($942){label=333;break;}else{label=331;break;}
 case 331: 
 var $944=$941;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$944]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=332;break; } else { label=303;break; }
 case 332: 
 var $945=_malloc($_size_i_i134);
 var $946=($945|0)==0;
 if($946){label=330;break;}else{var $_lcssa_i_i137=$945;label=335;break;}
 case 333: 
 var $948=___cxa_allocate_exception(4);
 var $949=$948;
 HEAP32[(($949)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($948,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=307;break; }
 case 334: 
 throw "Reached an unreachable!";
 case 335: 
 var $_lcssa_i_i137;
 HEAP32[(($889)>>2)]=$_lcssa_i_i137;
 var $950=$937|1;
 HEAP32[(($895)>>2)]=$950;
 HEAP32[(($894)>>2)]=$928;
 var $__p_0_i_i139=$_lcssa_i_i137;label=336;break;
 case 336: 
 var $__p_0_i_i139;
 assert($928 % 1 === 0);(_memcpy($__p_0_i_i139, $_454, $928)|0);
 var $951=(($__p_0_i_i139+$928)|0);
 HEAP8[(($951)>>0)]=0;
 var $$etemp$21$0=8;
 var $$etemp$21$1=0;

 var $$etemp$22$0=4;
 var $$etemp$22$1=0;

 var $$etemp$23$0=28;
 var $$etemp$23$1=0;

 var $storemerge_i_i_i141=0;label=337;break;
 case 337: 
 var $storemerge_i_i_i141;
 var $953=($storemerge_i_i_i141>>>0)<3;
 if($953){label=338;break;}else{label=339;break;}
 case 338: 
 var $955=(($880+($storemerge_i_i_i141<<2))|0);
 HEAP32[(($955)>>2)]=0;
 var $956=((($storemerge_i_i_i141)+(1))|0);
 var $storemerge_i_i_i141=$956;label=337;break;
 case 339: 
 var $957=HEAP8[(($873)>>0)];
 var $958=$957&1;
 var $959=(($958<<24)>>24)==0;
 if($959){label=341;break;}else{label=340;break;}
 case 340: 
 var $961=HEAP32[(($889)>>2)];
 var $962=HEAP32[(($894)>>2)];
 var $967=$962;var $966=$961;label=342;break;
 case 341: 
 var $964=($957&255);
 var $965=$964>>>1;
 var $967=$965;var $966=$875;label=342;break;
 case 342: 
 var $966;
 var $967;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($881,$966,$967) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=352;break; }
 case 343: 
 if($959){label=345;break;}else{label=344;break;}
 case 344: 
 var $969=HEAP32[(($894)>>2)];
 var $973=$969;label=346;break;
 case 345: 
 var $971=($957&255);
 var $972=$971>>>1;
 var $973=$972;label=346;break;
 case 346: 
 var $973;
 var $974=($973|0)==0;
 if($974){label=355;break;}else{label=347;break;}
 case 347: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($14,$886,$h_i_i130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=348;break; } else { label=352;break; }
 case 348: 
 var $976=HEAP32[(($891)>>2)];
 var $977=($976|0)==($893|0);
 if($977){label=355;break;}else{label=349;break;}
 case 349: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4784,3376,1308,10400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=353;break; }
 case 350: 
 throw "Reached an unreachable!";
 case 351: 
 var $lpad_loopexit395$0 = ___cxa_find_matching_catch(); var $lpad_loopexit395$1 = tempRet0;
 var $lpad_phi397$1=$lpad_loopexit395$1;var $lpad_phi397$0=$lpad_loopexit395$0;label=354;break;
 case 352: 
 var $lpad_loopexit402$0 = ___cxa_find_matching_catch(); var $lpad_loopexit402$1 = tempRet0;
 var $lpad_phi397$1=$lpad_loopexit402$1;var $lpad_phi397$0=$lpad_loopexit402$0;label=354;break;
 case 353: 
 var $lpad_nonloopexit403$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit403$1 = tempRet0;
 var $lpad_phi397$1=$lpad_nonloopexit403$1;var $lpad_phi397$0=$lpad_nonloopexit403$0;label=354;break;
 case 354: 
 var $lpad_phi397$0;
 var $lpad_phi397$1;
 var $980=$lpad_phi397$0;
 var $981=$lpad_phi397$1;
 var $_0323=$980;var $_0324=$981;label=372;break;
 case 355: 
 HEAP32[(($882)>>2)]=1;
 HEAP32[(($883)>>2)]=0;
 var $983=_malloc(24);
 var $984=($983|0)==0;
 if($984){label=356;break;}else{var $_lcssa_i_i_i150=$983;label=361;break;}
 case 356: 
 var $985=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $986=($985|0)==0;
 if($986){label=359;break;}else{label=357;break;}
 case 357: 
 var $988=$985;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$988]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=358;break; } else { label=351;break; }
 case 358: 
 var $989=_malloc(24);
 var $990=($989|0)==0;
 if($990){label=356;break;}else{var $_lcssa_i_i_i150=$989;label=361;break;}
 case 359: 
 var $992=___cxa_allocate_exception(4);
 var $993=$992;
 HEAP32[(($993)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($992,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=360;break; } else { label=353;break; }
 case 360: 
 throw "Reached an unreachable!";
 case 361: 
 var $_lcssa_i_i_i150;
 var $994=$_lcssa_i_i_i150;
 HEAP32[(($994)>>2)]=19496;
 var $995=(($_lcssa_i_i_i150+4)|0);
 var $996=$995;
 HEAP32[(($996)>>2)]=$613;
 var $997=(($_lcssa_i_i_i150+8)|0);
 var $998=$997;
 var $999=(($_lcssa_i_i_i150+12)|0);
 var $1000=$999;
 var $1001=$997;
 var $1002=(($m+40)|0);
 HEAP32[(($997)>>2)]=0; HEAP32[((($997)+(4))>>2)]=0; HEAP32[((($997)+(8))>>2)]=0; HEAP32[((($997)+(12))>>2)]=0;
 var $1003=HEAP32[(($1002)>>2)];
 var $1004=(($613)|0);
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=$1003;
 var $1007=$1005;
 var $1008=((($1006)-($1007))|0);
 var $1009=$1008>>5;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE7reserveEj($1001,$1009) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=362;break; } else { label=363;break; }
 case 362: 
 var $1011=HEAP32[(($996)>>2)];
 var $1012=(($1011+4)|0);
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=(($1011)|0);
 var $1015=HEAP32[(($1014)>>2)];
 var $1016=$1013;
 var $1017=$1015;
 var $1018=((($1016)-($1017))|0);
 var $1019=$1018>>5;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($1001,$1019) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=369;break; } else { label=363;break; }
 case 363: 
 var $1021$0 = ___cxa_find_matching_catch(); var $1021$1 = tempRet0;
 var $1022=$1021$0;
 var $1023=$1021$1;
 var $1024=HEAP32[(($998)>>2)];
 var $1025=($1024|0)==0;
 if($1025){label=368;break;}else{label=364;break;}
 case 364: 
 var $_pre451=HEAP32[(($1000)>>2)];
 var $1028=$_pre451;label=365;break;
 case 365: 
 var $1028;
 var $1029=($1024|0)==($1028|0);
 if($1029){label=367;break;}else{label=366;break;}
 case 366: 
 var $1031=((($1028)-(1))|0);
 HEAP32[(($1000)>>2)]=$1031;
 var $1028=$1031;label=365;break;
 case 367: 
 _free($1024);
 label=368;break;
 case 368: 
 _free($_lcssa_i_i_i150);
 var $_0323=$1022;var $_0324=$1023;label=372;break;
 case 369: 
 var $1032=$_lcssa_i_i_i150;
 HEAP32[(($884)>>2)]=$1032;
 var $1033=HEAP32[(($654)>>2)];
 var $1034=((($1033)+(1))|0);
 HEAP32[(($654)>>2)]=$1034;
 HEAP32[(($885)>>2)]=$1034;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$886,$h_i_i130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=370;break; } else { label=352;break; }
 case 370: 
 var $1035=HEAP32[(($887)>>2)];
 var $1036=(($1035+16)|0);
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=HEAP8[(($888)>>0)];
 var $1039=$1038&1;
 var $1040=(($1039<<24)>>24)==0;
 if($1040){label=375;break;}else{label=371;break;}
 case 371: 
 var $1042=HEAP32[(($890)>>2)];
 _free($1042);
 label=375;break;
 case 372: 
 var $_0324;
 var $_0323;
 var $1044=HEAP8[(($888)>>0)];
 var $1045=$1044&1;
 var $1046=(($1045<<24)>>24)==0;
 if($1046){label=374;break;}else{label=373;break;}
 case 373: 
 var $1048=HEAP32[(($890)>>2)];
 _free($1048);
 label=374;break;
 case 374: 
 var $1049=HEAP8[(($873)>>0)];
 var $1050=$1049&1;
 var $1051=(($1050<<24)>>24)==0;
 if($1051){label=381;break;}else{label=380;break;}
 case 375: 
 var $$etemp$24$0=8;
 var $$etemp$24$1=0;

 var $$etemp$25$0=4;
 var $$etemp$25$1=0;

 var $$etemp$26$0=28;
 var $$etemp$26$1=0;

 var $1052=HEAP8[(($873)>>0)];
 var $1053=$1052&1;
 var $1054=(($1053<<24)>>24)==0;
 if($1054){label=377;break;}else{label=376;break;}
 case 376: 
 var $1056=HEAP32[(($889)>>2)];
 _free($1056);
 label=377;break;
 case 377: 
 var $1057=(($1037+8)|0);
 var $1058=$1057;
 var $storemerge_i157=0;label=378;break;
 case 378: 
 var $storemerge_i157;
 var $1059=HEAP32[(($871)>>2)];
 var $1060=HEAP32[(($872)>>2)];
 var $1061=$1059;
 var $1062=$1060;
 var $1063=((($1061)-($1062))|0);
 var $1064=$1063>>5;
 var $1065=($storemerge_i157>>>0)<($1064>>>0);
 if($1065){label=379;break;}else{label=383;break;}
 case 379: 
 var $1067=HEAP32[(($1058)>>2)];
 var $1068=(($1067+$storemerge_i157)|0);
 var $1069=(($917+$storemerge_i157)|0);
 var $1070=HEAP8[(($1069)>>0)];
 HEAP8[(($1068)>>0)]=$1070;
 var $1071=((($storemerge_i157)+(1))|0);
 var $storemerge_i157=$1071;label=378;break;
 case 380: 
 var $1073=HEAP32[(($889)>>2)];
 _free($1073);
 label=381;break;
 case 381: 
 var $1074$0=$_0323;
 var $1074$1=0;
 var $1075$0=$1074$0;
 var $1075$1=$_0324;
 var $eh_lpad_body119$1=$1075$1;var $eh_lpad_body119$0=$1075$0;label=308;break;
 case 382: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io3DerI6MyMeshsNS1_2C2IS3_ldiEEE9AddAttribILi0EEEvRS3_PKcjPv($m,$_454,$903,$917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=383;break; } else { label=304;break; }
 case 383: 
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $1077=($917|0)==0;
 if($1077){label=385;break;}else{label=384;break;}
 case 384: 
 _free($917);
 label=385;break;
 case 385: 
 var $1080=((($storemerge4)+(1))|0);
 var $storemerge4=$1080;label=315;break;
 case 386: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=387;break; } else { label=307;break; }
 case 387: 
 var $1083=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($634,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=388;break; } else { label=307;break; }
 case 388: 
 var $1084=$12;
 var $1085=$12;
 var $1086=(($1085+1)|0);
 var $1087=$10;
 var $1088=$11;
 var $1089=$h_i_i179;
 var $1090=(($h_i_i179+4)|0);
 var $1091=$1090;
 var $1092=(($h_i_i179+4)|0);
 var $1093=(($h_i_i179+16)|0);
 var $1094=(($h_i_i179+20)|0);
 var $1095=(($h_i_i179)|0);
 var $1096=(($h_i_i179+24)|0);
 var $1097=(($m+152)|0);
 var $1098=(($10)|0);
 var $1099=$1092;
 var $1100=(($12+8)|0);
 var $1101=(($h_i_i179+12)|0);
 var $1102=(($11)|0);
 var $1103=(($m+156)|0);
 var $1104=$1103;
 var $1105=(($12+4)|0);
 var $1106=(($12)|0);
 var $1107=$9;
 var $1108=$9;
 var $1109=(($1108+1)|0);
 var $1110=$7;
 var $1111=$8;
 var $1112=$h_i_i_i;
 var $1113=(($h_i_i_i+4)|0);
 var $1114=$1113;
 var $1115=(($h_i_i_i+4)|0);
 var $1116=(($h_i_i_i+16)|0);
 var $1117=(($h_i_i_i+20)|0);
 var $1118=(($h_i_i_i)|0);
 var $1119=(($h_i_i_i+24)|0);
 var $1120=(($7)|0);
 var $1121=$1115;
 var $1122=(($9+8)|0);
 var $1123=(($h_i_i_i+12)|0);
 var $1124=(($8)|0);
 var $1125=(($9+4)|0);
 var $1126=(($9)|0);
 var $1127=$6;
 var $1128=$6;
 var $1129=(($1128+1)|0);
 var $1130=$4;
 var $1131=$5;
 var $1132=$h_i_i_i_i;
 var $1133=(($h_i_i_i_i+4)|0);
 var $1134=$1133;
 var $1135=(($h_i_i_i_i+4)|0);
 var $1136=(($h_i_i_i_i+16)|0);
 var $1137=(($h_i_i_i_i+20)|0);
 var $1138=(($h_i_i_i_i)|0);
 var $1139=(($h_i_i_i_i+24)|0);
 var $1140=(($4)|0);
 var $1141=$1135;
 var $1142=(($6+8)|0);
 var $1143=(($h_i_i_i_i+12)|0);
 var $1144=(($5)|0);
 var $1145=(($6+4)|0);
 var $1146=(($6)|0);
 var $1147=$3;
 var $1148=$3;
 var $1149=(($1148+1)|0);
 var $1150=$1;
 var $1151=$2;
 var $1152=$h_i_i_i_i_i;
 var $1153=(($h_i_i_i_i_i+4)|0);
 var $1154=$1153;
 var $1155=(($h_i_i_i_i_i+4)|0);
 var $1156=(($h_i_i_i_i_i+16)|0);
 var $1157=(($h_i_i_i_i_i+20)|0);
 var $1158=(($h_i_i_i_i_i)|0);
 var $1159=(($h_i_i_i_i_i+24)|0);
 var $1160=(($1)|0);
 var $1161=$1155;
 var $1162=(($3+8)|0);
 var $1163=(($h_i_i_i_i_i+12)|0);
 var $1164=(($2)|0);
 var $1165=(($3+4)|0);
 var $1166=(($3)|0);
 var $storemerge5=0;label=389;break;
 case 389: 
 var $storemerge5;
 var $1167=HEAP32[(($n)>>2)];
 var $1168=($storemerge5>>>0)<($1167>>>0);
 if($1168){label=390;break;}else{label=633;break;}
 case 390: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=391;break; } else { label=302;break; }
 case 391: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_string) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=392;break; } else { label=302;break; }
 case 392: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($_trash) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=393;break; } else { label=302;break; }
 case 393: 
 var $1173=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($636,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=394;break; } else { label=302;break; }
 case 394: 
 var $1174=HEAP32[(($sz)>>2)];
 var $1175=($1174|0)==0;
 if($1175){var $1179=0;label=396;break;}else{label=395;break;}
 case 395: 
 var $1177=_malloc($1174);
 var $1179=$1177;label=396;break;
 case 396: 
 var $1179;
 var $1180=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($1179,1,$1174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=397;break; } else { label=302;break; }
 case 397: 
 var $1181=HEAP8[(($639)>>0)];
 var $1182=$1181&1;
 var $1183=(($1182<<24)>>24)==0;
 var $1184=HEAP32[(($666)>>2)];
 var $_455=($1183?$641:$1184);
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $1185=($1174|0)==1;
 if($1185){label=398;break;}else{label=455;break;}
 case 398: 
 var $1186=_strlen($_455);
 var $1187=($1186>>>0)>4294967279;
 if($1187){label=399;break;}else{label=401;break;}
 case 399: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=400;break; } else { label=307;break; }
 case 400: 
 throw "Reached an unreachable!";
 case 401: 
 var $1190=($1186>>>0)<11;
 if($1190){label=402;break;}else{label=403;break;}
 case 402: 
 var $1192=$1186<<1;
 var $1193=(($1192)&255);
 HEAP8[(($1084)>>0)]=$1193;
 var $__p_0_i_i187=$1086;label=410;break;
 case 403: 
 var $1194=((($1186)+(16))|0);
 var $1195=$1194&-16;
 var $1196=($1195|0)==0;
 var $_size_i_i182=($1196?1:$1195);
 var $1197=_malloc($_size_i_i182);
 var $1198=($1197|0)==0;
 if($1198){label=404;break;}else{var $_lcssa_i_i185=$1197;label=409;break;}
 case 404: 
 var $1199=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1200=($1199|0)==0;
 if($1200){label=407;break;}else{label=405;break;}
 case 405: 
 var $1202=$1199;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1202]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=406;break; } else { label=301;break; }
 case 406: 
 var $1203=_malloc($_size_i_i182);
 var $1204=($1203|0)==0;
 if($1204){label=404;break;}else{var $_lcssa_i_i185=$1203;label=409;break;}
 case 407: 
 var $1206=___cxa_allocate_exception(4);
 var $1207=$1206;
 HEAP32[(($1207)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1206,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=408;break; } else { label=307;break; }
 case 408: 
 throw "Reached an unreachable!";
 case 409: 
 var $_lcssa_i_i185;
 HEAP32[(($1100)>>2)]=$_lcssa_i_i185;
 var $1208=$1195|1;
 HEAP32[(($1106)>>2)]=$1208;
 HEAP32[(($1105)>>2)]=$1186;
 var $__p_0_i_i187=$_lcssa_i_i185;label=410;break;
 case 410: 
 var $__p_0_i_i187;
 assert($1186 % 1 === 0);(_memcpy($__p_0_i_i187, $_455, $1186)|0);
 var $1209=(($__p_0_i_i187+$1186)|0);
 HEAP8[(($1209)>>0)]=0;
 var $$etemp$29$0=8;
 var $$etemp$29$1=0;

 var $$etemp$30$0=4;
 var $$etemp$30$1=0;

 var $$etemp$31$0=28;
 var $$etemp$31$1=0;

 var $storemerge_i_i_i189=0;label=411;break;
 case 411: 
 var $storemerge_i_i_i189;
 var $1211=($storemerge_i_i_i189>>>0)<3;
 if($1211){label=412;break;}else{label=413;break;}
 case 412: 
 var $1213=(($1091+($storemerge_i_i_i189<<2))|0);
 HEAP32[(($1213)>>2)]=0;
 var $1214=((($storemerge_i_i_i189)+(1))|0);
 var $storemerge_i_i_i189=$1214;label=411;break;
 case 413: 
 var $1215=HEAP8[(($1084)>>0)];
 var $1216=$1215&1;
 var $1217=(($1216<<24)>>24)==0;
 if($1217){label=415;break;}else{label=414;break;}
 case 414: 
 var $1219=HEAP32[(($1100)>>2)];
 var $1220=HEAP32[(($1105)>>2)];
 var $1225=$1220;var $1224=$1219;label=416;break;
 case 415: 
 var $1222=($1215&255);
 var $1223=$1222>>>1;
 var $1225=$1223;var $1224=$1086;label=416;break;
 case 416: 
 var $1224;
 var $1225;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1092,$1224,$1225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=417;break; } else { label=426;break; }
 case 417: 
 if($1217){label=419;break;}else{label=418;break;}
 case 418: 
 var $1227=HEAP32[(($1105)>>2)];
 var $1231=$1227;label=420;break;
 case 419: 
 var $1229=($1215&255);
 var $1230=$1229>>>1;
 var $1231=$1230;label=420;break;
 case 420: 
 var $1231;
 var $1232=($1231|0)==0;
 if($1232){label=429;break;}else{label=421;break;}
 case 421: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($11,$1097,$h_i_i179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=422;break; } else { label=426;break; }
 case 422: 
 var $1234=HEAP32[(($1102)>>2)];
 var $1235=($1234|0)==($1104|0);
 if($1235){label=429;break;}else{label=423;break;}
 case 423: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=424;break; } else { label=427;break; }
 case 424: 
 throw "Reached an unreachable!";
 case 425: 
 var $lpad_loopexit368$0 = ___cxa_find_matching_catch(); var $lpad_loopexit368$1 = tempRet0;
 var $lpad_phi370$1=$lpad_loopexit368$1;var $lpad_phi370$0=$lpad_loopexit368$0;label=428;break;
 case 426: 
 var $lpad_loopexit387$0 = ___cxa_find_matching_catch(); var $lpad_loopexit387$1 = tempRet0;
 var $lpad_phi370$1=$lpad_loopexit387$1;var $lpad_phi370$0=$lpad_loopexit387$0;label=428;break;
 case 427: 
 var $lpad_nonloopexit388$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit388$1 = tempRet0;
 var $lpad_phi370$1=$lpad_nonloopexit388$1;var $lpad_phi370$0=$lpad_nonloopexit388$0;label=428;break;
 case 428: 
 var $lpad_phi370$0;
 var $lpad_phi370$1;
 var $1238=$lpad_phi370$0;
 var $1239=$lpad_phi370$1;
 var $_0320=$1238;var $_0321=$1239;label=447;break;
 case 429: 
 HEAP32[(($1093)>>2)]=1;
 HEAP32[(($1094)>>2)]=0;
 var $1241=_malloc(8);
 var $1242=($1241|0)==0;
 if($1242){label=430;break;}else{var $_lcssa_i_i_i198=$1241;label=435;break;}
 case 430: 
 var $1243=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1244=($1243|0)==0;
 if($1244){label=433;break;}else{label=431;break;}
 case 431: 
 var $1246=$1243;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1246]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=432;break; } else { label=425;break; }
 case 432: 
 var $1247=_malloc(8);
 var $1248=($1247|0)==0;
 if($1248){label=430;break;}else{var $_lcssa_i_i_i198=$1247;label=435;break;}
 case 433: 
 var $1250=___cxa_allocate_exception(4);
 var $1251=$1250;
 HEAP32[(($1251)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1250,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=434;break; } else { label=427;break; }
 case 434: 
 throw "Reached an unreachable!";
 case 435: 
 var $_lcssa_i_i_i198;
 var $1252=$_lcssa_i_i_i198;
 HEAP32[(($1252)>>2)]=18200;
 var $1253=_malloc(1);
 var $1254=($1253|0)==0;
 if($1254){label=436;break;}else{var $_lcssa_i_i_i_i202=$1253;label=444;break;}
 case 436: 
 var $1255=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1256=($1255|0)==0;
 if($1256){label=439;break;}else{label=437;break;}
 case 437: 
 var $1258=$1255;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1258]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=438;break; } else { label=441;break; }
 case 438: 
 var $1259=_malloc(1);
 var $1260=($1259|0)==0;
 if($1260){label=436;break;}else{var $_lcssa_i_i_i_i202=$1259;label=444;break;}
 case 439: 
 var $1262=___cxa_allocate_exception(4);
 var $1263=$1262;
 HEAP32[(($1263)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1262,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=440;break; } else { label=442;break; }
 case 440: 
 throw "Reached an unreachable!";
 case 441: 
 var $lpad_loopexit373$0 = ___cxa_find_matching_catch(); var $lpad_loopexit373$1 = tempRet0;
 var $lpad_phi375$1=$lpad_loopexit373$1;var $lpad_phi375$0=$lpad_loopexit373$0;label=443;break;
 case 442: 
 var $lpad_nonloopexit374$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit374$1 = tempRet0;
 var $lpad_phi375$1=$lpad_nonloopexit374$1;var $lpad_phi375$0=$lpad_nonloopexit374$0;label=443;break;
 case 443: 
 var $lpad_phi375$0;
 var $lpad_phi375$1;
 var $1265=$lpad_phi375$0;
 var $1266=$lpad_phi375$1;
 _free($_lcssa_i_i_i198);
 var $_0320=$1265;var $_0321=$1266;label=447;break;
 case 444: 
 var $_lcssa_i_i_i_i202;
 HEAP8[(($_lcssa_i_i_i_i202)>>0)]=0;
 var $1267=(($_lcssa_i_i_i198+4)|0);
 var $1268=$1267;
 HEAP32[(($1268)>>2)]=$_lcssa_i_i_i_i202;
 var $1269=$_lcssa_i_i_i198;
 HEAP32[(($1095)>>2)]=$1269;
 var $1270=HEAP32[(($654)>>2)];
 var $1271=((($1270)+(1))|0);
 HEAP32[(($654)>>2)]=$1271;
 HEAP32[(($1096)>>2)]=$1271;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($10,$1097,$h_i_i179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=445;break; } else { label=426;break; }
 case 445: 
 var $1272=HEAP32[(($1098)>>2)];
 var $1273=(($1272+16)|0);
 var $1274=HEAP32[(($1273)>>2)];
 var $1275=HEAP8[(($1099)>>0)];
 var $1276=$1275&1;
 var $1277=(($1276<<24)>>24)==0;
 if($1277){label=450;break;}else{label=446;break;}
 case 446: 
 var $1279=HEAP32[(($1101)>>2)];
 _free($1279);
 label=450;break;
 case 447: 
 var $_0321;
 var $_0320;
 var $1281=HEAP8[(($1099)>>0)];
 var $1282=$1281&1;
 var $1283=(($1282<<24)>>24)==0;
 if($1283){label=449;break;}else{label=448;break;}
 case 448: 
 var $1285=HEAP32[(($1101)>>2)];
 _free($1285);
 label=449;break;
 case 449: 
 var $1286=HEAP8[(($1084)>>0)];
 var $1287=$1286&1;
 var $1288=(($1287<<24)>>24)==0;
 if($1288){label=454;break;}else{label=453;break;}
 case 450: 
 var $$etemp$32$0=8;
 var $$etemp$32$1=0;

 var $$etemp$33$0=4;
 var $$etemp$33$1=0;

 var $$etemp$34$0=28;
 var $$etemp$34$1=0;

 var $1289=HEAP8[(($1084)>>0)];
 var $1290=$1289&1;
 var $1291=(($1290<<24)>>24)==0;
 if($1291){label=452;break;}else{label=451;break;}
 case 451: 
 var $1293=HEAP32[(($1100)>>2)];
 _free($1293);
 label=452;break;
 case 452: 
 var $1294=(($1274+4)|0);
 var $1295=$1294;
 var $1296=HEAP32[(($1295)>>2)];
 var $1297=HEAP8[(($1179)>>0)];
 HEAP8[(($1296)>>0)]=$1297;
 label=630;break;
 case 453: 
 var $1299=HEAP32[(($1100)>>2)];
 _free($1299);
 label=454;break;
 case 454: 
 var $1300$0=$_0320;
 var $1300$1=0;
 var $1301$0=$1300$0;
 var $1301$1=$_0321;
 var $eh_lpad_body119$1=$1301$1;var $eh_lpad_body119$0=$1301$0;label=308;break;
 case 455: 
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $1303=($1174|0)==2;
 if($1303){label=456;break;}else{label=513;break;}
 case 456: 
 var $1304=_strlen($_455);
 var $1305=($1304>>>0)>4294967279;
 if($1305){label=457;break;}else{label=459;break;}
 case 457: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=458;break; } else { label=307;break; }
 case 458: 
 throw "Reached an unreachable!";
 case 459: 
 var $1308=($1304>>>0)<11;
 if($1308){label=460;break;}else{label=461;break;}
 case 460: 
 var $1310=$1304<<1;
 var $1311=(($1310)&255);
 HEAP8[(($1107)>>0)]=$1311;
 var $__p_0_i_i_i209=$1109;label=468;break;
 case 461: 
 var $1312=((($1304)+(16))|0);
 var $1313=$1312&-16;
 var $1314=($1313|0)==0;
 var $_size_i_i_i207=($1314?1:$1313);
 var $1315=_malloc($_size_i_i_i207);
 var $1316=($1315|0)==0;
 if($1316){label=462;break;}else{var $_lcssa_i_i4_i=$1315;label=467;break;}
 case 462: 
 var $1317=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1318=($1317|0)==0;
 if($1318){label=465;break;}else{label=463;break;}
 case 463: 
 var $1320=$1317;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1320]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=464;break; } else { label=300;break; }
 case 464: 
 var $1321=_malloc($_size_i_i_i207);
 var $1322=($1321|0)==0;
 if($1322){label=462;break;}else{var $_lcssa_i_i4_i=$1321;label=467;break;}
 case 465: 
 var $1324=___cxa_allocate_exception(4);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1324,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=466;break; } else { label=307;break; }
 case 466: 
 throw "Reached an unreachable!";
 case 467: 
 var $_lcssa_i_i4_i;
 HEAP32[(($1122)>>2)]=$_lcssa_i_i4_i;
 var $1326=$1313|1;
 HEAP32[(($1126)>>2)]=$1326;
 HEAP32[(($1125)>>2)]=$1304;
 var $__p_0_i_i_i209=$_lcssa_i_i4_i;label=468;break;
 case 468: 
 var $__p_0_i_i_i209;
 assert($1304 % 1 === 0);(_memcpy($__p_0_i_i_i209, $_455, $1304)|0);
 var $1327=(($__p_0_i_i_i209+$1304)|0);
 HEAP8[(($1327)>>0)]=0;
 var $$etemp$36$0=8;
 var $$etemp$36$1=0;

 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $$etemp$38$0=28;
 var $$etemp$38$1=0;

 var $storemerge_i_i_i_i=0;label=469;break;
 case 469: 
 var $storemerge_i_i_i_i;
 var $1329=($storemerge_i_i_i_i>>>0)<3;
 if($1329){label=470;break;}else{label=471;break;}
 case 470: 
 var $1331=(($1114+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($1331)>>2)]=0;
 var $1332=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$1332;label=469;break;
 case 471: 
 var $1333=HEAP8[(($1107)>>0)];
 var $1334=$1333&1;
 var $1335=(($1334<<24)>>24)==0;
 if($1335){label=473;break;}else{label=472;break;}
 case 472: 
 var $1337=HEAP32[(($1122)>>2)];
 var $1338=HEAP32[(($1125)>>2)];
 var $1343=$1338;var $1342=$1337;label=474;break;
 case 473: 
 var $1340=($1333&255);
 var $1341=$1340>>>1;
 var $1343=$1341;var $1342=$1109;label=474;break;
 case 474: 
 var $1342;
 var $1343;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1115,$1342,$1343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=475;break; } else { label=484;break; }
 case 475: 
 if($1335){label=477;break;}else{label=476;break;}
 case 476: 
 var $1345=HEAP32[(($1125)>>2)];
 var $1349=$1345;label=478;break;
 case 477: 
 var $1347=($1333&255);
 var $1348=$1347>>>1;
 var $1349=$1348;label=478;break;
 case 478: 
 var $1349;
 var $1350=($1349|0)==0;
 if($1350){label=487;break;}else{label=479;break;}
 case 479: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($8,$1097,$h_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=480;break; } else { label=484;break; }
 case 480: 
 var $1352=HEAP32[(($1124)>>2)];
 var $1353=($1352|0)==($1104|0);
 if($1353){label=487;break;}else{label=481;break;}
 case 481: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=482;break; } else { label=485;break; }
 case 482: 
 throw "Reached an unreachable!";
 case 483: 
 var $lpad_loopexit355$0 = ___cxa_find_matching_catch(); var $lpad_loopexit355$1 = tempRet0;
 var $lpad_phi357$1=$lpad_loopexit355$1;var $lpad_phi357$0=$lpad_loopexit355$0;label=486;break;
 case 484: 
 var $lpad_loopexit385$0 = ___cxa_find_matching_catch(); var $lpad_loopexit385$1 = tempRet0;
 var $lpad_phi357$1=$lpad_loopexit385$1;var $lpad_phi357$0=$lpad_loopexit385$0;label=486;break;
 case 485: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi357$1=$lpad_nonloopexit$1;var $lpad_phi357$0=$lpad_nonloopexit$0;label=486;break;
 case 486: 
 var $lpad_phi357$0;
 var $lpad_phi357$1;
 var $1356=$lpad_phi357$0;
 var $1357=$lpad_phi357$1;
 var $_0316=$1356;var $_0317=$1357;label=505;break;
 case 487: 
 HEAP32[(($1116)>>2)]=2;
 HEAP32[(($1117)>>2)]=0;
 var $1359=_malloc(8);
 var $1360=($1359|0)==0;
 if($1360){label=488;break;}else{var $_lcssa_i_i_i9_i=$1359;label=493;break;}
 case 488: 
 var $1361=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1362=($1361|0)==0;
 if($1362){label=491;break;}else{label=489;break;}
 case 489: 
 var $1364=$1361;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1364]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=490;break; } else { label=483;break; }
 case 490: 
 var $1365=_malloc(8);
 var $1366=($1365|0)==0;
 if($1366){label=488;break;}else{var $_lcssa_i_i_i9_i=$1365;label=493;break;}
 case 491: 
 var $1368=___cxa_allocate_exception(4);
 var $1369=$1368;
 HEAP32[(($1369)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1368,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=492;break; } else { label=485;break; }
 case 492: 
 throw "Reached an unreachable!";
 case 493: 
 var $_lcssa_i_i_i9_i;
 var $1370=$_lcssa_i_i_i9_i;
 HEAP32[(($1370)>>2)]=18008;
 var $1371=_malloc(2);
 var $1372=($1371|0)==0;
 if($1372){label=494;break;}else{var $_lcssa_i_i_i_i_i=$1371;label=502;break;}
 case 494: 
 var $1373=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1374=($1373|0)==0;
 if($1374){label=497;break;}else{label=495;break;}
 case 495: 
 var $1376=$1373;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1376]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=496;break; } else { label=499;break; }
 case 496: 
 var $1377=_malloc(2);
 var $1378=($1377|0)==0;
 if($1378){label=494;break;}else{var $_lcssa_i_i_i_i_i=$1377;label=502;break;}
 case 497: 
 var $1380=___cxa_allocate_exception(4);
 var $1381=$1380;
 HEAP32[(($1381)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1380,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=498;break; } else { label=500;break; }
 case 498: 
 throw "Reached an unreachable!";
 case 499: 
 var $lpad_loopexit360$0 = ___cxa_find_matching_catch(); var $lpad_loopexit360$1 = tempRet0;
 var $lpad_phi362$1=$lpad_loopexit360$1;var $lpad_phi362$0=$lpad_loopexit360$0;label=501;break;
 case 500: 
 var $lpad_nonloopexit361$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit361$1 = tempRet0;
 var $lpad_phi362$1=$lpad_nonloopexit361$1;var $lpad_phi362$0=$lpad_nonloopexit361$0;label=501;break;
 case 501: 
 var $lpad_phi362$0;
 var $lpad_phi362$1;
 var $1383=$lpad_phi362$0;
 var $1384=$lpad_phi362$1;
 _free($_lcssa_i_i_i9_i);
 var $_0316=$1383;var $_0317=$1384;label=505;break;
 case 502: 
 var $_lcssa_i_i_i_i_i;
 var $1385=$_lcssa_i_i_i_i_i;
 HEAP16[(($1385)>>1)]=0;
 var $1386=(($_lcssa_i_i_i9_i+4)|0);
 var $1387=$1386;
 HEAP32[(($1387)>>2)]=$1385;
 var $1388=$_lcssa_i_i_i9_i;
 HEAP32[(($1118)>>2)]=$1388;
 var $1389=HEAP32[(($654)>>2)];
 var $1390=((($1389)+(1))|0);
 HEAP32[(($654)>>2)]=$1390;
 HEAP32[(($1119)>>2)]=$1390;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$1097,$h_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=503;break; } else { label=484;break; }
 case 503: 
 var $1391=HEAP32[(($1120)>>2)];
 var $1392=(($1391+16)|0);
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=HEAP8[(($1121)>>0)];
 var $1395=$1394&1;
 var $1396=(($1395<<24)>>24)==0;
 if($1396){label=508;break;}else{label=504;break;}
 case 504: 
 var $1398=HEAP32[(($1123)>>2)];
 _free($1398);
 label=508;break;
 case 505: 
 var $_0317;
 var $_0316;
 var $1400=HEAP8[(($1121)>>0)];
 var $1401=$1400&1;
 var $1402=(($1401<<24)>>24)==0;
 if($1402){label=507;break;}else{label=506;break;}
 case 506: 
 var $1404=HEAP32[(($1123)>>2)];
 _free($1404);
 label=507;break;
 case 507: 
 var $1405=HEAP8[(($1107)>>0)];
 var $1406=$1405&1;
 var $1407=(($1406<<24)>>24)==0;
 if($1407){label=512;break;}else{label=511;break;}
 case 508: 
 var $$etemp$39$0=8;
 var $$etemp$39$1=0;

 var $$etemp$40$0=4;
 var $$etemp$40$1=0;

 var $$etemp$41$0=28;
 var $$etemp$41$1=0;

 var $1408=HEAP8[(($1107)>>0)];
 var $1409=$1408&1;
 var $1410=(($1409<<24)>>24)==0;
 if($1410){label=510;break;}else{label=509;break;}
 case 509: 
 var $1412=HEAP32[(($1122)>>2)];
 _free($1412);
 label=510;break;
 case 510: 
 var $1413=(($1393+4)|0);
 var $1414=$1413;
 var $1415=HEAP32[(($1414)>>2)];
 var $1416=$1179;
 var $1417=(((((HEAPU8[(($1416)>>0)])|(HEAPU8[((($1416)+(1))>>0)]<<8))<<16)>>16));
 tempBigInt=$1417;HEAP8[(($1415)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1415)+(1))>>0)]=tempBigInt&0xff;
 label=630;break;
 case 511: 
 var $1419=HEAP32[(($1122)>>2)];
 _free($1419);
 label=512;break;
 case 512: 
 var $1420$0=$_0316;
 var $1420$1=0;
 var $1421$0=$1420$0;
 var $1421$1=$_0317;
 var $eh_lpad_body119$1=$1421$1;var $eh_lpad_body119$0=$1421$0;label=308;break;
 case 513: 
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $1423=($1174|0)==4;
 if($1423){label=514;break;}else{label=571;break;}
 case 514: 
 var $1424=_strlen($_455);
 var $1425=($1424>>>0)>4294967279;
 if($1425){label=515;break;}else{label=517;break;}
 case 515: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=516;break; } else { label=307;break; }
 case 516: 
 throw "Reached an unreachable!";
 case 517: 
 var $1428=($1424>>>0)<11;
 if($1428){label=518;break;}else{label=519;break;}
 case 518: 
 var $1430=$1424<<1;
 var $1431=(($1430)&255);
 HEAP8[(($1127)>>0)]=$1431;
 var $__p_0_i_i_i_i216=$1129;label=526;break;
 case 519: 
 var $1432=((($1424)+(16))|0);
 var $1433=$1432&-16;
 var $1434=($1433|0)==0;
 var $_size_i_i_i_i214=($1434?1:$1433);
 var $1435=_malloc($_size_i_i_i_i214);
 var $1436=($1435|0)==0;
 if($1436){label=520;break;}else{var $_lcssa_i_i4_i_i=$1435;label=525;break;}
 case 520: 
 var $1437=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1438=($1437|0)==0;
 if($1438){label=523;break;}else{label=521;break;}
 case 521: 
 var $1440=$1437;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1440]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=522;break; } else { label=299;break; }
 case 522: 
 var $1441=_malloc($_size_i_i_i_i214);
 var $1442=($1441|0)==0;
 if($1442){label=520;break;}else{var $_lcssa_i_i4_i_i=$1441;label=525;break;}
 case 523: 
 var $1444=___cxa_allocate_exception(4);
 var $1445=$1444;
 HEAP32[(($1445)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1444,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=524;break; } else { label=307;break; }
 case 524: 
 throw "Reached an unreachable!";
 case 525: 
 var $_lcssa_i_i4_i_i;
 HEAP32[(($1142)>>2)]=$_lcssa_i_i4_i_i;
 var $1446=$1433|1;
 HEAP32[(($1146)>>2)]=$1446;
 HEAP32[(($1145)>>2)]=$1424;
 var $__p_0_i_i_i_i216=$_lcssa_i_i4_i_i;label=526;break;
 case 526: 
 var $__p_0_i_i_i_i216;
 assert($1424 % 1 === 0);(_memcpy($__p_0_i_i_i_i216, $_455, $1424)|0);
 var $1447=(($__p_0_i_i_i_i216+$1424)|0);
 HEAP8[(($1447)>>0)]=0;
 var $$etemp$43$0=8;
 var $$etemp$43$1=0;

 var $$etemp$44$0=4;
 var $$etemp$44$1=0;

 var $$etemp$45$0=28;
 var $$etemp$45$1=0;

 var $storemerge_i_i_i_i_i=0;label=527;break;
 case 527: 
 var $storemerge_i_i_i_i_i;
 var $1449=($storemerge_i_i_i_i_i>>>0)<3;
 if($1449){label=528;break;}else{label=529;break;}
 case 528: 
 var $1451=(($1134+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($1451)>>2)]=0;
 var $1452=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$1452;label=527;break;
 case 529: 
 var $1453=HEAP8[(($1127)>>0)];
 var $1454=$1453&1;
 var $1455=(($1454<<24)>>24)==0;
 if($1455){label=531;break;}else{label=530;break;}
 case 530: 
 var $1457=HEAP32[(($1142)>>2)];
 var $1458=HEAP32[(($1145)>>2)];
 var $1463=$1458;var $1462=$1457;label=532;break;
 case 531: 
 var $1460=($1453&255);
 var $1461=$1460>>>1;
 var $1463=$1461;var $1462=$1129;label=532;break;
 case 532: 
 var $1462;
 var $1463;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1135,$1462,$1463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=533;break; } else { label=542;break; }
 case 533: 
 if($1455){label=535;break;}else{label=534;break;}
 case 534: 
 var $1465=HEAP32[(($1145)>>2)];
 var $1469=$1465;label=536;break;
 case 535: 
 var $1467=($1453&255);
 var $1468=$1467>>>1;
 var $1469=$1468;label=536;break;
 case 536: 
 var $1469;
 var $1470=($1469|0)==0;
 if($1470){label=545;break;}else{label=537;break;}
 case 537: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($5,$1097,$h_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=538;break; } else { label=542;break; }
 case 538: 
 var $1472=HEAP32[(($1144)>>2)];
 var $1473=($1472|0)==($1104|0);
 if($1473){label=545;break;}else{label=539;break;}
 case 539: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=540;break; } else { label=543;break; }
 case 540: 
 throw "Reached an unreachable!";
 case 541: 
 var $lpad_loopexit343$0 = ___cxa_find_matching_catch(); var $lpad_loopexit343$1 = tempRet0;
 var $lpad_phi344$1=$lpad_loopexit343$1;var $lpad_phi344$0=$lpad_loopexit343$0;label=544;break;
 case 542: 
 var $lpad_loopexit382$0 = ___cxa_find_matching_catch(); var $lpad_loopexit382$1 = tempRet0;
 var $lpad_phi344$1=$lpad_loopexit382$1;var $lpad_phi344$0=$lpad_loopexit382$0;label=544;break;
 case 543: 
 var $lpad_nonloopexit383$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit383$1 = tempRet0;
 var $lpad_phi344$1=$lpad_nonloopexit383$1;var $lpad_phi344$0=$lpad_nonloopexit383$0;label=544;break;
 case 544: 
 var $lpad_phi344$0;
 var $lpad_phi344$1;
 var $1476=$lpad_phi344$0;
 var $1477=$lpad_phi344$1;
 var $_0314=$1476;var $_0315=$1477;label=563;break;
 case 545: 
 HEAP32[(($1136)>>2)]=4;
 HEAP32[(($1137)>>2)]=0;
 var $1479=_malloc(8);
 var $1480=($1479|0)==0;
 if($1480){label=546;break;}else{var $_lcssa_i_i_i9_i_i=$1479;label=551;break;}
 case 546: 
 var $1481=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1482=($1481|0)==0;
 if($1482){label=549;break;}else{label=547;break;}
 case 547: 
 var $1484=$1481;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1484]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=548;break; } else { label=541;break; }
 case 548: 
 var $1485=_malloc(8);
 var $1486=($1485|0)==0;
 if($1486){label=546;break;}else{var $_lcssa_i_i_i9_i_i=$1485;label=551;break;}
 case 549: 
 var $1488=___cxa_allocate_exception(4);
 var $1489=$1488;
 HEAP32[(($1489)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1488,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=550;break; } else { label=543;break; }
 case 550: 
 throw "Reached an unreachable!";
 case 551: 
 var $_lcssa_i_i_i9_i_i;
 var $1490=$_lcssa_i_i_i9_i_i;
 HEAP32[(($1490)>>2)]=18104;
 var $1491=_malloc(4);
 var $1492=($1491|0)==0;
 if($1492){label=552;break;}else{var $_lcssa_i_i_i_i_i_i=$1491;label=560;break;}
 case 552: 
 var $1493=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1494=($1493|0)==0;
 if($1494){label=555;break;}else{label=553;break;}
 case 553: 
 var $1496=$1493;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1496]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=554;break; } else { label=557;break; }
 case 554: 
 var $1497=_malloc(4);
 var $1498=($1497|0)==0;
 if($1498){label=552;break;}else{var $_lcssa_i_i_i_i_i_i=$1497;label=560;break;}
 case 555: 
 var $1500=___cxa_allocate_exception(4);
 var $1501=$1500;
 HEAP32[(($1501)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1500,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=556;break; } else { label=558;break; }
 case 556: 
 throw "Reached an unreachable!";
 case 557: 
 var $lpad_loopexit347$0 = ___cxa_find_matching_catch(); var $lpad_loopexit347$1 = tempRet0;
 var $lpad_phi349$1=$lpad_loopexit347$1;var $lpad_phi349$0=$lpad_loopexit347$0;label=559;break;
 case 558: 
 var $lpad_nonloopexit348$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit348$1 = tempRet0;
 var $lpad_phi349$1=$lpad_nonloopexit348$1;var $lpad_phi349$0=$lpad_nonloopexit348$0;label=559;break;
 case 559: 
 var $lpad_phi349$0;
 var $lpad_phi349$1;
 var $1503=$lpad_phi349$0;
 var $1504=$lpad_phi349$1;
 _free($_lcssa_i_i_i9_i_i);
 var $_0314=$1503;var $_0315=$1504;label=563;break;
 case 560: 
 var $_lcssa_i_i_i_i_i_i;
 var $1505=$_lcssa_i_i_i_i_i_i;
 HEAP32[(($1505)>>2)]=0;
 var $1506=(($_lcssa_i_i_i9_i_i+4)|0);
 var $1507=$1506;
 HEAP32[(($1507)>>2)]=$1505;
 var $1508=$_lcssa_i_i_i9_i_i;
 HEAP32[(($1138)>>2)]=$1508;
 var $1509=HEAP32[(($654)>>2)];
 var $1510=((($1509)+(1))|0);
 HEAP32[(($654)>>2)]=$1510;
 HEAP32[(($1139)>>2)]=$1510;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($4,$1097,$h_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=561;break; } else { label=542;break; }
 case 561: 
 var $1511=HEAP32[(($1140)>>2)];
 var $1512=(($1511+16)|0);
 var $1513=HEAP32[(($1512)>>2)];
 var $1514=HEAP8[(($1141)>>0)];
 var $1515=$1514&1;
 var $1516=(($1515<<24)>>24)==0;
 if($1516){label=566;break;}else{label=562;break;}
 case 562: 
 var $1518=HEAP32[(($1143)>>2)];
 _free($1518);
 label=566;break;
 case 563: 
 var $_0315;
 var $_0314;
 var $1520=HEAP8[(($1141)>>0)];
 var $1521=$1520&1;
 var $1522=(($1521<<24)>>24)==0;
 if($1522){label=565;break;}else{label=564;break;}
 case 564: 
 var $1524=HEAP32[(($1143)>>2)];
 _free($1524);
 label=565;break;
 case 565: 
 var $1525=HEAP8[(($1127)>>0)];
 var $1526=$1525&1;
 var $1527=(($1526<<24)>>24)==0;
 if($1527){label=570;break;}else{label=569;break;}
 case 566: 
 var $$etemp$46$0=8;
 var $$etemp$46$1=0;

 var $$etemp$47$0=4;
 var $$etemp$47$1=0;

 var $$etemp$48$0=28;
 var $$etemp$48$1=0;

 var $1528=HEAP8[(($1127)>>0)];
 var $1529=$1528&1;
 var $1530=(($1529<<24)>>24)==0;
 if($1530){label=568;break;}else{label=567;break;}
 case 567: 
 var $1532=HEAP32[(($1142)>>2)];
 _free($1532);
 label=568;break;
 case 568: 
 var $1533=(($1513+4)|0);
 var $1534=$1533;
 var $1535=HEAP32[(($1534)>>2)];
 var $1536=$1179;
 var $1537=((((HEAPU8[(($1536)>>0)])|(HEAPU8[((($1536)+(1))>>0)]<<8)|(HEAPU8[((($1536)+(2))>>0)]<<16)|(HEAPU8[((($1536)+(3))>>0)]<<24))|0));
 tempBigInt=$1537;HEAP8[(($1535)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1535)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1535)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1535)+(3))>>0)]=tempBigInt&0xff;
 label=630;break;
 case 569: 
 var $1539=HEAP32[(($1142)>>2)];
 _free($1539);
 label=570;break;
 case 570: 
 var $1540$0=$_0314;
 var $1540$1=0;
 var $1541$0=$1540$0;
 var $1541$1=$_0315;
 var $eh_lpad_body119$1=$1541$1;var $eh_lpad_body119$0=$1541$0;label=308;break;
 case 571: 
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $1543=($1174|0)==8;
 if($1543){label=572;break;}else{label=629;break;}
 case 572: 
 var $1544=_strlen($_455);
 var $1545=($1544>>>0)>4294967279;
 if($1545){label=573;break;}else{label=575;break;}
 case 573: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=574;break; } else { label=307;break; }
 case 574: 
 throw "Reached an unreachable!";
 case 575: 
 var $1548=($1544>>>0)<11;
 if($1548){label=576;break;}else{label=577;break;}
 case 576: 
 var $1550=$1544<<1;
 var $1551=(($1550)&255);
 HEAP8[(($1147)>>0)]=$1551;
 var $__p_0_i_i_i_i_i=$1149;label=584;break;
 case 577: 
 var $1552=((($1544)+(16))|0);
 var $1553=$1552&-16;
 var $1554=($1553|0)==0;
 var $_size_i_i_i_i_i=($1554?1:$1553);
 var $1555=_malloc($_size_i_i_i_i_i);
 var $1556=($1555|0)==0;
 if($1556){label=578;break;}else{var $_lcssa_i_i4_i_i_i=$1555;label=583;break;}
 case 578: 
 var $1557=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1558=($1557|0)==0;
 if($1558){label=581;break;}else{label=579;break;}
 case 579: 
 var $1560=$1557;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1560]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=580;break; } else { label=298;break; }
 case 580: 
 var $1561=_malloc($_size_i_i_i_i_i);
 var $1562=($1561|0)==0;
 if($1562){label=578;break;}else{var $_lcssa_i_i4_i_i_i=$1561;label=583;break;}
 case 581: 
 var $1564=___cxa_allocate_exception(4);
 var $1565=$1564;
 HEAP32[(($1565)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1564,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=582;break; } else { label=307;break; }
 case 582: 
 throw "Reached an unreachable!";
 case 583: 
 var $_lcssa_i_i4_i_i_i;
 HEAP32[(($1162)>>2)]=$_lcssa_i_i4_i_i_i;
 var $1566=$1553|1;
 HEAP32[(($1166)>>2)]=$1566;
 HEAP32[(($1165)>>2)]=$1544;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i4_i_i_i;label=584;break;
 case 584: 
 var $__p_0_i_i_i_i_i;
 assert($1544 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $_455, $1544)|0);
 var $1567=(($__p_0_i_i_i_i_i+$1544)|0);
 HEAP8[(($1567)>>0)]=0;
 var $$etemp$50$0=8;
 var $$etemp$50$1=0;

 var $$etemp$51$0=4;
 var $$etemp$51$1=0;

 var $$etemp$52$0=28;
 var $$etemp$52$1=0;

 var $storemerge_i_i_i_i_i_i=0;label=585;break;
 case 585: 
 var $storemerge_i_i_i_i_i_i;
 var $1569=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($1569){label=586;break;}else{label=587;break;}
 case 586: 
 var $1571=(($1154+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($1571)>>2)]=0;
 var $1572=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$1572;label=585;break;
 case 587: 
 var $1573=HEAP8[(($1147)>>0)];
 var $1574=$1573&1;
 var $1575=(($1574<<24)>>24)==0;
 if($1575){label=589;break;}else{label=588;break;}
 case 588: 
 var $1577=HEAP32[(($1162)>>2)];
 var $1578=HEAP32[(($1165)>>2)];
 var $1583=$1578;var $1582=$1577;label=590;break;
 case 589: 
 var $1580=($1573&255);
 var $1581=$1580>>>1;
 var $1583=$1581;var $1582=$1149;label=590;break;
 case 590: 
 var $1582;
 var $1583;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1155,$1582,$1583) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=591;break; } else { label=600;break; }
 case 591: 
 if($1575){label=593;break;}else{label=592;break;}
 case 592: 
 var $1585=HEAP32[(($1165)>>2)];
 var $1589=$1585;label=594;break;
 case 593: 
 var $1587=($1573&255);
 var $1588=$1587>>>1;
 var $1589=$1588;label=594;break;
 case 594: 
 var $1589;
 var $1590=($1589|0)==0;
 if($1590){label=603;break;}else{label=595;break;}
 case 595: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$1097,$h_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=596;break; } else { label=600;break; }
 case 596: 
 var $1592=HEAP32[(($1164)>>2)];
 var $1593=($1592|0)==($1104|0);
 if($1593){label=603;break;}else{label=597;break;}
 case 597: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=598;break; } else { label=601;break; }
 case 598: 
 throw "Reached an unreachable!";
 case 599: 
 var $lpad_loopexit330$0 = ___cxa_find_matching_catch(); var $lpad_loopexit330$1 = tempRet0;
 var $lpad_phi332$1=$lpad_loopexit330$1;var $lpad_phi332$0=$lpad_loopexit330$0;label=602;break;
 case 600: 
 var $lpad_loopexit379$0 = ___cxa_find_matching_catch(); var $lpad_loopexit379$1 = tempRet0;
 var $lpad_phi332$1=$lpad_loopexit379$1;var $lpad_phi332$0=$lpad_loopexit379$0;label=602;break;
 case 601: 
 var $lpad_nonloopexit380$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit380$1 = tempRet0;
 var $lpad_phi332$1=$lpad_nonloopexit380$1;var $lpad_phi332$0=$lpad_nonloopexit380$0;label=602;break;
 case 602: 
 var $lpad_phi332$0;
 var $lpad_phi332$1;
 var $1596=$lpad_phi332$0;
 var $1597=$lpad_phi332$1;
 var $_0=$1596;var $_0313=$1597;label=621;break;
 case 603: 
 HEAP32[(($1156)>>2)]=8;
 HEAP32[(($1157)>>2)]=0;
 var $1599=_malloc(8);
 var $1600=($1599|0)==0;
 if($1600){label=604;break;}else{var $_lcssa_i_i_i9_i_i_i=$1599;label=609;break;}
 case 604: 
 var $1601=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1602=($1601|0)==0;
 if($1602){label=607;break;}else{label=605;break;}
 case 605: 
 var $1604=$1601;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1604]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=606;break; } else { label=599;break; }
 case 606: 
 var $1605=_malloc(8);
 var $1606=($1605|0)==0;
 if($1606){label=604;break;}else{var $_lcssa_i_i_i9_i_i_i=$1605;label=609;break;}
 case 607: 
 var $1608=___cxa_allocate_exception(4);
 var $1609=$1608;
 HEAP32[(($1609)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1608,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=608;break; } else { label=601;break; }
 case 608: 
 throw "Reached an unreachable!";
 case 609: 
 var $_lcssa_i_i_i9_i_i_i;
 var $1610=$_lcssa_i_i_i9_i_i_i;
 HEAP32[(($1610)>>2)]=18152;
 var $1611=_malloc(8);
 var $1612=($1611|0)==0;
 if($1612){label=610;break;}else{var $_lcssa_i_i_i_i_i_i_i=$1611;label=618;break;}
 case 610: 
 var $1613=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1614=($1613|0)==0;
 if($1614){label=613;break;}else{label=611;break;}
 case 611: 
 var $1616=$1613;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1616]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=612;break; } else { label=615;break; }
 case 612: 
 var $1617=_malloc(8);
 var $1618=($1617|0)==0;
 if($1618){label=610;break;}else{var $_lcssa_i_i_i_i_i_i_i=$1617;label=618;break;}
 case 613: 
 var $1620=___cxa_allocate_exception(4);
 var $1621=$1620;
 HEAP32[(($1621)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1620,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=614;break; } else { label=616;break; }
 case 614: 
 throw "Reached an unreachable!";
 case 615: 
 var $lpad_loopexit335$0 = ___cxa_find_matching_catch(); var $lpad_loopexit335$1 = tempRet0;
 var $lpad_phi337$1=$lpad_loopexit335$1;var $lpad_phi337$0=$lpad_loopexit335$0;label=617;break;
 case 616: 
 var $lpad_nonloopexit336$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit336$1 = tempRet0;
 var $lpad_phi337$1=$lpad_nonloopexit336$1;var $lpad_phi337$0=$lpad_nonloopexit336$0;label=617;break;
 case 617: 
 var $lpad_phi337$0;
 var $lpad_phi337$1;
 var $1623=$lpad_phi337$0;
 var $1624=$lpad_phi337$1;
 _free($_lcssa_i_i_i9_i_i_i);
 var $_0=$1623;var $_0313=$1624;label=621;break;
 case 618: 
 var $_lcssa_i_i_i_i_i_i_i;
 var $1625=$_lcssa_i_i_i_i_i_i_i;
 HEAPF64[(($1625)>>3)]=0;
 var $1626=(($_lcssa_i_i_i9_i_i_i+4)|0);
 var $1627=$1626;
 HEAP32[(($1627)>>2)]=$1625;
 var $1628=$_lcssa_i_i_i9_i_i_i;
 HEAP32[(($1158)>>2)]=$1628;
 var $1629=HEAP32[(($654)>>2)];
 var $1630=((($1629)+(1))|0);
 HEAP32[(($654)>>2)]=$1630;
 HEAP32[(($1159)>>2)]=$1630;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$1097,$h_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=619;break; } else { label=600;break; }
 case 619: 
 var $1631=HEAP32[(($1160)>>2)];
 var $1632=(($1631+16)|0);
 var $1633=HEAP32[(($1632)>>2)];
 var $1634=HEAP8[(($1161)>>0)];
 var $1635=$1634&1;
 var $1636=(($1635<<24)>>24)==0;
 if($1636){label=624;break;}else{label=620;break;}
 case 620: 
 var $1638=HEAP32[(($1163)>>2)];
 _free($1638);
 label=624;break;
 case 621: 
 var $_0313;
 var $_0;
 var $1640=HEAP8[(($1161)>>0)];
 var $1641=$1640&1;
 var $1642=(($1641<<24)>>24)==0;
 if($1642){label=623;break;}else{label=622;break;}
 case 622: 
 var $1644=HEAP32[(($1163)>>2)];
 _free($1644);
 label=623;break;
 case 623: 
 var $1645=HEAP8[(($1147)>>0)];
 var $1646=$1645&1;
 var $1647=(($1646<<24)>>24)==0;
 if($1647){label=628;break;}else{label=627;break;}
 case 624: 
 var $$etemp$53$0=8;
 var $$etemp$53$1=0;

 var $$etemp$54$0=4;
 var $$etemp$54$1=0;

 var $$etemp$55$0=28;
 var $$etemp$55$1=0;

 var $1648=HEAP8[(($1147)>>0)];
 var $1649=$1648&1;
 var $1650=(($1649<<24)>>24)==0;
 if($1650){label=626;break;}else{label=625;break;}
 case 625: 
 var $1652=HEAP32[(($1162)>>2)];
 _free($1652);
 label=626;break;
 case 626: 
 var $1653=(($1633+4)|0);
 var $1654=$1653;
 var $1655=HEAP32[(($1654)>>2)];
 var $1656=$1179;
 var $1657=(HEAP32[((tempDoublePtr)>>2)]=((((HEAPU8[(($1656)>>0)])|(HEAPU8[((($1656)+(1))>>0)]<<8)|(HEAPU8[((($1656)+(2))>>0)]<<16)|(HEAPU8[((($1656)+(3))>>0)]<<24))|0)),HEAP32[(((tempDoublePtr)+(4))>>2)]=((((HEAPU8[((($1656)+(4))>>0)])|(HEAPU8[((($1656)+(5))>>0)]<<8)|(HEAPU8[((($1656)+(6))>>0)]<<16)|(HEAPU8[((($1656)+(7))>>0)]<<24))|0)),HEAPF64[(tempDoublePtr)>>3]);
 (HEAPF64[(tempDoublePtr)>>3]=$1657,tempBigInt=HEAP32[((tempDoublePtr)>>2)],HEAP8[(($1655)>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(1))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(2))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(3))>>0)]=tempBigInt&0xff,tempBigInt=HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP8[((($1655)+(4))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(5))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(6))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($1655)+(7))>>0)]=tempBigInt&0xff);
 label=630;break;
 case 627: 
 var $1659=HEAP32[(($1162)>>2)];
 _free($1659);
 label=628;break;
 case 628: 
 var $1660$0=$_0;
 var $1660$1=0;
 var $1661$0=$1660$0;
 var $1661$1=$_0313;
 var $eh_lpad_body119$1=$1661$1;var $eh_lpad_body119$0=$1661$0;label=308;break;
 case 629: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io4DerKI6MyMeshlNS1_3K12IS3_NS1_9DummyTypeILi1048576EEENS5_ILi2048EEENS5_ILi1024EEENS5_ILi512EEENS5_ILi256EEENS5_ILi128EEENS5_ILi64EEENS5_ILi32EEENS5_ILi16EEENS5_ILi8EEENS5_ILi4EEENS5_ILi2EEENS5_ILi1EEEEEE9AddAttribILi2EEEvRS3_PKcjPv($m,$_455,$1174,$1179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=630;break; } else { label=302;break; }
 case 630: 
 var $$etemp$56$0=12;
 var $$etemp$56$1=0;

 var $1663=($1179|0)==0;
 if($1663){label=632;break;}else{label=631;break;}
 case 631: 
 _free($1179);
 label=632;break;
 case 632: 
 var $1666=((($storemerge5)+(1))|0);
 var $storemerge5=$1666;label=389;break;
 case 633: 
 var $1668=HEAP32[(($872)>>2)];
 var $1669=HEAP32[(($871)>>2)];
 var $1670=($1668|0)==($1669|0);
 if($1670){label=639;break;}else{var $fi_sroa_0_0=$1668;var $1672=$1669;label=634;break;}
 case 634: 
 var $1672;
 var $fi_sroa_0_0;
 var $1673=($fi_sroa_0_0|0)==($1672|0);
 if($1673){label=636;break;}else{label=635;break;}
 case 635: 
 var $1675=(($fi_sroa_0_0+16)|0);
 var $1676=HEAP32[(($offsetV)>>2)];
 var $1677=HEAP32[(($1675)>>2)];
 var $1678=HEAP32[(($638)>>2)];
 var $1679=$1677;
 var $1680=$1676;
 var $1681=((($1679)-($1680))|0);
 var $1682=(((($1681|0))/(28))&-1);
 var $1683=(($1678+((($1682)*(28))&-1))|0);
 HEAP32[(($1675)>>2)]=$1683;
 var $1684=(($fi_sroa_0_0+20)|0);
 var $1685=HEAP32[(($offsetV)>>2)];
 var $1686=HEAP32[(($1684)>>2)];
 var $1687=HEAP32[(($638)>>2)];
 var $1688=$1686;
 var $1689=$1685;
 var $1690=((($1688)-($1689))|0);
 var $1691=(((($1690|0))/(28))&-1);
 var $1692=(($1687+((($1691)*(28))&-1))|0);
 HEAP32[(($1684)>>2)]=$1692;
 var $1693=(($fi_sroa_0_0+24)|0);
 var $1694=HEAP32[(($offsetV)>>2)];
 var $1695=HEAP32[(($1693)>>2)];
 var $1696=HEAP32[(($638)>>2)];
 var $1697=$1695;
 var $1698=$1694;
 var $1699=((($1697)-($1698))|0);
 var $1700=(((($1699|0))/(28))&-1);
 var $1701=(($1696+((($1700)*(28))&-1))|0);
 HEAP32[(($1693)>>2)]=$1701;
 var $1702=(($fi_sroa_0_0+32)|0);
 var $_pre452=HEAP32[(($871)>>2)];
 var $fi_sroa_0_0=$1702;var $1672=$_pre452;label=634;break;
 case 636: 
 var $1704=HEAP32[(($872)>>2)];
 var $fi_sroa_0_1=$1704;var $1706=$1672;label=637;break;
 case 637: 
 var $1706;
 var $fi_sroa_0_1;
 var $1707=($fi_sroa_0_1|0)==($1706|0);
 if($1707){label=639;break;}else{label=638;break;}
 case 638: 
 var $1709=(($fi_sroa_0_1)|0);
 var $1710=HEAP32[(($offsetF)>>2)];
 var $1711=HEAP32[(($1709)>>2)];
 var $1712=HEAP32[(($872)>>2)];
 var $1713=$1711;
 var $1714=$1710;
 var $1715=((($1713)-($1714))|0);
 var $1716=$1715>>5;
 var $1717=(($1712+($1716<<5))|0);
 HEAP32[(($1709)>>2)]=$1717;
 var $1718=(($fi_sroa_0_1+4)|0);
 var $1719=HEAP32[(($offsetF)>>2)];
 var $1720=HEAP32[(($1718)>>2)];
 var $1721=HEAP32[(($872)>>2)];
 var $1722=$1720;
 var $1723=$1719;
 var $1724=((($1722)-($1723))|0);
 var $1725=$1724>>5;
 var $1726=(($1721+($1725<<5))|0);
 HEAP32[(($1718)>>2)]=$1726;
 var $1727=(($fi_sroa_0_1+8)|0);
 var $1728=HEAP32[(($offsetF)>>2)];
 var $1729=HEAP32[(($1727)>>2)];
 var $1730=HEAP32[(($872)>>2)];
 var $1731=$1729;
 var $1732=$1728;
 var $1733=((($1731)-($1732))|0);
 var $1734=$1733>>5;
 var $1735=(($1730+($1734<<5))|0);
 HEAP32[(($1727)>>2)]=$1735;
 var $1736=(($fi_sroa_0_1+32)|0);
 var $_pre453=HEAP32[(($871)>>2)];
 var $fi_sroa_0_1=$1736;var $1706=$_pre453;label=637;break;
 case 639: 
 var $1737=$_trash;
 var $1738=HEAP8[(($1737)>>0)];
 var $1739=$1738&1;
 var $1740=(($1739<<24)>>24)==0;
 if($1740){label=641;break;}else{label=640;break;}
 case 640: 
 var $1742=(($_trash+8)|0);
 var $1743=HEAP32[(($1742)>>2)];
 _free($1743);
 label=641;break;
 case 641: 
 var $1744=HEAP8[(($639)>>0)];
 var $1745=$1744&1;
 var $1746=(($1745<<24)>>24)==0;
 if($1746){var $_0322=0;label=643;break;}else{label=642;break;}
 case 642: 
 var $1748=HEAP32[(($666)>>2)];
 _free($1748);
 var $_0322=0;label=643;break;
 case 643: 
 var $_0322;
 var $1749=HEAP32[(($34)>>2)];
 var $1750=($1749|0)==0;
 if($1750){label=648;break;}else{label=644;break;}
 case 644: 
 var $1751=HEAP32[(($35)>>2)];
 var $1752=($1749|0)==($1751|0);
 if($1752){label=647;break;}else{label=645;break;}
 case 645: 
 var $1754=((($1751)-(12))|0);
 HEAP32[(($35)>>2)]=$1754;
 var $1755=$1754;
 var $1756=HEAP8[(($1755)>>0)];
 var $1757=$1756&1;
 var $1758=(($1757<<24)>>24)==0;
 if($1758){label=644;break;}else{label=646;break;}
 case 646: 
 var $1760=((($1751)-(12)+8)|0);
 var $1761=HEAP32[(($1760)>>2)];
 _free($1761);
 label=644;break;
 case 647: 
 var $1762=HEAP32[(($34)>>2)];
 var $1763=$1762;
 _free($1763);
 label=648;break;
 case 648: 
 var $1764=HEAP32[(($31)>>2)];
 var $1765=($1764|0)==0;
 if($1765){label=653;break;}else{label=649;break;}
 case 649: 
 var $1766=HEAP32[(($32)>>2)];
 var $1767=($1764|0)==($1766|0);
 if($1767){label=652;break;}else{label=650;break;}
 case 650: 
 var $1769=((($1766)-(12))|0);
 HEAP32[(($32)>>2)]=$1769;
 var $1770=$1769;
 var $1771=HEAP8[(($1770)>>0)];
 var $1772=$1771&1;
 var $1773=(($1772<<24)>>24)==0;
 if($1773){label=649;break;}else{label=651;break;}
 case 651: 
 var $1775=((($1766)-(12)+8)|0);
 var $1776=HEAP32[(($1775)>>2)];
 _free($1776);
 label=649;break;
 case 652: 
 var $1777=HEAP32[(($31)>>2)];
 var $1778=$1777;
 _free($1778);
 label=653;break;
 case 653: 
 var $1779=HEAP32[(($28)>>2)];
 var $1780=($1779|0)==0;
 if($1780){label=658;break;}else{label=654;break;}
 case 654: 
 var $1781=HEAP32[(($29)>>2)];
 var $1782=($1779|0)==($1781|0);
 if($1782){label=657;break;}else{label=655;break;}
 case 655: 
 var $1784=((($1781)-(12))|0);
 HEAP32[(($29)>>2)]=$1784;
 var $1785=$1784;
 var $1786=HEAP8[(($1785)>>0)];
 var $1787=$1786&1;
 var $1788=(($1787<<24)>>24)==0;
 if($1788){label=654;break;}else{label=656;break;}
 case 656: 
 var $1790=((($1781)-(12)+8)|0);
 var $1791=HEAP32[(($1790)>>2)];
 _free($1791);
 label=654;break;
 case 657: 
 var $1792=HEAP32[(($28)>>2)];
 var $1793=$1792;
 _free($1793);
 label=658;break;
 case 658: 
 var $1794=HEAP32[(($25)>>2)];
 var $1795=($1794|0)==0;
 if($1795){label=663;break;}else{label=659;break;}
 case 659: 
 var $1796=HEAP32[(($26)>>2)];
 var $1797=($1794|0)==($1796|0);
 if($1797){label=662;break;}else{label=660;break;}
 case 660: 
 var $1799=((($1796)-(12))|0);
 HEAP32[(($26)>>2)]=$1799;
 var $1800=$1799;
 var $1801=HEAP8[(($1800)>>0)];
 var $1802=$1801&1;
 var $1803=(($1802<<24)>>24)==0;
 if($1803){label=659;break;}else{label=661;break;}
 case 661: 
 var $1805=((($1796)-(12)+8)|0);
 var $1806=HEAP32[(($1805)>>2)];
 _free($1806);
 label=659;break;
 case 662: 
 var $1807=HEAP32[(($25)>>2)];
 var $1808=$1807;
 _free($1808);
 label=663;break;
 case 663: 
 STACKTOP=sp;return $_0322;
 case 664: 
 var $_0319;
 var $_0318;
 var $1809=HEAP32[(($34)>>2)];
 var $1810=($1809|0)==0;
 if($1810){label=669;break;}else{label=665;break;}
 case 665: 
 var $1811=HEAP32[(($35)>>2)];
 var $1812=($1809|0)==($1811|0);
 if($1812){label=668;break;}else{label=666;break;}
 case 666: 
 var $1814=((($1811)-(12))|0);
 HEAP32[(($35)>>2)]=$1814;
 var $1815=$1814;
 var $1816=HEAP8[(($1815)>>0)];
 var $1817=$1816&1;
 var $1818=(($1817<<24)>>24)==0;
 if($1818){label=665;break;}else{label=667;break;}
 case 667: 
 var $1820=((($1811)-(12)+8)|0);
 var $1821=HEAP32[(($1820)>>2)];
 _free($1821);
 label=665;break;
 case 668: 
 var $1822=HEAP32[(($34)>>2)];
 var $1823=$1822;
 _free($1823);
 label=669;break;
 case 669: 
 var $1824=HEAP32[(($31)>>2)];
 var $1825=($1824|0)==0;
 if($1825){label=674;break;}else{label=670;break;}
 case 670: 
 var $1826=HEAP32[(($32)>>2)];
 var $1827=($1824|0)==($1826|0);
 if($1827){label=673;break;}else{label=671;break;}
 case 671: 
 var $1829=((($1826)-(12))|0);
 HEAP32[(($32)>>2)]=$1829;
 var $1830=$1829;
 var $1831=HEAP8[(($1830)>>0)];
 var $1832=$1831&1;
 var $1833=(($1832<<24)>>24)==0;
 if($1833){label=670;break;}else{label=672;break;}
 case 672: 
 var $1835=((($1826)-(12)+8)|0);
 var $1836=HEAP32[(($1835)>>2)];
 _free($1836);
 label=670;break;
 case 673: 
 var $1837=HEAP32[(($31)>>2)];
 var $1838=$1837;
 _free($1838);
 label=674;break;
 case 674: 
 var $1839=HEAP32[(($28)>>2)];
 var $1840=($1839|0)==0;
 if($1840){label=679;break;}else{label=675;break;}
 case 675: 
 var $1841=HEAP32[(($29)>>2)];
 var $1842=($1839|0)==($1841|0);
 if($1842){label=678;break;}else{label=676;break;}
 case 676: 
 var $1844=((($1841)-(12))|0);
 HEAP32[(($29)>>2)]=$1844;
 var $1845=$1844;
 var $1846=HEAP8[(($1845)>>0)];
 var $1847=$1846&1;
 var $1848=(($1847<<24)>>24)==0;
 if($1848){label=675;break;}else{label=677;break;}
 case 677: 
 var $1850=((($1841)-(12)+8)|0);
 var $1851=HEAP32[(($1850)>>2)];
 _free($1851);
 label=675;break;
 case 678: 
 var $1852=HEAP32[(($28)>>2)];
 var $1853=$1852;
 _free($1853);
 label=679;break;
 case 679: 
 var $1854=HEAP32[(($25)>>2)];
 var $1855=($1854|0)==0;
 if($1855){label=684;break;}else{label=680;break;}
 case 680: 
 var $1856=HEAP32[(($26)>>2)];
 var $1857=($1854|0)==($1856|0);
 if($1857){label=683;break;}else{label=681;break;}
 case 681: 
 var $1859=((($1856)-(12))|0);
 HEAP32[(($26)>>2)]=$1859;
 var $1860=$1859;
 var $1861=HEAP8[(($1860)>>0)];
 var $1862=$1861&1;
 var $1863=(($1862<<24)>>24)==0;
 if($1863){label=680;break;}else{label=682;break;}
 case 682: 
 var $1865=((($1856)-(12)+8)|0);
 var $1866=HEAP32[(($1865)>>2)];
 _free($1866);
 label=680;break;
 case 683: 
 var $1867=HEAP32[(($25)>>2)];
 var $1868=$1867;
 _free($1868);
 label=684;break;
 case 684: 
 var $1870$0=$_0319;
 var $1870$1=0;
 var $1871$0=$1870$0;
 var $1871$1=$_0318;
 ___resumeException($1871$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE9GetHeaderERNSt3__16vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEESF_RjSG_RNS_4Box3IfEERi($fnameV,$fnameF,$vertSize,$faceSize,$bbox,$mask){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byteset_i_i=sp;
 var $shift_i_i=(sp)+(32);
 var $s_i119=(sp)+(1056);
 var $1=(sp)+(1072);
 var $2=(sp)+(1088);
 var $3=(sp)+(1104);
 var $4=(sp)+(1120);
 var $5=(sp)+(1136);
 var $s_i=(sp)+(1152);
 var $6=(sp)+(1168);
 var $7=(sp)+(1184);
 var $8=(sp)+(1200);
 var $9=(sp)+(1216);
 var $10=(sp)+(1232);
 var $11=(sp)+(1248);
 var $name=(sp)+(1264);
 var $nameFsize=(sp)+(1280);
 var $nameVsize=(sp)+(1288);
 var $12=(sp)+(1296);
 var $13=(sp)+(1312);
 var $float_value=(sp)+(1328);
 var $14=$name;
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $16=($storemerge>>>0)<3;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=(($14+($storemerge<<2))|0);
 HEAP32[(($18)>>2)]=0;
 var $19=((($storemerge)+(1))|0);
 var $storemerge=$19;label=2;break;
 case 4: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=136;break; }
 case 5: 
 var $21=$nameFsize;
 var $22=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($21,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=136;break; }
 case 6: 
 var $23=(($fnameF+4)|0);
 var $24=(($fnameF+8)|0);
 var $25=$name;
 var $26=$12;
 var $27=$12;
 var $28=(($27+1)|0);
 var $29=(($12+4)|0);
 var $30=(($12+8)|0);
 var $31=(($name+8)|0);
 var $32=(($name+4)|0);
 var $33=(($12)|0);
 var $storemerge1=0;label=7;break;
 case 7: 
 var $storemerge1;
 var $34=HEAP32[(($nameFsize)>>2)];
 var $35=($storemerge1>>>0)<($34>>>0);
 if($35){label=8;break;}else{label=137;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=135;break; }
 case 9: 
 var $38=HEAP32[(($23)>>2)];
 var $39=HEAP32[(($24)>>2)];
 var $40=($38|0)==($39|0);
 if($40){label=27;break;}else{label=10;break;}
 case 10: 
 var $42=($38|0)==0;
 if($42){label=26;break;}else{label=11;break;}
 case 11: 
 var $44=HEAP8[(($25)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$38;
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 label=26;break;
 case 13: 
 var $50=HEAP32[(($31)>>2)];
 var $51=HEAP32[(($32)>>2)];
 var $52=($51>>>0)>4294967279;
 if($52){label=14;break;}else{label=16;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=136;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $55=($51>>>0)<11;
 if($55){label=17;break;}else{label=18;break;}
 case 17: 
 var $57=$51<<1;
 var $58=(($57)&255);
 var $59=$38;
 HEAP8[(($59)>>0)]=$58;
 var $60=$38;
 var $61=(($60+1)|0);
 var $__p_0_i=$61;label=25;break;
 case 18: 
 var $62=((($51)+(16))|0);
 var $63=$62&-16;
 var $64=($63|0)==0;
 var $_size_i=($64?1:$63);
 var $65=_malloc($_size_i);
 var $66=($65|0)==0;
 if($66){label=19;break;}else{var $_lcssa_i=$65;label=24;break;}
 case 19: 
 var $67=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $68=($67|0)==0;
 if($68){label=22;break;}else{label=20;break;}
 case 20: 
 var $70=$67;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=133;break; }
 case 21: 
 var $71=_malloc($_size_i);
 var $72=($71|0)==0;
 if($72){label=19;break;}else{var $_lcssa_i=$71;label=24;break;}
 case 22: 
 var $74=___cxa_allocate_exception(4);
 var $75=$74;
 HEAP32[(($75)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($74,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=136;break; }
 case 23: 
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i;
 var $76=(($38+8)|0);
 HEAP32[(($76)>>2)]=$_lcssa_i;
 var $77=$63|1;
 var $78=(($38)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($38+4)|0);
 HEAP32[(($79)>>2)]=$51;
 var $__p_0_i=$_lcssa_i;label=25;break;
 case 25: 
 var $__p_0_i;
 assert($51 % 1 === 0);(_memcpy($__p_0_i, $50, $51)|0);
 var $80=(($__p_0_i+$51)|0);
 HEAP8[(($80)>>0)]=0;
 label=26;break;
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=(($81+12)|0);
 HEAP32[(($23)>>2)]=$82;
 label=28;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($fnameF,$name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=135;break; }
 case 28: 
 var $84=HEAP8[(($25)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){label=29;break;}else{label=30;break;}
 case 29: 
 assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 label=43;break;
 case 30: 
 var $89=HEAP32[(($31)>>2)];
 var $90=HEAP32[(($32)>>2)];
 var $91=($90>>>0)>4294967279;
 if($91){label=31;break;}else{label=33;break;}
 case 31: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=136;break; }
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $94=($90>>>0)<11;
 if($94){label=34;break;}else{label=35;break;}
 case 34: 
 var $96=$90<<1;
 var $97=(($96)&255);
 HEAP8[(($26)>>0)]=$97;
 var $__p_0_i16=$28;label=42;break;
 case 35: 
 var $98=((($90)+(16))|0);
 var $99=$98&-16;
 var $100=($99|0)==0;
 var $_size_i20=($100?1:$99);
 var $101=_malloc($_size_i20);
 var $102=($101|0)==0;
 if($102){label=36;break;}else{var $_lcssa_i22=$101;label=41;break;}
 case 36: 
 var $103=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $104=($103|0)==0;
 if($104){label=39;break;}else{label=37;break;}
 case 37: 
 var $106=$103;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=134;break; }
 case 38: 
 var $107=_malloc($_size_i20);
 var $108=($107|0)==0;
 if($108){label=36;break;}else{var $_lcssa_i22=$107;label=41;break;}
 case 39: 
 var $110=___cxa_allocate_exception(4);
 var $111=$110;
 HEAP32[(($111)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($110,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=136;break; }
 case 40: 
 throw "Reached an unreachable!";
 case 41: 
 var $_lcssa_i22;
 HEAP32[(($30)>>2)]=$_lcssa_i22;
 var $112=$99|1;
 HEAP32[(($33)>>2)]=$112;
 HEAP32[(($29)>>2)]=$90;
 var $__p_0_i16=$_lcssa_i22;label=42;break;
 case 42: 
 var $__p_0_i16;
 assert($90 % 1 === 0);(_memcpy($__p_0_i16, $89, $90)|0);
 var $113=(($__p_0_i16+$90)|0);
 HEAP8[(($113)>>0)]=0;
 label=43;break;
 case 43: 
 var $114=HEAP8[(($26)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=45;break;}else{label=44;break;}
 case 44: 
 var $118=HEAP32[(($30)>>2)];
 var $119=HEAP32[(($29)>>2)];
 var $124=$119;var $123=$118;label=46;break;
 case 45: 
 var $121=($114&255);
 var $122=$121>>>1;
 var $124=$122;var $123=$28;label=46;break;
 case 46: 
 var $123;
 var $124;
 var $125=_strlen(3872);
 var $126=($124>>>0)<($125>>>0);
 if($126){label=52;break;}else{label=47;break;}
 case 47: 
 var $128=($125|0)==0;
 if($128){var $_0=256;label=125;break;}else{label=48;break;}
 case 48: 
 var $130=(($123+$124)|0);
 var $131=((3872+$125)|0);
 var $132=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($123,$130,3872,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=50;break; }
 case 49: 
 var $134=($132|0)==($130|0);
 if($134){label=52;break;}else{label=51;break;}
 case 50: 
 var $136$0 = ___cxa_find_matching_catch(0); var $136$1 = tempRet0;
 var $137=$136$0;
 ___clang_call_terminate($137);
 throw "Reached an unreachable!";
 case 51: 
 var $138=$132;
 var $139=$123;
 var $140=((($138)-($139))|0);
 var $phitmp341=($140|0)==-1;
 if($phitmp341){label=52;break;}else{var $_0=256;label=125;break;}
 case 52: 
 if($116){label=54;break;}else{label=53;break;}
 case 53: 
 var $142=HEAP32[(($30)>>2)];
 var $143=HEAP32[(($29)>>2)];
 var $148=$143;var $147=$142;label=55;break;
 case 54: 
 var $145=($114&255);
 var $146=$145>>>1;
 var $148=$146;var $147=$28;label=55;break;
 case 55: 
 var $147;
 var $148;
 var $149=_strlen(4720);
 var $150=($148>>>0)<($149>>>0);
 if($150){label=61;break;}else{label=56;break;}
 case 56: 
 var $152=($149|0)==0;
 if($152){var $_0=128;label=125;break;}else{label=57;break;}
 case 57: 
 var $154=(($147+$148)|0);
 var $155=((4720+$149)|0);
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($147,$154,4720,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=59;break; }
 case 58: 
 var $158=($156|0)==($154|0);
 if($158){label=61;break;}else{label=60;break;}
 case 59: 
 var $160$0 = ___cxa_find_matching_catch(0); var $160$1 = tempRet0;
 var $161=$160$0;
 ___clang_call_terminate($161);
 throw "Reached an unreachable!";
 case 60: 
 var $162=$156;
 var $163=$147;
 var $164=((($162)-($163))|0);
 var $phitmp342=($164|0)==-1;
 if($phitmp342){label=61;break;}else{var $_0=128;label=125;break;}
 case 61: 
 if($116){label=63;break;}else{label=62;break;}
 case 62: 
 var $166=HEAP32[(($30)>>2)];
 var $167=HEAP32[(($29)>>2)];
 var $172=$167;var $171=$166;label=64;break;
 case 63: 
 var $169=($114&255);
 var $170=$169>>>1;
 var $172=$170;var $171=$28;label=64;break;
 case 64: 
 var $171;
 var $172;
 var $173=_strlen(4408);
 var $174=($172>>>0)<($173>>>0);
 if($174){label=70;break;}else{label=65;break;}
 case 65: 
 var $176=($173|0)==0;
 if($176){var $_0=64;label=125;break;}else{label=66;break;}
 case 66: 
 var $178=(($171+$172)|0);
 var $179=((4408+$173)|0);
 var $180=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($171,$178,4408,$179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=68;break; }
 case 67: 
 var $182=($180|0)==($178|0);
 if($182){label=70;break;}else{label=69;break;}
 case 68: 
 var $184$0 = ___cxa_find_matching_catch(0); var $184$1 = tempRet0;
 var $185=$184$0;
 ___clang_call_terminate($185);
 throw "Reached an unreachable!";
 case 69: 
 var $186=$180;
 var $187=$171;
 var $188=((($186)-($187))|0);
 var $phitmp343=($188|0)==-1;
 if($phitmp343){label=70;break;}else{var $_0=64;label=125;break;}
 case 70: 
 if($116){label=72;break;}else{label=71;break;}
 case 71: 
 var $190=HEAP32[(($30)>>2)];
 var $191=HEAP32[(($29)>>2)];
 var $196=$191;var $195=$190;label=73;break;
 case 72: 
 var $193=($114&255);
 var $194=$193>>>1;
 var $196=$194;var $195=$28;label=73;break;
 case 73: 
 var $195;
 var $196;
 var $197=_strlen(3752);
 var $198=($196>>>0)<($197>>>0);
 if($198){label=79;break;}else{label=74;break;}
 case 74: 
 var $200=($197|0)==0;
 if($200){var $_0=1024;label=125;break;}else{label=75;break;}
 case 75: 
 var $202=(($195+$196)|0);
 var $203=((3752+$197)|0);
 var $204=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($195,$202,3752,$203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=77;break; }
 case 76: 
 var $206=($204|0)==($202|0);
 if($206){label=79;break;}else{label=78;break;}
 case 77: 
 var $208$0 = ___cxa_find_matching_catch(0); var $208$1 = tempRet0;
 var $209=$208$0;
 ___clang_call_terminate($209);
 throw "Reached an unreachable!";
 case 78: 
 var $210=$204;
 var $211=$195;
 var $212=((($210)-($211))|0);
 var $phitmp344=($212|0)==-1;
 if($phitmp344){label=79;break;}else{var $_0=1024;label=125;break;}
 case 79: 
 if($116){label=81;break;}else{label=80;break;}
 case 80: 
 var $214=HEAP32[(($30)>>2)];
 var $215=HEAP32[(($29)>>2)];
 var $220=$215;var $219=$214;label=82;break;
 case 81: 
 var $217=($114&255);
 var $218=$217>>>1;
 var $220=$218;var $219=$28;label=82;break;
 case 82: 
 var $219;
 var $220;
 var $221=_strlen(3768);
 var $222=($220>>>0)<($221>>>0);
 if($222){label=88;break;}else{label=83;break;}
 case 83: 
 var $224=($221|0)==0;
 if($224){var $_0=512;label=125;break;}else{label=84;break;}
 case 84: 
 var $226=(($219+$220)|0);
 var $227=((3768+$221)|0);
 var $228=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($219,$226,3768,$227) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=86;break; }
 case 85: 
 var $230=($228|0)==($226|0);
 if($230){label=88;break;}else{label=87;break;}
 case 86: 
 var $232$0 = ___cxa_find_matching_catch(0); var $232$1 = tempRet0;
 var $233=$232$0;
 ___clang_call_terminate($233);
 throw "Reached an unreachable!";
 case 87: 
 var $234=$228;
 var $235=$219;
 var $236=((($234)-($235))|0);
 var $phitmp345=($236|0)==-1;
 if($phitmp345){label=88;break;}else{var $_0=512;label=125;break;}
 case 88: 
 if($116){label=90;break;}else{label=89;break;}
 case 89: 
 var $238=HEAP32[(($30)>>2)];
 var $239=HEAP32[(($29)>>2)];
 var $244=$239;var $243=$238;label=91;break;
 case 90: 
 var $241=($114&255);
 var $242=$241>>>1;
 var $244=$242;var $243=$28;label=91;break;
 case 91: 
 var $243;
 var $244;
 var $245=_strlen(3768);
 var $246=($244>>>0)<($245>>>0);
 if($246){label=97;break;}else{label=92;break;}
 case 92: 
 var $248=($245|0)==0;
 if($248){var $_0=512;label=125;break;}else{label=93;break;}
 case 93: 
 var $250=(($243+$244)|0);
 var $251=((3768+$245)|0);
 var $252=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($243,$250,3768,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=95;break; }
 case 94: 
 var $254=($252|0)==($250|0);
 if($254){label=97;break;}else{label=96;break;}
 case 95: 
 var $256$0 = ___cxa_find_matching_catch(0); var $256$1 = tempRet0;
 var $257=$256$0;
 ___clang_call_terminate($257);
 throw "Reached an unreachable!";
 case 96: 
 var $258=$252;
 var $259=$243;
 var $260=((($258)-($259))|0);
 var $phitmp346=($260|0)==-1;
 if($phitmp346){label=97;break;}else{var $_0=512;label=125;break;}
 case 97: 
 if($116){label=99;break;}else{label=98;break;}
 case 98: 
 var $262=HEAP32[(($30)>>2)];
 var $263=HEAP32[(($29)>>2)];
 var $268=$263;var $267=$262;label=100;break;
 case 99: 
 var $265=($114&255);
 var $266=$265>>>1;
 var $268=$266;var $267=$28;label=100;break;
 case 100: 
 var $267;
 var $268;
 var $269=_strlen(3184);
 var $270=($268>>>0)<($269>>>0);
 if($270){label=106;break;}else{label=101;break;}
 case 101: 
 var $272=($269|0)==0;
 if($272){var $_0=2048;label=125;break;}else{label=102;break;}
 case 102: 
 var $274=(($267+$268)|0);
 var $275=((3184+$269)|0);
 var $276=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($267,$274,3184,$275) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=104;break; }
 case 103: 
 var $278=($276|0)==($274|0);
 if($278){label=106;break;}else{label=105;break;}
 case 104: 
 var $280$0 = ___cxa_find_matching_catch(0); var $280$1 = tempRet0;
 var $281=$280$0;
 ___clang_call_terminate($281);
 throw "Reached an unreachable!";
 case 105: 
 var $282=$276;
 var $283=$267;
 var $284=((($282)-($283))|0);
 var $phitmp347=($284|0)==-1;
 if($phitmp347){label=106;break;}else{var $_0=2048;label=125;break;}
 case 106: 
 if($116){label=108;break;}else{label=107;break;}
 case 107: 
 var $286=HEAP32[(($30)>>2)];
 var $287=HEAP32[(($29)>>2)];
 var $292=$287;var $291=$286;label=109;break;
 case 108: 
 var $289=($114&255);
 var $290=$289>>>1;
 var $292=$290;var $291=$28;label=109;break;
 case 109: 
 var $291;
 var $292;
 var $293=_strlen(3136);
 var $294=($292>>>0)<($293>>>0);
 if($294){label=115;break;}else{label=110;break;}
 case 110: 
 var $296=($293|0)==0;
 if($296){var $_0=16384;label=125;break;}else{label=111;break;}
 case 111: 
 var $298=(($291+$292)|0);
 var $299=((3136+$293)|0);
 var $300=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($291,$298,3136,$299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=113;break; }
 case 112: 
 var $302=($300|0)==($298|0);
 if($302){label=115;break;}else{label=114;break;}
 case 113: 
 var $304$0 = ___cxa_find_matching_catch(0); var $304$1 = tempRet0;
 var $305=$304$0;
 ___clang_call_terminate($305);
 throw "Reached an unreachable!";
 case 114: 
 var $306=$300;
 var $307=$291;
 var $308=((($306)-($307))|0);
 var $phitmp348=($308|0)==-1;
 if($phitmp348){label=115;break;}else{var $_0=16384;label=125;break;}
 case 115: 
 if($116){label=117;break;}else{label=116;break;}
 case 116: 
 var $310=HEAP32[(($30)>>2)];
 var $311=HEAP32[(($29)>>2)];
 var $316=$311;var $315=$310;label=118;break;
 case 117: 
 var $313=($114&255);
 var $314=$313>>>1;
 var $316=$314;var $315=$28;label=118;break;
 case 118: 
 var $315;
 var $316;
 var $317=_strlen(3080);
 var $318=($316>>>0)<($317>>>0);
 if($318){label=124;break;}else{label=119;break;}
 case 119: 
 var $320=($317|0)==0;
 if($320){var $_0=4096;label=125;break;}else{label=120;break;}
 case 120: 
 var $322=(($315+$316)|0);
 var $323=((3080+$317)|0);
 var $324=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($315,$322,3080,$323) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=122;break; }
 case 121: 
 var $326=($324|0)==($322|0);
 if($326){label=124;break;}else{label=123;break;}
 case 122: 
 var $328$0 = ___cxa_find_matching_catch(0); var $328$1 = tempRet0;
 var $329=$328$0;
 ___clang_call_terminate($329);
 throw "Reached an unreachable!";
 case 123: 
 var $330=$324;
 var $331=$315;
 var $332=((($330)-($331))|0);
 var $phitmp349=($332|0)==-1;
 if($phitmp349){label=124;break;}else{var $_0=4096;label=125;break;}
 case 124: 
 var $_0=0;label=125;break;
 case 125: 
 var $_0;
 var $333=HEAP32[(($mask)>>2)];
 var $334=$333|$_0;
 HEAP32[(($mask)>>2)]=$334;
 if($116){label=127;break;}else{label=126;break;}
 case 126: 
 var $336=HEAP32[(($30)>>2)];
 _free($336);
 label=127;break;
 case 127: 
 var $337=((($storemerge1)+(1))|0);
 var $storemerge1=$337;label=7;break;
 case 128: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;var $_pre_phi=$25;label=785;break;
 case 129: 
 var $lpad_loopexit269$0 = ___cxa_find_matching_catch(); var $lpad_loopexit269$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit269$1;var $eh_lpad_body$0=$lpad_loopexit269$0;var $_pre_phi=$25;label=785;break;
 case 130: 
 var $lpad_loopexit291$0 = ___cxa_find_matching_catch(); var $lpad_loopexit291$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit291$1;var $eh_lpad_body$0=$lpad_loopexit291$0;var $_pre_phi=$25;label=785;break;
 case 131: 
 var $lpad_loopexit294$0 = ___cxa_find_matching_catch(); var $lpad_loopexit294$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit294$1;var $eh_lpad_body$0=$lpad_loopexit294$0;var $_pre_phi=$25;label=785;break;
 case 132: 
 var $lpad_loopexit297$0 = ___cxa_find_matching_catch(); var $lpad_loopexit297$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit297$1;var $eh_lpad_body$0=$lpad_loopexit297$0;var $_pre_phi=$25;label=785;break;
 case 133: 
 var $lpad_loopexit326$0 = ___cxa_find_matching_catch(); var $lpad_loopexit326$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit326$1;var $eh_lpad_body$0=$lpad_loopexit326$0;var $_pre_phi=$25;label=785;break;
 case 134: 
 var $lpad_loopexit329$0 = ___cxa_find_matching_catch(); var $lpad_loopexit329$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit329$1;var $eh_lpad_body$0=$lpad_loopexit329$0;var $_pre_phi=$25;label=785;break;
 case 135: 
 var $lpad_loopexit332$0 = ___cxa_find_matching_catch(); var $lpad_loopexit332$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit332$1;var $eh_lpad_body$0=$lpad_loopexit332$0;var $_pre_phi=$25;label=785;break;
 case 136: 
 var $lpad_nonloopexit333$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit333$1 = tempRet0;
 var $_pre_pre_pre_pre_pre_pre_pre_pre_pre=$name;
 var $eh_lpad_body$1=$lpad_nonloopexit333$1;var $eh_lpad_body$0=$lpad_nonloopexit333$0;var $_pre_phi=$_pre_pre_pre_pre_pre_pre_pre_pre_pre;label=785;break;
 case 137: 
 var $339=$s_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $340=$6;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $341=$7;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $342=$8;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $343=$9;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $344=$10;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $345=$11;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $346=$s_i;
 var $storemerge_i=0;label=138;break;
 case 138: 
 var $storemerge_i;
 var $348=($storemerge_i>>>0)<3;
 if($348){label=139;break;}else{label=140;break;}
 case 139: 
 var $350=(($346+($storemerge_i<<2))|0);
 HEAP32[(($350)>>2)]=0;
 var $351=((($storemerge_i)+(1))|0);
 var $storemerge_i=$351;label=138;break;
 case 140: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=141;break; } else { label=182;break; }
 case 141: 
 var $352=_strlen(3632);
 var $353=($352>>>0)>4294967279;
 if($353){label=142;break;}else{label=144;break;}
 case 142: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=143;break; } else { label=182;break; }
 case 143: 
 throw "Reached an unreachable!";
 case 144: 
 var $356=($352>>>0)<11;
 if($356){label=145;break;}else{label=146;break;}
 case 145: 
 var $358=$352<<1;
 var $359=(($358)&255);
 HEAP8[(($340)>>0)]=$359;
 var $360=$6;
 var $361=(($360+1)|0);
 var $__p_0_i_i=$361;label=153;break;
 case 146: 
 var $362=((($352)+(16))|0);
 var $363=$362&-16;
 var $364=($363|0)==0;
 var $_size_i_i=($364?1:$363);
 var $365=_malloc($_size_i_i);
 var $366=($365|0)==0;
 if($366){label=147;break;}else{var $_lcssa_i_i=$365;label=152;break;}
 case 147: 
 var $367=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $368=($367|0)==0;
 if($368){label=150;break;}else{label=148;break;}
 case 148: 
 var $370=$367;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$370]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=149;break; } else { label=181;break; }
 case 149: 
 var $371=_malloc($_size_i_i);
 var $372=($371|0)==0;
 if($372){label=147;break;}else{var $_lcssa_i_i=$371;label=152;break;}
 case 150: 
 var $374=___cxa_allocate_exception(4);
 var $375=$374;
 HEAP32[(($375)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($374,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=182;break; }
 case 151: 
 throw "Reached an unreachable!";
 case 152: 
 var $_lcssa_i_i;
 var $376=(($6+8)|0);
 HEAP32[(($376)>>2)]=$_lcssa_i_i;
 var $377=$363|1;
 var $378=(($6)|0);
 HEAP32[(($378)>>2)]=$377;
 var $379=(($6+4)|0);
 HEAP32[(($379)>>2)]=$352;
 var $__p_0_i_i=$_lcssa_i_i;label=153;break;
 case 153: 
 var $__p_0_i_i;
 assert($352 % 1 === 0);(_memcpy($__p_0_i_i, 3632, $352)|0);
 var $380=(($__p_0_i_i+$352)|0);
 HEAP8[(($380)>>0)]=0;
 var $381=HEAP8[(($339)>>0)];
 var $382=$381&1;
 var $383=(($382<<24)>>24)==0;
 if($383){label=155;break;}else{label=154;break;}
 case 154: 
 var $385=(($s_i+4)|0);
 var $386=HEAP32[(($385)>>2)];
 var $390=$386;label=156;break;
 case 155: 
 var $388=($381&255);
 var $389=$388>>>1;
 var $390=$389;label=156;break;
 case 156: 
 var $390;
 var $391=HEAP8[(($340)>>0)];
 var $392=$391&1;
 var $393=(($392<<24)>>24)==0;
 if($393){label=158;break;}else{label=157;break;}
 case 157: 
 var $395=(($6+4)|0);
 var $396=HEAP32[(($395)>>2)];
 var $400=$396;label=159;break;
 case 158: 
 var $398=($391&255);
 var $399=$398>>>1;
 var $400=$399;label=159;break;
 case 159: 
 var $400;
 var $401=($390|0)==($400|0);
 if($401){label=160;break;}else{var $436=0;label=173;break;}
 case 160: 
 if($383){label=162;break;}else{label=161;break;}
 case 161: 
 var $404=(($s_i+8)|0);
 var $405=HEAP32[(($404)>>2)];
 var $409=$405;label=163;break;
 case 162: 
 var $407=$s_i;
 var $408=(($407+1)|0);
 var $409=$408;label=163;break;
 case 163: 
 var $409;
 if($393){label=165;break;}else{label=164;break;}
 case 164: 
 var $411=(($6+8)|0);
 var $412=HEAP32[(($411)>>2)];
 var $416=$412;label=166;break;
 case 165: 
 var $414=$6;
 var $415=(($414+1)|0);
 var $416=$415;label=166;break;
 case 166: 
 var $416;
 if($383){var $__lhs_sz_i2_i_0=$390;var $__lp_i3_i_0=$409;var $__rp_i4_i_0=$416;label=170;break;}else{label=167;break;}
 case 167: 
 var $418=($390|0)==0;
 if($418){var $436=1;label=173;break;}else{var $_02_i_i_i=$390;var $l_03_i_i_i=$409;var $r_04_i_i_i=$416;label=168;break;}
 case 168: 
 var $r_04_i_i_i;
 var $l_03_i_i_i;
 var $_02_i_i_i;
 var $419=HEAP8[(($l_03_i_i_i)>>0)];
 var $420=HEAP8[(($r_04_i_i_i)>>0)];
 var $421=(($419<<24)>>24)==(($420<<24)>>24);
 if($421){label=169;break;}else{var $436=0;label=173;break;}
 case 169: 
 var $423=((($_02_i_i_i)-(1))|0);
 var $424=(($l_03_i_i_i+1)|0);
 var $425=(($r_04_i_i_i+1)|0);
 var $426=($423|0)==0;
 if($426){var $436=1;label=173;break;}else{var $_02_i_i_i=$423;var $l_03_i_i_i=$424;var $r_04_i_i_i=$425;label=168;break;}
 case 170: 
 var $__rp_i4_i_0;
 var $__lp_i3_i_0;
 var $__lhs_sz_i2_i_0;
 var $427=($__lhs_sz_i2_i_0|0)==0;
 if($427){var $436=1;label=173;break;}else{label=171;break;}
 case 171: 
 var $429=HEAP8[(($__lp_i3_i_0)>>0)];
 var $430=HEAP8[(($__rp_i4_i_0)>>0)];
 var $431=(($429<<24)>>24)==(($430<<24)>>24);
 if($431){label=172;break;}else{var $436=0;label=173;break;}
 case 172: 
 var $433=((($__lhs_sz_i2_i_0)-(1))|0);
 var $434=(($__lp_i3_i_0+1)|0);
 var $435=(($__rp_i4_i_0+1)|0);
 var $__lhs_sz_i2_i_0=$433;var $__lp_i3_i_0=$434;var $__rp_i4_i_0=$435;label=170;break;
 case 173: 
 var $436;
 if($393){label=175;break;}else{label=174;break;}
 case 174: 
 var $438=(($6+8)|0);
 var $439=HEAP32[(($438)>>2)];
 _free($439);
 label=175;break;
 case 175: 
 var $_=($436?512:0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=182;break; }
 case 176: 
 var $lpad_loopexit303$0 = ___cxa_find_matching_catch(); var $lpad_loopexit303$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit303$1;var $lpad_phi305$0=$lpad_loopexit303$0;label=183;break;
 case 177: 
 var $lpad_loopexit307$0 = ___cxa_find_matching_catch(); var $lpad_loopexit307$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit307$1;var $lpad_phi305$0=$lpad_loopexit307$0;label=183;break;
 case 178: 
 var $lpad_loopexit311$0 = ___cxa_find_matching_catch(); var $lpad_loopexit311$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit311$1;var $lpad_phi305$0=$lpad_loopexit311$0;label=183;break;
 case 179: 
 var $lpad_loopexit315$0 = ___cxa_find_matching_catch(); var $lpad_loopexit315$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit315$1;var $lpad_phi305$0=$lpad_loopexit315$0;label=183;break;
 case 180: 
 var $lpad_loopexit319$0 = ___cxa_find_matching_catch(); var $lpad_loopexit319$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit319$1;var $lpad_phi305$0=$lpad_loopexit319$0;label=183;break;
 case 181: 
 var $lpad_loopexit323$0 = ___cxa_find_matching_catch(); var $lpad_loopexit323$1 = tempRet0;
 var $lpad_phi305$1=$lpad_loopexit323$1;var $lpad_phi305$0=$lpad_loopexit323$0;label=183;break;
 case 182: 
 var $lpad_nonloopexit324$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit324$1 = tempRet0;
 var $lpad_phi305$1=$lpad_nonloopexit324$1;var $lpad_phi305$0=$lpad_nonloopexit324$0;label=183;break;
 case 183: 
 var $lpad_phi305$0;
 var $lpad_phi305$1;
 var $440=HEAP8[(($339)>>0)];
 var $441=$440&1;
 var $442=(($441<<24)>>24)==0;
 if($442){var $eh_lpad_body$1=$lpad_phi305$1;var $eh_lpad_body$0=$lpad_phi305$0;var $_pre_phi=$25;label=785;break;}else{label=184;break;}
 case 184: 
 var $444=(($s_i+8)|0);
 var $445=HEAP32[(($444)>>2)];
 _free($445);
 var $eh_lpad_body$1=$lpad_phi305$1;var $eh_lpad_body$0=$lpad_phi305$0;var $_pre_phi=$25;label=785;break;
 case 185: 
 var $446=_strlen(3552);
 var $447=($446>>>0)>4294967279;
 if($447){label=186;break;}else{label=188;break;}
 case 186: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=182;break; }
 case 187: 
 throw "Reached an unreachable!";
 case 188: 
 var $450=($446>>>0)<11;
 if($450){label=189;break;}else{label=190;break;}
 case 189: 
 var $452=$446<<1;
 var $453=(($452)&255);
 HEAP8[(($341)>>0)]=$453;
 var $454=$7;
 var $455=(($454+1)|0);
 var $__p_0_i10_i=$455;label=197;break;
 case 190: 
 var $456=((($446)+(16))|0);
 var $457=$456&-16;
 var $458=($457|0)==0;
 var $_size_i14_i=($458?1:$457);
 var $459=_malloc($_size_i14_i);
 var $460=($459|0)==0;
 if($460){label=191;break;}else{var $_lcssa_i16_i=$459;label=196;break;}
 case 191: 
 var $461=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $462=($461|0)==0;
 if($462){label=194;break;}else{label=192;break;}
 case 192: 
 var $464=$461;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$464]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { label=180;break; }
 case 193: 
 var $465=_malloc($_size_i14_i);
 var $466=($465|0)==0;
 if($466){label=191;break;}else{var $_lcssa_i16_i=$465;label=196;break;}
 case 194: 
 var $468=___cxa_allocate_exception(4);
 var $469=$468;
 HEAP32[(($469)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($468,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { label=182;break; }
 case 195: 
 throw "Reached an unreachable!";
 case 196: 
 var $_lcssa_i16_i;
 var $470=(($7+8)|0);
 HEAP32[(($470)>>2)]=$_lcssa_i16_i;
 var $471=$457|1;
 var $472=(($7)|0);
 HEAP32[(($472)>>2)]=$471;
 var $473=(($7+4)|0);
 HEAP32[(($473)>>2)]=$446;
 var $__p_0_i10_i=$_lcssa_i16_i;label=197;break;
 case 197: 
 var $__p_0_i10_i;
 assert($446 % 1 === 0);(_memcpy($__p_0_i10_i, 3552, $446)|0);
 var $474=(($__p_0_i10_i+$446)|0);
 HEAP8[(($474)>>0)]=0;
 var $475=HEAP8[(($339)>>0)];
 var $476=$475&1;
 var $477=(($476<<24)>>24)==0;
 if($477){label=199;break;}else{label=198;break;}
 case 198: 
 var $479=(($s_i+4)|0);
 var $480=HEAP32[(($479)>>2)];
 var $484=$480;label=200;break;
 case 199: 
 var $482=($475&255);
 var $483=$482>>>1;
 var $484=$483;label=200;break;
 case 200: 
 var $484;
 var $485=HEAP8[(($341)>>0)];
 var $486=$485&1;
 var $487=(($486<<24)>>24)==0;
 if($487){label=202;break;}else{label=201;break;}
 case 201: 
 var $489=(($7+4)|0);
 var $490=HEAP32[(($489)>>2)];
 var $494=$490;label=203;break;
 case 202: 
 var $492=($485&255);
 var $493=$492>>>1;
 var $494=$493;label=203;break;
 case 203: 
 var $494;
 var $495=($484|0)==($494|0);
 if($495){label=204;break;}else{var $530=0;label=217;break;}
 case 204: 
 if($477){label=206;break;}else{label=205;break;}
 case 205: 
 var $498=(($s_i+8)|0);
 var $499=HEAP32[(($498)>>2)];
 var $503=$499;label=207;break;
 case 206: 
 var $501=$s_i;
 var $502=(($501+1)|0);
 var $503=$502;label=207;break;
 case 207: 
 var $503;
 if($487){label=209;break;}else{label=208;break;}
 case 208: 
 var $505=(($7+8)|0);
 var $506=HEAP32[(($505)>>2)];
 var $510=$506;label=210;break;
 case 209: 
 var $508=$7;
 var $509=(($508+1)|0);
 var $510=$509;label=210;break;
 case 210: 
 var $510;
 if($477){var $__lhs_sz_i13_i_0=$484;var $__lp_i14_i_0=$503;var $__rp_i15_i_0=$510;label=214;break;}else{label=211;break;}
 case 211: 
 var $512=($484|0)==0;
 if($512){var $530=1;label=217;break;}else{var $_02_i_i22_i=$484;var $l_03_i_i21_i=$503;var $r_04_i_i20_i=$510;label=212;break;}
 case 212: 
 var $r_04_i_i20_i;
 var $l_03_i_i21_i;
 var $_02_i_i22_i;
 var $513=HEAP8[(($l_03_i_i21_i)>>0)];
 var $514=HEAP8[(($r_04_i_i20_i)>>0)];
 var $515=(($513<<24)>>24)==(($514<<24)>>24);
 if($515){label=213;break;}else{var $530=0;label=217;break;}
 case 213: 
 var $517=((($_02_i_i22_i)-(1))|0);
 var $518=(($l_03_i_i21_i+1)|0);
 var $519=(($r_04_i_i20_i+1)|0);
 var $520=($517|0)==0;
 if($520){var $530=1;label=217;break;}else{var $_02_i_i22_i=$517;var $l_03_i_i21_i=$518;var $r_04_i_i20_i=$519;label=212;break;}
 case 214: 
 var $__rp_i15_i_0;
 var $__lp_i14_i_0;
 var $__lhs_sz_i13_i_0;
 var $521=($__lhs_sz_i13_i_0|0)==0;
 if($521){var $530=1;label=217;break;}else{label=215;break;}
 case 215: 
 var $523=HEAP8[(($__lp_i14_i_0)>>0)];
 var $524=HEAP8[(($__rp_i15_i_0)>>0)];
 var $525=(($523<<24)>>24)==(($524<<24)>>24);
 if($525){label=216;break;}else{var $530=0;label=217;break;}
 case 216: 
 var $527=((($__lhs_sz_i13_i_0)-(1))|0);
 var $528=(($__lp_i14_i_0+1)|0);
 var $529=(($__rp_i15_i_0+1)|0);
 var $__lhs_sz_i13_i_0=$527;var $__lp_i14_i_0=$528;var $__rp_i15_i_0=$529;label=214;break;
 case 217: 
 var $530;
 if($487){label=219;break;}else{label=218;break;}
 case 218: 
 var $532=(($7+8)|0);
 var $533=HEAP32[(($532)>>2)];
 _free($533);
 label=219;break;
 case 219: 
 var $534=$_|256;
 var $__=($530?$534:$_);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=220;break; } else { label=182;break; }
 case 220: 
 var $535=_strlen(3472);
 var $536=($535>>>0)>4294967279;
 if($536){label=221;break;}else{label=223;break;}
 case 221: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { label=182;break; }
 case 222: 
 throw "Reached an unreachable!";
 case 223: 
 var $539=($535>>>0)<11;
 if($539){label=224;break;}else{label=225;break;}
 case 224: 
 var $541=$535<<1;
 var $542=(($541)&255);
 HEAP8[(($342)>>0)]=$542;
 var $543=$8;
 var $544=(($543+1)|0);
 var $__p_0_i29_i=$544;label=232;break;
 case 225: 
 var $545=((($535)+(16))|0);
 var $546=$545&-16;
 var $547=($546|0)==0;
 var $_size_i33_i=($547?1:$546);
 var $548=_malloc($_size_i33_i);
 var $549=($548|0)==0;
 if($549){label=226;break;}else{var $_lcssa_i35_i=$548;label=231;break;}
 case 226: 
 var $550=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $551=($550|0)==0;
 if($551){label=229;break;}else{label=227;break;}
 case 227: 
 var $553=$550;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$553]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { label=179;break; }
 case 228: 
 var $554=_malloc($_size_i33_i);
 var $555=($554|0)==0;
 if($555){label=226;break;}else{var $_lcssa_i35_i=$554;label=231;break;}
 case 229: 
 var $557=___cxa_allocate_exception(4);
 var $558=$557;
 HEAP32[(($558)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($557,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=230;break; } else { label=182;break; }
 case 230: 
 throw "Reached an unreachable!";
 case 231: 
 var $_lcssa_i35_i;
 var $559=(($8+8)|0);
 HEAP32[(($559)>>2)]=$_lcssa_i35_i;
 var $560=$546|1;
 var $561=(($8)|0);
 HEAP32[(($561)>>2)]=$560;
 var $562=(($8+4)|0);
 HEAP32[(($562)>>2)]=$535;
 var $__p_0_i29_i=$_lcssa_i35_i;label=232;break;
 case 232: 
 var $__p_0_i29_i;
 assert($535 % 1 === 0);(_memcpy($__p_0_i29_i, 3472, $535)|0);
 var $563=(($__p_0_i29_i+$535)|0);
 HEAP8[(($563)>>0)]=0;
 var $564=HEAP8[(($339)>>0)];
 var $565=$564&1;
 var $566=(($565<<24)>>24)==0;
 if($566){label=234;break;}else{label=233;break;}
 case 233: 
 var $568=(($s_i+4)|0);
 var $569=HEAP32[(($568)>>2)];
 var $573=$569;label=235;break;
 case 234: 
 var $571=($564&255);
 var $572=$571>>>1;
 var $573=$572;label=235;break;
 case 235: 
 var $573;
 var $574=HEAP8[(($342)>>0)];
 var $575=$574&1;
 var $576=(($575<<24)>>24)==0;
 if($576){label=237;break;}else{label=236;break;}
 case 236: 
 var $578=(($8+4)|0);
 var $579=HEAP32[(($578)>>2)];
 var $583=$579;label=238;break;
 case 237: 
 var $581=($574&255);
 var $582=$581>>>1;
 var $583=$582;label=238;break;
 case 238: 
 var $583;
 var $584=($573|0)==($583|0);
 if($584){label=239;break;}else{var $619=0;label=252;break;}
 case 239: 
 if($566){label=241;break;}else{label=240;break;}
 case 240: 
 var $587=(($s_i+8)|0);
 var $588=HEAP32[(($587)>>2)];
 var $592=$588;label=242;break;
 case 241: 
 var $590=$s_i;
 var $591=(($590+1)|0);
 var $592=$591;label=242;break;
 case 242: 
 var $592;
 if($576){label=244;break;}else{label=243;break;}
 case 243: 
 var $594=(($8+8)|0);
 var $595=HEAP32[(($594)>>2)];
 var $599=$595;label=245;break;
 case 244: 
 var $597=$8;
 var $598=(($597+1)|0);
 var $599=$598;label=245;break;
 case 245: 
 var $599;
 if($566){var $__lhs_sz_i24_i_0=$573;var $__lp_i25_i_0=$592;var $__rp_i26_i_0=$599;label=249;break;}else{label=246;break;}
 case 246: 
 var $601=($573|0)==0;
 if($601){var $619=1;label=252;break;}else{var $_02_i_i41_i=$573;var $l_03_i_i40_i=$592;var $r_04_i_i39_i=$599;label=247;break;}
 case 247: 
 var $r_04_i_i39_i;
 var $l_03_i_i40_i;
 var $_02_i_i41_i;
 var $602=HEAP8[(($l_03_i_i40_i)>>0)];
 var $603=HEAP8[(($r_04_i_i39_i)>>0)];
 var $604=(($602<<24)>>24)==(($603<<24)>>24);
 if($604){label=248;break;}else{var $619=0;label=252;break;}
 case 248: 
 var $606=((($_02_i_i41_i)-(1))|0);
 var $607=(($l_03_i_i40_i+1)|0);
 var $608=(($r_04_i_i39_i+1)|0);
 var $609=($606|0)==0;
 if($609){var $619=1;label=252;break;}else{var $_02_i_i41_i=$606;var $l_03_i_i40_i=$607;var $r_04_i_i39_i=$608;label=247;break;}
 case 249: 
 var $__rp_i26_i_0;
 var $__lp_i25_i_0;
 var $__lhs_sz_i24_i_0;
 var $610=($__lhs_sz_i24_i_0|0)==0;
 if($610){var $619=1;label=252;break;}else{label=250;break;}
 case 250: 
 var $612=HEAP8[(($__lp_i25_i_0)>>0)];
 var $613=HEAP8[(($__rp_i26_i_0)>>0)];
 var $614=(($612<<24)>>24)==(($613<<24)>>24);
 if($614){label=251;break;}else{var $619=0;label=252;break;}
 case 251: 
 var $616=((($__lhs_sz_i24_i_0)-(1))|0);
 var $617=(($__lp_i25_i_0+1)|0);
 var $618=(($__rp_i26_i_0+1)|0);
 var $__lhs_sz_i24_i_0=$616;var $__lp_i25_i_0=$617;var $__rp_i26_i_0=$618;label=249;break;
 case 252: 
 var $619;
 if($576){label=254;break;}else{label=253;break;}
 case 253: 
 var $621=(($8+8)|0);
 var $622=HEAP32[(($621)>>2)];
 _free($622);
 label=254;break;
 case 254: 
 var $623=$__|1024;
 var $___=($619?$623:$__);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=255;break; } else { label=182;break; }
 case 255: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=182;break; }
 case 256: 
 var $625=_strlen(3344);
 var $626=($625>>>0)>4294967279;
 if($626){label=257;break;}else{label=259;break;}
 case 257: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=258;break; } else { label=182;break; }
 case 258: 
 throw "Reached an unreachable!";
 case 259: 
 var $629=($625>>>0)<11;
 if($629){label=260;break;}else{label=261;break;}
 case 260: 
 var $631=$625<<1;
 var $632=(($631)&255);
 HEAP8[(($343)>>0)]=$632;
 var $633=$9;
 var $634=(($633+1)|0);
 var $__p_0_i48_i=$634;label=268;break;
 case 261: 
 var $635=((($625)+(16))|0);
 var $636=$635&-16;
 var $637=($636|0)==0;
 var $_size_i52_i=($637?1:$636);
 var $638=_malloc($_size_i52_i);
 var $639=($638|0)==0;
 if($639){label=262;break;}else{var $_lcssa_i54_i=$638;label=267;break;}
 case 262: 
 var $640=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $641=($640|0)==0;
 if($641){label=265;break;}else{label=263;break;}
 case 263: 
 var $643=$640;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$643]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=264;break; } else { label=178;break; }
 case 264: 
 var $644=_malloc($_size_i52_i);
 var $645=($644|0)==0;
 if($645){label=262;break;}else{var $_lcssa_i54_i=$644;label=267;break;}
 case 265: 
 var $647=___cxa_allocate_exception(4);
 var $648=$647;
 HEAP32[(($648)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($647,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { label=182;break; }
 case 266: 
 throw "Reached an unreachable!";
 case 267: 
 var $_lcssa_i54_i;
 var $649=(($9+8)|0);
 HEAP32[(($649)>>2)]=$_lcssa_i54_i;
 var $650=$636|1;
 var $651=(($9)|0);
 HEAP32[(($651)>>2)]=$650;
 var $652=(($9+4)|0);
 HEAP32[(($652)>>2)]=$625;
 var $__p_0_i48_i=$_lcssa_i54_i;label=268;break;
 case 268: 
 var $__p_0_i48_i;
 assert($625 % 1 === 0);(_memcpy($__p_0_i48_i, 3344, $625)|0);
 var $653=(($__p_0_i48_i+$625)|0);
 HEAP8[(($653)>>0)]=0;
 var $654=HEAP8[(($339)>>0)];
 var $655=$654&1;
 var $656=(($655<<24)>>24)==0;
 if($656){label=270;break;}else{label=269;break;}
 case 269: 
 var $658=(($s_i+4)|0);
 var $659=HEAP32[(($658)>>2)];
 var $663=$659;label=271;break;
 case 270: 
 var $661=($654&255);
 var $662=$661>>>1;
 var $663=$662;label=271;break;
 case 271: 
 var $663;
 var $664=HEAP8[(($343)>>0)];
 var $665=$664&1;
 var $666=(($665<<24)>>24)==0;
 if($666){label=273;break;}else{label=272;break;}
 case 272: 
 var $668=(($9+4)|0);
 var $669=HEAP32[(($668)>>2)];
 var $673=$669;label=274;break;
 case 273: 
 var $671=($664&255);
 var $672=$671>>>1;
 var $673=$672;label=274;break;
 case 274: 
 var $673;
 var $674=($663|0)==($673|0);
 if($674){label=275;break;}else{var $709=0;label=288;break;}
 case 275: 
 if($656){label=277;break;}else{label=276;break;}
 case 276: 
 var $677=(($s_i+8)|0);
 var $678=HEAP32[(($677)>>2)];
 var $682=$678;label=278;break;
 case 277: 
 var $680=$s_i;
 var $681=(($680+1)|0);
 var $682=$681;label=278;break;
 case 278: 
 var $682;
 if($666){label=280;break;}else{label=279;break;}
 case 279: 
 var $684=(($9+8)|0);
 var $685=HEAP32[(($684)>>2)];
 var $689=$685;label=281;break;
 case 280: 
 var $687=$9;
 var $688=(($687+1)|0);
 var $689=$688;label=281;break;
 case 281: 
 var $689;
 if($656){var $__lhs_sz_i35_i_0=$663;var $__lp_i36_i_0=$682;var $__rp_i37_i_0=$689;label=285;break;}else{label=282;break;}
 case 282: 
 var $691=($663|0)==0;
 if($691){var $709=1;label=288;break;}else{var $_02_i_i60_i=$663;var $l_03_i_i59_i=$682;var $r_04_i_i58_i=$689;label=283;break;}
 case 283: 
 var $r_04_i_i58_i;
 var $l_03_i_i59_i;
 var $_02_i_i60_i;
 var $692=HEAP8[(($l_03_i_i59_i)>>0)];
 var $693=HEAP8[(($r_04_i_i58_i)>>0)];
 var $694=(($692<<24)>>24)==(($693<<24)>>24);
 if($694){label=284;break;}else{var $709=0;label=288;break;}
 case 284: 
 var $696=((($_02_i_i60_i)-(1))|0);
 var $697=(($l_03_i_i59_i+1)|0);
 var $698=(($r_04_i_i58_i+1)|0);
 var $699=($696|0)==0;
 if($699){var $709=1;label=288;break;}else{var $_02_i_i60_i=$696;var $l_03_i_i59_i=$697;var $r_04_i_i58_i=$698;label=283;break;}
 case 285: 
 var $__rp_i37_i_0;
 var $__lp_i36_i_0;
 var $__lhs_sz_i35_i_0;
 var $700=($__lhs_sz_i35_i_0|0)==0;
 if($700){var $709=1;label=288;break;}else{label=286;break;}
 case 286: 
 var $702=HEAP8[(($__lp_i36_i_0)>>0)];
 var $703=HEAP8[(($__rp_i37_i_0)>>0)];
 var $704=(($702<<24)>>24)==(($703<<24)>>24);
 if($704){label=287;break;}else{var $709=0;label=288;break;}
 case 287: 
 var $706=((($__lhs_sz_i35_i_0)-(1))|0);
 var $707=(($__lp_i36_i_0+1)|0);
 var $708=(($__rp_i37_i_0+1)|0);
 var $__lhs_sz_i35_i_0=$706;var $__lp_i36_i_0=$707;var $__rp_i37_i_0=$708;label=285;break;
 case 288: 
 var $709;
 if($666){label=290;break;}else{label=289;break;}
 case 289: 
 var $711=(($9+8)|0);
 var $712=HEAP32[(($711)>>2)];
 _free($712);
 label=290;break;
 case 290: 
 var $713=$___|4096;
 var $____=($709?$713:$___);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=291;break; } else { label=182;break; }
 case 291: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=292;break; } else { label=182;break; }
 case 292: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=182;break; }
 case 293: 
 var $716=_strlen(3272);
 var $717=($716>>>0)>4294967279;
 if($717){label=294;break;}else{label=296;break;}
 case 294: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=182;break; }
 case 295: 
 throw "Reached an unreachable!";
 case 296: 
 var $720=($716>>>0)<11;
 if($720){label=297;break;}else{label=298;break;}
 case 297: 
 var $722=$716<<1;
 var $723=(($722)&255);
 HEAP8[(($344)>>0)]=$723;
 var $724=$10;
 var $725=(($724+1)|0);
 var $__p_0_i67_i=$725;label=305;break;
 case 298: 
 var $726=((($716)+(16))|0);
 var $727=$726&-16;
 var $728=($727|0)==0;
 var $_size_i71_i=($728?1:$727);
 var $729=_malloc($_size_i71_i);
 var $730=($729|0)==0;
 if($730){label=299;break;}else{var $_lcssa_i73_i=$729;label=304;break;}
 case 299: 
 var $731=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $732=($731|0)==0;
 if($732){label=302;break;}else{label=300;break;}
 case 300: 
 var $734=$731;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$734]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=177;break; }
 case 301: 
 var $735=_malloc($_size_i71_i);
 var $736=($735|0)==0;
 if($736){label=299;break;}else{var $_lcssa_i73_i=$735;label=304;break;}
 case 302: 
 var $738=___cxa_allocate_exception(4);
 var $739=$738;
 HEAP32[(($739)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($738,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=303;break; } else { label=182;break; }
 case 303: 
 throw "Reached an unreachable!";
 case 304: 
 var $_lcssa_i73_i;
 var $740=(($10+8)|0);
 HEAP32[(($740)>>2)]=$_lcssa_i73_i;
 var $741=$727|1;
 var $742=(($10)|0);
 HEAP32[(($742)>>2)]=$741;
 var $743=(($10+4)|0);
 HEAP32[(($743)>>2)]=$716;
 var $__p_0_i67_i=$_lcssa_i73_i;label=305;break;
 case 305: 
 var $__p_0_i67_i;
 assert($716 % 1 === 0);(_memcpy($__p_0_i67_i, 3272, $716)|0);
 var $744=(($__p_0_i67_i+$716)|0);
 HEAP8[(($744)>>0)]=0;
 var $745=HEAP8[(($339)>>0)];
 var $746=$745&1;
 var $747=(($746<<24)>>24)==0;
 if($747){label=307;break;}else{label=306;break;}
 case 306: 
 var $749=(($s_i+4)|0);
 var $750=HEAP32[(($749)>>2)];
 var $754=$750;label=308;break;
 case 307: 
 var $752=($745&255);
 var $753=$752>>>1;
 var $754=$753;label=308;break;
 case 308: 
 var $754;
 var $755=HEAP8[(($344)>>0)];
 var $756=$755&1;
 var $757=(($756<<24)>>24)==0;
 if($757){label=310;break;}else{label=309;break;}
 case 309: 
 var $759=(($10+4)|0);
 var $760=HEAP32[(($759)>>2)];
 var $764=$760;label=311;break;
 case 310: 
 var $762=($755&255);
 var $763=$762>>>1;
 var $764=$763;label=311;break;
 case 311: 
 var $764;
 var $765=($754|0)==($764|0);
 if($765){label=312;break;}else{var $800=0;label=325;break;}
 case 312: 
 if($747){label=314;break;}else{label=313;break;}
 case 313: 
 var $768=(($s_i+8)|0);
 var $769=HEAP32[(($768)>>2)];
 var $773=$769;label=315;break;
 case 314: 
 var $771=$s_i;
 var $772=(($771+1)|0);
 var $773=$772;label=315;break;
 case 315: 
 var $773;
 if($757){label=317;break;}else{label=316;break;}
 case 316: 
 var $775=(($10+8)|0);
 var $776=HEAP32[(($775)>>2)];
 var $780=$776;label=318;break;
 case 317: 
 var $778=$10;
 var $779=(($778+1)|0);
 var $780=$779;label=318;break;
 case 318: 
 var $780;
 if($747){var $__lhs_sz_i46_i_0=$754;var $__lp_i47_i_0=$773;var $__rp_i48_i_0=$780;label=322;break;}else{label=319;break;}
 case 319: 
 var $782=($754|0)==0;
 if($782){var $800=1;label=325;break;}else{var $_02_i_i79_i=$754;var $l_03_i_i78_i=$773;var $r_04_i_i77_i=$780;label=320;break;}
 case 320: 
 var $r_04_i_i77_i;
 var $l_03_i_i78_i;
 var $_02_i_i79_i;
 var $783=HEAP8[(($l_03_i_i78_i)>>0)];
 var $784=HEAP8[(($r_04_i_i77_i)>>0)];
 var $785=(($783<<24)>>24)==(($784<<24)>>24);
 if($785){label=321;break;}else{var $800=0;label=325;break;}
 case 321: 
 var $787=((($_02_i_i79_i)-(1))|0);
 var $788=(($l_03_i_i78_i+1)|0);
 var $789=(($r_04_i_i77_i+1)|0);
 var $790=($787|0)==0;
 if($790){var $800=1;label=325;break;}else{var $_02_i_i79_i=$787;var $l_03_i_i78_i=$788;var $r_04_i_i77_i=$789;label=320;break;}
 case 322: 
 var $__rp_i48_i_0;
 var $__lp_i47_i_0;
 var $__lhs_sz_i46_i_0;
 var $791=($__lhs_sz_i46_i_0|0)==0;
 if($791){var $800=1;label=325;break;}else{label=323;break;}
 case 323: 
 var $793=HEAP8[(($__lp_i47_i_0)>>0)];
 var $794=HEAP8[(($__rp_i48_i_0)>>0)];
 var $795=(($793<<24)>>24)==(($794<<24)>>24);
 if($795){label=324;break;}else{var $800=0;label=325;break;}
 case 324: 
 var $797=((($__lhs_sz_i46_i_0)-(1))|0);
 var $798=(($__lp_i47_i_0+1)|0);
 var $799=(($__rp_i48_i_0+1)|0);
 var $__lhs_sz_i46_i_0=$797;var $__lp_i47_i_0=$798;var $__rp_i48_i_0=$799;label=322;break;
 case 325: 
 var $800;
 if($757){label=327;break;}else{label=326;break;}
 case 326: 
 var $802=(($10+8)|0);
 var $803=HEAP32[(($802)>>2)];
 _free($803);
 label=327;break;
 case 327: 
 var $804=$____|2048;
 var $_____=($800?$804:$____);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=328;break; } else { label=182;break; }
 case 328: 
 var $805=_strlen(3240);
 var $806=($805>>>0)>4294967279;
 if($806){label=329;break;}else{label=331;break;}
 case 329: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=330;break; } else { label=182;break; }
 case 330: 
 throw "Reached an unreachable!";
 case 331: 
 var $809=($805>>>0)<11;
 if($809){label=332;break;}else{label=333;break;}
 case 332: 
 var $811=$805<<1;
 var $812=(($811)&255);
 HEAP8[(($345)>>0)]=$812;
 var $813=$11;
 var $814=(($813+1)|0);
 var $__p_0_i86_i=$814;label=340;break;
 case 333: 
 var $815=((($805)+(16))|0);
 var $816=$815&-16;
 var $817=($816|0)==0;
 var $_size_i90_i=($817?1:$816);
 var $818=_malloc($_size_i90_i);
 var $819=($818|0)==0;
 if($819){label=334;break;}else{var $_lcssa_i92_i=$818;label=339;break;}
 case 334: 
 var $820=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $821=($820|0)==0;
 if($821){label=337;break;}else{label=335;break;}
 case 335: 
 var $823=$820;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$823]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=336;break; } else { label=176;break; }
 case 336: 
 var $824=_malloc($_size_i90_i);
 var $825=($824|0)==0;
 if($825){label=334;break;}else{var $_lcssa_i92_i=$824;label=339;break;}
 case 337: 
 var $827=___cxa_allocate_exception(4);
 var $828=$827;
 HEAP32[(($828)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($827,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=338;break; } else { label=182;break; }
 case 338: 
 throw "Reached an unreachable!";
 case 339: 
 var $_lcssa_i92_i;
 var $829=(($11+8)|0);
 HEAP32[(($829)>>2)]=$_lcssa_i92_i;
 var $830=$816|1;
 var $831=(($11)|0);
 HEAP32[(($831)>>2)]=$830;
 var $832=(($11+4)|0);
 HEAP32[(($832)>>2)]=$805;
 var $__p_0_i86_i=$_lcssa_i92_i;label=340;break;
 case 340: 
 var $__p_0_i86_i;
 assert($805 % 1 === 0);(_memcpy($__p_0_i86_i, 3240, $805)|0);
 var $833=(($__p_0_i86_i+$805)|0);
 HEAP8[(($833)>>0)]=0;
 var $834=HEAP8[(($339)>>0)];
 var $835=$834&1;
 var $836=(($835<<24)>>24)==0;
 if($836){label=342;break;}else{label=341;break;}
 case 341: 
 var $838=(($s_i+4)|0);
 var $839=HEAP32[(($838)>>2)];
 var $843=$839;label=343;break;
 case 342: 
 var $841=($834&255);
 var $842=$841>>>1;
 var $843=$842;label=343;break;
 case 343: 
 var $843;
 var $844=HEAP8[(($345)>>0)];
 var $845=$844&1;
 var $846=(($845<<24)>>24)==0;
 if($846){label=345;break;}else{label=344;break;}
 case 344: 
 var $848=(($11+4)|0);
 var $849=HEAP32[(($848)>>2)];
 var $853=$849;label=346;break;
 case 345: 
 var $851=($844&255);
 var $852=$851>>>1;
 var $853=$852;label=346;break;
 case 346: 
 var $853;
 var $854=($843|0)==($853|0);
 if($854){label=347;break;}else{var $889=0;label=360;break;}
 case 347: 
 if($836){label=349;break;}else{label=348;break;}
 case 348: 
 var $857=(($s_i+8)|0);
 var $858=HEAP32[(($857)>>2)];
 var $862=$858;label=350;break;
 case 349: 
 var $860=$s_i;
 var $861=(($860+1)|0);
 var $862=$861;label=350;break;
 case 350: 
 var $862;
 if($846){label=352;break;}else{label=351;break;}
 case 351: 
 var $864=(($11+8)|0);
 var $865=HEAP32[(($864)>>2)];
 var $869=$865;label=353;break;
 case 352: 
 var $867=$11;
 var $868=(($867+1)|0);
 var $869=$868;label=353;break;
 case 353: 
 var $869;
 if($836){var $__lhs_sz_i_i_0=$843;var $__lp_i_i_0=$862;var $__rp_i_i_0=$869;label=357;break;}else{label=354;break;}
 case 354: 
 var $871=($843|0)==0;
 if($871){var $889=1;label=360;break;}else{var $_02_i_i98_i=$843;var $l_03_i_i97_i=$862;var $r_04_i_i96_i=$869;label=355;break;}
 case 355: 
 var $r_04_i_i96_i;
 var $l_03_i_i97_i;
 var $_02_i_i98_i;
 var $872=HEAP8[(($l_03_i_i97_i)>>0)];
 var $873=HEAP8[(($r_04_i_i96_i)>>0)];
 var $874=(($872<<24)>>24)==(($873<<24)>>24);
 if($874){label=356;break;}else{var $889=0;label=360;break;}
 case 356: 
 var $876=((($_02_i_i98_i)-(1))|0);
 var $877=(($l_03_i_i97_i+1)|0);
 var $878=(($r_04_i_i96_i+1)|0);
 var $879=($876|0)==0;
 if($879){var $889=1;label=360;break;}else{var $_02_i_i98_i=$876;var $l_03_i_i97_i=$877;var $r_04_i_i96_i=$878;label=355;break;}
 case 357: 
 var $__rp_i_i_0;
 var $__lp_i_i_0;
 var $__lhs_sz_i_i_0;
 var $880=($__lhs_sz_i_i_0|0)==0;
 if($880){var $889=1;label=360;break;}else{label=358;break;}
 case 358: 
 var $882=HEAP8[(($__lp_i_i_0)>>0)];
 var $883=HEAP8[(($__rp_i_i_0)>>0)];
 var $884=(($882<<24)>>24)==(($883<<24)>>24);
 if($884){label=359;break;}else{var $889=0;label=360;break;}
 case 359: 
 var $886=((($__lhs_sz_i_i_0)-(1))|0);
 var $887=(($__lp_i_i_0+1)|0);
 var $888=(($__rp_i_i_0+1)|0);
 var $__lhs_sz_i_i_0=$886;var $__lp_i_i_0=$887;var $__rp_i_i_0=$888;label=357;break;
 case 360: 
 var $889;
 if($846){label=362;break;}else{label=361;break;}
 case 361: 
 var $891=(($11+8)|0);
 var $892=HEAP32[(($891)>>2)];
 _free($892);
 label=362;break;
 case 362: 
 var $893=$_____|16384;
 var $______=($889?$893:$_____);
 var $894=HEAP8[(($339)>>0)];
 var $895=$894&1;
 var $896=(($895<<24)>>24)==0;
 if($896){label=364;break;}else{label=363;break;}
 case 363: 
 var $898=(($s_i+8)|0);
 var $899=HEAP32[(($898)>>2)];
 _free($899);
 label=364;break;
 case 364: 
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $901=HEAP32[(($mask)>>2)];
 var $902=$901|$______;
 HEAP32[(($mask)>>2)]=$902;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=365;break; } else { label=136;break; }
 case 365: 
 var $904=$faceSize;
 var $905=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($904,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=366;break; } else { label=136;break; }
 case 366: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=367;break; } else { label=136;break; }
 case 367: 
 var $907=$nameVsize;
 var $908=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($907,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=368;break; } else { label=136;break; }
 case 368: 
 var $909=(($fnameV+4)|0);
 var $910=(($fnameV+8)|0);
 var $911=$13;
 var $912=$13;
 var $913=(($912+1)|0);
 var $914=(($13+4)|0);
 var $915=(($13+8)|0);
 var $916=(($13)|0);
 var $storemerge2=0;label=369;break;
 case 369: 
 var $storemerge2;
 var $917=HEAP32[(($nameVsize)>>2)];
 var $918=($storemerge2>>>0)<($917>>>0);
 if($918){label=370;break;}else{label=472;break;}
 case 370: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=371;break; } else { label=132;break; }
 case 371: 
 var $921=HEAP32[(($909)>>2)];
 var $922=HEAP32[(($910)>>2)];
 var $923=($921|0)==($922|0);
 if($923){label=389;break;}else{label=372;break;}
 case 372: 
 var $925=($921|0)==0;
 if($925){label=388;break;}else{label=373;break;}
 case 373: 
 var $927=HEAP8[(($25)>>0)];
 var $928=$927&1;
 var $929=(($928<<24)>>24)==0;
 if($929){label=374;break;}else{label=375;break;}
 case 374: 
 var $931=$921;
 assert(12 % 1 === 0);HEAP32[(($931)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($931)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($931)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 label=388;break;
 case 375: 
 var $933=HEAP32[(($31)>>2)];
 var $934=HEAP32[(($32)>>2)];
 var $935=($934>>>0)>4294967279;
 if($935){label=376;break;}else{label=378;break;}
 case 376: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=377;break; } else { label=136;break; }
 case 377: 
 throw "Reached an unreachable!";
 case 378: 
 var $938=($934>>>0)<11;
 if($938){label=379;break;}else{label=380;break;}
 case 379: 
 var $940=$934<<1;
 var $941=(($940)&255);
 var $942=$921;
 HEAP8[(($942)>>0)]=$941;
 var $943=$921;
 var $944=(($943+1)|0);
 var $__p_0_i41=$944;label=387;break;
 case 380: 
 var $945=((($934)+(16))|0);
 var $946=$945&-16;
 var $947=($946|0)==0;
 var $_size_i45=($947?1:$946);
 var $948=_malloc($_size_i45);
 var $949=($948|0)==0;
 if($949){label=381;break;}else{var $_lcssa_i47=$948;label=386;break;}
 case 381: 
 var $950=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $951=($950|0)==0;
 if($951){label=384;break;}else{label=382;break;}
 case 382: 
 var $953=$950;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$953]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=383;break; } else { label=130;break; }
 case 383: 
 var $954=_malloc($_size_i45);
 var $955=($954|0)==0;
 if($955){label=381;break;}else{var $_lcssa_i47=$954;label=386;break;}
 case 384: 
 var $957=___cxa_allocate_exception(4);
 var $958=$957;
 HEAP32[(($958)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($957,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=385;break; } else { label=136;break; }
 case 385: 
 throw "Reached an unreachable!";
 case 386: 
 var $_lcssa_i47;
 var $959=(($921+8)|0);
 HEAP32[(($959)>>2)]=$_lcssa_i47;
 var $960=$946|1;
 var $961=(($921)|0);
 HEAP32[(($961)>>2)]=$960;
 var $962=(($921+4)|0);
 HEAP32[(($962)>>2)]=$934;
 var $__p_0_i41=$_lcssa_i47;label=387;break;
 case 387: 
 var $__p_0_i41;
 assert($934 % 1 === 0);(_memcpy($__p_0_i41, $933, $934)|0);
 var $963=(($__p_0_i41+$934)|0);
 HEAP8[(($963)>>0)]=0;
 label=388;break;
 case 388: 
 var $964=HEAP32[(($909)>>2)];
 var $965=(($964+12)|0);
 HEAP32[(($909)>>2)]=$965;
 label=390;break;
 case 389: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($fnameV,$name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=390;break; } else { label=132;break; }
 case 390: 
 var $967=HEAP8[(($25)>>0)];
 var $968=$967&1;
 var $969=(($968<<24)>>24)==0;
 if($969){label=391;break;}else{label=392;break;}
 case 391: 
 assert(12 % 1 === 0);HEAP32[(($911)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($911)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($911)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 label=405;break;
 case 392: 
 var $972=HEAP32[(($31)>>2)];
 var $973=HEAP32[(($32)>>2)];
 var $974=($973>>>0)>4294967279;
 if($974){label=393;break;}else{label=395;break;}
 case 393: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=394;break; } else { label=136;break; }
 case 394: 
 throw "Reached an unreachable!";
 case 395: 
 var $977=($973>>>0)<11;
 if($977){label=396;break;}else{label=397;break;}
 case 396: 
 var $979=$973<<1;
 var $980=(($979)&255);
 HEAP8[(($911)>>0)]=$980;
 var $__p_0_i54=$913;label=404;break;
 case 397: 
 var $981=((($973)+(16))|0);
 var $982=$981&-16;
 var $983=($982|0)==0;
 var $_size_i58=($983?1:$982);
 var $984=_malloc($_size_i58);
 var $985=($984|0)==0;
 if($985){label=398;break;}else{var $_lcssa_i60=$984;label=403;break;}
 case 398: 
 var $986=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $987=($986|0)==0;
 if($987){label=401;break;}else{label=399;break;}
 case 399: 
 var $989=$986;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$989]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=400;break; } else { label=131;break; }
 case 400: 
 var $990=_malloc($_size_i58);
 var $991=($990|0)==0;
 if($991){label=398;break;}else{var $_lcssa_i60=$990;label=403;break;}
 case 401: 
 var $993=___cxa_allocate_exception(4);
 var $994=$993;
 HEAP32[(($994)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($993,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=402;break; } else { label=136;break; }
 case 402: 
 throw "Reached an unreachable!";
 case 403: 
 var $_lcssa_i60;
 HEAP32[(($915)>>2)]=$_lcssa_i60;
 var $995=$982|1;
 HEAP32[(($916)>>2)]=$995;
 HEAP32[(($914)>>2)]=$973;
 var $__p_0_i54=$_lcssa_i60;label=404;break;
 case 404: 
 var $__p_0_i54;
 assert($973 % 1 === 0);(_memcpy($__p_0_i54, $972, $973)|0);
 var $996=(($__p_0_i54+$973)|0);
 HEAP8[(($996)>>0)]=0;
 label=405;break;
 case 405: 
 var $997=HEAP8[(($911)>>0)];
 var $998=$997&1;
 var $999=(($998<<24)>>24)==0;
 if($999){label=407;break;}else{label=406;break;}
 case 406: 
 var $1001=HEAP32[(($915)>>2)];
 var $1002=HEAP32[(($914)>>2)];
 var $1007=$1002;var $1006=$1001;label=408;break;
 case 407: 
 var $1004=($997&255);
 var $1005=$1004>>>1;
 var $1007=$1005;var $1006=$913;label=408;break;
 case 408: 
 var $1006;
 var $1007;
 var $1008=_strlen(3872);
 var $1009=($1007>>>0)<($1008>>>0);
 if($1009){label=414;break;}else{label=409;break;}
 case 409: 
 var $1011=($1008|0)==0;
 if($1011){var $_0257=4;label=469;break;}else{label=410;break;}
 case 410: 
 var $1013=(($1006+$1007)|0);
 var $1014=((3872+$1008)|0);
 var $1015=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1006,$1013,3872,$1014) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=411;break; } else { label=412;break; }
 case 411: 
 var $1017=($1015|0)==($1013|0);
 if($1017){label=414;break;}else{label=413;break;}
 case 412: 
 var $1019$0 = ___cxa_find_matching_catch(0); var $1019$1 = tempRet0;
 var $1020=$1019$0;
 ___clang_call_terminate($1020);
 throw "Reached an unreachable!";
 case 413: 
 var $1021=$1015;
 var $1022=$1006;
 var $1023=((($1021)-($1022))|0);
 var $phitmp=($1023|0)==-1;
 if($phitmp){label=414;break;}else{var $_0257=4;label=469;break;}
 case 414: 
 if($999){label=416;break;}else{label=415;break;}
 case 415: 
 var $1025=HEAP32[(($915)>>2)];
 var $1026=HEAP32[(($914)>>2)];
 var $1031=$1026;var $1030=$1025;label=417;break;
 case 416: 
 var $1028=($997&255);
 var $1029=$1028>>>1;
 var $1031=$1029;var $1030=$913;label=417;break;
 case 417: 
 var $1030;
 var $1031;
 var $1032=_strlen(3832);
 var $1033=($1031>>>0)<($1032>>>0);
 if($1033){label=423;break;}else{label=418;break;}
 case 418: 
 var $1035=($1032|0)==0;
 if($1035){var $_0257=1;label=469;break;}else{label=419;break;}
 case 419: 
 var $1037=(($1030+$1031)|0);
 var $1038=((3832+$1032)|0);
 var $1039=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1030,$1037,3832,$1038) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=420;break; } else { label=421;break; }
 case 420: 
 var $1041=($1039|0)==($1037|0);
 if($1041){label=423;break;}else{label=422;break;}
 case 421: 
 var $1043$0 = ___cxa_find_matching_catch(0); var $1043$1 = tempRet0;
 var $1044=$1043$0;
 ___clang_call_terminate($1044);
 throw "Reached an unreachable!";
 case 422: 
 var $1045=$1039;
 var $1046=$1030;
 var $1047=((($1045)-($1046))|0);
 var $phitmp335=($1047|0)==-1;
 if($phitmp335){label=423;break;}else{var $_0257=1;label=469;break;}
 case 423: 
 if($999){label=425;break;}else{label=424;break;}
 case 424: 
 var $1049=HEAP32[(($915)>>2)];
 var $1050=HEAP32[(($914)>>2)];
 var $1055=$1050;var $1054=$1049;label=426;break;
 case 425: 
 var $1052=($997&255);
 var $1053=$1052>>>1;
 var $1055=$1053;var $1054=$913;label=426;break;
 case 426: 
 var $1054;
 var $1055;
 var $1056=_strlen(4720);
 var $1057=($1055>>>0)<($1056>>>0);
 if($1057){label=432;break;}else{label=427;break;}
 case 427: 
 var $1059=($1056|0)==0;
 if($1059){var $_0257=2;label=469;break;}else{label=428;break;}
 case 428: 
 var $1061=(($1054+$1055)|0);
 var $1062=((4720+$1056)|0);
 var $1063=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1054,$1061,4720,$1062) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=429;break; } else { label=430;break; }
 case 429: 
 var $1065=($1063|0)==($1061|0);
 if($1065){label=432;break;}else{label=431;break;}
 case 430: 
 var $1067$0 = ___cxa_find_matching_catch(0); var $1067$1 = tempRet0;
 var $1068=$1067$0;
 ___clang_call_terminate($1068);
 throw "Reached an unreachable!";
 case 431: 
 var $1069=$1063;
 var $1070=$1054;
 var $1071=((($1069)-($1070))|0);
 var $phitmp336=($1071|0)==-1;
 if($phitmp336){label=432;break;}else{var $_0257=2;label=469;break;}
 case 432: 
 if($999){label=434;break;}else{label=433;break;}
 case 433: 
 var $1073=HEAP32[(($915)>>2)];
 var $1074=HEAP32[(($914)>>2)];
 var $1079=$1074;var $1078=$1073;label=435;break;
 case 434: 
 var $1076=($997&255);
 var $1077=$1076>>>1;
 var $1079=$1077;var $1078=$913;label=435;break;
 case 435: 
 var $1078;
 var $1079;
 var $1080=_strlen(3768);
 var $1081=($1079>>>0)<($1080>>>0);
 if($1081){label=441;break;}else{label=436;break;}
 case 436: 
 var $1083=($1080|0)==0;
 if($1083){var $_0257=8;label=469;break;}else{label=437;break;}
 case 437: 
 var $1085=(($1078+$1079)|0);
 var $1086=((3768+$1080)|0);
 var $1087=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1078,$1085,3768,$1086) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=438;break; } else { label=439;break; }
 case 438: 
 var $1089=($1087|0)==($1085|0);
 if($1089){label=441;break;}else{label=440;break;}
 case 439: 
 var $1091$0 = ___cxa_find_matching_catch(0); var $1091$1 = tempRet0;
 var $1092=$1091$0;
 ___clang_call_terminate($1092);
 throw "Reached an unreachable!";
 case 440: 
 var $1093=$1087;
 var $1094=$1078;
 var $1095=((($1093)-($1094))|0);
 var $phitmp337=($1095|0)==-1;
 if($phitmp337){label=441;break;}else{var $_0257=8;label=469;break;}
 case 441: 
 if($999){label=443;break;}else{label=442;break;}
 case 442: 
 var $1097=HEAP32[(($915)>>2)];
 var $1098=HEAP32[(($914)>>2)];
 var $1103=$1098;var $1102=$1097;label=444;break;
 case 443: 
 var $1100=($997&255);
 var $1101=$1100>>>1;
 var $1103=$1101;var $1102=$913;label=444;break;
 case 444: 
 var $1102;
 var $1103;
 var $1104=_strlen(3752);
 var $1105=($1103>>>0)<($1104>>>0);
 if($1105){label=450;break;}else{label=445;break;}
 case 445: 
 var $1107=($1104|0)==0;
 if($1107){var $_0257=16;label=469;break;}else{label=446;break;}
 case 446: 
 var $1109=(($1102+$1103)|0);
 var $1110=((3752+$1104)|0);
 var $1111=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1102,$1109,3752,$1110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=447;break; } else { label=448;break; }
 case 447: 
 var $1113=($1111|0)==($1109|0);
 if($1113){label=450;break;}else{label=449;break;}
 case 448: 
 var $1115$0 = ___cxa_find_matching_catch(0); var $1115$1 = tempRet0;
 var $1116=$1115$0;
 ___clang_call_terminate($1116);
 throw "Reached an unreachable!";
 case 449: 
 var $1117=$1111;
 var $1118=$1102;
 var $1119=((($1117)-($1118))|0);
 var $phitmp338=($1119|0)==-1;
 if($phitmp338){label=450;break;}else{var $_0257=16;label=469;break;}
 case 450: 
 if($999){label=452;break;}else{label=451;break;}
 case 451: 
 var $1121=HEAP32[(($915)>>2)];
 var $1122=HEAP32[(($914)>>2)];
 var $1127=$1122;var $1126=$1121;label=453;break;
 case 452: 
 var $1124=($997&255);
 var $1125=$1124>>>1;
 var $1127=$1125;var $1126=$913;label=453;break;
 case 453: 
 var $1126;
 var $1127;
 var $1128=_strlen(3720);
 var $1129=($1127>>>0)<($1128>>>0);
 if($1129){label=459;break;}else{label=454;break;}
 case 454: 
 var $1131=($1128|0)==0;
 if($1131){var $_0257=32;label=469;break;}else{label=455;break;}
 case 455: 
 var $1133=(($1126+$1127)|0);
 var $1134=((3720+$1128)|0);
 var $1135=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1126,$1133,3720,$1134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=456;break; } else { label=457;break; }
 case 456: 
 var $1137=($1135|0)==($1133|0);
 if($1137){label=459;break;}else{label=458;break;}
 case 457: 
 var $1139$0 = ___cxa_find_matching_catch(0); var $1139$1 = tempRet0;
 var $1140=$1139$0;
 ___clang_call_terminate($1140);
 throw "Reached an unreachable!";
 case 458: 
 var $1141=$1135;
 var $1142=$1126;
 var $1143=((($1141)-($1142))|0);
 var $phitmp339=($1143|0)==-1;
 if($phitmp339){label=459;break;}else{var $_0257=32;label=469;break;}
 case 459: 
 if($999){label=461;break;}else{label=460;break;}
 case 460: 
 var $1145=HEAP32[(($915)>>2)];
 var $1146=HEAP32[(($914)>>2)];
 var $1151=$1146;var $1150=$1145;label=462;break;
 case 461: 
 var $1148=($997&255);
 var $1149=$1148>>>1;
 var $1151=$1149;var $1150=$913;label=462;break;
 case 462: 
 var $1150;
 var $1151;
 var $1152=_strlen(3664);
 var $1153=($1151>>>0)<($1152>>>0);
 if($1153){label=468;break;}else{label=463;break;}
 case 463: 
 var $1155=($1152|0)==0;
 if($1155){var $_0257=65536;label=469;break;}else{label=464;break;}
 case 464: 
 var $1157=(($1150+$1151)|0);
 var $1158=((3664+$1152)|0);
 var $1159=(function() { try { __THREW__ = 0; return __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($1150,$1157,3664,$1158) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=465;break; } else { label=466;break; }
 case 465: 
 var $1161=($1159|0)==($1157|0);
 if($1161){label=468;break;}else{label=467;break;}
 case 466: 
 var $1163$0 = ___cxa_find_matching_catch(0); var $1163$1 = tempRet0;
 var $1164=$1163$0;
 ___clang_call_terminate($1164);
 throw "Reached an unreachable!";
 case 467: 
 var $1165=$1159;
 var $1166=$1150;
 var $1167=((($1165)-($1166))|0);
 var $phitmp340=($1167|0)==-1;
 if($phitmp340){label=468;break;}else{var $_0257=65536;label=469;break;}
 case 468: 
 var $_0257=0;label=469;break;
 case 469: 
 var $_0257;
 var $1168=HEAP32[(($mask)>>2)];
 var $1169=$1168|$_0257;
 HEAP32[(($mask)>>2)]=$1169;
 if($999){label=471;break;}else{label=470;break;}
 case 470: 
 var $1171=HEAP32[(($915)>>2)];
 _free($1171);
 label=471;break;
 case 471: 
 var $1172=((($storemerge2)+(1))|0);
 var $storemerge2=$1172;label=369;break;
 case 472: 
 var $1174=$s_i119;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $1175=$1;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $1176=$2;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $1177=$3;
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $1178=$4;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $1179=$5;
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $1180=$s_i119;
 var $storemerge_i120=0;label=473;break;
 case 473: 
 var $storemerge_i120;
 var $1182=($storemerge_i120>>>0)<3;
 if($1182){label=474;break;}else{label=475;break;}
 case 474: 
 var $1184=(($1180+($storemerge_i120<<2))|0);
 HEAP32[(($1184)>>2)]=0;
 var $1185=((($storemerge_i120)+(1))|0);
 var $storemerge_i120=$1185;label=473;break;
 case 475: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=476;break; } else { label=516;break; }
 case 476: 
 var $1186=_strlen(4184);
 var $1187=($1186>>>0)>4294967279;
 if($1187){label=477;break;}else{label=479;break;}
 case 477: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=478;break; } else { label=516;break; }
 case 478: 
 throw "Reached an unreachable!";
 case 479: 
 var $1190=($1186>>>0)<11;
 if($1190){label=480;break;}else{label=481;break;}
 case 480: 
 var $1192=$1186<<1;
 var $1193=(($1192)&255);
 HEAP8[(($1175)>>0)]=$1193;
 var $1194=$1;
 var $1195=(($1194+1)|0);
 var $__p_0_i_i131=$1195;label=488;break;
 case 481: 
 var $1196=((($1186)+(16))|0);
 var $1197=$1196&-16;
 var $1198=($1197|0)==0;
 var $_size_i_i124=($1198?1:$1197);
 var $1199=_malloc($_size_i_i124);
 var $1200=($1199|0)==0;
 if($1200){label=482;break;}else{var $_lcssa_i_i129=$1199;label=487;break;}
 case 482: 
 var $1201=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1202=($1201|0)==0;
 if($1202){label=485;break;}else{label=483;break;}
 case 483: 
 var $1204=$1201;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1204]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=484;break; } else { label=515;break; }
 case 484: 
 var $1205=_malloc($_size_i_i124);
 var $1206=($1205|0)==0;
 if($1206){label=482;break;}else{var $_lcssa_i_i129=$1205;label=487;break;}
 case 485: 
 var $1208=___cxa_allocate_exception(4);
 var $1209=$1208;
 HEAP32[(($1209)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1208,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=486;break; } else { label=516;break; }
 case 486: 
 throw "Reached an unreachable!";
 case 487: 
 var $_lcssa_i_i129;
 var $1210=(($1+8)|0);
 HEAP32[(($1210)>>2)]=$_lcssa_i_i129;
 var $1211=$1197|1;
 var $1212=(($1)|0);
 HEAP32[(($1212)>>2)]=$1211;
 var $1213=(($1+4)|0);
 HEAP32[(($1213)>>2)]=$1186;
 var $__p_0_i_i131=$_lcssa_i_i129;label=488;break;
 case 488: 
 var $__p_0_i_i131;
 assert($1186 % 1 === 0);(_memcpy($__p_0_i_i131, 4184, $1186)|0);
 var $1214=(($__p_0_i_i131+$1186)|0);
 HEAP8[(($1214)>>0)]=0;
 var $1215=HEAP8[(($1174)>>0)];
 var $1216=$1215&1;
 var $1217=(($1216<<24)>>24)==0;
 if($1217){label=490;break;}else{label=489;break;}
 case 489: 
 var $1219=(($s_i119+4)|0);
 var $1220=HEAP32[(($1219)>>2)];
 var $1224=$1220;label=491;break;
 case 490: 
 var $1222=($1215&255);
 var $1223=$1222>>>1;
 var $1224=$1223;label=491;break;
 case 491: 
 var $1224;
 var $1225=HEAP8[(($1175)>>0)];
 var $1226=$1225&1;
 var $1227=(($1226<<24)>>24)==0;
 if($1227){label=493;break;}else{label=492;break;}
 case 492: 
 var $1229=(($1+4)|0);
 var $1230=HEAP32[(($1229)>>2)];
 var $1234=$1230;label=494;break;
 case 493: 
 var $1232=($1225&255);
 var $1233=$1232>>>1;
 var $1234=$1233;label=494;break;
 case 494: 
 var $1234;
 var $1235=($1224|0)==($1234|0);
 if($1235){label=495;break;}else{var $1270=0;label=508;break;}
 case 495: 
 if($1217){label=497;break;}else{label=496;break;}
 case 496: 
 var $1238=(($s_i119+8)|0);
 var $1239=HEAP32[(($1238)>>2)];
 var $1243=$1239;label=498;break;
 case 497: 
 var $1241=$s_i119;
 var $1242=(($1241+1)|0);
 var $1243=$1242;label=498;break;
 case 498: 
 var $1243;
 if($1227){label=500;break;}else{label=499;break;}
 case 499: 
 var $1245=(($1+8)|0);
 var $1246=HEAP32[(($1245)>>2)];
 var $1250=$1246;label=501;break;
 case 500: 
 var $1248=$1;
 var $1249=(($1248+1)|0);
 var $1250=$1249;label=501;break;
 case 501: 
 var $1250;
 if($1217){var $__lhs_sz_i2_i110_0=$1224;var $__lp_i3_i111_0=$1243;var $__rp_i4_i112_0=$1250;label=505;break;}else{label=502;break;}
 case 502: 
 var $1252=($1224|0)==0;
 if($1252){var $1270=1;label=508;break;}else{var $_02_i_i_i139=$1224;var $l_03_i_i_i138=$1243;var $r_04_i_i_i137=$1250;label=503;break;}
 case 503: 
 var $r_04_i_i_i137;
 var $l_03_i_i_i138;
 var $_02_i_i_i139;
 var $1253=HEAP8[(($l_03_i_i_i138)>>0)];
 var $1254=HEAP8[(($r_04_i_i_i137)>>0)];
 var $1255=(($1253<<24)>>24)==(($1254<<24)>>24);
 if($1255){label=504;break;}else{var $1270=0;label=508;break;}
 case 504: 
 var $1257=((($_02_i_i_i139)-(1))|0);
 var $1258=(($l_03_i_i_i138+1)|0);
 var $1259=(($r_04_i_i_i137+1)|0);
 var $1260=($1257|0)==0;
 if($1260){var $1270=1;label=508;break;}else{var $_02_i_i_i139=$1257;var $l_03_i_i_i138=$1258;var $r_04_i_i_i137=$1259;label=503;break;}
 case 505: 
 var $__rp_i4_i112_0;
 var $__lp_i3_i111_0;
 var $__lhs_sz_i2_i110_0;
 var $1261=($__lhs_sz_i2_i110_0|0)==0;
 if($1261){var $1270=1;label=508;break;}else{label=506;break;}
 case 506: 
 var $1263=HEAP8[(($__lp_i3_i111_0)>>0)];
 var $1264=HEAP8[(($__rp_i4_i112_0)>>0)];
 var $1265=(($1263<<24)>>24)==(($1264<<24)>>24);
 if($1265){label=507;break;}else{var $1270=0;label=508;break;}
 case 507: 
 var $1267=((($__lhs_sz_i2_i110_0)-(1))|0);
 var $1268=(($__lp_i3_i111_0+1)|0);
 var $1269=(($__rp_i4_i112_0+1)|0);
 var $__lhs_sz_i2_i110_0=$1267;var $__lp_i3_i111_0=$1268;var $__rp_i4_i112_0=$1269;label=505;break;
 case 508: 
 var $1270;
 if($1227){label=510;break;}else{label=509;break;}
 case 509: 
 var $1272=(($1+8)|0);
 var $1273=HEAP32[(($1272)>>2)];
 _free($1273);
 label=510;break;
 case 510: 
 var $_366=($1270?8:0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=519;break; } else { label=516;break; }
 case 511: 
 var $lpad_loopexit275$0 = ___cxa_find_matching_catch(); var $lpad_loopexit275$1 = tempRet0;
 var $lpad_phi276$1=$lpad_loopexit275$1;var $lpad_phi276$0=$lpad_loopexit275$0;label=517;break;
 case 512: 
 var $lpad_loopexit278$0 = ___cxa_find_matching_catch(); var $lpad_loopexit278$1 = tempRet0;
 var $lpad_phi276$1=$lpad_loopexit278$1;var $lpad_phi276$0=$lpad_loopexit278$0;label=517;break;
 case 513: 
 var $lpad_loopexit282$0 = ___cxa_find_matching_catch(); var $lpad_loopexit282$1 = tempRet0;
 var $lpad_phi276$1=$lpad_loopexit282$1;var $lpad_phi276$0=$lpad_loopexit282$0;label=517;break;
 case 514: 
 var $lpad_loopexit285$0 = ___cxa_find_matching_catch(); var $lpad_loopexit285$1 = tempRet0;
 var $lpad_phi276$1=$lpad_loopexit285$1;var $lpad_phi276$0=$lpad_loopexit285$0;label=517;break;
 case 515: 
 var $lpad_loopexit289$0 = ___cxa_find_matching_catch(); var $lpad_loopexit289$1 = tempRet0;
 var $lpad_phi276$1=$lpad_loopexit289$1;var $lpad_phi276$0=$lpad_loopexit289$0;label=517;break;
 case 516: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi276$1=$lpad_nonloopexit$1;var $lpad_phi276$0=$lpad_nonloopexit$0;label=517;break;
 case 517: 
 var $lpad_phi276$0;
 var $lpad_phi276$1;
 var $1274=HEAP8[(($1174)>>0)];
 var $1275=$1274&1;
 var $1276=(($1275<<24)>>24)==0;
 if($1276){var $eh_lpad_body$1=$lpad_phi276$1;var $eh_lpad_body$0=$lpad_phi276$0;var $_pre_phi=$25;label=785;break;}else{label=518;break;}
 case 518: 
 var $1278=(($s_i119+8)|0);
 var $1279=HEAP32[(($1278)>>2)];
 _free($1279);
 var $eh_lpad_body$1=$lpad_phi276$1;var $eh_lpad_body$0=$lpad_phi276$0;var $_pre_phi=$25;label=785;break;
 case 519: 
 var $1280=_strlen(4152);
 var $1281=($1280>>>0)>4294967279;
 if($1281){label=520;break;}else{label=522;break;}
 case 520: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=521;break; } else { label=516;break; }
 case 521: 
 throw "Reached an unreachable!";
 case 522: 
 var $1284=($1280>>>0)<11;
 if($1284){label=523;break;}else{label=524;break;}
 case 523: 
 var $1286=$1280<<1;
 var $1287=(($1286)&255);
 HEAP8[(($1176)>>0)]=$1287;
 var $1288=$2;
 var $1289=(($1288+1)|0);
 var $__p_0_i10_i154=$1289;label=531;break;
 case 524: 
 var $1290=((($1280)+(16))|0);
 var $1291=$1290&-16;
 var $1292=($1291|0)==0;
 var $_size_i14_i147=($1292?1:$1291);
 var $1293=_malloc($_size_i14_i147);
 var $1294=($1293|0)==0;
 if($1294){label=525;break;}else{var $_lcssa_i16_i152=$1293;label=530;break;}
 case 525: 
 var $1295=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1296=($1295|0)==0;
 if($1296){label=528;break;}else{label=526;break;}
 case 526: 
 var $1298=$1295;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1298]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=527;break; } else { label=514;break; }
 case 527: 
 var $1299=_malloc($_size_i14_i147);
 var $1300=($1299|0)==0;
 if($1300){label=525;break;}else{var $_lcssa_i16_i152=$1299;label=530;break;}
 case 528: 
 var $1302=___cxa_allocate_exception(4);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1302,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=529;break; } else { label=516;break; }
 case 529: 
 throw "Reached an unreachable!";
 case 530: 
 var $_lcssa_i16_i152;
 var $1304=(($2+8)|0);
 HEAP32[(($1304)>>2)]=$_lcssa_i16_i152;
 var $1305=$1291|1;
 var $1306=(($2)|0);
 HEAP32[(($1306)>>2)]=$1305;
 var $1307=(($2+4)|0);
 HEAP32[(($1307)>>2)]=$1280;
 var $__p_0_i10_i154=$_lcssa_i16_i152;label=531;break;
 case 531: 
 var $__p_0_i10_i154;
 assert($1280 % 1 === 0);(_memcpy($__p_0_i10_i154, 4152, $1280)|0);
 var $1308=(($__p_0_i10_i154+$1280)|0);
 HEAP8[(($1308)>>0)]=0;
 var $1309=HEAP8[(($1174)>>0)];
 var $1310=$1309&1;
 var $1311=(($1310<<24)>>24)==0;
 if($1311){label=533;break;}else{label=532;break;}
 case 532: 
 var $1313=(($s_i119+4)|0);
 var $1314=HEAP32[(($1313)>>2)];
 var $1318=$1314;label=534;break;
 case 533: 
 var $1316=($1309&255);
 var $1317=$1316>>>1;
 var $1318=$1317;label=534;break;
 case 534: 
 var $1318;
 var $1319=HEAP8[(($1176)>>0)];
 var $1320=$1319&1;
 var $1321=(($1320<<24)>>24)==0;
 if($1321){label=536;break;}else{label=535;break;}
 case 535: 
 var $1323=(($2+4)|0);
 var $1324=HEAP32[(($1323)>>2)];
 var $1328=$1324;label=537;break;
 case 536: 
 var $1326=($1319&255);
 var $1327=$1326>>>1;
 var $1328=$1327;label=537;break;
 case 537: 
 var $1328;
 var $1329=($1318|0)==($1328|0);
 if($1329){label=538;break;}else{var $1364=0;label=551;break;}
 case 538: 
 if($1311){label=540;break;}else{label=539;break;}
 case 539: 
 var $1332=(($s_i119+8)|0);
 var $1333=HEAP32[(($1332)>>2)];
 var $1337=$1333;label=541;break;
 case 540: 
 var $1335=$s_i119;
 var $1336=(($1335+1)|0);
 var $1337=$1336;label=541;break;
 case 541: 
 var $1337;
 if($1321){label=543;break;}else{label=542;break;}
 case 542: 
 var $1339=(($2+8)|0);
 var $1340=HEAP32[(($1339)>>2)];
 var $1344=$1340;label=544;break;
 case 543: 
 var $1342=$2;
 var $1343=(($1342+1)|0);
 var $1344=$1343;label=544;break;
 case 544: 
 var $1344;
 if($1311){var $__lhs_sz_i13_i107_0=$1318;var $__lp_i14_i108_0=$1337;var $__rp_i15_i109_0=$1344;label=548;break;}else{label=545;break;}
 case 545: 
 var $1346=($1318|0)==0;
 if($1346){var $1364=1;label=551;break;}else{var $_02_i_i22_i162=$1318;var $l_03_i_i21_i161=$1337;var $r_04_i_i20_i160=$1344;label=546;break;}
 case 546: 
 var $r_04_i_i20_i160;
 var $l_03_i_i21_i161;
 var $_02_i_i22_i162;
 var $1347=HEAP8[(($l_03_i_i21_i161)>>0)];
 var $1348=HEAP8[(($r_04_i_i20_i160)>>0)];
 var $1349=(($1347<<24)>>24)==(($1348<<24)>>24);
 if($1349){label=547;break;}else{var $1364=0;label=551;break;}
 case 547: 
 var $1351=((($_02_i_i22_i162)-(1))|0);
 var $1352=(($l_03_i_i21_i161+1)|0);
 var $1353=(($r_04_i_i20_i160+1)|0);
 var $1354=($1351|0)==0;
 if($1354){var $1364=1;label=551;break;}else{var $_02_i_i22_i162=$1351;var $l_03_i_i21_i161=$1352;var $r_04_i_i20_i160=$1353;label=546;break;}
 case 548: 
 var $__rp_i15_i109_0;
 var $__lp_i14_i108_0;
 var $__lhs_sz_i13_i107_0;
 var $1355=($__lhs_sz_i13_i107_0|0)==0;
 if($1355){var $1364=1;label=551;break;}else{label=549;break;}
 case 549: 
 var $1357=HEAP8[(($__lp_i14_i108_0)>>0)];
 var $1358=HEAP8[(($__rp_i15_i109_0)>>0)];
 var $1359=(($1357<<24)>>24)==(($1358<<24)>>24);
 if($1359){label=550;break;}else{var $1364=0;label=551;break;}
 case 550: 
 var $1361=((($__lhs_sz_i13_i107_0)-(1))|0);
 var $1362=(($__lp_i14_i108_0+1)|0);
 var $1363=(($__rp_i15_i109_0+1)|0);
 var $__lhs_sz_i13_i107_0=$1361;var $__lp_i14_i108_0=$1362;var $__rp_i15_i109_0=$1363;label=548;break;
 case 551: 
 var $1364;
 if($1321){label=553;break;}else{label=552;break;}
 case 552: 
 var $1366=(($2+8)|0);
 var $1367=HEAP32[(($1366)>>2)];
 _free($1367);
 label=553;break;
 case 553: 
 var $1368=$_366|4;
 var $__366=($1364?$1368:$_366);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=554;break; } else { label=516;break; }
 case 554: 
 var $1369=_strlen(4056);
 var $1370=($1369>>>0)>4294967279;
 if($1370){label=555;break;}else{label=557;break;}
 case 555: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=556;break; } else { label=516;break; }
 case 556: 
 throw "Reached an unreachable!";
 case 557: 
 var $1373=($1369>>>0)<11;
 if($1373){label=558;break;}else{label=559;break;}
 case 558: 
 var $1375=$1369<<1;
 var $1376=(($1375)&255);
 HEAP8[(($1177)>>0)]=$1376;
 var $1377=$3;
 var $1378=(($1377+1)|0);
 var $__p_0_i29_i176=$1378;label=566;break;
 case 559: 
 var $1379=((($1369)+(16))|0);
 var $1380=$1379&-16;
 var $1381=($1380|0)==0;
 var $_size_i33_i169=($1381?1:$1380);
 var $1382=_malloc($_size_i33_i169);
 var $1383=($1382|0)==0;
 if($1383){label=560;break;}else{var $_lcssa_i35_i174=$1382;label=565;break;}
 case 560: 
 var $1384=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1385=($1384|0)==0;
 if($1385){label=563;break;}else{label=561;break;}
 case 561: 
 var $1387=$1384;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1387]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=562;break; } else { label=513;break; }
 case 562: 
 var $1388=_malloc($_size_i33_i169);
 var $1389=($1388|0)==0;
 if($1389){label=560;break;}else{var $_lcssa_i35_i174=$1388;label=565;break;}
 case 563: 
 var $1391=___cxa_allocate_exception(4);
 var $1392=$1391;
 HEAP32[(($1392)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1391,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=564;break; } else { label=516;break; }
 case 564: 
 throw "Reached an unreachable!";
 case 565: 
 var $_lcssa_i35_i174;
 var $1393=(($3+8)|0);
 HEAP32[(($1393)>>2)]=$_lcssa_i35_i174;
 var $1394=$1380|1;
 var $1395=(($3)|0);
 HEAP32[(($1395)>>2)]=$1394;
 var $1396=(($3+4)|0);
 HEAP32[(($1396)>>2)]=$1369;
 var $__p_0_i29_i176=$_lcssa_i35_i174;label=566;break;
 case 566: 
 var $__p_0_i29_i176;
 assert($1369 % 1 === 0);(_memcpy($__p_0_i29_i176, 4056, $1369)|0);
 var $1397=(($__p_0_i29_i176+$1369)|0);
 HEAP8[(($1397)>>0)]=0;
 var $1398=HEAP8[(($1174)>>0)];
 var $1399=$1398&1;
 var $1400=(($1399<<24)>>24)==0;
 if($1400){label=568;break;}else{label=567;break;}
 case 567: 
 var $1402=(($s_i119+4)|0);
 var $1403=HEAP32[(($1402)>>2)];
 var $1407=$1403;label=569;break;
 case 568: 
 var $1405=($1398&255);
 var $1406=$1405>>>1;
 var $1407=$1406;label=569;break;
 case 569: 
 var $1407;
 var $1408=HEAP8[(($1177)>>0)];
 var $1409=$1408&1;
 var $1410=(($1409<<24)>>24)==0;
 if($1410){label=571;break;}else{label=570;break;}
 case 570: 
 var $1412=(($3+4)|0);
 var $1413=HEAP32[(($1412)>>2)];
 var $1417=$1413;label=572;break;
 case 571: 
 var $1415=($1408&255);
 var $1416=$1415>>>1;
 var $1417=$1416;label=572;break;
 case 572: 
 var $1417;
 var $1418=($1407|0)==($1417|0);
 if($1418){label=573;break;}else{var $1453=0;label=586;break;}
 case 573: 
 if($1400){label=575;break;}else{label=574;break;}
 case 574: 
 var $1421=(($s_i119+8)|0);
 var $1422=HEAP32[(($1421)>>2)];
 var $1426=$1422;label=576;break;
 case 575: 
 var $1424=$s_i119;
 var $1425=(($1424+1)|0);
 var $1426=$1425;label=576;break;
 case 576: 
 var $1426;
 if($1410){label=578;break;}else{label=577;break;}
 case 577: 
 var $1428=(($3+8)|0);
 var $1429=HEAP32[(($1428)>>2)];
 var $1433=$1429;label=579;break;
 case 578: 
 var $1431=$3;
 var $1432=(($1431+1)|0);
 var $1433=$1432;label=579;break;
 case 579: 
 var $1433;
 if($1400){var $__lhs_sz_i24_i104_0=$1407;var $__lp_i25_i105_0=$1426;var $__rp_i26_i106_0=$1433;label=583;break;}else{label=580;break;}
 case 580: 
 var $1435=($1407|0)==0;
 if($1435){var $1453=1;label=586;break;}else{var $_02_i_i41_i184=$1407;var $l_03_i_i40_i183=$1426;var $r_04_i_i39_i182=$1433;label=581;break;}
 case 581: 
 var $r_04_i_i39_i182;
 var $l_03_i_i40_i183;
 var $_02_i_i41_i184;
 var $1436=HEAP8[(($l_03_i_i40_i183)>>0)];
 var $1437=HEAP8[(($r_04_i_i39_i182)>>0)];
 var $1438=(($1436<<24)>>24)==(($1437<<24)>>24);
 if($1438){label=582;break;}else{var $1453=0;label=586;break;}
 case 582: 
 var $1440=((($_02_i_i41_i184)-(1))|0);
 var $1441=(($l_03_i_i40_i183+1)|0);
 var $1442=(($r_04_i_i39_i182+1)|0);
 var $1443=($1440|0)==0;
 if($1443){var $1453=1;label=586;break;}else{var $_02_i_i41_i184=$1440;var $l_03_i_i40_i183=$1441;var $r_04_i_i39_i182=$1442;label=581;break;}
 case 583: 
 var $__rp_i26_i106_0;
 var $__lp_i25_i105_0;
 var $__lhs_sz_i24_i104_0;
 var $1444=($__lhs_sz_i24_i104_0|0)==0;
 if($1444){var $1453=1;label=586;break;}else{label=584;break;}
 case 584: 
 var $1446=HEAP8[(($__lp_i25_i105_0)>>0)];
 var $1447=HEAP8[(($__rp_i26_i106_0)>>0)];
 var $1448=(($1446<<24)>>24)==(($1447<<24)>>24);
 if($1448){label=585;break;}else{var $1453=0;label=586;break;}
 case 585: 
 var $1450=((($__lhs_sz_i24_i104_0)-(1))|0);
 var $1451=(($__lp_i25_i105_0+1)|0);
 var $1452=(($__rp_i26_i106_0+1)|0);
 var $__lhs_sz_i24_i104_0=$1450;var $__lp_i25_i105_0=$1451;var $__rp_i26_i106_0=$1452;label=583;break;
 case 586: 
 var $1453;
 if($1410){label=588;break;}else{label=587;break;}
 case 587: 
 var $1455=(($3+8)|0);
 var $1456=HEAP32[(($1455)>>2)];
 _free($1456);
 label=588;break;
 case 588: 
 var $1457=$__366|16;
 var $___366=($1453?$1457:$__366);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=589;break; } else { label=516;break; }
 case 589: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=590;break; } else { label=516;break; }
 case 590: 
 var $1459=_strlen(4024);
 var $1460=($1459>>>0)>4294967279;
 if($1460){label=591;break;}else{label=593;break;}
 case 591: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=592;break; } else { label=516;break; }
 case 592: 
 throw "Reached an unreachable!";
 case 593: 
 var $1463=($1459>>>0)<11;
 if($1463){label=594;break;}else{label=595;break;}
 case 594: 
 var $1465=$1459<<1;
 var $1466=(($1465)&255);
 HEAP8[(($1178)>>0)]=$1466;
 var $1467=$4;
 var $1468=(($1467+1)|0);
 var $__p_0_i48_i198=$1468;label=602;break;
 case 595: 
 var $1469=((($1459)+(16))|0);
 var $1470=$1469&-16;
 var $1471=($1470|0)==0;
 var $_size_i52_i191=($1471?1:$1470);
 var $1472=_malloc($_size_i52_i191);
 var $1473=($1472|0)==0;
 if($1473){label=596;break;}else{var $_lcssa_i54_i196=$1472;label=601;break;}
 case 596: 
 var $1474=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1475=($1474|0)==0;
 if($1475){label=599;break;}else{label=597;break;}
 case 597: 
 var $1477=$1474;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1477]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=598;break; } else { label=512;break; }
 case 598: 
 var $1478=_malloc($_size_i52_i191);
 var $1479=($1478|0)==0;
 if($1479){label=596;break;}else{var $_lcssa_i54_i196=$1478;label=601;break;}
 case 599: 
 var $1481=___cxa_allocate_exception(4);
 var $1482=$1481;
 HEAP32[(($1482)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1481,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=600;break; } else { label=516;break; }
 case 600: 
 throw "Reached an unreachable!";
 case 601: 
 var $_lcssa_i54_i196;
 var $1483=(($4+8)|0);
 HEAP32[(($1483)>>2)]=$_lcssa_i54_i196;
 var $1484=$1470|1;
 var $1485=(($4)|0);
 HEAP32[(($1485)>>2)]=$1484;
 var $1486=(($4+4)|0);
 HEAP32[(($1486)>>2)]=$1459;
 var $__p_0_i48_i198=$_lcssa_i54_i196;label=602;break;
 case 602: 
 var $__p_0_i48_i198;
 assert($1459 % 1 === 0);(_memcpy($__p_0_i48_i198, 4024, $1459)|0);
 var $1487=(($__p_0_i48_i198+$1459)|0);
 HEAP8[(($1487)>>0)]=0;
 var $1488=HEAP8[(($1174)>>0)];
 var $1489=$1488&1;
 var $1490=(($1489<<24)>>24)==0;
 if($1490){label=604;break;}else{label=603;break;}
 case 603: 
 var $1492=(($s_i119+4)|0);
 var $1493=HEAP32[(($1492)>>2)];
 var $1497=$1493;label=605;break;
 case 604: 
 var $1495=($1488&255);
 var $1496=$1495>>>1;
 var $1497=$1496;label=605;break;
 case 605: 
 var $1497;
 var $1498=HEAP8[(($1178)>>0)];
 var $1499=$1498&1;
 var $1500=(($1499<<24)>>24)==0;
 if($1500){label=607;break;}else{label=606;break;}
 case 606: 
 var $1502=(($4+4)|0);
 var $1503=HEAP32[(($1502)>>2)];
 var $1507=$1503;label=608;break;
 case 607: 
 var $1505=($1498&255);
 var $1506=$1505>>>1;
 var $1507=$1506;label=608;break;
 case 608: 
 var $1507;
 var $1508=($1497|0)==($1507|0);
 if($1508){label=609;break;}else{var $1543=0;label=622;break;}
 case 609: 
 if($1490){label=611;break;}else{label=610;break;}
 case 610: 
 var $1511=(($s_i119+8)|0);
 var $1512=HEAP32[(($1511)>>2)];
 var $1516=$1512;label=612;break;
 case 611: 
 var $1514=$s_i119;
 var $1515=(($1514+1)|0);
 var $1516=$1515;label=612;break;
 case 612: 
 var $1516;
 if($1500){label=614;break;}else{label=613;break;}
 case 613: 
 var $1518=(($4+8)|0);
 var $1519=HEAP32[(($1518)>>2)];
 var $1523=$1519;label=615;break;
 case 614: 
 var $1521=$4;
 var $1522=(($1521+1)|0);
 var $1523=$1522;label=615;break;
 case 615: 
 var $1523;
 if($1490){var $__lhs_sz_i35_i101_0=$1497;var $__lp_i36_i102_0=$1516;var $__rp_i37_i103_0=$1523;label=619;break;}else{label=616;break;}
 case 616: 
 var $1525=($1497|0)==0;
 if($1525){var $1543=1;label=622;break;}else{var $_02_i_i60_i206=$1497;var $l_03_i_i59_i205=$1516;var $r_04_i_i58_i204=$1523;label=617;break;}
 case 617: 
 var $r_04_i_i58_i204;
 var $l_03_i_i59_i205;
 var $_02_i_i60_i206;
 var $1526=HEAP8[(($l_03_i_i59_i205)>>0)];
 var $1527=HEAP8[(($r_04_i_i58_i204)>>0)];
 var $1528=(($1526<<24)>>24)==(($1527<<24)>>24);
 if($1528){label=618;break;}else{var $1543=0;label=622;break;}
 case 618: 
 var $1530=((($_02_i_i60_i206)-(1))|0);
 var $1531=(($l_03_i_i59_i205+1)|0);
 var $1532=(($r_04_i_i58_i204+1)|0);
 var $1533=($1530|0)==0;
 if($1533){var $1543=1;label=622;break;}else{var $_02_i_i60_i206=$1530;var $l_03_i_i59_i205=$1531;var $r_04_i_i58_i204=$1532;label=617;break;}
 case 619: 
 var $__rp_i37_i103_0;
 var $__lp_i36_i102_0;
 var $__lhs_sz_i35_i101_0;
 var $1534=($__lhs_sz_i35_i101_0|0)==0;
 if($1534){var $1543=1;label=622;break;}else{label=620;break;}
 case 620: 
 var $1536=HEAP8[(($__lp_i36_i102_0)>>0)];
 var $1537=HEAP8[(($__rp_i37_i103_0)>>0)];
 var $1538=(($1536<<24)>>24)==(($1537<<24)>>24);
 if($1538){label=621;break;}else{var $1543=0;label=622;break;}
 case 621: 
 var $1540=((($__lhs_sz_i35_i101_0)-(1))|0);
 var $1541=(($__lp_i36_i102_0+1)|0);
 var $1542=(($__rp_i37_i103_0+1)|0);
 var $__lhs_sz_i35_i101_0=$1540;var $__lp_i36_i102_0=$1541;var $__rp_i37_i103_0=$1542;label=619;break;
 case 622: 
 var $1543;
 if($1500){label=624;break;}else{label=623;break;}
 case 623: 
 var $1545=(($4+8)|0);
 var $1546=HEAP32[(($1545)>>2)];
 _free($1546);
 label=624;break;
 case 624: 
 var $1547=$___366|32;
 var $____366=($1543?$1547:$___366);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=625;break; } else { label=516;break; }
 case 625: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=626;break; } else { label=516;break; }
 case 626: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=627;break; } else { label=516;break; }
 case 627: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($s_i119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=628;break; } else { label=516;break; }
 case 628: 
 var $1551=_strlen(3904);
 var $1552=($1551>>>0)>4294967279;
 if($1552){label=629;break;}else{label=631;break;}
 case 629: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=630;break; } else { label=516;break; }
 case 630: 
 throw "Reached an unreachable!";
 case 631: 
 var $1555=($1551>>>0)<11;
 if($1555){label=632;break;}else{label=633;break;}
 case 632: 
 var $1557=$1551<<1;
 var $1558=(($1557)&255);
 HEAP8[(($1179)>>0)]=$1558;
 var $1559=$5;
 var $1560=(($1559+1)|0);
 var $__p_0_i67_i220=$1560;label=640;break;
 case 633: 
 var $1561=((($1551)+(16))|0);
 var $1562=$1561&-16;
 var $1563=($1562|0)==0;
 var $_size_i71_i213=($1563?1:$1562);
 var $1564=_malloc($_size_i71_i213);
 var $1565=($1564|0)==0;
 if($1565){label=634;break;}else{var $_lcssa_i73_i218=$1564;label=639;break;}
 case 634: 
 var $1566=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1567=($1566|0)==0;
 if($1567){label=637;break;}else{label=635;break;}
 case 635: 
 var $1569=$1566;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1569]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=636;break; } else { label=511;break; }
 case 636: 
 var $1570=_malloc($_size_i71_i213);
 var $1571=($1570|0)==0;
 if($1571){label=634;break;}else{var $_lcssa_i73_i218=$1570;label=639;break;}
 case 637: 
 var $1573=___cxa_allocate_exception(4);
 var $1574=$1573;
 HEAP32[(($1574)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1573,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=638;break; } else { label=516;break; }
 case 638: 
 throw "Reached an unreachable!";
 case 639: 
 var $_lcssa_i73_i218;
 var $1575=(($5+8)|0);
 HEAP32[(($1575)>>2)]=$_lcssa_i73_i218;
 var $1576=$1562|1;
 var $1577=(($5)|0);
 HEAP32[(($1577)>>2)]=$1576;
 var $1578=(($5+4)|0);
 HEAP32[(($1578)>>2)]=$1551;
 var $__p_0_i67_i220=$_lcssa_i73_i218;label=640;break;
 case 640: 
 var $__p_0_i67_i220;
 assert($1551 % 1 === 0);(_memcpy($__p_0_i67_i220, 3904, $1551)|0);
 var $1579=(($__p_0_i67_i220+$1551)|0);
 HEAP8[(($1579)>>0)]=0;
 var $1580=HEAP8[(($1174)>>0)];
 var $1581=$1580&1;
 var $1582=(($1581<<24)>>24)==0;
 if($1582){label=642;break;}else{label=641;break;}
 case 641: 
 var $1584=(($s_i119+4)|0);
 var $1585=HEAP32[(($1584)>>2)];
 var $1589=$1585;label=643;break;
 case 642: 
 var $1587=($1580&255);
 var $1588=$1587>>>1;
 var $1589=$1588;label=643;break;
 case 643: 
 var $1589;
 var $1590=HEAP8[(($1179)>>0)];
 var $1591=$1590&1;
 var $1592=(($1591<<24)>>24)==0;
 if($1592){label=645;break;}else{label=644;break;}
 case 644: 
 var $1594=(($5+4)|0);
 var $1595=HEAP32[(($1594)>>2)];
 var $1599=$1595;label=646;break;
 case 645: 
 var $1597=($1590&255);
 var $1598=$1597>>>1;
 var $1599=$1598;label=646;break;
 case 646: 
 var $1599;
 var $1600=($1589|0)==($1599|0);
 if($1600){label=647;break;}else{var $1635=0;label=660;break;}
 case 647: 
 if($1582){label=649;break;}else{label=648;break;}
 case 648: 
 var $1603=(($s_i119+8)|0);
 var $1604=HEAP32[(($1603)>>2)];
 var $1608=$1604;label=650;break;
 case 649: 
 var $1606=$s_i119;
 var $1607=(($1606+1)|0);
 var $1608=$1607;label=650;break;
 case 650: 
 var $1608;
 if($1592){label=652;break;}else{label=651;break;}
 case 651: 
 var $1610=(($5+8)|0);
 var $1611=HEAP32[(($1610)>>2)];
 var $1615=$1611;label=653;break;
 case 652: 
 var $1613=$5;
 var $1614=(($1613+1)|0);
 var $1615=$1614;label=653;break;
 case 653: 
 var $1615;
 if($1582){var $__lhs_sz_i_i113_0=$1589;var $__lp_i_i114_0=$1608;var $__rp_i_i115_0=$1615;label=657;break;}else{label=654;break;}
 case 654: 
 var $1617=($1589|0)==0;
 if($1617){var $1635=1;label=660;break;}else{var $_02_i_i79_i228=$1589;var $l_03_i_i78_i227=$1608;var $r_04_i_i77_i226=$1615;label=655;break;}
 case 655: 
 var $r_04_i_i77_i226;
 var $l_03_i_i78_i227;
 var $_02_i_i79_i228;
 var $1618=HEAP8[(($l_03_i_i78_i227)>>0)];
 var $1619=HEAP8[(($r_04_i_i77_i226)>>0)];
 var $1620=(($1618<<24)>>24)==(($1619<<24)>>24);
 if($1620){label=656;break;}else{var $1635=0;label=660;break;}
 case 656: 
 var $1622=((($_02_i_i79_i228)-(1))|0);
 var $1623=(($l_03_i_i78_i227+1)|0);
 var $1624=(($r_04_i_i77_i226+1)|0);
 var $1625=($1622|0)==0;
 if($1625){var $1635=1;label=660;break;}else{var $_02_i_i79_i228=$1622;var $l_03_i_i78_i227=$1623;var $r_04_i_i77_i226=$1624;label=655;break;}
 case 657: 
 var $__rp_i_i115_0;
 var $__lp_i_i114_0;
 var $__lhs_sz_i_i113_0;
 var $1626=($__lhs_sz_i_i113_0|0)==0;
 if($1626){var $1635=1;label=660;break;}else{label=658;break;}
 case 658: 
 var $1628=HEAP8[(($__lp_i_i114_0)>>0)];
 var $1629=HEAP8[(($__rp_i_i115_0)>>0)];
 var $1630=(($1628<<24)>>24)==(($1629<<24)>>24);
 if($1630){label=659;break;}else{var $1635=0;label=660;break;}
 case 659: 
 var $1632=((($__lhs_sz_i_i113_0)-(1))|0);
 var $1633=(($__lp_i_i114_0+1)|0);
 var $1634=(($__rp_i_i115_0+1)|0);
 var $__lhs_sz_i_i113_0=$1632;var $__lp_i_i114_0=$1633;var $__rp_i_i115_0=$1634;label=657;break;
 case 660: 
 var $1635;
 if($1592){label=662;break;}else{label=661;break;}
 case 661: 
 var $1637=(($5+8)|0);
 var $1638=HEAP32[(($1637)>>2)];
 _free($1638);
 label=662;break;
 case 662: 
 var $1639=$____366|65536;
 var $_____366=($1635?$1639:$____366);
 var $1640=HEAP8[(($1174)>>0)];
 var $1641=$1640&1;
 var $1642=(($1641<<24)>>24)==0;
 if($1642){label=664;break;}else{label=663;break;}
 case 663: 
 var $1644=(($s_i119+8)|0);
 var $1645=HEAP32[(($1644)>>2)];
 _free($1645);
 label=664;break;
 case 664: 
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 var $1647=HEAP32[(($mask)>>2)];
 var $1648=$1647|$_____366;
 HEAP32[(($mask)>>2)]=$1648;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=665;break; } else { label=136;break; }
 case 665: 
 var $1650=$vertSize;
 var $1651=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($1650,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=666;break; } else { label=136;break; }
 case 666: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=667;break; } else { label=136;break; }
 case 667: 
 var $1652=$float_value;
 var $storemerge3=0;label=668;break;
 case 668: 
 var $storemerge3;
 var $1654=($storemerge3>>>0)<2;
 if($1654){label=669;break;}else{var $storemerge4=0;label=674;break;}
 case 669: 
 var $1656=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($1652,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=670;break; } else { label=129;break; }
 case 670: 
 var $1657=HEAPF32[(($float_value)>>2)];
 var $1658=($storemerge3|0)>-1;
 var $1659=($storemerge3|0)<3;
 var $or_cond=$1658&$1659;
 if($or_cond){label=673;break;}else{label=671;break;}
 case 671: 
 (function() { try { __THREW__ = 0; return ___assert_fail(10200,9640,220,1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=672;break; } else { label=136;break; }
 case 672: 
 throw "Reached an unreachable!";
 case 673: 
 var $1662=(($bbox+($storemerge3<<2))|0);
 HEAPF32[(($1662)>>2)]=$1657;
 var $1663=((($storemerge3)+(1))|0);
 var $storemerge3=$1663;label=668;break;
 case 674: 
 var $storemerge4;
 var $1664=($storemerge4>>>0)<2;
 if($1664){label=675;break;}else{label=680;break;}
 case 675: 
 var $1666=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($1652,1,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=676;break; } else { label=128;break; }
 case 676: 
 var $1667=HEAPF32[(($float_value)>>2)];
 var $1668=($storemerge4|0)>-1;
 var $1669=($storemerge4|0)<3;
 var $or_cond367=$1668&$1669;
 if($or_cond367){label=679;break;}else{label=677;break;}
 case 677: 
 (function() { try { __THREW__ = 0; return ___assert_fail(10200,9640,220,1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=678;break; } else { label=136;break; }
 case 678: 
 throw "Reached an unreachable!";
 case 679: 
 var $1672=(($bbox+12+($storemerge4<<2))|0);
 HEAPF32[(($1672)>>2)]=$1667;
 var $1673=((($storemerge4)+(1))|0);
 var $storemerge4=$1673;label=674;break;
 case 680: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($name) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=681;break; } else { label=136;break; }
 case 681: 
 var $1676=HEAP8[(($25)>>0)];
 var $1677=$1676&1;
 var $1678=(($1677<<24)>>24)==0;
 if($1678){label=683;break;}else{label=682;break;}
 case 682: 
 var $1680=HEAP32[(($31)>>2)];
 var $1684=$1680;label=684;break;
 case 683: 
 var $1682=$name;
 var $1683=(($1682+1)|0);
 var $1684=$1683;label=684;break;
 case 684: 
 var $1684;
 var $1685=$1684;
 var $1686=$1685&3;
 var $1687=($1686|0)==0;
 if($1687){var $_01_lcssa_i_i=$1684;label=687;break;}else{var $_019_i_i=$1684;label=686;break;}
 case 685: 
 var $1689=$1693;
 var $1690=$1689&3;
 var $1691=($1690|0)==0;
 if($1691){var $_01_lcssa_i_i=$1693;label=687;break;}else{var $_019_i_i=$1693;label=686;break;}
 case 686: 
 var $_019_i_i;
 var $1692=HEAP8[(($_019_i_i)>>0)];
 var $1693=(($_019_i_i+1)|0);
 if((($1692<<24)>>24)==101|(($1692<<24)>>24)==0){ var $_0_i_i=$_019_i_i;var $1720=$1692;label=692;break;}else{label=685;break;}
 case 687: 
 var $_01_lcssa_i_i;
 var $1694=$_01_lcssa_i_i;
 var $1695=HEAP32[(($1694)>>2)];
 var $1696=((($1695)-(16843009))|0);
 var $1697=$1695&-2139062144;
 var $1698=$1697^-2139062144;
 var $1699=$1698&$1696;
 var $1700=($1699|0)==0;
 if($1700){var $w_05_i_i=$1694;var $1708=$1695;label=689;break;}else{var $w_0_lcssa_i_i=$1694;label=690;break;}
 case 688: 
 var $1702=HEAP32[(($1715)>>2)];
 var $1703=((($1702)-(16843009))|0);
 var $1704=$1702&-2139062144;
 var $1705=$1704^-2139062144;
 var $1706=$1705&$1703;
 var $1707=($1706|0)==0;
 if($1707){var $w_05_i_i=$1715;var $1708=$1702;label=689;break;}else{var $w_0_lcssa_i_i=$1715;label=690;break;}
 case 689: 
 var $1708;
 var $w_05_i_i;
 var $1709=$1708^1701143909;
 var $1710=((($1709)-(16843009))|0);
 var $1711=$1708&-2139062144;
 var $1712=$1711^-2139062144;
 var $1713=$1712&$1710;
 var $1714=($1713|0)==0;
 var $1715=(($w_05_i_i+4)|0);
 if($1714){label=688;break;}else{var $w_0_lcssa_i_i=$w_05_i_i;label=690;break;}
 case 690: 
 var $w_0_lcssa_i_i;
 var $1716=$w_0_lcssa_i_i;
 var $_1_i_i=$1716;label=691;break;
 case 691: 
 var $_1_i_i;
 var $1718=HEAP8[(($_1_i_i)>>0)];
 var $1719=(($_1_i_i+1)|0);
 if((($1718<<24)>>24)==101|(($1718<<24)>>24)==0){ var $_0_i_i=$_1_i_i;var $1720=$1718;label=692;break;}else{var $_1_i_i=$1719;label=691;break;}
 case 692: 
 var $1720;
 var $_0_i_i;
 var $1721=(($1720<<24)>>24)==101;
 var $1722=($1721?$_0_i_i:0);
 var $1723=($1722|0)==0;
 if($1723){label=780;break;}else{label=693;break;}
 case 693: 
 var $1725=(($1722+1)|0);
 var $1726=HEAP8[(($1725)>>0)];
 var $1727=(($1726<<24)>>24)==0;
 if($1727){label=780;break;}else{label=694;break;}
 case 694: 
 var $1729=(($1722+2)|0);
 var $1730=HEAP8[(($1729)>>0)];
 var $1731=(($1730<<24)>>24)==0;
 if($1731){label=780;break;}else{label=695;break;}
 case 695: 
 var $1733=(($1722+3)|0);
 var $1734=HEAP8[(($1733)>>0)];
 var $1735=(($1734<<24)>>24)==0;
 if($1735){label=780;break;}else{label=696;break;}
 case 696: 
 var $1737=$byteset_i_i;
 var $$etemp$26$0=32;
 var $$etemp$26$1=0;

 _memset($1737, 0, 32)|0;
 var $1738=$shift_i_i;
 var $$etemp$27$0=1024;
 var $$etemp$27$1=0;

 var $l_040_i_i=0;var $1739=101;label=697;break;
 case 697: 
 var $1739;
 var $l_040_i_i;
 var $1740=(($1722+$l_040_i_i)|0);
 var $1741=HEAP8[(($1740)>>0)];
 var $1742=(($1741<<24)>>24)==0;
 if($1742){label=780;break;}else{label=698;break;}
 case 698: 
 var $1744=$1739&31;
 var $1745=($1744&255);
 var $1746=1<<$1745;
 var $div3_i_i=($1739&255)>>>5;
 var $1747=($div3_i_i&255);
 var $1748=(($byteset_i_i+($1747<<2))|0);
 var $1749=HEAP32[(($1748)>>2)];
 var $1750=$1749|$1746;
 HEAP32[(($1748)>>2)]=$1750;
 var $1751=((($l_040_i_i)+(1))|0);
 var $1752=($1739&255);
 var $1753=(($shift_i_i+($1752<<2))|0);
 HEAP32[(($1753)>>2)]=$1751;
 var $1754=((4392+$1751)|0);
 var $1755=HEAP8[(($1754)>>0)];
 var $1756=($1751|0)==10;
 if($1756){var $ip_0_ph80_i_i=-1;var $jp_0_ph81_i_i=0;var $1757=1;label=699;break;}else{var $l_040_i_i=$1751;var $1739=$1755;label=697;break;}
 case 699: 
 var $1757;
 var $jp_0_ph81_i_i;
 var $ip_0_ph80_i_i;
 var $jp_0_ph24_ph71_i_i=$jp_0_ph81_i_i;var $p_0_ph_ph72_i_i=1;var $1760=$1757;label=701;break;
 case 700: 
 var $1758=((($1765)+(1))|0);
 var $1759=($1758>>>0)<10;
 if($1759){var $jp_0_ph24_ph71_i_i=$1765;var $p_0_ph_ph72_i_i=$1780;var $1760=$1758;label=701;break;}else{var $p_0_ph_ph69_i_i=$1780;var $ip_0_ph77_i_i=$ip_0_ph80_i_i;label=704;break;}
 case 701: 
 var $1760;
 var $p_0_ph_ph72_i_i;
 var $jp_0_ph24_ph71_i_i;
 var $jp_0_ph2465_i_i=$jp_0_ph24_ph71_i_i;var $1761=$1760;label=702;break;
 case 702: 
 var $1761;
 var $jp_0_ph2465_i_i;
 var $k_032_i_i=1;var $1765=$1761;label=705;break;
 case 703: 
 var $1762=((($1774)+($jp_0_ph2465_i_i))|0);
 var $1763=($1762>>>0)<10;
 if($1763){var $k_032_i_i=$1774;var $1765=$1762;label=705;break;}else{var $p_0_ph_ph69_i_i=$p_0_ph_ph72_i_i;var $ip_0_ph77_i_i=$ip_0_ph80_i_i;label=704;break;}
 case 704: 
 var $ip_0_ph77_i_i;
 var $p_0_ph_ph69_i_i;
 var $ip_1_ph60_i_i=-1;var $jp_1_ph61_i_i=0;var $1811=1;label=719;break;
 case 705: 
 var $1765;
 var $k_032_i_i;
 var $1766=((($k_032_i_i)+($ip_0_ph80_i_i))|0);
 var $1767=((4392+$1766)|0);
 var $1768=HEAP8[(($1767)>>0)];
 var $1769=((4392+$1765)|0);
 var $1770=HEAP8[(($1769)>>0)];
 var $1771=(($1768<<24)>>24)==(($1770<<24)>>24);
 if($1771){label=706;break;}else{label=708;break;}
 case 706: 
 var $1773=($k_032_i_i|0)==($p_0_ph_ph72_i_i|0);
 var $1774=((($k_032_i_i)+(1))|0);
 if($1773){label=707;break;}else{label=703;break;}
 case 707: 
 var $1775=((($jp_0_ph2465_i_i)+($p_0_ph_ph72_i_i))|0);
 var $1776=((($1775)+(1))|0);
 var $1777=($1776>>>0)<10;
 if($1777){var $jp_0_ph2465_i_i=$1775;var $1761=$1776;label=702;break;}else{var $p_0_ph_ph69_i_i=$p_0_ph_ph72_i_i;var $ip_0_ph77_i_i=$ip_0_ph80_i_i;label=704;break;}
 case 708: 
 var $1779=($1768&255)>($1770&255);
 var $1780=((($1765)-($ip_0_ph80_i_i))|0);
 if($1779){label=700;break;}else{label=709;break;}
 case 709: 
 var $1781=((($jp_0_ph2465_i_i)+(1))|0);
 var $1782=((($jp_0_ph2465_i_i)+(2))|0);
 var $1783=($1782>>>0)<10;
 if($1783){var $ip_0_ph80_i_i=$jp_0_ph2465_i_i;var $jp_0_ph81_i_i=$1781;var $1757=$1782;label=699;break;}else{var $p_0_ph_ph69_i_i=1;var $ip_0_ph77_i_i=$jp_0_ph2465_i_i;label=704;break;}
 case 710: 
 var $1785=((($1797)+($jp_1_ph1545_i_i))|0);
 var $1786=($1785>>>0)<10;
 if($1786){var $k_121_i_i=$1797;var $1788=$1785;label=711;break;}else{var $p_1_ph_ph49_i_i=$p_1_ph_ph52_i_i;var $ip_1_ph57_i_i=$ip_1_ph60_i_i;label=720;break;}
 case 711: 
 var $1788;
 var $k_121_i_i;
 var $1789=((($k_121_i_i)+($ip_1_ph60_i_i))|0);
 var $1790=((4392+$1789)|0);
 var $1791=HEAP8[(($1790)>>0)];
 var $1792=((4392+$1788)|0);
 var $1793=HEAP8[(($1792)>>0)];
 var $1794=(($1791<<24)>>24)==(($1793<<24)>>24);
 if($1794){label=712;break;}else{label=715;break;}
 case 712: 
 var $1796=($k_121_i_i|0)==($p_1_ph_ph52_i_i|0);
 var $1797=((($k_121_i_i)+(1))|0);
 if($1796){label=713;break;}else{label=710;break;}
 case 713: 
 var $1798=((($jp_1_ph1545_i_i)+($p_1_ph_ph52_i_i))|0);
 var $1799=((($1798)+(1))|0);
 var $1800=($1799>>>0)<10;
 if($1800){var $jp_1_ph1545_i_i=$1798;var $1801=$1799;label=714;break;}else{var $p_1_ph_ph49_i_i=$p_1_ph_ph52_i_i;var $ip_1_ph57_i_i=$ip_1_ph60_i_i;label=720;break;}
 case 714: 
 var $1801;
 var $jp_1_ph1545_i_i;
 var $k_121_i_i=1;var $1788=$1801;label=711;break;
 case 715: 
 var $1803=($1791&255)<($1793&255);
 var $1804=((($1788)-($ip_1_ph60_i_i))|0);
 if($1803){label=716;break;}else{label=718;break;}
 case 716: 
 var $1805=((($1788)+(1))|0);
 var $1806=($1805>>>0)<10;
 if($1806){var $jp_1_ph15_ph51_i_i=$1788;var $p_1_ph_ph52_i_i=$1804;var $1807=$1805;label=717;break;}else{var $p_1_ph_ph49_i_i=$1804;var $ip_1_ph57_i_i=$ip_1_ph60_i_i;label=720;break;}
 case 717: 
 var $1807;
 var $p_1_ph_ph52_i_i;
 var $jp_1_ph15_ph51_i_i;
 var $jp_1_ph1545_i_i=$jp_1_ph15_ph51_i_i;var $1801=$1807;label=714;break;
 case 718: 
 var $1808=((($jp_1_ph1545_i_i)+(1))|0);
 var $1809=((($jp_1_ph1545_i_i)+(2))|0);
 var $1810=($1809>>>0)<10;
 if($1810){var $ip_1_ph60_i_i=$jp_1_ph1545_i_i;var $jp_1_ph61_i_i=$1808;var $1811=$1809;label=719;break;}else{var $p_1_ph_ph49_i_i=1;var $ip_1_ph57_i_i=$jp_1_ph1545_i_i;label=720;break;}
 case 719: 
 var $1811;
 var $jp_1_ph61_i_i;
 var $ip_1_ph60_i_i;
 var $jp_1_ph15_ph51_i_i=$jp_1_ph61_i_i;var $p_1_ph_ph52_i_i=1;var $1807=$1811;label=717;break;
 case 720: 
 var $ip_1_ph57_i_i;
 var $p_1_ph_ph49_i_i;
 var $1812=((($ip_1_ph57_i_i)+(1))|0);
 var $1813=((($ip_0_ph77_i_i)+(1))|0);
 var $1814=($1812>>>0)>($1813>>>0);
 var $p_1_p_0_i_i=($1814?$p_1_ph_ph49_i_i:$p_0_ph_ph69_i_i);
 var $ip_1_ip_0_i_i=($1814?$ip_1_ph57_i_i:$ip_0_ph77_i_i);
 var $1815=((($ip_1_ip_0_i_i)+(1))|0);
 var $1816=($1815|0)==0;
 if($1816){label=725;break;}else{label=721;break;}
 case 721: 
 var $1817=((4392+$p_1_p_0_i_i)|0);
 var $_02_i_i=$1815;var $l_03_i_i=4392;var $r_04_i_i=$1817;label=722;break;
 case 722: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $1818=HEAP8[(($l_03_i_i)>>0)];
 var $1819=HEAP8[(($r_04_i_i)>>0)];
 var $1820=(($1818<<24)>>24)==(($1819<<24)>>24);
 if($1820){label=723;break;}else{label=724;break;}
 case 723: 
 var $1822=((($_02_i_i)-(1))|0);
 var $1823=(($l_03_i_i+1)|0);
 var $1824=(($r_04_i_i+1)|0);
 var $1825=($1822|0)==0;
 if($1825){label=725;break;}else{var $_02_i_i=$1822;var $l_03_i_i=$1823;var $r_04_i_i=$1824;label=722;break;}
 case 724: 
 var $1826=(((10)-($ip_1_ip_0_i_i))|0);
 var $1827=((($1826)-(1))|0);
 var $1828=($ip_1_ip_0_i_i>>>0)>($1827>>>0);
 var $ip_1_ip_0__i_i=($1828?$ip_1_ip_0_i_i:$1827);
 var $1829=((($ip_1_ip_0__i_i)+(1))|0);
 var $p_3151_i_i=$1829;label=726;break;
 case 725: 
 var $1830=(((10)-($p_1_p_0_i_i))|0);
 var $1831=($p_1_p_0_i_i|0)==10;
 if($1831){var $p_3151_i_i=10;label=726;break;}else{var $_02_us_i_i=$1722;var $mem_0_us_i_i=0;var $z_0_us_i_i=$1722;label=727;break;}
 case 726: 
 var $p_3151_i_i;
 var $1832=($1815|0)==10;
 var $_02_i4_i=$1722;var $z_0_i_i=$1722;label=753;break;
 case 727: 
 var $z_0_us_i_i;
 var $mem_0_us_i_i;
 var $_02_us_i_i;
 var $1833=$z_0_us_i_i;
 var $1834=$_02_us_i_i;
 var $1835=((($1833)-($1834))|0);
 var $1836=($1835>>>0)<10;
 if($1836){label=728;break;}else{var $z_1_us_i_i=$z_0_us_i_i;label=742;break;}
 case 728: 
 var $1838=$1833&3;
 var $1839=($1838|0)==0;
 if($1839){var $s_0_lcssa35_i14_i=$z_0_us_i_i;var $_0_lcssa36_i13_i=63;label=732;break;}else{var $_012_i7_i=63;var $s_013_i6_i=$z_0_us_i_i;label=729;break;}
 case 729: 
 var $s_013_i6_i;
 var $_012_i7_i;
 var $1840=HEAP8[(($s_013_i6_i)>>0)];
 var $1841=(($1840<<24)>>24)==0;
 if($1841){var $s_0_lcssa35_i14_i=$s_013_i6_i;var $_0_lcssa36_i13_i=$_012_i7_i;label=732;break;}else{label=730;break;}
 case 730: 
 var $1843=(($s_013_i6_i+1)|0);
 var $1844=((($_012_i7_i)-(1))|0);
 var $1845=$1843;
 var $1846=$1845&3;
 var $1847=($1846|0)!=0;
 var $1848=($1844|0)!=0;
 var $or_cond_i8_i=$1847&$1848;
 if($or_cond_i8_i){var $_012_i7_i=$1844;var $s_013_i6_i=$1843;label=729;break;}else{label=731;break;}
 case 731: 
 if($1848){var $s_0_lcssa35_i14_i=$1843;var $_0_lcssa36_i13_i=$1844;label=732;break;}else{var $s_2_i26_i=$1843;var $_3_i25_i=0;label=739;break;}
 case 732: 
 var $_0_lcssa36_i13_i;
 var $s_0_lcssa35_i14_i;
 var $1849=HEAP8[(($s_0_lcssa35_i14_i)>>0)];
 var $1850=(($1849<<24)>>24)==0;
 if($1850){var $s_2_i26_i=$s_0_lcssa35_i14_i;var $_3_i25_i=$_0_lcssa36_i13_i;label=739;break;}else{label=733;break;}
 case 733: 
 var $1852=$s_0_lcssa35_i14_i;
 var $1853=($_0_lcssa36_i13_i>>>0)>3;
 if($1853){var $_15_i17_i=$_0_lcssa36_i13_i;var $w_06_i16_i=$1852;label=734;break;}else{var $_1_lcssa_i20_i=$_0_lcssa36_i13_i;var $w_0_lcssa_i19_i=$1852;label=736;break;}
 case 734: 
 var $w_06_i16_i;
 var $_15_i17_i;
 var $1854=HEAP32[(($w_06_i16_i)>>2)];
 var $1855=((($1854)-(16843009))|0);
 var $1856=$1854&-2139062144;
 var $1857=$1856^-2139062144;
 var $1858=$1857&$1855;
 var $1859=($1858|0)==0;
 if($1859){label=735;break;}else{var $_1_lcssa_i20_i=$_15_i17_i;var $w_0_lcssa_i19_i=$w_06_i16_i;label=736;break;}
 case 735: 
 var $1861=(($w_06_i16_i+4)|0);
 var $1862=((($_15_i17_i)-(4))|0);
 var $1863=($1862>>>0)>3;
 if($1863){var $_15_i17_i=$1862;var $w_06_i16_i=$1861;label=734;break;}else{var $_1_lcssa_i20_i=$1862;var $w_0_lcssa_i19_i=$1861;label=736;break;}
 case 736: 
 var $w_0_lcssa_i19_i;
 var $_1_lcssa_i20_i;
 var $1864=$w_0_lcssa_i19_i;
 var $1865=($_1_lcssa_i20_i|0)==0;
 if($1865){var $s_2_i26_i=$1864;var $_3_i25_i=0;label=739;break;}else{var $_22_i23_i=$_1_lcssa_i20_i;var $s_13_i22_i=$1864;label=737;break;}
 case 737: 
 var $s_13_i22_i;
 var $_22_i23_i;
 var $1866=HEAP8[(($s_13_i22_i)>>0)];
 var $1867=(($1866<<24)>>24)==0;
 if($1867){var $s_2_i26_i=$s_13_i22_i;var $_3_i25_i=$_22_i23_i;label=739;break;}else{label=738;break;}
 case 738: 
 var $1869=(($s_13_i22_i+1)|0);
 var $1870=((($_22_i23_i)-(1))|0);
 var $1871=($1870|0)==0;
 if($1871){var $s_2_i26_i=$1869;var $_3_i25_i=0;label=739;break;}else{var $_22_i23_i=$1870;var $s_13_i22_i=$1869;label=737;break;}
 case 739: 
 var $_3_i25_i;
 var $s_2_i26_i;
 var $1872=($_3_i25_i|0)!=0;
 var $1873=($1872?$s_2_i26_i:0);
 var $1874=($1873|0)==0;
 if($1874){label=741;break;}else{label=740;break;}
 case 740: 
 var $1876=$1873;
 var $1877=((($1876)-($1834))|0);
 var $1878=($1877>>>0)<10;
 if($1878){label=780;break;}else{var $z_1_us_i_i=$1873;label=742;break;}
 case 741: 
 var $1880=(($z_0_us_i_i+63)|0);
 var $z_1_us_i_i=$1880;label=742;break;
 case 742: 
 var $z_1_us_i_i;
 var $1882=(($_02_us_i_i+$l_040_i_i)|0);
 var $1883=HEAP8[(($1882)>>0)];
 var $div_us_i_i=($1883&255)>>>5;
 var $1884=($div_us_i_i&255);
 var $1885=(($byteset_i_i+($1884<<2))|0);
 var $1886=HEAP32[(($1885)>>2)];
 var $1887=$1883&31;
 var $1888=($1887&255);
 var $1889=1<<$1888;
 var $1890=$1889&$1886;
 var $1891=($1890|0)==0;
 if($1891){label=752;break;}else{label=743;break;}
 case 743: 
 var $1893=($1883&255);
 var $1894=(($shift_i_i+($1893<<2))|0);
 var $1895=HEAP32[(($1894)>>2)];
 var $1896=(((10)-($1895))|0);
 var $1897=($1895|0)==10;
 if($1897){label=745;break;}else{label=744;break;}
 case 744: 
 var $1899=($mem_0_us_i_i|0)!=0;
 var $1900=($1896>>>0)<($p_1_p_0_i_i>>>0);
 var $or_cond4_us_i_i=$1899&$1900;
 var $k_2_us_i_i=($or_cond4_us_i_i?$1830:$1896);
 var $1901=(($_02_us_i_i+$k_2_us_i_i)|0);
 var $_02_us_i_i=$1901;var $mem_0_us_i_i=0;var $z_0_us_i_i=$z_1_us_i_i;label=727;break;
 case 745: 
 var $1903=($1815>>>0)>($mem_0_us_i_i>>>0);
 var $_mem_0_us_i_i=($1903?$1815:$mem_0_us_i_i);
 var $1904=($_mem_0_us_i_i|0)==10;
 if($1904){var $k_4_us_i_i=$1815;label=749;break;}else{var $_pn1_i=$_mem_0_us_i_i;label=747;break;}
 case 746: 
 var $1906=($1910|0)==10;
 if($1906){var $k_4_us_i_i=$1815;label=749;break;}else{var $_pn1_i=$1910;label=747;break;}
 case 747: 
 var $_pn1_i;
 var $_pr5_us_i_in_i=((4392+$_pn1_i)|0);
 var $_pr5_us_i_i=HEAP8[(($_pr5_us_i_in_i)>>0)];
 var $1907=(($_02_us_i_i+$_pn1_i)|0);
 var $1908=HEAP8[(($1907)>>0)];
 var $1909=(($_pr5_us_i_i<<24)>>24)==(($1908<<24)>>24);
 var $1910=((($_pn1_i)+(1))|0);
 if($1909){label=746;break;}else{label=748;break;}
 case 748: 
 var $1912=((($_pn1_i)-($ip_1_ip_0_i_i))|0);
 var $1913=(($_02_us_i_i+$1912)|0);
 var $_02_us_i_i=$1913;var $mem_0_us_i_i=0;var $z_0_us_i_i=$z_1_us_i_i;label=727;break;
 case 749: 
 var $k_4_us_i_i;
 var $1914=($k_4_us_i_i>>>0)>($mem_0_us_i_i>>>0);
 if($1914){label=750;break;}else{var $_0_i=$_02_us_i_i;label=779;break;}
 case 750: 
 var $1916=((($k_4_us_i_i)-(1))|0);
 var $1917=((4392+$1916)|0);
 var $1918=HEAP8[(($1917)>>0)];
 var $1919=(($_02_us_i_i+$1916)|0);
 var $1920=HEAP8[(($1919)>>0)];
 var $1921=(($1918<<24)>>24)==(($1920<<24)>>24);
 if($1921){var $k_4_us_i_i=$1916;label=749;break;}else{label=751;break;}
 case 751: 
 var $1923=(($_02_us_i_i+$p_1_p_0_i_i)|0);
 var $_02_us_i_i=$1923;var $mem_0_us_i_i=$1830;var $z_0_us_i_i=$z_1_us_i_i;label=727;break;
 case 752: 
 var $1925=(($_02_us_i_i+10)|0);
 var $_02_us_i_i=$1925;var $mem_0_us_i_i=0;var $z_0_us_i_i=$z_1_us_i_i;label=727;break;
 case 753: 
 var $z_0_i_i;
 var $_02_i4_i;
 var $1926=$z_0_i_i;
 var $1927=$_02_i4_i;
 var $1928=((($1926)-($1927))|0);
 var $1929=($1928>>>0)<10;
 if($1929){label=754;break;}else{var $z_1_i_i=$z_0_i_i;label=768;break;}
 case 754: 
 var $1931=$1926&3;
 var $1932=($1931|0)==0;
 if($1932){var $s_0_lcssa35_i_i=$z_0_i_i;var $_0_lcssa36_i_i=63;label=758;break;}else{var $_012_i_i=63;var $s_013_i_i=$z_0_i_i;label=755;break;}
 case 755: 
 var $s_013_i_i;
 var $_012_i_i;
 var $1933=HEAP8[(($s_013_i_i)>>0)];
 var $1934=(($1933<<24)>>24)==0;
 if($1934){var $s_0_lcssa35_i_i=$s_013_i_i;var $_0_lcssa36_i_i=$_012_i_i;label=758;break;}else{label=756;break;}
 case 756: 
 var $1936=(($s_013_i_i+1)|0);
 var $1937=((($_012_i_i)-(1))|0);
 var $1938=$1936;
 var $1939=$1938&3;
 var $1940=($1939|0)!=0;
 var $1941=($1937|0)!=0;
 var $or_cond_i2_i=$1940&$1941;
 if($or_cond_i2_i){var $_012_i_i=$1937;var $s_013_i_i=$1936;label=755;break;}else{label=757;break;}
 case 757: 
 if($1941){var $s_0_lcssa35_i_i=$1936;var $_0_lcssa36_i_i=$1937;label=758;break;}else{var $s_2_i_i=$1936;var $_3_i_i=0;label=765;break;}
 case 758: 
 var $_0_lcssa36_i_i;
 var $s_0_lcssa35_i_i;
 var $1942=HEAP8[(($s_0_lcssa35_i_i)>>0)];
 var $1943=(($1942<<24)>>24)==0;
 if($1943){var $s_2_i_i=$s_0_lcssa35_i_i;var $_3_i_i=$_0_lcssa36_i_i;label=765;break;}else{label=759;break;}
 case 759: 
 var $1945=$s_0_lcssa35_i_i;
 var $1946=($_0_lcssa36_i_i>>>0)>3;
 if($1946){var $_15_i_i=$_0_lcssa36_i_i;var $w_06_i_i=$1945;label=760;break;}else{var $_1_lcssa_i_i=$_0_lcssa36_i_i;var $w_0_lcssa_i3_i=$1945;label=762;break;}
 case 760: 
 var $w_06_i_i;
 var $_15_i_i;
 var $1947=HEAP32[(($w_06_i_i)>>2)];
 var $1948=((($1947)-(16843009))|0);
 var $1949=$1947&-2139062144;
 var $1950=$1949^-2139062144;
 var $1951=$1950&$1948;
 var $1952=($1951|0)==0;
 if($1952){label=761;break;}else{var $_1_lcssa_i_i=$_15_i_i;var $w_0_lcssa_i3_i=$w_06_i_i;label=762;break;}
 case 761: 
 var $1954=(($w_06_i_i+4)|0);
 var $1955=((($_15_i_i)-(4))|0);
 var $1956=($1955>>>0)>3;
 if($1956){var $_15_i_i=$1955;var $w_06_i_i=$1954;label=760;break;}else{var $_1_lcssa_i_i=$1955;var $w_0_lcssa_i3_i=$1954;label=762;break;}
 case 762: 
 var $w_0_lcssa_i3_i;
 var $_1_lcssa_i_i;
 var $1957=$w_0_lcssa_i3_i;
 var $1958=($_1_lcssa_i_i|0)==0;
 if($1958){var $s_2_i_i=$1957;var $_3_i_i=0;label=765;break;}else{var $_22_i_i=$_1_lcssa_i_i;var $s_13_i_i=$1957;label=763;break;}
 case 763: 
 var $s_13_i_i;
 var $_22_i_i;
 var $1959=HEAP8[(($s_13_i_i)>>0)];
 var $1960=(($1959<<24)>>24)==0;
 if($1960){var $s_2_i_i=$s_13_i_i;var $_3_i_i=$_22_i_i;label=765;break;}else{label=764;break;}
 case 764: 
 var $1962=(($s_13_i_i+1)|0);
 var $1963=((($_22_i_i)-(1))|0);
 var $1964=($1963|0)==0;
 if($1964){var $s_2_i_i=$1962;var $_3_i_i=0;label=765;break;}else{var $_22_i_i=$1963;var $s_13_i_i=$1962;label=763;break;}
 case 765: 
 var $_3_i_i;
 var $s_2_i_i;
 var $1965=($_3_i_i|0)!=0;
 var $1966=($1965?$s_2_i_i:0);
 var $1967=($1966|0)==0;
 if($1967){label=767;break;}else{label=766;break;}
 case 766: 
 var $1969=$1966;
 var $1970=((($1969)-($1927))|0);
 var $1971=($1970>>>0)<10;
 if($1971){label=780;break;}else{var $z_1_i_i=$1966;label=768;break;}
 case 767: 
 var $1973=(($z_0_i_i+63)|0);
 var $z_1_i_i=$1973;label=768;break;
 case 768: 
 var $z_1_i_i;
 var $1975=(($_02_i4_i+$l_040_i_i)|0);
 var $1976=HEAP8[(($1975)>>0)];
 var $div_i_i=($1976&255)>>>5;
 var $1977=($div_i_i&255);
 var $1978=(($byteset_i_i+($1977<<2))|0);
 var $1979=HEAP32[(($1978)>>2)];
 var $1980=$1976&31;
 var $1981=($1980&255);
 var $1982=1<<$1981;
 var $1983=$1982&$1979;
 var $1984=($1983|0)==0;
 if($1984){label=771;break;}else{label=769;break;}
 case 769: 
 var $1986=($1976&255);
 var $1987=(($shift_i_i+($1986<<2))|0);
 var $1988=HEAP32[(($1987)>>2)];
 var $1989=($1988|0)==10;
 if($1989){label=772;break;}else{label=770;break;}
 case 770: 
 var $1991=(((10)-($1988))|0);
 var $1992=(($_02_i4_i+$1991)|0);
 var $_02_i4_i=$1992;var $z_0_i_i=$z_1_i_i;label=753;break;
 case 771: 
 var $1994=(($_02_i4_i+10)|0);
 var $_02_i4_i=$1994;var $z_0_i_i=$z_1_i_i;label=753;break;
 case 772: 
 if($1832){var $k_4_i_i=$1815;label=776;break;}else{var $_pn_i=$1815;label=774;break;}
 case 773: 
 var $1997=($2001|0)==10;
 if($1997){var $k_4_i_i=$1815;label=776;break;}else{var $_pn_i=$2001;label=774;break;}
 case 774: 
 var $_pn_i;
 var $_pr5_i_in_i=((4392+$_pn_i)|0);
 var $_pr5_i_i=HEAP8[(($_pr5_i_in_i)>>0)];
 var $1998=(($_02_i4_i+$_pn_i)|0);
 var $1999=HEAP8[(($1998)>>0)];
 var $2000=(($_pr5_i_i<<24)>>24)==(($1999<<24)>>24);
 var $2001=((($_pn_i)+(1))|0);
 if($2000){label=773;break;}else{label=775;break;}
 case 775: 
 var $2003=((($_pn_i)-($ip_1_ip_0_i_i))|0);
 var $2004=(($_02_i4_i+$2003)|0);
 var $_02_i4_i=$2004;var $z_0_i_i=$z_1_i_i;label=753;break;
 case 776: 
 var $k_4_i_i;
 var $2005=($k_4_i_i|0)==0;
 if($2005){var $_0_i=$_02_i4_i;label=779;break;}else{label=777;break;}
 case 777: 
 var $2007=((($k_4_i_i)-(1))|0);
 var $2008=((4392+$2007)|0);
 var $2009=HEAP8[(($2008)>>0)];
 var $2010=(($_02_i4_i+$2007)|0);
 var $2011=HEAP8[(($2010)>>0)];
 var $2012=(($2009<<24)>>24)==(($2011<<24)>>24);
 if($2012){var $k_4_i_i=$2007;label=776;break;}else{label=778;break;}
 case 778: 
 var $2014=(($_02_i4_i+$p_3151_i_i)|0);
 var $_02_i4_i=$2014;var $z_0_i_i=$z_1_i_i;label=753;break;
 case 779: 
 var $_0_i;
 var $2015=($_0_i|0)==0;
 if($2015){label=780;break;}else{label=782;break;}
 case 780: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4264,5512,613,10520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=781;break; } else { label=136;break; }
 case 781: 
 throw "Reached an unreachable!";
 case 782: 
 if($1678){label=784;break;}else{label=783;break;}
 case 783: 
 var $2019=HEAP32[(($31)>>2)];
 _free($2019);
 label=784;break;
 case 784: 
 STACKTOP=sp;return;
 case 785: 
 var $_pre_phi;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $2020=HEAP8[(($_pre_phi)>>0)];
 var $2021=$2020&1;
 var $2022=(($2021<<24)>>24)==0;
 if($2022){label=787;break;}else{label=786;break;}
 case 786: 
 var $2024=(($name+8)|0);
 var $2025=HEAP32[(($2024)>>2)];
 _free($2025);
 label=787;break;
 case 787: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($dst,$size,$count){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((31592)>>2)];
 if(($1|0)==0){ label=2;break;}else if(($1|0)==1){ label=3;break;}else{label=4;break;}
 case 2: 
 var $3=HEAP32[((31600)>>2)];
 var $4=(($3)|0);
 var $5=(Math_imul($size,$count)|0);
 assert($5 % 1 === 0);(_memcpy($dst, $4, $5)|0);
 var $6=((($3)+($5))|0);
 HEAP32[((31600)>>2)]=$6;
 var $storemerge=$5;label=5;break;
 case 3: 
 var $8=HEAP32[((31608)>>2)];
 var $9=_fread($dst,$size,$count,$8);
 var $storemerge=$9;label=5;break;
 case 4: 
 ___assert_fail(4208,5512,640,12312);
 throw "Reached an unreachable!";
 case 5: 
 var $storemerge;
 return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($this,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(28))&-1);
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=36;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=(($this+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=((($14)-($5))|0);
 var $16=(((($15|0))/(28))&-1);
 var $17=($16>>>0)<($11>>>0);
 if($17){label=6;break;}else{var $_02=$11;var $19=$2;label=3;break;}
 case 3: 
 var $19;
 var $_02;
 var $20=($19|0)==0;
 if($20){var $23=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $22=$19;
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0; HEAP32[((($22)+(12))>>2)]=0; HEAP32[((($22)+(16))>>2)]=0; HEAP32[((($22)+(20))>>2)]=0; HEAP32[((($22)+(24))>>2)]=0;
 var $_pre=HEAP32[(($1)>>2)];
 var $23=$_pre;label=5;break;
 case 5: 
 var $23;
 var $24=(($23+28)|0);
 HEAP32[(($1)>>2)]=$24;
 var $25=((($_02)-(1))|0);
 var $26=($25|0)==0;
 if($26){label=40;break;}else{var $_02=$25;var $19=$24;label=3;break;}
 case 6: 
 var $28=($__sz>>>0)>153391689;
 if($28){label=7;break;}else{label=17;break;}
 case 7: 
 var $29=___cxa_allocate_exception(8);
 var $30=$29;
 HEAP32[(($30)>>2)]=15352;
 var $31=(($29+4)|0);
 var $32=_strlen(1736);
 var $33=((($32)+(13))|0);
 var $34=($33|0)==0;
 var $_size_i_i=($34?1:$33);
 var $35=_malloc($_size_i_i);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{var $_lcssa_i_i=$35;label=13;break;}
 case 8: 
 var $37=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=11;break;}else{label=9;break;}
 case 9: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $41=_malloc($_size_i_i);
 var $42=($41|0)==0;
 if($42){label=8;break;}else{var $_lcssa_i_i=$41;label=13;break;}
 case 11: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($44,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i;
 var $46=$_lcssa_i_i;
 HEAP32[(($46)>>2)]=$32;
 var $47=(($_lcssa_i_i+4)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=$32;
 var $49=(($_lcssa_i_i+8)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=0;
 var $51=(($_lcssa_i_i+12)|0);
 var $52=((($32)+(1))|0);
 assert($52 % 1 === 0);(_memcpy($51, 1736, $52)|0);
 var $53=$31;
 HEAP32[(($53)>>2)]=$51;
 HEAP32[(($30)>>2)]=15320;
 ___cxa_throw($29,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($29);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $56=((($14)-($6))|0);
 var $57=(((($56|0))/(28))&-1);
 var $58=($57>>>0)<76695844;
 if($58){label=18;break;}else{var $62=153391689;label=19;break;}
 case 18: 
 var $59=$57<<1;
 var $60=($59>>>0)<($__sz>>>0);
 var $__sz_=($60?$__sz:$59);
 var $61=($__sz_|0)==0;
 if($61){var $78=0;var $77=$__sz_;label=24;break;}else{var $62=$__sz_;label=19;break;}
 case 19: 
 var $62;
 var $63=((($62)*(28))&-1);
 var $64=($63|0)==0;
 var $_size_i_i_i=($64?1:$63);
 var $65=_malloc($_size_i_i_i);
 var $66=($65|0)==0;
 if($66){label=20;break;}else{var $_lcssa_i_i_i=$65;label=23;break;}
 case 20: 
 var $67=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $68=($67|0)==0;
 if($68){label=22;break;}else{label=21;break;}
 case 21: 
 var $70=$67;
 FUNCTION_TABLE[$70]();
 var $71=_malloc($_size_i_i_i);
 var $72=($71|0)==0;
 if($72){label=20;break;}else{var $_lcssa_i_i_i=$71;label=23;break;}
 case 22: 
 var $74=___cxa_allocate_exception(4);
 var $75=$74;
 HEAP32[(($75)>>2)]=15192;
 ___cxa_throw($74,26096,(782));
 throw "Reached an unreachable!";
 case 23: 
 var $_lcssa_i_i_i;
 var $76=$_lcssa_i_i_i;
 var $78=$76;var $77=$62;label=24;break;
 case 24: 
 var $77;
 var $78;
 var $79=(($78+((($8)*(28))&-1))|0);
 var $80=(($78+((($77)*(28))&-1))|0);
 var $_01=$11;var $__v_i_sroa_15_0=$79;label=25;break;
 case 25: 
 var $__v_i_sroa_15_0;
 var $_01;
 var $82=($__v_i_sroa_15_0|0)==0;
 if($82){label=27;break;}else{label=26;break;}
 case 26: 
 var $84=$__v_i_sroa_15_0;
 HEAP32[(($84)>>2)]=0; HEAP32[((($84)+(4))>>2)]=0; HEAP32[((($84)+(8))>>2)]=0; HEAP32[((($84)+(12))>>2)]=0; HEAP32[((($84)+(16))>>2)]=0; HEAP32[((($84)+(20))>>2)]=0; HEAP32[((($84)+(24))>>2)]=0;
 label=27;break;
 case 27: 
 var $85=(($__v_i_sroa_15_0+28)|0);
 var $86=((($_01)-(1))|0);
 var $87=($86|0)==0;
 if($87){label=28;break;}else{var $_01=$86;var $__v_i_sroa_15_0=$85;label=25;break;}
 case 28: 
 var $88=HEAP32[(($3)>>2)];
 var $89=HEAP32[(($1)>>2)];
 var $_0=$89;var $__v_i_sroa_7_0=$79;label=29;break;
 case 29: 
 var $__v_i_sroa_7_0;
 var $_0;
 var $91=($_0|0)==($88|0);
 if($91){label=31;break;}else{label=30;break;}
 case 30: 
 var $93=((($_0)-(28))|0);
 var $94=(($93)|0);
 var $95=HEAPF32[(($94)>>2)];
 var $96=((($__v_i_sroa_7_0)-(28))|0);
 HEAPF32[(($96)>>2)]=$95;
 var $97=((($_0)-(28)+4)|0);
 var $98=HEAPF32[(($97)>>2)];
 var $99=((($__v_i_sroa_7_0)-(28)+4)|0);
 HEAPF32[(($99)>>2)]=$98;
 var $100=((($_0)-(28)+8)|0);
 var $101=HEAPF32[(($100)>>2)];
 var $102=((($__v_i_sroa_7_0)-(28)+8)|0);
 HEAPF32[(($102)>>2)]=$101;
 var $103=((($_0)-(28)+12)|0);
 var $104=HEAPF32[(($103)>>2)];
 var $105=((($__v_i_sroa_7_0)-(28)+12)|0);
 HEAPF32[(($105)>>2)]=$104;
 var $106=((($_0)-(28)+16)|0);
 var $107=HEAPF32[(($106)>>2)];
 var $108=((($__v_i_sroa_7_0)-(28)+16)|0);
 HEAPF32[(($108)>>2)]=$107;
 var $109=((($_0)-(28)+20)|0);
 var $110=HEAPF32[(($109)>>2)];
 var $111=((($__v_i_sroa_7_0)-(28)+20)|0);
 HEAPF32[(($111)>>2)]=$110;
 var $112=((($__v_i_sroa_7_0)-(28)+24)|0);
 var $113=((($_0)-(28)+24)|0);
 var $114=HEAP32[(($113)>>2)];
 HEAP32[(($112)>>2)]=$114;
 var $115=((($__v_i_sroa_7_0)-(28))|0);
 var $_0=$93;var $__v_i_sroa_7_0=$115;label=29;break;
 case 31: 
 var $116=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=$__v_i_sroa_7_0;
 var $117=HEAP32[(($1)>>2)];
 HEAP32[(($1)>>2)]=$85;
 HEAP32[(($12)>>2)]=$80;
 var $__v_i_sroa_15_1=$117;label=32;break;
 case 32: 
 var $__v_i_sroa_15_1;
 var $119=($116|0)==($__v_i_sroa_15_1|0);
 if($119){label=34;break;}else{label=33;break;}
 case 33: 
 var $121=((($__v_i_sroa_15_1)-(28))|0);
 var $__v_i_sroa_15_1=$121;label=32;break;
 case 34: 
 var $122=($116|0)==0;
 if($122){label=40;break;}else{label=35;break;}
 case 35: 
 var $124=$116;
 _free($124);
 label=40;break;
 case 36: 
 var $126=($8>>>0)>($__sz>>>0);
 if($126){label=37;break;}else{label=40;break;}
 case 37: 
 var $128=(($4+((($__sz)*(28))&-1))|0);
 var $130=$2;label=38;break;
 case 38: 
 var $130;
 var $131=($128|0)==($130|0);
 if($131){label=40;break;}else{label=39;break;}
 case 39: 
 var $133=((($130)-(28))|0);
 HEAP32[(($1)>>2)]=$133;
 var $130=$133;label=38;break;
 case 40: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($this,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>5;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=33;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=(($this+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=((($14)-($5))|0);
 var $16=$15>>5;
 var $17=($16>>>0)<($11>>>0);
 if($17){label=6;break;}else{var $_01=$11;var $19=$2;label=3;break;}
 case 3: 
 var $19;
 var $_01;
 var $20=($19|0)==0;
 if($20){var $28=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $22=$19;
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0; HEAP32[((($22)+(12))>>2)]=0;
 var $23=(($19)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=(($19+4)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=(($19+8)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=(($19+16)|0);
 var $27=$26;
 HEAP32[(($27)>>2)]=0; HEAP32[((($27)+(4))>>2)]=0; HEAP32[((($27)+(8))>>2)]=0; HEAP32[((($27)+(12))>>2)]=0;
 var $_pre=HEAP32[(($1)>>2)];
 var $28=$_pre;label=5;break;
 case 5: 
 var $28;
 var $29=(($28+32)|0);
 HEAP32[(($1)>>2)]=$29;
 var $30=((($_01)-(1))|0);
 var $31=($30|0)==0;
 if($31){label=37;break;}else{var $_01=$30;var $19=$29;label=3;break;}
 case 6: 
 var $33=($__sz>>>0)>134217727;
 if($33){label=7;break;}else{label=17;break;}
 case 7: 
 var $34=___cxa_allocate_exception(8);
 var $35=$34;
 HEAP32[(($35)>>2)]=15352;
 var $36=(($34+4)|0);
 var $37=_strlen(1736);
 var $38=((($37)+(13))|0);
 var $39=($38|0)==0;
 var $_size_i_i=($39?1:$38);
 var $40=_malloc($_size_i_i);
 var $41=($40|0)==0;
 if($41){label=8;break;}else{var $_lcssa_i_i=$40;label=13;break;}
 case 8: 
 var $42=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=9;break;}
 case 9: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $46=_malloc($_size_i_i);
 var $47=($46|0)==0;
 if($47){label=8;break;}else{var $_lcssa_i_i=$46;label=13;break;}
 case 11: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 HEAP32[(($50)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($49,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i;
 var $51=$_lcssa_i_i;
 HEAP32[(($51)>>2)]=$37;
 var $52=(($_lcssa_i_i+4)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=$37;
 var $54=(($_lcssa_i_i+8)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=0;
 var $56=(($_lcssa_i_i+12)|0);
 var $57=((($37)+(1))|0);
 assert($57 % 1 === 0);(_memcpy($56, 1736, $57)|0);
 var $58=$36;
 HEAP32[(($58)>>2)]=$56;
 HEAP32[(($35)>>2)]=15320;
 ___cxa_throw($34,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($34);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $61=((($14)-($6))|0);
 var $62=$61>>5;
 var $63=($62>>>0)<67108863;
 if($63){label=18;break;}else{var $67=134217727;label=19;break;}
 case 18: 
 var $64=$61>>4;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=($__sz_|0)==0;
 if($66){var $83=0;var $82=$__sz_;label=24;break;}else{var $67=$__sz_;label=19;break;}
 case 19: 
 var $67;
 var $68=$67<<5;
 var $69=($68|0)==0;
 var $_size_i_i_i=($69?1:$68);
 var $70=_malloc($_size_i_i_i);
 var $71=($70|0)==0;
 if($71){label=20;break;}else{var $_lcssa_i_i_i=$70;label=23;break;}
 case 20: 
 var $72=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $73=($72|0)==0;
 if($73){label=22;break;}else{label=21;break;}
 case 21: 
 var $75=$72;
 FUNCTION_TABLE[$75]();
 var $76=_malloc($_size_i_i_i);
 var $77=($76|0)==0;
 if($77){label=20;break;}else{var $_lcssa_i_i_i=$76;label=23;break;}
 case 22: 
 var $79=___cxa_allocate_exception(4);
 var $80=$79;
 HEAP32[(($80)>>2)]=15192;
 ___cxa_throw($79,26096,(782));
 throw "Reached an unreachable!";
 case 23: 
 var $_lcssa_i_i_i;
 var $81=$_lcssa_i_i_i;
 var $83=$81;var $82=$67;label=24;break;
 case 24: 
 var $82;
 var $83;
 var $84=(($83+($8<<5))|0);
 var $85=(($83+($82<<5))|0);
 var $_0=$11;var $__v_i_sroa_15_0=$84;label=25;break;
 case 25: 
 var $__v_i_sroa_15_0;
 var $_0;
 var $87=($__v_i_sroa_15_0|0)==0;
 if($87){label=27;break;}else{label=26;break;}
 case 26: 
 var $89=$__v_i_sroa_15_0;
 HEAP32[(($89)>>2)]=0; HEAP32[((($89)+(4))>>2)]=0; HEAP32[((($89)+(8))>>2)]=0; HEAP32[((($89)+(12))>>2)]=0;
 var $90=(($__v_i_sroa_15_0)|0);
 HEAP32[(($90)>>2)]=0;
 var $91=(($__v_i_sroa_15_0+4)|0);
 HEAP32[(($91)>>2)]=0;
 var $92=(($__v_i_sroa_15_0+8)|0);
 HEAP32[(($92)>>2)]=0;
 var $93=(($__v_i_sroa_15_0+16)|0);
 var $94=$93;
 HEAP32[(($94)>>2)]=0; HEAP32[((($94)+(4))>>2)]=0; HEAP32[((($94)+(8))>>2)]=0; HEAP32[((($94)+(12))>>2)]=0;
 label=27;break;
 case 27: 
 var $95=(($__v_i_sroa_15_0+32)|0);
 var $96=((($_0)-(1))|0);
 var $97=($96|0)==0;
 if($97){label=28;break;}else{var $_0=$96;var $__v_i_sroa_15_0=$95;label=25;break;}
 case 28: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($1)>>2)];
 var $100=$99;
 var $101=$98;
 var $102=((($100)-($101))|0);
 var $103=$102>>5;
 var $_sum=((($8)-($103))|0);
 var $104=(($83+($_sum<<5))|0);
 var $105=$104;
 var $106=$98;
 assert($102 % 1 === 0);(_memcpy($105, $106, $102)|0);
 var $107=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=$104;
 var $108=HEAP32[(($1)>>2)];
 HEAP32[(($1)>>2)]=$95;
 HEAP32[(($12)>>2)]=$85;
 var $__v_i_sroa_15_1=$108;label=29;break;
 case 29: 
 var $__v_i_sroa_15_1;
 var $110=($107|0)==($__v_i_sroa_15_1|0);
 if($110){label=31;break;}else{label=30;break;}
 case 30: 
 var $112=((($__v_i_sroa_15_1)-(32))|0);
 var $__v_i_sroa_15_1=$112;label=29;break;
 case 31: 
 var $113=($107|0)==0;
 if($113){label=37;break;}else{label=32;break;}
 case 32: 
 var $115=$107;
 _free($115);
 label=37;break;
 case 33: 
 var $117=($8>>>0)>($__sz>>>0);
 if($117){label=34;break;}else{label=37;break;}
 case 34: 
 var $119=(($4+($__sz<<5))|0);
 var $121=$2;label=35;break;
 case 35: 
 var $121;
 var $122=($119|0)==($121|0);
 if($122){label=37;break;}else{label=36;break;}
 case 36: 
 var $124=((($121)-(32))|0);
 HEAP32[(($1)>>2)]=$124;
 var $121=$124;label=35;break;
 case 37: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE10ReadStringERNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $l=sp;
 var $1=(sp)+(8);
 var $2=$l;
 var $3=__ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($2,4,1);
 var $4=HEAP32[(($l)>>2)];
 var $5=((($4)+(1))|0);
 var $6=($5|0)==0;
 var $_size_i=($6?1:$5);
 var $7=_malloc($_size_i);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i=$7;var $18=$4;label=6;break;}
 case 2: 
 var $9=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 var $12=$9;
 FUNCTION_TABLE[$12]();
 var $13=_malloc($_size_i);
 var $14=($13|0)==0;
 if($14){label=2;break;}else{label=5;break;}
 case 4: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=15192;
 ___cxa_throw($16,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_pre=HEAP32[(($l)>>2)];
 var $_lcssa_i=$13;var $18=$_pre;label=6;break;
 case 6: 
 var $18;
 var $_lcssa_i;
 var $19=__ZN3vcg3tri2io11ImporterVMII6MyMeshldiscE4ReadEPvjj($_lcssa_i,1,$18);
 var $20=(($_lcssa_i+$18)|0);
 HEAP8[(($20)>>0)]=0;
 var $21=_strlen($_lcssa_i);
 var $22=($21>>>0)>4294967279;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 8: 
 var $25=($21>>>0)<11;
 if($25){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=$21<<1;
 var $28=(($27)&255);
 var $29=$1;
 HEAP8[(($29)>>0)]=$28;
 var $30=$1;
 var $31=(($30+1)|0);
 var $__p_0_i=$31;label=15;break;
 case 10: 
 var $32=((($21)+(16))|0);
 var $33=$32&-16;
 var $34=($33|0)==0;
 var $_size_i1=($34?1:$33);
 var $35=_malloc($_size_i1);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{var $_lcssa_i3=$35;label=14;break;}
 case 11: 
 var $37=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $40=$37;
 FUNCTION_TABLE[$40]();
 var $41=_malloc($_size_i1);
 var $42=($41|0)==0;
 if($42){label=11;break;}else{var $_lcssa_i3=$41;label=14;break;}
 case 13: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=15192;
 ___cxa_throw($44,26096,(782));
 throw "Reached an unreachable!";
 case 14: 
 var $_lcssa_i3;
 var $46=(($1+8)|0);
 HEAP32[(($46)>>2)]=$_lcssa_i3;
 var $47=$33|1;
 var $48=(($1)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($1+4)|0);
 HEAP32[(($49)>>2)]=$21;
 var $__p_0_i=$_lcssa_i3;label=15;break;
 case 15: 
 var $__p_0_i;
 assert($21 % 1 === 0);(_memcpy($__p_0_i, $_lcssa_i, $21)|0);
 var $50=(($__p_0_i+$21)|0);
 HEAP8[(($50)>>0)]=0;
 var $51=$out;
 var $52=HEAP8[(($51)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 var $56=(($out+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP8[(($57)>>0)]=0;
 var $58=(($out+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=18;break;
 case 17: 
 var $60=$out;
 var $61=(($60+1)|0);
 HEAP8[(($61)>>0)]=0;
 HEAP8[(($51)>>0)]=0;
 label=18;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($out,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=19;break; }
 case 19: 
 var $63$0 = ___cxa_find_matching_catch(0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
 case 20: 
 var $65=$1;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
 var $66=$1;
 var $storemerge=0;label=21;break;
 case 21: 
 var $storemerge;
 var $68=($storemerge>>>0)<3;
 if($68){label=22;break;}else{label=23;break;}
 case 22: 
 var $70=(($66+($storemerge<<2))|0);
 HEAP32[(($70)>>2)]=0;
 var $71=((($storemerge)+(1))|0);
 var $storemerge=$71;label=21;break;
 case 23: 
 var $72=HEAP8[(($65)>>0)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=25;break;}else{label=24;break;}
 case 24: 
 var $76=(($1+8)|0);
 var $77=HEAP32[(($76)>>2)];
 _free($77);
 label=25;break;
 case 25: 
 var $78=($_lcssa_i|0)==0;
 if($78){label=27;break;}else{label=26;break;}
 case 26: 
 _free($_lcssa_i);
 label=27;break;
 case 27: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io4DerKI6MyMeshlNS1_3K12IS3_NS1_9DummyTypeILi1048576EEENS5_ILi2048EEENS5_ILi1024EEENS5_ILi512EEENS5_ILi256EEENS5_ILi128EEENS5_ILi64EEENS5_ILi32EEENS5_ILi16EEENS5_ILi8EEENS5_ILi4EEENS5_ILi2EEENS5_ILi1EEEEEE9AddAttribILi2EEEvRS3_PKcjPv($m,$name,$s,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+792)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $h_i_i_i_i_i_i=(sp)+(24);
 var $4=(sp)+(32);
 var $h1_i_i_i_i_i_i=(sp)+(48);
 var $5=(sp)+(56);
 var $pa_i_i_i_i_i_i=(sp)+(72);
 var $6=(sp)+(104);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $h_i_i_i_i_i=(sp)+(144);
 var $10=(sp)+(152);
 var $h1_i_i_i_i_i=(sp)+(168);
 var $11=(sp)+(176);
 var $pa_i_i_i_i_i=(sp)+(192);
 var $12=(sp)+(224);
 var $13=(sp)+(240);
 var $14=(sp)+(248);
 var $15=(sp)+(256);
 var $h_i_i_i_i=(sp)+(264);
 var $16=(sp)+(272);
 var $h1_i_i_i_i=(sp)+(288);
 var $17=(sp)+(296);
 var $pa_i_i_i_i=(sp)+(312);
 var $18=(sp)+(344);
 var $19=(sp)+(360);
 var $20=(sp)+(368);
 var $h_i_i_i=(sp)+(376);
 var $21=(sp)+(384);
 var $h1_i_i_i=(sp)+(400);
 var $22=(sp)+(408);
 var $pa_i_i_i=(sp)+(424);
 var $23=(sp)+(456);
 var $24=(sp)+(464);
 var $h_i_i=(sp)+(472);
 var $25=(sp)+(480);
 var $h1_i_i=(sp)+(496);
 var $26=(sp)+(504);
 var $pa_i_i=(sp)+(520);
 var $27=(sp)+(552);
 var $28=(sp)+(560);
 var $29=(sp)+(568);
 var $h_i=(sp)+(576);
 var $30=(sp)+(584);
 var $h1_i=(sp)+(600);
 var $31=(sp)+(608);
 var $pa_i=(sp)+(624);
 var $32=(sp)+(656);
 var $33=(sp)+(672);
 var $34=(sp)+(680);
 var $35=(sp)+(688);
 var $h=(sp)+(696);
 var $36=(sp)+(704);
 var $h1=(sp)+(720);
 var $37=(sp)+(728);
 var $pa=(sp)+(744);
 var $38=(sp)+(776);
 var $39=($s|0)==4;
 if($39){label=2;break;}else{label=17;break;}
 case 2: 
 var $41=_strlen($name);
 var $42=($41>>>0)>4294967279;
 if($42){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $45=($41>>>0)<11;
 if($45){label=5;break;}else{label=6;break;}
 case 5: 
 var $47=$41<<1;
 var $48=(($47)&255);
 var $49=$36;
 HEAP8[(($49)>>0)]=$48;
 var $50=$36;
 var $51=(($50+1)|0);
 var $__p_0_i=$51;label=11;break;
 case 6: 
 var $52=((($41)+(16))|0);
 var $53=$52&-16;
 var $54=($53|0)==0;
 var $_size_i=($54?1:$53);
 var $55=_malloc($_size_i);
 var $56=($55|0)==0;
 if($56){label=7;break;}else{var $_lcssa_i=$55;label=10;break;}
 case 7: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=9;break;}else{label=8;break;}
 case 8: 
 var $60=$57;
 FUNCTION_TABLE[$60]();
 var $61=_malloc($_size_i);
 var $62=($61|0)==0;
 if($62){label=7;break;}else{var $_lcssa_i=$61;label=10;break;}
 case 9: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 ___cxa_throw($64,26096,(782));
 throw "Reached an unreachable!";
 case 10: 
 var $_lcssa_i;
 var $66=(($36+8)|0);
 HEAP32[(($66)>>2)]=$_lcssa_i;
 var $67=$53|1;
 var $68=(($36)|0);
 HEAP32[(($68)>>2)]=$67;
 var $69=(($36+4)|0);
 HEAP32[(($69)>>2)]=$41;
 var $__p_0_i=$_lcssa_i;label=11;break;
 case 11: 
 var $__p_0_i;
 assert($41 % 1 === 0);(_memcpy($__p_0_i, $name, $41)|0);
 var $70=(($__p_0_i+$41)|0);
 HEAP8[(($70)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeIlEENS0_7TriMeshINSt3__16vectorI8MyVertexNS6_9allocatorIS8_EEEENS7_I6MyFaceNS9_ISC_EEEENS7_I6MyEdgeNS9_ISF_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS6_12basic_stringIcNS6_11char_traitsIcEENS9_IcEEEE($h,$m,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 var $72=$36;
 var $73=HEAP8[(($72)>>0)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=14;break;}else{label=13;break;}
 case 13: 
 var $77=(($36+8)|0);
 var $78=HEAP32[(($77)>>2)];
 _free($78);
 label=14;break;
 case 14: 
 var $79=(($h)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$data;
 var $84=((((HEAPU8[(($83)>>0)])|(HEAPU8[((($83)+(1))>>0)]<<8)|(HEAPU8[((($83)+(2))>>0)]<<16)|(HEAPU8[((($83)+(3))>>0)]<<24))|0));
 tempBigInt=$84;HEAP8[(($82)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($82)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($82)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($82)+(3))>>0)]=tempBigInt&0xff;
 label=293;break;
 case 15: 
 var $86$0 = ___cxa_find_matching_catch(); var $86$1 = tempRet0;
 var $87=$86$0;
 var $88=$86$1;
 var $89=$36;
 var $90=HEAP8[(($89)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $_038=$88;var $_039=$87;label=294;break;}else{label=16;break;}
 case 16: 
 var $94=(($36+8)|0);
 var $95=HEAP32[(($94)>>2)];
 _free($95);
 var $_038=$88;var $_039=$87;label=294;break;
 case 17: 
 var $97=($s>>>0)<4;
 if($97){label=18;break;}else{label=73;break;}
 case 18: 
 var $99=(((4)-($s))|0);
 var $100=_strlen($name);
 var $101=($100>>>0)>4294967279;
 if($101){label=19;break;}else{label=20;break;}
 case 19: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 20: 
 var $104=($100>>>0)<11;
 if($104){label=21;break;}else{label=22;break;}
 case 21: 
 var $106=$100<<1;
 var $107=(($106)&255);
 var $108=$37;
 HEAP8[(($108)>>0)]=$107;
 var $109=$37;
 var $110=(($109+1)|0);
 var $__p_0_i3=$110;label=27;break;
 case 22: 
 var $111=((($100)+(16))|0);
 var $112=$111&-16;
 var $113=($112|0)==0;
 var $_size_i5=($113?1:$112);
 var $114=_malloc($_size_i5);
 var $115=($114|0)==0;
 if($115){label=23;break;}else{var $_lcssa_i7=$114;label=26;break;}
 case 23: 
 var $116=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $117=($116|0)==0;
 if($117){label=25;break;}else{label=24;break;}
 case 24: 
 var $119=$116;
 FUNCTION_TABLE[$119]();
 var $120=_malloc($_size_i5);
 var $121=($120|0)==0;
 if($121){label=23;break;}else{var $_lcssa_i7=$120;label=26;break;}
 case 25: 
 var $123=___cxa_allocate_exception(4);
 var $124=$123;
 HEAP32[(($124)>>2)]=15192;
 ___cxa_throw($123,26096,(782));
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i7;
 var $125=(($37+8)|0);
 HEAP32[(($125)>>2)]=$_lcssa_i7;
 var $126=$112|1;
 var $127=(($37)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($37+4)|0);
 HEAP32[(($128)>>2)]=$100;
 var $__p_0_i3=$_lcssa_i7;label=27;break;
 case 27: 
 var $__p_0_i3;
 assert($100 % 1 === 0);(_memcpy($__p_0_i3, $name, $100)|0);
 var $129=(($__p_0_i3+$100)|0);
 HEAP8[(($129)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeIlEENS0_7TriMeshINSt3__16vectorI8MyVertexNS6_9allocatorIS8_EEEENS7_I6MyFaceNS9_ISC_EEEENS7_I6MyEdgeNS9_ISF_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS6_12basic_stringIcNS6_11char_traitsIcEENS9_IcEEEE($h1,$m,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=65;break; }
 case 28: 
 var $131=$37;
 var $132=HEAP8[(($131)>>0)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=30;break;}else{label=29;break;}
 case 29: 
 var $136=(($37+8)|0);
 var $137=HEAP32[(($136)>>2)];
 _free($137);
 label=30;break;
 case 30: 
 var $138=(($h1)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=$141;
 assert($s % 1 === 0);(_memcpy($142, $data, $s)|0);
 var $143=(($pa+4)|0);
 var $144=$143;
 var $storemerge_i=0;label=31;break;
 case 31: 
 var $storemerge_i;
 var $146=($storemerge_i>>>0)<3;
 if($146){label=32;break;}else{label=33;break;}
 case 32: 
 var $148=(($144+($storemerge_i<<2))|0);
 HEAP32[(($148)>>2)]=0;
 var $149=((($storemerge_i)+(1))|0);
 var $storemerge_i=$149;label=31;break;
 case 33: 
 var $150=(($pa+4)|0);
 var $151=_strlen($name);
 var $152=($151>>>0)>4294967279;
 if($152){label=34;break;}else{label=36;break;}
 case 34: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=68;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $155=($151>>>0)<11;
 if($155){label=37;break;}else{label=38;break;}
 case 37: 
 var $157=$151<<1;
 var $158=(($157)&255);
 var $159=$38;
 HEAP8[(($159)>>0)]=$158;
 var $160=$38;
 var $161=(($160+1)|0);
 var $__p_0_i12=$161;label=45;break;
 case 38: 
 var $162=((($151)+(16))|0);
 var $163=$162&-16;
 var $164=($163|0)==0;
 var $_size_i16=($164?1:$163);
 var $165=_malloc($_size_i16);
 var $166=($165|0)==0;
 if($166){label=39;break;}else{var $_lcssa_i18=$165;label=44;break;}
 case 39: 
 var $167=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $168=($167|0)==0;
 if($168){label=42;break;}else{label=40;break;}
 case 40: 
 var $170=$167;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=67;break; }
 case 41: 
 var $171=_malloc($_size_i16);
 var $172=($171|0)==0;
 if($172){label=39;break;}else{var $_lcssa_i18=$171;label=44;break;}
 case 42: 
 var $174=___cxa_allocate_exception(4);
 var $175=$174;
 HEAP32[(($175)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($174,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=68;break; }
 case 43: 
 throw "Reached an unreachable!";
 case 44: 
 var $_lcssa_i18;
 var $176=(($38+8)|0);
 HEAP32[(($176)>>2)]=$_lcssa_i18;
 var $177=$163|1;
 var $178=(($38)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=(($38+4)|0);
 HEAP32[(($179)>>2)]=$151;
 var $__p_0_i12=$_lcssa_i18;label=45;break;
 case 45: 
 var $__p_0_i12;
 assert($151 % 1 === 0);(_memcpy($__p_0_i12, $name, $151)|0);
 var $181=(($__p_0_i12+$151)|0);
 HEAP8[(($181)>>0)]=0;
 var $182=$150;
 var $183=HEAP8[(($182)>>0)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=47;break;}else{label=46;break;}
 case 46: 
 var $187=(($pa+12)|0);
 var $188=HEAP32[(($187)>>2)];
 HEAP8[(($188)>>0)]=0;
 var $189=(($pa+8)|0);
 HEAP32[(($189)>>2)]=0;
 label=48;break;
 case 47: 
 var $191=$150;
 var $192=(($191+1)|0);
 HEAP8[(($192)>>0)]=0;
 HEAP8[(($182)>>0)]=0;
 label=48;break;
 case 48: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($150,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $194$0 = ___cxa_find_matching_catch(0); var $194$1 = tempRet0;
 var $195=$194$0;
 ___clang_call_terminate($195);
 throw "Reached an unreachable!";
 case 50: 
 var $196=$38;
 assert(12 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($196)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($196)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($196)+(8))>>2)];
 var $197=$38;
 var $storemerge=0;label=51;break;
 case 51: 
 var $storemerge;
 var $199=($storemerge>>>0)<3;
 if($199){label=52;break;}else{label=53;break;}
 case 52: 
 var $201=(($197+($storemerge<<2))|0);
 HEAP32[(($201)>>2)]=0;
 var $202=((($storemerge)+(1))|0);
 var $storemerge=$202;label=51;break;
 case 53: 
 var $203=HEAP8[(($196)>>0)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=55;break;}else{label=54;break;}
 case 54: 
 var $207=(($38+8)|0);
 var $208=HEAP32[(($207)>>2)];
 _free($208);
 label=55;break;
 case 55: 
 var $209=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($35,$209,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=68;break; }
 case 56: 
 var $211=(($35)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+16)|0);
 var $214=(($213)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($pa)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($212+20)|0);
 var $218=($pa|0)==($213|0);
 if($218){label=61;break;}else{label=57;break;}
 case 57: 
 var $220=$217;
 var $221=HEAP8[(($220)>>0)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=59;break;}else{label=58;break;}
 case 58: 
 var $225=(($212+28)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($212+24)|0);
 var $228=HEAP32[(($227)>>2)];
 var $235=$228;var $234=$226;label=60;break;
 case 59: 
 var $230=$217;
 var $231=(($230+1)|0);
 var $232=($221&255);
 var $233=$232>>>1;
 var $235=$233;var $234=$231;label=60;break;
 case 60: 
 var $234;
 var $235;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($150,$234,$235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=68;break; }
 case 61: 
 var $237=(($pa+16)|0);
 var $238=(($212+32)|0);
 var $239=$237;
 var $240=$238;
 assert(12 % 1 === 0);HEAP32[(($239)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($239)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];HEAP32[((($239)+(8))>>2)]=HEAP32[((($240)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($34,$209,$212);
 var $241=(($pa+20)|0);
 HEAP32[(($241)>>2)]=$99;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($33,$209,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=68;break; }
 case 62: 
 var $243=(($33+4)|0);
 var $244=HEAP8[(($243)>>0)];
 var $245=$244&1;
 var $246=(($245<<24)>>24)==0;
 if($246){label=63;break;}else{label=71;break;}
 case 63: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=68;break; }
 case 64: 
 throw "Reached an unreachable!";
 case 65: 
 var $250$0 = ___cxa_find_matching_catch(); var $250$1 = tempRet0;
 var $251=$250$0;
 var $252=$250$1;
 var $253=$37;
 var $254=HEAP8[(($253)>>0)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 if($256){var $_038=$252;var $_039=$251;label=294;break;}else{label=66;break;}
 case 66: 
 var $258=(($37+8)|0);
 var $259=HEAP32[(($258)>>2)];
 _free($259);
 var $_038=$252;var $_039=$251;label=294;break;
 case 67: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=69;break;
 case 68: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=69;break;
 case 69: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $261=$lpad_phi$0;
 var $262=$lpad_phi$1;
 var $263=$150;
 var $264=HEAP8[(($263)>>0)];
 var $265=$264&1;
 var $266=(($265<<24)>>24)==0;
 if($266){var $_038=$262;var $_039=$261;label=294;break;}else{label=70;break;}
 case 70: 
 var $268=(($pa+12)|0);
 var $269=HEAP32[(($268)>>2)];
 _free($269);
 var $_038=$262;var $_039=$261;label=294;break;
 case 71: 
 var $271=HEAP8[(($182)>>0)];
 var $272=$271&1;
 var $273=(($272<<24)>>24)==0;
 if($273){label=293;break;}else{label=72;break;}
 case 72: 
 var $275=(($pa+12)|0);
 var $276=HEAP32[(($275)>>2)];
 _free($276);
 label=293;break;
 case 73: 
 var $278=$27;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $279=$28;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $280=$29;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $281=$h_i;
 var $$etemp$3$0=8;
 var $$etemp$3$1=0;

 var $282=$30;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $283=$h1_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $284=$31;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $285=$pa_i;
 var $$etemp$7$0=28;
 var $$etemp$7$1=0;

 var $286=$32;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $287=($s|0)==1;
 var $288=($s|0)==0;
 var $289=$23;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $290=$24;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $291=$h_i_i;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $292=$25;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $293=$h1_i_i;
 var $$etemp$13$0=8;
 var $$etemp$13$1=0;

 var $294=$26;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $295=$pa_i_i;
 var $$etemp$15$0=28;
 var $$etemp$15$1=0;

 var $296=$19;
 var $$etemp$16$0=8;
 var $$etemp$16$1=0;

 var $297=$20;
 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $298=$h_i_i_i;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $299=$21;
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $300=$h1_i_i_i;
 var $$etemp$20$0=8;
 var $$etemp$20$1=0;

 var $301=$22;
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $302=$pa_i_i_i;
 var $$etemp$22$0=28;
 var $$etemp$22$1=0;

 var $303=$13;
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $304=$14;
 var $$etemp$24$0=4;
 var $$etemp$24$1=0;

 var $305=$15;
 var $$etemp$25$0=4;
 var $$etemp$25$1=0;

 var $306=$h_i_i_i_i;
 var $$etemp$26$0=8;
 var $$etemp$26$1=0;

 var $307=$16;
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $308=$h1_i_i_i_i;
 var $$etemp$28$0=8;
 var $$etemp$28$1=0;

 var $309=$17;
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 var $310=$pa_i_i_i_i;
 var $$etemp$30$0=28;
 var $$etemp$30$1=0;

 var $311=$18;
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $312=($s|0)==8;
 if($312){label=74;break;}else{label=89;break;}
 case 74: 
 var $314=_strlen($name);
 var $315=($314>>>0)>4294967279;
 if($315){label=75;break;}else{label=76;break;}
 case 75: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 76: 
 var $318=($314>>>0)<11;
 if($318){label=77;break;}else{label=78;break;}
 case 77: 
 var $320=$314<<1;
 var $321=(($320)&255);
 HEAP8[(($307)>>0)]=$321;
 var $322=$16;
 var $323=(($322+1)|0);
 var $__p_0_i_i_i_i_i=$323;label=83;break;
 case 78: 
 var $324=((($314)+(16))|0);
 var $325=$324&-16;
 var $326=($325|0)==0;
 var $_size_i_i_i_i_i=($326?1:$325);
 var $327=_malloc($_size_i_i_i_i_i);
 var $328=($327|0)==0;
 if($328){label=79;break;}else{var $_lcssa_i_i_i_i_i=$327;label=82;break;}
 case 79: 
 var $329=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $330=($329|0)==0;
 if($330){label=81;break;}else{label=80;break;}
 case 80: 
 var $332=$329;
 FUNCTION_TABLE[$332]();
 var $333=_malloc($_size_i_i_i_i_i);
 var $334=($333|0)==0;
 if($334){label=79;break;}else{var $_lcssa_i_i_i_i_i=$333;label=82;break;}
 case 81: 
 var $336=___cxa_allocate_exception(4);
 var $337=$336;
 HEAP32[(($337)>>2)]=15192;
 ___cxa_throw($336,26096,(782));
 throw "Reached an unreachable!";
 case 82: 
 var $_lcssa_i_i_i_i_i;
 var $338=(($16+8)|0);
 HEAP32[(($338)>>2)]=$_lcssa_i_i_i_i_i;
 var $339=$325|1;
 var $340=(($16)|0);
 HEAP32[(($340)>>2)]=$339;
 var $341=(($16+4)|0);
 HEAP32[(($341)>>2)]=$314;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i_i_i_i;label=83;break;
 case 83: 
 var $__p_0_i_i_i_i_i;
 assert($314 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $name, $314)|0);
 var $342=(($__p_0_i_i_i_i_i+$314)|0);
 HEAP8[(($342)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i,$m,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=87;break; }
 case 84: 
 var $344=HEAP8[(($307)>>0)];
 var $345=$344&1;
 var $346=(($345<<24)>>24)==0;
 if($346){label=86;break;}else{label=85;break;}
 case 85: 
 var $348=(($16+8)|0);
 var $349=HEAP32[(($348)>>2)];
 _free($349);
 label=86;break;
 case 86: 
 var $350=(($h_i_i_i_i)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($351+4)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=$data;
 var $355=$353;
 var $ld$32$0=(($354)|0);
 var $356$0=((((HEAPU8[(($ld$32$0)>>0)])|(HEAPU8[((($ld$32$0)+(1))>>0)]<<8)|(HEAPU8[((($ld$32$0)+(2))>>0)]<<16)|(HEAPU8[((($ld$32$0)+(3))>>0)]<<24))|0));
 var $ld$33$1=(($354+4)|0);
 var $356$1=((((HEAPU8[(($ld$33$1)>>0)])|(HEAPU8[((($ld$33$1)+(1))>>0)]<<8)|(HEAPU8[((($ld$33$1)+(2))>>0)]<<16)|(HEAPU8[((($ld$33$1)+(3))>>0)]<<24))|0));
 var $st$34$0=(($355)|0);
 tempBigInt=$356$0;HEAP8[(($st$34$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$34$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$34$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$34$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$35$1=(($355+4)|0);
 tempBigInt=$356$1;HEAP8[(($st$35$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$35$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$35$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$35$1)+(3))>>0)]=tempBigInt&0xff;
 label=293;break;
 case 87: 
 var $358$0 = ___cxa_find_matching_catch(); var $358$1 = tempRet0;
 var $359=$358$0;
 var $360=$358$1;
 var $361=HEAP8[(($307)>>0)];
 var $362=$361&1;
 var $363=(($362<<24)>>24)==0;
 if($363){var $_040=$359;var $_041=$360;label=292;break;}else{label=88;break;}
 case 88: 
 var $365=(($16+8)|0);
 var $366=HEAP32[(($365)>>2)];
 _free($366);
 var $_040=$359;var $_041=$360;label=292;break;
 case 89: 
 var $368=($s>>>0)<8;
 if($368){label=90;break;}else{label=145;break;}
 case 90: 
 var $370=(((8)-($s))|0);
 var $371=_strlen($name);
 var $372=($371>>>0)>4294967279;
 if($372){label=91;break;}else{label=92;break;}
 case 91: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 92: 
 var $375=($371>>>0)<11;
 if($375){label=93;break;}else{label=94;break;}
 case 93: 
 var $377=$371<<1;
 var $378=(($377)&255);
 HEAP8[(($309)>>0)]=$378;
 var $379=$17;
 var $380=(($379+1)|0);
 var $__p_0_i3_i_i_i_i=$380;label=99;break;
 case 94: 
 var $381=((($371)+(16))|0);
 var $382=$381&-16;
 var $383=($382|0)==0;
 var $_size_i5_i_i_i_i=($383?1:$382);
 var $384=_malloc($_size_i5_i_i_i_i);
 var $385=($384|0)==0;
 if($385){label=95;break;}else{var $_lcssa_i7_i_i_i_i=$384;label=98;break;}
 case 95: 
 var $386=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $387=($386|0)==0;
 if($387){label=97;break;}else{label=96;break;}
 case 96: 
 var $389=$386;
 FUNCTION_TABLE[$389]();
 var $390=_malloc($_size_i5_i_i_i_i);
 var $391=($390|0)==0;
 if($391){label=95;break;}else{var $_lcssa_i7_i_i_i_i=$390;label=98;break;}
 case 97: 
 var $393=___cxa_allocate_exception(4);
 var $394=$393;
 HEAP32[(($394)>>2)]=15192;
 ___cxa_throw($393,26096,(782));
 throw "Reached an unreachable!";
 case 98: 
 var $_lcssa_i7_i_i_i_i;
 var $395=(($17+8)|0);
 HEAP32[(($395)>>2)]=$_lcssa_i7_i_i_i_i;
 var $396=$382|1;
 var $397=(($17)|0);
 HEAP32[(($397)>>2)]=$396;
 var $398=(($17+4)|0);
 HEAP32[(($398)>>2)]=$371;
 var $__p_0_i3_i_i_i_i=$_lcssa_i7_i_i_i_i;label=99;break;
 case 99: 
 var $__p_0_i3_i_i_i_i;
 assert($371 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i, $name, $371)|0);
 var $399=(($__p_0_i3_i_i_i_i+$371)|0);
 HEAP8[(($399)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i,$m,$17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=137;break; }
 case 100: 
 var $401=HEAP8[(($309)>>0)];
 var $402=$401&1;
 var $403=(($402<<24)>>24)==0;
 if($403){label=102;break;}else{label=101;break;}
 case 101: 
 var $405=(($17+8)|0);
 var $406=HEAP32[(($405)>>2)];
 _free($406);
 label=102;break;
 case 102: 
 var $407=(($h1_i_i_i_i)|0);
 var $408=HEAP32[(($407)>>2)];
 var $409=(($408+4)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410)|0);
 assert($s % 1 === 0);(_memcpy($411, $data, $s)|0);
 var $412=(($pa_i_i_i_i+4)|0);
 var $413=$412;
 var $storemerge_i_i_i_i_i=0;label=103;break;
 case 103: 
 var $storemerge_i_i_i_i_i;
 var $415=($storemerge_i_i_i_i_i>>>0)<3;
 if($415){label=104;break;}else{label=105;break;}
 case 104: 
 var $417=(($413+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($417)>>2)]=0;
 var $418=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$418;label=103;break;
 case 105: 
 var $419=(($pa_i_i_i_i+4)|0);
 var $420=_strlen($name);
 var $421=($420>>>0)>4294967279;
 if($421){label=106;break;}else{label=108;break;}
 case 106: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=140;break; }
 case 107: 
 throw "Reached an unreachable!";
 case 108: 
 var $424=($420>>>0)<11;
 if($424){label=109;break;}else{label=110;break;}
 case 109: 
 var $426=$420<<1;
 var $427=(($426)&255);
 HEAP8[(($311)>>0)]=$427;
 var $428=$18;
 var $429=(($428+1)|0);
 var $__p_0_i12_i_i_i_i=$429;label=117;break;
 case 110: 
 var $430=((($420)+(16))|0);
 var $431=$430&-16;
 var $432=($431|0)==0;
 var $_size_i16_i_i_i_i=($432?1:$431);
 var $433=_malloc($_size_i16_i_i_i_i);
 var $434=($433|0)==0;
 if($434){label=111;break;}else{var $_lcssa_i18_i_i_i_i=$433;label=116;break;}
 case 111: 
 var $435=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $436=($435|0)==0;
 if($436){label=114;break;}else{label=112;break;}
 case 112: 
 var $438=$435;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$438]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=139;break; }
 case 113: 
 var $439=_malloc($_size_i16_i_i_i_i);
 var $440=($439|0)==0;
 if($440){label=111;break;}else{var $_lcssa_i18_i_i_i_i=$439;label=116;break;}
 case 114: 
 var $442=___cxa_allocate_exception(4);
 var $443=$442;
 HEAP32[(($443)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($442,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=140;break; }
 case 115: 
 throw "Reached an unreachable!";
 case 116: 
 var $_lcssa_i18_i_i_i_i;
 var $444=(($18+8)|0);
 HEAP32[(($444)>>2)]=$_lcssa_i18_i_i_i_i;
 var $445=$431|1;
 var $446=(($18)|0);
 HEAP32[(($446)>>2)]=$445;
 var $447=(($18+4)|0);
 HEAP32[(($447)>>2)]=$420;
 var $__p_0_i12_i_i_i_i=$_lcssa_i18_i_i_i_i;label=117;break;
 case 117: 
 var $__p_0_i12_i_i_i_i;
 assert($420 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i, $name, $420)|0);
 var $448=(($__p_0_i12_i_i_i_i+$420)|0);
 HEAP8[(($448)>>0)]=0;
 var $449=$419;
 var $450=HEAP8[(($449)>>0)];
 var $451=$450&1;
 var $452=(($451<<24)>>24)==0;
 if($452){label=119;break;}else{label=118;break;}
 case 118: 
 var $454=(($pa_i_i_i_i+12)|0);
 var $455=HEAP32[(($454)>>2)];
 HEAP8[(($455)>>0)]=0;
 var $456=(($pa_i_i_i_i+8)|0);
 HEAP32[(($456)>>2)]=0;
 label=120;break;
 case 119: 
 var $458=$419;
 var $459=(($458+1)|0);
 HEAP8[(($459)>>0)]=0;
 HEAP8[(($449)>>0)]=0;
 label=120;break;
 case 120: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($419,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=122;break; } else { label=121;break; }
 case 121: 
 var $461$0 = ___cxa_find_matching_catch(0); var $461$1 = tempRet0;
 var $462=$461$0;
 ___clang_call_terminate($462);
 throw "Reached an unreachable!";
 case 122: 
 assert(12 % 1 === 0);HEAP32[(($449)>>2)]=HEAP32[(($311)>>2)];HEAP32[((($449)+(4))>>2)]=HEAP32[((($311)+(4))>>2)];HEAP32[((($449)+(8))>>2)]=HEAP32[((($311)+(8))>>2)];
 var $463=$18;
 var $storemerge_i28_i_i_i=0;label=123;break;
 case 123: 
 var $storemerge_i28_i_i_i;
 var $465=($storemerge_i28_i_i_i>>>0)<3;
 if($465){label=124;break;}else{label=125;break;}
 case 124: 
 var $467=(($463+($storemerge_i28_i_i_i<<2))|0);
 HEAP32[(($467)>>2)]=0;
 var $468=((($storemerge_i28_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i=$468;label=123;break;
 case 125: 
 var $469=HEAP8[(($311)>>0)];
 var $470=$469&1;
 var $471=(($470<<24)>>24)==0;
 if($471){label=127;break;}else{label=126;break;}
 case 126: 
 var $473=(($18+8)|0);
 var $474=HEAP32[(($473)>>2)];
 _free($474);
 label=127;break;
 case 127: 
 var $475=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($15,$475,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=140;break; }
 case 128: 
 var $476=(($15)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=(($477+16)|0);
 var $479=(($478)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=(($pa_i_i_i_i)|0);
 HEAP32[(($481)>>2)]=$480;
 var $482=(($477+20)|0);
 var $483=($pa_i_i_i_i|0)==($478|0);
 if($483){label=133;break;}else{label=129;break;}
 case 129: 
 var $485=$482;
 var $486=HEAP8[(($485)>>0)];
 var $487=$486&1;
 var $488=(($487<<24)>>24)==0;
 if($488){label=131;break;}else{label=130;break;}
 case 130: 
 var $490=(($477+28)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=(($477+24)|0);
 var $493=HEAP32[(($492)>>2)];
 var $500=$493;var $499=$491;label=132;break;
 case 131: 
 var $495=$482;
 var $496=(($495+1)|0);
 var $497=($486&255);
 var $498=$497>>>1;
 var $500=$498;var $499=$496;label=132;break;
 case 132: 
 var $499;
 var $500;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($419,$499,$500) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=140;break; }
 case 133: 
 var $501=(($pa_i_i_i_i+16)|0);
 var $502=(($477+32)|0);
 var $503=$501;
 var $504=$502;
 assert(12 % 1 === 0);HEAP32[(($503)>>2)]=HEAP32[(($504)>>2)];HEAP32[((($503)+(4))>>2)]=HEAP32[((($504)+(4))>>2)];HEAP32[((($503)+(8))>>2)]=HEAP32[((($504)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($14,$475,$477);
 var $505=(($pa_i_i_i_i+20)|0);
 HEAP32[(($505)>>2)]=$370;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$475,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=140;break; }
 case 134: 
 var $506=(($13+4)|0);
 var $507=HEAP8[(($506)>>0)];
 var $508=$507&1;
 var $509=(($508<<24)>>24)==0;
 if($509){label=135;break;}else{label=143;break;}
 case 135: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=136;break; } else { label=140;break; }
 case 136: 
 throw "Reached an unreachable!";
 case 137: 
 var $513$0 = ___cxa_find_matching_catch(); var $513$1 = tempRet0;
 var $514=$513$0;
 var $515=$513$1;
 var $516=HEAP8[(($309)>>0)];
 var $517=$516&1;
 var $518=(($517<<24)>>24)==0;
 if($518){var $_040=$514;var $_041=$515;label=292;break;}else{label=138;break;}
 case 138: 
 var $520=(($17+8)|0);
 var $521=HEAP32[(($520)>>2)];
 _free($521);
 var $_040=$514;var $_041=$515;label=292;break;
 case 139: 
 var $lpad_loopexit65$0 = ___cxa_find_matching_catch(); var $lpad_loopexit65$1 = tempRet0;
 var $lpad_phi67$1=$lpad_loopexit65$1;var $lpad_phi67$0=$lpad_loopexit65$0;label=141;break;
 case 140: 
 var $lpad_nonloopexit66$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit66$1 = tempRet0;
 var $lpad_phi67$1=$lpad_nonloopexit66$1;var $lpad_phi67$0=$lpad_nonloopexit66$0;label=141;break;
 case 141: 
 var $lpad_phi67$0;
 var $lpad_phi67$1;
 var $523=$lpad_phi67$0;
 var $524=$lpad_phi67$1;
 var $525=$419;
 var $526=HEAP8[(($525)>>0)];
 var $527=$526&1;
 var $528=(($527<<24)>>24)==0;
 if($528){var $_040=$523;var $_041=$524;label=292;break;}else{label=142;break;}
 case 142: 
 var $530=(($pa_i_i_i_i+12)|0);
 var $531=HEAP32[(($530)>>2)];
 _free($531);
 var $_040=$523;var $_041=$524;label=292;break;
 case 143: 
 var $533=HEAP8[(($449)>>0)];
 var $534=$533&1;
 var $535=(($534<<24)>>24)==0;
 if($535){label=293;break;}else{label=144;break;}
 case 144: 
 var $537=(($pa_i_i_i_i+12)|0);
 var $538=HEAP32[(($537)>>2)];
 _free($538);
 label=293;break;
 case 145: 
 var $540=$7;
 var $$etemp$36$0=8;
 var $$etemp$36$1=0;

 var $541=$8;
 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $542=$9;
 var $$etemp$38$0=4;
 var $$etemp$38$1=0;

 var $543=$h_i_i_i_i_i;
 var $$etemp$39$0=8;
 var $$etemp$39$1=0;

 var $544=$10;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $545=$h1_i_i_i_i_i;
 var $$etemp$41$0=8;
 var $$etemp$41$1=0;

 var $546=$11;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $547=$pa_i_i_i_i_i;
 var $$etemp$43$0=28;
 var $$etemp$43$1=0;

 var $548=$12;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $549=($s|0)==16;
 if($549){label=146;break;}else{label=161;break;}
 case 146: 
 var $551=_strlen($name);
 var $552=($551>>>0)>4294967279;
 if($552){label=147;break;}else{label=148;break;}
 case 147: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 148: 
 var $555=($551>>>0)<11;
 if($555){label=149;break;}else{label=150;break;}
 case 149: 
 var $557=$551<<1;
 var $558=(($557)&255);
 HEAP8[(($544)>>0)]=$558;
 var $559=$10;
 var $560=(($559+1)|0);
 var $__p_0_i_i_i_i_i_i=$560;label=155;break;
 case 150: 
 var $561=((($551)+(16))|0);
 var $562=$561&-16;
 var $563=($562|0)==0;
 var $_size_i_i_i_i_i_i=($563?1:$562);
 var $564=_malloc($_size_i_i_i_i_i_i);
 var $565=($564|0)==0;
 if($565){label=151;break;}else{var $_lcssa_i_i_i_i_i_i=$564;label=154;break;}
 case 151: 
 var $566=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $567=($566|0)==0;
 if($567){label=153;break;}else{label=152;break;}
 case 152: 
 var $569=$566;
 FUNCTION_TABLE[$569]();
 var $570=_malloc($_size_i_i_i_i_i_i);
 var $571=($570|0)==0;
 if($571){label=151;break;}else{var $_lcssa_i_i_i_i_i_i=$570;label=154;break;}
 case 153: 
 var $573=___cxa_allocate_exception(4);
 var $574=$573;
 HEAP32[(($574)>>2)]=15192;
 ___cxa_throw($573,26096,(782));
 throw "Reached an unreachable!";
 case 154: 
 var $_lcssa_i_i_i_i_i_i;
 var $575=(($10+8)|0);
 HEAP32[(($575)>>2)]=$_lcssa_i_i_i_i_i_i;
 var $576=$562|1;
 var $577=(($10)|0);
 HEAP32[(($577)>>2)]=$576;
 var $578=(($10+4)|0);
 HEAP32[(($578)>>2)]=$551;
 var $__p_0_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i;label=155;break;
 case 155: 
 var $__p_0_i_i_i_i_i_i;
 assert($551 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i, $name, $551)|0);
 var $579=(($__p_0_i_i_i_i_i_i+$551)|0);
 HEAP8[(($579)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i,$m,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=159;break; }
 case 156: 
 var $581=HEAP8[(($544)>>0)];
 var $582=$581&1;
 var $583=(($582<<24)>>24)==0;
 if($583){label=158;break;}else{label=157;break;}
 case 157: 
 var $585=(($10+8)|0);
 var $586=HEAP32[(($585)>>2)];
 _free($586);
 label=158;break;
 case 158: 
 var $587=(($h_i_i_i_i_i)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+4)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590)|0);
 assert(16 % 1 === 0);(_memcpy($591, $data, 16)|0);
 label=293;break;
 case 159: 
 var $593$0 = ___cxa_find_matching_catch(); var $593$1 = tempRet0;
 var $594=$593$0;
 var $595=$593$1;
 var $596=HEAP8[(($544)>>0)];
 var $597=$596&1;
 var $598=(($597<<24)>>24)==0;
 if($598){var $_036=$594;var $_037=$595;label=291;break;}else{label=160;break;}
 case 160: 
 var $600=(($10+8)|0);
 var $601=HEAP32[(($600)>>2)];
 _free($601);
 var $_036=$594;var $_037=$595;label=291;break;
 case 161: 
 var $603=($s>>>0)<16;
 if($603){label=162;break;}else{label=217;break;}
 case 162: 
 var $605=(((16)-($s))|0);
 var $606=_strlen($name);
 var $607=($606>>>0)>4294967279;
 if($607){label=163;break;}else{label=164;break;}
 case 163: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 164: 
 var $610=($606>>>0)<11;
 if($610){label=165;break;}else{label=166;break;}
 case 165: 
 var $612=$606<<1;
 var $613=(($612)&255);
 HEAP8[(($546)>>0)]=$613;
 var $614=$11;
 var $615=(($614+1)|0);
 var $__p_0_i3_i_i_i_i_i=$615;label=171;break;
 case 166: 
 var $616=((($606)+(16))|0);
 var $617=$616&-16;
 var $618=($617|0)==0;
 var $_size_i5_i_i_i_i_i=($618?1:$617);
 var $619=_malloc($_size_i5_i_i_i_i_i);
 var $620=($619|0)==0;
 if($620){label=167;break;}else{var $_lcssa_i7_i_i_i_i_i=$619;label=170;break;}
 case 167: 
 var $621=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $622=($621|0)==0;
 if($622){label=169;break;}else{label=168;break;}
 case 168: 
 var $624=$621;
 FUNCTION_TABLE[$624]();
 var $625=_malloc($_size_i5_i_i_i_i_i);
 var $626=($625|0)==0;
 if($626){label=167;break;}else{var $_lcssa_i7_i_i_i_i_i=$625;label=170;break;}
 case 169: 
 var $628=___cxa_allocate_exception(4);
 var $629=$628;
 HEAP32[(($629)>>2)]=15192;
 ___cxa_throw($628,26096,(782));
 throw "Reached an unreachable!";
 case 170: 
 var $_lcssa_i7_i_i_i_i_i;
 var $630=(($11+8)|0);
 HEAP32[(($630)>>2)]=$_lcssa_i7_i_i_i_i_i;
 var $631=$617|1;
 var $632=(($11)|0);
 HEAP32[(($632)>>2)]=$631;
 var $633=(($11+4)|0);
 HEAP32[(($633)>>2)]=$606;
 var $__p_0_i3_i_i_i_i_i=$_lcssa_i7_i_i_i_i_i;label=171;break;
 case 171: 
 var $__p_0_i3_i_i_i_i_i;
 assert($606 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i_i, $name, $606)|0);
 var $634=(($__p_0_i3_i_i_i_i_i+$606)|0);
 HEAP8[(($634)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i,$m,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=172;break; } else { label=209;break; }
 case 172: 
 var $636=HEAP8[(($546)>>0)];
 var $637=$636&1;
 var $638=(($637<<24)>>24)==0;
 if($638){label=174;break;}else{label=173;break;}
 case 173: 
 var $640=(($11+8)|0);
 var $641=HEAP32[(($640)>>2)];
 _free($641);
 label=174;break;
 case 174: 
 var $642=(($h1_i_i_i_i_i)|0);
 var $643=HEAP32[(($642)>>2)];
 var $644=(($643+4)|0);
 var $645=HEAP32[(($644)>>2)];
 var $646=(($645)|0);
 assert($s % 1 === 0);(_memcpy($646, $data, $s)|0);
 var $647=(($pa_i_i_i_i_i+4)|0);
 var $648=$647;
 var $storemerge_i_i_i_i_i_i=0;label=175;break;
 case 175: 
 var $storemerge_i_i_i_i_i_i;
 var $650=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($650){label=176;break;}else{label=177;break;}
 case 176: 
 var $652=(($648+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($652)>>2)]=0;
 var $653=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$653;label=175;break;
 case 177: 
 var $654=(($pa_i_i_i_i_i+4)|0);
 var $655=_strlen($name);
 var $656=($655>>>0)>4294967279;
 if($656){label=178;break;}else{label=180;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { label=212;break; }
 case 179: 
 throw "Reached an unreachable!";
 case 180: 
 var $659=($655>>>0)<11;
 if($659){label=181;break;}else{label=182;break;}
 case 181: 
 var $661=$655<<1;
 var $662=(($661)&255);
 HEAP8[(($548)>>0)]=$662;
 var $663=$12;
 var $664=(($663+1)|0);
 var $__p_0_i12_i_i_i_i_i=$664;label=189;break;
 case 182: 
 var $665=((($655)+(16))|0);
 var $666=$665&-16;
 var $667=($666|0)==0;
 var $_size_i16_i_i_i_i_i=($667?1:$666);
 var $668=_malloc($_size_i16_i_i_i_i_i);
 var $669=($668|0)==0;
 if($669){label=183;break;}else{var $_lcssa_i18_i_i_i_i_i=$668;label=188;break;}
 case 183: 
 var $670=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $671=($670|0)==0;
 if($671){label=186;break;}else{label=184;break;}
 case 184: 
 var $673=$670;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$673]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=211;break; }
 case 185: 
 var $674=_malloc($_size_i16_i_i_i_i_i);
 var $675=($674|0)==0;
 if($675){label=183;break;}else{var $_lcssa_i18_i_i_i_i_i=$674;label=188;break;}
 case 186: 
 var $677=___cxa_allocate_exception(4);
 var $678=$677;
 HEAP32[(($678)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($677,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=212;break; }
 case 187: 
 throw "Reached an unreachable!";
 case 188: 
 var $_lcssa_i18_i_i_i_i_i;
 var $679=(($12+8)|0);
 HEAP32[(($679)>>2)]=$_lcssa_i18_i_i_i_i_i;
 var $680=$666|1;
 var $681=(($12)|0);
 HEAP32[(($681)>>2)]=$680;
 var $682=(($12+4)|0);
 HEAP32[(($682)>>2)]=$655;
 var $__p_0_i12_i_i_i_i_i=$_lcssa_i18_i_i_i_i_i;label=189;break;
 case 189: 
 var $__p_0_i12_i_i_i_i_i;
 assert($655 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i_i, $name, $655)|0);
 var $683=(($__p_0_i12_i_i_i_i_i+$655)|0);
 HEAP8[(($683)>>0)]=0;
 var $684=$654;
 var $685=HEAP8[(($684)>>0)];
 var $686=$685&1;
 var $687=(($686<<24)>>24)==0;
 if($687){label=191;break;}else{label=190;break;}
 case 190: 
 var $689=(($pa_i_i_i_i_i+12)|0);
 var $690=HEAP32[(($689)>>2)];
 HEAP8[(($690)>>0)]=0;
 var $691=(($pa_i_i_i_i_i+8)|0);
 HEAP32[(($691)>>2)]=0;
 label=192;break;
 case 191: 
 var $693=$654;
 var $694=(($693+1)|0);
 HEAP8[(($694)>>0)]=0;
 HEAP8[(($684)>>0)]=0;
 label=192;break;
 case 192: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($654,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=193;break; }
 case 193: 
 var $696$0 = ___cxa_find_matching_catch(0); var $696$1 = tempRet0;
 var $697=$696$0;
 ___clang_call_terminate($697);
 throw "Reached an unreachable!";
 case 194: 
 assert(12 % 1 === 0);HEAP32[(($684)>>2)]=HEAP32[(($548)>>2)];HEAP32[((($684)+(4))>>2)]=HEAP32[((($548)+(4))>>2)];HEAP32[((($684)+(8))>>2)]=HEAP32[((($548)+(8))>>2)];
 var $698=$12;
 var $storemerge_i28_i_i_i_i=0;label=195;break;
 case 195: 
 var $storemerge_i28_i_i_i_i;
 var $700=($storemerge_i28_i_i_i_i>>>0)<3;
 if($700){label=196;break;}else{label=197;break;}
 case 196: 
 var $702=(($698+($storemerge_i28_i_i_i_i<<2))|0);
 HEAP32[(($702)>>2)]=0;
 var $703=((($storemerge_i28_i_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i_i=$703;label=195;break;
 case 197: 
 var $704=HEAP8[(($548)>>0)];
 var $705=$704&1;
 var $706=(($705<<24)>>24)==0;
 if($706){label=199;break;}else{label=198;break;}
 case 198: 
 var $708=(($12+8)|0);
 var $709=HEAP32[(($708)>>2)];
 _free($709);
 label=199;break;
 case 199: 
 var $710=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($9,$710,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=212;break; }
 case 200: 
 var $711=(($9)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713=(($712+16)|0);
 var $714=(($713)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($pa_i_i_i_i_i)|0);
 HEAP32[(($716)>>2)]=$715;
 var $717=(($712+20)|0);
 var $718=($pa_i_i_i_i_i|0)==($713|0);
 if($718){label=205;break;}else{label=201;break;}
 case 201: 
 var $720=$717;
 var $721=HEAP8[(($720)>>0)];
 var $722=$721&1;
 var $723=(($722<<24)>>24)==0;
 if($723){label=203;break;}else{label=202;break;}
 case 202: 
 var $725=(($712+28)|0);
 var $726=HEAP32[(($725)>>2)];
 var $727=(($712+24)|0);
 var $728=HEAP32[(($727)>>2)];
 var $735=$728;var $734=$726;label=204;break;
 case 203: 
 var $730=$717;
 var $731=(($730+1)|0);
 var $732=($721&255);
 var $733=$732>>>1;
 var $735=$733;var $734=$731;label=204;break;
 case 204: 
 var $734;
 var $735;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($654,$734,$735) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { label=212;break; }
 case 205: 
 var $736=(($pa_i_i_i_i_i+16)|0);
 var $737=(($712+32)|0);
 var $738=$736;
 var $739=$737;
 assert(12 % 1 === 0);HEAP32[(($738)>>2)]=HEAP32[(($739)>>2)];HEAP32[((($738)+(4))>>2)]=HEAP32[((($739)+(4))>>2)];HEAP32[((($738)+(8))>>2)]=HEAP32[((($739)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($8,$710,$712);
 var $740=(($pa_i_i_i_i_i+20)|0);
 HEAP32[(($740)>>2)]=$605;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$710,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { label=212;break; }
 case 206: 
 var $741=(($7+4)|0);
 var $742=HEAP8[(($741)>>0)];
 var $743=$742&1;
 var $744=(($743<<24)>>24)==0;
 if($744){label=207;break;}else{label=215;break;}
 case 207: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=208;break; } else { label=212;break; }
 case 208: 
 throw "Reached an unreachable!";
 case 209: 
 var $748$0 = ___cxa_find_matching_catch(); var $748$1 = tempRet0;
 var $749=$748$0;
 var $750=$748$1;
 var $751=HEAP8[(($546)>>0)];
 var $752=$751&1;
 var $753=(($752<<24)>>24)==0;
 if($753){var $_036=$749;var $_037=$750;label=291;break;}else{label=210;break;}
 case 210: 
 var $755=(($11+8)|0);
 var $756=HEAP32[(($755)>>2)];
 _free($756);
 var $_036=$749;var $_037=$750;label=291;break;
 case 211: 
 var $lpad_loopexit70$0 = ___cxa_find_matching_catch(); var $lpad_loopexit70$1 = tempRet0;
 var $lpad_phi72$1=$lpad_loopexit70$1;var $lpad_phi72$0=$lpad_loopexit70$0;label=213;break;
 case 212: 
 var $lpad_nonloopexit71$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit71$1 = tempRet0;
 var $lpad_phi72$1=$lpad_nonloopexit71$1;var $lpad_phi72$0=$lpad_nonloopexit71$0;label=213;break;
 case 213: 
 var $lpad_phi72$0;
 var $lpad_phi72$1;
 var $758=$lpad_phi72$0;
 var $759=$lpad_phi72$1;
 var $760=$654;
 var $761=HEAP8[(($760)>>0)];
 var $762=$761&1;
 var $763=(($762<<24)>>24)==0;
 if($763){var $_036=$758;var $_037=$759;label=291;break;}else{label=214;break;}
 case 214: 
 var $765=(($pa_i_i_i_i_i+12)|0);
 var $766=HEAP32[(($765)>>2)];
 _free($766);
 var $_036=$758;var $_037=$759;label=291;break;
 case 215: 
 var $768=HEAP8[(($684)>>0)];
 var $769=$768&1;
 var $770=(($769<<24)>>24)==0;
 if($770){label=293;break;}else{label=216;break;}
 case 216: 
 var $772=(($pa_i_i_i_i_i+12)|0);
 var $773=HEAP32[(($772)>>2)];
 _free($773);
 label=293;break;
 case 217: 
 var $775=$1;
 var $$etemp$45$0=8;
 var $$etemp$45$1=0;

 var $776=$2;
 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 var $777=$3;
 var $$etemp$47$0=4;
 var $$etemp$47$1=0;

 var $778=$h_i_i_i_i_i_i;
 var $$etemp$48$0=8;
 var $$etemp$48$1=0;

 var $779=$4;
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $780=$h1_i_i_i_i_i_i;
 var $$etemp$50$0=8;
 var $$etemp$50$1=0;

 var $781=$5;
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $782=$pa_i_i_i_i_i_i;
 var $$etemp$52$0=28;
 var $$etemp$52$1=0;

 var $783=$6;
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $784=($s|0)==32;
 if($784){label=218;break;}else{label=233;break;}
 case 218: 
 var $786=_strlen($name);
 var $787=($786>>>0)>4294967279;
 if($787){label=219;break;}else{label=220;break;}
 case 219: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 220: 
 var $790=($786>>>0)<11;
 if($790){label=221;break;}else{label=222;break;}
 case 221: 
 var $792=$786<<1;
 var $793=(($792)&255);
 HEAP8[(($779)>>0)]=$793;
 var $794=$4;
 var $795=(($794+1)|0);
 var $__p_0_i_i_i_i_i_i_i=$795;label=227;break;
 case 222: 
 var $796=((($786)+(16))|0);
 var $797=$796&-16;
 var $798=($797|0)==0;
 var $_size_i_i_i_i_i_i_i=($798?1:$797);
 var $799=_malloc($_size_i_i_i_i_i_i_i);
 var $800=($799|0)==0;
 if($800){label=223;break;}else{var $_lcssa_i_i_i_i_i_i_i=$799;label=226;break;}
 case 223: 
 var $801=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $802=($801|0)==0;
 if($802){label=225;break;}else{label=224;break;}
 case 224: 
 var $804=$801;
 FUNCTION_TABLE[$804]();
 var $805=_malloc($_size_i_i_i_i_i_i_i);
 var $806=($805|0)==0;
 if($806){label=223;break;}else{var $_lcssa_i_i_i_i_i_i_i=$805;label=226;break;}
 case 225: 
 var $808=___cxa_allocate_exception(4);
 var $809=$808;
 HEAP32[(($809)>>2)]=15192;
 ___cxa_throw($808,26096,(782));
 throw "Reached an unreachable!";
 case 226: 
 var $_lcssa_i_i_i_i_i_i_i;
 var $810=(($4+8)|0);
 HEAP32[(($810)>>2)]=$_lcssa_i_i_i_i_i_i_i;
 var $811=$797|1;
 var $812=(($4)|0);
 HEAP32[(($812)>>2)]=$811;
 var $813=(($4+4)|0);
 HEAP32[(($813)>>2)]=$786;
 var $__p_0_i_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i_i;label=227;break;
 case 227: 
 var $__p_0_i_i_i_i_i_i_i;
 assert($786 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i_i, $name, $786)|0);
 var $814=(($__p_0_i_i_i_i_i_i_i+$786)|0);
 HEAP8[(($814)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i_i,$m,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { label=231;break; }
 case 228: 
 var $816=HEAP8[(($779)>>0)];
 var $817=$816&1;
 var $818=(($817<<24)>>24)==0;
 if($818){label=230;break;}else{label=229;break;}
 case 229: 
 var $820=(($4+8)|0);
 var $821=HEAP32[(($820)>>2)];
 _free($821);
 label=230;break;
 case 230: 
 var $822=(($h_i_i_i_i_i_i)|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=(($823+4)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=(($825)|0);
 assert(32 % 1 === 0);(_memcpy($826, $data, 32)|0);
 label=293;break;
 case 231: 
 var $828$0 = ___cxa_find_matching_catch(); var $828$1 = tempRet0;
 var $829=$828$0;
 var $830=$828$1;
 var $831=HEAP8[(($779)>>0)];
 var $832=$831&1;
 var $833=(($832<<24)>>24)==0;
 if($833){var $_0=$829;var $_035=$830;label=290;break;}else{label=232;break;}
 case 232: 
 var $835=(($4+8)|0);
 var $836=HEAP32[(($835)>>2)];
 _free($836);
 var $_0=$829;var $_035=$830;label=290;break;
 case 233: 
 var $838=($s>>>0)<32;
 if($838){label=234;break;}else{label=289;break;}
 case 234: 
 var $840=(((32)-($s))|0);
 var $841=_strlen($name);
 var $842=($841>>>0)>4294967279;
 if($842){label=235;break;}else{label=236;break;}
 case 235: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 236: 
 var $845=($841>>>0)<11;
 if($845){label=237;break;}else{label=238;break;}
 case 237: 
 var $847=$841<<1;
 var $848=(($847)&255);
 HEAP8[(($781)>>0)]=$848;
 var $849=$5;
 var $850=(($849+1)|0);
 var $__p_0_i3_i_i_i_i_i_i=$850;label=243;break;
 case 238: 
 var $851=((($841)+(16))|0);
 var $852=$851&-16;
 var $853=($852|0)==0;
 var $_size_i5_i_i_i_i_i_i=($853?1:$852);
 var $854=_malloc($_size_i5_i_i_i_i_i_i);
 var $855=($854|0)==0;
 if($855){label=239;break;}else{var $_lcssa_i7_i_i_i_i_i_i=$854;label=242;break;}
 case 239: 
 var $856=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $857=($856|0)==0;
 if($857){label=241;break;}else{label=240;break;}
 case 240: 
 var $859=$856;
 FUNCTION_TABLE[$859]();
 var $860=_malloc($_size_i5_i_i_i_i_i_i);
 var $861=($860|0)==0;
 if($861){label=239;break;}else{var $_lcssa_i7_i_i_i_i_i_i=$860;label=242;break;}
 case 241: 
 var $863=___cxa_allocate_exception(4);
 var $864=$863;
 HEAP32[(($864)>>2)]=15192;
 ___cxa_throw($863,26096,(782));
 throw "Reached an unreachable!";
 case 242: 
 var $_lcssa_i7_i_i_i_i_i_i;
 var $865=(($5+8)|0);
 HEAP32[(($865)>>2)]=$_lcssa_i7_i_i_i_i_i_i;
 var $866=$852|1;
 var $867=(($5)|0);
 HEAP32[(($867)>>2)]=$866;
 var $868=(($5+4)|0);
 HEAP32[(($868)>>2)]=$841;
 var $__p_0_i3_i_i_i_i_i_i=$_lcssa_i7_i_i_i_i_i_i;label=243;break;
 case 243: 
 var $__p_0_i3_i_i_i_i_i_i;
 assert($841 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i_i_i, $name, $841)|0);
 var $869=(($__p_0_i3_i_i_i_i_i_i+$841)|0);
 HEAP8[(($869)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i_i,$m,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=281;break; }
 case 244: 
 var $871=HEAP8[(($781)>>0)];
 var $872=$871&1;
 var $873=(($872<<24)>>24)==0;
 if($873){label=246;break;}else{label=245;break;}
 case 245: 
 var $875=(($5+8)|0);
 var $876=HEAP32[(($875)>>2)];
 _free($876);
 label=246;break;
 case 246: 
 var $877=(($h1_i_i_i_i_i_i)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=(($878+4)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=(($880)|0);
 assert($s % 1 === 0);(_memcpy($881, $data, $s)|0);
 var $882=(($pa_i_i_i_i_i_i+4)|0);
 var $883=$882;
 var $storemerge_i_i_i_i_i_i_i=0;label=247;break;
 case 247: 
 var $storemerge_i_i_i_i_i_i_i;
 var $885=($storemerge_i_i_i_i_i_i_i>>>0)<3;
 if($885){label=248;break;}else{label=249;break;}
 case 248: 
 var $887=(($883+($storemerge_i_i_i_i_i_i_i<<2))|0);
 HEAP32[(($887)>>2)]=0;
 var $888=((($storemerge_i_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i_i=$888;label=247;break;
 case 249: 
 var $889=(($pa_i_i_i_i_i_i+4)|0);
 var $890=_strlen($name);
 var $891=($890>>>0)>4294967279;
 if($891){label=250;break;}else{label=252;break;}
 case 250: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=284;break; }
 case 251: 
 throw "Reached an unreachable!";
 case 252: 
 var $894=($890>>>0)<11;
 if($894){label=253;break;}else{label=254;break;}
 case 253: 
 var $896=$890<<1;
 var $897=(($896)&255);
 HEAP8[(($783)>>0)]=$897;
 var $898=$6;
 var $899=(($898+1)|0);
 var $__p_0_i12_i_i_i_i_i_i=$899;label=261;break;
 case 254: 
 var $900=((($890)+(16))|0);
 var $901=$900&-16;
 var $902=($901|0)==0;
 var $_size_i16_i_i_i_i_i_i=($902?1:$901);
 var $903=_malloc($_size_i16_i_i_i_i_i_i);
 var $904=($903|0)==0;
 if($904){label=255;break;}else{var $_lcssa_i18_i_i_i_i_i_i=$903;label=260;break;}
 case 255: 
 var $905=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $906=($905|0)==0;
 if($906){label=258;break;}else{label=256;break;}
 case 256: 
 var $908=$905;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$908]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=257;break; } else { label=283;break; }
 case 257: 
 var $909=_malloc($_size_i16_i_i_i_i_i_i);
 var $910=($909|0)==0;
 if($910){label=255;break;}else{var $_lcssa_i18_i_i_i_i_i_i=$909;label=260;break;}
 case 258: 
 var $912=___cxa_allocate_exception(4);
 var $913=$912;
 HEAP32[(($913)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($912,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=259;break; } else { label=284;break; }
 case 259: 
 throw "Reached an unreachable!";
 case 260: 
 var $_lcssa_i18_i_i_i_i_i_i;
 var $914=(($6+8)|0);
 HEAP32[(($914)>>2)]=$_lcssa_i18_i_i_i_i_i_i;
 var $915=$901|1;
 var $916=(($6)|0);
 HEAP32[(($916)>>2)]=$915;
 var $917=(($6+4)|0);
 HEAP32[(($917)>>2)]=$890;
 var $__p_0_i12_i_i_i_i_i_i=$_lcssa_i18_i_i_i_i_i_i;label=261;break;
 case 261: 
 var $__p_0_i12_i_i_i_i_i_i;
 assert($890 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i_i_i, $name, $890)|0);
 var $918=(($__p_0_i12_i_i_i_i_i_i+$890)|0);
 HEAP8[(($918)>>0)]=0;
 var $919=$889;
 var $920=HEAP8[(($919)>>0)];
 var $921=$920&1;
 var $922=(($921<<24)>>24)==0;
 if($922){label=263;break;}else{label=262;break;}
 case 262: 
 var $924=(($pa_i_i_i_i_i_i+12)|0);
 var $925=HEAP32[(($924)>>2)];
 HEAP8[(($925)>>0)]=0;
 var $926=(($pa_i_i_i_i_i_i+8)|0);
 HEAP32[(($926)>>2)]=0;
 label=264;break;
 case 263: 
 var $928=$889;
 var $929=(($928+1)|0);
 HEAP8[(($929)>>0)]=0;
 HEAP8[(($919)>>0)]=0;
 label=264;break;
 case 264: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($889,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { label=265;break; }
 case 265: 
 var $931$0 = ___cxa_find_matching_catch(0); var $931$1 = tempRet0;
 var $932=$931$0;
 ___clang_call_terminate($932);
 throw "Reached an unreachable!";
 case 266: 
 assert(12 % 1 === 0);HEAP32[(($919)>>2)]=HEAP32[(($783)>>2)];HEAP32[((($919)+(4))>>2)]=HEAP32[((($783)+(4))>>2)];HEAP32[((($919)+(8))>>2)]=HEAP32[((($783)+(8))>>2)];
 var $933=$6;
 var $storemerge_i28_i_i_i_i_i=0;label=267;break;
 case 267: 
 var $storemerge_i28_i_i_i_i_i;
 var $935=($storemerge_i28_i_i_i_i_i>>>0)<3;
 if($935){label=268;break;}else{label=269;break;}
 case 268: 
 var $937=(($933+($storemerge_i28_i_i_i_i_i<<2))|0);
 HEAP32[(($937)>>2)]=0;
 var $938=((($storemerge_i28_i_i_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i_i_i=$938;label=267;break;
 case 269: 
 var $939=HEAP8[(($783)>>0)];
 var $940=$939&1;
 var $941=(($940<<24)>>24)==0;
 if($941){label=271;break;}else{label=270;break;}
 case 270: 
 var $943=(($6+8)|0);
 var $944=HEAP32[(($943)>>2)];
 _free($944);
 label=271;break;
 case 271: 
 var $945=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($3,$945,$pa_i_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=284;break; }
 case 272: 
 var $946=(($3)|0);
 var $947=HEAP32[(($946)>>2)];
 var $948=(($947+16)|0);
 var $949=(($948)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=(($pa_i_i_i_i_i_i)|0);
 HEAP32[(($951)>>2)]=$950;
 var $952=(($947+20)|0);
 var $953=($pa_i_i_i_i_i_i|0)==($948|0);
 if($953){label=277;break;}else{label=273;break;}
 case 273: 
 var $955=$952;
 var $956=HEAP8[(($955)>>0)];
 var $957=$956&1;
 var $958=(($957<<24)>>24)==0;
 if($958){label=275;break;}else{label=274;break;}
 case 274: 
 var $960=(($947+28)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=(($947+24)|0);
 var $963=HEAP32[(($962)>>2)];
 var $970=$963;var $969=$961;label=276;break;
 case 275: 
 var $965=$952;
 var $966=(($965+1)|0);
 var $967=($956&255);
 var $968=$967>>>1;
 var $970=$968;var $969=$966;label=276;break;
 case 276: 
 var $969;
 var $970;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($889,$969,$970) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=277;break; } else { label=284;break; }
 case 277: 
 var $971=(($pa_i_i_i_i_i_i+16)|0);
 var $972=(($947+32)|0);
 var $973=$971;
 var $974=$972;
 assert(12 % 1 === 0);HEAP32[(($973)>>2)]=HEAP32[(($974)>>2)];HEAP32[((($973)+(4))>>2)]=HEAP32[((($974)+(4))>>2)];HEAP32[((($973)+(8))>>2)]=HEAP32[((($974)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($2,$945,$947);
 var $975=(($pa_i_i_i_i_i_i+20)|0);
 HEAP32[(($975)>>2)]=$840;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$945,$pa_i_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=284;break; }
 case 278: 
 var $976=(($1+4)|0);
 var $977=HEAP8[(($976)>>0)];
 var $978=$977&1;
 var $979=(($978<<24)>>24)==0;
 if($979){label=279;break;}else{label=287;break;}
 case 279: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=280;break; } else { label=284;break; }
 case 280: 
 throw "Reached an unreachable!";
 case 281: 
 var $983$0 = ___cxa_find_matching_catch(); var $983$1 = tempRet0;
 var $984=$983$0;
 var $985=$983$1;
 var $986=HEAP8[(($781)>>0)];
 var $987=$986&1;
 var $988=(($987<<24)>>24)==0;
 if($988){var $_0=$984;var $_035=$985;label=290;break;}else{label=282;break;}
 case 282: 
 var $990=(($5+8)|0);
 var $991=HEAP32[(($990)>>2)];
 _free($991);
 var $_0=$984;var $_035=$985;label=290;break;
 case 283: 
 var $lpad_loopexit75$0 = ___cxa_find_matching_catch(); var $lpad_loopexit75$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit75$1;var $lpad_phi77$0=$lpad_loopexit75$0;label=285;break;
 case 284: 
 var $lpad_nonloopexit76$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit76$1 = tempRet0;
 var $lpad_phi77$1=$lpad_nonloopexit76$1;var $lpad_phi77$0=$lpad_nonloopexit76$0;label=285;break;
 case 285: 
 var $lpad_phi77$0;
 var $lpad_phi77$1;
 var $993=$lpad_phi77$0;
 var $994=$lpad_phi77$1;
 var $995=$889;
 var $996=HEAP8[(($995)>>0)];
 var $997=$996&1;
 var $998=(($997<<24)>>24)==0;
 if($998){var $_0=$993;var $_035=$994;label=290;break;}else{label=286;break;}
 case 286: 
 var $1000=(($pa_i_i_i_i_i_i+12)|0);
 var $1001=HEAP32[(($1000)>>2)];
 _free($1001);
 var $_0=$993;var $_035=$994;label=290;break;
 case 287: 
 var $1003=HEAP8[(($919)>>0)];
 var $1004=$1003&1;
 var $1005=(($1004<<24)>>24)==0;
 if($1005){label=293;break;}else{label=288;break;}
 case 288: 
 var $1007=(($pa_i_i_i_i_i_i+12)|0);
 var $1008=HEAP32[(($1007)>>2)];
 _free($1008);
 label=293;break;
 case 289: 
 __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi64EEENS1_2K5IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEENS4_ILi128EEEEEE9AddAttribILi2EEEvRS3_PKcjPv($m,$name,$s,$data);
 label=293;break;
 case 290: 
 var $_035;
 var $_0;
 var $1010$0=$_0;
 var $1010$1=0;
 var $1011$0=$1010$0;
 var $1011$1=$_035;
 ___resumeException($1011$0)
 case 291: 
 var $_037;
 var $_036;
 var $1012$0=$_036;
 var $1012$1=0;
 var $1013$0=$1012$0;
 var $1013$1=$_037;
 ___resumeException($1013$0)
 case 292: 
 var $_041;
 var $_040;
 var $1014$0=$_040;
 var $1014$1=0;
 var $1015$0=$1014$0;
 var $1015$1=$_041;
 ___resumeException($1015$0)
 case 293: 
 STACKTOP=sp;return;
 case 294: 
 var $_039;
 var $_038;
 var $1016$0=$_039;
 var $1016$1=0;
 var $1017$0=$1016$0;
 var $1017$1=$_038;
 ___resumeException($1017$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeIlEENS0_7TriMeshINSt3__16vectorI8MyVertexNS6_9allocatorIS8_EEEENS7_I6MyFaceNS9_ISC_EEEENS7_I6MyEdgeNS9_ISF_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS6_12basic_stringIcNS6_11char_traitsIcEENS9_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=4;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18056;
 var $67=_malloc(4);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(4);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 HEAP32[(($78)>>2)]=0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=8;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18248;
 var $67=_malloc(8);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(8);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 var $79=$_lcssa_i_i;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($79)|0);
 tempBigInt=$$etemp$0$0;HEAP8[(($st$1$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$1$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$1$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$1$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$2$1=(($79+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[(($st$2$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$1)+(3))>>0)]=tempBigInt&0xff;
 var $80=(($_lcssa_i+4)|0);
 var $81=$80;
 HEAP32[(($81)>>2)]=$78;
 var $82=$_lcssa_i;
 var $83=(($h)|0);
 HEAP32[(($83)>>2)]=$82;
 var $84=(($m+112)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=((($85)+(1))|0);
 HEAP32[(($84)>>2)]=$86;
 var $87=(($h+24)|0);
 HEAP32[(($87)>>2)]=$86;
 var $88=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$88,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $90=(($1)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+16)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($91+40)|0);
 var $95=(($agg_result)|0);
 var $96=$93;
 HEAP32[(($95)>>2)]=$96;
 var $97=(($agg_result+4)|0);
 var $98=HEAP32[(($94)>>2)];
 HEAP32[(($97)>>2)]=$98;
 var $99=$10;
 var $100=HEAP8[(($99)>>0)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=35;break;}else{label=34;break;}
 case 34: 
 var $104=(($h+12)|0);
 var $105=HEAP32[(($104)>>2)];
 _free($105);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $106=$lpad_phi$0;
 var $107=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$106;var $_04=$107;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $109=$10;
 var $110=HEAP8[(($109)>>0)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 var $114=(($h+12)|0);
 var $115=HEAP32[(($114)>>2)];
 _free($115);
 label=41;break;
 case 41: 
 var $116$0=$_0;
 var $116$1=0;
 var $117$0=$116$0;
 var $117$1=$_04;
 ___resumeException($117$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=16;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18536;
 var $67=_malloc(16);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(16);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 16)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=32;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18392;
 var $67=_malloc(32);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(32);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 32)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi64EEENS1_2K5IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEENS4_ILi128EEEEEE9AddAttribILi2EEEvRS3_PKcjPv($m,$name,$s,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+840)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $h_i_i_i_i_i_i=(sp)+(24);
 var $4=(sp)+(32);
 var $h1_i_i_i_i_i_i=(sp)+(48);
 var $5=(sp)+(56);
 var $pa_i_i_i_i_i_i=(sp)+(72);
 var $6=(sp)+(104);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $h_i_i_i_i_i=(sp)+(144);
 var $10=(sp)+(152);
 var $h1_i_i_i_i_i=(sp)+(168);
 var $11=(sp)+(176);
 var $pa_i_i_i_i_i=(sp)+(192);
 var $12=(sp)+(224);
 var $13=(sp)+(240);
 var $14=(sp)+(248);
 var $15=(sp)+(256);
 var $h_i_i_i_i=(sp)+(264);
 var $16=(sp)+(272);
 var $h1_i_i_i_i=(sp)+(288);
 var $17=(sp)+(296);
 var $pa_i_i_i_i=(sp)+(312);
 var $18=(sp)+(344);
 var $19=(sp)+(360);
 var $20=(sp)+(368);
 var $21=(sp)+(376);
 var $h_i_i_i=(sp)+(384);
 var $22=(sp)+(392);
 var $h1_i_i_i=(sp)+(408);
 var $23=(sp)+(416);
 var $pa_i_i_i=(sp)+(432);
 var $24=(sp)+(464);
 var $25=(sp)+(480);
 var $26=(sp)+(488);
 var $27=(sp)+(496);
 var $h_i_i=(sp)+(504);
 var $28=(sp)+(512);
 var $h1_i_i=(sp)+(528);
 var $29=(sp)+(536);
 var $pa_i_i=(sp)+(552);
 var $30=(sp)+(584);
 var $31=(sp)+(600);
 var $32=(sp)+(608);
 var $33=(sp)+(616);
 var $h_i=(sp)+(624);
 var $34=(sp)+(632);
 var $h1_i=(sp)+(648);
 var $35=(sp)+(656);
 var $pa_i=(sp)+(672);
 var $36=(sp)+(704);
 var $37=(sp)+(720);
 var $38=(sp)+(728);
 var $39=(sp)+(736);
 var $h=(sp)+(744);
 var $40=(sp)+(752);
 var $h1=(sp)+(768);
 var $41=(sp)+(776);
 var $pa=(sp)+(792);
 var $42=(sp)+(824);
 var $43=($s|0)==64;
 if($43){label=2;break;}else{label=17;break;}
 case 2: 
 var $45=_strlen($name);
 var $46=($45>>>0)>4294967279;
 if($46){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $49=($45>>>0)<11;
 if($49){label=5;break;}else{label=6;break;}
 case 5: 
 var $51=$45<<1;
 var $52=(($51)&255);
 var $53=$40;
 HEAP8[(($53)>>0)]=$52;
 var $54=$40;
 var $55=(($54+1)|0);
 var $__p_0_i=$55;label=11;break;
 case 6: 
 var $56=((($45)+(16))|0);
 var $57=$56&-16;
 var $58=($57|0)==0;
 var $_size_i=($58?1:$57);
 var $59=_malloc($_size_i);
 var $60=($59|0)==0;
 if($60){label=7;break;}else{var $_lcssa_i=$59;label=10;break;}
 case 7: 
 var $61=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $62=($61|0)==0;
 if($62){label=9;break;}else{label=8;break;}
 case 8: 
 var $64=$61;
 FUNCTION_TABLE[$64]();
 var $65=_malloc($_size_i);
 var $66=($65|0)==0;
 if($66){label=7;break;}else{var $_lcssa_i=$65;label=10;break;}
 case 9: 
 var $68=___cxa_allocate_exception(4);
 var $69=$68;
 HEAP32[(($69)>>2)]=15192;
 ___cxa_throw($68,26096,(782));
 throw "Reached an unreachable!";
 case 10: 
 var $_lcssa_i;
 var $70=(($40+8)|0);
 HEAP32[(($70)>>2)]=$_lcssa_i;
 var $71=$57|1;
 var $72=(($40)|0);
 HEAP32[(($72)>>2)]=$71;
 var $73=(($40+4)|0);
 HEAP32[(($73)>>2)]=$45;
 var $__p_0_i=$_lcssa_i;label=11;break;
 case 11: 
 var $__p_0_i;
 assert($45 % 1 === 0);(_memcpy($__p_0_i, $name, $45)|0);
 var $74=(($__p_0_i+$45)|0);
 HEAP8[(($74)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h,$m,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 var $76=$40;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=14;break;}else{label=13;break;}
 case 13: 
 var $81=(($40+8)|0);
 var $82=HEAP32[(($81)>>2)];
 _free($82);
 label=14;break;
 case 14: 
 var $83=(($h)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86)|0);
 assert(64 % 1 === 0);(_memcpy($87, $data, 64)|0);
 label=512;break;
 case 15: 
 var $89$0 = ___cxa_find_matching_catch(); var $89$1 = tempRet0;
 var $90=$89$0;
 var $91=$89$1;
 var $92=$40;
 var $93=HEAP8[(($92)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $_038=$91;var $_039=$90;label=513;break;}else{label=16;break;}
 case 16: 
 var $97=(($40+8)|0);
 var $98=HEAP32[(($97)>>2)];
 _free($98);
 var $_038=$91;var $_039=$90;label=513;break;
 case 17: 
 var $100=($s>>>0)<64;
 if($100){label=18;break;}else{label=73;break;}
 case 18: 
 var $102=(((64)-($s))|0);
 var $103=_strlen($name);
 var $104=($103>>>0)>4294967279;
 if($104){label=19;break;}else{label=20;break;}
 case 19: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 20: 
 var $107=($103>>>0)<11;
 if($107){label=21;break;}else{label=22;break;}
 case 21: 
 var $109=$103<<1;
 var $110=(($109)&255);
 var $111=$41;
 HEAP8[(($111)>>0)]=$110;
 var $112=$41;
 var $113=(($112+1)|0);
 var $__p_0_i3=$113;label=27;break;
 case 22: 
 var $114=((($103)+(16))|0);
 var $115=$114&-16;
 var $116=($115|0)==0;
 var $_size_i5=($116?1:$115);
 var $117=_malloc($_size_i5);
 var $118=($117|0)==0;
 if($118){label=23;break;}else{var $_lcssa_i7=$117;label=26;break;}
 case 23: 
 var $119=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $120=($119|0)==0;
 if($120){label=25;break;}else{label=24;break;}
 case 24: 
 var $122=$119;
 FUNCTION_TABLE[$122]();
 var $123=_malloc($_size_i5);
 var $124=($123|0)==0;
 if($124){label=23;break;}else{var $_lcssa_i7=$123;label=26;break;}
 case 25: 
 var $126=___cxa_allocate_exception(4);
 var $127=$126;
 HEAP32[(($127)>>2)]=15192;
 ___cxa_throw($126,26096,(782));
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i7;
 var $128=(($41+8)|0);
 HEAP32[(($128)>>2)]=$_lcssa_i7;
 var $129=$115|1;
 var $130=(($41)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=(($41+4)|0);
 HEAP32[(($131)>>2)]=$103;
 var $__p_0_i3=$_lcssa_i7;label=27;break;
 case 27: 
 var $__p_0_i3;
 assert($103 % 1 === 0);(_memcpy($__p_0_i3, $name, $103)|0);
 var $132=(($__p_0_i3+$103)|0);
 HEAP8[(($132)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1,$m,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=65;break; }
 case 28: 
 var $134=$41;
 var $135=HEAP8[(($134)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=30;break;}else{label=29;break;}
 case 29: 
 var $139=(($41+8)|0);
 var $140=HEAP32[(($139)>>2)];
 _free($140);
 label=30;break;
 case 30: 
 var $141=(($h1)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144)|0);
 assert($s % 1 === 0);(_memcpy($145, $data, $s)|0);
 var $146=(($pa+4)|0);
 var $147=$146;
 var $storemerge_i=0;label=31;break;
 case 31: 
 var $storemerge_i;
 var $149=($storemerge_i>>>0)<3;
 if($149){label=32;break;}else{label=33;break;}
 case 32: 
 var $151=(($147+($storemerge_i<<2))|0);
 HEAP32[(($151)>>2)]=0;
 var $152=((($storemerge_i)+(1))|0);
 var $storemerge_i=$152;label=31;break;
 case 33: 
 var $153=(($pa+4)|0);
 var $154=_strlen($name);
 var $155=($154>>>0)>4294967279;
 if($155){label=34;break;}else{label=36;break;}
 case 34: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=68;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $158=($154>>>0)<11;
 if($158){label=37;break;}else{label=38;break;}
 case 37: 
 var $160=$154<<1;
 var $161=(($160)&255);
 var $162=$42;
 HEAP8[(($162)>>0)]=$161;
 var $163=$42;
 var $164=(($163+1)|0);
 var $__p_0_i12=$164;label=45;break;
 case 38: 
 var $165=((($154)+(16))|0);
 var $166=$165&-16;
 var $167=($166|0)==0;
 var $_size_i16=($167?1:$166);
 var $168=_malloc($_size_i16);
 var $169=($168|0)==0;
 if($169){label=39;break;}else{var $_lcssa_i18=$168;label=44;break;}
 case 39: 
 var $170=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $171=($170|0)==0;
 if($171){label=42;break;}else{label=40;break;}
 case 40: 
 var $173=$170;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=67;break; }
 case 41: 
 var $174=_malloc($_size_i16);
 var $175=($174|0)==0;
 if($175){label=39;break;}else{var $_lcssa_i18=$174;label=44;break;}
 case 42: 
 var $177=___cxa_allocate_exception(4);
 var $178=$177;
 HEAP32[(($178)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($177,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=68;break; }
 case 43: 
 throw "Reached an unreachable!";
 case 44: 
 var $_lcssa_i18;
 var $179=(($42+8)|0);
 HEAP32[(($179)>>2)]=$_lcssa_i18;
 var $180=$166|1;
 var $181=(($42)|0);
 HEAP32[(($181)>>2)]=$180;
 var $182=(($42+4)|0);
 HEAP32[(($182)>>2)]=$154;
 var $__p_0_i12=$_lcssa_i18;label=45;break;
 case 45: 
 var $__p_0_i12;
 assert($154 % 1 === 0);(_memcpy($__p_0_i12, $name, $154)|0);
 var $184=(($__p_0_i12+$154)|0);
 HEAP8[(($184)>>0)]=0;
 var $185=$153;
 var $186=HEAP8[(($185)>>0)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=47;break;}else{label=46;break;}
 case 46: 
 var $190=(($pa+12)|0);
 var $191=HEAP32[(($190)>>2)];
 HEAP8[(($191)>>0)]=0;
 var $192=(($pa+8)|0);
 HEAP32[(($192)>>2)]=0;
 label=48;break;
 case 47: 
 var $194=$153;
 var $195=(($194+1)|0);
 HEAP8[(($195)>>0)]=0;
 HEAP8[(($185)>>0)]=0;
 label=48;break;
 case 48: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($153,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $197$0 = ___cxa_find_matching_catch(0); var $197$1 = tempRet0;
 var $198=$197$0;
 ___clang_call_terminate($198);
 throw "Reached an unreachable!";
 case 50: 
 var $199=$42;
 assert(12 % 1 === 0);HEAP32[(($185)>>2)]=HEAP32[(($199)>>2)];HEAP32[((($185)+(4))>>2)]=HEAP32[((($199)+(4))>>2)];HEAP32[((($185)+(8))>>2)]=HEAP32[((($199)+(8))>>2)];
 var $200=$42;
 var $storemerge=0;label=51;break;
 case 51: 
 var $storemerge;
 var $202=($storemerge>>>0)<3;
 if($202){label=52;break;}else{label=53;break;}
 case 52: 
 var $204=(($200+($storemerge<<2))|0);
 HEAP32[(($204)>>2)]=0;
 var $205=((($storemerge)+(1))|0);
 var $storemerge=$205;label=51;break;
 case 53: 
 var $206=HEAP8[(($199)>>0)];
 var $207=$206&1;
 var $208=(($207<<24)>>24)==0;
 if($208){label=55;break;}else{label=54;break;}
 case 54: 
 var $210=(($42+8)|0);
 var $211=HEAP32[(($210)>>2)];
 _free($211);
 label=55;break;
 case 55: 
 var $212=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($39,$212,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=68;break; }
 case 56: 
 var $214=(($39)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+16)|0);
 var $217=(($216)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($pa)|0);
 HEAP32[(($219)>>2)]=$218;
 var $220=(($215+20)|0);
 var $221=($pa|0)==($216|0);
 if($221){label=61;break;}else{label=57;break;}
 case 57: 
 var $223=$220;
 var $224=HEAP8[(($223)>>0)];
 var $225=$224&1;
 var $226=(($225<<24)>>24)==0;
 if($226){label=59;break;}else{label=58;break;}
 case 58: 
 var $228=(($215+28)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($215+24)|0);
 var $231=HEAP32[(($230)>>2)];
 var $238=$231;var $237=$229;label=60;break;
 case 59: 
 var $233=$220;
 var $234=(($233+1)|0);
 var $235=($224&255);
 var $236=$235>>>1;
 var $238=$236;var $237=$234;label=60;break;
 case 60: 
 var $237;
 var $238;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($153,$237,$238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=68;break; }
 case 61: 
 var $240=(($pa+16)|0);
 var $241=(($215+32)|0);
 var $242=$240;
 var $243=$241;
 assert(12 % 1 === 0);HEAP32[(($242)>>2)]=HEAP32[(($243)>>2)];HEAP32[((($242)+(4))>>2)]=HEAP32[((($243)+(4))>>2)];HEAP32[((($242)+(8))>>2)]=HEAP32[((($243)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($38,$212,$215);
 var $244=(($pa+20)|0);
 HEAP32[(($244)>>2)]=$102;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($37,$212,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=68;break; }
 case 62: 
 var $246=(($37+4)|0);
 var $247=HEAP8[(($246)>>0)];
 var $248=$247&1;
 var $249=(($248<<24)>>24)==0;
 if($249){label=63;break;}else{label=71;break;}
 case 63: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=68;break; }
 case 64: 
 throw "Reached an unreachable!";
 case 65: 
 var $253$0 = ___cxa_find_matching_catch(); var $253$1 = tempRet0;
 var $254=$253$0;
 var $255=$253$1;
 var $256=$41;
 var $257=HEAP8[(($256)>>0)];
 var $258=$257&1;
 var $259=(($258<<24)>>24)==0;
 if($259){var $_038=$255;var $_039=$254;label=513;break;}else{label=66;break;}
 case 66: 
 var $261=(($41+8)|0);
 var $262=HEAP32[(($261)>>2)];
 _free($262);
 var $_038=$255;var $_039=$254;label=513;break;
 case 67: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=69;break;
 case 68: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=69;break;
 case 69: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $264=$lpad_phi$0;
 var $265=$lpad_phi$1;
 var $266=$153;
 var $267=HEAP8[(($266)>>0)];
 var $268=$267&1;
 var $269=(($268<<24)>>24)==0;
 if($269){var $_038=$265;var $_039=$264;label=513;break;}else{label=70;break;}
 case 70: 
 var $271=(($pa+12)|0);
 var $272=HEAP32[(($271)>>2)];
 _free($272);
 var $_038=$265;var $_039=$264;label=513;break;
 case 71: 
 var $274=HEAP8[(($185)>>0)];
 var $275=$274&1;
 var $276=(($275<<24)>>24)==0;
 if($276){label=512;break;}else{label=72;break;}
 case 72: 
 var $278=(($pa+12)|0);
 var $279=HEAP32[(($278)>>2)];
 _free($279);
 label=512;break;
 case 73: 
 var $281=$31;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $282=$32;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $283=$33;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $284=$h_i;
 var $$etemp$3$0=8;
 var $$etemp$3$1=0;

 var $285=$34;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $286=$h1_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $287=$35;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $288=$pa_i;
 var $$etemp$7$0=28;
 var $$etemp$7$1=0;

 var $289=$36;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $290=($s|0)==128;
 if($290){label=74;break;}else{label=89;break;}
 case 74: 
 var $292=_strlen($name);
 var $293=($292>>>0)>4294967279;
 if($293){label=75;break;}else{label=76;break;}
 case 75: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 76: 
 var $296=($292>>>0)<11;
 if($296){label=77;break;}else{label=78;break;}
 case 77: 
 var $298=$292<<1;
 var $299=(($298)&255);
 HEAP8[(($285)>>0)]=$299;
 var $300=$34;
 var $301=(($300+1)|0);
 var $__p_0_i_i=$301;label=83;break;
 case 78: 
 var $302=((($292)+(16))|0);
 var $303=$302&-16;
 var $304=($303|0)==0;
 var $_size_i_i=($304?1:$303);
 var $305=_malloc($_size_i_i);
 var $306=($305|0)==0;
 if($306){label=79;break;}else{var $_lcssa_i_i=$305;label=82;break;}
 case 79: 
 var $307=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $308=($307|0)==0;
 if($308){label=81;break;}else{label=80;break;}
 case 80: 
 var $310=$307;
 FUNCTION_TABLE[$310]();
 var $311=_malloc($_size_i_i);
 var $312=($311|0)==0;
 if($312){label=79;break;}else{var $_lcssa_i_i=$311;label=82;break;}
 case 81: 
 var $314=___cxa_allocate_exception(4);
 var $315=$314;
 HEAP32[(($315)>>2)]=15192;
 ___cxa_throw($314,26096,(782));
 throw "Reached an unreachable!";
 case 82: 
 var $_lcssa_i_i;
 var $316=(($34+8)|0);
 HEAP32[(($316)>>2)]=$_lcssa_i_i;
 var $317=$303|1;
 var $318=(($34)|0);
 HEAP32[(($318)>>2)]=$317;
 var $319=(($34+4)|0);
 HEAP32[(($319)>>2)]=$292;
 var $__p_0_i_i=$_lcssa_i_i;label=83;break;
 case 83: 
 var $__p_0_i_i;
 assert($292 % 1 === 0);(_memcpy($__p_0_i_i, $name, $292)|0);
 var $320=(($__p_0_i_i+$292)|0);
 HEAP8[(($320)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i,$m,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=87;break; }
 case 84: 
 var $322=HEAP8[(($285)>>0)];
 var $323=$322&1;
 var $324=(($323<<24)>>24)==0;
 if($324){label=86;break;}else{label=85;break;}
 case 85: 
 var $326=(($34+8)|0);
 var $327=HEAP32[(($326)>>2)];
 _free($327);
 label=86;break;
 case 86: 
 var $328=(($h_i)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($329+4)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($331)|0);
 assert(128 % 1 === 0);(_memcpy($332, $data, 128)|0);
 label=512;break;
 case 87: 
 var $334$0 = ___cxa_find_matching_catch(); var $334$1 = tempRet0;
 var $335=$334$0;
 var $336=$334$1;
 var $337=HEAP8[(($285)>>0)];
 var $338=$337&1;
 var $339=(($338<<24)>>24)==0;
 if($339){var $_046=$335;var $_047=$336;label=511;break;}else{label=88;break;}
 case 88: 
 var $341=(($34+8)|0);
 var $342=HEAP32[(($341)>>2)];
 _free($342);
 var $_046=$335;var $_047=$336;label=511;break;
 case 89: 
 var $344=($s>>>0)<128;
 if($344){label=90;break;}else{label=145;break;}
 case 90: 
 var $346=(((128)-($s))|0);
 var $347=_strlen($name);
 var $348=($347>>>0)>4294967279;
 if($348){label=91;break;}else{label=92;break;}
 case 91: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 92: 
 var $351=($347>>>0)<11;
 if($351){label=93;break;}else{label=94;break;}
 case 93: 
 var $353=$347<<1;
 var $354=(($353)&255);
 HEAP8[(($287)>>0)]=$354;
 var $355=$35;
 var $356=(($355+1)|0);
 var $__p_0_i3_i=$356;label=99;break;
 case 94: 
 var $357=((($347)+(16))|0);
 var $358=$357&-16;
 var $359=($358|0)==0;
 var $_size_i5_i=($359?1:$358);
 var $360=_malloc($_size_i5_i);
 var $361=($360|0)==0;
 if($361){label=95;break;}else{var $_lcssa_i7_i=$360;label=98;break;}
 case 95: 
 var $362=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $363=($362|0)==0;
 if($363){label=97;break;}else{label=96;break;}
 case 96: 
 var $365=$362;
 FUNCTION_TABLE[$365]();
 var $366=_malloc($_size_i5_i);
 var $367=($366|0)==0;
 if($367){label=95;break;}else{var $_lcssa_i7_i=$366;label=98;break;}
 case 97: 
 var $369=___cxa_allocate_exception(4);
 var $370=$369;
 HEAP32[(($370)>>2)]=15192;
 ___cxa_throw($369,26096,(782));
 throw "Reached an unreachable!";
 case 98: 
 var $_lcssa_i7_i;
 var $371=(($35+8)|0);
 HEAP32[(($371)>>2)]=$_lcssa_i7_i;
 var $372=$358|1;
 var $373=(($35)|0);
 HEAP32[(($373)>>2)]=$372;
 var $374=(($35+4)|0);
 HEAP32[(($374)>>2)]=$347;
 var $__p_0_i3_i=$_lcssa_i7_i;label=99;break;
 case 99: 
 var $__p_0_i3_i;
 assert($347 % 1 === 0);(_memcpy($__p_0_i3_i, $name, $347)|0);
 var $375=(($__p_0_i3_i+$347)|0);
 HEAP8[(($375)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i,$m,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=137;break; }
 case 100: 
 var $377=HEAP8[(($287)>>0)];
 var $378=$377&1;
 var $379=(($378<<24)>>24)==0;
 if($379){label=102;break;}else{label=101;break;}
 case 101: 
 var $381=(($35+8)|0);
 var $382=HEAP32[(($381)>>2)];
 _free($382);
 label=102;break;
 case 102: 
 var $383=(($h1_i)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(($384+4)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386)|0);
 assert($s % 1 === 0);(_memcpy($387, $data, $s)|0);
 var $388=(($pa_i+4)|0);
 var $389=$388;
 var $storemerge_i_i=0;label=103;break;
 case 103: 
 var $storemerge_i_i;
 var $391=($storemerge_i_i>>>0)<3;
 if($391){label=104;break;}else{label=105;break;}
 case 104: 
 var $393=(($389+($storemerge_i_i<<2))|0);
 HEAP32[(($393)>>2)]=0;
 var $394=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$394;label=103;break;
 case 105: 
 var $395=(($pa_i+4)|0);
 var $396=_strlen($name);
 var $397=($396>>>0)>4294967279;
 if($397){label=106;break;}else{label=108;break;}
 case 106: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=140;break; }
 case 107: 
 throw "Reached an unreachable!";
 case 108: 
 var $400=($396>>>0)<11;
 if($400){label=109;break;}else{label=110;break;}
 case 109: 
 var $402=$396<<1;
 var $403=(($402)&255);
 HEAP8[(($289)>>0)]=$403;
 var $404=$36;
 var $405=(($404+1)|0);
 var $__p_0_i12_i=$405;label=117;break;
 case 110: 
 var $406=((($396)+(16))|0);
 var $407=$406&-16;
 var $408=($407|0)==0;
 var $_size_i16_i=($408?1:$407);
 var $409=_malloc($_size_i16_i);
 var $410=($409|0)==0;
 if($410){label=111;break;}else{var $_lcssa_i18_i=$409;label=116;break;}
 case 111: 
 var $411=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $412=($411|0)==0;
 if($412){label=114;break;}else{label=112;break;}
 case 112: 
 var $414=$411;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$414]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=139;break; }
 case 113: 
 var $415=_malloc($_size_i16_i);
 var $416=($415|0)==0;
 if($416){label=111;break;}else{var $_lcssa_i18_i=$415;label=116;break;}
 case 114: 
 var $418=___cxa_allocate_exception(4);
 var $419=$418;
 HEAP32[(($419)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($418,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=140;break; }
 case 115: 
 throw "Reached an unreachable!";
 case 116: 
 var $_lcssa_i18_i;
 var $420=(($36+8)|0);
 HEAP32[(($420)>>2)]=$_lcssa_i18_i;
 var $421=$407|1;
 var $422=(($36)|0);
 HEAP32[(($422)>>2)]=$421;
 var $423=(($36+4)|0);
 HEAP32[(($423)>>2)]=$396;
 var $__p_0_i12_i=$_lcssa_i18_i;label=117;break;
 case 117: 
 var $__p_0_i12_i;
 assert($396 % 1 === 0);(_memcpy($__p_0_i12_i, $name, $396)|0);
 var $424=(($__p_0_i12_i+$396)|0);
 HEAP8[(($424)>>0)]=0;
 var $425=$395;
 var $426=HEAP8[(($425)>>0)];
 var $427=$426&1;
 var $428=(($427<<24)>>24)==0;
 if($428){label=119;break;}else{label=118;break;}
 case 118: 
 var $430=(($pa_i+12)|0);
 var $431=HEAP32[(($430)>>2)];
 HEAP8[(($431)>>0)]=0;
 var $432=(($pa_i+8)|0);
 HEAP32[(($432)>>2)]=0;
 label=120;break;
 case 119: 
 var $434=$395;
 var $435=(($434+1)|0);
 HEAP8[(($435)>>0)]=0;
 HEAP8[(($425)>>0)]=0;
 label=120;break;
 case 120: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($395,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=122;break; } else { label=121;break; }
 case 121: 
 var $437$0 = ___cxa_find_matching_catch(0); var $437$1 = tempRet0;
 var $438=$437$0;
 ___clang_call_terminate($438);
 throw "Reached an unreachable!";
 case 122: 
 assert(12 % 1 === 0);HEAP32[(($425)>>2)]=HEAP32[(($289)>>2)];HEAP32[((($425)+(4))>>2)]=HEAP32[((($289)+(4))>>2)];HEAP32[((($425)+(8))>>2)]=HEAP32[((($289)+(8))>>2)];
 var $439=$36;
 var $storemerge_i28=0;label=123;break;
 case 123: 
 var $storemerge_i28;
 var $441=($storemerge_i28>>>0)<3;
 if($441){label=124;break;}else{label=125;break;}
 case 124: 
 var $443=(($439+($storemerge_i28<<2))|0);
 HEAP32[(($443)>>2)]=0;
 var $444=((($storemerge_i28)+(1))|0);
 var $storemerge_i28=$444;label=123;break;
 case 125: 
 var $445=HEAP8[(($289)>>0)];
 var $446=$445&1;
 var $447=(($446<<24)>>24)==0;
 if($447){label=127;break;}else{label=126;break;}
 case 126: 
 var $449=(($36+8)|0);
 var $450=HEAP32[(($449)>>2)];
 _free($450);
 label=127;break;
 case 127: 
 var $451=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($33,$451,$pa_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=140;break; }
 case 128: 
 var $452=(($33)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=(($453+16)|0);
 var $455=(($454)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($pa_i)|0);
 HEAP32[(($457)>>2)]=$456;
 var $458=(($453+20)|0);
 var $459=($pa_i|0)==($454|0);
 if($459){label=133;break;}else{label=129;break;}
 case 129: 
 var $461=$458;
 var $462=HEAP8[(($461)>>0)];
 var $463=$462&1;
 var $464=(($463<<24)>>24)==0;
 if($464){label=131;break;}else{label=130;break;}
 case 130: 
 var $466=(($453+28)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(($453+24)|0);
 var $469=HEAP32[(($468)>>2)];
 var $476=$469;var $475=$467;label=132;break;
 case 131: 
 var $471=$458;
 var $472=(($471+1)|0);
 var $473=($462&255);
 var $474=$473>>>1;
 var $476=$474;var $475=$472;label=132;break;
 case 132: 
 var $475;
 var $476;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($395,$475,$476) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=140;break; }
 case 133: 
 var $477=(($pa_i+16)|0);
 var $478=(($453+32)|0);
 var $479=$477;
 var $480=$478;
 assert(12 % 1 === 0);HEAP32[(($479)>>2)]=HEAP32[(($480)>>2)];HEAP32[((($479)+(4))>>2)]=HEAP32[((($480)+(4))>>2)];HEAP32[((($479)+(8))>>2)]=HEAP32[((($480)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($32,$451,$453);
 var $481=(($pa_i+20)|0);
 HEAP32[(($481)>>2)]=$346;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($31,$451,$pa_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=140;break; }
 case 134: 
 var $482=(($31+4)|0);
 var $483=HEAP8[(($482)>>0)];
 var $484=$483&1;
 var $485=(($484<<24)>>24)==0;
 if($485){label=135;break;}else{label=143;break;}
 case 135: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=136;break; } else { label=140;break; }
 case 136: 
 throw "Reached an unreachable!";
 case 137: 
 var $489$0 = ___cxa_find_matching_catch(); var $489$1 = tempRet0;
 var $490=$489$0;
 var $491=$489$1;
 var $492=HEAP8[(($287)>>0)];
 var $493=$492&1;
 var $494=(($493<<24)>>24)==0;
 if($494){var $_046=$490;var $_047=$491;label=511;break;}else{label=138;break;}
 case 138: 
 var $496=(($35+8)|0);
 var $497=HEAP32[(($496)>>2)];
 _free($497);
 var $_046=$490;var $_047=$491;label=511;break;
 case 139: 
 var $lpad_loopexit50$0 = ___cxa_find_matching_catch(); var $lpad_loopexit50$1 = tempRet0;
 var $lpad_phi52$1=$lpad_loopexit50$1;var $lpad_phi52$0=$lpad_loopexit50$0;label=141;break;
 case 140: 
 var $lpad_nonloopexit51$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit51$1 = tempRet0;
 var $lpad_phi52$1=$lpad_nonloopexit51$1;var $lpad_phi52$0=$lpad_nonloopexit51$0;label=141;break;
 case 141: 
 var $lpad_phi52$0;
 var $lpad_phi52$1;
 var $499=$lpad_phi52$0;
 var $500=$lpad_phi52$1;
 var $501=$395;
 var $502=HEAP8[(($501)>>0)];
 var $503=$502&1;
 var $504=(($503<<24)>>24)==0;
 if($504){var $_046=$499;var $_047=$500;label=511;break;}else{label=142;break;}
 case 142: 
 var $506=(($pa_i+12)|0);
 var $507=HEAP32[(($506)>>2)];
 _free($507);
 var $_046=$499;var $_047=$500;label=511;break;
 case 143: 
 var $509=HEAP8[(($425)>>0)];
 var $510=$509&1;
 var $511=(($510<<24)>>24)==0;
 if($511){label=512;break;}else{label=144;break;}
 case 144: 
 var $513=(($pa_i+12)|0);
 var $514=HEAP32[(($513)>>2)];
 _free($514);
 label=512;break;
 case 145: 
 var $516=$25;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $517=$26;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $518=$27;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $519=$h_i_i;
 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $520=$28;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $521=$h1_i_i;
 var $$etemp$14$0=8;
 var $$etemp$14$1=0;

 var $522=$29;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $523=$pa_i_i;
 var $$etemp$16$0=28;
 var $$etemp$16$1=0;

 var $524=$30;
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $525=($s|0)==256;
 if($525){label=146;break;}else{label=161;break;}
 case 146: 
 var $527=_strlen($name);
 var $528=($527>>>0)>4294967279;
 if($528){label=147;break;}else{label=148;break;}
 case 147: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 148: 
 var $531=($527>>>0)<11;
 if($531){label=149;break;}else{label=150;break;}
 case 149: 
 var $533=$527<<1;
 var $534=(($533)&255);
 HEAP8[(($520)>>0)]=$534;
 var $535=$28;
 var $536=(($535+1)|0);
 var $__p_0_i_i_i=$536;label=155;break;
 case 150: 
 var $537=((($527)+(16))|0);
 var $538=$537&-16;
 var $539=($538|0)==0;
 var $_size_i_i_i=($539?1:$538);
 var $540=_malloc($_size_i_i_i);
 var $541=($540|0)==0;
 if($541){label=151;break;}else{var $_lcssa_i_i_i=$540;label=154;break;}
 case 151: 
 var $542=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $543=($542|0)==0;
 if($543){label=153;break;}else{label=152;break;}
 case 152: 
 var $545=$542;
 FUNCTION_TABLE[$545]();
 var $546=_malloc($_size_i_i_i);
 var $547=($546|0)==0;
 if($547){label=151;break;}else{var $_lcssa_i_i_i=$546;label=154;break;}
 case 153: 
 var $549=___cxa_allocate_exception(4);
 var $550=$549;
 HEAP32[(($550)>>2)]=15192;
 ___cxa_throw($549,26096,(782));
 throw "Reached an unreachable!";
 case 154: 
 var $_lcssa_i_i_i;
 var $551=(($28+8)|0);
 HEAP32[(($551)>>2)]=$_lcssa_i_i_i;
 var $552=$538|1;
 var $553=(($28)|0);
 HEAP32[(($553)>>2)]=$552;
 var $554=(($28+4)|0);
 HEAP32[(($554)>>2)]=$527;
 var $__p_0_i_i_i=$_lcssa_i_i_i;label=155;break;
 case 155: 
 var $__p_0_i_i_i;
 assert($527 % 1 === 0);(_memcpy($__p_0_i_i_i, $name, $527)|0);
 var $555=(($__p_0_i_i_i+$527)|0);
 HEAP8[(($555)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i,$m,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=159;break; }
 case 156: 
 var $557=HEAP8[(($520)>>0)];
 var $558=$557&1;
 var $559=(($558<<24)>>24)==0;
 if($559){label=158;break;}else{label=157;break;}
 case 157: 
 var $561=(($28+8)|0);
 var $562=HEAP32[(($561)>>2)];
 _free($562);
 label=158;break;
 case 158: 
 var $563=(($h_i_i)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=(($564+4)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566)|0);
 assert(256 % 1 === 0);(_memcpy($567, $data, 256)|0);
 label=512;break;
 case 159: 
 var $569$0 = ___cxa_find_matching_catch(); var $569$1 = tempRet0;
 var $570=$569$0;
 var $571=$569$1;
 var $572=HEAP8[(($520)>>0)];
 var $573=$572&1;
 var $574=(($573<<24)>>24)==0;
 if($574){var $_044=$570;var $_045=$571;label=510;break;}else{label=160;break;}
 case 160: 
 var $576=(($28+8)|0);
 var $577=HEAP32[(($576)>>2)];
 _free($577);
 var $_044=$570;var $_045=$571;label=510;break;
 case 161: 
 var $579=($s>>>0)<256;
 if($579){label=162;break;}else{label=217;break;}
 case 162: 
 var $581=(((256)-($s))|0);
 var $582=_strlen($name);
 var $583=($582>>>0)>4294967279;
 if($583){label=163;break;}else{label=164;break;}
 case 163: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 164: 
 var $586=($582>>>0)<11;
 if($586){label=165;break;}else{label=166;break;}
 case 165: 
 var $588=$582<<1;
 var $589=(($588)&255);
 HEAP8[(($522)>>0)]=$589;
 var $590=$29;
 var $591=(($590+1)|0);
 var $__p_0_i3_i_i=$591;label=171;break;
 case 166: 
 var $592=((($582)+(16))|0);
 var $593=$592&-16;
 var $594=($593|0)==0;
 var $_size_i5_i_i=($594?1:$593);
 var $595=_malloc($_size_i5_i_i);
 var $596=($595|0)==0;
 if($596){label=167;break;}else{var $_lcssa_i7_i_i=$595;label=170;break;}
 case 167: 
 var $597=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $598=($597|0)==0;
 if($598){label=169;break;}else{label=168;break;}
 case 168: 
 var $600=$597;
 FUNCTION_TABLE[$600]();
 var $601=_malloc($_size_i5_i_i);
 var $602=($601|0)==0;
 if($602){label=167;break;}else{var $_lcssa_i7_i_i=$601;label=170;break;}
 case 169: 
 var $604=___cxa_allocate_exception(4);
 var $605=$604;
 HEAP32[(($605)>>2)]=15192;
 ___cxa_throw($604,26096,(782));
 throw "Reached an unreachable!";
 case 170: 
 var $_lcssa_i7_i_i;
 var $606=(($29+8)|0);
 HEAP32[(($606)>>2)]=$_lcssa_i7_i_i;
 var $607=$593|1;
 var $608=(($29)|0);
 HEAP32[(($608)>>2)]=$607;
 var $609=(($29+4)|0);
 HEAP32[(($609)>>2)]=$582;
 var $__p_0_i3_i_i=$_lcssa_i7_i_i;label=171;break;
 case 171: 
 var $__p_0_i3_i_i;
 assert($582 % 1 === 0);(_memcpy($__p_0_i3_i_i, $name, $582)|0);
 var $610=(($__p_0_i3_i_i+$582)|0);
 HEAP8[(($610)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i,$m,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=172;break; } else { label=209;break; }
 case 172: 
 var $612=HEAP8[(($522)>>0)];
 var $613=$612&1;
 var $614=(($613<<24)>>24)==0;
 if($614){label=174;break;}else{label=173;break;}
 case 173: 
 var $616=(($29+8)|0);
 var $617=HEAP32[(($616)>>2)];
 _free($617);
 label=174;break;
 case 174: 
 var $618=(($h1_i_i)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=(($619+4)|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=(($621)|0);
 assert($s % 1 === 0);(_memcpy($622, $data, $s)|0);
 var $623=(($pa_i_i+4)|0);
 var $624=$623;
 var $storemerge_i_i_i=0;label=175;break;
 case 175: 
 var $storemerge_i_i_i;
 var $626=($storemerge_i_i_i>>>0)<3;
 if($626){label=176;break;}else{label=177;break;}
 case 176: 
 var $628=(($624+($storemerge_i_i_i<<2))|0);
 HEAP32[(($628)>>2)]=0;
 var $629=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$629;label=175;break;
 case 177: 
 var $630=(($pa_i_i+4)|0);
 var $631=_strlen($name);
 var $632=($631>>>0)>4294967279;
 if($632){label=178;break;}else{label=180;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { label=212;break; }
 case 179: 
 throw "Reached an unreachable!";
 case 180: 
 var $635=($631>>>0)<11;
 if($635){label=181;break;}else{label=182;break;}
 case 181: 
 var $637=$631<<1;
 var $638=(($637)&255);
 HEAP8[(($524)>>0)]=$638;
 var $639=$30;
 var $640=(($639+1)|0);
 var $__p_0_i12_i_i=$640;label=189;break;
 case 182: 
 var $641=((($631)+(16))|0);
 var $642=$641&-16;
 var $643=($642|0)==0;
 var $_size_i16_i_i=($643?1:$642);
 var $644=_malloc($_size_i16_i_i);
 var $645=($644|0)==0;
 if($645){label=183;break;}else{var $_lcssa_i18_i_i=$644;label=188;break;}
 case 183: 
 var $646=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $647=($646|0)==0;
 if($647){label=186;break;}else{label=184;break;}
 case 184: 
 var $649=$646;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$649]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=211;break; }
 case 185: 
 var $650=_malloc($_size_i16_i_i);
 var $651=($650|0)==0;
 if($651){label=183;break;}else{var $_lcssa_i18_i_i=$650;label=188;break;}
 case 186: 
 var $653=___cxa_allocate_exception(4);
 var $654=$653;
 HEAP32[(($654)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($653,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=212;break; }
 case 187: 
 throw "Reached an unreachable!";
 case 188: 
 var $_lcssa_i18_i_i;
 var $655=(($30+8)|0);
 HEAP32[(($655)>>2)]=$_lcssa_i18_i_i;
 var $656=$642|1;
 var $657=(($30)|0);
 HEAP32[(($657)>>2)]=$656;
 var $658=(($30+4)|0);
 HEAP32[(($658)>>2)]=$631;
 var $__p_0_i12_i_i=$_lcssa_i18_i_i;label=189;break;
 case 189: 
 var $__p_0_i12_i_i;
 assert($631 % 1 === 0);(_memcpy($__p_0_i12_i_i, $name, $631)|0);
 var $659=(($__p_0_i12_i_i+$631)|0);
 HEAP8[(($659)>>0)]=0;
 var $660=$630;
 var $661=HEAP8[(($660)>>0)];
 var $662=$661&1;
 var $663=(($662<<24)>>24)==0;
 if($663){label=191;break;}else{label=190;break;}
 case 190: 
 var $665=(($pa_i_i+12)|0);
 var $666=HEAP32[(($665)>>2)];
 HEAP8[(($666)>>0)]=0;
 var $667=(($pa_i_i+8)|0);
 HEAP32[(($667)>>2)]=0;
 label=192;break;
 case 191: 
 var $669=$630;
 var $670=(($669+1)|0);
 HEAP8[(($670)>>0)]=0;
 HEAP8[(($660)>>0)]=0;
 label=192;break;
 case 192: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($630,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=193;break; }
 case 193: 
 var $672$0 = ___cxa_find_matching_catch(0); var $672$1 = tempRet0;
 var $673=$672$0;
 ___clang_call_terminate($673);
 throw "Reached an unreachable!";
 case 194: 
 assert(12 % 1 === 0);HEAP32[(($660)>>2)]=HEAP32[(($524)>>2)];HEAP32[((($660)+(4))>>2)]=HEAP32[((($524)+(4))>>2)];HEAP32[((($660)+(8))>>2)]=HEAP32[((($524)+(8))>>2)];
 var $674=$30;
 var $storemerge_i28_i=0;label=195;break;
 case 195: 
 var $storemerge_i28_i;
 var $676=($storemerge_i28_i>>>0)<3;
 if($676){label=196;break;}else{label=197;break;}
 case 196: 
 var $678=(($674+($storemerge_i28_i<<2))|0);
 HEAP32[(($678)>>2)]=0;
 var $679=((($storemerge_i28_i)+(1))|0);
 var $storemerge_i28_i=$679;label=195;break;
 case 197: 
 var $680=HEAP8[(($524)>>0)];
 var $681=$680&1;
 var $682=(($681<<24)>>24)==0;
 if($682){label=199;break;}else{label=198;break;}
 case 198: 
 var $684=(($30+8)|0);
 var $685=HEAP32[(($684)>>2)];
 _free($685);
 label=199;break;
 case 199: 
 var $686=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($27,$686,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=212;break; }
 case 200: 
 var $687=(($27)|0);
 var $688=HEAP32[(($687)>>2)];
 var $689=(($688+16)|0);
 var $690=(($689)|0);
 var $691=HEAP32[(($690)>>2)];
 var $692=(($pa_i_i)|0);
 HEAP32[(($692)>>2)]=$691;
 var $693=(($688+20)|0);
 var $694=($pa_i_i|0)==($689|0);
 if($694){label=205;break;}else{label=201;break;}
 case 201: 
 var $696=$693;
 var $697=HEAP8[(($696)>>0)];
 var $698=$697&1;
 var $699=(($698<<24)>>24)==0;
 if($699){label=203;break;}else{label=202;break;}
 case 202: 
 var $701=(($688+28)|0);
 var $702=HEAP32[(($701)>>2)];
 var $703=(($688+24)|0);
 var $704=HEAP32[(($703)>>2)];
 var $711=$704;var $710=$702;label=204;break;
 case 203: 
 var $706=$693;
 var $707=(($706+1)|0);
 var $708=($697&255);
 var $709=$708>>>1;
 var $711=$709;var $710=$707;label=204;break;
 case 204: 
 var $710;
 var $711;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($630,$710,$711) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { label=212;break; }
 case 205: 
 var $712=(($pa_i_i+16)|0);
 var $713=(($688+32)|0);
 var $714=$712;
 var $715=$713;
 assert(12 % 1 === 0);HEAP32[(($714)>>2)]=HEAP32[(($715)>>2)];HEAP32[((($714)+(4))>>2)]=HEAP32[((($715)+(4))>>2)];HEAP32[((($714)+(8))>>2)]=HEAP32[((($715)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($26,$686,$688);
 var $716=(($pa_i_i+20)|0);
 HEAP32[(($716)>>2)]=$581;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($25,$686,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { label=212;break; }
 case 206: 
 var $717=(($25+4)|0);
 var $718=HEAP8[(($717)>>0)];
 var $719=$718&1;
 var $720=(($719<<24)>>24)==0;
 if($720){label=207;break;}else{label=215;break;}
 case 207: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=208;break; } else { label=212;break; }
 case 208: 
 throw "Reached an unreachable!";
 case 209: 
 var $724$0 = ___cxa_find_matching_catch(); var $724$1 = tempRet0;
 var $725=$724$0;
 var $726=$724$1;
 var $727=HEAP8[(($522)>>0)];
 var $728=$727&1;
 var $729=(($728<<24)>>24)==0;
 if($729){var $_044=$725;var $_045=$726;label=510;break;}else{label=210;break;}
 case 210: 
 var $731=(($29+8)|0);
 var $732=HEAP32[(($731)>>2)];
 _free($732);
 var $_044=$725;var $_045=$726;label=510;break;
 case 211: 
 var $lpad_loopexit55$0 = ___cxa_find_matching_catch(); var $lpad_loopexit55$1 = tempRet0;
 var $lpad_phi57$1=$lpad_loopexit55$1;var $lpad_phi57$0=$lpad_loopexit55$0;label=213;break;
 case 212: 
 var $lpad_nonloopexit56$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit56$1 = tempRet0;
 var $lpad_phi57$1=$lpad_nonloopexit56$1;var $lpad_phi57$0=$lpad_nonloopexit56$0;label=213;break;
 case 213: 
 var $lpad_phi57$0;
 var $lpad_phi57$1;
 var $734=$lpad_phi57$0;
 var $735=$lpad_phi57$1;
 var $736=$630;
 var $737=HEAP8[(($736)>>0)];
 var $738=$737&1;
 var $739=(($738<<24)>>24)==0;
 if($739){var $_044=$734;var $_045=$735;label=510;break;}else{label=214;break;}
 case 214: 
 var $741=(($pa_i_i+12)|0);
 var $742=HEAP32[(($741)>>2)];
 _free($742);
 var $_044=$734;var $_045=$735;label=510;break;
 case 215: 
 var $744=HEAP8[(($660)>>0)];
 var $745=$744&1;
 var $746=(($745<<24)>>24)==0;
 if($746){label=512;break;}else{label=216;break;}
 case 216: 
 var $748=(($pa_i_i+12)|0);
 var $749=HEAP32[(($748)>>2)];
 _free($749);
 label=512;break;
 case 217: 
 var $751=$19;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $752=$20;
 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $753=$21;
 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $754=$h_i_i_i;
 var $$etemp$21$0=8;
 var $$etemp$21$1=0;

 var $755=$22;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $756=$h1_i_i_i;
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $757=$23;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $758=$pa_i_i_i;
 var $$etemp$25$0=28;
 var $$etemp$25$1=0;

 var $759=$24;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $760=($s|0)==512;
 if($760){label=218;break;}else{label=233;break;}
 case 218: 
 var $762=_strlen($name);
 var $763=($762>>>0)>4294967279;
 if($763){label=219;break;}else{label=220;break;}
 case 219: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 220: 
 var $766=($762>>>0)<11;
 if($766){label=221;break;}else{label=222;break;}
 case 221: 
 var $768=$762<<1;
 var $769=(($768)&255);
 HEAP8[(($755)>>0)]=$769;
 var $770=$22;
 var $771=(($770+1)|0);
 var $__p_0_i_i_i_i=$771;label=227;break;
 case 222: 
 var $772=((($762)+(16))|0);
 var $773=$772&-16;
 var $774=($773|0)==0;
 var $_size_i_i_i_i=($774?1:$773);
 var $775=_malloc($_size_i_i_i_i);
 var $776=($775|0)==0;
 if($776){label=223;break;}else{var $_lcssa_i_i_i_i=$775;label=226;break;}
 case 223: 
 var $777=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $778=($777|0)==0;
 if($778){label=225;break;}else{label=224;break;}
 case 224: 
 var $780=$777;
 FUNCTION_TABLE[$780]();
 var $781=_malloc($_size_i_i_i_i);
 var $782=($781|0)==0;
 if($782){label=223;break;}else{var $_lcssa_i_i_i_i=$781;label=226;break;}
 case 225: 
 var $784=___cxa_allocate_exception(4);
 var $785=$784;
 HEAP32[(($785)>>2)]=15192;
 ___cxa_throw($784,26096,(782));
 throw "Reached an unreachable!";
 case 226: 
 var $_lcssa_i_i_i_i;
 var $786=(($22+8)|0);
 HEAP32[(($786)>>2)]=$_lcssa_i_i_i_i;
 var $787=$773|1;
 var $788=(($22)|0);
 HEAP32[(($788)>>2)]=$787;
 var $789=(($22+4)|0);
 HEAP32[(($789)>>2)]=$762;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=227;break;
 case 227: 
 var $__p_0_i_i_i_i;
 assert($762 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $name, $762)|0);
 var $790=(($__p_0_i_i_i_i+$762)|0);
 HEAP8[(($790)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i,$m,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { label=231;break; }
 case 228: 
 var $792=HEAP8[(($755)>>0)];
 var $793=$792&1;
 var $794=(($793<<24)>>24)==0;
 if($794){label=230;break;}else{label=229;break;}
 case 229: 
 var $796=(($22+8)|0);
 var $797=HEAP32[(($796)>>2)];
 _free($797);
 label=230;break;
 case 230: 
 var $798=(($h_i_i_i)|0);
 var $799=HEAP32[(($798)>>2)];
 var $800=(($799+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($801)|0);
 assert(512 % 1 === 0);(_memcpy($802, $data, 512)|0);
 label=512;break;
 case 231: 
 var $804$0 = ___cxa_find_matching_catch(); var $804$1 = tempRet0;
 var $805=$804$0;
 var $806=$804$1;
 var $807=HEAP8[(($755)>>0)];
 var $808=$807&1;
 var $809=(($808<<24)>>24)==0;
 if($809){var $_042=$805;var $_043=$806;label=509;break;}else{label=232;break;}
 case 232: 
 var $811=(($22+8)|0);
 var $812=HEAP32[(($811)>>2)];
 _free($812);
 var $_042=$805;var $_043=$806;label=509;break;
 case 233: 
 var $814=($s>>>0)<512;
 if($814){label=234;break;}else{label=289;break;}
 case 234: 
 var $816=(((512)-($s))|0);
 var $817=_strlen($name);
 var $818=($817>>>0)>4294967279;
 if($818){label=235;break;}else{label=236;break;}
 case 235: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 236: 
 var $821=($817>>>0)<11;
 if($821){label=237;break;}else{label=238;break;}
 case 237: 
 var $823=$817<<1;
 var $824=(($823)&255);
 HEAP8[(($757)>>0)]=$824;
 var $825=$23;
 var $826=(($825+1)|0);
 var $__p_0_i3_i_i_i=$826;label=243;break;
 case 238: 
 var $827=((($817)+(16))|0);
 var $828=$827&-16;
 var $829=($828|0)==0;
 var $_size_i5_i_i_i=($829?1:$828);
 var $830=_malloc($_size_i5_i_i_i);
 var $831=($830|0)==0;
 if($831){label=239;break;}else{var $_lcssa_i7_i_i_i=$830;label=242;break;}
 case 239: 
 var $832=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $833=($832|0)==0;
 if($833){label=241;break;}else{label=240;break;}
 case 240: 
 var $835=$832;
 FUNCTION_TABLE[$835]();
 var $836=_malloc($_size_i5_i_i_i);
 var $837=($836|0)==0;
 if($837){label=239;break;}else{var $_lcssa_i7_i_i_i=$836;label=242;break;}
 case 241: 
 var $839=___cxa_allocate_exception(4);
 var $840=$839;
 HEAP32[(($840)>>2)]=15192;
 ___cxa_throw($839,26096,(782));
 throw "Reached an unreachable!";
 case 242: 
 var $_lcssa_i7_i_i_i;
 var $841=(($23+8)|0);
 HEAP32[(($841)>>2)]=$_lcssa_i7_i_i_i;
 var $842=$828|1;
 var $843=(($23)|0);
 HEAP32[(($843)>>2)]=$842;
 var $844=(($23+4)|0);
 HEAP32[(($844)>>2)]=$817;
 var $__p_0_i3_i_i_i=$_lcssa_i7_i_i_i;label=243;break;
 case 243: 
 var $__p_0_i3_i_i_i;
 assert($817 % 1 === 0);(_memcpy($__p_0_i3_i_i_i, $name, $817)|0);
 var $845=(($__p_0_i3_i_i_i+$817)|0);
 HEAP8[(($845)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i,$m,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=281;break; }
 case 244: 
 var $847=HEAP8[(($757)>>0)];
 var $848=$847&1;
 var $849=(($848<<24)>>24)==0;
 if($849){label=246;break;}else{label=245;break;}
 case 245: 
 var $851=(($23+8)|0);
 var $852=HEAP32[(($851)>>2)];
 _free($852);
 label=246;break;
 case 246: 
 var $853=(($h1_i_i_i)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=(($854+4)|0);
 var $856=HEAP32[(($855)>>2)];
 var $857=(($856)|0);
 assert($s % 1 === 0);(_memcpy($857, $data, $s)|0);
 var $858=(($pa_i_i_i+4)|0);
 var $859=$858;
 var $storemerge_i_i_i_i=0;label=247;break;
 case 247: 
 var $storemerge_i_i_i_i;
 var $861=($storemerge_i_i_i_i>>>0)<3;
 if($861){label=248;break;}else{label=249;break;}
 case 248: 
 var $863=(($859+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($863)>>2)]=0;
 var $864=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$864;label=247;break;
 case 249: 
 var $865=(($pa_i_i_i+4)|0);
 var $866=_strlen($name);
 var $867=($866>>>0)>4294967279;
 if($867){label=250;break;}else{label=252;break;}
 case 250: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=284;break; }
 case 251: 
 throw "Reached an unreachable!";
 case 252: 
 var $870=($866>>>0)<11;
 if($870){label=253;break;}else{label=254;break;}
 case 253: 
 var $872=$866<<1;
 var $873=(($872)&255);
 HEAP8[(($759)>>0)]=$873;
 var $874=$24;
 var $875=(($874+1)|0);
 var $__p_0_i12_i_i_i=$875;label=261;break;
 case 254: 
 var $876=((($866)+(16))|0);
 var $877=$876&-16;
 var $878=($877|0)==0;
 var $_size_i16_i_i_i=($878?1:$877);
 var $879=_malloc($_size_i16_i_i_i);
 var $880=($879|0)==0;
 if($880){label=255;break;}else{var $_lcssa_i18_i_i_i=$879;label=260;break;}
 case 255: 
 var $881=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $882=($881|0)==0;
 if($882){label=258;break;}else{label=256;break;}
 case 256: 
 var $884=$881;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$884]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=257;break; } else { label=283;break; }
 case 257: 
 var $885=_malloc($_size_i16_i_i_i);
 var $886=($885|0)==0;
 if($886){label=255;break;}else{var $_lcssa_i18_i_i_i=$885;label=260;break;}
 case 258: 
 var $888=___cxa_allocate_exception(4);
 var $889=$888;
 HEAP32[(($889)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($888,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=259;break; } else { label=284;break; }
 case 259: 
 throw "Reached an unreachable!";
 case 260: 
 var $_lcssa_i18_i_i_i;
 var $890=(($24+8)|0);
 HEAP32[(($890)>>2)]=$_lcssa_i18_i_i_i;
 var $891=$877|1;
 var $892=(($24)|0);
 HEAP32[(($892)>>2)]=$891;
 var $893=(($24+4)|0);
 HEAP32[(($893)>>2)]=$866;
 var $__p_0_i12_i_i_i=$_lcssa_i18_i_i_i;label=261;break;
 case 261: 
 var $__p_0_i12_i_i_i;
 assert($866 % 1 === 0);(_memcpy($__p_0_i12_i_i_i, $name, $866)|0);
 var $894=(($__p_0_i12_i_i_i+$866)|0);
 HEAP8[(($894)>>0)]=0;
 var $895=$865;
 var $896=HEAP8[(($895)>>0)];
 var $897=$896&1;
 var $898=(($897<<24)>>24)==0;
 if($898){label=263;break;}else{label=262;break;}
 case 262: 
 var $900=(($pa_i_i_i+12)|0);
 var $901=HEAP32[(($900)>>2)];
 HEAP8[(($901)>>0)]=0;
 var $902=(($pa_i_i_i+8)|0);
 HEAP32[(($902)>>2)]=0;
 label=264;break;
 case 263: 
 var $904=$865;
 var $905=(($904+1)|0);
 HEAP8[(($905)>>0)]=0;
 HEAP8[(($895)>>0)]=0;
 label=264;break;
 case 264: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($865,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { label=265;break; }
 case 265: 
 var $907$0 = ___cxa_find_matching_catch(0); var $907$1 = tempRet0;
 var $908=$907$0;
 ___clang_call_terminate($908);
 throw "Reached an unreachable!";
 case 266: 
 assert(12 % 1 === 0);HEAP32[(($895)>>2)]=HEAP32[(($759)>>2)];HEAP32[((($895)+(4))>>2)]=HEAP32[((($759)+(4))>>2)];HEAP32[((($895)+(8))>>2)]=HEAP32[((($759)+(8))>>2)];
 var $909=$24;
 var $storemerge_i28_i_i=0;label=267;break;
 case 267: 
 var $storemerge_i28_i_i;
 var $911=($storemerge_i28_i_i>>>0)<3;
 if($911){label=268;break;}else{label=269;break;}
 case 268: 
 var $913=(($909+($storemerge_i28_i_i<<2))|0);
 HEAP32[(($913)>>2)]=0;
 var $914=((($storemerge_i28_i_i)+(1))|0);
 var $storemerge_i28_i_i=$914;label=267;break;
 case 269: 
 var $915=HEAP8[(($759)>>0)];
 var $916=$915&1;
 var $917=(($916<<24)>>24)==0;
 if($917){label=271;break;}else{label=270;break;}
 case 270: 
 var $919=(($24+8)|0);
 var $920=HEAP32[(($919)>>2)];
 _free($920);
 label=271;break;
 case 271: 
 var $921=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($21,$921,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=284;break; }
 case 272: 
 var $922=(($21)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($923+16)|0);
 var $925=(($924)|0);
 var $926=HEAP32[(($925)>>2)];
 var $927=(($pa_i_i_i)|0);
 HEAP32[(($927)>>2)]=$926;
 var $928=(($923+20)|0);
 var $929=($pa_i_i_i|0)==($924|0);
 if($929){label=277;break;}else{label=273;break;}
 case 273: 
 var $931=$928;
 var $932=HEAP8[(($931)>>0)];
 var $933=$932&1;
 var $934=(($933<<24)>>24)==0;
 if($934){label=275;break;}else{label=274;break;}
 case 274: 
 var $936=(($923+28)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(($923+24)|0);
 var $939=HEAP32[(($938)>>2)];
 var $946=$939;var $945=$937;label=276;break;
 case 275: 
 var $941=$928;
 var $942=(($941+1)|0);
 var $943=($932&255);
 var $944=$943>>>1;
 var $946=$944;var $945=$942;label=276;break;
 case 276: 
 var $945;
 var $946;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($865,$945,$946) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=277;break; } else { label=284;break; }
 case 277: 
 var $947=(($pa_i_i_i+16)|0);
 var $948=(($923+32)|0);
 var $949=$947;
 var $950=$948;
 assert(12 % 1 === 0);HEAP32[(($949)>>2)]=HEAP32[(($950)>>2)];HEAP32[((($949)+(4))>>2)]=HEAP32[((($950)+(4))>>2)];HEAP32[((($949)+(8))>>2)]=HEAP32[((($950)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($20,$921,$923);
 var $951=(($pa_i_i_i+20)|0);
 HEAP32[(($951)>>2)]=$816;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($19,$921,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=284;break; }
 case 278: 
 var $952=(($19+4)|0);
 var $953=HEAP8[(($952)>>0)];
 var $954=$953&1;
 var $955=(($954<<24)>>24)==0;
 if($955){label=279;break;}else{label=287;break;}
 case 279: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=280;break; } else { label=284;break; }
 case 280: 
 throw "Reached an unreachable!";
 case 281: 
 var $959$0 = ___cxa_find_matching_catch(); var $959$1 = tempRet0;
 var $960=$959$0;
 var $961=$959$1;
 var $962=HEAP8[(($757)>>0)];
 var $963=$962&1;
 var $964=(($963<<24)>>24)==0;
 if($964){var $_042=$960;var $_043=$961;label=509;break;}else{label=282;break;}
 case 282: 
 var $966=(($23+8)|0);
 var $967=HEAP32[(($966)>>2)];
 _free($967);
 var $_042=$960;var $_043=$961;label=509;break;
 case 283: 
 var $lpad_loopexit60$0 = ___cxa_find_matching_catch(); var $lpad_loopexit60$1 = tempRet0;
 var $lpad_phi62$1=$lpad_loopexit60$1;var $lpad_phi62$0=$lpad_loopexit60$0;label=285;break;
 case 284: 
 var $lpad_nonloopexit61$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit61$1 = tempRet0;
 var $lpad_phi62$1=$lpad_nonloopexit61$1;var $lpad_phi62$0=$lpad_nonloopexit61$0;label=285;break;
 case 285: 
 var $lpad_phi62$0;
 var $lpad_phi62$1;
 var $969=$lpad_phi62$0;
 var $970=$lpad_phi62$1;
 var $971=$865;
 var $972=HEAP8[(($971)>>0)];
 var $973=$972&1;
 var $974=(($973<<24)>>24)==0;
 if($974){var $_042=$969;var $_043=$970;label=509;break;}else{label=286;break;}
 case 286: 
 var $976=(($pa_i_i_i+12)|0);
 var $977=HEAP32[(($976)>>2)];
 _free($977);
 var $_042=$969;var $_043=$970;label=509;break;
 case 287: 
 var $979=HEAP8[(($895)>>0)];
 var $980=$979&1;
 var $981=(($980<<24)>>24)==0;
 if($981){label=512;break;}else{label=288;break;}
 case 288: 
 var $983=(($pa_i_i_i+12)|0);
 var $984=HEAP32[(($983)>>2)];
 _free($984);
 label=512;break;
 case 289: 
 var $986=$13;
 var $$etemp$27$0=8;
 var $$etemp$27$1=0;

 var $987=$14;
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $988=$15;
 var $$etemp$29$0=4;
 var $$etemp$29$1=0;

 var $989=$h_i_i_i_i;
 var $$etemp$30$0=8;
 var $$etemp$30$1=0;

 var $990=$16;
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $991=$h1_i_i_i_i;
 var $$etemp$32$0=8;
 var $$etemp$32$1=0;

 var $992=$17;
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $993=$pa_i_i_i_i;
 var $$etemp$34$0=28;
 var $$etemp$34$1=0;

 var $994=$18;
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $995=($s|0)==1024;
 if($995){label=290;break;}else{label=305;break;}
 case 290: 
 var $997=_strlen($name);
 var $998=($997>>>0)>4294967279;
 if($998){label=291;break;}else{label=292;break;}
 case 291: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 292: 
 var $1001=($997>>>0)<11;
 if($1001){label=293;break;}else{label=294;break;}
 case 293: 
 var $1003=$997<<1;
 var $1004=(($1003)&255);
 HEAP8[(($990)>>0)]=$1004;
 var $1005=$16;
 var $1006=(($1005+1)|0);
 var $__p_0_i_i_i_i_i=$1006;label=299;break;
 case 294: 
 var $1007=((($997)+(16))|0);
 var $1008=$1007&-16;
 var $1009=($1008|0)==0;
 var $_size_i_i_i_i_i=($1009?1:$1008);
 var $1010=_malloc($_size_i_i_i_i_i);
 var $1011=($1010|0)==0;
 if($1011){label=295;break;}else{var $_lcssa_i_i_i_i_i=$1010;label=298;break;}
 case 295: 
 var $1012=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1013=($1012|0)==0;
 if($1013){label=297;break;}else{label=296;break;}
 case 296: 
 var $1015=$1012;
 FUNCTION_TABLE[$1015]();
 var $1016=_malloc($_size_i_i_i_i_i);
 var $1017=($1016|0)==0;
 if($1017){label=295;break;}else{var $_lcssa_i_i_i_i_i=$1016;label=298;break;}
 case 297: 
 var $1019=___cxa_allocate_exception(4);
 var $1020=$1019;
 HEAP32[(($1020)>>2)]=15192;
 ___cxa_throw($1019,26096,(782));
 throw "Reached an unreachable!";
 case 298: 
 var $_lcssa_i_i_i_i_i;
 var $1021=(($16+8)|0);
 HEAP32[(($1021)>>2)]=$_lcssa_i_i_i_i_i;
 var $1022=$1008|1;
 var $1023=(($16)|0);
 HEAP32[(($1023)>>2)]=$1022;
 var $1024=(($16+4)|0);
 HEAP32[(($1024)>>2)]=$997;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i_i_i_i;label=299;break;
 case 299: 
 var $__p_0_i_i_i_i_i;
 assert($997 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $name, $997)|0);
 var $1025=(($__p_0_i_i_i_i_i+$997)|0);
 HEAP8[(($1025)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i,$m,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=303;break; }
 case 300: 
 var $1027=HEAP8[(($990)>>0)];
 var $1028=$1027&1;
 var $1029=(($1028<<24)>>24)==0;
 if($1029){label=302;break;}else{label=301;break;}
 case 301: 
 var $1031=(($16+8)|0);
 var $1032=HEAP32[(($1031)>>2)];
 _free($1032);
 label=302;break;
 case 302: 
 var $1033=(($h_i_i_i_i)|0);
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=(($1034+4)|0);
 var $1036=HEAP32[(($1035)>>2)];
 var $1037=(($1036)|0);
 assert(1024 % 1 === 0);(_memcpy($1037, $data, 1024)|0);
 label=512;break;
 case 303: 
 var $1039$0 = ___cxa_find_matching_catch(); var $1039$1 = tempRet0;
 var $1040=$1039$0;
 var $1041=$1039$1;
 var $1042=HEAP8[(($990)>>0)];
 var $1043=$1042&1;
 var $1044=(($1043<<24)>>24)==0;
 if($1044){var $_040=$1040;var $_041=$1041;label=508;break;}else{label=304;break;}
 case 304: 
 var $1046=(($16+8)|0);
 var $1047=HEAP32[(($1046)>>2)];
 _free($1047);
 var $_040=$1040;var $_041=$1041;label=508;break;
 case 305: 
 var $1049=($s>>>0)<1024;
 if($1049){label=306;break;}else{label=361;break;}
 case 306: 
 var $1051=(((1024)-($s))|0);
 var $1052=_strlen($name);
 var $1053=($1052>>>0)>4294967279;
 if($1053){label=307;break;}else{label=308;break;}
 case 307: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 308: 
 var $1056=($1052>>>0)<11;
 if($1056){label=309;break;}else{label=310;break;}
 case 309: 
 var $1058=$1052<<1;
 var $1059=(($1058)&255);
 HEAP8[(($992)>>0)]=$1059;
 var $1060=$17;
 var $1061=(($1060+1)|0);
 var $__p_0_i3_i_i_i_i=$1061;label=315;break;
 case 310: 
 var $1062=((($1052)+(16))|0);
 var $1063=$1062&-16;
 var $1064=($1063|0)==0;
 var $_size_i5_i_i_i_i=($1064?1:$1063);
 var $1065=_malloc($_size_i5_i_i_i_i);
 var $1066=($1065|0)==0;
 if($1066){label=311;break;}else{var $_lcssa_i7_i_i_i_i=$1065;label=314;break;}
 case 311: 
 var $1067=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1068=($1067|0)==0;
 if($1068){label=313;break;}else{label=312;break;}
 case 312: 
 var $1070=$1067;
 FUNCTION_TABLE[$1070]();
 var $1071=_malloc($_size_i5_i_i_i_i);
 var $1072=($1071|0)==0;
 if($1072){label=311;break;}else{var $_lcssa_i7_i_i_i_i=$1071;label=314;break;}
 case 313: 
 var $1074=___cxa_allocate_exception(4);
 var $1075=$1074;
 HEAP32[(($1075)>>2)]=15192;
 ___cxa_throw($1074,26096,(782));
 throw "Reached an unreachable!";
 case 314: 
 var $_lcssa_i7_i_i_i_i;
 var $1076=(($17+8)|0);
 HEAP32[(($1076)>>2)]=$_lcssa_i7_i_i_i_i;
 var $1077=$1063|1;
 var $1078=(($17)|0);
 HEAP32[(($1078)>>2)]=$1077;
 var $1079=(($17+4)|0);
 HEAP32[(($1079)>>2)]=$1052;
 var $__p_0_i3_i_i_i_i=$_lcssa_i7_i_i_i_i;label=315;break;
 case 315: 
 var $__p_0_i3_i_i_i_i;
 assert($1052 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i, $name, $1052)|0);
 var $1080=(($__p_0_i3_i_i_i_i+$1052)|0);
 HEAP8[(($1080)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i,$m,$17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=316;break; } else { label=353;break; }
 case 316: 
 var $1082=HEAP8[(($992)>>0)];
 var $1083=$1082&1;
 var $1084=(($1083<<24)>>24)==0;
 if($1084){label=318;break;}else{label=317;break;}
 case 317: 
 var $1086=(($17+8)|0);
 var $1087=HEAP32[(($1086)>>2)];
 _free($1087);
 label=318;break;
 case 318: 
 var $1088=(($h1_i_i_i_i)|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=(($1089+4)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=(($1091)|0);
 assert($s % 1 === 0);(_memcpy($1092, $data, $s)|0);
 var $1093=(($pa_i_i_i_i+4)|0);
 var $1094=$1093;
 var $storemerge_i_i_i_i_i=0;label=319;break;
 case 319: 
 var $storemerge_i_i_i_i_i;
 var $1096=($storemerge_i_i_i_i_i>>>0)<3;
 if($1096){label=320;break;}else{label=321;break;}
 case 320: 
 var $1098=(($1094+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($1098)>>2)]=0;
 var $1099=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$1099;label=319;break;
 case 321: 
 var $1100=(($pa_i_i_i_i+4)|0);
 var $1101=_strlen($name);
 var $1102=($1101>>>0)>4294967279;
 if($1102){label=322;break;}else{label=324;break;}
 case 322: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=323;break; } else { label=356;break; }
 case 323: 
 throw "Reached an unreachable!";
 case 324: 
 var $1105=($1101>>>0)<11;
 if($1105){label=325;break;}else{label=326;break;}
 case 325: 
 var $1107=$1101<<1;
 var $1108=(($1107)&255);
 HEAP8[(($994)>>0)]=$1108;
 var $1109=$18;
 var $1110=(($1109+1)|0);
 var $__p_0_i12_i_i_i_i=$1110;label=333;break;
 case 326: 
 var $1111=((($1101)+(16))|0);
 var $1112=$1111&-16;
 var $1113=($1112|0)==0;
 var $_size_i16_i_i_i_i=($1113?1:$1112);
 var $1114=_malloc($_size_i16_i_i_i_i);
 var $1115=($1114|0)==0;
 if($1115){label=327;break;}else{var $_lcssa_i18_i_i_i_i=$1114;label=332;break;}
 case 327: 
 var $1116=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1117=($1116|0)==0;
 if($1117){label=330;break;}else{label=328;break;}
 case 328: 
 var $1119=$1116;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1119]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=329;break; } else { label=355;break; }
 case 329: 
 var $1120=_malloc($_size_i16_i_i_i_i);
 var $1121=($1120|0)==0;
 if($1121){label=327;break;}else{var $_lcssa_i18_i_i_i_i=$1120;label=332;break;}
 case 330: 
 var $1123=___cxa_allocate_exception(4);
 var $1124=$1123;
 HEAP32[(($1124)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1123,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=331;break; } else { label=356;break; }
 case 331: 
 throw "Reached an unreachable!";
 case 332: 
 var $_lcssa_i18_i_i_i_i;
 var $1125=(($18+8)|0);
 HEAP32[(($1125)>>2)]=$_lcssa_i18_i_i_i_i;
 var $1126=$1112|1;
 var $1127=(($18)|0);
 HEAP32[(($1127)>>2)]=$1126;
 var $1128=(($18+4)|0);
 HEAP32[(($1128)>>2)]=$1101;
 var $__p_0_i12_i_i_i_i=$_lcssa_i18_i_i_i_i;label=333;break;
 case 333: 
 var $__p_0_i12_i_i_i_i;
 assert($1101 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i, $name, $1101)|0);
 var $1129=(($__p_0_i12_i_i_i_i+$1101)|0);
 HEAP8[(($1129)>>0)]=0;
 var $1130=$1100;
 var $1131=HEAP8[(($1130)>>0)];
 var $1132=$1131&1;
 var $1133=(($1132<<24)>>24)==0;
 if($1133){label=335;break;}else{label=334;break;}
 case 334: 
 var $1135=(($pa_i_i_i_i+12)|0);
 var $1136=HEAP32[(($1135)>>2)];
 HEAP8[(($1136)>>0)]=0;
 var $1137=(($pa_i_i_i_i+8)|0);
 HEAP32[(($1137)>>2)]=0;
 label=336;break;
 case 335: 
 var $1139=$1100;
 var $1140=(($1139+1)|0);
 HEAP8[(($1140)>>0)]=0;
 HEAP8[(($1130)>>0)]=0;
 label=336;break;
 case 336: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1100,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=338;break; } else { label=337;break; }
 case 337: 
 var $1142$0 = ___cxa_find_matching_catch(0); var $1142$1 = tempRet0;
 var $1143=$1142$0;
 ___clang_call_terminate($1143);
 throw "Reached an unreachable!";
 case 338: 
 assert(12 % 1 === 0);HEAP32[(($1130)>>2)]=HEAP32[(($994)>>2)];HEAP32[((($1130)+(4))>>2)]=HEAP32[((($994)+(4))>>2)];HEAP32[((($1130)+(8))>>2)]=HEAP32[((($994)+(8))>>2)];
 var $1144=$18;
 var $storemerge_i28_i_i_i=0;label=339;break;
 case 339: 
 var $storemerge_i28_i_i_i;
 var $1146=($storemerge_i28_i_i_i>>>0)<3;
 if($1146){label=340;break;}else{label=341;break;}
 case 340: 
 var $1148=(($1144+($storemerge_i28_i_i_i<<2))|0);
 HEAP32[(($1148)>>2)]=0;
 var $1149=((($storemerge_i28_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i=$1149;label=339;break;
 case 341: 
 var $1150=HEAP8[(($994)>>0)];
 var $1151=$1150&1;
 var $1152=(($1151<<24)>>24)==0;
 if($1152){label=343;break;}else{label=342;break;}
 case 342: 
 var $1154=(($18+8)|0);
 var $1155=HEAP32[(($1154)>>2)];
 _free($1155);
 label=343;break;
 case 343: 
 var $1156=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($15,$1156,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=344;break; } else { label=356;break; }
 case 344: 
 var $1157=(($15)|0);
 var $1158=HEAP32[(($1157)>>2)];
 var $1159=(($1158+16)|0);
 var $1160=(($1159)|0);
 var $1161=HEAP32[(($1160)>>2)];
 var $1162=(($pa_i_i_i_i)|0);
 HEAP32[(($1162)>>2)]=$1161;
 var $1163=(($1158+20)|0);
 var $1164=($pa_i_i_i_i|0)==($1159|0);
 if($1164){label=349;break;}else{label=345;break;}
 case 345: 
 var $1166=$1163;
 var $1167=HEAP8[(($1166)>>0)];
 var $1168=$1167&1;
 var $1169=(($1168<<24)>>24)==0;
 if($1169){label=347;break;}else{label=346;break;}
 case 346: 
 var $1171=(($1158+28)|0);
 var $1172=HEAP32[(($1171)>>2)];
 var $1173=(($1158+24)|0);
 var $1174=HEAP32[(($1173)>>2)];
 var $1181=$1174;var $1180=$1172;label=348;break;
 case 347: 
 var $1176=$1163;
 var $1177=(($1176+1)|0);
 var $1178=($1167&255);
 var $1179=$1178>>>1;
 var $1181=$1179;var $1180=$1177;label=348;break;
 case 348: 
 var $1180;
 var $1181;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1100,$1180,$1181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=349;break; } else { label=356;break; }
 case 349: 
 var $1182=(($pa_i_i_i_i+16)|0);
 var $1183=(($1158+32)|0);
 var $1184=$1182;
 var $1185=$1183;
 assert(12 % 1 === 0);HEAP32[(($1184)>>2)]=HEAP32[(($1185)>>2)];HEAP32[((($1184)+(4))>>2)]=HEAP32[((($1185)+(4))>>2)];HEAP32[((($1184)+(8))>>2)]=HEAP32[((($1185)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($14,$1156,$1158);
 var $1186=(($pa_i_i_i_i+20)|0);
 HEAP32[(($1186)>>2)]=$1051;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$1156,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=356;break; }
 case 350: 
 var $1187=(($13+4)|0);
 var $1188=HEAP8[(($1187)>>0)];
 var $1189=$1188&1;
 var $1190=(($1189<<24)>>24)==0;
 if($1190){label=351;break;}else{label=359;break;}
 case 351: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=352;break; } else { label=356;break; }
 case 352: 
 throw "Reached an unreachable!";
 case 353: 
 var $1194$0 = ___cxa_find_matching_catch(); var $1194$1 = tempRet0;
 var $1195=$1194$0;
 var $1196=$1194$1;
 var $1197=HEAP8[(($992)>>0)];
 var $1198=$1197&1;
 var $1199=(($1198<<24)>>24)==0;
 if($1199){var $_040=$1195;var $_041=$1196;label=508;break;}else{label=354;break;}
 case 354: 
 var $1201=(($17+8)|0);
 var $1202=HEAP32[(($1201)>>2)];
 _free($1202);
 var $_040=$1195;var $_041=$1196;label=508;break;
 case 355: 
 var $lpad_loopexit65$0 = ___cxa_find_matching_catch(); var $lpad_loopexit65$1 = tempRet0;
 var $lpad_phi67$1=$lpad_loopexit65$1;var $lpad_phi67$0=$lpad_loopexit65$0;label=357;break;
 case 356: 
 var $lpad_nonloopexit66$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit66$1 = tempRet0;
 var $lpad_phi67$1=$lpad_nonloopexit66$1;var $lpad_phi67$0=$lpad_nonloopexit66$0;label=357;break;
 case 357: 
 var $lpad_phi67$0;
 var $lpad_phi67$1;
 var $1204=$lpad_phi67$0;
 var $1205=$lpad_phi67$1;
 var $1206=$1100;
 var $1207=HEAP8[(($1206)>>0)];
 var $1208=$1207&1;
 var $1209=(($1208<<24)>>24)==0;
 if($1209){var $_040=$1204;var $_041=$1205;label=508;break;}else{label=358;break;}
 case 358: 
 var $1211=(($pa_i_i_i_i+12)|0);
 var $1212=HEAP32[(($1211)>>2)];
 _free($1212);
 var $_040=$1204;var $_041=$1205;label=508;break;
 case 359: 
 var $1214=HEAP8[(($1130)>>0)];
 var $1215=$1214&1;
 var $1216=(($1215<<24)>>24)==0;
 if($1216){label=512;break;}else{label=360;break;}
 case 360: 
 var $1218=(($pa_i_i_i_i+12)|0);
 var $1219=HEAP32[(($1218)>>2)];
 _free($1219);
 label=512;break;
 case 361: 
 var $1221=$7;
 var $$etemp$36$0=8;
 var $$etemp$36$1=0;

 var $1222=$8;
 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $1223=$9;
 var $$etemp$38$0=4;
 var $$etemp$38$1=0;

 var $1224=$h_i_i_i_i_i;
 var $$etemp$39$0=8;
 var $$etemp$39$1=0;

 var $1225=$10;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $1226=$h1_i_i_i_i_i;
 var $$etemp$41$0=8;
 var $$etemp$41$1=0;

 var $1227=$11;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $1228=$pa_i_i_i_i_i;
 var $$etemp$43$0=28;
 var $$etemp$43$1=0;

 var $1229=$12;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $1230=($s|0)==2048;
 if($1230){label=362;break;}else{label=377;break;}
 case 362: 
 var $1232=_strlen($name);
 var $1233=($1232>>>0)>4294967279;
 if($1233){label=363;break;}else{label=364;break;}
 case 363: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 364: 
 var $1236=($1232>>>0)<11;
 if($1236){label=365;break;}else{label=366;break;}
 case 365: 
 var $1238=$1232<<1;
 var $1239=(($1238)&255);
 HEAP8[(($1225)>>0)]=$1239;
 var $1240=$10;
 var $1241=(($1240+1)|0);
 var $__p_0_i_i_i_i_i_i=$1241;label=371;break;
 case 366: 
 var $1242=((($1232)+(16))|0);
 var $1243=$1242&-16;
 var $1244=($1243|0)==0;
 var $_size_i_i_i_i_i_i=($1244?1:$1243);
 var $1245=_malloc($_size_i_i_i_i_i_i);
 var $1246=($1245|0)==0;
 if($1246){label=367;break;}else{var $_lcssa_i_i_i_i_i_i=$1245;label=370;break;}
 case 367: 
 var $1247=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1248=($1247|0)==0;
 if($1248){label=369;break;}else{label=368;break;}
 case 368: 
 var $1250=$1247;
 FUNCTION_TABLE[$1250]();
 var $1251=_malloc($_size_i_i_i_i_i_i);
 var $1252=($1251|0)==0;
 if($1252){label=367;break;}else{var $_lcssa_i_i_i_i_i_i=$1251;label=370;break;}
 case 369: 
 var $1254=___cxa_allocate_exception(4);
 var $1255=$1254;
 HEAP32[(($1255)>>2)]=15192;
 ___cxa_throw($1254,26096,(782));
 throw "Reached an unreachable!";
 case 370: 
 var $_lcssa_i_i_i_i_i_i;
 var $1256=(($10+8)|0);
 HEAP32[(($1256)>>2)]=$_lcssa_i_i_i_i_i_i;
 var $1257=$1243|1;
 var $1258=(($10)|0);
 HEAP32[(($1258)>>2)]=$1257;
 var $1259=(($10+4)|0);
 HEAP32[(($1259)>>2)]=$1232;
 var $__p_0_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i;label=371;break;
 case 371: 
 var $__p_0_i_i_i_i_i_i;
 assert($1232 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i, $name, $1232)|0);
 var $1260=(($__p_0_i_i_i_i_i_i+$1232)|0);
 HEAP8[(($1260)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i,$m,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=372;break; } else { label=375;break; }
 case 372: 
 var $1262=HEAP8[(($1225)>>0)];
 var $1263=$1262&1;
 var $1264=(($1263<<24)>>24)==0;
 if($1264){label=374;break;}else{label=373;break;}
 case 373: 
 var $1266=(($10+8)|0);
 var $1267=HEAP32[(($1266)>>2)];
 _free($1267);
 label=374;break;
 case 374: 
 var $1268=(($h_i_i_i_i_i)|0);
 var $1269=HEAP32[(($1268)>>2)];
 var $1270=(($1269+4)|0);
 var $1271=HEAP32[(($1270)>>2)];
 var $1272=(($1271)|0);
 assert(2048 % 1 === 0);(_memcpy($1272, $data, 2048)|0);
 label=512;break;
 case 375: 
 var $1274$0 = ___cxa_find_matching_catch(); var $1274$1 = tempRet0;
 var $1275=$1274$0;
 var $1276=$1274$1;
 var $1277=HEAP8[(($1225)>>0)];
 var $1278=$1277&1;
 var $1279=(($1278<<24)>>24)==0;
 if($1279){var $_036=$1275;var $_037=$1276;label=507;break;}else{label=376;break;}
 case 376: 
 var $1281=(($10+8)|0);
 var $1282=HEAP32[(($1281)>>2)];
 _free($1282);
 var $_036=$1275;var $_037=$1276;label=507;break;
 case 377: 
 var $1284=($s>>>0)<2048;
 if($1284){label=378;break;}else{label=433;break;}
 case 378: 
 var $1286=(((2048)-($s))|0);
 var $1287=_strlen($name);
 var $1288=($1287>>>0)>4294967279;
 if($1288){label=379;break;}else{label=380;break;}
 case 379: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 380: 
 var $1291=($1287>>>0)<11;
 if($1291){label=381;break;}else{label=382;break;}
 case 381: 
 var $1293=$1287<<1;
 var $1294=(($1293)&255);
 HEAP8[(($1227)>>0)]=$1294;
 var $1295=$11;
 var $1296=(($1295+1)|0);
 var $__p_0_i3_i_i_i_i_i=$1296;label=387;break;
 case 382: 
 var $1297=((($1287)+(16))|0);
 var $1298=$1297&-16;
 var $1299=($1298|0)==0;
 var $_size_i5_i_i_i_i_i=($1299?1:$1298);
 var $1300=_malloc($_size_i5_i_i_i_i_i);
 var $1301=($1300|0)==0;
 if($1301){label=383;break;}else{var $_lcssa_i7_i_i_i_i_i=$1300;label=386;break;}
 case 383: 
 var $1302=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1303=($1302|0)==0;
 if($1303){label=385;break;}else{label=384;break;}
 case 384: 
 var $1305=$1302;
 FUNCTION_TABLE[$1305]();
 var $1306=_malloc($_size_i5_i_i_i_i_i);
 var $1307=($1306|0)==0;
 if($1307){label=383;break;}else{var $_lcssa_i7_i_i_i_i_i=$1306;label=386;break;}
 case 385: 
 var $1309=___cxa_allocate_exception(4);
 var $1310=$1309;
 HEAP32[(($1310)>>2)]=15192;
 ___cxa_throw($1309,26096,(782));
 throw "Reached an unreachable!";
 case 386: 
 var $_lcssa_i7_i_i_i_i_i;
 var $1311=(($11+8)|0);
 HEAP32[(($1311)>>2)]=$_lcssa_i7_i_i_i_i_i;
 var $1312=$1298|1;
 var $1313=(($11)|0);
 HEAP32[(($1313)>>2)]=$1312;
 var $1314=(($11+4)|0);
 HEAP32[(($1314)>>2)]=$1287;
 var $__p_0_i3_i_i_i_i_i=$_lcssa_i7_i_i_i_i_i;label=387;break;
 case 387: 
 var $__p_0_i3_i_i_i_i_i;
 assert($1287 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i_i, $name, $1287)|0);
 var $1315=(($__p_0_i3_i_i_i_i_i+$1287)|0);
 HEAP8[(($1315)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i,$m,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=388;break; } else { label=425;break; }
 case 388: 
 var $1317=HEAP8[(($1227)>>0)];
 var $1318=$1317&1;
 var $1319=(($1318<<24)>>24)==0;
 if($1319){label=390;break;}else{label=389;break;}
 case 389: 
 var $1321=(($11+8)|0);
 var $1322=HEAP32[(($1321)>>2)];
 _free($1322);
 label=390;break;
 case 390: 
 var $1323=(($h1_i_i_i_i_i)|0);
 var $1324=HEAP32[(($1323)>>2)];
 var $1325=(($1324+4)|0);
 var $1326=HEAP32[(($1325)>>2)];
 var $1327=(($1326)|0);
 assert($s % 1 === 0);(_memcpy($1327, $data, $s)|0);
 var $1328=(($pa_i_i_i_i_i+4)|0);
 var $1329=$1328;
 var $storemerge_i_i_i_i_i_i=0;label=391;break;
 case 391: 
 var $storemerge_i_i_i_i_i_i;
 var $1331=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($1331){label=392;break;}else{label=393;break;}
 case 392: 
 var $1333=(($1329+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($1333)>>2)]=0;
 var $1334=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$1334;label=391;break;
 case 393: 
 var $1335=(($pa_i_i_i_i_i+4)|0);
 var $1336=_strlen($name);
 var $1337=($1336>>>0)>4294967279;
 if($1337){label=394;break;}else{label=396;break;}
 case 394: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=395;break; } else { label=428;break; }
 case 395: 
 throw "Reached an unreachable!";
 case 396: 
 var $1340=($1336>>>0)<11;
 if($1340){label=397;break;}else{label=398;break;}
 case 397: 
 var $1342=$1336<<1;
 var $1343=(($1342)&255);
 HEAP8[(($1229)>>0)]=$1343;
 var $1344=$12;
 var $1345=(($1344+1)|0);
 var $__p_0_i12_i_i_i_i_i=$1345;label=405;break;
 case 398: 
 var $1346=((($1336)+(16))|0);
 var $1347=$1346&-16;
 var $1348=($1347|0)==0;
 var $_size_i16_i_i_i_i_i=($1348?1:$1347);
 var $1349=_malloc($_size_i16_i_i_i_i_i);
 var $1350=($1349|0)==0;
 if($1350){label=399;break;}else{var $_lcssa_i18_i_i_i_i_i=$1349;label=404;break;}
 case 399: 
 var $1351=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1352=($1351|0)==0;
 if($1352){label=402;break;}else{label=400;break;}
 case 400: 
 var $1354=$1351;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1354]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=401;break; } else { label=427;break; }
 case 401: 
 var $1355=_malloc($_size_i16_i_i_i_i_i);
 var $1356=($1355|0)==0;
 if($1356){label=399;break;}else{var $_lcssa_i18_i_i_i_i_i=$1355;label=404;break;}
 case 402: 
 var $1358=___cxa_allocate_exception(4);
 var $1359=$1358;
 HEAP32[(($1359)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1358,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=403;break; } else { label=428;break; }
 case 403: 
 throw "Reached an unreachable!";
 case 404: 
 var $_lcssa_i18_i_i_i_i_i;
 var $1360=(($12+8)|0);
 HEAP32[(($1360)>>2)]=$_lcssa_i18_i_i_i_i_i;
 var $1361=$1347|1;
 var $1362=(($12)|0);
 HEAP32[(($1362)>>2)]=$1361;
 var $1363=(($12+4)|0);
 HEAP32[(($1363)>>2)]=$1336;
 var $__p_0_i12_i_i_i_i_i=$_lcssa_i18_i_i_i_i_i;label=405;break;
 case 405: 
 var $__p_0_i12_i_i_i_i_i;
 assert($1336 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i_i, $name, $1336)|0);
 var $1364=(($__p_0_i12_i_i_i_i_i+$1336)|0);
 HEAP8[(($1364)>>0)]=0;
 var $1365=$1335;
 var $1366=HEAP8[(($1365)>>0)];
 var $1367=$1366&1;
 var $1368=(($1367<<24)>>24)==0;
 if($1368){label=407;break;}else{label=406;break;}
 case 406: 
 var $1370=(($pa_i_i_i_i_i+12)|0);
 var $1371=HEAP32[(($1370)>>2)];
 HEAP8[(($1371)>>0)]=0;
 var $1372=(($pa_i_i_i_i_i+8)|0);
 HEAP32[(($1372)>>2)]=0;
 label=408;break;
 case 407: 
 var $1374=$1335;
 var $1375=(($1374+1)|0);
 HEAP8[(($1375)>>0)]=0;
 HEAP8[(($1365)>>0)]=0;
 label=408;break;
 case 408: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1335,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=410;break; } else { label=409;break; }
 case 409: 
 var $1377$0 = ___cxa_find_matching_catch(0); var $1377$1 = tempRet0;
 var $1378=$1377$0;
 ___clang_call_terminate($1378);
 throw "Reached an unreachable!";
 case 410: 
 assert(12 % 1 === 0);HEAP32[(($1365)>>2)]=HEAP32[(($1229)>>2)];HEAP32[((($1365)+(4))>>2)]=HEAP32[((($1229)+(4))>>2)];HEAP32[((($1365)+(8))>>2)]=HEAP32[((($1229)+(8))>>2)];
 var $1379=$12;
 var $storemerge_i28_i_i_i_i=0;label=411;break;
 case 411: 
 var $storemerge_i28_i_i_i_i;
 var $1381=($storemerge_i28_i_i_i_i>>>0)<3;
 if($1381){label=412;break;}else{label=413;break;}
 case 412: 
 var $1383=(($1379+($storemerge_i28_i_i_i_i<<2))|0);
 HEAP32[(($1383)>>2)]=0;
 var $1384=((($storemerge_i28_i_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i_i=$1384;label=411;break;
 case 413: 
 var $1385=HEAP8[(($1229)>>0)];
 var $1386=$1385&1;
 var $1387=(($1386<<24)>>24)==0;
 if($1387){label=415;break;}else{label=414;break;}
 case 414: 
 var $1389=(($12+8)|0);
 var $1390=HEAP32[(($1389)>>2)];
 _free($1390);
 label=415;break;
 case 415: 
 var $1391=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($9,$1391,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=416;break; } else { label=428;break; }
 case 416: 
 var $1392=(($9)|0);
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=(($1393+16)|0);
 var $1395=(($1394)|0);
 var $1396=HEAP32[(($1395)>>2)];
 var $1397=(($pa_i_i_i_i_i)|0);
 HEAP32[(($1397)>>2)]=$1396;
 var $1398=(($1393+20)|0);
 var $1399=($pa_i_i_i_i_i|0)==($1394|0);
 if($1399){label=421;break;}else{label=417;break;}
 case 417: 
 var $1401=$1398;
 var $1402=HEAP8[(($1401)>>0)];
 var $1403=$1402&1;
 var $1404=(($1403<<24)>>24)==0;
 if($1404){label=419;break;}else{label=418;break;}
 case 418: 
 var $1406=(($1393+28)|0);
 var $1407=HEAP32[(($1406)>>2)];
 var $1408=(($1393+24)|0);
 var $1409=HEAP32[(($1408)>>2)];
 var $1416=$1409;var $1415=$1407;label=420;break;
 case 419: 
 var $1411=$1398;
 var $1412=(($1411+1)|0);
 var $1413=($1402&255);
 var $1414=$1413>>>1;
 var $1416=$1414;var $1415=$1412;label=420;break;
 case 420: 
 var $1415;
 var $1416;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1335,$1415,$1416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=421;break; } else { label=428;break; }
 case 421: 
 var $1417=(($pa_i_i_i_i_i+16)|0);
 var $1418=(($1393+32)|0);
 var $1419=$1417;
 var $1420=$1418;
 assert(12 % 1 === 0);HEAP32[(($1419)>>2)]=HEAP32[(($1420)>>2)];HEAP32[((($1419)+(4))>>2)]=HEAP32[((($1420)+(4))>>2)];HEAP32[((($1419)+(8))>>2)]=HEAP32[((($1420)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($8,$1391,$1393);
 var $1421=(($pa_i_i_i_i_i+20)|0);
 HEAP32[(($1421)>>2)]=$1286;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$1391,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=422;break; } else { label=428;break; }
 case 422: 
 var $1422=(($7+4)|0);
 var $1423=HEAP8[(($1422)>>0)];
 var $1424=$1423&1;
 var $1425=(($1424<<24)>>24)==0;
 if($1425){label=423;break;}else{label=431;break;}
 case 423: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=424;break; } else { label=428;break; }
 case 424: 
 throw "Reached an unreachable!";
 case 425: 
 var $1429$0 = ___cxa_find_matching_catch(); var $1429$1 = tempRet0;
 var $1430=$1429$0;
 var $1431=$1429$1;
 var $1432=HEAP8[(($1227)>>0)];
 var $1433=$1432&1;
 var $1434=(($1433<<24)>>24)==0;
 if($1434){var $_036=$1430;var $_037=$1431;label=507;break;}else{label=426;break;}
 case 426: 
 var $1436=(($11+8)|0);
 var $1437=HEAP32[(($1436)>>2)];
 _free($1437);
 var $_036=$1430;var $_037=$1431;label=507;break;
 case 427: 
 var $lpad_loopexit70$0 = ___cxa_find_matching_catch(); var $lpad_loopexit70$1 = tempRet0;
 var $lpad_phi72$1=$lpad_loopexit70$1;var $lpad_phi72$0=$lpad_loopexit70$0;label=429;break;
 case 428: 
 var $lpad_nonloopexit71$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit71$1 = tempRet0;
 var $lpad_phi72$1=$lpad_nonloopexit71$1;var $lpad_phi72$0=$lpad_nonloopexit71$0;label=429;break;
 case 429: 
 var $lpad_phi72$0;
 var $lpad_phi72$1;
 var $1439=$lpad_phi72$0;
 var $1440=$lpad_phi72$1;
 var $1441=$1335;
 var $1442=HEAP8[(($1441)>>0)];
 var $1443=$1442&1;
 var $1444=(($1443<<24)>>24)==0;
 if($1444){var $_036=$1439;var $_037=$1440;label=507;break;}else{label=430;break;}
 case 430: 
 var $1446=(($pa_i_i_i_i_i+12)|0);
 var $1447=HEAP32[(($1446)>>2)];
 _free($1447);
 var $_036=$1439;var $_037=$1440;label=507;break;
 case 431: 
 var $1449=HEAP8[(($1365)>>0)];
 var $1450=$1449&1;
 var $1451=(($1450<<24)>>24)==0;
 if($1451){label=512;break;}else{label=432;break;}
 case 432: 
 var $1453=(($pa_i_i_i_i_i+12)|0);
 var $1454=HEAP32[(($1453)>>2)];
 _free($1454);
 label=512;break;
 case 433: 
 var $1456=$1;
 var $$etemp$45$0=8;
 var $$etemp$45$1=0;

 var $1457=$2;
 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 var $1458=$3;
 var $$etemp$47$0=4;
 var $$etemp$47$1=0;

 var $1459=$h_i_i_i_i_i_i;
 var $$etemp$48$0=8;
 var $$etemp$48$1=0;

 var $1460=$4;
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $1461=$h1_i_i_i_i_i_i;
 var $$etemp$50$0=8;
 var $$etemp$50$1=0;

 var $1462=$5;
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $1463=$pa_i_i_i_i_i_i;
 var $$etemp$52$0=28;
 var $$etemp$52$1=0;

 var $1464=$6;
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $1465=($s|0)==1048576;
 if($1465){label=434;break;}else{label=449;break;}
 case 434: 
 var $1467=_strlen($name);
 var $1468=($1467>>>0)>4294967279;
 if($1468){label=435;break;}else{label=436;break;}
 case 435: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 436: 
 var $1471=($1467>>>0)<11;
 if($1471){label=437;break;}else{label=438;break;}
 case 437: 
 var $1473=$1467<<1;
 var $1474=(($1473)&255);
 HEAP8[(($1460)>>0)]=$1474;
 var $1475=$4;
 var $1476=(($1475+1)|0);
 var $__p_0_i_i_i_i_i_i_i=$1476;label=443;break;
 case 438: 
 var $1477=((($1467)+(16))|0);
 var $1478=$1477&-16;
 var $1479=($1478|0)==0;
 var $_size_i_i_i_i_i_i_i=($1479?1:$1478);
 var $1480=_malloc($_size_i_i_i_i_i_i_i);
 var $1481=($1480|0)==0;
 if($1481){label=439;break;}else{var $_lcssa_i_i_i_i_i_i_i=$1480;label=442;break;}
 case 439: 
 var $1482=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1483=($1482|0)==0;
 if($1483){label=441;break;}else{label=440;break;}
 case 440: 
 var $1485=$1482;
 FUNCTION_TABLE[$1485]();
 var $1486=_malloc($_size_i_i_i_i_i_i_i);
 var $1487=($1486|0)==0;
 if($1487){label=439;break;}else{var $_lcssa_i_i_i_i_i_i_i=$1486;label=442;break;}
 case 441: 
 var $1489=___cxa_allocate_exception(4);
 var $1490=$1489;
 HEAP32[(($1490)>>2)]=15192;
 ___cxa_throw($1489,26096,(782));
 throw "Reached an unreachable!";
 case 442: 
 var $_lcssa_i_i_i_i_i_i_i;
 var $1491=(($4+8)|0);
 HEAP32[(($1491)>>2)]=$_lcssa_i_i_i_i_i_i_i;
 var $1492=$1478|1;
 var $1493=(($4)|0);
 HEAP32[(($1493)>>2)]=$1492;
 var $1494=(($4+4)|0);
 HEAP32[(($1494)>>2)]=$1467;
 var $__p_0_i_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i_i;label=443;break;
 case 443: 
 var $__p_0_i_i_i_i_i_i_i;
 assert($1467 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i_i, $name, $1467)|0);
 var $1495=(($__p_0_i_i_i_i_i_i_i+$1467)|0);
 HEAP8[(($1495)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i_i,$m,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=444;break; } else { label=447;break; }
 case 444: 
 var $1497=HEAP8[(($1460)>>0)];
 var $1498=$1497&1;
 var $1499=(($1498<<24)>>24)==0;
 if($1499){label=446;break;}else{label=445;break;}
 case 445: 
 var $1501=(($4+8)|0);
 var $1502=HEAP32[(($1501)>>2)];
 _free($1502);
 label=446;break;
 case 446: 
 var $1503=(($h_i_i_i_i_i_i)|0);
 var $1504=HEAP32[(($1503)>>2)];
 var $1505=(($1504+4)|0);
 var $1506=HEAP32[(($1505)>>2)];
 var $1507=(($1506)|0);
 assert(1048576 % 1 === 0);(_memcpy($1507, $data, 1048576)|0);
 label=512;break;
 case 447: 
 var $1509$0 = ___cxa_find_matching_catch(); var $1509$1 = tempRet0;
 var $1510=$1509$0;
 var $1511=$1509$1;
 var $1512=HEAP8[(($1460)>>0)];
 var $1513=$1512&1;
 var $1514=(($1513<<24)>>24)==0;
 if($1514){var $_0=$1510;var $_035=$1511;label=506;break;}else{label=448;break;}
 case 448: 
 var $1516=(($4+8)|0);
 var $1517=HEAP32[(($1516)>>2)];
 _free($1517);
 var $_0=$1510;var $_035=$1511;label=506;break;
 case 449: 
 var $1519=($s>>>0)<1048576;
 if($1519){label=450;break;}else{label=505;break;}
 case 450: 
 var $1521=(((1048576)-($s))|0);
 var $1522=_strlen($name);
 var $1523=($1522>>>0)>4294967279;
 if($1523){label=451;break;}else{label=452;break;}
 case 451: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 452: 
 var $1526=($1522>>>0)<11;
 if($1526){label=453;break;}else{label=454;break;}
 case 453: 
 var $1528=$1522<<1;
 var $1529=(($1528)&255);
 HEAP8[(($1462)>>0)]=$1529;
 var $1530=$5;
 var $1531=(($1530+1)|0);
 var $__p_0_i3_i_i_i_i_i_i=$1531;label=459;break;
 case 454: 
 var $1532=((($1522)+(16))|0);
 var $1533=$1532&-16;
 var $1534=($1533|0)==0;
 var $_size_i5_i_i_i_i_i_i=($1534?1:$1533);
 var $1535=_malloc($_size_i5_i_i_i_i_i_i);
 var $1536=($1535|0)==0;
 if($1536){label=455;break;}else{var $_lcssa_i7_i_i_i_i_i_i=$1535;label=458;break;}
 case 455: 
 var $1537=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1538=($1537|0)==0;
 if($1538){label=457;break;}else{label=456;break;}
 case 456: 
 var $1540=$1537;
 FUNCTION_TABLE[$1540]();
 var $1541=_malloc($_size_i5_i_i_i_i_i_i);
 var $1542=($1541|0)==0;
 if($1542){label=455;break;}else{var $_lcssa_i7_i_i_i_i_i_i=$1541;label=458;break;}
 case 457: 
 var $1544=___cxa_allocate_exception(4);
 var $1545=$1544;
 HEAP32[(($1545)>>2)]=15192;
 ___cxa_throw($1544,26096,(782));
 throw "Reached an unreachable!";
 case 458: 
 var $_lcssa_i7_i_i_i_i_i_i;
 var $1546=(($5+8)|0);
 HEAP32[(($1546)>>2)]=$_lcssa_i7_i_i_i_i_i_i;
 var $1547=$1533|1;
 var $1548=(($5)|0);
 HEAP32[(($1548)>>2)]=$1547;
 var $1549=(($5+4)|0);
 HEAP32[(($1549)>>2)]=$1522;
 var $__p_0_i3_i_i_i_i_i_i=$_lcssa_i7_i_i_i_i_i_i;label=459;break;
 case 459: 
 var $__p_0_i3_i_i_i_i_i_i;
 assert($1522 % 1 === 0);(_memcpy($__p_0_i3_i_i_i_i_i_i, $name, $1522)|0);
 var $1550=(($__p_0_i3_i_i_i_i_i_i+$1522)|0);
 HEAP8[(($1550)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i_i,$m,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=460;break; } else { label=497;break; }
 case 460: 
 var $1552=HEAP8[(($1462)>>0)];
 var $1553=$1552&1;
 var $1554=(($1553<<24)>>24)==0;
 if($1554){label=462;break;}else{label=461;break;}
 case 461: 
 var $1556=(($5+8)|0);
 var $1557=HEAP32[(($1556)>>2)];
 _free($1557);
 label=462;break;
 case 462: 
 var $1558=(($h1_i_i_i_i_i_i)|0);
 var $1559=HEAP32[(($1558)>>2)];
 var $1560=(($1559+4)|0);
 var $1561=HEAP32[(($1560)>>2)];
 var $1562=(($1561)|0);
 assert($s % 1 === 0);(_memcpy($1562, $data, $s)|0);
 var $1563=(($pa_i_i_i_i_i_i+4)|0);
 var $1564=$1563;
 var $storemerge_i_i_i_i_i_i_i=0;label=463;break;
 case 463: 
 var $storemerge_i_i_i_i_i_i_i;
 var $1566=($storemerge_i_i_i_i_i_i_i>>>0)<3;
 if($1566){label=464;break;}else{label=465;break;}
 case 464: 
 var $1568=(($1564+($storemerge_i_i_i_i_i_i_i<<2))|0);
 HEAP32[(($1568)>>2)]=0;
 var $1569=((($storemerge_i_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i_i=$1569;label=463;break;
 case 465: 
 var $1570=(($pa_i_i_i_i_i_i+4)|0);
 var $1571=_strlen($name);
 var $1572=($1571>>>0)>4294967279;
 if($1572){label=466;break;}else{label=468;break;}
 case 466: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=467;break; } else { label=500;break; }
 case 467: 
 throw "Reached an unreachable!";
 case 468: 
 var $1575=($1571>>>0)<11;
 if($1575){label=469;break;}else{label=470;break;}
 case 469: 
 var $1577=$1571<<1;
 var $1578=(($1577)&255);
 HEAP8[(($1464)>>0)]=$1578;
 var $1579=$6;
 var $1580=(($1579+1)|0);
 var $__p_0_i12_i_i_i_i_i_i=$1580;label=477;break;
 case 470: 
 var $1581=((($1571)+(16))|0);
 var $1582=$1581&-16;
 var $1583=($1582|0)==0;
 var $_size_i16_i_i_i_i_i_i=($1583?1:$1582);
 var $1584=_malloc($_size_i16_i_i_i_i_i_i);
 var $1585=($1584|0)==0;
 if($1585){label=471;break;}else{var $_lcssa_i18_i_i_i_i_i_i=$1584;label=476;break;}
 case 471: 
 var $1586=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1587=($1586|0)==0;
 if($1587){label=474;break;}else{label=472;break;}
 case 472: 
 var $1589=$1586;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1589]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=473;break; } else { label=499;break; }
 case 473: 
 var $1590=_malloc($_size_i16_i_i_i_i_i_i);
 var $1591=($1590|0)==0;
 if($1591){label=471;break;}else{var $_lcssa_i18_i_i_i_i_i_i=$1590;label=476;break;}
 case 474: 
 var $1593=___cxa_allocate_exception(4);
 var $1594=$1593;
 HEAP32[(($1594)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1593,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=475;break; } else { label=500;break; }
 case 475: 
 throw "Reached an unreachable!";
 case 476: 
 var $_lcssa_i18_i_i_i_i_i_i;
 var $1595=(($6+8)|0);
 HEAP32[(($1595)>>2)]=$_lcssa_i18_i_i_i_i_i_i;
 var $1596=$1582|1;
 var $1597=(($6)|0);
 HEAP32[(($1597)>>2)]=$1596;
 var $1598=(($6+4)|0);
 HEAP32[(($1598)>>2)]=$1571;
 var $__p_0_i12_i_i_i_i_i_i=$_lcssa_i18_i_i_i_i_i_i;label=477;break;
 case 477: 
 var $__p_0_i12_i_i_i_i_i_i;
 assert($1571 % 1 === 0);(_memcpy($__p_0_i12_i_i_i_i_i_i, $name, $1571)|0);
 var $1599=(($__p_0_i12_i_i_i_i_i_i+$1571)|0);
 HEAP8[(($1599)>>0)]=0;
 var $1600=$1570;
 var $1601=HEAP8[(($1600)>>0)];
 var $1602=$1601&1;
 var $1603=(($1602<<24)>>24)==0;
 if($1603){label=479;break;}else{label=478;break;}
 case 478: 
 var $1605=(($pa_i_i_i_i_i_i+12)|0);
 var $1606=HEAP32[(($1605)>>2)];
 HEAP8[(($1606)>>0)]=0;
 var $1607=(($pa_i_i_i_i_i_i+8)|0);
 HEAP32[(($1607)>>2)]=0;
 label=480;break;
 case 479: 
 var $1609=$1570;
 var $1610=(($1609+1)|0);
 HEAP8[(($1610)>>0)]=0;
 HEAP8[(($1600)>>0)]=0;
 label=480;break;
 case 480: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1570,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=482;break; } else { label=481;break; }
 case 481: 
 var $1612$0 = ___cxa_find_matching_catch(0); var $1612$1 = tempRet0;
 var $1613=$1612$0;
 ___clang_call_terminate($1613);
 throw "Reached an unreachable!";
 case 482: 
 assert(12 % 1 === 0);HEAP32[(($1600)>>2)]=HEAP32[(($1464)>>2)];HEAP32[((($1600)+(4))>>2)]=HEAP32[((($1464)+(4))>>2)];HEAP32[((($1600)+(8))>>2)]=HEAP32[((($1464)+(8))>>2)];
 var $1614=$6;
 var $storemerge_i28_i_i_i_i_i=0;label=483;break;
 case 483: 
 var $storemerge_i28_i_i_i_i_i;
 var $1616=($storemerge_i28_i_i_i_i_i>>>0)<3;
 if($1616){label=484;break;}else{label=485;break;}
 case 484: 
 var $1618=(($1614+($storemerge_i28_i_i_i_i_i<<2))|0);
 HEAP32[(($1618)>>2)]=0;
 var $1619=((($storemerge_i28_i_i_i_i_i)+(1))|0);
 var $storemerge_i28_i_i_i_i_i=$1619;label=483;break;
 case 485: 
 var $1620=HEAP8[(($1464)>>0)];
 var $1621=$1620&1;
 var $1622=(($1621<<24)>>24)==0;
 if($1622){label=487;break;}else{label=486;break;}
 case 486: 
 var $1624=(($6+8)|0);
 var $1625=HEAP32[(($1624)>>2)];
 _free($1625);
 label=487;break;
 case 487: 
 var $1626=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($3,$1626,$pa_i_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=488;break; } else { label=500;break; }
 case 488: 
 var $1627=(($3)|0);
 var $1628=HEAP32[(($1627)>>2)];
 var $1629=(($1628+16)|0);
 var $1630=(($1629)|0);
 var $1631=HEAP32[(($1630)>>2)];
 var $1632=(($pa_i_i_i_i_i_i)|0);
 HEAP32[(($1632)>>2)]=$1631;
 var $1633=(($1628+20)|0);
 var $1634=($pa_i_i_i_i_i_i|0)==($1629|0);
 if($1634){label=493;break;}else{label=489;break;}
 case 489: 
 var $1636=$1633;
 var $1637=HEAP8[(($1636)>>0)];
 var $1638=$1637&1;
 var $1639=(($1638<<24)>>24)==0;
 if($1639){label=491;break;}else{label=490;break;}
 case 490: 
 var $1641=(($1628+28)|0);
 var $1642=HEAP32[(($1641)>>2)];
 var $1643=(($1628+24)|0);
 var $1644=HEAP32[(($1643)>>2)];
 var $1651=$1644;var $1650=$1642;label=492;break;
 case 491: 
 var $1646=$1633;
 var $1647=(($1646+1)|0);
 var $1648=($1637&255);
 var $1649=$1648>>>1;
 var $1651=$1649;var $1650=$1647;label=492;break;
 case 492: 
 var $1650;
 var $1651;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1570,$1650,$1651) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=493;break; } else { label=500;break; }
 case 493: 
 var $1652=(($pa_i_i_i_i_i_i+16)|0);
 var $1653=(($1628+32)|0);
 var $1654=$1652;
 var $1655=$1653;
 assert(12 % 1 === 0);HEAP32[(($1654)>>2)]=HEAP32[(($1655)>>2)];HEAP32[((($1654)+(4))>>2)]=HEAP32[((($1655)+(4))>>2)];HEAP32[((($1654)+(8))>>2)]=HEAP32[((($1655)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($2,$1626,$1628);
 var $1656=(($pa_i_i_i_i_i_i+20)|0);
 HEAP32[(($1656)>>2)]=$1521;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$1626,$pa_i_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=494;break; } else { label=500;break; }
 case 494: 
 var $1657=(($1+4)|0);
 var $1658=HEAP8[(($1657)>>0)];
 var $1659=$1658&1;
 var $1660=(($1659<<24)>>24)==0;
 if($1660){label=495;break;}else{label=503;break;}
 case 495: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,186,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=496;break; } else { label=500;break; }
 case 496: 
 throw "Reached an unreachable!";
 case 497: 
 var $1664$0 = ___cxa_find_matching_catch(); var $1664$1 = tempRet0;
 var $1665=$1664$0;
 var $1666=$1664$1;
 var $1667=HEAP8[(($1462)>>0)];
 var $1668=$1667&1;
 var $1669=(($1668<<24)>>24)==0;
 if($1669){var $_0=$1665;var $_035=$1666;label=506;break;}else{label=498;break;}
 case 498: 
 var $1671=(($5+8)|0);
 var $1672=HEAP32[(($1671)>>2)];
 _free($1672);
 var $_0=$1665;var $_035=$1666;label=506;break;
 case 499: 
 var $lpad_loopexit75$0 = ___cxa_find_matching_catch(); var $lpad_loopexit75$1 = tempRet0;
 var $lpad_phi77$1=$lpad_loopexit75$1;var $lpad_phi77$0=$lpad_loopexit75$0;label=501;break;
 case 500: 
 var $lpad_nonloopexit76$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit76$1 = tempRet0;
 var $lpad_phi77$1=$lpad_nonloopexit76$1;var $lpad_phi77$0=$lpad_nonloopexit76$0;label=501;break;
 case 501: 
 var $lpad_phi77$0;
 var $lpad_phi77$1;
 var $1674=$lpad_phi77$0;
 var $1675=$lpad_phi77$1;
 var $1676=$1570;
 var $1677=HEAP8[(($1676)>>0)];
 var $1678=$1677&1;
 var $1679=(($1678<<24)>>24)==0;
 if($1679){var $_0=$1674;var $_035=$1675;label=506;break;}else{label=502;break;}
 case 502: 
 var $1681=(($pa_i_i_i_i_i_i+12)|0);
 var $1682=HEAP32[(($1681)>>2)];
 _free($1682);
 var $_0=$1674;var $_035=$1675;label=506;break;
 case 503: 
 var $1684=HEAP8[(($1600)>>0)];
 var $1685=$1684&1;
 var $1686=(($1685<<24)>>24)==0;
 if($1686){label=512;break;}else{label=504;break;}
 case 504: 
 var $1688=(($pa_i_i_i_i_i_i+12)|0);
 var $1689=HEAP32[(($1688)>>2)];
 _free($1689);
 label=512;break;
 case 505: 
 ___assert_fail(4208,5512,203,10504);
 throw "Reached an unreachable!";
 case 506: 
 var $_035;
 var $_0;
 var $1691$0=$_0;
 var $1691$1=0;
 var $1692$0=$1691$0;
 var $1692$1=$_035;
 ___resumeException($1692$0)
 case 507: 
 var $_037;
 var $_036;
 var $1693$0=$_036;
 var $1693$1=0;
 var $1694$0=$1693$0;
 var $1694$1=$_037;
 ___resumeException($1694$0)
 case 508: 
 var $_041;
 var $_040;
 var $1695$0=$_040;
 var $1695$1=0;
 var $1696$0=$1695$0;
 var $1696$1=$_041;
 ___resumeException($1696$0)
 case 509: 
 var $_043;
 var $_042;
 var $1697$0=$_042;
 var $1697$1=0;
 var $1698$0=$1697$0;
 var $1698$1=$_043;
 ___resumeException($1698$0)
 case 510: 
 var $_045;
 var $_044;
 var $1699$0=$_044;
 var $1699$1=0;
 var $1700$0=$1699$0;
 var $1700$1=$_045;
 ___resumeException($1700$0)
 case 511: 
 var $_047;
 var $_046;
 var $1701$0=$_046;
 var $1701$1=0;
 var $1702$0=$1701$0;
 var $1702$1=$_047;
 ___resumeException($1702$0)
 case 512: 
 STACKTOP=sp;return;
 case 513: 
 var $_039;
 var $_038;
 var $1703$0=$_039;
 var $1703$1=0;
 var $1704$0=$1703$0;
 var $1704$1=$_038;
 ___resumeException($1704$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=64;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18296;
 var $67=_malloc(64);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(64);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 64)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=128;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18584;
 var $67=_malloc(128);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(128);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 128)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=256;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18440;
 var $67=_malloc(256);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(256);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 256)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=512;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18344;
 var $67=_malloc(512);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(512);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 512)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=1024;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18680;
 var $67=_malloc(1024);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(1024);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 1024)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=2048;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18488;
 var $67=_malloc(2048);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(2048);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 2048)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerMeshAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerMeshAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $h=(sp)+(16);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre=$name;
 if($11){var $_pre_phi=$_pre;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+156)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5400,3376,1427,10376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi8$1=$lpad_loopexit6$1;var $lpad_phi8$0=$lpad_loopexit6$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi8$1=$lpad_nonloopexit7$1;var $lpad_phi8$0=$lpad_nonloopexit7$0;label=19;break;
 case 19: 
 var $lpad_phi8$0;
 var $lpad_phi8$1;
 var $50=$lpad_phi8$0;
 var $51=$lpad_phi8$1;
 var $_0=$50;var $_04=$51;label=39;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=1048576;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=$_lcssa_i;
 HEAP32[(($66)>>2)]=18632;
 var $67=_malloc(1048576);
 var $68=($67|0)==0;
 if($68){label=27;break;}else{var $_lcssa_i_i=$67;label=32;break;}
 case 27: 
 var $69=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $70=($69|0)==0;
 if($70){label=30;break;}else{label=28;break;}
 case 28: 
 var $72=$69;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=36;break; }
 case 29: 
 var $73=_malloc(1048576);
 var $74=($73|0)==0;
 if($74){label=27;break;}else{var $_lcssa_i_i=$73;label=32;break;}
 case 30: 
 var $76=___cxa_allocate_exception(4);
 var $77=$76;
 HEAP32[(($77)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($76,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $_lcssa_i_i;
 var $78=$_lcssa_i_i;
 _memset($_lcssa_i_i, 0, 1048576)|0;
 var $79=(($_lcssa_i+4)|0);
 var $80=$79;
 HEAP32[(($80)>>2)]=$78;
 var $81=$_lcssa_i;
 var $82=(($h)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($m+112)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)+(1))|0);
 HEAP32[(($83)>>2)]=$85;
 var $86=(($h+24)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($m+152)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$87,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $89=(($1)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($90+40)|0);
 var $94=(($agg_result)|0);
 var $95=$92;
 HEAP32[(($94)>>2)]=$95;
 var $96=(($agg_result+4)|0);
 var $97=HEAP32[(($93)>>2)];
 HEAP32[(($96)>>2)]=$97;
 var $98=$10;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $103=(($h+12)|0);
 var $104=HEAP32[(($103)>>2)];
 _free($104);
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=38;break;
 case 38: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $105=$lpad_phi$0;
 var $106=$lpad_phi$1;
 _free($_lcssa_i);
 var $_0=$105;var $_04=$106;label=39;break;
 case 39: 
 var $_04;
 var $_0;
 var $108=$10;
 var $109=HEAP8[(($108)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=41;break;}else{label=40;break;}
 case 40: 
 var $113=(($h+12)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 label=41;break;
 case 41: 
 var $115$0=$_0;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_04;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18632;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18632;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEE6SizeOfEv($this){
 var label=0;


 return 1048576;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1048576EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18488;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18488;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEE6SizeOfEv($this){
 var label=0;


 return 2048;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi2048EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18680;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18680;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEE6SizeOfEv($this){
 var label=0;


 return 1024;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi1024EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18344;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18344;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEE6SizeOfEv($this){
 var label=0;


 return 512;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi512EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18440;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18440;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEE6SizeOfEv($this){
 var label=0;


 return 256;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi256EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18584;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18584;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEE6SizeOfEv($this){
 var label=0;


 return 128;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi128EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18296;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18296;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEE6SizeOfEv($this){
 var label=0;


 return 64;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi64EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18392;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18392;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEE6SizeOfEv($this){
 var label=0;


 return 32;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi32EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18536;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18536;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEE6SizeOfEv($this){
 var label=0;


 return 16;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi16EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18248;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18248;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($3)|0);
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEE7ReorderERNSt3__16vectorIjNS6_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEE6SizeOfEv($this){
 var label=0;


 return 8;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 return $3;
}

//Func
function __ZN3vcg9AttributeINS_3tri2io9DummyTypeILi8EEEE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(32);
 var $__parent=(sp)+(64);
 var $3=$1;
 var $$etemp$0$0=28;
 var $$etemp$0$1=0;

 var $4=$2;
 var $$etemp$1$0=28;
 var $$etemp$1$1=0;

 var $5=(($this+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=37;break;}else{label=2;break;}
 case 2: 
 var $8=(($1)|0);
 var $9=(($1+4)|0);
 var $10=$9;
 var $11=(($1+16)|0);
 var $12=$11;
 var $13=(($2)|0);
 var $14=(($__v)|0);
 var $15=(($2+4)|0);
 var $16=(($__v+4)|0);
 var $17=$16;
 var $18=$15;
 var $19=(($2+16)|0);
 var $20=(($__v+16)|0);
 var $21=$19;
 var $22=$20;
 var $23=(($2+12)|0);
 var $24=(($__v+12)|0);
 var $25=(($__v+8)|0);
 var $26=$15;
 var $27=(($26+1)|0);
 var $28=(($15)|0);
 var $29=(($2+8)|0);
 var $30=(($1+12)|0);
 var $31=$9;
 var $32=(($31+1)|0);
 var $33=(($9)|0);
 var $34=(($1+8)|0);
 var $__nd_i_0_in=$6;label=3;break;
 case 3: 
 var $__nd_i_0_in;
 var $36=(($__nd_i_0_in+16)|0);
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 HEAP32[(($8)>>2)]=$39;
 var $40=(($__nd_i_0_in+20)|0);
 var $41=$40;
 var $42=HEAP8[(($41)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
 label=15;break;
 case 5: 
 var $47=(($__nd_i_0_in+28)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($__nd_i_0_in+24)|0);
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $53=($52>>>0)>4294967279;
 if($53){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 7: 
 var $56=($52>>>0)<11;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 var $58=$52<<1;
 var $59=(($58)&255);
 HEAP8[(($10)>>0)]=$59;
 var $__p_0_i_i_i=$32;label=14;break;
 case 9: 
 var $60=((($52)+(16))|0);
 var $61=$60&-16;
 var $62=($61|0)==0;
 var $_size_i_i=($62?1:$61);
 var $63=_malloc($_size_i_i);
 var $64=($63|0)==0;
 if($64){label=10;break;}else{var $_lcssa_i_i=$63;label=13;break;}
 case 10: 
 var $65=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $66=($65|0)==0;
 if($66){label=12;break;}else{label=11;break;}
 case 11: 
 var $68=$65;
 FUNCTION_TABLE[$68]();
 var $69=_malloc($_size_i_i);
 var $70=($69|0)==0;
 if($70){label=10;break;}else{var $_lcssa_i_i=$69;label=13;break;}
 case 12: 
 var $72=___cxa_allocate_exception(4);
 var $73=$72;
 HEAP32[(($73)>>2)]=15192;
 ___cxa_throw($72,26096,(782));
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i;
 HEAP32[(($30)>>2)]=$_lcssa_i_i;
 var $74=$61|1;
 HEAP32[(($33)>>2)]=$74;
 HEAP32[(($34)>>2)]=$52;
 var $__p_0_i_i_i=$_lcssa_i_i;label=14;break;
 case 14: 
 var $__p_0_i_i_i;
 assert($52 % 1 === 0);(_memcpy($__p_0_i_i_i, $49, $52)|0);
 var $75=(($__p_0_i_i_i+$52)|0);
 HEAP8[(($75)>>0)]=0;
 label=15;break;
 case 15: 
 var $76=(($__nd_i_0_in+32)|0);
 var $77=$76;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($77)+(8))>>2)];
 var $78=__ZNK3vcg18PointerToAttributeltES0_($__v,$1);
 var $79=HEAP8[(($10)>>0)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=17;break;}else{label=16;break;}
 case 16: 
 var $83=HEAP32[(($30)>>2)];
 _free($83);
 label=17;break;
 case 17: 
 if($78){label=18;break;}else{label=20;break;}
 case 18: 
 var $85=(($__nd_i_0_in)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86|0)==0;
 if($87){label=19;break;}else{var $__nd_i_0_in=$86;label=3;break;}
 case 19: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $89=(($__nd_i_0_in)|0);
 var $_013=$89;label=39;break;
 case 20: 
 var $91=HEAP32[(($14)>>2)];
 HEAP32[(($13)>>2)]=$91;
 var $92=HEAP8[(($17)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=21;break;}else{label=22;break;}
 case 21: 
 assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 label=32;break;
 case 22: 
 var $97=HEAP32[(($24)>>2)];
 var $98=HEAP32[(($25)>>2)];
 var $99=($98>>>0)>4294967279;
 if($99){label=23;break;}else{label=24;break;}
 case 23: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 24: 
 var $102=($98>>>0)<11;
 if($102){label=25;break;}else{label=26;break;}
 case 25: 
 var $104=$98<<1;
 var $105=(($104)&255);
 HEAP8[(($18)>>0)]=$105;
 var $__p_0_i_i3_i=$27;label=31;break;
 case 26: 
 var $106=((($98)+(16))|0);
 var $107=$106&-16;
 var $108=($107|0)==0;
 var $_size_i8_i=($108?1:$107);
 var $109=_malloc($_size_i8_i);
 var $110=($109|0)==0;
 if($110){label=27;break;}else{var $_lcssa_i10_i=$109;label=30;break;}
 case 27: 
 var $111=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $112=($111|0)==0;
 if($112){label=29;break;}else{label=28;break;}
 case 28: 
 var $114=$111;
 FUNCTION_TABLE[$114]();
 var $115=_malloc($_size_i8_i);
 var $116=($115|0)==0;
 if($116){label=27;break;}else{var $_lcssa_i10_i=$115;label=30;break;}
 case 29: 
 var $118=___cxa_allocate_exception(4);
 var $119=$118;
 HEAP32[(($119)>>2)]=15192;
 ___cxa_throw($118,26096,(782));
 throw "Reached an unreachable!";
 case 30: 
 var $_lcssa_i10_i;
 HEAP32[(($23)>>2)]=$_lcssa_i10_i;
 var $120=$107|1;
 HEAP32[(($28)>>2)]=$120;
 HEAP32[(($29)>>2)]=$98;
 var $__p_0_i_i3_i=$_lcssa_i10_i;label=31;break;
 case 31: 
 var $__p_0_i_i3_i;
 assert($98 % 1 === 0);(_memcpy($__p_0_i_i3_i, $97, $98)|0);
 var $121=(($__p_0_i_i3_i+$98)|0);
 HEAP8[(($121)>>0)]=0;
 label=32;break;
 case 32: 
 assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
 var $122=__ZNK3vcg18PointerToAttributeltES0_($37,$2);
 var $123=HEAP8[(($18)>>0)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=34;break;}else{label=33;break;}
 case 33: 
 var $127=HEAP32[(($23)>>2)];
 _free($127);
 label=34;break;
 case 34: 
 if($122){label=35;break;}else{label=38;break;}
 case 35: 
 var $129=(($__nd_i_0_in+4)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($130|0)==0;
 if($131){label=36;break;}else{var $__nd_i_0_in=$130;label=3;break;}
 case 36: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $133=(($__nd_i_0_in+4)|0);
 var $_013=$133;label=39;break;
 case 37: 
 var $135=(($this+4)|0);
 var $136=$135;
 HEAP32[(($__parent)>>2)]=$136;
 var $137=(($135)|0);
 var $_013=$137;label=39;break;
 case 38: 
 HEAP32[(($__parent)>>2)]=$__nd_i_0_in;
 var $$etemp$2$0=28;
 var $$etemp$2$1=0;

 var $$etemp$3$0=28;
 var $$etemp$3$1=0;

 var $138=$__nd_i_0_in;
 var $139=($__nd_i_0_in|0)==0;
 if($139){var $_013=$__parent;label=39;break;}else{var $__r_0=$138;var $__inserted_0=0;label=66;break;}
 case 39: 
 var $_013;
 var $140=_malloc(44);
 var $141=($140|0)==0;
 if($141){label=40;break;}else{var $_lcssa_i_i2=$140;label=43;break;}
 case 40: 
 var $142=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $143=($142|0)==0;
 if($143){label=42;break;}else{label=41;break;}
 case 41: 
 var $145=$142;
 FUNCTION_TABLE[$145]();
 var $146=_malloc(44);
 var $147=($146|0)==0;
 if($147){label=40;break;}else{var $_lcssa_i_i2=$146;label=43;break;}
 case 42: 
 var $149=___cxa_allocate_exception(4);
 var $150=$149;
 HEAP32[(($150)>>2)]=15192;
 ___cxa_throw($149,26096,(782));
 throw "Reached an unreachable!";
 case 43: 
 var $_lcssa_i_i2;
 var $151=$_lcssa_i_i2;
 var $152=(($_lcssa_i_i2+16)|0);
 var $153=$152;
 var $154=(($__v)|0);
 var $155=HEAP32[(($154)>>2)];
 HEAP32[(($153)>>2)]=$155;
 var $156=(($_lcssa_i_i2+20)|0);
 var $157=(($__v+4)|0);
 var $158=$157;
 var $159=HEAP8[(($158)>>0)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)==0;
 if($161){label=44;break;}else{label=45;break;}
 case 44: 
 assert(12 % 1 === 0);HEAP32[(($156)>>2)]=HEAP32[(($158)>>2)];HEAP32[((($156)+(4))>>2)]=HEAP32[((($158)+(4))>>2)];HEAP32[((($156)+(8))>>2)]=HEAP32[((($158)+(8))>>2)];
 label=63;break;
 case 45: 
 var $164=(($__v+12)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($__v+8)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($167>>>0)>4294967279;
 if($168){label=46;break;}else{label=48;break;}
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=59;break; }
 case 47: 
 throw "Reached an unreachable!";
 case 48: 
 var $171=($167>>>0)<11;
 if($171){label=49;break;}else{label=50;break;}
 case 49: 
 var $173=$167<<1;
 var $174=(($173)&255);
 HEAP8[(($156)>>0)]=$174;
 var $175=(($_lcssa_i_i2+21)|0);
 var $__p_0_i_i_i6=$175;label=57;break;
 case 50: 
 var $176=((($167)+(16))|0);
 var $177=$176&-16;
 var $178=($177|0)==0;
 var $_size_i_i4=($178?1:$177);
 var $179=_malloc($_size_i_i4);
 var $180=($179|0)==0;
 if($180){label=51;break;}else{var $_lcssa_i5_i=$179;label=56;break;}
 case 51: 
 var $181=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $182=($181|0)==0;
 if($182){label=54;break;}else{label=52;break;}
 case 52: 
 var $184=$181;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$184]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=58;break; }
 case 53: 
 var $185=_malloc($_size_i_i4);
 var $186=($185|0)==0;
 if($186){label=51;break;}else{var $_lcssa_i5_i=$185;label=56;break;}
 case 54: 
 var $188=___cxa_allocate_exception(4);
 var $189=$188;
 HEAP32[(($189)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($188,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=59;break; }
 case 55: 
 throw "Reached an unreachable!";
 case 56: 
 var $_lcssa_i5_i;
 var $190=(($_lcssa_i_i2+28)|0);
 var $191=$190;
 HEAP32[(($191)>>2)]=$_lcssa_i5_i;
 var $192=$177|1;
 var $193=$156;
 HEAP32[(($193)>>2)]=$192;
 var $194=(($_lcssa_i_i2+24)|0);
 var $195=$194;
 HEAP32[(($195)>>2)]=$167;
 var $__p_0_i_i_i6=$_lcssa_i5_i;label=57;break;
 case 57: 
 var $__p_0_i_i_i6;
 assert($167 % 1 === 0);(_memcpy($__p_0_i_i_i6, $165, $167)|0);
 var $196=(($__p_0_i_i_i6+$167)|0);
 HEAP8[(($196)>>0)]=0;
 label=63;break;
 case 58: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=60;break;
 case 59: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=60;break;
 case 60: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $198=($_lcssa_i_i2|0)==0;
 if($198){label=62;break;}else{label=61;break;}
 case 61: 
 _free($_lcssa_i_i2);
 label=62;break;
 case 62: 
 ___resumeException($lpad_phi$0)
 case 63: 
 var $199=(($_lcssa_i_i2+32)|0);
 var $200=(($__v+16)|0);
 var $201=$200;
 assert(12 % 1 === 0);HEAP32[(($199)>>2)]=HEAP32[(($201)>>2)];HEAP32[((($199)+(4))>>2)]=HEAP32[((($201)+(4))>>2)];HEAP32[((($199)+(8))>>2)]=HEAP32[((($201)+(8))>>2)];
 var $202=HEAP32[(($__parent)>>2)];
 var $203=$_lcssa_i_i2;
 var $204=$_lcssa_i_i2;
 HEAP32[(($204)>>2)]=0;
 var $205=(($_lcssa_i_i2+4)|0);
 var $206=$205;
 HEAP32[(($206)>>2)]=0;
 var $207=(($_lcssa_i_i2+8)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=$202;
 HEAP32[(($_013)>>2)]=$203;
 var $209=(($this)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){var $217=$203;label=65;break;}else{label=64;break;}
 case 64: 
 var $215=$212;
 HEAP32[(($209)>>2)]=$215;
 var $_pre=HEAP32[(($_013)>>2)];
 var $217=$_pre;label=65;break;
 case 65: 
 var $217;
 var $218=HEAP32[(($5)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($218,$217);
 var $219=(($this+8)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=((($220)+(1))|0);
 HEAP32[(($219)>>2)]=$221;
 var $__r_0=$151;var $__inserted_0=1;label=66;break;
 case 66: 
 var $__inserted_0;
 var $__r_0;
 var $222=(($agg_result)|0);
 HEAP32[(($222)>>2)]=$__r_0;
 var $223=(($agg_result+4)|0);
 HEAP8[(($223)>>0)]=$__inserted_0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__x|0)==($__root|0);
 var $2=(($__x+12)|0);
 var $3=($1&1);
 HEAP8[(($2)>>0)]=$3;
 var $_0=$__x;label=2;break;
 case 2: 
 var $_0;
 var $4=($_0|0)==($__root|0);
 if($4){label=37;break;}else{label=3;break;}
 case 3: 
 var $6=(($_0+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+12)|0);
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=4;break;}else{label=37;break;}
 case 4: 
 var $13=(($7+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($7|0)==($16|0);
 if($17){label=5;break;}else{label=21;break;}
 case 5: 
 var $19=(($14+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $23=(($20+12)|0);
 var $24=HEAP8[(($23)>>0)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=20;break;}else{label=7;break;}
 case 7: 
 var $28=(($7)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($_0|0)==($29|0);
 if($30){var $51=$7;var $50=$14;label=14;break;}else{label=8;break;}
 case 8: 
 var $32=(($7+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 HEAP32[(($32)>>2)]=$35;
 var $36=($35|0)==0;
 if($36){var $40=$14;label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($35+8)|0);
 HEAP32[(($38)>>2)]=$7;
 var $_pre6=HEAP32[(($13)>>2)];
 var $40=$_pre6;label=10;break;
 case 10: 
 var $40;
 var $41=(($33+8)|0);
 HEAP32[(($41)>>2)]=$40;
 var $42=HEAP32[(($13)>>2)];
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($7|0)==($44|0);
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($43)>>2)]=$33;
 label=13;break;
 case 12: 
 var $48=(($42+4)|0);
 HEAP32[(($48)>>2)]=$33;
 label=13;break;
 case 13: 
 HEAP32[(($34)>>2)]=$7;
 HEAP32[(($13)>>2)]=$33;
 var $_pre=HEAP32[(($41)>>2)];
 var $51=$33;var $50=$_pre;label=14;break;
 case 14: 
 var $50;
 var $51;
 var $52=(($51+12)|0);
 HEAP8[(($52)>>0)]=1;
 var $53=(($50+12)|0);
 HEAP8[(($53)>>0)]=0;
 var $54=(($50)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+4)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($54)>>2)]=$57;
 var $58=($57|0)==0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=(($57+8)|0);
 HEAP32[(($60)>>2)]=$50;
 label=16;break;
 case 16: 
 var $62=(($50+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($55+8)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=HEAP32[(($62)>>2)];
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($50|0)==($67|0);
 if($68){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($66)>>2)]=$55;
 label=19;break;
 case 18: 
 var $71=(($65+4)|0);
 HEAP32[(($71)>>2)]=$55;
 label=19;break;
 case 19: 
 HEAP32[(($56)>>2)]=$50;
 HEAP32[(($62)>>2)]=$55;
 label=37;break;
 case 20: 
 HEAP8[(($8)>>0)]=1;
 var $73=($14|0)==($__root|0);
 var $74=(($14+12)|0);
 var $75=($73&1);
 HEAP8[(($74)>>0)]=$75;
 HEAP8[(($23)>>0)]=1;
 var $_0=$14;label=2;break;
 case 21: 
 var $77=($16|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=(($16+12)|0);
 var $80=HEAP8[(($79)>>0)];
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=36;break;}else{label=23;break;}
 case 23: 
 var $84=(($7)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($_0|0)==($85|0);
 if($86){label=24;break;}else{var $104=$7;var $103=$14;label=30;break;}
 case 24: 
 var $88=(($_0+4)|0);
 var $89=HEAP32[(($88)>>2)];
 HEAP32[(($84)>>2)]=$89;
 var $90=($89|0)==0;
 if($90){var $94=$14;label=26;break;}else{label=25;break;}
 case 25: 
 var $92=(($89+8)|0);
 HEAP32[(($92)>>2)]=$7;
 var $_pre7=HEAP32[(($13)>>2)];
 var $94=$_pre7;label=26;break;
 case 26: 
 var $94;
 HEAP32[(($6)>>2)]=$94;
 var $95=HEAP32[(($13)>>2)];
 var $96=(($95)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($7|0)==($97|0);
 if($98){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($96)>>2)]=$_0;
 label=29;break;
 case 28: 
 var $101=(($95+4)|0);
 HEAP32[(($101)>>2)]=$_0;
 label=29;break;
 case 29: 
 HEAP32[(($88)>>2)]=$7;
 HEAP32[(($13)>>2)]=$_0;
 var $_pre8=HEAP32[(($6)>>2)];
 var $104=$_0;var $103=$_pre8;label=30;break;
 case 30: 
 var $103;
 var $104;
 var $105=(($104+12)|0);
 HEAP8[(($105)>>0)]=1;
 var $106=(($103+12)|0);
 HEAP8[(($106)>>0)]=0;
 var $107=(($103+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108)|0);
 var $110=HEAP32[(($109)>>2)];
 HEAP32[(($107)>>2)]=$110;
 var $111=($110|0)==0;
 if($111){label=32;break;}else{label=31;break;}
 case 31: 
 var $113=(($110+8)|0);
 HEAP32[(($113)>>2)]=$103;
 label=32;break;
 case 32: 
 var $115=(($103+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($108+8)|0);
 HEAP32[(($117)>>2)]=$116;
 var $118=HEAP32[(($115)>>2)];
 var $119=(($118)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($103|0)==($120|0);
 if($121){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($119)>>2)]=$108;
 label=35;break;
 case 34: 
 var $124=(($118+4)|0);
 HEAP32[(($124)>>2)]=$108;
 label=35;break;
 case 35: 
 HEAP32[(($109)>>2)]=$103;
 HEAP32[(($115)>>2)]=$108;
 label=37;break;
 case 36: 
 HEAP8[(($8)>>0)]=1;
 var $126=($14|0)==($__root|0);
 var $127=(($14+12)|0);
 var $128=($126&1);
 HEAP8[(($127)>>0)]=$128;
 HEAP8[(($79)>>0)]=1;
 var $_0=$14;label=2;break;
 case 37: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg18PointerToAttributeltES0_($this,$b){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=$1;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=($3&255);
 var $11=$10>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12|0)==0;
 var $14=(($b+4)|0);
 if($13){label=5;break;}else{var $_pre_phi=$14;label=10;break;}
 case 5: 
 var $16=$14;
 var $17=HEAP8[(($16)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($b+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $26=$22;label=8;break;
 case 7: 
 var $24=($17&255);
 var $25=$24>>>1;
 var $26=$25;label=8;break;
 case 8: 
 var $26;
 var $27=($26|0)==0;
 if($27){label=9;break;}else{var $_pre_phi=$14;label=10;break;}
 case 9: 
 var $29=(($this)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($b)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30>>>0)<($32>>>0);
 var $82=$33;label=28;break;
 case 10: 
 var $_pre_phi;
 if($5){label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($this+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $40=$36;label=13;break;
 case 12: 
 var $38=($3&255);
 var $39=$38>>>1;
 var $40=$39;label=13;break;
 case 13: 
 var $40;
 var $41=$_pre_phi;
 var $42=HEAP8[(($41)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=15;break;}else{label=14;break;}
 case 14: 
 var $46=(($_pre_phi+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $51=$47;label=16;break;
 case 15: 
 var $49=($42&255);
 var $50=$49>>>1;
 var $51=$50;label=16;break;
 case 16: 
 var $51;
 if($5){label=18;break;}else{label=17;break;}
 case 17: 
 var $53=(($this+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $58=$54;label=19;break;
 case 18: 
 var $56=$1;
 var $57=(($56+1)|0);
 var $58=$57;label=19;break;
 case 19: 
 var $58;
 if($44){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=(($_pre_phi+8)|0);
 var $61=HEAP32[(($60)>>2)];
 var $65=$61;label=22;break;
 case 21: 
 var $63=$_pre_phi;
 var $64=(($63+1)|0);
 var $65=$64;label=22;break;
 case 22: 
 var $65;
 var $66=($51>>>0)<($40>>>0);
 var $_=($66?$51:$40);
 var $67=($_|0)==0;
 if($67){label=27;break;}else{var $_02_i_i=$_;var $l_03_i_i=$58;var $r_04_i_i=$65;label=23;break;}
 case 23: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $68=HEAP8[(($l_03_i_i)>>0)];
 var $69=HEAP8[(($r_04_i_i)>>0)];
 var $70=(($68<<24)>>24)==(($69<<24)>>24);
 if($70){label=24;break;}else{label=25;break;}
 case 24: 
 var $72=((($_02_i_i)-(1))|0);
 var $73=(($l_03_i_i+1)|0);
 var $74=(($r_04_i_i+1)|0);
 var $75=($72|0)==0;
 if($75){label=27;break;}else{var $_02_i_i=$72;var $l_03_i_i=$73;var $r_04_i_i=$74;label=23;break;}
 case 25: 
 var $76=(($68<<24)>>24)==(($69<<24)>>24);
 if($76){label=27;break;}else{label=26;break;}
 case 26: 
 var $78=($68&255);
 var $79=($69&255);
 var $80=((($78)-($79))|0);
 var $phitmp=($80|0)<0;
 var $82=$phitmp;label=28;break;
 case 27: 
 var $81=($40>>>0)<($51>>>0);
 var $_1=($81?1:0);
 return $_1;
 case 28: 
 var $82;
 return $82;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($agg_result,$this,$__p_0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$__p_0;
 var $2=(($__p_0)|0);
 var $3=(($__p_0+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){var $_01=$2;label=3;break;}else{var $storemerge_i=$4;label=2;break;}
 case 2: 
 var $storemerge_i;
 var $7=(($storemerge_i)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){var $15=$storemerge_i;label=4;break;}else{var $storemerge_i=$8;label=2;break;}
 case 3: 
 var $_01;
 var $10=(($_01+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($_01|0)==($13|0);
 if($14){var $15=$11;label=4;break;}else{var $_01=$11;label=3;break;}
 case 4: 
 var $15;
 var $16=$15;
 HEAP32[(($1)>>2)]=$16;
 var $17=(($this)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==($__p_0|0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($17)>>2)]=$16;
 label=6;break;
 case 6: 
 var $22=(($this+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($23)-(1))|0);
 HEAP32[(($22)>>2)]=$24;
 var $25=(($this+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($__p_0)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=(($2)|0);
 var $44=$2;var $43=$30;label=12;break;
 case 8: 
 var $32=(($__p_0+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=11;break;}else{var $storemerge_i_i=$33;label=9;break;}
 case 9: 
 var $storemerge_i_i;
 var $36=(($storemerge_i_i)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=10;break;}else{var $storemerge_i_i=$37;label=9;break;}
 case 10: 
 var $39=(($storemerge_i_i)|0);
 var $44=$storemerge_i_i;var $43=$39;label=12;break;
 case 11: 
 var $phitmp=($28|0)==0;
 var $41=(($2)|0);
 var $_in_i=$41;var $48=$2;var $47=$41;label=13;break;
 case 12: 
 var $43;
 var $44;
 var $45=(($44+4)|0);
 var $_in_i=$45;var $48=$44;var $47=$43;label=13;break;
 case 13: 
 var $47;
 var $48;
 var $_in_i;
 var $49=HEAP32[(($_in_i)>>2)];
 var $50=($49|0)==0;
 var $_pre12=(($48+8)|0);
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 var $52=HEAP32[(($_pre12)>>2)];
 var $53=(($49+8)|0);
 HEAP32[(($53)>>2)]=$52;
 label=15;break;
 case 15: 
 var $54=HEAP32[(($_pre12)>>2)];
 var $55=(($54)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($48|0)==($56|0);
 if($57){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($55)>>2)]=$49;
 var $59=($48|0)==($26|0);
 if($59){var $_02=$49;var $__w_i_0=0;label=19;break;}else{label=17;break;}
 case 17: 
 var $61=HEAP32[(($_pre12)>>2)];
 var $62=(($61+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $_02=$26;var $__w_i_0=$63;label=19;break;
 case 18: 
 var $65=(($54+4)|0);
 HEAP32[(($65)>>2)]=$49;
 var $66=HEAP32[(($_pre12)>>2)];
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $_02=$26;var $__w_i_0=$68;label=19;break;
 case 19: 
 var $__w_i_0;
 var $_02;
 var $70=(($48+12)|0);
 var $71=HEAP8[(($70)>>0)];
 var $72=$71&1;
 var $73=($48|0)==($2|0);
 if($73){var $_1=$_02;label=26;break;}else{label=20;break;}
 case 20: 
 var $75=(($__p_0+8)|0);
 var $76=HEAP32[(($75)>>2)];
 HEAP32[(($_pre12)>>2)]=$76;
 var $77=HEAP32[(($75)>>2)];
 var $78=(($77)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($2|0)==($79|0);
 if($80){label=21;break;}else{label=22;break;}
 case 21: 
 var $82=(($76)|0);
 HEAP32[(($82)>>2)]=$48;
 label=23;break;
 case 22: 
 var $84=(($76+4)|0);
 HEAP32[(($84)>>2)]=$48;
 label=23;break;
 case 23: 
 var $86=(($__p_0)|0);
 var $87=HEAP32[(($86)>>2)];
 HEAP32[(($47)>>2)]=$87;
 var $88=(($87+8)|0);
 HEAP32[(($88)>>2)]=$48;
 var $89=(($__p_0+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($48+4)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=($90|0)==0;
 if($92){label=25;break;}else{label=24;break;}
 case 24: 
 var $94=(($90+8)|0);
 HEAP32[(($94)>>2)]=$48;
 label=25;break;
 case 25: 
 var $96=(($__p_0+12)|0);
 var $97=HEAP8[(($96)>>0)];
 var $98=$97&1;
 HEAP8[(($70)>>0)]=$98;
 var $99=($_02|0)==($2|0);
 var $__02=($99?$48:$_02);
 var $_1=$__02;label=26;break;
 case 26: 
 var $_1;
 var $101=(($72<<24)>>24)==0;
 var $102=($_1|0)==0;
 var $or_cond=$101|$102;
 if($or_cond){label=88;break;}else{label=27;break;}
 case 27: 
 if($50){var $_2=$_1;var $__w_i_1=$__w_i_0;label=29;break;}else{label=28;break;}
 case 28: 
 var $105=(($49+12)|0);
 HEAP8[(($105)>>0)]=1;
 label=88;break;
 case 29: 
 var $__w_i_1;
 var $_2;
 var $106=(($__w_i_1+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($__w_i_1|0)==($109|0);
 var $111=(($__w_i_1+12)|0);
 var $112=HEAP8[(($111)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($110){label=59;break;}else{label=30;break;}
 case 30: 
 if($114){label=31;break;}else{var $_4=$_2;var $__w_i_2=$__w_i_1;label=37;break;}
 case 31: 
 HEAP8[(($111)>>0)]=1;
 var $117=(($107+12)|0);
 HEAP8[(($117)>>0)]=0;
 var $118=HEAP32[(($106)>>2)];
 var $119=(($118+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120)|0);
 var $122=HEAP32[(($121)>>2)];
 HEAP32[(($119)>>2)]=$122;
 var $123=($122|0)==0;
 if($123){label=33;break;}else{label=32;break;}
 case 32: 
 var $125=(($122+8)|0);
 HEAP32[(($125)>>2)]=$118;
 label=33;break;
 case 33: 
 var $127=(($118+8)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($120+8)|0);
 HEAP32[(($129)>>2)]=$128;
 var $130=HEAP32[(($127)>>2)];
 var $131=(($130)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($118|0)==($132|0);
 if($133){label=34;break;}else{label=35;break;}
 case 34: 
 HEAP32[(($131)>>2)]=$120;
 label=36;break;
 case 35: 
 var $136=(($130+4)|0);
 HEAP32[(($136)>>2)]=$120;
 label=36;break;
 case 36: 
 HEAP32[(($121)>>2)]=$118;
 HEAP32[(($127)>>2)]=$120;
 var $137=(($__w_i_1)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($_2|0)==($138|0);
 var $__w_i_1__2=($139?$__w_i_1:$_2);
 var $140=(($138+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $_4=$__w_i_1__2;var $__w_i_2=$141;label=37;break;
 case 37: 
 var $__w_i_2;
 var $_4;
 var $143=(($__w_i_2)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){var $152=0;label=39;break;}else{label=38;break;}
 case 38: 
 var $147=(($144+12)|0);
 var $148=HEAP8[(($147)>>0)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=45;break;}else{var $152=$144;label=39;break;}
 case 39: 
 var $152;
 var $153=(($__w_i_2+4)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==0;
 if($155){label=41;break;}else{label=40;break;}
 case 40: 
 var $157=(($154+12)|0);
 var $158=HEAP8[(($157)>>0)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){var $180=$152;var $179=$154;label=46;break;}else{label=41;break;}
 case 41: 
 var $162=(($__w_i_2+12)|0);
 HEAP8[(($162)>>0)]=0;
 var $163=(($__w_i_2+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($_4|0);
 var $_pre13=(($164+12)|0);
 if($165){var $_pre_phi14=$_pre13;label=43;break;}else{label=42;break;}
 case 42: 
 var $167=HEAP8[(($_pre13)>>0)];
 var $168=$167&1;
 var $169=(($168<<24)>>24)==0;
 if($169){var $_pre_phi14=$_pre13;label=43;break;}else{label=44;break;}
 case 43: 
 var $_pre_phi14;
 HEAP8[(($_pre_phi14)>>0)]=1;
 label=88;break;
 case 44: 
 var $171=(($164+8)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($164|0)==($174|0);
 var $176=(($172+4)|0);
 var $_=($175?$176:$173);
 var $storemerge_in=$_;var $_7=$_4;label=87;break;
 case 45: 
 var $_phi_trans_insert5=(($__w_i_2+4)|0);
 var $_pre6=HEAP32[(($_phi_trans_insert5)>>2)];
 var $178=($_pre6|0)==0;
 if($178){var $186=$144;label=47;break;}else{var $180=$144;var $179=$_pre6;label=46;break;}
 case 46: 
 var $179;
 var $180;
 var $181=(($179+12)|0);
 var $182=HEAP8[(($181)>>0)];
 var $183=$182&1;
 var $184=(($183<<24)>>24)==0;
 if($184){var $__w_i_3=$__w_i_2;label=53;break;}else{var $186=$180;label=47;break;}
 case 47: 
 var $186;
 var $187=(($186+12)|0);
 HEAP8[(($187)>>0)]=1;
 var $188=(($__w_i_2+12)|0);
 HEAP8[(($188)>>0)]=0;
 var $189=HEAP32[(($143)>>2)];
 var $190=(($189+4)|0);
 var $191=HEAP32[(($190)>>2)];
 HEAP32[(($143)>>2)]=$191;
 var $192=($191|0)==0;
 if($192){label=49;break;}else{label=48;break;}
 case 48: 
 var $194=(($191+8)|0);
 HEAP32[(($194)>>2)]=$__w_i_2;
 label=49;break;
 case 49: 
 var $196=(($__w_i_2+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($189+8)|0);
 HEAP32[(($198)>>2)]=$197;
 var $199=HEAP32[(($196)>>2)];
 var $200=(($199)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($__w_i_2|0)==($201|0);
 if($202){label=50;break;}else{label=51;break;}
 case 50: 
 HEAP32[(($200)>>2)]=$189;
 label=52;break;
 case 51: 
 var $205=(($199+4)|0);
 HEAP32[(($205)>>2)]=$189;
 label=52;break;
 case 52: 
 HEAP32[(($190)>>2)]=$__w_i_2;
 HEAP32[(($196)>>2)]=$189;
 var $__w_i_3=$189;label=53;break;
 case 53: 
 var $__w_i_3;
 var $207=(($__w_i_3+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+12)|0);
 var $210=HEAP8[(($209)>>0)];
 var $211=$210&1;
 var $212=(($__w_i_3+12)|0);
 HEAP8[(($212)>>0)]=$211;
 HEAP8[(($209)>>0)]=1;
 var $213=(($__w_i_3+4)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+12)|0);
 HEAP8[(($215)>>0)]=1;
 var $216=HEAP32[(($207)>>2)];
 var $217=(($216+4)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218)|0);
 var $220=HEAP32[(($219)>>2)];
 HEAP32[(($217)>>2)]=$220;
 var $221=($220|0)==0;
 if($221){label=55;break;}else{label=54;break;}
 case 54: 
 var $223=(($220+8)|0);
 HEAP32[(($223)>>2)]=$216;
 label=55;break;
 case 55: 
 var $225=(($216+8)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($218+8)|0);
 HEAP32[(($227)>>2)]=$226;
 var $228=HEAP32[(($225)>>2)];
 var $229=(($228)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($216|0)==($230|0);
 if($231){label=56;break;}else{label=57;break;}
 case 56: 
 HEAP32[(($229)>>2)]=$218;
 label=58;break;
 case 57: 
 var $234=(($228+4)|0);
 HEAP32[(($234)>>2)]=$218;
 label=58;break;
 case 58: 
 HEAP32[(($219)>>2)]=$216;
 HEAP32[(($225)>>2)]=$218;
 label=88;break;
 case 59: 
 if($114){label=60;break;}else{var $_6=$_2;var $__w_i_4=$__w_i_1;label=66;break;}
 case 60: 
 HEAP8[(($111)>>0)]=1;
 var $237=(($107+12)|0);
 HEAP8[(($237)>>0)]=0;
 var $238=HEAP32[(($106)>>2)];
 var $239=(($238)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+4)|0);
 var $242=HEAP32[(($241)>>2)];
 HEAP32[(($239)>>2)]=$242;
 var $243=($242|0)==0;
 if($243){label=62;break;}else{label=61;break;}
 case 61: 
 var $245=(($242+8)|0);
 HEAP32[(($245)>>2)]=$238;
 label=62;break;
 case 62: 
 var $247=(($238+8)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($240+8)|0);
 HEAP32[(($249)>>2)]=$248;
 var $250=HEAP32[(($247)>>2)];
 var $251=(($250)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($238|0)==($252|0);
 if($253){label=63;break;}else{label=64;break;}
 case 63: 
 HEAP32[(($251)>>2)]=$240;
 label=65;break;
 case 64: 
 var $256=(($250+4)|0);
 HEAP32[(($256)>>2)]=$240;
 label=65;break;
 case 65: 
 HEAP32[(($241)>>2)]=$238;
 HEAP32[(($247)>>2)]=$240;
 var $257=(($__w_i_1+4)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($_2|0)==($258|0);
 var $__w_i_1__218=($259?$__w_i_1:$_2);
 var $260=(($258)|0);
 var $261=HEAP32[(($260)>>2)];
 var $_6=$__w_i_1__218;var $__w_i_4=$261;label=66;break;
 case 66: 
 var $__w_i_4;
 var $_6;
 var $263=(($__w_i_4)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=($264|0)==0;
 if($265){var $272=0;label=68;break;}else{label=67;break;}
 case 67: 
 var $267=(($264+12)|0);
 var $268=HEAP8[(($267)>>0)];
 var $269=$268&1;
 var $270=(($269<<24)>>24)==0;
 if($270){var $301=$264;label=74;break;}else{var $272=$264;label=68;break;}
 case 68: 
 var $272;
 var $273=(($__w_i_4+4)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=70;break;}else{label=69;break;}
 case 69: 
 var $277=(($274+12)|0);
 var $278=HEAP8[(($277)>>0)];
 var $279=$278&1;
 var $280=(($279<<24)>>24)==0;
 if($280){var $299=$272;label=73;break;}else{label=70;break;}
 case 70: 
 var $282=(($__w_i_4+12)|0);
 HEAP8[(($282)>>0)]=0;
 var $283=(($__w_i_4+8)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($284+12)|0);
 var $286=HEAP8[(($285)>>0)];
 var $287=$286&1;
 var $288=(($287<<24)>>24)==0;
 var $289=($284|0)==($_6|0);
 var $or_cond19=$288|$289;
 if($or_cond19){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP8[(($285)>>0)]=1;
 label=88;break;
 case 72: 
 var $292=(($284+8)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($293)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=($284|0)==($295|0);
 var $297=(($293+4)|0);
 var $_20=($296?$297:$294);
 var $storemerge_in=$_20;var $_7=$_6;label=87;break;
 case 73: 
 var $299;
 var $300=($299|0)==0;
 if($300){label=75;break;}else{var $301=$299;label=74;break;}
 case 74: 
 var $301;
 var $302=(($301+12)|0);
 var $303=HEAP8[(($302)>>0)];
 var $304=$303&1;
 var $305=(($304<<24)>>24)==0;
 if($305){var $__w_i_5=$__w_i_4;label=81;break;}else{label=75;break;}
 case 75: 
 var $307=(($__w_i_4+4)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($308+12)|0);
 HEAP8[(($309)>>0)]=1;
 var $310=(($__w_i_4+12)|0);
 HEAP8[(($310)>>0)]=0;
 var $311=HEAP32[(($307)>>2)];
 var $312=(($311)|0);
 var $313=HEAP32[(($312)>>2)];
 HEAP32[(($307)>>2)]=$313;
 var $314=($313|0)==0;
 if($314){label=77;break;}else{label=76;break;}
 case 76: 
 var $316=(($313+8)|0);
 HEAP32[(($316)>>2)]=$__w_i_4;
 label=77;break;
 case 77: 
 var $318=(($__w_i_4+8)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($311+8)|0);
 HEAP32[(($320)>>2)]=$319;
 var $321=HEAP32[(($318)>>2)];
 var $322=(($321)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($__w_i_4|0)==($323|0);
 if($324){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($322)>>2)]=$311;
 label=80;break;
 case 79: 
 var $327=(($321+4)|0);
 HEAP32[(($327)>>2)]=$311;
 label=80;break;
 case 80: 
 HEAP32[(($312)>>2)]=$__w_i_4;
 HEAP32[(($318)>>2)]=$311;
 var $__w_i_5=$311;label=81;break;
 case 81: 
 var $__w_i_5;
 var $329=(($__w_i_5+8)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330+12)|0);
 var $332=HEAP8[(($331)>>0)];
 var $333=$332&1;
 var $334=(($__w_i_5+12)|0);
 HEAP8[(($334)>>0)]=$333;
 HEAP8[(($331)>>0)]=1;
 var $335=(($__w_i_5)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+12)|0);
 HEAP8[(($337)>>0)]=1;
 var $338=HEAP32[(($329)>>2)];
 var $339=(($338)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(($340+4)|0);
 var $342=HEAP32[(($341)>>2)];
 HEAP32[(($339)>>2)]=$342;
 var $343=($342|0)==0;
 if($343){label=83;break;}else{label=82;break;}
 case 82: 
 var $345=(($342+8)|0);
 HEAP32[(($345)>>2)]=$338;
 label=83;break;
 case 83: 
 var $347=(($338+8)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($340+8)|0);
 HEAP32[(($349)>>2)]=$348;
 var $350=HEAP32[(($347)>>2)];
 var $351=(($350)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=($338|0)==($352|0);
 if($353){label=84;break;}else{label=85;break;}
 case 84: 
 HEAP32[(($351)>>2)]=$340;
 label=86;break;
 case 85: 
 var $356=(($350+4)|0);
 HEAP32[(($356)>>2)]=$340;
 label=86;break;
 case 86: 
 HEAP32[(($341)>>2)]=$338;
 HEAP32[(($347)>>2)]=$340;
 label=88;break;
 case 87: 
 var $_7;
 var $storemerge_in;
 var $storemerge=HEAP32[(($storemerge_in)>>2)];
 var $_2=$_7;var $__w_i_1=$storemerge;label=29;break;
 case 88: 
 var $358=(($__p_0+20)|0);
 var $359=$358;
 var $360=HEAP8[(($359)>>0)];
 var $361=$360&1;
 var $362=(($361<<24)>>24)==0;
 if($362){label=90;break;}else{label=89;break;}
 case 89: 
 var $364=(($__p_0+28)|0);
 var $365=HEAP32[(($364)>>2)];
 _free($365);
 label=90;break;
 case 90: 
 var $366=$__p_0;
 _free($366);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(32);
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($this+4)|0);
 var $7=$6;
 var $8=$1;
 var $$etemp$0$0=28;
 var $$etemp$0$1=0;

 var $9=(($1)|0);
 var $10=(($__v)|0);
 var $11=(($1+4)|0);
 var $12=(($__v+4)|0);
 var $13=$12;
 var $14=$11;
 var $15=(($1+16)|0);
 var $16=(($__v+16)|0);
 var $17=$15;
 var $18=$16;
 var $19=(($1+12)|0);
 var $20=(($__v+12)|0);
 var $21=(($__v+8)|0);
 var $22=$11;
 var $23=(($22+1)|0);
 var $24=(($11)|0);
 var $25=(($1+8)|0);
 var $_0=$5;var $_02=$7;label=2;break;
 case 2: 
 var $_02;
 var $_0;
 var $27=($_0|0)==0;
 if($27){label=18;break;}else{label=3;break;}
 case 3: 
 var $29=(($_0+16)|0);
 var $30=HEAP32[(($10)>>2)];
 HEAP32[(($9)>>2)]=$30;
 var $31=HEAP8[(($13)>>0)];
 var $32=$31&1;
 var $33=(($32<<24)>>24)==0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 label=15;break;
 case 5: 
 var $36=HEAP32[(($20)>>2)];
 var $37=HEAP32[(($21)>>2)];
 var $38=($37>>>0)>4294967279;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 7: 
 var $41=($37>>>0)<11;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 var $43=$37<<1;
 var $44=(($43)&255);
 HEAP8[(($14)>>0)]=$44;
 var $__p_0_i_i_i=$23;label=14;break;
 case 9: 
 var $45=((($37)+(16))|0);
 var $46=$45&-16;
 var $47=($46|0)==0;
 var $_size_i_i=($47?1:$46);
 var $48=_malloc($_size_i_i);
 var $49=($48|0)==0;
 if($49){label=10;break;}else{var $_lcssa_i_i=$48;label=13;break;}
 case 10: 
 var $50=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $51=($50|0)==0;
 if($51){label=12;break;}else{label=11;break;}
 case 11: 
 var $53=$50;
 FUNCTION_TABLE[$53]();
 var $54=_malloc($_size_i_i);
 var $55=($54|0)==0;
 if($55){label=10;break;}else{var $_lcssa_i_i=$54;label=13;break;}
 case 12: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=15192;
 ___cxa_throw($57,26096,(782));
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i;
 HEAP32[(($19)>>2)]=$_lcssa_i_i;
 var $59=$46|1;
 HEAP32[(($24)>>2)]=$59;
 HEAP32[(($25)>>2)]=$37;
 var $__p_0_i_i_i=$_lcssa_i_i;label=14;break;
 case 14: 
 var $__p_0_i_i_i;
 assert($37 % 1 === 0);(_memcpy($__p_0_i_i_i, $36, $37)|0);
 var $60=(($__p_0_i_i_i+$37)|0);
 HEAP8[(($60)>>0)]=0;
 label=15;break;
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 var $61=__ZNK3vcg18PointerToAttributeltES0_($29,$1);
 var $62=HEAP8[(($14)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=17;break;}else{label=16;break;}
 case 16: 
 var $66=HEAP32[(($19)>>2)];
 _free($66);
 label=17;break;
 case 17: 
 var $67=(($_0+4)|0);
 var $68=(($_0)|0);
 var $_1=($61?$_02:$_0);
 var $storemerge_in_in_i=($61?$67:$68);
 var $storemerge_in_i=HEAP32[(($storemerge_in_in_i)>>2)];
 var $storemerge_i=$storemerge_in_i;
 var $_0=$storemerge_i;var $_02=$_1;label=2;break;
 case 18: 
 var $$etemp$1$0=28;
 var $$etemp$1$1=0;

 var $69=($_02|0)==($7|0);
 if($69){label=35;break;}else{label=19;break;}
 case 19: 
 var $71=(($2)|0);
 var $72=(($_02+16)|0);
 var $73=HEAP32[(($72)>>2)];
 HEAP32[(($71)>>2)]=$73;
 var $74=(($2+4)|0);
 var $75=(($_02+20)|0);
 var $76=$75;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=20;break;}else{label=21;break;}
 case 20: 
 var $81=$74;
 assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
 var $_pre_phi=$81;label=31;break;
 case 21: 
 var $83=(($_02+28)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($_02+24)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86>>>0)>4294967279;
 if($87){label=22;break;}else{label=23;break;}
 case 22: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 23: 
 var $90=($86>>>0)<11;
 if($90){label=24;break;}else{label=25;break;}
 case 24: 
 var $92=$86<<1;
 var $93=(($92)&255);
 var $94=$74;
 HEAP8[(($94)>>0)]=$93;
 var $95=$74;
 var $96=(($95+1)|0);
 var $__p_0_i_i=$96;var $_pre_pre_phi=$94;label=30;break;
 case 25: 
 var $97=((($86)+(16))|0);
 var $98=$97&-16;
 var $99=($98|0)==0;
 var $_size_i=($99?1:$98);
 var $100=_malloc($_size_i);
 var $101=($100|0)==0;
 if($101){label=26;break;}else{var $_lcssa_i=$100;label=29;break;}
 case 26: 
 var $102=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $103=($102|0)==0;
 if($103){label=28;break;}else{label=27;break;}
 case 27: 
 var $105=$102;
 FUNCTION_TABLE[$105]();
 var $106=_malloc($_size_i);
 var $107=($106|0)==0;
 if($107){label=26;break;}else{var $_lcssa_i=$106;label=29;break;}
 case 28: 
 var $109=___cxa_allocate_exception(4);
 var $110=$109;
 HEAP32[(($110)>>2)]=15192;
 ___cxa_throw($109,26096,(782));
 throw "Reached an unreachable!";
 case 29: 
 var $_lcssa_i;
 var $111=(($2+12)|0);
 HEAP32[(($111)>>2)]=$_lcssa_i;
 var $112=$98|1;
 var $113=(($74)|0);
 HEAP32[(($113)>>2)]=$112;
 var $114=(($2+8)|0);
 HEAP32[(($114)>>2)]=$86;
 var $_pre_pre=$74;
 var $__p_0_i_i=$_lcssa_i;var $_pre_pre_phi=$_pre_pre;label=30;break;
 case 30: 
 var $_pre_pre_phi;
 var $__p_0_i_i;
 assert($86 % 1 === 0);(_memcpy($__p_0_i_i, $84, $86)|0);
 var $115=(($__p_0_i_i+$86)|0);
 HEAP8[(($115)>>0)]=0;
 var $_pre_phi=$_pre_pre_phi;label=31;break;
 case 31: 
 var $_pre_phi;
 var $116=(($2+16)|0);
 var $117=(($_02+32)|0);
 var $118=$116;
 var $119=$117;
 assert(12 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($119)+(4))>>2)];HEAP32[((($118)+(8))>>2)]=HEAP32[((($119)+(8))>>2)];
 var $120=__ZNK3vcg18PointerToAttributeltES0_($__v,$2);
 var $121=HEAP8[(($_pre_phi)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=33;break;}else{label=32;break;}
 case 32: 
 var $125=(($2+12)|0);
 var $126=HEAP32[(($125)>>2)];
 _free($126);
 label=33;break;
 case 33: 
 if($120){label=35;break;}else{label=34;break;}
 case 34: 
 var $128=(($agg_result)|0);
 HEAP32[(($128)>>2)]=$_02;
 label=36;break;
 case 35: 
 var $130=(($agg_result)|0);
 HEAP32[(($130)>>2)]=$7;
 label=36;break;
 case 36: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIlED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18056;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIlED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18056;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIlE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIlE7ReorderERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeIlE6SizeOfEv($this){
 var label=0;


 return 4;
}

//Func
function __ZN3vcg9AttributeIlE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 return $3;
}

//Func
function __ZN3vcg9AttributeIlE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIdED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18152;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIdED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18152;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIdE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIdE7ReorderERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeIdE6SizeOfEv($this){
 var label=0;


 return 8;
}

//Func
function __ZN3vcg9AttributeIdE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 return $3;
}

//Func
function __ZN3vcg9AttributeIdE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIiED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18104;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIiED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18104;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIiE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIiE7ReorderERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeIiE6SizeOfEv($this){
 var label=0;


 return 4;
}

//Func
function __ZN3vcg9AttributeIiE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 return $3;
}

//Func
function __ZN3vcg9AttributeIiE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIsED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18008;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIsED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18008;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 _free($6);
 label=3;break;
 case 3: 
 var $7=$this;
 _free($7);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIsE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIsE7ReorderERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeIsE6SizeOfEv($this){
 var label=0;


 return 2;
}

//Func
function __ZN3vcg9AttributeIsE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 return $3;
}

//Func
function __ZN3vcg9AttributeIsE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18200;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18200;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 _free($3);
 label=3;break;
 case 3: 
 var $6=$this;
 _free($6);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg9AttributeIcE6ResizeEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,151,10288);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg9AttributeIcE7ReorderERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$0){
 var label=0;


 ___assert_fail(4208,5080,152,10280);
 throw "Reached an unreachable!";
}

//Func
function __ZNK3vcg9AttributeIcE6SizeOfEv($this){
 var label=0;


 return 1;
}

//Func
function __ZN3vcg9AttributeIcE9DataBeginEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}

//Func
function __ZN3vcg9AttributeIcE2AtEj($this,$0){
 var label=0;


 ___assert_fail(4208,5080,153,10296);
 throw "Reached an unreachable!";
}

//Func
function __ZN3vcg3tri2io3DerI6MyMeshsNS1_2C2IS3_ldiEEE9AddAttribILi0EEEvRS3_PKcjPv($m,$name,$s,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $h_i_i_i_i=(sp)+(24);
 var $4=(sp)+(32);
 var $h1_i_i_i_i=(sp)+(48);
 var $5=(sp)+(56);
 var $pa_i_i_i_i=(sp)+(72);
 var $6=(sp)+(104);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $h_i4_i_i=(sp)+(144);
 var $10=(sp)+(152);
 var $h1_i_i_i=(sp)+(168);
 var $11=(sp)+(176);
 var $pa_i_i_i=(sp)+(192);
 var $12=(sp)+(224);
 var $__v_i_i_i_i_i=(sp)+(240);
 var $13=(sp)+(264);
 var $14=(sp)+(272);
 var $h_i_i_i=(sp)+(280);
 var $15=(sp)+(312);
 var $__v_i_i_i_i=(sp)+(328);
 var $16=(sp)+(352);
 var $17=(sp)+(360);
 var $h_i_i=(sp)+(368);
 var $18=(sp)+(400);
 var $__v_i_i_i=(sp)+(416);
 var $19=(sp)+(440);
 var $20=(sp)+(448);
 var $h_i=(sp)+(456);
 var $21=(sp)+(488);
 var $22=($s|0)==2;
 if($22){label=2;break;}else{label=71;break;}
 case 2: 
 var $24=_strlen($name);
 var $25=($24>>>0)>4294967279;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $28=($24>>>0)<11;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$24<<1;
 var $31=(($30)&255);
 var $32=$21;
 HEAP8[(($32)>>0)]=$31;
 var $33=$21;
 var $34=(($33+1)|0);
 var $__p_0_i=$34;label=11;break;
 case 6: 
 var $35=((($24)+(16))|0);
 var $36=$35&-16;
 var $37=($36|0)==0;
 var $_size_i=($37?1:$36);
 var $38=_malloc($_size_i);
 var $39=($38|0)==0;
 if($39){label=7;break;}else{var $_lcssa_i=$38;label=10;break;}
 case 7: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=9;break;}else{label=8;break;}
 case 8: 
 var $43=$40;
 FUNCTION_TABLE[$43]();
 var $44=_malloc($_size_i);
 var $45=($44|0)==0;
 if($45){label=7;break;}else{var $_lcssa_i=$44;label=10;break;}
 case 9: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 ___cxa_throw($47,26096,(782));
 throw "Reached an unreachable!";
 case 10: 
 var $_lcssa_i;
 var $49=(($21+8)|0);
 HEAP32[(($49)>>2)]=$_lcssa_i;
 var $50=$36|1;
 var $51=(($21)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($21+4)|0);
 HEAP32[(($52)>>2)]=$24;
 var $__p_0_i=$_lcssa_i;label=11;break;
 case 11: 
 var $__p_0_i;
 assert($24 % 1 === 0);(_memcpy($__p_0_i, $name, $24)|0);
 var $53=(($__p_0_i+$24)|0);
 HEAP8[(($53)>>0)]=0;
 var $54=$19;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $55=$20;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $56=$h_i;
 var $$etemp$2$0=28;
 var $$etemp$2$1=0;

 var $57=(($h_i+4)|0);
 var $58=$57;
 var $storemerge_i_i=0;label=12;break;
 case 12: 
 var $storemerge_i_i;
 var $60=($storemerge_i_i>>>0)<3;
 if($60){label=13;break;}else{label=14;break;}
 case 13: 
 var $62=(($58+($storemerge_i_i<<2))|0);
 HEAP32[(($62)>>2)]=0;
 var $63=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$63;label=12;break;
 case 14: 
 var $64=(($h_i+4)|0);
 var $65=$21;
 var $66=HEAP8[(($65)>>0)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=16;break;}else{label=15;break;}
 case 15: 
 var $70=(($21+8)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($21+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $80=$73;var $79=$71;label=17;break;
 case 16: 
 var $75=$21;
 var $76=(($75+1)|0);
 var $77=($66&255);
 var $78=$77>>>1;
 var $80=$78;var $79=$76;label=17;break;
 case 17: 
 var $79;
 var $80;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($64,$79,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=27;break; }
 case 18: 
 if($68){label=20;break;}else{label=19;break;}
 case 19: 
 var $82=(($21+4)|0);
 var $83=HEAP32[(($82)>>2)];
 var $87=$83;label=21;break;
 case 20: 
 var $85=($66&255);
 var $86=$85>>>1;
 var $87=$86;label=21;break;
 case 21: 
 var $87;
 var $88=($87|0)==0;
 if($88){label=29;break;}else{label=22;break;}
 case 22: 
 var $90=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($20,$90,$h_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=27;break; }
 case 23: 
 var $91=(($20)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($m+120)|0);
 var $94=$93;
 var $95=($92|0)==($94|0);
 if($95){label=29;break;}else{label=24;break;}
 case 24: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=27;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $lpad_loopexit28$0 = ___cxa_find_matching_catch(); var $lpad_loopexit28$1 = tempRet0;
 var $lpad_phi30$1=$lpad_loopexit28$1;var $lpad_phi30$0=$lpad_loopexit28$0;label=28;break;
 case 27: 
 var $lpad_nonloopexit29$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit29$1 = tempRet0;
 var $lpad_phi30$1=$lpad_nonloopexit29$1;var $lpad_phi30$0=$lpad_nonloopexit29$0;label=28;break;
 case 28: 
 var $lpad_phi30$0;
 var $lpad_phi30$1;
 var $99=$lpad_phi30$0;
 var $100=$lpad_phi30$1;
 var $_023=$99;var $_024=$100;label=62;break;
 case 29: 
 var $102=(($h_i+16)|0);
 HEAP32[(($102)>>2)]=2;
 var $103=(($h_i+20)|0);
 HEAP32[(($103)>>2)]=0;
 var $104=_malloc(24);
 var $105=($104|0)==0;
 if($105){label=30;break;}else{var $_lcssa_i_i=$104;label=35;break;}
 case 30: 
 var $106=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $107=($106|0)==0;
 if($107){label=33;break;}else{label=31;break;}
 case 31: 
 var $109=$106;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=26;break; }
 case 32: 
 var $110=_malloc(24);
 var $111=($110|0)==0;
 if($111){label=30;break;}else{var $_lcssa_i_i=$110;label=35;break;}
 case 33: 
 var $113=___cxa_allocate_exception(4);
 var $114=$113;
 HEAP32[(($114)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($113,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=27;break; }
 case 34: 
 throw "Reached an unreachable!";
 case 35: 
 var $_lcssa_i_i;
 var $115=(($m)|0);
 var $116=$_lcssa_i_i;
 HEAP32[(($116)>>2)]=18728;
 var $117=(($_lcssa_i_i+4)|0);
 var $118=$117;
 HEAP32[(($118)>>2)]=$115;
 var $119=(($_lcssa_i_i+8)|0);
 var $120=$119;
 var $121=(($_lcssa_i_i+12)|0);
 var $122=$121;
 var $123=$119;
 var $124=(($m+8)|0);
 HEAP32[(($119)>>2)]=0; HEAP32[((($119)+(4))>>2)]=0; HEAP32[((($119)+(8))>>2)]=0; HEAP32[((($119)+(12))>>2)]=0;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($m)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$125;
 var $129=$127;
 var $130=((($128)-($129))|0);
 var $131=(((($130|0))/(28))&-1);
 var $132=$__v_i_i_i;
 var $$etemp$3$0=20;
 var $$etemp$3$1=0;

 var $133=($125|0)==($127|0);
 if($133){var $171=$115;var $170=$127;label=50;break;}else{label=36;break;}
 case 36: 
 var $135=(($_lcssa_i_i+16)|0);
 var $136=$135;
 var $137=(($__v_i_i_i+12)|0);
 HEAP32[(($137)>>2)]=0;
 var $138=(($__v_i_i_i+16)|0);
 HEAP32[(($138)>>2)]=$136;
 var $139=($125|0)==($127|0);
 if($139){var $155=0;label=44;break;}else{label=37;break;}
 case 37: 
 var $141=$131<<1;
 var $142=($141|0)==0;
 var $_size_i_i_i_i=($142?1:$141);
 var $143=_malloc($_size_i_i_i_i);
 var $144=($143|0)==0;
 if($144){label=38;break;}else{var $_lcssa_i_i_i_i=$143;label=43;break;}
 case 38: 
 var $145=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $146=($145|0)==0;
 if($146){label=41;break;}else{label=39;break;}
 case 39: 
 var $148=$145;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$148]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=51;break; }
 case 40: 
 var $149=_malloc($_size_i_i_i_i);
 var $150=($149|0)==0;
 if($150){label=38;break;}else{var $_lcssa_i_i_i_i=$149;label=43;break;}
 case 41: 
 var $152=___cxa_allocate_exception(4);
 var $153=$152;
 HEAP32[(($153)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($152,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=52;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $_lcssa_i_i_i_i;
 var $154=$_lcssa_i_i_i_i;
 var $155=$154;label=44;break;
 case 44: 
 var $155;
 var $156=(($__v_i_i_i)|0);
 HEAP32[(($156)>>2)]=$155;
 var $157=(($__v_i_i_i+8)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=(($__v_i_i_i+4)|0);
 HEAP32[(($158)>>2)]=$155;
 var $159=(($155+($131<<1))|0);
 HEAP32[(($137)>>2)]=$159;
 __ZNSt3__16vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($123,$__v_i_i_i);
 var $160=HEAP32[(($158)>>2)];
 var $_pre=HEAP32[(($157)>>2)];
 var $162=$_pre;label=45;break;
 case 45: 
 var $162;
 var $163=($160|0)==($162|0);
 if($163){label=47;break;}else{label=46;break;}
 case 46: 
 var $165=((($162)-(2))|0);
 HEAP32[(($157)>>2)]=$165;
 var $162=$165;label=45;break;
 case 47: 
 var $166=HEAP32[(($156)>>2)];
 var $167=($166|0)==0;
 if($167){label=49;break;}else{label=48;break;}
 case 48: 
 var $169=$166;
 _free($169);
 label=49;break;
 case 49: 
 var $_pre61=HEAP32[(($118)>>2)];
 var $_phi_trans_insert=(($_pre61)|0);
 var $_pre62=HEAP32[(($_phi_trans_insert)>>2)];
 var $171=$_pre61;var $170=$_pre62;label=50;break;
 case 50: 
 var $170;
 var $171;
 var $$etemp$4$0=20;
 var $$etemp$4$1=0;

 var $172=(($171+4)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$173;
 var $175=$170;
 var $176=((($174)-($175))|0);
 var $177=(((($176|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIsNS_9allocatorIsEEE6resizeEj($123,$177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=52;break; }
 case 51: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=53;break;
 case 52: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=53;break;
 case 53: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $179=$lpad_phi$0;
 var $180=$lpad_phi$1;
 var $181=HEAP32[(($120)>>2)];
 var $182=($181|0)==0;
 if($182){label=58;break;}else{label=54;break;}
 case 54: 
 var $_pre63=HEAP32[(($122)>>2)];
 var $185=$_pre63;label=55;break;
 case 55: 
 var $185;
 var $186=($181|0)==($185|0);
 if($186){label=57;break;}else{label=56;break;}
 case 56: 
 var $188=((($185)-(2))|0);
 HEAP32[(($122)>>2)]=$188;
 var $185=$188;label=55;break;
 case 57: 
 var $189=$181;
 _free($189);
 label=58;break;
 case 58: 
 _free($_lcssa_i_i);
 var $_023=$179;var $_024=$180;label=62;break;
 case 59: 
 var $190=$_lcssa_i_i;
 var $191=(($h_i)|0);
 HEAP32[(($191)>>2)]=$190;
 var $192=(($m+112)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=((($193)+(1))|0);
 HEAP32[(($192)>>2)]=$194;
 var $195=(($h_i+24)|0);
 HEAP32[(($195)>>2)]=$194;
 var $196=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($19,$196,$h_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=27;break; }
 case 60: 
 var $197=(($19)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+16)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$64;
 var $202=HEAP8[(($201)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=64;break;}else{label=61;break;}
 case 61: 
 var $206=(($h_i+12)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=64;break;
 case 62: 
 var $_024;
 var $_023;
 var $209=$64;
 var $210=HEAP8[(($209)>>0)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=69;break;}else{label=63;break;}
 case 63: 
 var $214=(($h_i+12)|0);
 var $215=HEAP32[(($214)>>2)];
 _free($215);
 label=69;break;
 case 64: 
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=28;
 var $$etemp$7$1=0;

 var $217=HEAP8[(($65)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=66;break;}else{label=65;break;}
 case 65: 
 var $221=(($21+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=66;break;
 case 66: 
 var $223=(($m+4)|0);
 var $224=(($m)|0);
 var $225=(($200+8)|0);
 var $226=$225;
 var $227=$data;
 var $storemerge=0;label=67;break;
 case 67: 
 var $storemerge;
 var $228=HEAP32[(($223)>>2)];
 var $229=HEAP32[(($224)>>2)];
 var $230=$228;
 var $231=$229;
 var $232=((($230)-($231))|0);
 var $233=(((($232|0))/(28))&-1);
 var $234=($storemerge>>>0)<($233>>>0);
 if($234){label=68;break;}else{label=274;break;}
 case 68: 
 var $236=HEAP32[(($226)>>2)];
 var $237=(($236+($storemerge<<1))|0);
 var $238=(($227+($storemerge<<1))|0);
 var $239=(((((HEAPU8[(($238)>>0)])|(HEAPU8[((($238)+(1))>>0)]<<8))<<16)>>16));
 tempBigInt=$239;HEAP8[(($237)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($237)+(1))>>0)]=tempBigInt&0xff;
 var $240=((($storemerge)+(1))|0);
 var $storemerge=$240;label=67;break;
 case 69: 
 var $241$0=$_023;
 var $241$1=0;
 var $242$0=$241$0;
 var $242$1=$_024;
 var $243=HEAP8[(($65)>>0)];
 var $244=$243&1;
 var $245=(($244<<24)>>24)==0;
 if($245){label=275;break;}else{label=70;break;}
 case 70: 
 var $247=(($21+8)|0);
 var $248=HEAP32[(($247)>>2)];
 _free($248);
 label=275;break;
 case 71: 
 var $250=$18;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $251=($s|0)==4;
 if($251){label=72;break;}else{label=142;break;}
 case 72: 
 var $253=_strlen($name);
 var $254=($253>>>0)>4294967279;
 if($254){label=73;break;}else{label=74;break;}
 case 73: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 74: 
 var $257=($253>>>0)<11;
 if($257){label=75;break;}else{label=76;break;}
 case 75: 
 var $259=$253<<1;
 var $260=(($259)&255);
 HEAP8[(($250)>>0)]=$260;
 var $261=$18;
 var $262=(($261+1)|0);
 var $__p_0_i_i=$262;label=81;break;
 case 76: 
 var $263=((($253)+(16))|0);
 var $264=$263&-16;
 var $265=($264|0)==0;
 var $_size_i_i=($265?1:$264);
 var $266=_malloc($_size_i_i);
 var $267=($266|0)==0;
 if($267){label=77;break;}else{var $_lcssa_i_i6=$266;label=80;break;}
 case 77: 
 var $268=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $269=($268|0)==0;
 if($269){label=79;break;}else{label=78;break;}
 case 78: 
 var $271=$268;
 FUNCTION_TABLE[$271]();
 var $272=_malloc($_size_i_i);
 var $273=($272|0)==0;
 if($273){label=77;break;}else{var $_lcssa_i_i6=$272;label=80;break;}
 case 79: 
 var $275=___cxa_allocate_exception(4);
 var $276=$275;
 HEAP32[(($276)>>2)]=15192;
 ___cxa_throw($275,26096,(782));
 throw "Reached an unreachable!";
 case 80: 
 var $_lcssa_i_i6;
 var $277=(($18+8)|0);
 HEAP32[(($277)>>2)]=$_lcssa_i_i6;
 var $278=$264|1;
 var $279=(($18)|0);
 HEAP32[(($279)>>2)]=$278;
 var $280=(($18+4)|0);
 HEAP32[(($280)>>2)]=$253;
 var $__p_0_i_i=$_lcssa_i_i6;label=81;break;
 case 81: 
 var $__p_0_i_i;
 assert($253 % 1 === 0);(_memcpy($__p_0_i_i, $name, $253)|0);
 var $281=(($__p_0_i_i+$253)|0);
 HEAP8[(($281)>>0)]=0;
 var $282=$16;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $283=$17;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $284=$h_i_i;
 var $$etemp$11$0=28;
 var $$etemp$11$1=0;

 var $285=(($h_i_i+4)|0);
 var $286=$285;
 var $storemerge_i_i_i=0;label=82;break;
 case 82: 
 var $storemerge_i_i_i;
 var $288=($storemerge_i_i_i>>>0)<3;
 if($288){label=83;break;}else{label=84;break;}
 case 83: 
 var $290=(($286+($storemerge_i_i_i<<2))|0);
 HEAP32[(($290)>>2)]=0;
 var $291=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$291;label=82;break;
 case 84: 
 var $292=(($h_i_i+4)|0);
 var $293=HEAP8[(($250)>>0)];
 var $294=$293&1;
 var $295=(($294<<24)>>24)==0;
 if($295){label=86;break;}else{label=85;break;}
 case 85: 
 var $297=(($18+8)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($18+4)|0);
 var $300=HEAP32[(($299)>>2)];
 var $307=$300;var $306=$298;label=87;break;
 case 86: 
 var $302=$18;
 var $303=(($302+1)|0);
 var $304=($293&255);
 var $305=$304>>>1;
 var $307=$305;var $306=$303;label=87;break;
 case 87: 
 var $306;
 var $307;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($292,$306,$307) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=97;break; }
 case 88: 
 if($295){label=90;break;}else{label=89;break;}
 case 89: 
 var $309=(($18+4)|0);
 var $310=HEAP32[(($309)>>2)];
 var $314=$310;label=91;break;
 case 90: 
 var $312=($293&255);
 var $313=$312>>>1;
 var $314=$313;label=91;break;
 case 91: 
 var $314;
 var $315=($314|0)==0;
 if($315){label=99;break;}else{label=92;break;}
 case 92: 
 var $317=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($17,$317,$h_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=97;break; }
 case 93: 
 var $318=(($17)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($m+120)|0);
 var $321=$320;
 var $322=($319|0)==($321|0);
 if($322){label=99;break;}else{label=94;break;}
 case 94: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=97;break; }
 case 95: 
 throw "Reached an unreachable!";
 case 96: 
 var $lpad_loopexit38$0 = ___cxa_find_matching_catch(); var $lpad_loopexit38$1 = tempRet0;
 var $lpad_phi40$1=$lpad_loopexit38$1;var $lpad_phi40$0=$lpad_loopexit38$0;label=98;break;
 case 97: 
 var $lpad_nonloopexit39$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit39$1 = tempRet0;
 var $lpad_phi40$1=$lpad_nonloopexit39$1;var $lpad_phi40$0=$lpad_nonloopexit39$0;label=98;break;
 case 98: 
 var $lpad_phi40$0;
 var $lpad_phi40$1;
 var $326=$lpad_phi40$0;
 var $327=$lpad_phi40$1;
 var $_021=$326;var $_022=$327;label=132;break;
 case 99: 
 var $329=(($h_i_i+16)|0);
 HEAP32[(($329)>>2)]=4;
 var $330=(($h_i_i+20)|0);
 HEAP32[(($330)>>2)]=0;
 var $331=_malloc(24);
 var $332=($331|0)==0;
 if($332){label=100;break;}else{var $_lcssa_i_i_i=$331;label=105;break;}
 case 100: 
 var $333=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $334=($333|0)==0;
 if($334){label=103;break;}else{label=101;break;}
 case 101: 
 var $336=$333;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$336]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=96;break; }
 case 102: 
 var $337=_malloc(24);
 var $338=($337|0)==0;
 if($338){label=100;break;}else{var $_lcssa_i_i_i=$337;label=105;break;}
 case 103: 
 var $340=___cxa_allocate_exception(4);
 var $341=$340;
 HEAP32[(($341)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($340,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=97;break; }
 case 104: 
 throw "Reached an unreachable!";
 case 105: 
 var $_lcssa_i_i_i;
 var $342=(($m)|0);
 var $343=$_lcssa_i_i_i;
 HEAP32[(($343)>>2)]=18824;
 var $344=(($_lcssa_i_i_i+4)|0);
 var $345=$344;
 HEAP32[(($345)>>2)]=$342;
 var $346=(($_lcssa_i_i_i+8)|0);
 var $347=$346;
 var $348=(($_lcssa_i_i_i+12)|0);
 var $349=$348;
 var $350=$346;
 var $351=(($m+8)|0);
 HEAP32[(($346)>>2)]=0; HEAP32[((($346)+(4))>>2)]=0; HEAP32[((($346)+(8))>>2)]=0; HEAP32[((($346)+(12))>>2)]=0;
 var $352=HEAP32[(($351)>>2)];
 var $353=(($m)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=$352;
 var $356=$354;
 var $357=((($355)-($356))|0);
 var $358=(((($357|0))/(28))&-1);
 var $359=$__v_i_i_i_i;
 var $$etemp$12$0=20;
 var $$etemp$12$1=0;

 var $360=($352|0)==($354|0);
 if($360){var $398=$342;var $397=$354;label=120;break;}else{label=106;break;}
 case 106: 
 var $362=(($_lcssa_i_i_i+16)|0);
 var $363=$362;
 var $364=(($__v_i_i_i_i+12)|0);
 HEAP32[(($364)>>2)]=0;
 var $365=(($__v_i_i_i_i+16)|0);
 HEAP32[(($365)>>2)]=$363;
 var $366=($352|0)==($354|0);
 if($366){var $382=0;label=114;break;}else{label=107;break;}
 case 107: 
 var $368=$358<<2;
 var $369=($368|0)==0;
 var $_size_i_i_i_i_i=($369?1:$368);
 var $370=_malloc($_size_i_i_i_i_i);
 var $371=($370|0)==0;
 if($371){label=108;break;}else{var $_lcssa_i_i_i_i_i=$370;label=113;break;}
 case 108: 
 var $372=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $373=($372|0)==0;
 if($373){label=111;break;}else{label=109;break;}
 case 109: 
 var $375=$372;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$375]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=121;break; }
 case 110: 
 var $376=_malloc($_size_i_i_i_i_i);
 var $377=($376|0)==0;
 if($377){label=108;break;}else{var $_lcssa_i_i_i_i_i=$376;label=113;break;}
 case 111: 
 var $379=___cxa_allocate_exception(4);
 var $380=$379;
 HEAP32[(($380)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($379,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=122;break; }
 case 112: 
 throw "Reached an unreachable!";
 case 113: 
 var $_lcssa_i_i_i_i_i;
 var $381=$_lcssa_i_i_i_i_i;
 var $382=$381;label=114;break;
 case 114: 
 var $382;
 var $383=(($__v_i_i_i_i)|0);
 HEAP32[(($383)>>2)]=$382;
 var $384=(($__v_i_i_i_i+8)|0);
 HEAP32[(($384)>>2)]=$382;
 var $385=(($__v_i_i_i_i+4)|0);
 HEAP32[(($385)>>2)]=$382;
 var $386=(($382+($358<<2))|0);
 HEAP32[(($364)>>2)]=$386;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($350,$__v_i_i_i_i);
 var $387=HEAP32[(($385)>>2)];
 var $_pre64=HEAP32[(($384)>>2)];
 var $389=$_pre64;label=115;break;
 case 115: 
 var $389;
 var $390=($387|0)==($389|0);
 if($390){label=117;break;}else{label=116;break;}
 case 116: 
 var $392=((($389)-(4))|0);
 HEAP32[(($384)>>2)]=$392;
 var $389=$392;label=115;break;
 case 117: 
 var $393=HEAP32[(($383)>>2)];
 var $394=($393|0)==0;
 if($394){label=119;break;}else{label=118;break;}
 case 118: 
 var $396=$393;
 _free($396);
 label=119;break;
 case 119: 
 var $_pre65=HEAP32[(($345)>>2)];
 var $_phi_trans_insert66=(($_pre65)|0);
 var $_pre67=HEAP32[(($_phi_trans_insert66)>>2)];
 var $398=$_pre65;var $397=$_pre67;label=120;break;
 case 120: 
 var $397;
 var $398;
 var $$etemp$13$0=20;
 var $$etemp$13$1=0;

 var $399=(($398+4)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=$400;
 var $402=$397;
 var $403=((($401)-($402))|0);
 var $404=(((($403|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($350,$404) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { label=122;break; }
 case 121: 
 var $lpad_loopexit33$0 = ___cxa_find_matching_catch(); var $lpad_loopexit33$1 = tempRet0;
 var $lpad_phi35$1=$lpad_loopexit33$1;var $lpad_phi35$0=$lpad_loopexit33$0;label=123;break;
 case 122: 
 var $lpad_nonloopexit34$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit34$1 = tempRet0;
 var $lpad_phi35$1=$lpad_nonloopexit34$1;var $lpad_phi35$0=$lpad_nonloopexit34$0;label=123;break;
 case 123: 
 var $lpad_phi35$0;
 var $lpad_phi35$1;
 var $406=$lpad_phi35$0;
 var $407=$lpad_phi35$1;
 var $408=HEAP32[(($347)>>2)];
 var $409=($408|0)==0;
 if($409){label=128;break;}else{label=124;break;}
 case 124: 
 var $_pre68=HEAP32[(($349)>>2)];
 var $412=$_pre68;label=125;break;
 case 125: 
 var $412;
 var $413=($408|0)==($412|0);
 if($413){label=127;break;}else{label=126;break;}
 case 126: 
 var $415=((($412)-(4))|0);
 HEAP32[(($349)>>2)]=$415;
 var $412=$415;label=125;break;
 case 127: 
 var $416=$408;
 _free($416);
 label=128;break;
 case 128: 
 _free($_lcssa_i_i_i);
 var $_021=$406;var $_022=$407;label=132;break;
 case 129: 
 var $417=$_lcssa_i_i_i;
 var $418=(($h_i_i)|0);
 HEAP32[(($418)>>2)]=$417;
 var $419=(($m+112)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=((($420)+(1))|0);
 HEAP32[(($419)>>2)]=$421;
 var $422=(($h_i_i+24)|0);
 HEAP32[(($422)>>2)]=$421;
 var $423=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($16,$423,$h_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=97;break; }
 case 130: 
 var $424=(($16)|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=(($425+16)|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=$292;
 var $429=HEAP8[(($428)>>0)];
 var $430=$429&1;
 var $431=(($430<<24)>>24)==0;
 if($431){label=135;break;}else{label=131;break;}
 case 131: 
 var $433=(($h_i_i+12)|0);
 var $434=HEAP32[(($433)>>2)];
 _free($434);
 label=135;break;
 case 132: 
 var $_022;
 var $_021;
 var $436=$292;
 var $437=HEAP8[(($436)>>0)];
 var $438=$437&1;
 var $439=(($438<<24)>>24)==0;
 if($439){label=134;break;}else{label=133;break;}
 case 133: 
 var $441=(($h_i_i+12)|0);
 var $442=HEAP32[(($441)>>2)];
 _free($442);
 label=134;break;
 case 134: 
 var $443=HEAP8[(($250)>>0)];
 var $444=$443&1;
 var $445=(($444<<24)>>24)==0;
 if($445){label=141;break;}else{label=140;break;}
 case 135: 
 var $$etemp$14$0=8;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=28;
 var $$etemp$16$1=0;

 var $446=HEAP8[(($250)>>0)];
 var $447=$446&1;
 var $448=(($447<<24)>>24)==0;
 if($448){label=137;break;}else{label=136;break;}
 case 136: 
 var $450=(($18+8)|0);
 var $451=HEAP32[(($450)>>2)];
 _free($451);
 label=137;break;
 case 137: 
 var $452=(($m+4)|0);
 var $453=(($m)|0);
 var $454=(($427+8)|0);
 var $455=$454;
 var $456=$data;
 var $storemerge_i=0;label=138;break;
 case 138: 
 var $storemerge_i;
 var $457=HEAP32[(($452)>>2)];
 var $458=HEAP32[(($453)>>2)];
 var $459=$457;
 var $460=$458;
 var $461=((($459)-($460))|0);
 var $462=(((($461|0))/(28))&-1);
 var $463=($storemerge_i>>>0)<($462>>>0);
 if($463){label=139;break;}else{label=274;break;}
 case 139: 
 var $465=HEAP32[(($455)>>2)];
 var $466=(($465+($storemerge_i<<2))|0);
 var $467=(($456+($storemerge_i<<2))|0);
 var $468=((((HEAPU8[(($467)>>0)])|(HEAPU8[((($467)+(1))>>0)]<<8)|(HEAPU8[((($467)+(2))>>0)]<<16)|(HEAPU8[((($467)+(3))>>0)]<<24))|0));
 tempBigInt=$468;HEAP8[(($466)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($466)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($466)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($466)+(3))>>0)]=tempBigInt&0xff;
 var $469=((($storemerge_i)+(1))|0);
 var $storemerge_i=$469;label=138;break;
 case 140: 
 var $471=(($18+8)|0);
 var $472=HEAP32[(($471)>>2)];
 _free($472);
 label=141;break;
 case 141: 
 var $473$0=$_021;
 var $473$1=0;
 var $474$0=$473$0;
 var $474$1=$_022;
 ___resumeException($474$0)
 case 142: 
 var $476=$15;
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $477=($s|0)==8;
 if($477){label=143;break;}else{label=213;break;}
 case 143: 
 var $479=_strlen($name);
 var $480=($479>>>0)>4294967279;
 if($480){label=144;break;}else{label=145;break;}
 case 144: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 145: 
 var $483=($479>>>0)<11;
 if($483){label=146;break;}else{label=147;break;}
 case 146: 
 var $485=$479<<1;
 var $486=(($485)&255);
 HEAP8[(($476)>>0)]=$486;
 var $487=$15;
 var $488=(($487+1)|0);
 var $__p_0_i_i_i=$488;label=152;break;
 case 147: 
 var $489=((($479)+(16))|0);
 var $490=$489&-16;
 var $491=($490|0)==0;
 var $_size_i_i_i=($491?1:$490);
 var $492=_malloc($_size_i_i_i);
 var $493=($492|0)==0;
 if($493){label=148;break;}else{var $_lcssa_i_i7_i=$492;label=151;break;}
 case 148: 
 var $494=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $495=($494|0)==0;
 if($495){label=150;break;}else{label=149;break;}
 case 149: 
 var $497=$494;
 FUNCTION_TABLE[$497]();
 var $498=_malloc($_size_i_i_i);
 var $499=($498|0)==0;
 if($499){label=148;break;}else{var $_lcssa_i_i7_i=$498;label=151;break;}
 case 150: 
 var $501=___cxa_allocate_exception(4);
 var $502=$501;
 HEAP32[(($502)>>2)]=15192;
 ___cxa_throw($501,26096,(782));
 throw "Reached an unreachable!";
 case 151: 
 var $_lcssa_i_i7_i;
 var $503=(($15+8)|0);
 HEAP32[(($503)>>2)]=$_lcssa_i_i7_i;
 var $504=$490|1;
 var $505=(($15)|0);
 HEAP32[(($505)>>2)]=$504;
 var $506=(($15+4)|0);
 HEAP32[(($506)>>2)]=$479;
 var $__p_0_i_i_i=$_lcssa_i_i7_i;label=152;break;
 case 152: 
 var $__p_0_i_i_i;
 assert($479 % 1 === 0);(_memcpy($__p_0_i_i_i, $name, $479)|0);
 var $507=(($__p_0_i_i_i+$479)|0);
 HEAP8[(($507)>>0)]=0;
 var $508=$13;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $509=$14;
 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $510=$h_i_i_i;
 var $$etemp$20$0=28;
 var $$etemp$20$1=0;

 var $511=(($h_i_i_i+4)|0);
 var $512=$511;
 var $storemerge_i_i_i_i=0;label=153;break;
 case 153: 
 var $storemerge_i_i_i_i;
 var $514=($storemerge_i_i_i_i>>>0)<3;
 if($514){label=154;break;}else{label=155;break;}
 case 154: 
 var $516=(($512+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($516)>>2)]=0;
 var $517=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$517;label=153;break;
 case 155: 
 var $518=(($h_i_i_i+4)|0);
 var $519=HEAP8[(($476)>>0)];
 var $520=$519&1;
 var $521=(($520<<24)>>24)==0;
 if($521){label=157;break;}else{label=156;break;}
 case 156: 
 var $523=(($15+8)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($15+4)|0);
 var $526=HEAP32[(($525)>>2)];
 var $533=$526;var $532=$524;label=158;break;
 case 157: 
 var $528=$15;
 var $529=(($528+1)|0);
 var $530=($519&255);
 var $531=$530>>>1;
 var $533=$531;var $532=$529;label=158;break;
 case 158: 
 var $532;
 var $533;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($518,$532,$533) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=159;break; } else { label=168;break; }
 case 159: 
 if($521){label=161;break;}else{label=160;break;}
 case 160: 
 var $535=(($15+4)|0);
 var $536=HEAP32[(($535)>>2)];
 var $540=$536;label=162;break;
 case 161: 
 var $538=($519&255);
 var $539=$538>>>1;
 var $540=$539;label=162;break;
 case 162: 
 var $540;
 var $541=($540|0)==0;
 if($541){label=170;break;}else{label=163;break;}
 case 163: 
 var $543=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($14,$543,$h_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=164;break; } else { label=168;break; }
 case 164: 
 var $544=(($14)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=(($m+120)|0);
 var $547=$546;
 var $548=($545|0)==($547|0);
 if($548){label=170;break;}else{label=165;break;}
 case 165: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=168;break; }
 case 166: 
 throw "Reached an unreachable!";
 case 167: 
 var $lpad_loopexit48$0 = ___cxa_find_matching_catch(); var $lpad_loopexit48$1 = tempRet0;
 var $lpad_phi50$1=$lpad_loopexit48$1;var $lpad_phi50$0=$lpad_loopexit48$0;label=169;break;
 case 168: 
 var $lpad_nonloopexit49$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit49$1 = tempRet0;
 var $lpad_phi50$1=$lpad_nonloopexit49$1;var $lpad_phi50$0=$lpad_nonloopexit49$0;label=169;break;
 case 169: 
 var $lpad_phi50$0;
 var $lpad_phi50$1;
 var $552=$lpad_phi50$0;
 var $553=$lpad_phi50$1;
 var $_019=$552;var $_020=$553;label=203;break;
 case 170: 
 var $555=(($h_i_i_i+16)|0);
 HEAP32[(($555)>>2)]=8;
 var $556=(($h_i_i_i+20)|0);
 HEAP32[(($556)>>2)]=0;
 var $557=_malloc(24);
 var $558=($557|0)==0;
 if($558){label=171;break;}else{var $_lcssa_i_i_i_i11=$557;label=176;break;}
 case 171: 
 var $559=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $560=($559|0)==0;
 if($560){label=174;break;}else{label=172;break;}
 case 172: 
 var $562=$559;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$562]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { label=167;break; }
 case 173: 
 var $563=_malloc(24);
 var $564=($563|0)==0;
 if($564){label=171;break;}else{var $_lcssa_i_i_i_i11=$563;label=176;break;}
 case 174: 
 var $566=___cxa_allocate_exception(4);
 var $567=$566;
 HEAP32[(($567)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($566,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=168;break; }
 case 175: 
 throw "Reached an unreachable!";
 case 176: 
 var $_lcssa_i_i_i_i11;
 var $568=(($m)|0);
 var $569=$_lcssa_i_i_i_i11;
 HEAP32[(($569)>>2)]=18872;
 var $570=(($_lcssa_i_i_i_i11+4)|0);
 var $571=$570;
 HEAP32[(($571)>>2)]=$568;
 var $572=(($_lcssa_i_i_i_i11+8)|0);
 var $573=$572;
 var $574=(($_lcssa_i_i_i_i11+12)|0);
 var $575=$574;
 var $576=$572;
 var $577=(($m+8)|0);
 HEAP32[(($572)>>2)]=0; HEAP32[((($572)+(4))>>2)]=0; HEAP32[((($572)+(8))>>2)]=0; HEAP32[((($572)+(12))>>2)]=0;
 var $578=HEAP32[(($577)>>2)];
 var $579=(($m)|0);
 var $580=HEAP32[(($579)>>2)];
 var $581=$578;
 var $582=$580;
 var $583=((($581)-($582))|0);
 var $584=(((($583|0))/(28))&-1);
 var $585=$__v_i_i_i_i_i;
 var $$etemp$21$0=20;
 var $$etemp$21$1=0;

 var $586=($578|0)==($580|0);
 if($586){var $624=$568;var $623=$580;label=191;break;}else{label=177;break;}
 case 177: 
 var $588=(($_lcssa_i_i_i_i11+16)|0);
 var $589=$588;
 var $590=(($__v_i_i_i_i_i+12)|0);
 HEAP32[(($590)>>2)]=0;
 var $591=(($__v_i_i_i_i_i+16)|0);
 HEAP32[(($591)>>2)]=$589;
 var $592=($578|0)==($580|0);
 if($592){var $608=0;label=185;break;}else{label=178;break;}
 case 178: 
 var $594=$584<<3;
 var $595=($594|0)==0;
 var $_size_i_i_i_i_i_i=($595?1:$594);
 var $596=_malloc($_size_i_i_i_i_i_i);
 var $597=($596|0)==0;
 if($597){label=179;break;}else{var $_lcssa_i_i_i_i_i_i=$596;label=184;break;}
 case 179: 
 var $598=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $599=($598|0)==0;
 if($599){label=182;break;}else{label=180;break;}
 case 180: 
 var $601=$598;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$601]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=181;break; } else { label=192;break; }
 case 181: 
 var $602=_malloc($_size_i_i_i_i_i_i);
 var $603=($602|0)==0;
 if($603){label=179;break;}else{var $_lcssa_i_i_i_i_i_i=$602;label=184;break;}
 case 182: 
 var $605=___cxa_allocate_exception(4);
 var $606=$605;
 HEAP32[(($606)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($605,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=193;break; }
 case 183: 
 throw "Reached an unreachable!";
 case 184: 
 var $_lcssa_i_i_i_i_i_i;
 var $607=$_lcssa_i_i_i_i_i_i;
 var $608=$607;label=185;break;
 case 185: 
 var $608;
 var $609=(($__v_i_i_i_i_i)|0);
 HEAP32[(($609)>>2)]=$608;
 var $610=(($__v_i_i_i_i_i+8)|0);
 HEAP32[(($610)>>2)]=$608;
 var $611=(($__v_i_i_i_i_i+4)|0);
 HEAP32[(($611)>>2)]=$608;
 var $612=(($608+($584<<3))|0);
 HEAP32[(($590)>>2)]=$612;
 __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($576,$__v_i_i_i_i_i);
 var $613=HEAP32[(($611)>>2)];
 var $_pre69=HEAP32[(($610)>>2)];
 var $615=$_pre69;label=186;break;
 case 186: 
 var $615;
 var $616=($613|0)==($615|0);
 if($616){label=188;break;}else{label=187;break;}
 case 187: 
 var $618=((($615)-(8))|0);
 HEAP32[(($610)>>2)]=$618;
 var $615=$618;label=186;break;
 case 188: 
 var $619=HEAP32[(($609)>>2)];
 var $620=($619|0)==0;
 if($620){label=190;break;}else{label=189;break;}
 case 189: 
 var $622=$619;
 _free($622);
 label=190;break;
 case 190: 
 var $_pre70=HEAP32[(($571)>>2)];
 var $_phi_trans_insert71=(($_pre70)|0);
 var $_pre72=HEAP32[(($_phi_trans_insert71)>>2)];
 var $624=$_pre70;var $623=$_pre72;label=191;break;
 case 191: 
 var $623;
 var $624;
 var $$etemp$22$0=20;
 var $$etemp$22$1=0;

 var $625=(($624+4)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=$626;
 var $628=$623;
 var $629=((($627)-($628))|0);
 var $630=(((($629|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($576,$630) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=193;break; }
 case 192: 
 var $lpad_loopexit43$0 = ___cxa_find_matching_catch(); var $lpad_loopexit43$1 = tempRet0;
 var $lpad_phi45$1=$lpad_loopexit43$1;var $lpad_phi45$0=$lpad_loopexit43$0;label=194;break;
 case 193: 
 var $lpad_nonloopexit44$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit44$1 = tempRet0;
 var $lpad_phi45$1=$lpad_nonloopexit44$1;var $lpad_phi45$0=$lpad_nonloopexit44$0;label=194;break;
 case 194: 
 var $lpad_phi45$0;
 var $lpad_phi45$1;
 var $632=$lpad_phi45$0;
 var $633=$lpad_phi45$1;
 var $634=HEAP32[(($573)>>2)];
 var $635=($634|0)==0;
 if($635){label=199;break;}else{label=195;break;}
 case 195: 
 var $_pre73=HEAP32[(($575)>>2)];
 var $638=$_pre73;label=196;break;
 case 196: 
 var $638;
 var $639=($634|0)==($638|0);
 if($639){label=198;break;}else{label=197;break;}
 case 197: 
 var $641=((($638)-(8))|0);
 HEAP32[(($575)>>2)]=$641;
 var $638=$641;label=196;break;
 case 198: 
 var $642=$634;
 _free($642);
 label=199;break;
 case 199: 
 _free($_lcssa_i_i_i_i11);
 var $_019=$632;var $_020=$633;label=203;break;
 case 200: 
 var $643=$_lcssa_i_i_i_i11;
 var $644=(($h_i_i_i)|0);
 HEAP32[(($644)>>2)]=$643;
 var $645=(($m+112)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=((($646)+(1))|0);
 HEAP32[(($645)>>2)]=$647;
 var $648=(($h_i_i_i+24)|0);
 HEAP32[(($648)>>2)]=$647;
 var $649=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$649,$h_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=201;break; } else { label=168;break; }
 case 201: 
 var $650=(($13)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=(($651+16)|0);
 var $653=HEAP32[(($652)>>2)];
 var $654=$518;
 var $655=HEAP8[(($654)>>0)];
 var $656=$655&1;
 var $657=(($656<<24)>>24)==0;
 if($657){label=206;break;}else{label=202;break;}
 case 202: 
 var $659=(($h_i_i_i+12)|0);
 var $660=HEAP32[(($659)>>2)];
 _free($660);
 label=206;break;
 case 203: 
 var $_020;
 var $_019;
 var $662=$518;
 var $663=HEAP8[(($662)>>0)];
 var $664=$663&1;
 var $665=(($664<<24)>>24)==0;
 if($665){label=205;break;}else{label=204;break;}
 case 204: 
 var $667=(($h_i_i_i+12)|0);
 var $668=HEAP32[(($667)>>2)];
 _free($668);
 label=205;break;
 case 205: 
 var $669=HEAP8[(($476)>>0)];
 var $670=$669&1;
 var $671=(($670<<24)>>24)==0;
 if($671){label=212;break;}else{label=211;break;}
 case 206: 
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $$etemp$24$0=4;
 var $$etemp$24$1=0;

 var $$etemp$25$0=28;
 var $$etemp$25$1=0;

 var $672=HEAP8[(($476)>>0)];
 var $673=$672&1;
 var $674=(($673<<24)>>24)==0;
 if($674){label=208;break;}else{label=207;break;}
 case 207: 
 var $676=(($15+8)|0);
 var $677=HEAP32[(($676)>>2)];
 _free($677);
 label=208;break;
 case 208: 
 var $678=(($m+4)|0);
 var $679=(($m)|0);
 var $680=(($653+8)|0);
 var $681=$680;
 var $682=$data;
 var $storemerge_i_i13=0;label=209;break;
 case 209: 
 var $storemerge_i_i13;
 var $683=HEAP32[(($678)>>2)];
 var $684=HEAP32[(($679)>>2)];
 var $685=$683;
 var $686=$684;
 var $687=((($685)-($686))|0);
 var $688=(((($687|0))/(28))&-1);
 var $689=($storemerge_i_i13>>>0)<($688>>>0);
 if($689){label=210;break;}else{label=274;break;}
 case 210: 
 var $691=HEAP32[(($681)>>2)];
 var $692=(($691+($storemerge_i_i13<<3))|0);
 var $693=(($682+($storemerge_i_i13<<3))|0);
 var $694=(HEAP32[((tempDoublePtr)>>2)]=((((HEAPU8[(($693)>>0)])|(HEAPU8[((($693)+(1))>>0)]<<8)|(HEAPU8[((($693)+(2))>>0)]<<16)|(HEAPU8[((($693)+(3))>>0)]<<24))|0)),HEAP32[(((tempDoublePtr)+(4))>>2)]=((((HEAPU8[((($693)+(4))>>0)])|(HEAPU8[((($693)+(5))>>0)]<<8)|(HEAPU8[((($693)+(6))>>0)]<<16)|(HEAPU8[((($693)+(7))>>0)]<<24))|0)),HEAPF64[(tempDoublePtr)>>3]);
 (HEAPF64[(tempDoublePtr)>>3]=$694,tempBigInt=HEAP32[((tempDoublePtr)>>2)],HEAP8[(($692)>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(1))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(2))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(3))>>0)]=tempBigInt&0xff,tempBigInt=HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP8[((($692)+(4))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(5))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(6))>>0)]=tempBigInt&0xff,tempBigInt = tempBigInt>>8,HEAP8[((($692)+(7))>>0)]=tempBigInt&0xff);
 var $695=((($storemerge_i_i13)+(1))|0);
 var $storemerge_i_i13=$695;label=209;break;
 case 211: 
 var $697=(($15+8)|0);
 var $698=HEAP32[(($697)>>2)];
 _free($698);
 label=212;break;
 case 212: 
 var $699$0=$_019;
 var $699$1=0;
 var $700$0=$699$0;
 var $700$1=$_020;
 ___resumeException($700$0)
 case 213: 
 var $702=$7;
 var $$etemp$26$0=8;
 var $$etemp$26$1=0;

 var $703=$8;
 var $$etemp$27$0=4;
 var $$etemp$27$1=0;

 var $704=$9;
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $705=$h_i4_i_i;
 var $$etemp$29$0=8;
 var $$etemp$29$1=0;

 var $706=$10;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $707=$h1_i_i_i;
 var $$etemp$31$0=8;
 var $$etemp$31$1=0;

 var $708=$11;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $709=$pa_i_i_i;
 var $$etemp$33$0=28;
 var $$etemp$33$1=0;

 var $710=$12;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $711=($s>>>0)<4;
 if($711){label=214;break;}else{label=272;break;}
 case 214: 
 var $713=(((4)-($s))|0);
 var $714=_strlen($name);
 var $715=($714>>>0)>4294967279;
 if($715){label=215;break;}else{label=216;break;}
 case 215: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 216: 
 var $718=($714>>>0)<11;
 if($718){label=217;break;}else{label=218;break;}
 case 217: 
 var $720=$714<<1;
 var $721=(($720)&255);
 HEAP8[(($708)>>0)]=$721;
 var $722=$11;
 var $723=(($722+1)|0);
 var $__p_0_i5_i_i_i=$723;label=223;break;
 case 218: 
 var $724=((($714)+(16))|0);
 var $725=$724&-16;
 var $726=($725|0)==0;
 var $_size_i7_i_i_i=($726?1:$725);
 var $727=_malloc($_size_i7_i_i_i);
 var $728=($727|0)==0;
 if($728){label=219;break;}else{var $_lcssa_i9_i_i_i=$727;label=222;break;}
 case 219: 
 var $729=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $730=($729|0)==0;
 if($730){label=221;break;}else{label=220;break;}
 case 220: 
 var $732=$729;
 FUNCTION_TABLE[$732]();
 var $733=_malloc($_size_i7_i_i_i);
 var $734=($733|0)==0;
 if($734){label=219;break;}else{var $_lcssa_i9_i_i_i=$733;label=222;break;}
 case 221: 
 var $736=___cxa_allocate_exception(4);
 var $737=$736;
 HEAP32[(($737)>>2)]=15192;
 ___cxa_throw($736,26096,(782));
 throw "Reached an unreachable!";
 case 222: 
 var $_lcssa_i9_i_i_i;
 var $738=(($11+8)|0);
 HEAP32[(($738)>>2)]=$_lcssa_i9_i_i_i;
 var $739=$725|1;
 var $740=(($11)|0);
 HEAP32[(($740)>>2)]=$739;
 var $741=(($11+4)|0);
 HEAP32[(($741)>>2)]=$714;
 var $__p_0_i5_i_i_i=$_lcssa_i9_i_i_i;label=223;break;
 case 223: 
 var $__p_0_i5_i_i_i;
 assert($714 % 1 === 0);(_memcpy($__p_0_i5_i_i_i, $name, $714)|0);
 var $742=(($__p_0_i5_i_i_i+$714)|0);
 HEAP8[(($742)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeIlEENS0_7TriMeshINSt3__16vectorI8MyVertexNS6_9allocatorIS8_EEEENS7_I6MyFaceNS9_ISC_EEEENS7_I6MyEdgeNS9_ISF_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS6_12basic_stringIcNS6_11char_traitsIcEENS9_IcEEEE($h1_i_i_i,$m,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { label=229;break; }
 case 224: 
 var $744=HEAP8[(($708)>>0)];
 var $745=$744&1;
 var $746=(($745<<24)>>24)==0;
 if($746){label=226;break;}else{label=225;break;}
 case 225: 
 var $748=(($11+8)|0);
 var $749=HEAP32[(($748)>>2)];
 _free($749);
 label=226;break;
 case 226: 
 var $750=(($m+4)|0);
 var $751=(($m)|0);
 var $752=(($h1_i_i_i)|0);
 var $753=HEAP32[(($752)>>2)];
 var $754=(($753+8)|0);
 var $755=$data;
 var $storemerge_i_i11_i=0;label=227;break;
 case 227: 
 var $storemerge_i_i11_i;
 var $756=HEAP32[(($750)>>2)];
 var $757=HEAP32[(($751)>>2)];
 var $758=$756;
 var $759=$757;
 var $760=((($758)-($759))|0);
 var $761=(((($760|0))/(28))&-1);
 var $762=($storemerge_i_i11_i>>>0)<($761>>>0);
 if($762){label=228;break;}else{label=231;break;}
 case 228: 
 var $764=HEAP32[(($754)>>2)];
 var $765=(($764+($storemerge_i_i11_i<<2))|0);
 var $766=$765;
 var $767=(($755+($storemerge_i_i11_i<<2))|0);
 var $768=$767;
 assert($s % 1 === 0);(_memcpy($766, $768, $s)|0);
 var $769=((($storemerge_i_i11_i)+(1))|0);
 var $storemerge_i_i11_i=$769;label=227;break;
 case 229: 
 var $771$0 = ___cxa_find_matching_catch(); var $771$1 = tempRet0;
 var $772=$771$0;
 var $773=$771$1;
 var $774=HEAP8[(($708)>>0)];
 var $775=$774&1;
 var $776=(($775<<24)>>24)==0;
 if($776){var $_017=$772;var $_018=$773;label=273;break;}else{label=230;break;}
 case 230: 
 var $778=(($11+8)|0);
 var $779=HEAP32[(($778)>>2)];
 _free($779);
 var $_017=$772;var $_018=$773;label=273;break;
 case 231: 
 var $781=(($pa_i_i_i+4)|0);
 var $782=$781;
 var $storemerge_i_i10_i_i=0;label=232;break;
 case 232: 
 var $storemerge_i_i10_i_i;
 var $784=($storemerge_i_i10_i_i>>>0)<3;
 if($784){label=233;break;}else{label=234;break;}
 case 233: 
 var $786=(($782+($storemerge_i_i10_i_i<<2))|0);
 HEAP32[(($786)>>2)]=0;
 var $787=((($storemerge_i_i10_i_i)+(1))|0);
 var $storemerge_i_i10_i_i=$787;label=232;break;
 case 234: 
 var $788=(($pa_i_i_i+4)|0);
 var $789=_strlen($name);
 var $790=($789>>>0)>4294967279;
 if($790){label=235;break;}else{label=237;break;}
 case 235: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=236;break; } else { label=267;break; }
 case 236: 
 throw "Reached an unreachable!";
 case 237: 
 var $793=($789>>>0)<11;
 if($793){label=238;break;}else{label=239;break;}
 case 238: 
 var $795=$789<<1;
 var $796=(($795)&255);
 HEAP8[(($710)>>0)]=$796;
 var $797=$12;
 var $798=(($797+1)|0);
 var $__p_0_i15_i_i_i=$798;label=246;break;
 case 239: 
 var $799=((($789)+(16))|0);
 var $800=$799&-16;
 var $801=($800|0)==0;
 var $_size_i19_i_i_i=($801?1:$800);
 var $802=_malloc($_size_i19_i_i_i);
 var $803=($802|0)==0;
 if($803){label=240;break;}else{var $_lcssa_i21_i_i_i=$802;label=245;break;}
 case 240: 
 var $804=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $805=($804|0)==0;
 if($805){label=243;break;}else{label=241;break;}
 case 241: 
 var $807=$804;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$807]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=266;break; }
 case 242: 
 var $808=_malloc($_size_i19_i_i_i);
 var $809=($808|0)==0;
 if($809){label=240;break;}else{var $_lcssa_i21_i_i_i=$808;label=245;break;}
 case 243: 
 var $811=___cxa_allocate_exception(4);
 var $812=$811;
 HEAP32[(($812)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($811,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=267;break; }
 case 244: 
 throw "Reached an unreachable!";
 case 245: 
 var $_lcssa_i21_i_i_i;
 var $813=(($12+8)|0);
 HEAP32[(($813)>>2)]=$_lcssa_i21_i_i_i;
 var $814=$800|1;
 var $815=(($12)|0);
 HEAP32[(($815)>>2)]=$814;
 var $816=(($12+4)|0);
 HEAP32[(($816)>>2)]=$789;
 var $__p_0_i15_i_i_i=$_lcssa_i21_i_i_i;label=246;break;
 case 246: 
 var $__p_0_i15_i_i_i;
 assert($789 % 1 === 0);(_memcpy($__p_0_i15_i_i_i, $name, $789)|0);
 var $817=(($__p_0_i15_i_i_i+$789)|0);
 HEAP8[(($817)>>0)]=0;
 var $818=$788;
 var $819=HEAP8[(($818)>>0)];
 var $820=$819&1;
 var $821=(($820<<24)>>24)==0;
 if($821){label=248;break;}else{label=247;break;}
 case 247: 
 var $823=(($pa_i_i_i+12)|0);
 var $824=HEAP32[(($823)>>2)];
 HEAP8[(($824)>>0)]=0;
 var $825=(($pa_i_i_i+8)|0);
 HEAP32[(($825)>>2)]=0;
 label=249;break;
 case 248: 
 var $827=$788;
 var $828=(($827+1)|0);
 HEAP8[(($828)>>0)]=0;
 HEAP8[(($818)>>0)]=0;
 label=249;break;
 case 249: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($788,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=250;break; }
 case 250: 
 var $830$0 = ___cxa_find_matching_catch(0); var $830$1 = tempRet0;
 var $831=$830$0;
 ___clang_call_terminate($831);
 throw "Reached an unreachable!";
 case 251: 
 assert(12 % 1 === 0);HEAP32[(($818)>>2)]=HEAP32[(($710)>>2)];HEAP32[((($818)+(4))>>2)]=HEAP32[((($710)+(4))>>2)];HEAP32[((($818)+(8))>>2)]=HEAP32[((($710)+(8))>>2)];
 var $832=$12;
 var $storemerge1_i_i_i=0;label=252;break;
 case 252: 
 var $storemerge1_i_i_i;
 var $834=($storemerge1_i_i_i>>>0)<3;
 if($834){label=253;break;}else{label=254;break;}
 case 253: 
 var $836=(($832+($storemerge1_i_i_i<<2))|0);
 HEAP32[(($836)>>2)]=0;
 var $837=((($storemerge1_i_i_i)+(1))|0);
 var $storemerge1_i_i_i=$837;label=252;break;
 case 254: 
 var $838=HEAP8[(($710)>>0)];
 var $839=$838&1;
 var $840=(($839<<24)>>24)==0;
 if($840){label=256;break;}else{label=255;break;}
 case 255: 
 var $842=(($12+8)|0);
 var $843=HEAP32[(($842)>>2)];
 _free($843);
 label=256;break;
 case 256: 
 var $844=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($9,$844,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=257;break; } else { label=267;break; }
 case 257: 
 var $845=(($9)|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=(($846+16)|0);
 var $848=(($847)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=(($pa_i_i_i)|0);
 HEAP32[(($850)>>2)]=$849;
 var $851=(($846+20)|0);
 var $852=($pa_i_i_i|0)==($847|0);
 if($852){label=262;break;}else{label=258;break;}
 case 258: 
 var $854=$851;
 var $855=HEAP8[(($854)>>0)];
 var $856=$855&1;
 var $857=(($856<<24)>>24)==0;
 if($857){label=260;break;}else{label=259;break;}
 case 259: 
 var $859=(($846+28)|0);
 var $860=HEAP32[(($859)>>2)];
 var $861=(($846+24)|0);
 var $862=HEAP32[(($861)>>2)];
 var $869=$862;var $868=$860;label=261;break;
 case 260: 
 var $864=$851;
 var $865=(($864+1)|0);
 var $866=($855&255);
 var $867=$866>>>1;
 var $869=$867;var $868=$865;label=261;break;
 case 261: 
 var $868;
 var $869;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($788,$868,$869) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=262;break; } else { label=267;break; }
 case 262: 
 var $870=(($pa_i_i_i+16)|0);
 var $871=(($846+32)|0);
 var $872=$870;
 var $873=$871;
 assert(12 % 1 === 0);HEAP32[(($872)>>2)]=HEAP32[(($873)>>2)];HEAP32[((($872)+(4))>>2)]=HEAP32[((($873)+(4))>>2)];HEAP32[((($872)+(8))>>2)]=HEAP32[((($873)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($8,$844,$846);
 var $874=(($pa_i_i_i+20)|0);
 HEAP32[(($874)>>2)]=$713;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$844,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=263;break; } else { label=267;break; }
 case 263: 
 var $875=(($7+4)|0);
 var $876=HEAP8[(($875)>>0)];
 var $877=$876&1;
 var $878=(($877<<24)>>24)==0;
 if($878){label=264;break;}else{label=270;break;}
 case 264: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=267;break; }
 case 265: 
 throw "Reached an unreachable!";
 case 266: 
 var $lpad_loopexit53$0 = ___cxa_find_matching_catch(); var $lpad_loopexit53$1 = tempRet0;
 var $lpad_phi55$1=$lpad_loopexit53$1;var $lpad_phi55$0=$lpad_loopexit53$0;label=268;break;
 case 267: 
 var $lpad_nonloopexit54$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit54$1 = tempRet0;
 var $lpad_phi55$1=$lpad_nonloopexit54$1;var $lpad_phi55$0=$lpad_nonloopexit54$0;label=268;break;
 case 268: 
 var $lpad_phi55$0;
 var $lpad_phi55$1;
 var $882=$lpad_phi55$0;
 var $883=$lpad_phi55$1;
 var $884=$788;
 var $885=HEAP8[(($884)>>0)];
 var $886=$885&1;
 var $887=(($886<<24)>>24)==0;
 if($887){var $_017=$882;var $_018=$883;label=273;break;}else{label=269;break;}
 case 269: 
 var $889=(($pa_i_i_i+12)|0);
 var $890=HEAP32[(($889)>>2)];
 _free($890);
 var $_017=$882;var $_018=$883;label=273;break;
 case 270: 
 var $892=HEAP8[(($818)>>0)];
 var $893=$892&1;
 var $894=(($893<<24)>>24)==0;
 if($894){label=274;break;}else{label=271;break;}
 case 271: 
 var $896=(($pa_i_i_i+12)|0);
 var $897=HEAP32[(($896)>>2)];
 _free($897);
 label=274;break;
 case 272: 
 var $898=$1;
 var $$etemp$35$0=8;
 var $$etemp$35$1=0;

 var $899=$2;
 var $$etemp$36$0=4;
 var $$etemp$36$1=0;

 var $900=$3;
 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $901=$h_i_i_i_i;
 var $$etemp$38$0=8;
 var $$etemp$38$1=0;

 var $902=$4;
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $903=$h1_i_i_i_i;
 var $$etemp$40$0=8;
 var $$etemp$40$1=0;

 var $904=$5;
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $905=$pa_i_i_i_i;
 var $$etemp$42$0=28;
 var $$etemp$42$1=0;

 var $906=$6;
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $907=($s|0)==1;
 var $908=($s|0)==0;
 __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi1EEENS1_3K10IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEENS4_ILi128EEENS4_ILi64EEENS4_ILi32EEENS4_ILi16EEENS4_ILi8EEES5_EEE9AddAttribILi0EEEvRS3_PKcjPv($m,$name,$s,$data);
 var $$etemp$44$0=8;
 var $$etemp$44$1=0;

 var $$etemp$45$0=4;
 var $$etemp$45$1=0;

 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 var $$etemp$47$0=8;
 var $$etemp$47$1=0;

 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $$etemp$49$0=8;
 var $$etemp$49$1=0;

 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $$etemp$51$0=28;
 var $$etemp$51$1=0;

 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 label=274;break;
 case 273: 
 var $_018;
 var $_017;
 var $909$0=$_017;
 var $909$1=0;
 var $910$0=$909$0;
 var $910$1=$_018;
 ___resumeException($910$0)
 case 274: 
 STACKTOP=sp;return;
 case 275: 
 ___resumeException($242$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeIlEENS0_7TriMeshINSt3__16vectorI8MyVertexNS6_9allocatorIS8_EEEENS7_I6MyFaceNS9_ISC_EEEENS7_I6MyEdgeNS9_ISF_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS6_12basic_stringIcNS6_11char_traitsIcEENS9_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=4;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=18776;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<2;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<2))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIlNS_9allocatorIlEEE26__swap_out_circular_bufferERNS_14__split_bufferIlRS2_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(4))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=$117;
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIlNS_9allocatorIlEEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(4))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=$132;
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=1;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19256;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $120=$66;var $119=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $104=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=_malloc($82);
 var $93=($92|0)==0;
 if($93){label=29;break;}else{var $_lcssa_i_i_i=$92;label=34;break;}
 case 29: 
 var $94=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=30;break;}
 case 30: 
 var $97=$94;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $98=_malloc($82);
 var $99=($98|0)==0;
 if($99){label=29;break;}else{var $_lcssa_i_i_i=$98;label=34;break;}
 case 32: 
 var $101=___cxa_allocate_exception(4);
 var $102=$101;
 HEAP32[(($102)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $103=$_lcssa_i_i_i;
 var $104=$103;label=35;break;
 case 35: 
 var $104;
 var $105=(($__v_i_i)|0);
 HEAP32[(($105)>>2)]=$104;
 var $106=(($__v_i_i+8)|0);
 HEAP32[(($106)>>2)]=$104;
 var $107=(($__v_i_i+4)|0);
 HEAP32[(($107)>>2)]=$104;
 var $108=(($104+$82)|0);
 HEAP32[(($88)>>2)]=$108;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $109=HEAP32[(($107)>>2)];
 var $_pre=HEAP32[(($106)>>2)];
 var $111=$_pre;label=36;break;
 case 36: 
 var $111;
 var $112=($109|0)==($111|0);
 if($112){label=38;break;}else{label=37;break;}
 case 37: 
 var $114=((($111)-(1))|0);
 HEAP32[(($106)>>2)]=$114;
 var $111=$114;label=36;break;
 case 38: 
 var $115=HEAP32[(($105)>>2)];
 var $116=($115|0)==0;
 if($116){label=40;break;}else{label=39;break;}
 case 39: 
 var $118=(($115)|0);
 _free($118);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $120=$_pre10;var $119=$_pre11;label=41;break;
 case 41: 
 var $119;
 var $120;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $121=(($120+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122;
 var $124=$119;
 var $125=((($123)-($124))|0);
 var $126=(((($125|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE6resizeEj($74,$126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $128=$lpad_phi$0;
 var $129=$lpad_phi$1;
 var $130=HEAP32[(($71)>>2)];
 var $131=($130|0)==0;
 if($131){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $134=$_pre12;label=46;break;
 case 46: 
 var $134;
 var $135=($130|0)==($134|0);
 if($135){label=48;break;}else{label=47;break;}
 case 47: 
 var $137=((($134)-(1))|0);
 HEAP32[(($73)>>2)]=$137;
 var $134=$137;label=46;break;
 case 48: 
 var $138=(($130)|0);
 _free($138);
 label=53;break;
 case 49: 
 var $140=$_lcssa_i;
 var $141=(($h)|0);
 HEAP32[(($141)>>2)]=$140;
 var $142=(($m+112)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=((($143)+(1))|0);
 HEAP32[(($142)>>2)]=$144;
 var $145=(($h+24)|0);
 HEAP32[(($145)>>2)]=$144;
 var $146=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$146,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $148=(($1)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+16)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($149+40)|0);
 var $153=(($agg_result)|0);
 var $154=$151;
 HEAP32[(($153)>>2)]=$154;
 var $155=(($agg_result+4)|0);
 var $156=HEAP32[(($152)>>2)];
 HEAP32[(($155)>>2)]=$156;
 var $157=$10;
 var $158=HEAP8[(($157)>>0)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=52;break;}else{label=51;break;}
 case 51: 
 var $162=(($h+12)|0);
 var $163=HEAP32[(($162)>>2)];
 _free($163);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$128;var $_04=$129;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $165=$10;
 var $166=HEAP8[(($165)>>0)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=56;break;}else{label=55;break;}
 case 55: 
 var $170=(($h+12)|0);
 var $171=HEAP32[(($170)>>2)];
 _free($171);
 label=56;break;
 case 56: 
 var $172$0=$_0;
 var $172$1=0;
 var $173$0=$172$0;
 var $173$1=$_04;
 ___resumeException($173$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi1EEENS1_3K10IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEENS4_ILi128EEENS4_ILi64EEENS4_ILi32EEENS4_ILi16EEENS4_ILi8EEES5_EEE9AddAttribILi0EEEvRS3_PKcjPv($m,$name,$s,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+696)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $h_i_i_i_i_i=(sp)+(24);
 var $4=(sp)+(32);
 var $h1_i_i_i_i_i=(sp)+(48);
 var $5=(sp)+(56);
 var $pa_i_i_i_i_i=(sp)+(72);
 var $6=(sp)+(104);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $h_i_i_i_i=(sp)+(144);
 var $10=(sp)+(152);
 var $h1_i_i_i_i=(sp)+(168);
 var $11=(sp)+(176);
 var $pa_i_i_i_i=(sp)+(192);
 var $12=(sp)+(224);
 var $13=(sp)+(240);
 var $14=(sp)+(248);
 var $15=(sp)+(256);
 var $h_i_i_i=(sp)+(264);
 var $16=(sp)+(272);
 var $h1_i_i_i=(sp)+(288);
 var $17=(sp)+(296);
 var $pa_i_i_i=(sp)+(312);
 var $18=(sp)+(344);
 var $19=(sp)+(360);
 var $20=(sp)+(368);
 var $21=(sp)+(376);
 var $h_i_i=(sp)+(384);
 var $22=(sp)+(392);
 var $h1_i_i=(sp)+(408);
 var $23=(sp)+(416);
 var $pa_i_i=(sp)+(432);
 var $24=(sp)+(464);
 var $25=(sp)+(480);
 var $26=(sp)+(488);
 var $h_i=(sp)+(496);
 var $27=(sp)+(504);
 var $h1_i=(sp)+(520);
 var $28=(sp)+(528);
 var $pa_i=(sp)+(544);
 var $29=(sp)+(576);
 var $30=(sp)+(584);
 var $31=(sp)+(592);
 var $h=(sp)+(600);
 var $32=(sp)+(608);
 var $h1=(sp)+(624);
 var $33=(sp)+(632);
 var $pa=(sp)+(648);
 var $34=(sp)+(680);
 if(($s|0)==0){ label=19;break;}else if(($s|0)==1){ label=2;break;}else{label=77;break;}
 case 2: 
 var $36=_strlen($name);
 var $37=($36>>>0)>4294967279;
 if($37){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $40=($36>>>0)<11;
 if($40){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=$36<<1;
 var $43=(($42)&255);
 var $44=$32;
 HEAP8[(($44)>>0)]=$43;
 var $45=$32;
 var $46=(($45+1)|0);
 var $__p_0_i=$46;label=11;break;
 case 6: 
 var $47=((($36)+(16))|0);
 var $48=$47&-16;
 var $49=($48|0)==0;
 var $_size_i=($49?1:$48);
 var $50=_malloc($_size_i);
 var $51=($50|0)==0;
 if($51){label=7;break;}else{var $_lcssa_i=$50;label=10;break;}
 case 7: 
 var $52=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $53=($52|0)==0;
 if($53){label=9;break;}else{label=8;break;}
 case 8: 
 var $55=$52;
 FUNCTION_TABLE[$55]();
 var $56=_malloc($_size_i);
 var $57=($56|0)==0;
 if($57){label=7;break;}else{var $_lcssa_i=$56;label=10;break;}
 case 9: 
 var $59=___cxa_allocate_exception(4);
 var $60=$59;
 HEAP32[(($60)>>2)]=15192;
 ___cxa_throw($59,26096,(782));
 throw "Reached an unreachable!";
 case 10: 
 var $_lcssa_i;
 var $61=(($32+8)|0);
 HEAP32[(($61)>>2)]=$_lcssa_i;
 var $62=$48|1;
 var $63=(($32)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=(($32+4)|0);
 HEAP32[(($64)>>2)]=$36;
 var $__p_0_i=$_lcssa_i;label=11;break;
 case 11: 
 var $__p_0_i;
 assert($36 % 1 === 0);(_memcpy($__p_0_i, $name, $36)|0);
 var $65=(($__p_0_i+$36)|0);
 HEAP8[(($65)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h,$m,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=17;break; }
 case 12: 
 var $67=$32;
 var $68=HEAP8[(($67)>>0)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=14;break;}else{label=13;break;}
 case 13: 
 var $72=(($32+8)|0);
 var $73=HEAP32[(($72)>>2)];
 _free($73);
 label=14;break;
 case 14: 
 var $74=(($m+4)|0);
 var $75=(($m)|0);
 var $76=(($h)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+8)|0);
 var $storemerge2=0;label=15;break;
 case 15: 
 var $storemerge2;
 var $79=HEAP32[(($74)>>2)];
 var $80=HEAP32[(($75)>>2)];
 var $81=$79;
 var $82=$80;
 var $83=((($81)-($82))|0);
 var $84=(((($83|0))/(28))&-1);
 var $85=($storemerge2>>>0)<($84>>>0);
 if($85){label=16;break;}else{label=390;break;}
 case 16: 
 var $87=HEAP32[(($78)>>2)];
 var $88=(($87+$storemerge2)|0);
 var $89=(($data+$storemerge2)|0);
 var $90=HEAP8[(($89)>>0)];
 HEAP8[(($88)>>0)]=$90;
 var $91=((($storemerge2)+(1))|0);
 var $storemerge2=$91;label=15;break;
 case 17: 
 var $93$0 = ___cxa_find_matching_catch(); var $93$1 = tempRet0;
 var $94=$93$0;
 var $95=$93$1;
 var $96=$32;
 var $97=HEAP8[(($96)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $_041=$95;var $_042=$94;label=391;break;}else{label=18;break;}
 case 18: 
 var $101=(($32+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 var $_041=$95;var $_042=$94;label=391;break;
 case 19: 
 var $104=_strlen($name);
 var $105=($104>>>0)>4294967279;
 if($105){label=20;break;}else{label=21;break;}
 case 20: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 21: 
 var $108=($104>>>0)<11;
 if($108){label=22;break;}else{label=23;break;}
 case 22: 
 var $110=$104<<1;
 var $111=(($110)&255);
 var $112=$33;
 HEAP8[(($112)>>0)]=$111;
 var $113=$33;
 var $114=(($113+1)|0);
 var $__p_0_i5=$114;label=28;break;
 case 23: 
 var $115=((($104)+(16))|0);
 var $116=$115&-16;
 var $117=($116|0)==0;
 var $_size_i7=($117?1:$116);
 var $118=_malloc($_size_i7);
 var $119=($118|0)==0;
 if($119){label=24;break;}else{var $_lcssa_i9=$118;label=27;break;}
 case 24: 
 var $120=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $121=($120|0)==0;
 if($121){label=26;break;}else{label=25;break;}
 case 25: 
 var $123=$120;
 FUNCTION_TABLE[$123]();
 var $124=_malloc($_size_i7);
 var $125=($124|0)==0;
 if($125){label=24;break;}else{var $_lcssa_i9=$124;label=27;break;}
 case 26: 
 var $127=___cxa_allocate_exception(4);
 var $128=$127;
 HEAP32[(($128)>>2)]=15192;
 ___cxa_throw($127,26096,(782));
 throw "Reached an unreachable!";
 case 27: 
 var $_lcssa_i9;
 var $129=(($33+8)|0);
 HEAP32[(($129)>>2)]=$_lcssa_i9;
 var $130=$116|1;
 var $131=(($33)|0);
 HEAP32[(($131)>>2)]=$130;
 var $132=(($33+4)|0);
 HEAP32[(($132)>>2)]=$104;
 var $__p_0_i5=$_lcssa_i9;label=28;break;
 case 28: 
 var $__p_0_i5;
 assert($104 % 1 === 0);(_memcpy($__p_0_i5, $name, $104)|0);
 var $133=(($__p_0_i5+$104)|0);
 HEAP8[(($133)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1,$m,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=34;break; }
 case 29: 
 var $135=$33;
 var $136=HEAP8[(($135)>>0)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=31;break;}else{label=30;break;}
 case 30: 
 var $140=(($33+8)|0);
 var $141=HEAP32[(($140)>>2)];
 _free($141);
 label=31;break;
 case 31: 
 var $142=(($m+4)|0);
 var $143=(($m)|0);
 var $_pre=HEAP32[(($142)>>2)];
 var $_pre72=HEAP32[(($143)>>2)];
 var $storemerge=0;label=32;break;
 case 32: 
 var $storemerge;
 var $144=$_pre;
 var $145=$_pre72;
 var $146=((($144)-($145))|0);
 var $147=(((($146|0))/(28))&-1);
 var $148=($storemerge>>>0)<($147>>>0);
 if($148){label=33;break;}else{label=36;break;}
 case 33: 
 var $150=((($storemerge)+(1))|0);
 var $storemerge=$150;label=32;break;
 case 34: 
 var $152$0 = ___cxa_find_matching_catch(); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=$33;
 var $156=HEAP8[(($155)>>0)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){var $_041=$154;var $_042=$153;label=391;break;}else{label=35;break;}
 case 35: 
 var $160=(($33+8)|0);
 var $161=HEAP32[(($160)>>2)];
 _free($161);
 var $_041=$154;var $_042=$153;label=391;break;
 case 36: 
 var $163=(($pa+4)|0);
 var $164=$163;
 var $storemerge_i=0;label=37;break;
 case 37: 
 var $storemerge_i;
 var $166=($storemerge_i>>>0)<3;
 if($166){label=38;break;}else{label=39;break;}
 case 38: 
 var $168=(($164+($storemerge_i<<2))|0);
 HEAP32[(($168)>>2)]=0;
 var $169=((($storemerge_i)+(1))|0);
 var $storemerge_i=$169;label=37;break;
 case 39: 
 var $170=(($pa+4)|0);
 var $171=_strlen($name);
 var $172=($171>>>0)>4294967279;
 if($172){label=40;break;}else{label=42;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=72;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $175=($171>>>0)<11;
 if($175){label=43;break;}else{label=44;break;}
 case 43: 
 var $177=$171<<1;
 var $178=(($177)&255);
 var $179=$34;
 HEAP8[(($179)>>0)]=$178;
 var $180=$34;
 var $181=(($180+1)|0);
 var $__p_0_i15=$181;label=51;break;
 case 44: 
 var $182=((($171)+(16))|0);
 var $183=$182&-16;
 var $184=($183|0)==0;
 var $_size_i19=($184?1:$183);
 var $185=_malloc($_size_i19);
 var $186=($185|0)==0;
 if($186){label=45;break;}else{var $_lcssa_i21=$185;label=50;break;}
 case 45: 
 var $187=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $188=($187|0)==0;
 if($188){label=48;break;}else{label=46;break;}
 case 46: 
 var $190=$187;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$190]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=71;break; }
 case 47: 
 var $191=_malloc($_size_i19);
 var $192=($191|0)==0;
 if($192){label=45;break;}else{var $_lcssa_i21=$191;label=50;break;}
 case 48: 
 var $194=___cxa_allocate_exception(4);
 var $195=$194;
 HEAP32[(($195)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($194,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=72;break; }
 case 49: 
 throw "Reached an unreachable!";
 case 50: 
 var $_lcssa_i21;
 var $196=(($34+8)|0);
 HEAP32[(($196)>>2)]=$_lcssa_i21;
 var $197=$183|1;
 var $198=(($34)|0);
 HEAP32[(($198)>>2)]=$197;
 var $199=(($34+4)|0);
 HEAP32[(($199)>>2)]=$171;
 var $__p_0_i15=$_lcssa_i21;label=51;break;
 case 51: 
 var $__p_0_i15;
 assert($171 % 1 === 0);(_memcpy($__p_0_i15, $name, $171)|0);
 var $201=(($__p_0_i15+$171)|0);
 HEAP8[(($201)>>0)]=0;
 var $202=$170;
 var $203=HEAP8[(($202)>>0)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=53;break;}else{label=52;break;}
 case 52: 
 var $207=(($pa+12)|0);
 var $208=HEAP32[(($207)>>2)];
 HEAP8[(($208)>>0)]=0;
 var $209=(($pa+8)|0);
 HEAP32[(($209)>>2)]=0;
 label=54;break;
 case 53: 
 var $211=$170;
 var $212=(($211+1)|0);
 HEAP8[(($212)>>0)]=0;
 HEAP8[(($202)>>0)]=0;
 label=54;break;
 case 54: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($170,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=55;break; }
 case 55: 
 var $214$0 = ___cxa_find_matching_catch(0); var $214$1 = tempRet0;
 var $215=$214$0;
 ___clang_call_terminate($215);
 throw "Reached an unreachable!";
 case 56: 
 var $216=$34;
 assert(12 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];HEAP32[((($202)+(8))>>2)]=HEAP32[((($216)+(8))>>2)];
 var $217=$34;
 var $storemerge1=0;label=57;break;
 case 57: 
 var $storemerge1;
 var $219=($storemerge1>>>0)<3;
 if($219){label=58;break;}else{label=59;break;}
 case 58: 
 var $221=(($217+($storemerge1<<2))|0);
 HEAP32[(($221)>>2)]=0;
 var $222=((($storemerge1)+(1))|0);
 var $storemerge1=$222;label=57;break;
 case 59: 
 var $223=HEAP8[(($216)>>0)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=61;break;}else{label=60;break;}
 case 60: 
 var $227=(($34+8)|0);
 var $228=HEAP32[(($227)>>2)];
 _free($228);
 label=61;break;
 case 61: 
 var $229=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($31,$229,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=72;break; }
 case 62: 
 var $231=(($31)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+16)|0);
 var $234=(($233)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($pa)|0);
 HEAP32[(($236)>>2)]=$235;
 var $237=(($232+20)|0);
 var $238=($pa|0)==($233|0);
 if($238){label=67;break;}else{label=63;break;}
 case 63: 
 var $240=$237;
 var $241=HEAP8[(($240)>>0)];
 var $242=$241&1;
 var $243=(($242<<24)>>24)==0;
 if($243){label=65;break;}else{label=64;break;}
 case 64: 
 var $245=(($232+28)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($232+24)|0);
 var $248=HEAP32[(($247)>>2)];
 var $255=$248;var $254=$246;label=66;break;
 case 65: 
 var $250=$237;
 var $251=(($250+1)|0);
 var $252=($241&255);
 var $253=$252>>>1;
 var $255=$253;var $254=$251;label=66;break;
 case 66: 
 var $254;
 var $255;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($170,$254,$255) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=72;break; }
 case 67: 
 var $257=(($pa+16)|0);
 var $258=(($232+32)|0);
 var $259=$257;
 var $260=$258;
 assert(12 % 1 === 0);HEAP32[(($259)>>2)]=HEAP32[(($260)>>2)];HEAP32[((($259)+(4))>>2)]=HEAP32[((($260)+(4))>>2)];HEAP32[((($259)+(8))>>2)]=HEAP32[((($260)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($30,$229,$232);
 var $261=(($pa+20)|0);
 HEAP32[(($261)>>2)]=1;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($29,$229,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=72;break; }
 case 68: 
 var $263=(($29+4)|0);
 var $264=HEAP8[(($263)>>0)];
 var $265=$264&1;
 var $266=(($265<<24)>>24)==0;
 if($266){label=69;break;}else{label=75;break;}
 case 69: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=72;break; }
 case 70: 
 throw "Reached an unreachable!";
 case 71: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=73;break;
 case 72: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=73;break;
 case 73: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $270=$lpad_phi$0;
 var $271=$lpad_phi$1;
 var $272=$170;
 var $273=HEAP8[(($272)>>0)];
 var $274=$273&1;
 var $275=(($274<<24)>>24)==0;
 if($275){var $_041=$271;var $_042=$270;label=391;break;}else{label=74;break;}
 case 74: 
 var $277=(($pa+12)|0);
 var $278=HEAP32[(($277)>>2)];
 _free($278);
 var $_041=$271;var $_042=$270;label=391;break;
 case 75: 
 var $280=HEAP8[(($202)>>0)];
 var $281=$280&1;
 var $282=(($281<<24)>>24)==0;
 if($282){label=390;break;}else{label=76;break;}
 case 76: 
 var $284=(($pa+12)|0);
 var $285=HEAP32[(($284)>>2)];
 _free($285);
 label=390;break;
 case 77: 
 var $287=$25;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $288=$26;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $289=$h_i;
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $290=$27;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $291=$h1_i;
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;

 var $292=$28;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $293=$pa_i;
 var $$etemp$6$0=28;
 var $$etemp$6$1=0;

 var $294=$19;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $295=$20;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $296=$21;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $297=$h_i_i;
 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $298=$22;
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $299=$h1_i_i;
 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $300=$23;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $301=$pa_i_i;
 var $$etemp$14$0=28;
 var $$etemp$14$1=0;

 var $302=$24;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $303=($s|0)==8;
 if($303){label=78;break;}else{label=95;break;}
 case 78: 
 var $305=_strlen($name);
 var $306=($305>>>0)>4294967279;
 if($306){label=79;break;}else{label=80;break;}
 case 79: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 80: 
 var $309=($305>>>0)<11;
 if($309){label=81;break;}else{label=82;break;}
 case 81: 
 var $311=$305<<1;
 var $312=(($311)&255);
 HEAP8[(($298)>>0)]=$312;
 var $313=$22;
 var $314=(($313+1)|0);
 var $__p_0_i_i_i=$314;label=87;break;
 case 82: 
 var $315=((($305)+(16))|0);
 var $316=$315&-16;
 var $317=($316|0)==0;
 var $_size_i_i_i=($317?1:$316);
 var $318=_malloc($_size_i_i_i);
 var $319=($318|0)==0;
 if($319){label=83;break;}else{var $_lcssa_i_i_i=$318;label=86;break;}
 case 83: 
 var $320=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $321=($320|0)==0;
 if($321){label=85;break;}else{label=84;break;}
 case 84: 
 var $323=$320;
 FUNCTION_TABLE[$323]();
 var $324=_malloc($_size_i_i_i);
 var $325=($324|0)==0;
 if($325){label=83;break;}else{var $_lcssa_i_i_i=$324;label=86;break;}
 case 85: 
 var $327=___cxa_allocate_exception(4);
 var $328=$327;
 HEAP32[(($328)>>2)]=15192;
 ___cxa_throw($327,26096,(782));
 throw "Reached an unreachable!";
 case 86: 
 var $_lcssa_i_i_i;
 var $329=(($22+8)|0);
 HEAP32[(($329)>>2)]=$_lcssa_i_i_i;
 var $330=$316|1;
 var $331=(($22)|0);
 HEAP32[(($331)>>2)]=$330;
 var $332=(($22+4)|0);
 HEAP32[(($332)>>2)]=$305;
 var $__p_0_i_i_i=$_lcssa_i_i_i;label=87;break;
 case 87: 
 var $__p_0_i_i_i;
 assert($305 % 1 === 0);(_memcpy($__p_0_i_i_i, $name, $305)|0);
 var $333=(($__p_0_i_i_i+$305)|0);
 HEAP8[(($333)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i,$m,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=93;break; }
 case 88: 
 var $335=HEAP8[(($298)>>0)];
 var $336=$335&1;
 var $337=(($336<<24)>>24)==0;
 if($337){label=90;break;}else{label=89;break;}
 case 89: 
 var $339=(($22+8)|0);
 var $340=HEAP32[(($339)>>2)];
 _free($340);
 label=90;break;
 case 90: 
 var $341=(($m+4)|0);
 var $342=(($m)|0);
 var $343=(($h_i_i)|0);
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+8)|0);
 var $346=$data;
 var $storemerge2_i_i=0;label=91;break;
 case 91: 
 var $storemerge2_i_i;
 var $347=HEAP32[(($341)>>2)];
 var $348=HEAP32[(($342)>>2)];
 var $349=$347;
 var $350=$348;
 var $351=((($349)-($350))|0);
 var $352=(((($351|0))/(28))&-1);
 var $353=($storemerge2_i_i>>>0)<($352>>>0);
 if($353){label=92;break;}else{label=390;break;}
 case 92: 
 var $355=HEAP32[(($345)>>2)];
 var $356=(($355+($storemerge2_i_i<<3))|0);
 var $357=(($346+($storemerge2_i_i<<3))|0);
 var $358=$357;
 var $359=$356;
 var $ld$16$0=(($358)|0);
 var $360$0=((((HEAPU8[(($ld$16$0)>>0)])|(HEAPU8[((($ld$16$0)+(1))>>0)]<<8)|(HEAPU8[((($ld$16$0)+(2))>>0)]<<16)|(HEAPU8[((($ld$16$0)+(3))>>0)]<<24))|0));
 var $ld$17$1=(($358+4)|0);
 var $360$1=((((HEAPU8[(($ld$17$1)>>0)])|(HEAPU8[((($ld$17$1)+(1))>>0)]<<8)|(HEAPU8[((($ld$17$1)+(2))>>0)]<<16)|(HEAPU8[((($ld$17$1)+(3))>>0)]<<24))|0));
 var $st$18$0=(($359)|0);
 tempBigInt=$360$0;HEAP8[(($st$18$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$19$1=(($359+4)|0);
 tempBigInt=$360$1;HEAP8[(($st$19$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(3))>>0)]=tempBigInt&0xff;
 var $361=((($storemerge2_i_i)+(1))|0);
 var $storemerge2_i_i=$361;label=91;break;
 case 93: 
 var $363$0 = ___cxa_find_matching_catch(); var $363$1 = tempRet0;
 var $364=$363$0;
 var $365=$363$1;
 var $366=HEAP8[(($298)>>0)];
 var $367=$366&1;
 var $368=(($367<<24)>>24)==0;
 if($368){var $_043=$364;var $_044=$365;label=389;break;}else{label=94;break;}
 case 94: 
 var $370=(($22+8)|0);
 var $371=HEAP32[(($370)>>2)];
 _free($371);
 var $_043=$364;var $_044=$365;label=389;break;
 case 95: 
 var $373=($s>>>0)<8;
 if($373){label=96;break;}else{label=154;break;}
 case 96: 
 var $375=(((8)-($s))|0);
 var $376=_strlen($name);
 var $377=($376>>>0)>4294967279;
 if($377){label=97;break;}else{label=98;break;}
 case 97: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 98: 
 var $380=($376>>>0)<11;
 if($380){label=99;break;}else{label=100;break;}
 case 99: 
 var $382=$376<<1;
 var $383=(($382)&255);
 HEAP8[(($300)>>0)]=$383;
 var $384=$23;
 var $385=(($384+1)|0);
 var $__p_0_i5_i_i=$385;label=105;break;
 case 100: 
 var $386=((($376)+(16))|0);
 var $387=$386&-16;
 var $388=($387|0)==0;
 var $_size_i7_i_i=($388?1:$387);
 var $389=_malloc($_size_i7_i_i);
 var $390=($389|0)==0;
 if($390){label=101;break;}else{var $_lcssa_i9_i_i=$389;label=104;break;}
 case 101: 
 var $391=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $392=($391|0)==0;
 if($392){label=103;break;}else{label=102;break;}
 case 102: 
 var $394=$391;
 FUNCTION_TABLE[$394]();
 var $395=_malloc($_size_i7_i_i);
 var $396=($395|0)==0;
 if($396){label=101;break;}else{var $_lcssa_i9_i_i=$395;label=104;break;}
 case 103: 
 var $398=___cxa_allocate_exception(4);
 var $399=$398;
 HEAP32[(($399)>>2)]=15192;
 ___cxa_throw($398,26096,(782));
 throw "Reached an unreachable!";
 case 104: 
 var $_lcssa_i9_i_i;
 var $400=(($23+8)|0);
 HEAP32[(($400)>>2)]=$_lcssa_i9_i_i;
 var $401=$387|1;
 var $402=(($23)|0);
 HEAP32[(($402)>>2)]=$401;
 var $403=(($23+4)|0);
 HEAP32[(($403)>>2)]=$376;
 var $__p_0_i5_i_i=$_lcssa_i9_i_i;label=105;break;
 case 105: 
 var $__p_0_i5_i_i;
 assert($376 % 1 === 0);(_memcpy($__p_0_i5_i_i, $name, $376)|0);
 var $404=(($__p_0_i5_i_i+$376)|0);
 HEAP8[(($404)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i,$m,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 var $406=HEAP8[(($300)>>0)];
 var $407=$406&1;
 var $408=(($407<<24)>>24)==0;
 if($408){label=108;break;}else{label=107;break;}
 case 107: 
 var $410=(($23+8)|0);
 var $411=HEAP32[(($410)>>2)];
 _free($411);
 label=108;break;
 case 108: 
 var $412=(($m+4)|0);
 var $413=(($m)|0);
 var $414=(($h1_i_i)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($415+8)|0);
 var $417=$data;
 var $storemerge_i30_i=0;label=109;break;
 case 109: 
 var $storemerge_i30_i;
 var $418=HEAP32[(($412)>>2)];
 var $419=HEAP32[(($413)>>2)];
 var $420=$418;
 var $421=$419;
 var $422=((($420)-($421))|0);
 var $423=(((($422|0))/(28))&-1);
 var $424=($storemerge_i30_i>>>0)<($423>>>0);
 if($424){label=110;break;}else{label=113;break;}
 case 110: 
 var $426=HEAP32[(($416)>>2)];
 var $427=(($426+($storemerge_i30_i<<3))|0);
 var $428=(($417+($storemerge_i30_i<<3))|0);
 assert($s % 1 === 0);(_memcpy($427, $428, $s)|0);
 var $429=((($storemerge_i30_i)+(1))|0);
 var $storemerge_i30_i=$429;label=109;break;
 case 111: 
 var $431$0 = ___cxa_find_matching_catch(); var $431$1 = tempRet0;
 var $432=$431$0;
 var $433=$431$1;
 var $434=HEAP8[(($300)>>0)];
 var $435=$434&1;
 var $436=(($435<<24)>>24)==0;
 if($436){var $_043=$432;var $_044=$433;label=389;break;}else{label=112;break;}
 case 112: 
 var $438=(($23+8)|0);
 var $439=HEAP32[(($438)>>2)];
 _free($439);
 var $_043=$432;var $_044=$433;label=389;break;
 case 113: 
 var $441=(($pa_i_i+4)|0);
 var $442=$441;
 var $storemerge_i_i_i=0;label=114;break;
 case 114: 
 var $storemerge_i_i_i;
 var $444=($storemerge_i_i_i>>>0)<3;
 if($444){label=115;break;}else{label=116;break;}
 case 115: 
 var $446=(($442+($storemerge_i_i_i<<2))|0);
 HEAP32[(($446)>>2)]=0;
 var $447=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$447;label=114;break;
 case 116: 
 var $448=(($pa_i_i+4)|0);
 var $449=_strlen($name);
 var $450=($449>>>0)>4294967279;
 if($450){label=117;break;}else{label=119;break;}
 case 117: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=149;break; }
 case 118: 
 throw "Reached an unreachable!";
 case 119: 
 var $453=($449>>>0)<11;
 if($453){label=120;break;}else{label=121;break;}
 case 120: 
 var $455=$449<<1;
 var $456=(($455)&255);
 HEAP8[(($302)>>0)]=$456;
 var $457=$24;
 var $458=(($457+1)|0);
 var $__p_0_i15_i_i=$458;label=128;break;
 case 121: 
 var $459=((($449)+(16))|0);
 var $460=$459&-16;
 var $461=($460|0)==0;
 var $_size_i19_i_i=($461?1:$460);
 var $462=_malloc($_size_i19_i_i);
 var $463=($462|0)==0;
 if($463){label=122;break;}else{var $_lcssa_i21_i_i=$462;label=127;break;}
 case 122: 
 var $464=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $465=($464|0)==0;
 if($465){label=125;break;}else{label=123;break;}
 case 123: 
 var $467=$464;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$467]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=148;break; }
 case 124: 
 var $468=_malloc($_size_i19_i_i);
 var $469=($468|0)==0;
 if($469){label=122;break;}else{var $_lcssa_i21_i_i=$468;label=127;break;}
 case 125: 
 var $471=___cxa_allocate_exception(4);
 var $472=$471;
 HEAP32[(($472)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($471,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=149;break; }
 case 126: 
 throw "Reached an unreachable!";
 case 127: 
 var $_lcssa_i21_i_i;
 var $473=(($24+8)|0);
 HEAP32[(($473)>>2)]=$_lcssa_i21_i_i;
 var $474=$460|1;
 var $475=(($24)|0);
 HEAP32[(($475)>>2)]=$474;
 var $476=(($24+4)|0);
 HEAP32[(($476)>>2)]=$449;
 var $__p_0_i15_i_i=$_lcssa_i21_i_i;label=128;break;
 case 128: 
 var $__p_0_i15_i_i;
 assert($449 % 1 === 0);(_memcpy($__p_0_i15_i_i, $name, $449)|0);
 var $477=(($__p_0_i15_i_i+$449)|0);
 HEAP8[(($477)>>0)]=0;
 var $478=$448;
 var $479=HEAP8[(($478)>>0)];
 var $480=$479&1;
 var $481=(($480<<24)>>24)==0;
 if($481){label=130;break;}else{label=129;break;}
 case 129: 
 var $483=(($pa_i_i+12)|0);
 var $484=HEAP32[(($483)>>2)];
 HEAP8[(($484)>>0)]=0;
 var $485=(($pa_i_i+8)|0);
 HEAP32[(($485)>>2)]=0;
 label=131;break;
 case 130: 
 var $487=$448;
 var $488=(($487+1)|0);
 HEAP8[(($488)>>0)]=0;
 HEAP8[(($478)>>0)]=0;
 label=131;break;
 case 131: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($448,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=132;break; }
 case 132: 
 var $490$0 = ___cxa_find_matching_catch(0); var $490$1 = tempRet0;
 var $491=$490$0;
 ___clang_call_terminate($491);
 throw "Reached an unreachable!";
 case 133: 
 assert(12 % 1 === 0);HEAP32[(($478)>>2)]=HEAP32[(($302)>>2)];HEAP32[((($478)+(4))>>2)]=HEAP32[((($302)+(4))>>2)];HEAP32[((($478)+(8))>>2)]=HEAP32[((($302)+(8))>>2)];
 var $492=$24;
 var $storemerge1_i_i=0;label=134;break;
 case 134: 
 var $storemerge1_i_i;
 var $494=($storemerge1_i_i>>>0)<3;
 if($494){label=135;break;}else{label=136;break;}
 case 135: 
 var $496=(($492+($storemerge1_i_i<<2))|0);
 HEAP32[(($496)>>2)]=0;
 var $497=((($storemerge1_i_i)+(1))|0);
 var $storemerge1_i_i=$497;label=134;break;
 case 136: 
 var $498=HEAP8[(($302)>>0)];
 var $499=$498&1;
 var $500=(($499<<24)>>24)==0;
 if($500){label=138;break;}else{label=137;break;}
 case 137: 
 var $502=(($24+8)|0);
 var $503=HEAP32[(($502)>>2)];
 _free($503);
 label=138;break;
 case 138: 
 var $504=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($21,$504,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=149;break; }
 case 139: 
 var $505=(($21)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=(($506+16)|0);
 var $508=(($507)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(($pa_i_i)|0);
 HEAP32[(($510)>>2)]=$509;
 var $511=(($506+20)|0);
 var $512=($pa_i_i|0)==($507|0);
 if($512){label=144;break;}else{label=140;break;}
 case 140: 
 var $514=$511;
 var $515=HEAP8[(($514)>>0)];
 var $516=$515&1;
 var $517=(($516<<24)>>24)==0;
 if($517){label=142;break;}else{label=141;break;}
 case 141: 
 var $519=(($506+28)|0);
 var $520=HEAP32[(($519)>>2)];
 var $521=(($506+24)|0);
 var $522=HEAP32[(($521)>>2)];
 var $529=$522;var $528=$520;label=143;break;
 case 142: 
 var $524=$511;
 var $525=(($524+1)|0);
 var $526=($515&255);
 var $527=$526>>>1;
 var $529=$527;var $528=$525;label=143;break;
 case 143: 
 var $528;
 var $529;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($448,$528,$529) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=144;break; } else { label=149;break; }
 case 144: 
 var $530=(($pa_i_i+16)|0);
 var $531=(($506+32)|0);
 var $532=$530;
 var $533=$531;
 assert(12 % 1 === 0);HEAP32[(($532)>>2)]=HEAP32[(($533)>>2)];HEAP32[((($532)+(4))>>2)]=HEAP32[((($533)+(4))>>2)];HEAP32[((($532)+(8))>>2)]=HEAP32[((($533)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($20,$504,$506);
 var $534=(($pa_i_i+20)|0);
 HEAP32[(($534)>>2)]=$375;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($19,$504,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=149;break; }
 case 145: 
 var $535=(($19+4)|0);
 var $536=HEAP8[(($535)>>0)];
 var $537=$536&1;
 var $538=(($537<<24)>>24)==0;
 if($538){label=146;break;}else{label=152;break;}
 case 146: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=149;break; }
 case 147: 
 throw "Reached an unreachable!";
 case 148: 
 var $lpad_loopexit54$0 = ___cxa_find_matching_catch(); var $lpad_loopexit54$1 = tempRet0;
 var $lpad_phi56$1=$lpad_loopexit54$1;var $lpad_phi56$0=$lpad_loopexit54$0;label=150;break;
 case 149: 
 var $lpad_nonloopexit55$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit55$1 = tempRet0;
 var $lpad_phi56$1=$lpad_nonloopexit55$1;var $lpad_phi56$0=$lpad_nonloopexit55$0;label=150;break;
 case 150: 
 var $lpad_phi56$0;
 var $lpad_phi56$1;
 var $542=$lpad_phi56$0;
 var $543=$lpad_phi56$1;
 var $544=$448;
 var $545=HEAP8[(($544)>>0)];
 var $546=$545&1;
 var $547=(($546<<24)>>24)==0;
 if($547){var $_043=$542;var $_044=$543;label=389;break;}else{label=151;break;}
 case 151: 
 var $549=(($pa_i_i+12)|0);
 var $550=HEAP32[(($549)>>2)];
 _free($550);
 var $_043=$542;var $_044=$543;label=389;break;
 case 152: 
 var $552=HEAP8[(($478)>>0)];
 var $553=$552&1;
 var $554=(($553<<24)>>24)==0;
 if($554){label=390;break;}else{label=153;break;}
 case 153: 
 var $556=(($pa_i_i+12)|0);
 var $557=HEAP32[(($556)>>2)];
 _free($557);
 label=390;break;
 case 154: 
 var $559=$13;
 var $$etemp$20$0=8;
 var $$etemp$20$1=0;

 var $560=$14;
 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $561=$15;
 var $$etemp$22$0=4;
 var $$etemp$22$1=0;

 var $562=$h_i_i_i;
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $563=$16;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $564=$h1_i_i_i;
 var $$etemp$25$0=8;
 var $$etemp$25$1=0;

 var $565=$17;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $566=$pa_i_i_i;
 var $$etemp$27$0=28;
 var $$etemp$27$1=0;

 var $567=$18;
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $568=($s|0)==16;
 if($568){label=155;break;}else{label=172;break;}
 case 155: 
 var $570=_strlen($name);
 var $571=($570>>>0)>4294967279;
 if($571){label=156;break;}else{label=157;break;}
 case 156: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 157: 
 var $574=($570>>>0)<11;
 if($574){label=158;break;}else{label=159;break;}
 case 158: 
 var $576=$570<<1;
 var $577=(($576)&255);
 HEAP8[(($563)>>0)]=$577;
 var $578=$16;
 var $579=(($578+1)|0);
 var $__p_0_i_i_i_i=$579;label=164;break;
 case 159: 
 var $580=((($570)+(16))|0);
 var $581=$580&-16;
 var $582=($581|0)==0;
 var $_size_i_i_i_i=($582?1:$581);
 var $583=_malloc($_size_i_i_i_i);
 var $584=($583|0)==0;
 if($584){label=160;break;}else{var $_lcssa_i_i_i_i=$583;label=163;break;}
 case 160: 
 var $585=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $586=($585|0)==0;
 if($586){label=162;break;}else{label=161;break;}
 case 161: 
 var $588=$585;
 FUNCTION_TABLE[$588]();
 var $589=_malloc($_size_i_i_i_i);
 var $590=($589|0)==0;
 if($590){label=160;break;}else{var $_lcssa_i_i_i_i=$589;label=163;break;}
 case 162: 
 var $592=___cxa_allocate_exception(4);
 var $593=$592;
 HEAP32[(($593)>>2)]=15192;
 ___cxa_throw($592,26096,(782));
 throw "Reached an unreachable!";
 case 163: 
 var $_lcssa_i_i_i_i;
 var $594=(($16+8)|0);
 HEAP32[(($594)>>2)]=$_lcssa_i_i_i_i;
 var $595=$581|1;
 var $596=(($16)|0);
 HEAP32[(($596)>>2)]=$595;
 var $597=(($16+4)|0);
 HEAP32[(($597)>>2)]=$570;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=164;break;
 case 164: 
 var $__p_0_i_i_i_i;
 assert($570 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $name, $570)|0);
 var $598=(($__p_0_i_i_i_i+$570)|0);
 HEAP8[(($598)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i,$m,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { label=170;break; }
 case 165: 
 var $600=HEAP8[(($563)>>0)];
 var $601=$600&1;
 var $602=(($601<<24)>>24)==0;
 if($602){label=167;break;}else{label=166;break;}
 case 166: 
 var $604=(($16+8)|0);
 var $605=HEAP32[(($604)>>2)];
 _free($605);
 label=167;break;
 case 167: 
 var $606=(($m+4)|0);
 var $607=(($m)|0);
 var $608=(($h_i_i_i)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=(($609+8)|0);
 var $611=$data;
 var $storemerge2_i_i_i=0;label=168;break;
 case 168: 
 var $storemerge2_i_i_i;
 var $612=HEAP32[(($606)>>2)];
 var $613=HEAP32[(($607)>>2)];
 var $614=$612;
 var $615=$613;
 var $616=((($614)-($615))|0);
 var $617=(((($616|0))/(28))&-1);
 var $618=($storemerge2_i_i_i>>>0)<($617>>>0);
 if($618){label=169;break;}else{label=390;break;}
 case 169: 
 var $620=HEAP32[(($610)>>2)];
 var $621=(($620+($storemerge2_i_i_i<<4))|0);
 var $622=(($611+($storemerge2_i_i_i<<4))|0);
 assert(16 % 1 === 0);(_memcpy($621, $622, 16)|0);
 var $623=((($storemerge2_i_i_i)+(1))|0);
 var $storemerge2_i_i_i=$623;label=168;break;
 case 170: 
 var $625$0 = ___cxa_find_matching_catch(); var $625$1 = tempRet0;
 var $626=$625$0;
 var $627=$625$1;
 var $628=HEAP8[(($563)>>0)];
 var $629=$628&1;
 var $630=(($629<<24)>>24)==0;
 if($630){var $_039=$626;var $_040=$627;label=388;break;}else{label=171;break;}
 case 171: 
 var $632=(($16+8)|0);
 var $633=HEAP32[(($632)>>2)];
 _free($633);
 var $_039=$626;var $_040=$627;label=388;break;
 case 172: 
 var $635=($s>>>0)<16;
 if($635){label=173;break;}else{label=231;break;}
 case 173: 
 var $637=(((16)-($s))|0);
 var $638=_strlen($name);
 var $639=($638>>>0)>4294967279;
 if($639){label=174;break;}else{label=175;break;}
 case 174: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 175: 
 var $642=($638>>>0)<11;
 if($642){label=176;break;}else{label=177;break;}
 case 176: 
 var $644=$638<<1;
 var $645=(($644)&255);
 HEAP8[(($565)>>0)]=$645;
 var $646=$17;
 var $647=(($646+1)|0);
 var $__p_0_i5_i_i_i=$647;label=182;break;
 case 177: 
 var $648=((($638)+(16))|0);
 var $649=$648&-16;
 var $650=($649|0)==0;
 var $_size_i7_i_i_i=($650?1:$649);
 var $651=_malloc($_size_i7_i_i_i);
 var $652=($651|0)==0;
 if($652){label=178;break;}else{var $_lcssa_i9_i_i_i=$651;label=181;break;}
 case 178: 
 var $653=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $654=($653|0)==0;
 if($654){label=180;break;}else{label=179;break;}
 case 179: 
 var $656=$653;
 FUNCTION_TABLE[$656]();
 var $657=_malloc($_size_i7_i_i_i);
 var $658=($657|0)==0;
 if($658){label=178;break;}else{var $_lcssa_i9_i_i_i=$657;label=181;break;}
 case 180: 
 var $660=___cxa_allocate_exception(4);
 var $661=$660;
 HEAP32[(($661)>>2)]=15192;
 ___cxa_throw($660,26096,(782));
 throw "Reached an unreachable!";
 case 181: 
 var $_lcssa_i9_i_i_i;
 var $662=(($17+8)|0);
 HEAP32[(($662)>>2)]=$_lcssa_i9_i_i_i;
 var $663=$649|1;
 var $664=(($17)|0);
 HEAP32[(($664)>>2)]=$663;
 var $665=(($17+4)|0);
 HEAP32[(($665)>>2)]=$638;
 var $__p_0_i5_i_i_i=$_lcssa_i9_i_i_i;label=182;break;
 case 182: 
 var $__p_0_i5_i_i_i;
 assert($638 % 1 === 0);(_memcpy($__p_0_i5_i_i_i, $name, $638)|0);
 var $666=(($__p_0_i5_i_i_i+$638)|0);
 HEAP8[(($666)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i,$m,$17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=188;break; }
 case 183: 
 var $668=HEAP8[(($565)>>0)];
 var $669=$668&1;
 var $670=(($669<<24)>>24)==0;
 if($670){label=185;break;}else{label=184;break;}
 case 184: 
 var $672=(($17+8)|0);
 var $673=HEAP32[(($672)>>2)];
 _free($673);
 label=185;break;
 case 185: 
 var $674=(($m+4)|0);
 var $675=(($m)|0);
 var $676=(($h1_i_i_i)|0);
 var $677=HEAP32[(($676)>>2)];
 var $678=(($677+8)|0);
 var $679=$data;
 var $storemerge_i30_i_i=0;label=186;break;
 case 186: 
 var $storemerge_i30_i_i;
 var $680=HEAP32[(($674)>>2)];
 var $681=HEAP32[(($675)>>2)];
 var $682=$680;
 var $683=$681;
 var $684=((($682)-($683))|0);
 var $685=(((($684|0))/(28))&-1);
 var $686=($storemerge_i30_i_i>>>0)<($685>>>0);
 if($686){label=187;break;}else{label=190;break;}
 case 187: 
 var $688=HEAP32[(($678)>>2)];
 var $689=(($688+($storemerge_i30_i_i<<4))|0);
 var $690=(($679+($storemerge_i30_i_i<<4))|0);
 assert($s % 1 === 0);(_memcpy($689, $690, $s)|0);
 var $691=((($storemerge_i30_i_i)+(1))|0);
 var $storemerge_i30_i_i=$691;label=186;break;
 case 188: 
 var $693$0 = ___cxa_find_matching_catch(); var $693$1 = tempRet0;
 var $694=$693$0;
 var $695=$693$1;
 var $696=HEAP8[(($565)>>0)];
 var $697=$696&1;
 var $698=(($697<<24)>>24)==0;
 if($698){var $_039=$694;var $_040=$695;label=388;break;}else{label=189;break;}
 case 189: 
 var $700=(($17+8)|0);
 var $701=HEAP32[(($700)>>2)];
 _free($701);
 var $_039=$694;var $_040=$695;label=388;break;
 case 190: 
 var $703=(($pa_i_i_i+4)|0);
 var $704=$703;
 var $storemerge_i_i_i_i=0;label=191;break;
 case 191: 
 var $storemerge_i_i_i_i;
 var $706=($storemerge_i_i_i_i>>>0)<3;
 if($706){label=192;break;}else{label=193;break;}
 case 192: 
 var $708=(($704+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($708)>>2)]=0;
 var $709=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$709;label=191;break;
 case 193: 
 var $710=(($pa_i_i_i+4)|0);
 var $711=_strlen($name);
 var $712=($711>>>0)>4294967279;
 if($712){label=194;break;}else{label=196;break;}
 case 194: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { label=226;break; }
 case 195: 
 throw "Reached an unreachable!";
 case 196: 
 var $715=($711>>>0)<11;
 if($715){label=197;break;}else{label=198;break;}
 case 197: 
 var $717=$711<<1;
 var $718=(($717)&255);
 HEAP8[(($567)>>0)]=$718;
 var $719=$18;
 var $720=(($719+1)|0);
 var $__p_0_i15_i_i_i=$720;label=205;break;
 case 198: 
 var $721=((($711)+(16))|0);
 var $722=$721&-16;
 var $723=($722|0)==0;
 var $_size_i19_i_i_i=($723?1:$722);
 var $724=_malloc($_size_i19_i_i_i);
 var $725=($724|0)==0;
 if($725){label=199;break;}else{var $_lcssa_i21_i_i_i=$724;label=204;break;}
 case 199: 
 var $726=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $727=($726|0)==0;
 if($727){label=202;break;}else{label=200;break;}
 case 200: 
 var $729=$726;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$729]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=201;break; } else { label=225;break; }
 case 201: 
 var $730=_malloc($_size_i19_i_i_i);
 var $731=($730|0)==0;
 if($731){label=199;break;}else{var $_lcssa_i21_i_i_i=$730;label=204;break;}
 case 202: 
 var $733=___cxa_allocate_exception(4);
 var $734=$733;
 HEAP32[(($734)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($733,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=203;break; } else { label=226;break; }
 case 203: 
 throw "Reached an unreachable!";
 case 204: 
 var $_lcssa_i21_i_i_i;
 var $735=(($18+8)|0);
 HEAP32[(($735)>>2)]=$_lcssa_i21_i_i_i;
 var $736=$722|1;
 var $737=(($18)|0);
 HEAP32[(($737)>>2)]=$736;
 var $738=(($18+4)|0);
 HEAP32[(($738)>>2)]=$711;
 var $__p_0_i15_i_i_i=$_lcssa_i21_i_i_i;label=205;break;
 case 205: 
 var $__p_0_i15_i_i_i;
 assert($711 % 1 === 0);(_memcpy($__p_0_i15_i_i_i, $name, $711)|0);
 var $739=(($__p_0_i15_i_i_i+$711)|0);
 HEAP8[(($739)>>0)]=0;
 var $740=$710;
 var $741=HEAP8[(($740)>>0)];
 var $742=$741&1;
 var $743=(($742<<24)>>24)==0;
 if($743){label=207;break;}else{label=206;break;}
 case 206: 
 var $745=(($pa_i_i_i+12)|0);
 var $746=HEAP32[(($745)>>2)];
 HEAP8[(($746)>>0)]=0;
 var $747=(($pa_i_i_i+8)|0);
 HEAP32[(($747)>>2)]=0;
 label=208;break;
 case 207: 
 var $749=$710;
 var $750=(($749+1)|0);
 HEAP8[(($750)>>0)]=0;
 HEAP8[(($740)>>0)]=0;
 label=208;break;
 case 208: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($710,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { label=209;break; }
 case 209: 
 var $752$0 = ___cxa_find_matching_catch(0); var $752$1 = tempRet0;
 var $753=$752$0;
 ___clang_call_terminate($753);
 throw "Reached an unreachable!";
 case 210: 
 assert(12 % 1 === 0);HEAP32[(($740)>>2)]=HEAP32[(($567)>>2)];HEAP32[((($740)+(4))>>2)]=HEAP32[((($567)+(4))>>2)];HEAP32[((($740)+(8))>>2)]=HEAP32[((($567)+(8))>>2)];
 var $754=$18;
 var $storemerge1_i_i_i=0;label=211;break;
 case 211: 
 var $storemerge1_i_i_i;
 var $756=($storemerge1_i_i_i>>>0)<3;
 if($756){label=212;break;}else{label=213;break;}
 case 212: 
 var $758=(($754+($storemerge1_i_i_i<<2))|0);
 HEAP32[(($758)>>2)]=0;
 var $759=((($storemerge1_i_i_i)+(1))|0);
 var $storemerge1_i_i_i=$759;label=211;break;
 case 213: 
 var $760=HEAP8[(($567)>>0)];
 var $761=$760&1;
 var $762=(($761<<24)>>24)==0;
 if($762){label=215;break;}else{label=214;break;}
 case 214: 
 var $764=(($18+8)|0);
 var $765=HEAP32[(($764)>>2)];
 _free($765);
 label=215;break;
 case 215: 
 var $766=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($15,$766,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { label=226;break; }
 case 216: 
 var $767=(($15)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($768+16)|0);
 var $770=(($769)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=(($pa_i_i_i)|0);
 HEAP32[(($772)>>2)]=$771;
 var $773=(($768+20)|0);
 var $774=($pa_i_i_i|0)==($769|0);
 if($774){label=221;break;}else{label=217;break;}
 case 217: 
 var $776=$773;
 var $777=HEAP8[(($776)>>0)];
 var $778=$777&1;
 var $779=(($778<<24)>>24)==0;
 if($779){label=219;break;}else{label=218;break;}
 case 218: 
 var $781=(($768+28)|0);
 var $782=HEAP32[(($781)>>2)];
 var $783=(($768+24)|0);
 var $784=HEAP32[(($783)>>2)];
 var $791=$784;var $790=$782;label=220;break;
 case 219: 
 var $786=$773;
 var $787=(($786+1)|0);
 var $788=($777&255);
 var $789=$788>>>1;
 var $791=$789;var $790=$787;label=220;break;
 case 220: 
 var $790;
 var $791;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($710,$790,$791) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=221;break; } else { label=226;break; }
 case 221: 
 var $792=(($pa_i_i_i+16)|0);
 var $793=(($768+32)|0);
 var $794=$792;
 var $795=$793;
 assert(12 % 1 === 0);HEAP32[(($794)>>2)]=HEAP32[(($795)>>2)];HEAP32[((($794)+(4))>>2)]=HEAP32[((($795)+(4))>>2)];HEAP32[((($794)+(8))>>2)]=HEAP32[((($795)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($14,$766,$768);
 var $796=(($pa_i_i_i+20)|0);
 HEAP32[(($796)>>2)]=$637;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$766,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { label=226;break; }
 case 222: 
 var $797=(($13+4)|0);
 var $798=HEAP8[(($797)>>0)];
 var $799=$798&1;
 var $800=(($799<<24)>>24)==0;
 if($800){label=223;break;}else{label=229;break;}
 case 223: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { label=226;break; }
 case 224: 
 throw "Reached an unreachable!";
 case 225: 
 var $lpad_loopexit59$0 = ___cxa_find_matching_catch(); var $lpad_loopexit59$1 = tempRet0;
 var $lpad_phi61$1=$lpad_loopexit59$1;var $lpad_phi61$0=$lpad_loopexit59$0;label=227;break;
 case 226: 
 var $lpad_nonloopexit60$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit60$1 = tempRet0;
 var $lpad_phi61$1=$lpad_nonloopexit60$1;var $lpad_phi61$0=$lpad_nonloopexit60$0;label=227;break;
 case 227: 
 var $lpad_phi61$0;
 var $lpad_phi61$1;
 var $804=$lpad_phi61$0;
 var $805=$lpad_phi61$1;
 var $806=$710;
 var $807=HEAP8[(($806)>>0)];
 var $808=$807&1;
 var $809=(($808<<24)>>24)==0;
 if($809){var $_039=$804;var $_040=$805;label=388;break;}else{label=228;break;}
 case 228: 
 var $811=(($pa_i_i_i+12)|0);
 var $812=HEAP32[(($811)>>2)];
 _free($812);
 var $_039=$804;var $_040=$805;label=388;break;
 case 229: 
 var $814=HEAP8[(($740)>>0)];
 var $815=$814&1;
 var $816=(($815<<24)>>24)==0;
 if($816){label=390;break;}else{label=230;break;}
 case 230: 
 var $818=(($pa_i_i_i+12)|0);
 var $819=HEAP32[(($818)>>2)];
 _free($819);
 label=390;break;
 case 231: 
 var $821=$7;
 var $$etemp$29$0=8;
 var $$etemp$29$1=0;

 var $822=$8;
 var $$etemp$30$0=4;
 var $$etemp$30$1=0;

 var $823=$9;
 var $$etemp$31$0=4;
 var $$etemp$31$1=0;

 var $824=$h_i_i_i_i;
 var $$etemp$32$0=8;
 var $$etemp$32$1=0;

 var $825=$10;
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $826=$h1_i_i_i_i;
 var $$etemp$34$0=8;
 var $$etemp$34$1=0;

 var $827=$11;
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $828=$pa_i_i_i_i;
 var $$etemp$36$0=28;
 var $$etemp$36$1=0;

 var $829=$12;
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $830=($s|0)==32;
 if($830){label=232;break;}else{label=249;break;}
 case 232: 
 var $832=_strlen($name);
 var $833=($832>>>0)>4294967279;
 if($833){label=233;break;}else{label=234;break;}
 case 233: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 234: 
 var $836=($832>>>0)<11;
 if($836){label=235;break;}else{label=236;break;}
 case 235: 
 var $838=$832<<1;
 var $839=(($838)&255);
 HEAP8[(($825)>>0)]=$839;
 var $840=$10;
 var $841=(($840+1)|0);
 var $__p_0_i_i_i_i_i=$841;label=241;break;
 case 236: 
 var $842=((($832)+(16))|0);
 var $843=$842&-16;
 var $844=($843|0)==0;
 var $_size_i_i_i_i_i=($844?1:$843);
 var $845=_malloc($_size_i_i_i_i_i);
 var $846=($845|0)==0;
 if($846){label=237;break;}else{var $_lcssa_i_i_i_i_i=$845;label=240;break;}
 case 237: 
 var $847=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $848=($847|0)==0;
 if($848){label=239;break;}else{label=238;break;}
 case 238: 
 var $850=$847;
 FUNCTION_TABLE[$850]();
 var $851=_malloc($_size_i_i_i_i_i);
 var $852=($851|0)==0;
 if($852){label=237;break;}else{var $_lcssa_i_i_i_i_i=$851;label=240;break;}
 case 239: 
 var $854=___cxa_allocate_exception(4);
 var $855=$854;
 HEAP32[(($855)>>2)]=15192;
 ___cxa_throw($854,26096,(782));
 throw "Reached an unreachable!";
 case 240: 
 var $_lcssa_i_i_i_i_i;
 var $856=(($10+8)|0);
 HEAP32[(($856)>>2)]=$_lcssa_i_i_i_i_i;
 var $857=$843|1;
 var $858=(($10)|0);
 HEAP32[(($858)>>2)]=$857;
 var $859=(($10+4)|0);
 HEAP32[(($859)>>2)]=$832;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i_i_i_i;label=241;break;
 case 241: 
 var $__p_0_i_i_i_i_i;
 assert($832 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $name, $832)|0);
 var $860=(($__p_0_i_i_i_i_i+$832)|0);
 HEAP8[(($860)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i,$m,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=247;break; }
 case 242: 
 var $862=HEAP8[(($825)>>0)];
 var $863=$862&1;
 var $864=(($863<<24)>>24)==0;
 if($864){label=244;break;}else{label=243;break;}
 case 243: 
 var $866=(($10+8)|0);
 var $867=HEAP32[(($866)>>2)];
 _free($867);
 label=244;break;
 case 244: 
 var $868=(($m+4)|0);
 var $869=(($m)|0);
 var $870=(($h_i_i_i_i)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=(($871+8)|0);
 var $873=$data;
 var $storemerge2_i_i_i_i=0;label=245;break;
 case 245: 
 var $storemerge2_i_i_i_i;
 var $874=HEAP32[(($868)>>2)];
 var $875=HEAP32[(($869)>>2)];
 var $876=$874;
 var $877=$875;
 var $878=((($876)-($877))|0);
 var $879=(((($878|0))/(28))&-1);
 var $880=($storemerge2_i_i_i_i>>>0)<($879>>>0);
 if($880){label=246;break;}else{label=390;break;}
 case 246: 
 var $882=HEAP32[(($872)>>2)];
 var $883=(($882+($storemerge2_i_i_i_i<<5))|0);
 var $884=(($873+($storemerge2_i_i_i_i<<5))|0);
 assert(32 % 1 === 0);(_memcpy($883, $884, 32)|0);
 var $885=((($storemerge2_i_i_i_i)+(1))|0);
 var $storemerge2_i_i_i_i=$885;label=245;break;
 case 247: 
 var $887$0 = ___cxa_find_matching_catch(); var $887$1 = tempRet0;
 var $888=$887$0;
 var $889=$887$1;
 var $890=HEAP8[(($825)>>0)];
 var $891=$890&1;
 var $892=(($891<<24)>>24)==0;
 if($892){var $_037=$888;var $_038=$889;label=387;break;}else{label=248;break;}
 case 248: 
 var $894=(($10+8)|0);
 var $895=HEAP32[(($894)>>2)];
 _free($895);
 var $_037=$888;var $_038=$889;label=387;break;
 case 249: 
 var $897=($s>>>0)<32;
 if($897){label=250;break;}else{label=308;break;}
 case 250: 
 var $899=(((32)-($s))|0);
 var $900=_strlen($name);
 var $901=($900>>>0)>4294967279;
 if($901){label=251;break;}else{label=252;break;}
 case 251: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 252: 
 var $904=($900>>>0)<11;
 if($904){label=253;break;}else{label=254;break;}
 case 253: 
 var $906=$900<<1;
 var $907=(($906)&255);
 HEAP8[(($827)>>0)]=$907;
 var $908=$11;
 var $909=(($908+1)|0);
 var $__p_0_i5_i_i_i_i=$909;label=259;break;
 case 254: 
 var $910=((($900)+(16))|0);
 var $911=$910&-16;
 var $912=($911|0)==0;
 var $_size_i7_i_i_i_i=($912?1:$911);
 var $913=_malloc($_size_i7_i_i_i_i);
 var $914=($913|0)==0;
 if($914){label=255;break;}else{var $_lcssa_i9_i_i_i_i=$913;label=258;break;}
 case 255: 
 var $915=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $916=($915|0)==0;
 if($916){label=257;break;}else{label=256;break;}
 case 256: 
 var $918=$915;
 FUNCTION_TABLE[$918]();
 var $919=_malloc($_size_i7_i_i_i_i);
 var $920=($919|0)==0;
 if($920){label=255;break;}else{var $_lcssa_i9_i_i_i_i=$919;label=258;break;}
 case 257: 
 var $922=___cxa_allocate_exception(4);
 var $923=$922;
 HEAP32[(($923)>>2)]=15192;
 ___cxa_throw($922,26096,(782));
 throw "Reached an unreachable!";
 case 258: 
 var $_lcssa_i9_i_i_i_i;
 var $924=(($11+8)|0);
 HEAP32[(($924)>>2)]=$_lcssa_i9_i_i_i_i;
 var $925=$911|1;
 var $926=(($11)|0);
 HEAP32[(($926)>>2)]=$925;
 var $927=(($11+4)|0);
 HEAP32[(($927)>>2)]=$900;
 var $__p_0_i5_i_i_i_i=$_lcssa_i9_i_i_i_i;label=259;break;
 case 259: 
 var $__p_0_i5_i_i_i_i;
 assert($900 % 1 === 0);(_memcpy($__p_0_i5_i_i_i_i, $name, $900)|0);
 var $928=(($__p_0_i5_i_i_i_i+$900)|0);
 HEAP8[(($928)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i,$m,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=265;break; }
 case 260: 
 var $930=HEAP8[(($827)>>0)];
 var $931=$930&1;
 var $932=(($931<<24)>>24)==0;
 if($932){label=262;break;}else{label=261;break;}
 case 261: 
 var $934=(($11+8)|0);
 var $935=HEAP32[(($934)>>2)];
 _free($935);
 label=262;break;
 case 262: 
 var $936=(($m+4)|0);
 var $937=(($m)|0);
 var $938=(($h1_i_i_i_i)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=(($939+8)|0);
 var $941=$data;
 var $storemerge_i30_i_i_i=0;label=263;break;
 case 263: 
 var $storemerge_i30_i_i_i;
 var $942=HEAP32[(($936)>>2)];
 var $943=HEAP32[(($937)>>2)];
 var $944=$942;
 var $945=$943;
 var $946=((($944)-($945))|0);
 var $947=(((($946|0))/(28))&-1);
 var $948=($storemerge_i30_i_i_i>>>0)<($947>>>0);
 if($948){label=264;break;}else{label=267;break;}
 case 264: 
 var $950=HEAP32[(($940)>>2)];
 var $951=(($950+($storemerge_i30_i_i_i<<5))|0);
 var $952=(($941+($storemerge_i30_i_i_i<<5))|0);
 assert($s % 1 === 0);(_memcpy($951, $952, $s)|0);
 var $953=((($storemerge_i30_i_i_i)+(1))|0);
 var $storemerge_i30_i_i_i=$953;label=263;break;
 case 265: 
 var $955$0 = ___cxa_find_matching_catch(); var $955$1 = tempRet0;
 var $956=$955$0;
 var $957=$955$1;
 var $958=HEAP8[(($827)>>0)];
 var $959=$958&1;
 var $960=(($959<<24)>>24)==0;
 if($960){var $_037=$956;var $_038=$957;label=387;break;}else{label=266;break;}
 case 266: 
 var $962=(($11+8)|0);
 var $963=HEAP32[(($962)>>2)];
 _free($963);
 var $_037=$956;var $_038=$957;label=387;break;
 case 267: 
 var $965=(($pa_i_i_i_i+4)|0);
 var $966=$965;
 var $storemerge_i_i_i_i_i=0;label=268;break;
 case 268: 
 var $storemerge_i_i_i_i_i;
 var $968=($storemerge_i_i_i_i_i>>>0)<3;
 if($968){label=269;break;}else{label=270;break;}
 case 269: 
 var $970=(($966+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($970)>>2)]=0;
 var $971=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$971;label=268;break;
 case 270: 
 var $972=(($pa_i_i_i_i+4)|0);
 var $973=_strlen($name);
 var $974=($973>>>0)>4294967279;
 if($974){label=271;break;}else{label=273;break;}
 case 271: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=303;break; }
 case 272: 
 throw "Reached an unreachable!";
 case 273: 
 var $977=($973>>>0)<11;
 if($977){label=274;break;}else{label=275;break;}
 case 274: 
 var $979=$973<<1;
 var $980=(($979)&255);
 HEAP8[(($829)>>0)]=$980;
 var $981=$12;
 var $982=(($981+1)|0);
 var $__p_0_i15_i_i_i_i=$982;label=282;break;
 case 275: 
 var $983=((($973)+(16))|0);
 var $984=$983&-16;
 var $985=($984|0)==0;
 var $_size_i19_i_i_i_i=($985?1:$984);
 var $986=_malloc($_size_i19_i_i_i_i);
 var $987=($986|0)==0;
 if($987){label=276;break;}else{var $_lcssa_i21_i_i_i_i=$986;label=281;break;}
 case 276: 
 var $988=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $989=($988|0)==0;
 if($989){label=279;break;}else{label=277;break;}
 case 277: 
 var $991=$988;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$991]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=302;break; }
 case 278: 
 var $992=_malloc($_size_i19_i_i_i_i);
 var $993=($992|0)==0;
 if($993){label=276;break;}else{var $_lcssa_i21_i_i_i_i=$992;label=281;break;}
 case 279: 
 var $995=___cxa_allocate_exception(4);
 var $996=$995;
 HEAP32[(($996)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($995,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=280;break; } else { label=303;break; }
 case 280: 
 throw "Reached an unreachable!";
 case 281: 
 var $_lcssa_i21_i_i_i_i;
 var $997=(($12+8)|0);
 HEAP32[(($997)>>2)]=$_lcssa_i21_i_i_i_i;
 var $998=$984|1;
 var $999=(($12)|0);
 HEAP32[(($999)>>2)]=$998;
 var $1000=(($12+4)|0);
 HEAP32[(($1000)>>2)]=$973;
 var $__p_0_i15_i_i_i_i=$_lcssa_i21_i_i_i_i;label=282;break;
 case 282: 
 var $__p_0_i15_i_i_i_i;
 assert($973 % 1 === 0);(_memcpy($__p_0_i15_i_i_i_i, $name, $973)|0);
 var $1001=(($__p_0_i15_i_i_i_i+$973)|0);
 HEAP8[(($1001)>>0)]=0;
 var $1002=$972;
 var $1003=HEAP8[(($1002)>>0)];
 var $1004=$1003&1;
 var $1005=(($1004<<24)>>24)==0;
 if($1005){label=284;break;}else{label=283;break;}
 case 283: 
 var $1007=(($pa_i_i_i_i+12)|0);
 var $1008=HEAP32[(($1007)>>2)];
 HEAP8[(($1008)>>0)]=0;
 var $1009=(($pa_i_i_i_i+8)|0);
 HEAP32[(($1009)>>2)]=0;
 label=285;break;
 case 284: 
 var $1011=$972;
 var $1012=(($1011+1)|0);
 HEAP8[(($1012)>>0)]=0;
 HEAP8[(($1002)>>0)]=0;
 label=285;break;
 case 285: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($972,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=287;break; } else { label=286;break; }
 case 286: 
 var $1014$0 = ___cxa_find_matching_catch(0); var $1014$1 = tempRet0;
 var $1015=$1014$0;
 ___clang_call_terminate($1015);
 throw "Reached an unreachable!";
 case 287: 
 assert(12 % 1 === 0);HEAP32[(($1002)>>2)]=HEAP32[(($829)>>2)];HEAP32[((($1002)+(4))>>2)]=HEAP32[((($829)+(4))>>2)];HEAP32[((($1002)+(8))>>2)]=HEAP32[((($829)+(8))>>2)];
 var $1016=$12;
 var $storemerge1_i_i_i_i=0;label=288;break;
 case 288: 
 var $storemerge1_i_i_i_i;
 var $1018=($storemerge1_i_i_i_i>>>0)<3;
 if($1018){label=289;break;}else{label=290;break;}
 case 289: 
 var $1020=(($1016+($storemerge1_i_i_i_i<<2))|0);
 HEAP32[(($1020)>>2)]=0;
 var $1021=((($storemerge1_i_i_i_i)+(1))|0);
 var $storemerge1_i_i_i_i=$1021;label=288;break;
 case 290: 
 var $1022=HEAP8[(($829)>>0)];
 var $1023=$1022&1;
 var $1024=(($1023<<24)>>24)==0;
 if($1024){label=292;break;}else{label=291;break;}
 case 291: 
 var $1026=(($12+8)|0);
 var $1027=HEAP32[(($1026)>>2)];
 _free($1027);
 label=292;break;
 case 292: 
 var $1028=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($9,$1028,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=303;break; }
 case 293: 
 var $1029=(($9)|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=(($1030+16)|0);
 var $1032=(($1031)|0);
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=(($pa_i_i_i_i)|0);
 HEAP32[(($1034)>>2)]=$1033;
 var $1035=(($1030+20)|0);
 var $1036=($pa_i_i_i_i|0)==($1031|0);
 if($1036){label=298;break;}else{label=294;break;}
 case 294: 
 var $1038=$1035;
 var $1039=HEAP8[(($1038)>>0)];
 var $1040=$1039&1;
 var $1041=(($1040<<24)>>24)==0;
 if($1041){label=296;break;}else{label=295;break;}
 case 295: 
 var $1043=(($1030+28)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=(($1030+24)|0);
 var $1046=HEAP32[(($1045)>>2)];
 var $1053=$1046;var $1052=$1044;label=297;break;
 case 296: 
 var $1048=$1035;
 var $1049=(($1048+1)|0);
 var $1050=($1039&255);
 var $1051=$1050>>>1;
 var $1053=$1051;var $1052=$1049;label=297;break;
 case 297: 
 var $1052;
 var $1053;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($972,$1052,$1053) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=298;break; } else { label=303;break; }
 case 298: 
 var $1054=(($pa_i_i_i_i+16)|0);
 var $1055=(($1030+32)|0);
 var $1056=$1054;
 var $1057=$1055;
 assert(12 % 1 === 0);HEAP32[(($1056)>>2)]=HEAP32[(($1057)>>2)];HEAP32[((($1056)+(4))>>2)]=HEAP32[((($1057)+(4))>>2)];HEAP32[((($1056)+(8))>>2)]=HEAP32[((($1057)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($8,$1028,$1030);
 var $1058=(($pa_i_i_i_i+20)|0);
 HEAP32[(($1058)>>2)]=$899;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$1028,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=299;break; } else { label=303;break; }
 case 299: 
 var $1059=(($7+4)|0);
 var $1060=HEAP8[(($1059)>>0)];
 var $1061=$1060&1;
 var $1062=(($1061<<24)>>24)==0;
 if($1062){label=300;break;}else{label=306;break;}
 case 300: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=303;break; }
 case 301: 
 throw "Reached an unreachable!";
 case 302: 
 var $lpad_loopexit64$0 = ___cxa_find_matching_catch(); var $lpad_loopexit64$1 = tempRet0;
 var $lpad_phi66$1=$lpad_loopexit64$1;var $lpad_phi66$0=$lpad_loopexit64$0;label=304;break;
 case 303: 
 var $lpad_nonloopexit65$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit65$1 = tempRet0;
 var $lpad_phi66$1=$lpad_nonloopexit65$1;var $lpad_phi66$0=$lpad_nonloopexit65$0;label=304;break;
 case 304: 
 var $lpad_phi66$0;
 var $lpad_phi66$1;
 var $1066=$lpad_phi66$0;
 var $1067=$lpad_phi66$1;
 var $1068=$972;
 var $1069=HEAP8[(($1068)>>0)];
 var $1070=$1069&1;
 var $1071=(($1070<<24)>>24)==0;
 if($1071){var $_037=$1066;var $_038=$1067;label=387;break;}else{label=305;break;}
 case 305: 
 var $1073=(($pa_i_i_i_i+12)|0);
 var $1074=HEAP32[(($1073)>>2)];
 _free($1074);
 var $_037=$1066;var $_038=$1067;label=387;break;
 case 306: 
 var $1076=HEAP8[(($1002)>>0)];
 var $1077=$1076&1;
 var $1078=(($1077<<24)>>24)==0;
 if($1078){label=390;break;}else{label=307;break;}
 case 307: 
 var $1080=(($pa_i_i_i_i+12)|0);
 var $1081=HEAP32[(($1080)>>2)];
 _free($1081);
 label=390;break;
 case 308: 
 var $1083=$1;
 var $$etemp$38$0=8;
 var $$etemp$38$1=0;

 var $1084=$2;
 var $$etemp$39$0=4;
 var $$etemp$39$1=0;

 var $1085=$3;
 var $$etemp$40$0=4;
 var $$etemp$40$1=0;

 var $1086=$h_i_i_i_i_i;
 var $$etemp$41$0=8;
 var $$etemp$41$1=0;

 var $1087=$4;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $1088=$h1_i_i_i_i_i;
 var $$etemp$43$0=8;
 var $$etemp$43$1=0;

 var $1089=$5;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $1090=$pa_i_i_i_i_i;
 var $$etemp$45$0=28;
 var $$etemp$45$1=0;

 var $1091=$6;
 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $1092=($s|0)==64;
 if($1092){label=309;break;}else{label=326;break;}
 case 309: 
 var $1094=_strlen($name);
 var $1095=($1094>>>0)>4294967279;
 if($1095){label=310;break;}else{label=311;break;}
 case 310: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 311: 
 var $1098=($1094>>>0)<11;
 if($1098){label=312;break;}else{label=313;break;}
 case 312: 
 var $1100=$1094<<1;
 var $1101=(($1100)&255);
 HEAP8[(($1087)>>0)]=$1101;
 var $1102=$4;
 var $1103=(($1102+1)|0);
 var $__p_0_i_i_i_i_i_i=$1103;label=318;break;
 case 313: 
 var $1104=((($1094)+(16))|0);
 var $1105=$1104&-16;
 var $1106=($1105|0)==0;
 var $_size_i_i_i_i_i_i=($1106?1:$1105);
 var $1107=_malloc($_size_i_i_i_i_i_i);
 var $1108=($1107|0)==0;
 if($1108){label=314;break;}else{var $_lcssa_i_i_i_i_i_i=$1107;label=317;break;}
 case 314: 
 var $1109=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1110=($1109|0)==0;
 if($1110){label=316;break;}else{label=315;break;}
 case 315: 
 var $1112=$1109;
 FUNCTION_TABLE[$1112]();
 var $1113=_malloc($_size_i_i_i_i_i_i);
 var $1114=($1113|0)==0;
 if($1114){label=314;break;}else{var $_lcssa_i_i_i_i_i_i=$1113;label=317;break;}
 case 316: 
 var $1116=___cxa_allocate_exception(4);
 var $1117=$1116;
 HEAP32[(($1117)>>2)]=15192;
 ___cxa_throw($1116,26096,(782));
 throw "Reached an unreachable!";
 case 317: 
 var $_lcssa_i_i_i_i_i_i;
 var $1118=(($4+8)|0);
 HEAP32[(($1118)>>2)]=$_lcssa_i_i_i_i_i_i;
 var $1119=$1105|1;
 var $1120=(($4)|0);
 HEAP32[(($1120)>>2)]=$1119;
 var $1121=(($4+4)|0);
 HEAP32[(($1121)>>2)]=$1094;
 var $__p_0_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i;label=318;break;
 case 318: 
 var $__p_0_i_i_i_i_i_i;
 assert($1094 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i, $name, $1094)|0);
 var $1122=(($__p_0_i_i_i_i_i_i+$1094)|0);
 HEAP8[(($1122)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i,$m,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=324;break; }
 case 319: 
 var $1124=HEAP8[(($1087)>>0)];
 var $1125=$1124&1;
 var $1126=(($1125<<24)>>24)==0;
 if($1126){label=321;break;}else{label=320;break;}
 case 320: 
 var $1128=(($4+8)|0);
 var $1129=HEAP32[(($1128)>>2)];
 _free($1129);
 label=321;break;
 case 321: 
 var $1130=(($m+4)|0);
 var $1131=(($m)|0);
 var $1132=(($h_i_i_i_i_i)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=(($1133+8)|0);
 var $1135=$data;
 var $storemerge2_i_i_i_i_i=0;label=322;break;
 case 322: 
 var $storemerge2_i_i_i_i_i;
 var $1136=HEAP32[(($1130)>>2)];
 var $1137=HEAP32[(($1131)>>2)];
 var $1138=$1136;
 var $1139=$1137;
 var $1140=((($1138)-($1139))|0);
 var $1141=(((($1140|0))/(28))&-1);
 var $1142=($storemerge2_i_i_i_i_i>>>0)<($1141>>>0);
 if($1142){label=323;break;}else{label=390;break;}
 case 323: 
 var $1144=HEAP32[(($1134)>>2)];
 var $1145=(($1144+($storemerge2_i_i_i_i_i<<6))|0);
 var $1146=(($1135+($storemerge2_i_i_i_i_i<<6))|0);
 assert(64 % 1 === 0);(_memcpy($1145, $1146, 64)|0);
 var $1147=((($storemerge2_i_i_i_i_i)+(1))|0);
 var $storemerge2_i_i_i_i_i=$1147;label=322;break;
 case 324: 
 var $1149$0 = ___cxa_find_matching_catch(); var $1149$1 = tempRet0;
 var $1150=$1149$0;
 var $1151=$1149$1;
 var $1152=HEAP8[(($1087)>>0)];
 var $1153=$1152&1;
 var $1154=(($1153<<24)>>24)==0;
 if($1154){var $_0=$1150;var $_036=$1151;label=386;break;}else{label=325;break;}
 case 325: 
 var $1156=(($4+8)|0);
 var $1157=HEAP32[(($1156)>>2)];
 _free($1157);
 var $_0=$1150;var $_036=$1151;label=386;break;
 case 326: 
 var $1159=($s>>>0)<64;
 if($1159){label=327;break;}else{label=385;break;}
 case 327: 
 var $1161=(((64)-($s))|0);
 var $1162=_strlen($name);
 var $1163=($1162>>>0)>4294967279;
 if($1163){label=328;break;}else{label=329;break;}
 case 328: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 329: 
 var $1166=($1162>>>0)<11;
 if($1166){label=330;break;}else{label=331;break;}
 case 330: 
 var $1168=$1162<<1;
 var $1169=(($1168)&255);
 HEAP8[(($1089)>>0)]=$1169;
 var $1170=$5;
 var $1171=(($1170+1)|0);
 var $__p_0_i5_i_i_i_i_i=$1171;label=336;break;
 case 331: 
 var $1172=((($1162)+(16))|0);
 var $1173=$1172&-16;
 var $1174=($1173|0)==0;
 var $_size_i7_i_i_i_i_i=($1174?1:$1173);
 var $1175=_malloc($_size_i7_i_i_i_i_i);
 var $1176=($1175|0)==0;
 if($1176){label=332;break;}else{var $_lcssa_i9_i_i_i_i_i=$1175;label=335;break;}
 case 332: 
 var $1177=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1178=($1177|0)==0;
 if($1178){label=334;break;}else{label=333;break;}
 case 333: 
 var $1180=$1177;
 FUNCTION_TABLE[$1180]();
 var $1181=_malloc($_size_i7_i_i_i_i_i);
 var $1182=($1181|0)==0;
 if($1182){label=332;break;}else{var $_lcssa_i9_i_i_i_i_i=$1181;label=335;break;}
 case 334: 
 var $1184=___cxa_allocate_exception(4);
 var $1185=$1184;
 HEAP32[(($1185)>>2)]=15192;
 ___cxa_throw($1184,26096,(782));
 throw "Reached an unreachable!";
 case 335: 
 var $_lcssa_i9_i_i_i_i_i;
 var $1186=(($5+8)|0);
 HEAP32[(($1186)>>2)]=$_lcssa_i9_i_i_i_i_i;
 var $1187=$1173|1;
 var $1188=(($5)|0);
 HEAP32[(($1188)>>2)]=$1187;
 var $1189=(($5+4)|0);
 HEAP32[(($1189)>>2)]=$1162;
 var $__p_0_i5_i_i_i_i_i=$_lcssa_i9_i_i_i_i_i;label=336;break;
 case 336: 
 var $__p_0_i5_i_i_i_i_i;
 assert($1162 % 1 === 0);(_memcpy($__p_0_i5_i_i_i_i_i, $name, $1162)|0);
 var $1190=(($__p_0_i5_i_i_i_i_i+$1162)|0);
 HEAP8[(($1190)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i,$m,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=337;break; } else { label=342;break; }
 case 337: 
 var $1192=HEAP8[(($1089)>>0)];
 var $1193=$1192&1;
 var $1194=(($1193<<24)>>24)==0;
 if($1194){label=339;break;}else{label=338;break;}
 case 338: 
 var $1196=(($5+8)|0);
 var $1197=HEAP32[(($1196)>>2)];
 _free($1197);
 label=339;break;
 case 339: 
 var $1198=(($m+4)|0);
 var $1199=(($m)|0);
 var $1200=(($h1_i_i_i_i_i)|0);
 var $1201=HEAP32[(($1200)>>2)];
 var $1202=(($1201+8)|0);
 var $1203=$data;
 var $storemerge_i30_i_i_i_i=0;label=340;break;
 case 340: 
 var $storemerge_i30_i_i_i_i;
 var $1204=HEAP32[(($1198)>>2)];
 var $1205=HEAP32[(($1199)>>2)];
 var $1206=$1204;
 var $1207=$1205;
 var $1208=((($1206)-($1207))|0);
 var $1209=(((($1208|0))/(28))&-1);
 var $1210=($storemerge_i30_i_i_i_i>>>0)<($1209>>>0);
 if($1210){label=341;break;}else{label=344;break;}
 case 341: 
 var $1212=HEAP32[(($1202)>>2)];
 var $1213=(($1212+($storemerge_i30_i_i_i_i<<6))|0);
 var $1214=(($1203+($storemerge_i30_i_i_i_i<<6))|0);
 assert($s % 1 === 0);(_memcpy($1213, $1214, $s)|0);
 var $1215=((($storemerge_i30_i_i_i_i)+(1))|0);
 var $storemerge_i30_i_i_i_i=$1215;label=340;break;
 case 342: 
 var $1217$0 = ___cxa_find_matching_catch(); var $1217$1 = tempRet0;
 var $1218=$1217$0;
 var $1219=$1217$1;
 var $1220=HEAP8[(($1089)>>0)];
 var $1221=$1220&1;
 var $1222=(($1221<<24)>>24)==0;
 if($1222){var $_0=$1218;var $_036=$1219;label=386;break;}else{label=343;break;}
 case 343: 
 var $1224=(($5+8)|0);
 var $1225=HEAP32[(($1224)>>2)];
 _free($1225);
 var $_0=$1218;var $_036=$1219;label=386;break;
 case 344: 
 var $1227=(($pa_i_i_i_i_i+4)|0);
 var $1228=$1227;
 var $storemerge_i_i_i_i_i_i=0;label=345;break;
 case 345: 
 var $storemerge_i_i_i_i_i_i;
 var $1230=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($1230){label=346;break;}else{label=347;break;}
 case 346: 
 var $1232=(($1228+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($1232)>>2)]=0;
 var $1233=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$1233;label=345;break;
 case 347: 
 var $1234=(($pa_i_i_i_i_i+4)|0);
 var $1235=_strlen($name);
 var $1236=($1235>>>0)>4294967279;
 if($1236){label=348;break;}else{label=350;break;}
 case 348: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=349;break; } else { label=380;break; }
 case 349: 
 throw "Reached an unreachable!";
 case 350: 
 var $1239=($1235>>>0)<11;
 if($1239){label=351;break;}else{label=352;break;}
 case 351: 
 var $1241=$1235<<1;
 var $1242=(($1241)&255);
 HEAP8[(($1091)>>0)]=$1242;
 var $1243=$6;
 var $1244=(($1243+1)|0);
 var $__p_0_i15_i_i_i_i_i=$1244;label=359;break;
 case 352: 
 var $1245=((($1235)+(16))|0);
 var $1246=$1245&-16;
 var $1247=($1246|0)==0;
 var $_size_i19_i_i_i_i_i=($1247?1:$1246);
 var $1248=_malloc($_size_i19_i_i_i_i_i);
 var $1249=($1248|0)==0;
 if($1249){label=353;break;}else{var $_lcssa_i21_i_i_i_i_i=$1248;label=358;break;}
 case 353: 
 var $1250=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1251=($1250|0)==0;
 if($1251){label=356;break;}else{label=354;break;}
 case 354: 
 var $1253=$1250;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1253]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=355;break; } else { label=379;break; }
 case 355: 
 var $1254=_malloc($_size_i19_i_i_i_i_i);
 var $1255=($1254|0)==0;
 if($1255){label=353;break;}else{var $_lcssa_i21_i_i_i_i_i=$1254;label=358;break;}
 case 356: 
 var $1257=___cxa_allocate_exception(4);
 var $1258=$1257;
 HEAP32[(($1258)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1257,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=357;break; } else { label=380;break; }
 case 357: 
 throw "Reached an unreachable!";
 case 358: 
 var $_lcssa_i21_i_i_i_i_i;
 var $1259=(($6+8)|0);
 HEAP32[(($1259)>>2)]=$_lcssa_i21_i_i_i_i_i;
 var $1260=$1246|1;
 var $1261=(($6)|0);
 HEAP32[(($1261)>>2)]=$1260;
 var $1262=(($6+4)|0);
 HEAP32[(($1262)>>2)]=$1235;
 var $__p_0_i15_i_i_i_i_i=$_lcssa_i21_i_i_i_i_i;label=359;break;
 case 359: 
 var $__p_0_i15_i_i_i_i_i;
 assert($1235 % 1 === 0);(_memcpy($__p_0_i15_i_i_i_i_i, $name, $1235)|0);
 var $1263=(($__p_0_i15_i_i_i_i_i+$1235)|0);
 HEAP8[(($1263)>>0)]=0;
 var $1264=$1234;
 var $1265=HEAP8[(($1264)>>0)];
 var $1266=$1265&1;
 var $1267=(($1266<<24)>>24)==0;
 if($1267){label=361;break;}else{label=360;break;}
 case 360: 
 var $1269=(($pa_i_i_i_i_i+12)|0);
 var $1270=HEAP32[(($1269)>>2)];
 HEAP8[(($1270)>>0)]=0;
 var $1271=(($pa_i_i_i_i_i+8)|0);
 HEAP32[(($1271)>>2)]=0;
 label=362;break;
 case 361: 
 var $1273=$1234;
 var $1274=(($1273+1)|0);
 HEAP8[(($1274)>>0)]=0;
 HEAP8[(($1264)>>0)]=0;
 label=362;break;
 case 362: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1234,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=364;break; } else { label=363;break; }
 case 363: 
 var $1276$0 = ___cxa_find_matching_catch(0); var $1276$1 = tempRet0;
 var $1277=$1276$0;
 ___clang_call_terminate($1277);
 throw "Reached an unreachable!";
 case 364: 
 assert(12 % 1 === 0);HEAP32[(($1264)>>2)]=HEAP32[(($1091)>>2)];HEAP32[((($1264)+(4))>>2)]=HEAP32[((($1091)+(4))>>2)];HEAP32[((($1264)+(8))>>2)]=HEAP32[((($1091)+(8))>>2)];
 var $1278=$6;
 var $storemerge1_i_i_i_i_i=0;label=365;break;
 case 365: 
 var $storemerge1_i_i_i_i_i;
 var $1280=($storemerge1_i_i_i_i_i>>>0)<3;
 if($1280){label=366;break;}else{label=367;break;}
 case 366: 
 var $1282=(($1278+($storemerge1_i_i_i_i_i<<2))|0);
 HEAP32[(($1282)>>2)]=0;
 var $1283=((($storemerge1_i_i_i_i_i)+(1))|0);
 var $storemerge1_i_i_i_i_i=$1283;label=365;break;
 case 367: 
 var $1284=HEAP8[(($1091)>>0)];
 var $1285=$1284&1;
 var $1286=(($1285<<24)>>24)==0;
 if($1286){label=369;break;}else{label=368;break;}
 case 368: 
 var $1288=(($6+8)|0);
 var $1289=HEAP32[(($1288)>>2)];
 _free($1289);
 label=369;break;
 case 369: 
 var $1290=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($3,$1290,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=370;break; } else { label=380;break; }
 case 370: 
 var $1291=(($3)|0);
 var $1292=HEAP32[(($1291)>>2)];
 var $1293=(($1292+16)|0);
 var $1294=(($1293)|0);
 var $1295=HEAP32[(($1294)>>2)];
 var $1296=(($pa_i_i_i_i_i)|0);
 HEAP32[(($1296)>>2)]=$1295;
 var $1297=(($1292+20)|0);
 var $1298=($pa_i_i_i_i_i|0)==($1293|0);
 if($1298){label=375;break;}else{label=371;break;}
 case 371: 
 var $1300=$1297;
 var $1301=HEAP8[(($1300)>>0)];
 var $1302=$1301&1;
 var $1303=(($1302<<24)>>24)==0;
 if($1303){label=373;break;}else{label=372;break;}
 case 372: 
 var $1305=(($1292+28)|0);
 var $1306=HEAP32[(($1305)>>2)];
 var $1307=(($1292+24)|0);
 var $1308=HEAP32[(($1307)>>2)];
 var $1315=$1308;var $1314=$1306;label=374;break;
 case 373: 
 var $1310=$1297;
 var $1311=(($1310+1)|0);
 var $1312=($1301&255);
 var $1313=$1312>>>1;
 var $1315=$1313;var $1314=$1311;label=374;break;
 case 374: 
 var $1314;
 var $1315;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1234,$1314,$1315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=375;break; } else { label=380;break; }
 case 375: 
 var $1316=(($pa_i_i_i_i_i+16)|0);
 var $1317=(($1292+32)|0);
 var $1318=$1316;
 var $1319=$1317;
 assert(12 % 1 === 0);HEAP32[(($1318)>>2)]=HEAP32[(($1319)>>2)];HEAP32[((($1318)+(4))>>2)]=HEAP32[((($1319)+(4))>>2)];HEAP32[((($1318)+(8))>>2)]=HEAP32[((($1319)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($2,$1290,$1292);
 var $1320=(($pa_i_i_i_i_i+20)|0);
 HEAP32[(($1320)>>2)]=$1161;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$1290,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=376;break; } else { label=380;break; }
 case 376: 
 var $1321=(($1+4)|0);
 var $1322=HEAP8[(($1321)>>0)];
 var $1323=$1322&1;
 var $1324=(($1323<<24)>>24)==0;
 if($1324){label=377;break;}else{label=383;break;}
 case 377: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=378;break; } else { label=380;break; }
 case 378: 
 throw "Reached an unreachable!";
 case 379: 
 var $lpad_loopexit69$0 = ___cxa_find_matching_catch(); var $lpad_loopexit69$1 = tempRet0;
 var $lpad_phi71$1=$lpad_loopexit69$1;var $lpad_phi71$0=$lpad_loopexit69$0;label=381;break;
 case 380: 
 var $lpad_nonloopexit70$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit70$1 = tempRet0;
 var $lpad_phi71$1=$lpad_nonloopexit70$1;var $lpad_phi71$0=$lpad_nonloopexit70$0;label=381;break;
 case 381: 
 var $lpad_phi71$0;
 var $lpad_phi71$1;
 var $1328=$lpad_phi71$0;
 var $1329=$lpad_phi71$1;
 var $1330=$1234;
 var $1331=HEAP8[(($1330)>>0)];
 var $1332=$1331&1;
 var $1333=(($1332<<24)>>24)==0;
 if($1333){var $_0=$1328;var $_036=$1329;label=386;break;}else{label=382;break;}
 case 382: 
 var $1335=(($pa_i_i_i_i_i+12)|0);
 var $1336=HEAP32[(($1335)>>2)];
 _free($1336);
 var $_0=$1328;var $_036=$1329;label=386;break;
 case 383: 
 var $1338=HEAP8[(($1264)>>0)];
 var $1339=$1338&1;
 var $1340=(($1339<<24)>>24)==0;
 if($1340){label=390;break;}else{label=384;break;}
 case 384: 
 var $1342=(($pa_i_i_i_i_i+12)|0);
 var $1343=HEAP32[(($1342)>>2)];
 _free($1343);
 label=390;break;
 case 385: 
 __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi128EEENS1_2K4IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEEEEE9AddAttribILi0EEEvRS3_PKcjPv($m,$name,$s,$data);
 label=390;break;
 case 386: 
 var $_036;
 var $_0;
 var $1345$0=$_0;
 var $1345$1=0;
 var $1346$0=$1345$0;
 var $1346$1=$_036;
 ___resumeException($1346$0)
 case 387: 
 var $_038;
 var $_037;
 var $1347$0=$_037;
 var $1347$1=0;
 var $1348$0=$1347$0;
 var $1348$1=$_038;
 ___resumeException($1348$0)
 case 388: 
 var $_040;
 var $_039;
 var $1349$0=$_039;
 var $1349$1=0;
 var $1350$0=$1349$0;
 var $1350$1=$_040;
 ___resumeException($1350$0)
 case 389: 
 var $_044;
 var $_043;
 var $1351$0=$_043;
 var $1351$1=0;
 var $1352$0=$1351$0;
 var $1352$1=$_044;
 ___resumeException($1352$0)
 case 390: 
 STACKTOP=sp;return;
 case 391: 
 var $_042;
 var $_041;
 var $1353$0=$_042;
 var $1353$1=0;
 var $1354$0=$1353$0;
 var $1354$1=$_041;
 ___resumeException($1354$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi8EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=8;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=18968;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<3;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<3))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(8))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(8))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi16EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=16;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19304;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<4;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<4))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(16))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(16))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi32EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=32;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19112;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<5;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<5))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(32))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(32))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi64EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=64;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19016;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<6;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<6))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(64))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(64))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io4DerKI6MyMeshNS1_9DummyTypeILi128EEENS1_2K4IS3_NS4_ILi1048576EEENS4_ILi2048EEENS4_ILi1024EEENS4_ILi512EEENS4_ILi256EEEEEE9AddAttribILi0EEEvRS3_PKcjPv($m,$name,$s,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+720)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $h_i_i_i_i_i=(sp)+(24);
 var $4=(sp)+(32);
 var $h1_i_i_i_i_i=(sp)+(48);
 var $5=(sp)+(56);
 var $pa_i_i_i_i_i=(sp)+(72);
 var $6=(sp)+(104);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $h_i_i_i_i=(sp)+(144);
 var $10=(sp)+(152);
 var $h1_i_i_i_i=(sp)+(168);
 var $11=(sp)+(176);
 var $pa_i_i_i_i=(sp)+(192);
 var $12=(sp)+(224);
 var $13=(sp)+(240);
 var $14=(sp)+(248);
 var $15=(sp)+(256);
 var $h_i_i_i=(sp)+(264);
 var $16=(sp)+(272);
 var $h1_i_i_i=(sp)+(288);
 var $17=(sp)+(296);
 var $pa_i_i_i=(sp)+(312);
 var $18=(sp)+(344);
 var $19=(sp)+(360);
 var $20=(sp)+(368);
 var $21=(sp)+(376);
 var $h_i_i=(sp)+(384);
 var $22=(sp)+(392);
 var $h1_i_i=(sp)+(408);
 var $23=(sp)+(416);
 var $pa_i_i=(sp)+(432);
 var $24=(sp)+(464);
 var $25=(sp)+(480);
 var $26=(sp)+(488);
 var $27=(sp)+(496);
 var $h_i=(sp)+(504);
 var $28=(sp)+(512);
 var $h1_i=(sp)+(528);
 var $29=(sp)+(536);
 var $pa_i=(sp)+(552);
 var $30=(sp)+(584);
 var $31=(sp)+(600);
 var $32=(sp)+(608);
 var $33=(sp)+(616);
 var $h=(sp)+(624);
 var $34=(sp)+(632);
 var $h1=(sp)+(648);
 var $35=(sp)+(656);
 var $pa=(sp)+(672);
 var $36=(sp)+(704);
 var $37=($s|0)==128;
 if($37){label=2;break;}else{label=19;break;}
 case 2: 
 var $39=_strlen($name);
 var $40=($39>>>0)>4294967279;
 if($40){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $43=($39>>>0)<11;
 if($43){label=5;break;}else{label=6;break;}
 case 5: 
 var $45=$39<<1;
 var $46=(($45)&255);
 var $47=$34;
 HEAP8[(($47)>>0)]=$46;
 var $48=$34;
 var $49=(($48+1)|0);
 var $__p_0_i=$49;label=11;break;
 case 6: 
 var $50=((($39)+(16))|0);
 var $51=$50&-16;
 var $52=($51|0)==0;
 var $_size_i=($52?1:$51);
 var $53=_malloc($_size_i);
 var $54=($53|0)==0;
 if($54){label=7;break;}else{var $_lcssa_i=$53;label=10;break;}
 case 7: 
 var $55=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $56=($55|0)==0;
 if($56){label=9;break;}else{label=8;break;}
 case 8: 
 var $58=$55;
 FUNCTION_TABLE[$58]();
 var $59=_malloc($_size_i);
 var $60=($59|0)==0;
 if($60){label=7;break;}else{var $_lcssa_i=$59;label=10;break;}
 case 9: 
 var $62=___cxa_allocate_exception(4);
 var $63=$62;
 HEAP32[(($63)>>2)]=15192;
 ___cxa_throw($62,26096,(782));
 throw "Reached an unreachable!";
 case 10: 
 var $_lcssa_i;
 var $64=(($34+8)|0);
 HEAP32[(($64)>>2)]=$_lcssa_i;
 var $65=$51|1;
 var $66=(($34)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=(($34+4)|0);
 HEAP32[(($67)>>2)]=$39;
 var $__p_0_i=$_lcssa_i;label=11;break;
 case 11: 
 var $__p_0_i;
 assert($39 % 1 === 0);(_memcpy($__p_0_i, $name, $39)|0);
 var $68=(($__p_0_i+$39)|0);
 HEAP8[(($68)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h,$m,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=17;break; }
 case 12: 
 var $70=$34;
 var $71=HEAP8[(($70)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=14;break;}else{label=13;break;}
 case 13: 
 var $75=(($34+8)|0);
 var $76=HEAP32[(($75)>>2)];
 _free($76);
 label=14;break;
 case 14: 
 var $77=(($m+4)|0);
 var $78=(($m)|0);
 var $79=(($h)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+8)|0);
 var $82=$data;
 var $storemerge2=0;label=15;break;
 case 15: 
 var $storemerge2;
 var $83=HEAP32[(($77)>>2)];
 var $84=HEAP32[(($78)>>2)];
 var $85=$83;
 var $86=$84;
 var $87=((($85)-($86))|0);
 var $88=(((($87|0))/(28))&-1);
 var $89=($storemerge2>>>0)<($88>>>0);
 if($89){label=16;break;}else{label=469;break;}
 case 16: 
 var $91=HEAP32[(($81)>>2)];
 var $92=(($91+($storemerge2<<7))|0);
 var $93=(($82+($storemerge2<<7))|0);
 assert(128 % 1 === 0);(_memcpy($92, $93, 128)|0);
 var $94=((($storemerge2)+(1))|0);
 var $storemerge2=$94;label=15;break;
 case 17: 
 var $96$0 = ___cxa_find_matching_catch(); var $96$1 = tempRet0;
 var $97=$96$0;
 var $98=$96$1;
 var $99=$34;
 var $100=HEAP8[(($99)>>0)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){var $_041=$98;var $_042=$97;label=470;break;}else{label=18;break;}
 case 18: 
 var $104=(($34+8)|0);
 var $105=HEAP32[(($104)>>2)];
 _free($105);
 var $_041=$98;var $_042=$97;label=470;break;
 case 19: 
 var $107=($s>>>0)<128;
 if($107){label=20;break;}else{label=78;break;}
 case 20: 
 var $109=(((128)-($s))|0);
 var $110=_strlen($name);
 var $111=($110>>>0)>4294967279;
 if($111){label=21;break;}else{label=22;break;}
 case 21: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 22: 
 var $114=($110>>>0)<11;
 if($114){label=23;break;}else{label=24;break;}
 case 23: 
 var $116=$110<<1;
 var $117=(($116)&255);
 var $118=$35;
 HEAP8[(($118)>>0)]=$117;
 var $119=$35;
 var $120=(($119+1)|0);
 var $__p_0_i5=$120;label=29;break;
 case 24: 
 var $121=((($110)+(16))|0);
 var $122=$121&-16;
 var $123=($122|0)==0;
 var $_size_i7=($123?1:$122);
 var $124=_malloc($_size_i7);
 var $125=($124|0)==0;
 if($125){label=25;break;}else{var $_lcssa_i9=$124;label=28;break;}
 case 25: 
 var $126=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $127=($126|0)==0;
 if($127){label=27;break;}else{label=26;break;}
 case 26: 
 var $129=$126;
 FUNCTION_TABLE[$129]();
 var $130=_malloc($_size_i7);
 var $131=($130|0)==0;
 if($131){label=25;break;}else{var $_lcssa_i9=$130;label=28;break;}
 case 27: 
 var $133=___cxa_allocate_exception(4);
 var $134=$133;
 HEAP32[(($134)>>2)]=15192;
 ___cxa_throw($133,26096,(782));
 throw "Reached an unreachable!";
 case 28: 
 var $_lcssa_i9;
 var $135=(($35+8)|0);
 HEAP32[(($135)>>2)]=$_lcssa_i9;
 var $136=$122|1;
 var $137=(($35)|0);
 HEAP32[(($137)>>2)]=$136;
 var $138=(($35+4)|0);
 HEAP32[(($138)>>2)]=$110;
 var $__p_0_i5=$_lcssa_i9;label=29;break;
 case 29: 
 var $__p_0_i5;
 assert($110 % 1 === 0);(_memcpy($__p_0_i5, $name, $110)|0);
 var $139=(($__p_0_i5+$110)|0);
 HEAP8[(($139)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1,$m,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=35;break; }
 case 30: 
 var $141=$35;
 var $142=HEAP8[(($141)>>0)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=32;break;}else{label=31;break;}
 case 31: 
 var $146=(($35+8)|0);
 var $147=HEAP32[(($146)>>2)];
 _free($147);
 label=32;break;
 case 32: 
 var $148=(($m+4)|0);
 var $149=(($m)|0);
 var $150=(($h1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+8)|0);
 var $153=$data;
 var $storemerge=0;label=33;break;
 case 33: 
 var $storemerge;
 var $154=HEAP32[(($148)>>2)];
 var $155=HEAP32[(($149)>>2)];
 var $156=$154;
 var $157=$155;
 var $158=((($156)-($157))|0);
 var $159=(((($158|0))/(28))&-1);
 var $160=($storemerge>>>0)<($159>>>0);
 if($160){label=34;break;}else{label=37;break;}
 case 34: 
 var $162=HEAP32[(($152)>>2)];
 var $163=(($162+($storemerge<<7))|0);
 var $164=(($153+($storemerge<<7))|0);
 assert($s % 1 === 0);(_memcpy($163, $164, $s)|0);
 var $165=((($storemerge)+(1))|0);
 var $storemerge=$165;label=33;break;
 case 35: 
 var $167$0 = ___cxa_find_matching_catch(); var $167$1 = tempRet0;
 var $168=$167$0;
 var $169=$167$1;
 var $170=$35;
 var $171=HEAP8[(($170)>>0)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){var $_041=$169;var $_042=$168;label=470;break;}else{label=36;break;}
 case 36: 
 var $175=(($35+8)|0);
 var $176=HEAP32[(($175)>>2)];
 _free($176);
 var $_041=$169;var $_042=$168;label=470;break;
 case 37: 
 var $178=(($pa+4)|0);
 var $179=$178;
 var $storemerge_i=0;label=38;break;
 case 38: 
 var $storemerge_i;
 var $181=($storemerge_i>>>0)<3;
 if($181){label=39;break;}else{label=40;break;}
 case 39: 
 var $183=(($179+($storemerge_i<<2))|0);
 HEAP32[(($183)>>2)]=0;
 var $184=((($storemerge_i)+(1))|0);
 var $storemerge_i=$184;label=38;break;
 case 40: 
 var $185=(($pa+4)|0);
 var $186=_strlen($name);
 var $187=($186>>>0)>4294967279;
 if($187){label=41;break;}else{label=43;break;}
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=73;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $190=($186>>>0)<11;
 if($190){label=44;break;}else{label=45;break;}
 case 44: 
 var $192=$186<<1;
 var $193=(($192)&255);
 var $194=$36;
 HEAP8[(($194)>>0)]=$193;
 var $195=$36;
 var $196=(($195+1)|0);
 var $__p_0_i15=$196;label=52;break;
 case 45: 
 var $197=((($186)+(16))|0);
 var $198=$197&-16;
 var $199=($198|0)==0;
 var $_size_i19=($199?1:$198);
 var $200=_malloc($_size_i19);
 var $201=($200|0)==0;
 if($201){label=46;break;}else{var $_lcssa_i21=$200;label=51;break;}
 case 46: 
 var $202=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $203=($202|0)==0;
 if($203){label=49;break;}else{label=47;break;}
 case 47: 
 var $205=$202;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$205]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=72;break; }
 case 48: 
 var $206=_malloc($_size_i19);
 var $207=($206|0)==0;
 if($207){label=46;break;}else{var $_lcssa_i21=$206;label=51;break;}
 case 49: 
 var $209=___cxa_allocate_exception(4);
 var $210=$209;
 HEAP32[(($210)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($209,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=73;break; }
 case 50: 
 throw "Reached an unreachable!";
 case 51: 
 var $_lcssa_i21;
 var $211=(($36+8)|0);
 HEAP32[(($211)>>2)]=$_lcssa_i21;
 var $212=$198|1;
 var $213=(($36)|0);
 HEAP32[(($213)>>2)]=$212;
 var $214=(($36+4)|0);
 HEAP32[(($214)>>2)]=$186;
 var $__p_0_i15=$_lcssa_i21;label=52;break;
 case 52: 
 var $__p_0_i15;
 assert($186 % 1 === 0);(_memcpy($__p_0_i15, $name, $186)|0);
 var $216=(($__p_0_i15+$186)|0);
 HEAP8[(($216)>>0)]=0;
 var $217=$185;
 var $218=HEAP8[(($217)>>0)];
 var $219=$218&1;
 var $220=(($219<<24)>>24)==0;
 if($220){label=54;break;}else{label=53;break;}
 case 53: 
 var $222=(($pa+12)|0);
 var $223=HEAP32[(($222)>>2)];
 HEAP8[(($223)>>0)]=0;
 var $224=(($pa+8)|0);
 HEAP32[(($224)>>2)]=0;
 label=55;break;
 case 54: 
 var $226=$185;
 var $227=(($226+1)|0);
 HEAP8[(($227)>>0)]=0;
 HEAP8[(($217)>>0)]=0;
 label=55;break;
 case 55: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($185,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=56;break; }
 case 56: 
 var $229$0 = ___cxa_find_matching_catch(0); var $229$1 = tempRet0;
 var $230=$229$0;
 ___clang_call_terminate($230);
 throw "Reached an unreachable!";
 case 57: 
 var $231=$36;
 assert(12 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($231)>>2)];HEAP32[((($217)+(4))>>2)]=HEAP32[((($231)+(4))>>2)];HEAP32[((($217)+(8))>>2)]=HEAP32[((($231)+(8))>>2)];
 var $232=$36;
 var $storemerge1=0;label=58;break;
 case 58: 
 var $storemerge1;
 var $234=($storemerge1>>>0)<3;
 if($234){label=59;break;}else{label=60;break;}
 case 59: 
 var $236=(($232+($storemerge1<<2))|0);
 HEAP32[(($236)>>2)]=0;
 var $237=((($storemerge1)+(1))|0);
 var $storemerge1=$237;label=58;break;
 case 60: 
 var $238=HEAP8[(($231)>>0)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=62;break;}else{label=61;break;}
 case 61: 
 var $242=(($36+8)|0);
 var $243=HEAP32[(($242)>>2)];
 _free($243);
 label=62;break;
 case 62: 
 var $244=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($33,$244,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=73;break; }
 case 63: 
 var $246=(($33)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+16)|0);
 var $249=(($248)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($pa)|0);
 HEAP32[(($251)>>2)]=$250;
 var $252=(($247+20)|0);
 var $253=($pa|0)==($248|0);
 if($253){label=68;break;}else{label=64;break;}
 case 64: 
 var $255=$252;
 var $256=HEAP8[(($255)>>0)];
 var $257=$256&1;
 var $258=(($257<<24)>>24)==0;
 if($258){label=66;break;}else{label=65;break;}
 case 65: 
 var $260=(($247+28)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($247+24)|0);
 var $263=HEAP32[(($262)>>2)];
 var $270=$263;var $269=$261;label=67;break;
 case 66: 
 var $265=$252;
 var $266=(($265+1)|0);
 var $267=($256&255);
 var $268=$267>>>1;
 var $270=$268;var $269=$266;label=67;break;
 case 67: 
 var $269;
 var $270;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($185,$269,$270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=73;break; }
 case 68: 
 var $272=(($pa+16)|0);
 var $273=(($247+32)|0);
 var $274=$272;
 var $275=$273;
 assert(12 % 1 === 0);HEAP32[(($274)>>2)]=HEAP32[(($275)>>2)];HEAP32[((($274)+(4))>>2)]=HEAP32[((($275)+(4))>>2)];HEAP32[((($274)+(8))>>2)]=HEAP32[((($275)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($32,$244,$247);
 var $276=(($pa+20)|0);
 HEAP32[(($276)>>2)]=$109;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($31,$244,$pa) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=73;break; }
 case 69: 
 var $278=(($31+4)|0);
 var $279=HEAP8[(($278)>>0)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 if($281){label=70;break;}else{label=76;break;}
 case 70: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=73;break; }
 case 71: 
 throw "Reached an unreachable!";
 case 72: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=74;break;
 case 73: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=74;break;
 case 74: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $285=$lpad_phi$0;
 var $286=$lpad_phi$1;
 var $287=$185;
 var $288=HEAP8[(($287)>>0)];
 var $289=$288&1;
 var $290=(($289<<24)>>24)==0;
 if($290){var $_041=$286;var $_042=$285;label=470;break;}else{label=75;break;}
 case 75: 
 var $292=(($pa+12)|0);
 var $293=HEAP32[(($292)>>2)];
 _free($293);
 var $_041=$286;var $_042=$285;label=470;break;
 case 76: 
 var $295=HEAP8[(($217)>>0)];
 var $296=$295&1;
 var $297=(($296<<24)>>24)==0;
 if($297){label=469;break;}else{label=77;break;}
 case 77: 
 var $299=(($pa+12)|0);
 var $300=HEAP32[(($299)>>2)];
 _free($300);
 label=469;break;
 case 78: 
 var $302=$25;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $303=$26;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $304=$27;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $305=$h_i;
 var $$etemp$3$0=8;
 var $$etemp$3$1=0;

 var $306=$28;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $307=$h1_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $308=$29;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $309=$pa_i;
 var $$etemp$7$0=28;
 var $$etemp$7$1=0;

 var $310=$30;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $311=($s|0)==256;
 if($311){label=79;break;}else{label=96;break;}
 case 79: 
 var $313=_strlen($name);
 var $314=($313>>>0)>4294967279;
 if($314){label=80;break;}else{label=81;break;}
 case 80: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 81: 
 var $317=($313>>>0)<11;
 if($317){label=82;break;}else{label=83;break;}
 case 82: 
 var $319=$313<<1;
 var $320=(($319)&255);
 HEAP8[(($306)>>0)]=$320;
 var $321=$28;
 var $322=(($321+1)|0);
 var $__p_0_i_i=$322;label=88;break;
 case 83: 
 var $323=((($313)+(16))|0);
 var $324=$323&-16;
 var $325=($324|0)==0;
 var $_size_i_i=($325?1:$324);
 var $326=_malloc($_size_i_i);
 var $327=($326|0)==0;
 if($327){label=84;break;}else{var $_lcssa_i_i=$326;label=87;break;}
 case 84: 
 var $328=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $329=($328|0)==0;
 if($329){label=86;break;}else{label=85;break;}
 case 85: 
 var $331=$328;
 FUNCTION_TABLE[$331]();
 var $332=_malloc($_size_i_i);
 var $333=($332|0)==0;
 if($333){label=84;break;}else{var $_lcssa_i_i=$332;label=87;break;}
 case 86: 
 var $335=___cxa_allocate_exception(4);
 var $336=$335;
 HEAP32[(($336)>>2)]=15192;
 ___cxa_throw($335,26096,(782));
 throw "Reached an unreachable!";
 case 87: 
 var $_lcssa_i_i;
 var $337=(($28+8)|0);
 HEAP32[(($337)>>2)]=$_lcssa_i_i;
 var $338=$324|1;
 var $339=(($28)|0);
 HEAP32[(($339)>>2)]=$338;
 var $340=(($28+4)|0);
 HEAP32[(($340)>>2)]=$313;
 var $__p_0_i_i=$_lcssa_i_i;label=88;break;
 case 88: 
 var $__p_0_i_i;
 assert($313 % 1 === 0);(_memcpy($__p_0_i_i, $name, $313)|0);
 var $341=(($__p_0_i_i+$313)|0);
 HEAP8[(($341)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i,$m,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=94;break; }
 case 89: 
 var $343=HEAP8[(($306)>>0)];
 var $344=$343&1;
 var $345=(($344<<24)>>24)==0;
 if($345){label=91;break;}else{label=90;break;}
 case 90: 
 var $347=(($28+8)|0);
 var $348=HEAP32[(($347)>>2)];
 _free($348);
 label=91;break;
 case 91: 
 var $349=(($m+4)|0);
 var $350=(($m)|0);
 var $351=(($h_i)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+8)|0);
 var $354=$data;
 var $storemerge2_i=0;label=92;break;
 case 92: 
 var $storemerge2_i;
 var $355=HEAP32[(($349)>>2)];
 var $356=HEAP32[(($350)>>2)];
 var $357=$355;
 var $358=$356;
 var $359=((($357)-($358))|0);
 var $360=(((($359|0))/(28))&-1);
 var $361=($storemerge2_i>>>0)<($360>>>0);
 if($361){label=93;break;}else{label=469;break;}
 case 93: 
 var $363=HEAP32[(($353)>>2)];
 var $364=(($363+($storemerge2_i<<8))|0);
 var $365=(($354+($storemerge2_i<<8))|0);
 assert(256 % 1 === 0);(_memcpy($364, $365, 256)|0);
 var $366=((($storemerge2_i)+(1))|0);
 var $storemerge2_i=$366;label=92;break;
 case 94: 
 var $368$0 = ___cxa_find_matching_catch(); var $368$1 = tempRet0;
 var $369=$368$0;
 var $370=$368$1;
 var $371=HEAP8[(($306)>>0)];
 var $372=$371&1;
 var $373=(($372<<24)>>24)==0;
 if($373){var $_045=$369;var $_046=$370;label=468;break;}else{label=95;break;}
 case 95: 
 var $375=(($28+8)|0);
 var $376=HEAP32[(($375)>>2)];
 _free($376);
 var $_045=$369;var $_046=$370;label=468;break;
 case 96: 
 var $378=($s>>>0)<256;
 if($378){label=97;break;}else{label=155;break;}
 case 97: 
 var $380=(((256)-($s))|0);
 var $381=_strlen($name);
 var $382=($381>>>0)>4294967279;
 if($382){label=98;break;}else{label=99;break;}
 case 98: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 99: 
 var $385=($381>>>0)<11;
 if($385){label=100;break;}else{label=101;break;}
 case 100: 
 var $387=$381<<1;
 var $388=(($387)&255);
 HEAP8[(($308)>>0)]=$388;
 var $389=$29;
 var $390=(($389+1)|0);
 var $__p_0_i5_i=$390;label=106;break;
 case 101: 
 var $391=((($381)+(16))|0);
 var $392=$391&-16;
 var $393=($392|0)==0;
 var $_size_i7_i=($393?1:$392);
 var $394=_malloc($_size_i7_i);
 var $395=($394|0)==0;
 if($395){label=102;break;}else{var $_lcssa_i9_i=$394;label=105;break;}
 case 102: 
 var $396=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $397=($396|0)==0;
 if($397){label=104;break;}else{label=103;break;}
 case 103: 
 var $399=$396;
 FUNCTION_TABLE[$399]();
 var $400=_malloc($_size_i7_i);
 var $401=($400|0)==0;
 if($401){label=102;break;}else{var $_lcssa_i9_i=$400;label=105;break;}
 case 104: 
 var $403=___cxa_allocate_exception(4);
 var $404=$403;
 HEAP32[(($404)>>2)]=15192;
 ___cxa_throw($403,26096,(782));
 throw "Reached an unreachable!";
 case 105: 
 var $_lcssa_i9_i;
 var $405=(($29+8)|0);
 HEAP32[(($405)>>2)]=$_lcssa_i9_i;
 var $406=$392|1;
 var $407=(($29)|0);
 HEAP32[(($407)>>2)]=$406;
 var $408=(($29+4)|0);
 HEAP32[(($408)>>2)]=$381;
 var $__p_0_i5_i=$_lcssa_i9_i;label=106;break;
 case 106: 
 var $__p_0_i5_i;
 assert($381 % 1 === 0);(_memcpy($__p_0_i5_i, $name, $381)|0);
 var $409=(($__p_0_i5_i+$381)|0);
 HEAP8[(($409)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i,$m,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=112;break; }
 case 107: 
 var $411=HEAP8[(($308)>>0)];
 var $412=$411&1;
 var $413=(($412<<24)>>24)==0;
 if($413){label=109;break;}else{label=108;break;}
 case 108: 
 var $415=(($29+8)|0);
 var $416=HEAP32[(($415)>>2)];
 _free($416);
 label=109;break;
 case 109: 
 var $417=(($m+4)|0);
 var $418=(($m)|0);
 var $419=(($h1_i)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=(($420+8)|0);
 var $422=$data;
 var $storemerge_i30=0;label=110;break;
 case 110: 
 var $storemerge_i30;
 var $423=HEAP32[(($417)>>2)];
 var $424=HEAP32[(($418)>>2)];
 var $425=$423;
 var $426=$424;
 var $427=((($425)-($426))|0);
 var $428=(((($427|0))/(28))&-1);
 var $429=($storemerge_i30>>>0)<($428>>>0);
 if($429){label=111;break;}else{label=114;break;}
 case 111: 
 var $431=HEAP32[(($421)>>2)];
 var $432=(($431+($storemerge_i30<<8))|0);
 var $433=(($422+($storemerge_i30<<8))|0);
 assert($s % 1 === 0);(_memcpy($432, $433, $s)|0);
 var $434=((($storemerge_i30)+(1))|0);
 var $storemerge_i30=$434;label=110;break;
 case 112: 
 var $436$0 = ___cxa_find_matching_catch(); var $436$1 = tempRet0;
 var $437=$436$0;
 var $438=$436$1;
 var $439=HEAP8[(($308)>>0)];
 var $440=$439&1;
 var $441=(($440<<24)>>24)==0;
 if($441){var $_045=$437;var $_046=$438;label=468;break;}else{label=113;break;}
 case 113: 
 var $443=(($29+8)|0);
 var $444=HEAP32[(($443)>>2)];
 _free($444);
 var $_045=$437;var $_046=$438;label=468;break;
 case 114: 
 var $446=(($pa_i+4)|0);
 var $447=$446;
 var $storemerge_i_i=0;label=115;break;
 case 115: 
 var $storemerge_i_i;
 var $449=($storemerge_i_i>>>0)<3;
 if($449){label=116;break;}else{label=117;break;}
 case 116: 
 var $451=(($447+($storemerge_i_i<<2))|0);
 HEAP32[(($451)>>2)]=0;
 var $452=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$452;label=115;break;
 case 117: 
 var $453=(($pa_i+4)|0);
 var $454=_strlen($name);
 var $455=($454>>>0)>4294967279;
 if($455){label=118;break;}else{label=120;break;}
 case 118: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=150;break; }
 case 119: 
 throw "Reached an unreachable!";
 case 120: 
 var $458=($454>>>0)<11;
 if($458){label=121;break;}else{label=122;break;}
 case 121: 
 var $460=$454<<1;
 var $461=(($460)&255);
 HEAP8[(($310)>>0)]=$461;
 var $462=$30;
 var $463=(($462+1)|0);
 var $__p_0_i15_i=$463;label=129;break;
 case 122: 
 var $464=((($454)+(16))|0);
 var $465=$464&-16;
 var $466=($465|0)==0;
 var $_size_i19_i=($466?1:$465);
 var $467=_malloc($_size_i19_i);
 var $468=($467|0)==0;
 if($468){label=123;break;}else{var $_lcssa_i21_i=$467;label=128;break;}
 case 123: 
 var $469=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $470=($469|0)==0;
 if($470){label=126;break;}else{label=124;break;}
 case 124: 
 var $472=$469;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$472]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=125;break; } else { label=149;break; }
 case 125: 
 var $473=_malloc($_size_i19_i);
 var $474=($473|0)==0;
 if($474){label=123;break;}else{var $_lcssa_i21_i=$473;label=128;break;}
 case 126: 
 var $476=___cxa_allocate_exception(4);
 var $477=$476;
 HEAP32[(($477)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($476,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=150;break; }
 case 127: 
 throw "Reached an unreachable!";
 case 128: 
 var $_lcssa_i21_i;
 var $478=(($30+8)|0);
 HEAP32[(($478)>>2)]=$_lcssa_i21_i;
 var $479=$465|1;
 var $480=(($30)|0);
 HEAP32[(($480)>>2)]=$479;
 var $481=(($30+4)|0);
 HEAP32[(($481)>>2)]=$454;
 var $__p_0_i15_i=$_lcssa_i21_i;label=129;break;
 case 129: 
 var $__p_0_i15_i;
 assert($454 % 1 === 0);(_memcpy($__p_0_i15_i, $name, $454)|0);
 var $482=(($__p_0_i15_i+$454)|0);
 HEAP8[(($482)>>0)]=0;
 var $483=$453;
 var $484=HEAP8[(($483)>>0)];
 var $485=$484&1;
 var $486=(($485<<24)>>24)==0;
 if($486){label=131;break;}else{label=130;break;}
 case 130: 
 var $488=(($pa_i+12)|0);
 var $489=HEAP32[(($488)>>2)];
 HEAP8[(($489)>>0)]=0;
 var $490=(($pa_i+8)|0);
 HEAP32[(($490)>>2)]=0;
 label=132;break;
 case 131: 
 var $492=$453;
 var $493=(($492+1)|0);
 HEAP8[(($493)>>0)]=0;
 HEAP8[(($483)>>0)]=0;
 label=132;break;
 case 132: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($453,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=133;break; }
 case 133: 
 var $495$0 = ___cxa_find_matching_catch(0); var $495$1 = tempRet0;
 var $496=$495$0;
 ___clang_call_terminate($496);
 throw "Reached an unreachable!";
 case 134: 
 assert(12 % 1 === 0);HEAP32[(($483)>>2)]=HEAP32[(($310)>>2)];HEAP32[((($483)+(4))>>2)]=HEAP32[((($310)+(4))>>2)];HEAP32[((($483)+(8))>>2)]=HEAP32[((($310)+(8))>>2)];
 var $497=$30;
 var $storemerge1_i=0;label=135;break;
 case 135: 
 var $storemerge1_i;
 var $499=($storemerge1_i>>>0)<3;
 if($499){label=136;break;}else{label=137;break;}
 case 136: 
 var $501=(($497+($storemerge1_i<<2))|0);
 HEAP32[(($501)>>2)]=0;
 var $502=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$502;label=135;break;
 case 137: 
 var $503=HEAP8[(($310)>>0)];
 var $504=$503&1;
 var $505=(($504<<24)>>24)==0;
 if($505){label=139;break;}else{label=138;break;}
 case 138: 
 var $507=(($30+8)|0);
 var $508=HEAP32[(($507)>>2)];
 _free($508);
 label=139;break;
 case 139: 
 var $509=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($27,$509,$pa_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=140;break; } else { label=150;break; }
 case 140: 
 var $510=(($27)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(($511+16)|0);
 var $513=(($512)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=(($pa_i)|0);
 HEAP32[(($515)>>2)]=$514;
 var $516=(($511+20)|0);
 var $517=($pa_i|0)==($512|0);
 if($517){label=145;break;}else{label=141;break;}
 case 141: 
 var $519=$516;
 var $520=HEAP8[(($519)>>0)];
 var $521=$520&1;
 var $522=(($521<<24)>>24)==0;
 if($522){label=143;break;}else{label=142;break;}
 case 142: 
 var $524=(($511+28)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=(($511+24)|0);
 var $527=HEAP32[(($526)>>2)];
 var $534=$527;var $533=$525;label=144;break;
 case 143: 
 var $529=$516;
 var $530=(($529+1)|0);
 var $531=($520&255);
 var $532=$531>>>1;
 var $534=$532;var $533=$530;label=144;break;
 case 144: 
 var $533;
 var $534;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($453,$533,$534) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=150;break; }
 case 145: 
 var $535=(($pa_i+16)|0);
 var $536=(($511+32)|0);
 var $537=$535;
 var $538=$536;
 assert(12 % 1 === 0);HEAP32[(($537)>>2)]=HEAP32[(($538)>>2)];HEAP32[((($537)+(4))>>2)]=HEAP32[((($538)+(4))>>2)];HEAP32[((($537)+(8))>>2)]=HEAP32[((($538)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($26,$509,$511);
 var $539=(($pa_i+20)|0);
 HEAP32[(($539)>>2)]=$380;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($25,$509,$pa_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=146;break; } else { label=150;break; }
 case 146: 
 var $540=(($25+4)|0);
 var $541=HEAP8[(($540)>>0)];
 var $542=$541&1;
 var $543=(($542<<24)>>24)==0;
 if($543){label=147;break;}else{label=153;break;}
 case 147: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=150;break; }
 case 148: 
 throw "Reached an unreachable!";
 case 149: 
 var $lpad_loopexit49$0 = ___cxa_find_matching_catch(); var $lpad_loopexit49$1 = tempRet0;
 var $lpad_phi51$1=$lpad_loopexit49$1;var $lpad_phi51$0=$lpad_loopexit49$0;label=151;break;
 case 150: 
 var $lpad_nonloopexit50$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit50$1 = tempRet0;
 var $lpad_phi51$1=$lpad_nonloopexit50$1;var $lpad_phi51$0=$lpad_nonloopexit50$0;label=151;break;
 case 151: 
 var $lpad_phi51$0;
 var $lpad_phi51$1;
 var $547=$lpad_phi51$0;
 var $548=$lpad_phi51$1;
 var $549=$453;
 var $550=HEAP8[(($549)>>0)];
 var $551=$550&1;
 var $552=(($551<<24)>>24)==0;
 if($552){var $_045=$547;var $_046=$548;label=468;break;}else{label=152;break;}
 case 152: 
 var $554=(($pa_i+12)|0);
 var $555=HEAP32[(($554)>>2)];
 _free($555);
 var $_045=$547;var $_046=$548;label=468;break;
 case 153: 
 var $557=HEAP8[(($483)>>0)];
 var $558=$557&1;
 var $559=(($558<<24)>>24)==0;
 if($559){label=469;break;}else{label=154;break;}
 case 154: 
 var $561=(($pa_i+12)|0);
 var $562=HEAP32[(($561)>>2)];
 _free($562);
 label=469;break;
 case 155: 
 var $564=$19;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $565=$20;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $566=$21;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $567=$h_i_i;
 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $568=$22;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $569=$h1_i_i;
 var $$etemp$14$0=8;
 var $$etemp$14$1=0;

 var $570=$23;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $571=$pa_i_i;
 var $$etemp$16$0=28;
 var $$etemp$16$1=0;

 var $572=$24;
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $573=($s|0)==512;
 if($573){label=156;break;}else{label=173;break;}
 case 156: 
 var $575=_strlen($name);
 var $576=($575>>>0)>4294967279;
 if($576){label=157;break;}else{label=158;break;}
 case 157: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 158: 
 var $579=($575>>>0)<11;
 if($579){label=159;break;}else{label=160;break;}
 case 159: 
 var $581=$575<<1;
 var $582=(($581)&255);
 HEAP8[(($568)>>0)]=$582;
 var $583=$22;
 var $584=(($583+1)|0);
 var $__p_0_i_i_i=$584;label=165;break;
 case 160: 
 var $585=((($575)+(16))|0);
 var $586=$585&-16;
 var $587=($586|0)==0;
 var $_size_i_i_i=($587?1:$586);
 var $588=_malloc($_size_i_i_i);
 var $589=($588|0)==0;
 if($589){label=161;break;}else{var $_lcssa_i_i_i=$588;label=164;break;}
 case 161: 
 var $590=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $591=($590|0)==0;
 if($591){label=163;break;}else{label=162;break;}
 case 162: 
 var $593=$590;
 FUNCTION_TABLE[$593]();
 var $594=_malloc($_size_i_i_i);
 var $595=($594|0)==0;
 if($595){label=161;break;}else{var $_lcssa_i_i_i=$594;label=164;break;}
 case 163: 
 var $597=___cxa_allocate_exception(4);
 var $598=$597;
 HEAP32[(($598)>>2)]=15192;
 ___cxa_throw($597,26096,(782));
 throw "Reached an unreachable!";
 case 164: 
 var $_lcssa_i_i_i;
 var $599=(($22+8)|0);
 HEAP32[(($599)>>2)]=$_lcssa_i_i_i;
 var $600=$586|1;
 var $601=(($22)|0);
 HEAP32[(($601)>>2)]=$600;
 var $602=(($22+4)|0);
 HEAP32[(($602)>>2)]=$575;
 var $__p_0_i_i_i=$_lcssa_i_i_i;label=165;break;
 case 165: 
 var $__p_0_i_i_i;
 assert($575 % 1 === 0);(_memcpy($__p_0_i_i_i, $name, $575)|0);
 var $603=(($__p_0_i_i_i+$575)|0);
 HEAP8[(($603)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i,$m,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=171;break; }
 case 166: 
 var $605=HEAP8[(($568)>>0)];
 var $606=$605&1;
 var $607=(($606<<24)>>24)==0;
 if($607){label=168;break;}else{label=167;break;}
 case 167: 
 var $609=(($22+8)|0);
 var $610=HEAP32[(($609)>>2)];
 _free($610);
 label=168;break;
 case 168: 
 var $611=(($m+4)|0);
 var $612=(($m)|0);
 var $613=(($h_i_i)|0);
 var $614=HEAP32[(($613)>>2)];
 var $615=(($614+8)|0);
 var $616=$data;
 var $storemerge2_i_i=0;label=169;break;
 case 169: 
 var $storemerge2_i_i;
 var $617=HEAP32[(($611)>>2)];
 var $618=HEAP32[(($612)>>2)];
 var $619=$617;
 var $620=$618;
 var $621=((($619)-($620))|0);
 var $622=(((($621|0))/(28))&-1);
 var $623=($storemerge2_i_i>>>0)<($622>>>0);
 if($623){label=170;break;}else{label=469;break;}
 case 170: 
 var $625=HEAP32[(($615)>>2)];
 var $626=(($625+($storemerge2_i_i<<9))|0);
 var $627=(($616+($storemerge2_i_i<<9))|0);
 assert(512 % 1 === 0);(_memcpy($626, $627, 512)|0);
 var $628=((($storemerge2_i_i)+(1))|0);
 var $storemerge2_i_i=$628;label=169;break;
 case 171: 
 var $630$0 = ___cxa_find_matching_catch(); var $630$1 = tempRet0;
 var $631=$630$0;
 var $632=$630$1;
 var $633=HEAP8[(($568)>>0)];
 var $634=$633&1;
 var $635=(($634<<24)>>24)==0;
 if($635){var $_043=$631;var $_044=$632;label=467;break;}else{label=172;break;}
 case 172: 
 var $637=(($22+8)|0);
 var $638=HEAP32[(($637)>>2)];
 _free($638);
 var $_043=$631;var $_044=$632;label=467;break;
 case 173: 
 var $640=($s>>>0)<512;
 if($640){label=174;break;}else{label=232;break;}
 case 174: 
 var $642=(((512)-($s))|0);
 var $643=_strlen($name);
 var $644=($643>>>0)>4294967279;
 if($644){label=175;break;}else{label=176;break;}
 case 175: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 176: 
 var $647=($643>>>0)<11;
 if($647){label=177;break;}else{label=178;break;}
 case 177: 
 var $649=$643<<1;
 var $650=(($649)&255);
 HEAP8[(($570)>>0)]=$650;
 var $651=$23;
 var $652=(($651+1)|0);
 var $__p_0_i5_i_i=$652;label=183;break;
 case 178: 
 var $653=((($643)+(16))|0);
 var $654=$653&-16;
 var $655=($654|0)==0;
 var $_size_i7_i_i=($655?1:$654);
 var $656=_malloc($_size_i7_i_i);
 var $657=($656|0)==0;
 if($657){label=179;break;}else{var $_lcssa_i9_i_i=$656;label=182;break;}
 case 179: 
 var $658=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $659=($658|0)==0;
 if($659){label=181;break;}else{label=180;break;}
 case 180: 
 var $661=$658;
 FUNCTION_TABLE[$661]();
 var $662=_malloc($_size_i7_i_i);
 var $663=($662|0)==0;
 if($663){label=179;break;}else{var $_lcssa_i9_i_i=$662;label=182;break;}
 case 181: 
 var $665=___cxa_allocate_exception(4);
 var $666=$665;
 HEAP32[(($666)>>2)]=15192;
 ___cxa_throw($665,26096,(782));
 throw "Reached an unreachable!";
 case 182: 
 var $_lcssa_i9_i_i;
 var $667=(($23+8)|0);
 HEAP32[(($667)>>2)]=$_lcssa_i9_i_i;
 var $668=$654|1;
 var $669=(($23)|0);
 HEAP32[(($669)>>2)]=$668;
 var $670=(($23+4)|0);
 HEAP32[(($670)>>2)]=$643;
 var $__p_0_i5_i_i=$_lcssa_i9_i_i;label=183;break;
 case 183: 
 var $__p_0_i5_i_i;
 assert($643 % 1 === 0);(_memcpy($__p_0_i5_i_i, $name, $643)|0);
 var $671=(($__p_0_i5_i_i+$643)|0);
 HEAP8[(($671)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i,$m,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=184;break; } else { label=189;break; }
 case 184: 
 var $673=HEAP8[(($570)>>0)];
 var $674=$673&1;
 var $675=(($674<<24)>>24)==0;
 if($675){label=186;break;}else{label=185;break;}
 case 185: 
 var $677=(($23+8)|0);
 var $678=HEAP32[(($677)>>2)];
 _free($678);
 label=186;break;
 case 186: 
 var $679=(($m+4)|0);
 var $680=(($m)|0);
 var $681=(($h1_i_i)|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=(($682+8)|0);
 var $684=$data;
 var $storemerge_i30_i=0;label=187;break;
 case 187: 
 var $storemerge_i30_i;
 var $685=HEAP32[(($679)>>2)];
 var $686=HEAP32[(($680)>>2)];
 var $687=$685;
 var $688=$686;
 var $689=((($687)-($688))|0);
 var $690=(((($689|0))/(28))&-1);
 var $691=($storemerge_i30_i>>>0)<($690>>>0);
 if($691){label=188;break;}else{label=191;break;}
 case 188: 
 var $693=HEAP32[(($683)>>2)];
 var $694=(($693+($storemerge_i30_i<<9))|0);
 var $695=(($684+($storemerge_i30_i<<9))|0);
 assert($s % 1 === 0);(_memcpy($694, $695, $s)|0);
 var $696=((($storemerge_i30_i)+(1))|0);
 var $storemerge_i30_i=$696;label=187;break;
 case 189: 
 var $698$0 = ___cxa_find_matching_catch(); var $698$1 = tempRet0;
 var $699=$698$0;
 var $700=$698$1;
 var $701=HEAP8[(($570)>>0)];
 var $702=$701&1;
 var $703=(($702<<24)>>24)==0;
 if($703){var $_043=$699;var $_044=$700;label=467;break;}else{label=190;break;}
 case 190: 
 var $705=(($23+8)|0);
 var $706=HEAP32[(($705)>>2)];
 _free($706);
 var $_043=$699;var $_044=$700;label=467;break;
 case 191: 
 var $708=(($pa_i_i+4)|0);
 var $709=$708;
 var $storemerge_i_i_i=0;label=192;break;
 case 192: 
 var $storemerge_i_i_i;
 var $711=($storemerge_i_i_i>>>0)<3;
 if($711){label=193;break;}else{label=194;break;}
 case 193: 
 var $713=(($709+($storemerge_i_i_i<<2))|0);
 HEAP32[(($713)>>2)]=0;
 var $714=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$714;label=192;break;
 case 194: 
 var $715=(($pa_i_i+4)|0);
 var $716=_strlen($name);
 var $717=($716>>>0)>4294967279;
 if($717){label=195;break;}else{label=197;break;}
 case 195: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=227;break; }
 case 196: 
 throw "Reached an unreachable!";
 case 197: 
 var $720=($716>>>0)<11;
 if($720){label=198;break;}else{label=199;break;}
 case 198: 
 var $722=$716<<1;
 var $723=(($722)&255);
 HEAP8[(($572)>>0)]=$723;
 var $724=$24;
 var $725=(($724+1)|0);
 var $__p_0_i15_i_i=$725;label=206;break;
 case 199: 
 var $726=((($716)+(16))|0);
 var $727=$726&-16;
 var $728=($727|0)==0;
 var $_size_i19_i_i=($728?1:$727);
 var $729=_malloc($_size_i19_i_i);
 var $730=($729|0)==0;
 if($730){label=200;break;}else{var $_lcssa_i21_i_i=$729;label=205;break;}
 case 200: 
 var $731=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $732=($731|0)==0;
 if($732){label=203;break;}else{label=201;break;}
 case 201: 
 var $734=$731;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$734]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { label=226;break; }
 case 202: 
 var $735=_malloc($_size_i19_i_i);
 var $736=($735|0)==0;
 if($736){label=200;break;}else{var $_lcssa_i21_i_i=$735;label=205;break;}
 case 203: 
 var $738=___cxa_allocate_exception(4);
 var $739=$738;
 HEAP32[(($739)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($738,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=204;break; } else { label=227;break; }
 case 204: 
 throw "Reached an unreachable!";
 case 205: 
 var $_lcssa_i21_i_i;
 var $740=(($24+8)|0);
 HEAP32[(($740)>>2)]=$_lcssa_i21_i_i;
 var $741=$727|1;
 var $742=(($24)|0);
 HEAP32[(($742)>>2)]=$741;
 var $743=(($24+4)|0);
 HEAP32[(($743)>>2)]=$716;
 var $__p_0_i15_i_i=$_lcssa_i21_i_i;label=206;break;
 case 206: 
 var $__p_0_i15_i_i;
 assert($716 % 1 === 0);(_memcpy($__p_0_i15_i_i, $name, $716)|0);
 var $744=(($__p_0_i15_i_i+$716)|0);
 HEAP8[(($744)>>0)]=0;
 var $745=$715;
 var $746=HEAP8[(($745)>>0)];
 var $747=$746&1;
 var $748=(($747<<24)>>24)==0;
 if($748){label=208;break;}else{label=207;break;}
 case 207: 
 var $750=(($pa_i_i+12)|0);
 var $751=HEAP32[(($750)>>2)];
 HEAP8[(($751)>>0)]=0;
 var $752=(($pa_i_i+8)|0);
 HEAP32[(($752)>>2)]=0;
 label=209;break;
 case 208: 
 var $754=$715;
 var $755=(($754+1)|0);
 HEAP8[(($755)>>0)]=0;
 HEAP8[(($745)>>0)]=0;
 label=209;break;
 case 209: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($715,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { label=210;break; }
 case 210: 
 var $757$0 = ___cxa_find_matching_catch(0); var $757$1 = tempRet0;
 var $758=$757$0;
 ___clang_call_terminate($758);
 throw "Reached an unreachable!";
 case 211: 
 assert(12 % 1 === 0);HEAP32[(($745)>>2)]=HEAP32[(($572)>>2)];HEAP32[((($745)+(4))>>2)]=HEAP32[((($572)+(4))>>2)];HEAP32[((($745)+(8))>>2)]=HEAP32[((($572)+(8))>>2)];
 var $759=$24;
 var $storemerge1_i_i=0;label=212;break;
 case 212: 
 var $storemerge1_i_i;
 var $761=($storemerge1_i_i>>>0)<3;
 if($761){label=213;break;}else{label=214;break;}
 case 213: 
 var $763=(($759+($storemerge1_i_i<<2))|0);
 HEAP32[(($763)>>2)]=0;
 var $764=((($storemerge1_i_i)+(1))|0);
 var $storemerge1_i_i=$764;label=212;break;
 case 214: 
 var $765=HEAP8[(($572)>>0)];
 var $766=$765&1;
 var $767=(($766<<24)>>24)==0;
 if($767){label=216;break;}else{label=215;break;}
 case 215: 
 var $769=(($24+8)|0);
 var $770=HEAP32[(($769)>>2)];
 _free($770);
 label=216;break;
 case 216: 
 var $771=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($21,$771,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=217;break; } else { label=227;break; }
 case 217: 
 var $772=(($21)|0);
 var $773=HEAP32[(($772)>>2)];
 var $774=(($773+16)|0);
 var $775=(($774)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=(($pa_i_i)|0);
 HEAP32[(($777)>>2)]=$776;
 var $778=(($773+20)|0);
 var $779=($pa_i_i|0)==($774|0);
 if($779){label=222;break;}else{label=218;break;}
 case 218: 
 var $781=$778;
 var $782=HEAP8[(($781)>>0)];
 var $783=$782&1;
 var $784=(($783<<24)>>24)==0;
 if($784){label=220;break;}else{label=219;break;}
 case 219: 
 var $786=(($773+28)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=(($773+24)|0);
 var $789=HEAP32[(($788)>>2)];
 var $796=$789;var $795=$787;label=221;break;
 case 220: 
 var $791=$778;
 var $792=(($791+1)|0);
 var $793=($782&255);
 var $794=$793>>>1;
 var $796=$794;var $795=$792;label=221;break;
 case 221: 
 var $795;
 var $796;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($715,$795,$796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { label=227;break; }
 case 222: 
 var $797=(($pa_i_i+16)|0);
 var $798=(($773+32)|0);
 var $799=$797;
 var $800=$798;
 assert(12 % 1 === 0);HEAP32[(($799)>>2)]=HEAP32[(($800)>>2)];HEAP32[((($799)+(4))>>2)]=HEAP32[((($800)+(4))>>2)];HEAP32[((($799)+(8))>>2)]=HEAP32[((($800)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($20,$771,$773);
 var $801=(($pa_i_i+20)|0);
 HEAP32[(($801)>>2)]=$642;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($19,$771,$pa_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=223;break; } else { label=227;break; }
 case 223: 
 var $802=(($19+4)|0);
 var $803=HEAP8[(($802)>>0)];
 var $804=$803&1;
 var $805=(($804<<24)>>24)==0;
 if($805){label=224;break;}else{label=230;break;}
 case 224: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=225;break; } else { label=227;break; }
 case 225: 
 throw "Reached an unreachable!";
 case 226: 
 var $lpad_loopexit54$0 = ___cxa_find_matching_catch(); var $lpad_loopexit54$1 = tempRet0;
 var $lpad_phi56$1=$lpad_loopexit54$1;var $lpad_phi56$0=$lpad_loopexit54$0;label=228;break;
 case 227: 
 var $lpad_nonloopexit55$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit55$1 = tempRet0;
 var $lpad_phi56$1=$lpad_nonloopexit55$1;var $lpad_phi56$0=$lpad_nonloopexit55$0;label=228;break;
 case 228: 
 var $lpad_phi56$0;
 var $lpad_phi56$1;
 var $809=$lpad_phi56$0;
 var $810=$lpad_phi56$1;
 var $811=$715;
 var $812=HEAP8[(($811)>>0)];
 var $813=$812&1;
 var $814=(($813<<24)>>24)==0;
 if($814){var $_043=$809;var $_044=$810;label=467;break;}else{label=229;break;}
 case 229: 
 var $816=(($pa_i_i+12)|0);
 var $817=HEAP32[(($816)>>2)];
 _free($817);
 var $_043=$809;var $_044=$810;label=467;break;
 case 230: 
 var $819=HEAP8[(($745)>>0)];
 var $820=$819&1;
 var $821=(($820<<24)>>24)==0;
 if($821){label=469;break;}else{label=231;break;}
 case 231: 
 var $823=(($pa_i_i+12)|0);
 var $824=HEAP32[(($823)>>2)];
 _free($824);
 label=469;break;
 case 232: 
 var $826=$13;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $827=$14;
 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $828=$15;
 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $829=$h_i_i_i;
 var $$etemp$21$0=8;
 var $$etemp$21$1=0;

 var $830=$16;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $831=$h1_i_i_i;
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $832=$17;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $833=$pa_i_i_i;
 var $$etemp$25$0=28;
 var $$etemp$25$1=0;

 var $834=$18;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $835=($s|0)==1024;
 if($835){label=233;break;}else{label=250;break;}
 case 233: 
 var $837=_strlen($name);
 var $838=($837>>>0)>4294967279;
 if($838){label=234;break;}else{label=235;break;}
 case 234: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 235: 
 var $841=($837>>>0)<11;
 if($841){label=236;break;}else{label=237;break;}
 case 236: 
 var $843=$837<<1;
 var $844=(($843)&255);
 HEAP8[(($830)>>0)]=$844;
 var $845=$16;
 var $846=(($845+1)|0);
 var $__p_0_i_i_i_i=$846;label=242;break;
 case 237: 
 var $847=((($837)+(16))|0);
 var $848=$847&-16;
 var $849=($848|0)==0;
 var $_size_i_i_i_i=($849?1:$848);
 var $850=_malloc($_size_i_i_i_i);
 var $851=($850|0)==0;
 if($851){label=238;break;}else{var $_lcssa_i_i_i_i=$850;label=241;break;}
 case 238: 
 var $852=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $853=($852|0)==0;
 if($853){label=240;break;}else{label=239;break;}
 case 239: 
 var $855=$852;
 FUNCTION_TABLE[$855]();
 var $856=_malloc($_size_i_i_i_i);
 var $857=($856|0)==0;
 if($857){label=238;break;}else{var $_lcssa_i_i_i_i=$856;label=241;break;}
 case 240: 
 var $859=___cxa_allocate_exception(4);
 var $860=$859;
 HEAP32[(($860)>>2)]=15192;
 ___cxa_throw($859,26096,(782));
 throw "Reached an unreachable!";
 case 241: 
 var $_lcssa_i_i_i_i;
 var $861=(($16+8)|0);
 HEAP32[(($861)>>2)]=$_lcssa_i_i_i_i;
 var $862=$848|1;
 var $863=(($16)|0);
 HEAP32[(($863)>>2)]=$862;
 var $864=(($16+4)|0);
 HEAP32[(($864)>>2)]=$837;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=242;break;
 case 242: 
 var $__p_0_i_i_i_i;
 assert($837 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $name, $837)|0);
 var $865=(($__p_0_i_i_i_i+$837)|0);
 HEAP8[(($865)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i,$m,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=243;break; } else { label=248;break; }
 case 243: 
 var $867=HEAP8[(($830)>>0)];
 var $868=$867&1;
 var $869=(($868<<24)>>24)==0;
 if($869){label=245;break;}else{label=244;break;}
 case 244: 
 var $871=(($16+8)|0);
 var $872=HEAP32[(($871)>>2)];
 _free($872);
 label=245;break;
 case 245: 
 var $873=(($m+4)|0);
 var $874=(($m)|0);
 var $875=(($h_i_i_i)|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=(($876+8)|0);
 var $878=$data;
 var $storemerge2_i_i_i=0;label=246;break;
 case 246: 
 var $storemerge2_i_i_i;
 var $879=HEAP32[(($873)>>2)];
 var $880=HEAP32[(($874)>>2)];
 var $881=$879;
 var $882=$880;
 var $883=((($881)-($882))|0);
 var $884=(((($883|0))/(28))&-1);
 var $885=($storemerge2_i_i_i>>>0)<($884>>>0);
 if($885){label=247;break;}else{label=469;break;}
 case 247: 
 var $887=HEAP32[(($877)>>2)];
 var $888=(($887+($storemerge2_i_i_i<<10))|0);
 var $889=(($878+($storemerge2_i_i_i<<10))|0);
 assert(1024 % 1 === 0);(_memcpy($888, $889, 1024)|0);
 var $890=((($storemerge2_i_i_i)+(1))|0);
 var $storemerge2_i_i_i=$890;label=246;break;
 case 248: 
 var $892$0 = ___cxa_find_matching_catch(); var $892$1 = tempRet0;
 var $893=$892$0;
 var $894=$892$1;
 var $895=HEAP8[(($830)>>0)];
 var $896=$895&1;
 var $897=(($896<<24)>>24)==0;
 if($897){var $_039=$893;var $_040=$894;label=466;break;}else{label=249;break;}
 case 249: 
 var $899=(($16+8)|0);
 var $900=HEAP32[(($899)>>2)];
 _free($900);
 var $_039=$893;var $_040=$894;label=466;break;
 case 250: 
 var $902=($s>>>0)<1024;
 if($902){label=251;break;}else{label=309;break;}
 case 251: 
 var $904=(((1024)-($s))|0);
 var $905=_strlen($name);
 var $906=($905>>>0)>4294967279;
 if($906){label=252;break;}else{label=253;break;}
 case 252: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 253: 
 var $909=($905>>>0)<11;
 if($909){label=254;break;}else{label=255;break;}
 case 254: 
 var $911=$905<<1;
 var $912=(($911)&255);
 HEAP8[(($832)>>0)]=$912;
 var $913=$17;
 var $914=(($913+1)|0);
 var $__p_0_i5_i_i_i=$914;label=260;break;
 case 255: 
 var $915=((($905)+(16))|0);
 var $916=$915&-16;
 var $917=($916|0)==0;
 var $_size_i7_i_i_i=($917?1:$916);
 var $918=_malloc($_size_i7_i_i_i);
 var $919=($918|0)==0;
 if($919){label=256;break;}else{var $_lcssa_i9_i_i_i=$918;label=259;break;}
 case 256: 
 var $920=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $921=($920|0)==0;
 if($921){label=258;break;}else{label=257;break;}
 case 257: 
 var $923=$920;
 FUNCTION_TABLE[$923]();
 var $924=_malloc($_size_i7_i_i_i);
 var $925=($924|0)==0;
 if($925){label=256;break;}else{var $_lcssa_i9_i_i_i=$924;label=259;break;}
 case 258: 
 var $927=___cxa_allocate_exception(4);
 var $928=$927;
 HEAP32[(($928)>>2)]=15192;
 ___cxa_throw($927,26096,(782));
 throw "Reached an unreachable!";
 case 259: 
 var $_lcssa_i9_i_i_i;
 var $929=(($17+8)|0);
 HEAP32[(($929)>>2)]=$_lcssa_i9_i_i_i;
 var $930=$916|1;
 var $931=(($17)|0);
 HEAP32[(($931)>>2)]=$930;
 var $932=(($17+4)|0);
 HEAP32[(($932)>>2)]=$905;
 var $__p_0_i5_i_i_i=$_lcssa_i9_i_i_i;label=260;break;
 case 260: 
 var $__p_0_i5_i_i_i;
 assert($905 % 1 === 0);(_memcpy($__p_0_i5_i_i_i, $name, $905)|0);
 var $933=(($__p_0_i5_i_i_i+$905)|0);
 HEAP8[(($933)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i,$m,$17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=261;break; } else { label=266;break; }
 case 261: 
 var $935=HEAP8[(($832)>>0)];
 var $936=$935&1;
 var $937=(($936<<24)>>24)==0;
 if($937){label=263;break;}else{label=262;break;}
 case 262: 
 var $939=(($17+8)|0);
 var $940=HEAP32[(($939)>>2)];
 _free($940);
 label=263;break;
 case 263: 
 var $941=(($m+4)|0);
 var $942=(($m)|0);
 var $943=(($h1_i_i_i)|0);
 var $944=HEAP32[(($943)>>2)];
 var $945=(($944+8)|0);
 var $946=$data;
 var $storemerge_i30_i_i=0;label=264;break;
 case 264: 
 var $storemerge_i30_i_i;
 var $947=HEAP32[(($941)>>2)];
 var $948=HEAP32[(($942)>>2)];
 var $949=$947;
 var $950=$948;
 var $951=((($949)-($950))|0);
 var $952=(((($951|0))/(28))&-1);
 var $953=($storemerge_i30_i_i>>>0)<($952>>>0);
 if($953){label=265;break;}else{label=268;break;}
 case 265: 
 var $955=HEAP32[(($945)>>2)];
 var $956=(($955+($storemerge_i30_i_i<<10))|0);
 var $957=(($946+($storemerge_i30_i_i<<10))|0);
 assert($s % 1 === 0);(_memcpy($956, $957, $s)|0);
 var $958=((($storemerge_i30_i_i)+(1))|0);
 var $storemerge_i30_i_i=$958;label=264;break;
 case 266: 
 var $960$0 = ___cxa_find_matching_catch(); var $960$1 = tempRet0;
 var $961=$960$0;
 var $962=$960$1;
 var $963=HEAP8[(($832)>>0)];
 var $964=$963&1;
 var $965=(($964<<24)>>24)==0;
 if($965){var $_039=$961;var $_040=$962;label=466;break;}else{label=267;break;}
 case 267: 
 var $967=(($17+8)|0);
 var $968=HEAP32[(($967)>>2)];
 _free($968);
 var $_039=$961;var $_040=$962;label=466;break;
 case 268: 
 var $970=(($pa_i_i_i+4)|0);
 var $971=$970;
 var $storemerge_i_i_i_i=0;label=269;break;
 case 269: 
 var $storemerge_i_i_i_i;
 var $973=($storemerge_i_i_i_i>>>0)<3;
 if($973){label=270;break;}else{label=271;break;}
 case 270: 
 var $975=(($971+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($975)>>2)]=0;
 var $976=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$976;label=269;break;
 case 271: 
 var $977=(($pa_i_i_i+4)|0);
 var $978=_strlen($name);
 var $979=($978>>>0)>4294967279;
 if($979){label=272;break;}else{label=274;break;}
 case 272: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=273;break; } else { label=304;break; }
 case 273: 
 throw "Reached an unreachable!";
 case 274: 
 var $982=($978>>>0)<11;
 if($982){label=275;break;}else{label=276;break;}
 case 275: 
 var $984=$978<<1;
 var $985=(($984)&255);
 HEAP8[(($834)>>0)]=$985;
 var $986=$18;
 var $987=(($986+1)|0);
 var $__p_0_i15_i_i_i=$987;label=283;break;
 case 276: 
 var $988=((($978)+(16))|0);
 var $989=$988&-16;
 var $990=($989|0)==0;
 var $_size_i19_i_i_i=($990?1:$989);
 var $991=_malloc($_size_i19_i_i_i);
 var $992=($991|0)==0;
 if($992){label=277;break;}else{var $_lcssa_i21_i_i_i=$991;label=282;break;}
 case 277: 
 var $993=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $994=($993|0)==0;
 if($994){label=280;break;}else{label=278;break;}
 case 278: 
 var $996=$993;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$996]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=279;break; } else { label=303;break; }
 case 279: 
 var $997=_malloc($_size_i19_i_i_i);
 var $998=($997|0)==0;
 if($998){label=277;break;}else{var $_lcssa_i21_i_i_i=$997;label=282;break;}
 case 280: 
 var $1000=___cxa_allocate_exception(4);
 var $1001=$1000;
 HEAP32[(($1001)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1000,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=281;break; } else { label=304;break; }
 case 281: 
 throw "Reached an unreachable!";
 case 282: 
 var $_lcssa_i21_i_i_i;
 var $1002=(($18+8)|0);
 HEAP32[(($1002)>>2)]=$_lcssa_i21_i_i_i;
 var $1003=$989|1;
 var $1004=(($18)|0);
 HEAP32[(($1004)>>2)]=$1003;
 var $1005=(($18+4)|0);
 HEAP32[(($1005)>>2)]=$978;
 var $__p_0_i15_i_i_i=$_lcssa_i21_i_i_i;label=283;break;
 case 283: 
 var $__p_0_i15_i_i_i;
 assert($978 % 1 === 0);(_memcpy($__p_0_i15_i_i_i, $name, $978)|0);
 var $1006=(($__p_0_i15_i_i_i+$978)|0);
 HEAP8[(($1006)>>0)]=0;
 var $1007=$977;
 var $1008=HEAP8[(($1007)>>0)];
 var $1009=$1008&1;
 var $1010=(($1009<<24)>>24)==0;
 if($1010){label=285;break;}else{label=284;break;}
 case 284: 
 var $1012=(($pa_i_i_i+12)|0);
 var $1013=HEAP32[(($1012)>>2)];
 HEAP8[(($1013)>>0)]=0;
 var $1014=(($pa_i_i_i+8)|0);
 HEAP32[(($1014)>>2)]=0;
 label=286;break;
 case 285: 
 var $1016=$977;
 var $1017=(($1016+1)|0);
 HEAP8[(($1017)>>0)]=0;
 HEAP8[(($1007)>>0)]=0;
 label=286;break;
 case 286: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($977,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=288;break; } else { label=287;break; }
 case 287: 
 var $1019$0 = ___cxa_find_matching_catch(0); var $1019$1 = tempRet0;
 var $1020=$1019$0;
 ___clang_call_terminate($1020);
 throw "Reached an unreachable!";
 case 288: 
 assert(12 % 1 === 0);HEAP32[(($1007)>>2)]=HEAP32[(($834)>>2)];HEAP32[((($1007)+(4))>>2)]=HEAP32[((($834)+(4))>>2)];HEAP32[((($1007)+(8))>>2)]=HEAP32[((($834)+(8))>>2)];
 var $1021=$18;
 var $storemerge1_i_i_i=0;label=289;break;
 case 289: 
 var $storemerge1_i_i_i;
 var $1023=($storemerge1_i_i_i>>>0)<3;
 if($1023){label=290;break;}else{label=291;break;}
 case 290: 
 var $1025=(($1021+($storemerge1_i_i_i<<2))|0);
 HEAP32[(($1025)>>2)]=0;
 var $1026=((($storemerge1_i_i_i)+(1))|0);
 var $storemerge1_i_i_i=$1026;label=289;break;
 case 291: 
 var $1027=HEAP8[(($834)>>0)];
 var $1028=$1027&1;
 var $1029=(($1028<<24)>>24)==0;
 if($1029){label=293;break;}else{label=292;break;}
 case 292: 
 var $1031=(($18+8)|0);
 var $1032=HEAP32[(($1031)>>2)];
 _free($1032);
 label=293;break;
 case 293: 
 var $1033=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($15,$1033,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=304;break; }
 case 294: 
 var $1034=(($15)|0);
 var $1035=HEAP32[(($1034)>>2)];
 var $1036=(($1035+16)|0);
 var $1037=(($1036)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=(($pa_i_i_i)|0);
 HEAP32[(($1039)>>2)]=$1038;
 var $1040=(($1035+20)|0);
 var $1041=($pa_i_i_i|0)==($1036|0);
 if($1041){label=299;break;}else{label=295;break;}
 case 295: 
 var $1043=$1040;
 var $1044=HEAP8[(($1043)>>0)];
 var $1045=$1044&1;
 var $1046=(($1045<<24)>>24)==0;
 if($1046){label=297;break;}else{label=296;break;}
 case 296: 
 var $1048=(($1035+28)|0);
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=(($1035+24)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1058=$1051;var $1057=$1049;label=298;break;
 case 297: 
 var $1053=$1040;
 var $1054=(($1053+1)|0);
 var $1055=($1044&255);
 var $1056=$1055>>>1;
 var $1058=$1056;var $1057=$1054;label=298;break;
 case 298: 
 var $1057;
 var $1058;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($977,$1057,$1058) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=299;break; } else { label=304;break; }
 case 299: 
 var $1059=(($pa_i_i_i+16)|0);
 var $1060=(($1035+32)|0);
 var $1061=$1059;
 var $1062=$1060;
 assert(12 % 1 === 0);HEAP32[(($1061)>>2)]=HEAP32[(($1062)>>2)];HEAP32[((($1061)+(4))>>2)]=HEAP32[((($1062)+(4))>>2)];HEAP32[((($1061)+(8))>>2)]=HEAP32[((($1062)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($14,$1033,$1035);
 var $1063=(($pa_i_i_i+20)|0);
 HEAP32[(($1063)>>2)]=$904;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($13,$1033,$pa_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=304;break; }
 case 300: 
 var $1064=(($13+4)|0);
 var $1065=HEAP8[(($1064)>>0)];
 var $1066=$1065&1;
 var $1067=(($1066<<24)>>24)==0;
 if($1067){label=301;break;}else{label=307;break;}
 case 301: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=302;break; } else { label=304;break; }
 case 302: 
 throw "Reached an unreachable!";
 case 303: 
 var $lpad_loopexit59$0 = ___cxa_find_matching_catch(); var $lpad_loopexit59$1 = tempRet0;
 var $lpad_phi61$1=$lpad_loopexit59$1;var $lpad_phi61$0=$lpad_loopexit59$0;label=305;break;
 case 304: 
 var $lpad_nonloopexit60$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit60$1 = tempRet0;
 var $lpad_phi61$1=$lpad_nonloopexit60$1;var $lpad_phi61$0=$lpad_nonloopexit60$0;label=305;break;
 case 305: 
 var $lpad_phi61$0;
 var $lpad_phi61$1;
 var $1071=$lpad_phi61$0;
 var $1072=$lpad_phi61$1;
 var $1073=$977;
 var $1074=HEAP8[(($1073)>>0)];
 var $1075=$1074&1;
 var $1076=(($1075<<24)>>24)==0;
 if($1076){var $_039=$1071;var $_040=$1072;label=466;break;}else{label=306;break;}
 case 306: 
 var $1078=(($pa_i_i_i+12)|0);
 var $1079=HEAP32[(($1078)>>2)];
 _free($1079);
 var $_039=$1071;var $_040=$1072;label=466;break;
 case 307: 
 var $1081=HEAP8[(($1007)>>0)];
 var $1082=$1081&1;
 var $1083=(($1082<<24)>>24)==0;
 if($1083){label=469;break;}else{label=308;break;}
 case 308: 
 var $1085=(($pa_i_i_i+12)|0);
 var $1086=HEAP32[(($1085)>>2)];
 _free($1086);
 label=469;break;
 case 309: 
 var $1088=$7;
 var $$etemp$27$0=8;
 var $$etemp$27$1=0;

 var $1089=$8;
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $1090=$9;
 var $$etemp$29$0=4;
 var $$etemp$29$1=0;

 var $1091=$h_i_i_i_i;
 var $$etemp$30$0=8;
 var $$etemp$30$1=0;

 var $1092=$10;
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $1093=$h1_i_i_i_i;
 var $$etemp$32$0=8;
 var $$etemp$32$1=0;

 var $1094=$11;
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $1095=$pa_i_i_i_i;
 var $$etemp$34$0=28;
 var $$etemp$34$1=0;

 var $1096=$12;
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $1097=($s|0)==2048;
 if($1097){label=310;break;}else{label=327;break;}
 case 310: 
 var $1099=_strlen($name);
 var $1100=($1099>>>0)>4294967279;
 if($1100){label=311;break;}else{label=312;break;}
 case 311: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 312: 
 var $1103=($1099>>>0)<11;
 if($1103){label=313;break;}else{label=314;break;}
 case 313: 
 var $1105=$1099<<1;
 var $1106=(($1105)&255);
 HEAP8[(($1092)>>0)]=$1106;
 var $1107=$10;
 var $1108=(($1107+1)|0);
 var $__p_0_i_i_i_i_i=$1108;label=319;break;
 case 314: 
 var $1109=((($1099)+(16))|0);
 var $1110=$1109&-16;
 var $1111=($1110|0)==0;
 var $_size_i_i_i_i_i=($1111?1:$1110);
 var $1112=_malloc($_size_i_i_i_i_i);
 var $1113=($1112|0)==0;
 if($1113){label=315;break;}else{var $_lcssa_i_i_i_i_i=$1112;label=318;break;}
 case 315: 
 var $1114=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1115=($1114|0)==0;
 if($1115){label=317;break;}else{label=316;break;}
 case 316: 
 var $1117=$1114;
 FUNCTION_TABLE[$1117]();
 var $1118=_malloc($_size_i_i_i_i_i);
 var $1119=($1118|0)==0;
 if($1119){label=315;break;}else{var $_lcssa_i_i_i_i_i=$1118;label=318;break;}
 case 317: 
 var $1121=___cxa_allocate_exception(4);
 var $1122=$1121;
 HEAP32[(($1122)>>2)]=15192;
 ___cxa_throw($1121,26096,(782));
 throw "Reached an unreachable!";
 case 318: 
 var $_lcssa_i_i_i_i_i;
 var $1123=(($10+8)|0);
 HEAP32[(($1123)>>2)]=$_lcssa_i_i_i_i_i;
 var $1124=$1110|1;
 var $1125=(($10)|0);
 HEAP32[(($1125)>>2)]=$1124;
 var $1126=(($10+4)|0);
 HEAP32[(($1126)>>2)]=$1099;
 var $__p_0_i_i_i_i_i=$_lcssa_i_i_i_i_i;label=319;break;
 case 319: 
 var $__p_0_i_i_i_i_i;
 assert($1099 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i, $name, $1099)|0);
 var $1127=(($__p_0_i_i_i_i_i+$1099)|0);
 HEAP8[(($1127)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i,$m,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=320;break; } else { label=325;break; }
 case 320: 
 var $1129=HEAP8[(($1092)>>0)];
 var $1130=$1129&1;
 var $1131=(($1130<<24)>>24)==0;
 if($1131){label=322;break;}else{label=321;break;}
 case 321: 
 var $1133=(($10+8)|0);
 var $1134=HEAP32[(($1133)>>2)];
 _free($1134);
 label=322;break;
 case 322: 
 var $1135=(($m+4)|0);
 var $1136=(($m)|0);
 var $1137=(($h_i_i_i_i)|0);
 var $1138=HEAP32[(($1137)>>2)];
 var $1139=(($1138+8)|0);
 var $1140=$data;
 var $storemerge2_i_i_i_i=0;label=323;break;
 case 323: 
 var $storemerge2_i_i_i_i;
 var $1141=HEAP32[(($1135)>>2)];
 var $1142=HEAP32[(($1136)>>2)];
 var $1143=$1141;
 var $1144=$1142;
 var $1145=((($1143)-($1144))|0);
 var $1146=(((($1145|0))/(28))&-1);
 var $1147=($storemerge2_i_i_i_i>>>0)<($1146>>>0);
 if($1147){label=324;break;}else{label=469;break;}
 case 324: 
 var $1149=HEAP32[(($1139)>>2)];
 var $1150=(($1149+($storemerge2_i_i_i_i<<11))|0);
 var $1151=(($1140+($storemerge2_i_i_i_i<<11))|0);
 assert(2048 % 1 === 0);(_memcpy($1150, $1151, 2048)|0);
 var $1152=((($storemerge2_i_i_i_i)+(1))|0);
 var $storemerge2_i_i_i_i=$1152;label=323;break;
 case 325: 
 var $1154$0 = ___cxa_find_matching_catch(); var $1154$1 = tempRet0;
 var $1155=$1154$0;
 var $1156=$1154$1;
 var $1157=HEAP8[(($1092)>>0)];
 var $1158=$1157&1;
 var $1159=(($1158<<24)>>24)==0;
 if($1159){var $_037=$1155;var $_038=$1156;label=465;break;}else{label=326;break;}
 case 326: 
 var $1161=(($10+8)|0);
 var $1162=HEAP32[(($1161)>>2)];
 _free($1162);
 var $_037=$1155;var $_038=$1156;label=465;break;
 case 327: 
 var $1164=($s>>>0)<2048;
 if($1164){label=328;break;}else{label=386;break;}
 case 328: 
 var $1166=(((2048)-($s))|0);
 var $1167=_strlen($name);
 var $1168=($1167>>>0)>4294967279;
 if($1168){label=329;break;}else{label=330;break;}
 case 329: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 330: 
 var $1171=($1167>>>0)<11;
 if($1171){label=331;break;}else{label=332;break;}
 case 331: 
 var $1173=$1167<<1;
 var $1174=(($1173)&255);
 HEAP8[(($1094)>>0)]=$1174;
 var $1175=$11;
 var $1176=(($1175+1)|0);
 var $__p_0_i5_i_i_i_i=$1176;label=337;break;
 case 332: 
 var $1177=((($1167)+(16))|0);
 var $1178=$1177&-16;
 var $1179=($1178|0)==0;
 var $_size_i7_i_i_i_i=($1179?1:$1178);
 var $1180=_malloc($_size_i7_i_i_i_i);
 var $1181=($1180|0)==0;
 if($1181){label=333;break;}else{var $_lcssa_i9_i_i_i_i=$1180;label=336;break;}
 case 333: 
 var $1182=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1183=($1182|0)==0;
 if($1183){label=335;break;}else{label=334;break;}
 case 334: 
 var $1185=$1182;
 FUNCTION_TABLE[$1185]();
 var $1186=_malloc($_size_i7_i_i_i_i);
 var $1187=($1186|0)==0;
 if($1187){label=333;break;}else{var $_lcssa_i9_i_i_i_i=$1186;label=336;break;}
 case 335: 
 var $1189=___cxa_allocate_exception(4);
 var $1190=$1189;
 HEAP32[(($1190)>>2)]=15192;
 ___cxa_throw($1189,26096,(782));
 throw "Reached an unreachable!";
 case 336: 
 var $_lcssa_i9_i_i_i_i;
 var $1191=(($11+8)|0);
 HEAP32[(($1191)>>2)]=$_lcssa_i9_i_i_i_i;
 var $1192=$1178|1;
 var $1193=(($11)|0);
 HEAP32[(($1193)>>2)]=$1192;
 var $1194=(($11+4)|0);
 HEAP32[(($1194)>>2)]=$1167;
 var $__p_0_i5_i_i_i_i=$_lcssa_i9_i_i_i_i;label=337;break;
 case 337: 
 var $__p_0_i5_i_i_i_i;
 assert($1167 % 1 === 0);(_memcpy($__p_0_i5_i_i_i_i, $name, $1167)|0);
 var $1195=(($__p_0_i5_i_i_i_i+$1167)|0);
 HEAP8[(($1195)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i,$m,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=338;break; } else { label=343;break; }
 case 338: 
 var $1197=HEAP8[(($1094)>>0)];
 var $1198=$1197&1;
 var $1199=(($1198<<24)>>24)==0;
 if($1199){label=340;break;}else{label=339;break;}
 case 339: 
 var $1201=(($11+8)|0);
 var $1202=HEAP32[(($1201)>>2)];
 _free($1202);
 label=340;break;
 case 340: 
 var $1203=(($m+4)|0);
 var $1204=(($m)|0);
 var $1205=(($h1_i_i_i_i)|0);
 var $1206=HEAP32[(($1205)>>2)];
 var $1207=(($1206+8)|0);
 var $1208=$data;
 var $storemerge_i30_i_i_i=0;label=341;break;
 case 341: 
 var $storemerge_i30_i_i_i;
 var $1209=HEAP32[(($1203)>>2)];
 var $1210=HEAP32[(($1204)>>2)];
 var $1211=$1209;
 var $1212=$1210;
 var $1213=((($1211)-($1212))|0);
 var $1214=(((($1213|0))/(28))&-1);
 var $1215=($storemerge_i30_i_i_i>>>0)<($1214>>>0);
 if($1215){label=342;break;}else{label=345;break;}
 case 342: 
 var $1217=HEAP32[(($1207)>>2)];
 var $1218=(($1217+($storemerge_i30_i_i_i<<11))|0);
 var $1219=(($1208+($storemerge_i30_i_i_i<<11))|0);
 assert($s % 1 === 0);(_memcpy($1218, $1219, $s)|0);
 var $1220=((($storemerge_i30_i_i_i)+(1))|0);
 var $storemerge_i30_i_i_i=$1220;label=341;break;
 case 343: 
 var $1222$0 = ___cxa_find_matching_catch(); var $1222$1 = tempRet0;
 var $1223=$1222$0;
 var $1224=$1222$1;
 var $1225=HEAP8[(($1094)>>0)];
 var $1226=$1225&1;
 var $1227=(($1226<<24)>>24)==0;
 if($1227){var $_037=$1223;var $_038=$1224;label=465;break;}else{label=344;break;}
 case 344: 
 var $1229=(($11+8)|0);
 var $1230=HEAP32[(($1229)>>2)];
 _free($1230);
 var $_037=$1223;var $_038=$1224;label=465;break;
 case 345: 
 var $1232=(($pa_i_i_i_i+4)|0);
 var $1233=$1232;
 var $storemerge_i_i_i_i_i=0;label=346;break;
 case 346: 
 var $storemerge_i_i_i_i_i;
 var $1235=($storemerge_i_i_i_i_i>>>0)<3;
 if($1235){label=347;break;}else{label=348;break;}
 case 347: 
 var $1237=(($1233+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($1237)>>2)]=0;
 var $1238=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$1238;label=346;break;
 case 348: 
 var $1239=(($pa_i_i_i_i+4)|0);
 var $1240=_strlen($name);
 var $1241=($1240>>>0)>4294967279;
 if($1241){label=349;break;}else{label=351;break;}
 case 349: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=381;break; }
 case 350: 
 throw "Reached an unreachable!";
 case 351: 
 var $1244=($1240>>>0)<11;
 if($1244){label=352;break;}else{label=353;break;}
 case 352: 
 var $1246=$1240<<1;
 var $1247=(($1246)&255);
 HEAP8[(($1096)>>0)]=$1247;
 var $1248=$12;
 var $1249=(($1248+1)|0);
 var $__p_0_i15_i_i_i_i=$1249;label=360;break;
 case 353: 
 var $1250=((($1240)+(16))|0);
 var $1251=$1250&-16;
 var $1252=($1251|0)==0;
 var $_size_i19_i_i_i_i=($1252?1:$1251);
 var $1253=_malloc($_size_i19_i_i_i_i);
 var $1254=($1253|0)==0;
 if($1254){label=354;break;}else{var $_lcssa_i21_i_i_i_i=$1253;label=359;break;}
 case 354: 
 var $1255=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1256=($1255|0)==0;
 if($1256){label=357;break;}else{label=355;break;}
 case 355: 
 var $1258=$1255;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1258]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=356;break; } else { label=380;break; }
 case 356: 
 var $1259=_malloc($_size_i19_i_i_i_i);
 var $1260=($1259|0)==0;
 if($1260){label=354;break;}else{var $_lcssa_i21_i_i_i_i=$1259;label=359;break;}
 case 357: 
 var $1262=___cxa_allocate_exception(4);
 var $1263=$1262;
 HEAP32[(($1263)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1262,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=358;break; } else { label=381;break; }
 case 358: 
 throw "Reached an unreachable!";
 case 359: 
 var $_lcssa_i21_i_i_i_i;
 var $1264=(($12+8)|0);
 HEAP32[(($1264)>>2)]=$_lcssa_i21_i_i_i_i;
 var $1265=$1251|1;
 var $1266=(($12)|0);
 HEAP32[(($1266)>>2)]=$1265;
 var $1267=(($12+4)|0);
 HEAP32[(($1267)>>2)]=$1240;
 var $__p_0_i15_i_i_i_i=$_lcssa_i21_i_i_i_i;label=360;break;
 case 360: 
 var $__p_0_i15_i_i_i_i;
 assert($1240 % 1 === 0);(_memcpy($__p_0_i15_i_i_i_i, $name, $1240)|0);
 var $1268=(($__p_0_i15_i_i_i_i+$1240)|0);
 HEAP8[(($1268)>>0)]=0;
 var $1269=$1239;
 var $1270=HEAP8[(($1269)>>0)];
 var $1271=$1270&1;
 var $1272=(($1271<<24)>>24)==0;
 if($1272){label=362;break;}else{label=361;break;}
 case 361: 
 var $1274=(($pa_i_i_i_i+12)|0);
 var $1275=HEAP32[(($1274)>>2)];
 HEAP8[(($1275)>>0)]=0;
 var $1276=(($pa_i_i_i_i+8)|0);
 HEAP32[(($1276)>>2)]=0;
 label=363;break;
 case 362: 
 var $1278=$1239;
 var $1279=(($1278+1)|0);
 HEAP8[(($1279)>>0)]=0;
 HEAP8[(($1269)>>0)]=0;
 label=363;break;
 case 363: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1239,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=365;break; } else { label=364;break; }
 case 364: 
 var $1281$0 = ___cxa_find_matching_catch(0); var $1281$1 = tempRet0;
 var $1282=$1281$0;
 ___clang_call_terminate($1282);
 throw "Reached an unreachable!";
 case 365: 
 assert(12 % 1 === 0);HEAP32[(($1269)>>2)]=HEAP32[(($1096)>>2)];HEAP32[((($1269)+(4))>>2)]=HEAP32[((($1096)+(4))>>2)];HEAP32[((($1269)+(8))>>2)]=HEAP32[((($1096)+(8))>>2)];
 var $1283=$12;
 var $storemerge1_i_i_i_i=0;label=366;break;
 case 366: 
 var $storemerge1_i_i_i_i;
 var $1285=($storemerge1_i_i_i_i>>>0)<3;
 if($1285){label=367;break;}else{label=368;break;}
 case 367: 
 var $1287=(($1283+($storemerge1_i_i_i_i<<2))|0);
 HEAP32[(($1287)>>2)]=0;
 var $1288=((($storemerge1_i_i_i_i)+(1))|0);
 var $storemerge1_i_i_i_i=$1288;label=366;break;
 case 368: 
 var $1289=HEAP8[(($1096)>>0)];
 var $1290=$1289&1;
 var $1291=(($1290<<24)>>24)==0;
 if($1291){label=370;break;}else{label=369;break;}
 case 369: 
 var $1293=(($12+8)|0);
 var $1294=HEAP32[(($1293)>>2)];
 _free($1294);
 label=370;break;
 case 370: 
 var $1295=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($9,$1295,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=371;break; } else { label=381;break; }
 case 371: 
 var $1296=(($9)|0);
 var $1297=HEAP32[(($1296)>>2)];
 var $1298=(($1297+16)|0);
 var $1299=(($1298)|0);
 var $1300=HEAP32[(($1299)>>2)];
 var $1301=(($pa_i_i_i_i)|0);
 HEAP32[(($1301)>>2)]=$1300;
 var $1302=(($1297+20)|0);
 var $1303=($pa_i_i_i_i|0)==($1298|0);
 if($1303){label=376;break;}else{label=372;break;}
 case 372: 
 var $1305=$1302;
 var $1306=HEAP8[(($1305)>>0)];
 var $1307=$1306&1;
 var $1308=(($1307<<24)>>24)==0;
 if($1308){label=374;break;}else{label=373;break;}
 case 373: 
 var $1310=(($1297+28)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=(($1297+24)|0);
 var $1313=HEAP32[(($1312)>>2)];
 var $1320=$1313;var $1319=$1311;label=375;break;
 case 374: 
 var $1315=$1302;
 var $1316=(($1315+1)|0);
 var $1317=($1306&255);
 var $1318=$1317>>>1;
 var $1320=$1318;var $1319=$1316;label=375;break;
 case 375: 
 var $1319;
 var $1320;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1239,$1319,$1320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=376;break; } else { label=381;break; }
 case 376: 
 var $1321=(($pa_i_i_i_i+16)|0);
 var $1322=(($1297+32)|0);
 var $1323=$1321;
 var $1324=$1322;
 assert(12 % 1 === 0);HEAP32[(($1323)>>2)]=HEAP32[(($1324)>>2)];HEAP32[((($1323)+(4))>>2)]=HEAP32[((($1324)+(4))>>2)];HEAP32[((($1323)+(8))>>2)]=HEAP32[((($1324)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($8,$1295,$1297);
 var $1325=(($pa_i_i_i_i+20)|0);
 HEAP32[(($1325)>>2)]=$1166;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($7,$1295,$pa_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=377;break; } else { label=381;break; }
 case 377: 
 var $1326=(($7+4)|0);
 var $1327=HEAP8[(($1326)>>0)];
 var $1328=$1327&1;
 var $1329=(($1328<<24)>>24)==0;
 if($1329){label=378;break;}else{label=384;break;}
 case 378: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=379;break; } else { label=381;break; }
 case 379: 
 throw "Reached an unreachable!";
 case 380: 
 var $lpad_loopexit64$0 = ___cxa_find_matching_catch(); var $lpad_loopexit64$1 = tempRet0;
 var $lpad_phi66$1=$lpad_loopexit64$1;var $lpad_phi66$0=$lpad_loopexit64$0;label=382;break;
 case 381: 
 var $lpad_nonloopexit65$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit65$1 = tempRet0;
 var $lpad_phi66$1=$lpad_nonloopexit65$1;var $lpad_phi66$0=$lpad_nonloopexit65$0;label=382;break;
 case 382: 
 var $lpad_phi66$0;
 var $lpad_phi66$1;
 var $1333=$lpad_phi66$0;
 var $1334=$lpad_phi66$1;
 var $1335=$1239;
 var $1336=HEAP8[(($1335)>>0)];
 var $1337=$1336&1;
 var $1338=(($1337<<24)>>24)==0;
 if($1338){var $_037=$1333;var $_038=$1334;label=465;break;}else{label=383;break;}
 case 383: 
 var $1340=(($pa_i_i_i_i+12)|0);
 var $1341=HEAP32[(($1340)>>2)];
 _free($1341);
 var $_037=$1333;var $_038=$1334;label=465;break;
 case 384: 
 var $1343=HEAP8[(($1269)>>0)];
 var $1344=$1343&1;
 var $1345=(($1344<<24)>>24)==0;
 if($1345){label=469;break;}else{label=385;break;}
 case 385: 
 var $1347=(($pa_i_i_i_i+12)|0);
 var $1348=HEAP32[(($1347)>>2)];
 _free($1348);
 label=469;break;
 case 386: 
 var $1350=$1;
 var $$etemp$36$0=8;
 var $$etemp$36$1=0;

 var $1351=$2;
 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $1352=$3;
 var $$etemp$38$0=4;
 var $$etemp$38$1=0;

 var $1353=$h_i_i_i_i_i;
 var $$etemp$39$0=8;
 var $$etemp$39$1=0;

 var $1354=$4;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $1355=$h1_i_i_i_i_i;
 var $$etemp$41$0=8;
 var $$etemp$41$1=0;

 var $1356=$5;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $1357=$pa_i_i_i_i_i;
 var $$etemp$43$0=28;
 var $$etemp$43$1=0;

 var $1358=$6;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $1359=($s|0)==1048576;
 if($1359){label=387;break;}else{label=404;break;}
 case 387: 
 var $1361=_strlen($name);
 var $1362=($1361>>>0)>4294967279;
 if($1362){label=388;break;}else{label=389;break;}
 case 388: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 389: 
 var $1365=($1361>>>0)<11;
 if($1365){label=390;break;}else{label=391;break;}
 case 390: 
 var $1367=$1361<<1;
 var $1368=(($1367)&255);
 HEAP8[(($1354)>>0)]=$1368;
 var $1369=$4;
 var $1370=(($1369+1)|0);
 var $__p_0_i_i_i_i_i_i=$1370;label=396;break;
 case 391: 
 var $1371=((($1361)+(16))|0);
 var $1372=$1371&-16;
 var $1373=($1372|0)==0;
 var $_size_i_i_i_i_i_i=($1373?1:$1372);
 var $1374=_malloc($_size_i_i_i_i_i_i);
 var $1375=($1374|0)==0;
 if($1375){label=392;break;}else{var $_lcssa_i_i_i_i_i_i=$1374;label=395;break;}
 case 392: 
 var $1376=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1377=($1376|0)==0;
 if($1377){label=394;break;}else{label=393;break;}
 case 393: 
 var $1379=$1376;
 FUNCTION_TABLE[$1379]();
 var $1380=_malloc($_size_i_i_i_i_i_i);
 var $1381=($1380|0)==0;
 if($1381){label=392;break;}else{var $_lcssa_i_i_i_i_i_i=$1380;label=395;break;}
 case 394: 
 var $1383=___cxa_allocate_exception(4);
 var $1384=$1383;
 HEAP32[(($1384)>>2)]=15192;
 ___cxa_throw($1383,26096,(782));
 throw "Reached an unreachable!";
 case 395: 
 var $_lcssa_i_i_i_i_i_i;
 var $1385=(($4+8)|0);
 HEAP32[(($1385)>>2)]=$_lcssa_i_i_i_i_i_i;
 var $1386=$1372|1;
 var $1387=(($4)|0);
 HEAP32[(($1387)>>2)]=$1386;
 var $1388=(($4+4)|0);
 HEAP32[(($1388)>>2)]=$1361;
 var $__p_0_i_i_i_i_i_i=$_lcssa_i_i_i_i_i_i;label=396;break;
 case 396: 
 var $__p_0_i_i_i_i_i_i;
 assert($1361 % 1 === 0);(_memcpy($__p_0_i_i_i_i_i_i, $name, $1361)|0);
 var $1389=(($__p_0_i_i_i_i_i_i+$1361)|0);
 HEAP8[(($1389)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h_i_i_i_i_i,$m,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=397;break; } else { label=402;break; }
 case 397: 
 var $1391=HEAP8[(($1354)>>0)];
 var $1392=$1391&1;
 var $1393=(($1392<<24)>>24)==0;
 if($1393){label=399;break;}else{label=398;break;}
 case 398: 
 var $1395=(($4+8)|0);
 var $1396=HEAP32[(($1395)>>2)];
 _free($1396);
 label=399;break;
 case 399: 
 var $1397=(($m+4)|0);
 var $1398=(($m)|0);
 var $1399=(($h_i_i_i_i_i)|0);
 var $1400=HEAP32[(($1399)>>2)];
 var $1401=(($1400+8)|0);
 var $1402=$data;
 var $storemerge2_i_i_i_i_i=0;label=400;break;
 case 400: 
 var $storemerge2_i_i_i_i_i;
 var $1403=HEAP32[(($1397)>>2)];
 var $1404=HEAP32[(($1398)>>2)];
 var $1405=$1403;
 var $1406=$1404;
 var $1407=((($1405)-($1406))|0);
 var $1408=(((($1407|0))/(28))&-1);
 var $1409=($storemerge2_i_i_i_i_i>>>0)<($1408>>>0);
 if($1409){label=401;break;}else{label=469;break;}
 case 401: 
 var $1411=HEAP32[(($1401)>>2)];
 var $1412=(($1411+($storemerge2_i_i_i_i_i<<20))|0);
 var $1413=(($1402+($storemerge2_i_i_i_i_i<<20))|0);
 assert(1048576 % 1 === 0);(_memcpy($1412, $1413, 1048576)|0);
 var $1414=((($storemerge2_i_i_i_i_i)+(1))|0);
 var $storemerge2_i_i_i_i_i=$1414;label=400;break;
 case 402: 
 var $1416$0 = ___cxa_find_matching_catch(); var $1416$1 = tempRet0;
 var $1417=$1416$0;
 var $1418=$1416$1;
 var $1419=HEAP8[(($1354)>>0)];
 var $1420=$1419&1;
 var $1421=(($1420<<24)>>24)==0;
 if($1421){var $_0=$1417;var $_036=$1418;label=464;break;}else{label=403;break;}
 case 403: 
 var $1423=(($4+8)|0);
 var $1424=HEAP32[(($1423)>>2)];
 _free($1424);
 var $_0=$1417;var $_036=$1418;label=464;break;
 case 404: 
 var $1426=($s>>>0)<1048576;
 if($1426){label=405;break;}else{label=463;break;}
 case 405: 
 var $1428=(((1048576)-($s))|0);
 var $1429=_strlen($name);
 var $1430=($1429>>>0)>4294967279;
 if($1430){label=406;break;}else{label=407;break;}
 case 406: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 407: 
 var $1433=($1429>>>0)<11;
 if($1433){label=408;break;}else{label=409;break;}
 case 408: 
 var $1435=$1429<<1;
 var $1436=(($1435)&255);
 HEAP8[(($1356)>>0)]=$1436;
 var $1437=$5;
 var $1438=(($1437+1)|0);
 var $__p_0_i5_i_i_i_i_i=$1438;label=414;break;
 case 409: 
 var $1439=((($1429)+(16))|0);
 var $1440=$1439&-16;
 var $1441=($1440|0)==0;
 var $_size_i7_i_i_i_i_i=($1441?1:$1440);
 var $1442=_malloc($_size_i7_i_i_i_i_i);
 var $1443=($1442|0)==0;
 if($1443){label=410;break;}else{var $_lcssa_i9_i_i_i_i_i=$1442;label=413;break;}
 case 410: 
 var $1444=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1445=($1444|0)==0;
 if($1445){label=412;break;}else{label=411;break;}
 case 411: 
 var $1447=$1444;
 FUNCTION_TABLE[$1447]();
 var $1448=_malloc($_size_i7_i_i_i_i_i);
 var $1449=($1448|0)==0;
 if($1449){label=410;break;}else{var $_lcssa_i9_i_i_i_i_i=$1448;label=413;break;}
 case 412: 
 var $1451=___cxa_allocate_exception(4);
 var $1452=$1451;
 HEAP32[(($1452)>>2)]=15192;
 ___cxa_throw($1451,26096,(782));
 throw "Reached an unreachable!";
 case 413: 
 var $_lcssa_i9_i_i_i_i_i;
 var $1453=(($5+8)|0);
 HEAP32[(($1453)>>2)]=$_lcssa_i9_i_i_i_i_i;
 var $1454=$1440|1;
 var $1455=(($5)|0);
 HEAP32[(($1455)>>2)]=$1454;
 var $1456=(($5+4)|0);
 HEAP32[(($1456)>>2)]=$1429;
 var $__p_0_i5_i_i_i_i_i=$_lcssa_i9_i_i_i_i_i;label=414;break;
 case 414: 
 var $__p_0_i5_i_i_i_i_i;
 assert($1429 % 1 === 0);(_memcpy($__p_0_i5_i_i_i_i_i, $name, $1429)|0);
 var $1457=(($__p_0_i5_i_i_i_i_i+$1429)|0);
 HEAP8[(($1457)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($h1_i_i_i_i_i,$m,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=415;break; } else { label=420;break; }
 case 415: 
 var $1459=HEAP8[(($1356)>>0)];
 var $1460=$1459&1;
 var $1461=(($1460<<24)>>24)==0;
 if($1461){label=417;break;}else{label=416;break;}
 case 416: 
 var $1463=(($5+8)|0);
 var $1464=HEAP32[(($1463)>>2)];
 _free($1464);
 label=417;break;
 case 417: 
 var $1465=(($m+4)|0);
 var $1466=(($m)|0);
 var $1467=(($h1_i_i_i_i_i)|0);
 var $1468=HEAP32[(($1467)>>2)];
 var $1469=(($1468+8)|0);
 var $1470=$data;
 var $storemerge_i30_i_i_i_i=0;label=418;break;
 case 418: 
 var $storemerge_i30_i_i_i_i;
 var $1471=HEAP32[(($1465)>>2)];
 var $1472=HEAP32[(($1466)>>2)];
 var $1473=$1471;
 var $1474=$1472;
 var $1475=((($1473)-($1474))|0);
 var $1476=(((($1475|0))/(28))&-1);
 var $1477=($storemerge_i30_i_i_i_i>>>0)<($1476>>>0);
 if($1477){label=419;break;}else{label=422;break;}
 case 419: 
 var $1479=HEAP32[(($1469)>>2)];
 var $1480=(($1479+($storemerge_i30_i_i_i_i<<20))|0);
 var $1481=(($1470+($storemerge_i30_i_i_i_i<<20))|0);
 assert($s % 1 === 0);(_memcpy($1480, $1481, $s)|0);
 var $1482=((($storemerge_i30_i_i_i_i)+(1))|0);
 var $storemerge_i30_i_i_i_i=$1482;label=418;break;
 case 420: 
 var $1484$0 = ___cxa_find_matching_catch(); var $1484$1 = tempRet0;
 var $1485=$1484$0;
 var $1486=$1484$1;
 var $1487=HEAP8[(($1356)>>0)];
 var $1488=$1487&1;
 var $1489=(($1488<<24)>>24)==0;
 if($1489){var $_0=$1485;var $_036=$1486;label=464;break;}else{label=421;break;}
 case 421: 
 var $1491=(($5+8)|0);
 var $1492=HEAP32[(($1491)>>2)];
 _free($1492);
 var $_0=$1485;var $_036=$1486;label=464;break;
 case 422: 
 var $1494=(($pa_i_i_i_i_i+4)|0);
 var $1495=$1494;
 var $storemerge_i_i_i_i_i_i=0;label=423;break;
 case 423: 
 var $storemerge_i_i_i_i_i_i;
 var $1497=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($1497){label=424;break;}else{label=425;break;}
 case 424: 
 var $1499=(($1495+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($1499)>>2)]=0;
 var $1500=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$1500;label=423;break;
 case 425: 
 var $1501=(($pa_i_i_i_i_i+4)|0);
 var $1502=_strlen($name);
 var $1503=($1502>>>0)>4294967279;
 if($1503){label=426;break;}else{label=428;break;}
 case 426: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=427;break; } else { label=458;break; }
 case 427: 
 throw "Reached an unreachable!";
 case 428: 
 var $1506=($1502>>>0)<11;
 if($1506){label=429;break;}else{label=430;break;}
 case 429: 
 var $1508=$1502<<1;
 var $1509=(($1508)&255);
 HEAP8[(($1358)>>0)]=$1509;
 var $1510=$6;
 var $1511=(($1510+1)|0);
 var $__p_0_i15_i_i_i_i_i=$1511;label=437;break;
 case 430: 
 var $1512=((($1502)+(16))|0);
 var $1513=$1512&-16;
 var $1514=($1513|0)==0;
 var $_size_i19_i_i_i_i_i=($1514?1:$1513);
 var $1515=_malloc($_size_i19_i_i_i_i_i);
 var $1516=($1515|0)==0;
 if($1516){label=431;break;}else{var $_lcssa_i21_i_i_i_i_i=$1515;label=436;break;}
 case 431: 
 var $1517=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1518=($1517|0)==0;
 if($1518){label=434;break;}else{label=432;break;}
 case 432: 
 var $1520=$1517;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1520]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=433;break; } else { label=457;break; }
 case 433: 
 var $1521=_malloc($_size_i19_i_i_i_i_i);
 var $1522=($1521|0)==0;
 if($1522){label=431;break;}else{var $_lcssa_i21_i_i_i_i_i=$1521;label=436;break;}
 case 434: 
 var $1524=___cxa_allocate_exception(4);
 var $1525=$1524;
 HEAP32[(($1525)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1524,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=435;break; } else { label=458;break; }
 case 435: 
 throw "Reached an unreachable!";
 case 436: 
 var $_lcssa_i21_i_i_i_i_i;
 var $1526=(($6+8)|0);
 HEAP32[(($1526)>>2)]=$_lcssa_i21_i_i_i_i_i;
 var $1527=$1513|1;
 var $1528=(($6)|0);
 HEAP32[(($1528)>>2)]=$1527;
 var $1529=(($6+4)|0);
 HEAP32[(($1529)>>2)]=$1502;
 var $__p_0_i15_i_i_i_i_i=$_lcssa_i21_i_i_i_i_i;label=437;break;
 case 437: 
 var $__p_0_i15_i_i_i_i_i;
 assert($1502 % 1 === 0);(_memcpy($__p_0_i15_i_i_i_i_i, $name, $1502)|0);
 var $1530=(($__p_0_i15_i_i_i_i_i+$1502)|0);
 HEAP8[(($1530)>>0)]=0;
 var $1531=$1501;
 var $1532=HEAP8[(($1531)>>0)];
 var $1533=$1532&1;
 var $1534=(($1533<<24)>>24)==0;
 if($1534){label=439;break;}else{label=438;break;}
 case 438: 
 var $1536=(($pa_i_i_i_i_i+12)|0);
 var $1537=HEAP32[(($1536)>>2)];
 HEAP8[(($1537)>>0)]=0;
 var $1538=(($pa_i_i_i_i_i+8)|0);
 HEAP32[(($1538)>>2)]=0;
 label=440;break;
 case 439: 
 var $1540=$1501;
 var $1541=(($1540+1)|0);
 HEAP8[(($1541)>>0)]=0;
 HEAP8[(($1531)>>0)]=0;
 label=440;break;
 case 440: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1501,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=442;break; } else { label=441;break; }
 case 441: 
 var $1543$0 = ___cxa_find_matching_catch(0); var $1543$1 = tempRet0;
 var $1544=$1543$0;
 ___clang_call_terminate($1544);
 throw "Reached an unreachable!";
 case 442: 
 assert(12 % 1 === 0);HEAP32[(($1531)>>2)]=HEAP32[(($1358)>>2)];HEAP32[((($1531)+(4))>>2)]=HEAP32[((($1358)+(4))>>2)];HEAP32[((($1531)+(8))>>2)]=HEAP32[((($1358)+(8))>>2)];
 var $1545=$6;
 var $storemerge1_i_i_i_i_i=0;label=443;break;
 case 443: 
 var $storemerge1_i_i_i_i_i;
 var $1547=($storemerge1_i_i_i_i_i>>>0)<3;
 if($1547){label=444;break;}else{label=445;break;}
 case 444: 
 var $1549=(($1545+($storemerge1_i_i_i_i_i<<2))|0);
 HEAP32[(($1549)>>2)]=0;
 var $1550=((($storemerge1_i_i_i_i_i)+(1))|0);
 var $storemerge1_i_i_i_i_i=$1550;label=443;break;
 case 445: 
 var $1551=HEAP8[(($1358)>>0)];
 var $1552=$1551&1;
 var $1553=(($1552<<24)>>24)==0;
 if($1553){label=447;break;}else{label=446;break;}
 case 446: 
 var $1555=(($6+8)|0);
 var $1556=HEAP32[(($1555)>>2)];
 _free($1556);
 label=447;break;
 case 447: 
 var $1557=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($3,$1557,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=448;break; } else { label=458;break; }
 case 448: 
 var $1558=(($3)|0);
 var $1559=HEAP32[(($1558)>>2)];
 var $1560=(($1559+16)|0);
 var $1561=(($1560)|0);
 var $1562=HEAP32[(($1561)>>2)];
 var $1563=(($pa_i_i_i_i_i)|0);
 HEAP32[(($1563)>>2)]=$1562;
 var $1564=(($1559+20)|0);
 var $1565=($pa_i_i_i_i_i|0)==($1560|0);
 if($1565){label=453;break;}else{label=449;break;}
 case 449: 
 var $1567=$1564;
 var $1568=HEAP8[(($1567)>>0)];
 var $1569=$1568&1;
 var $1570=(($1569<<24)>>24)==0;
 if($1570){label=451;break;}else{label=450;break;}
 case 450: 
 var $1572=(($1559+28)|0);
 var $1573=HEAP32[(($1572)>>2)];
 var $1574=(($1559+24)|0);
 var $1575=HEAP32[(($1574)>>2)];
 var $1582=$1575;var $1581=$1573;label=452;break;
 case 451: 
 var $1577=$1564;
 var $1578=(($1577+1)|0);
 var $1579=($1568&255);
 var $1580=$1579>>>1;
 var $1582=$1580;var $1581=$1578;label=452;break;
 case 452: 
 var $1581;
 var $1582;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1501,$1581,$1582) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=453;break; } else { label=458;break; }
 case 453: 
 var $1583=(($pa_i_i_i_i_i+16)|0);
 var $1584=(($1559+32)|0);
 var $1585=$1583;
 var $1586=$1584;
 assert(12 % 1 === 0);HEAP32[(($1585)>>2)]=HEAP32[(($1586)>>2)];HEAP32[((($1585)+(4))>>2)]=HEAP32[((($1586)+(4))>>2)];HEAP32[((($1585)+(8))>>2)]=HEAP32[((($1586)+(8))>>2)];
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($2,$1557,$1559);
 var $1587=(($pa_i_i_i_i_i+20)|0);
 HEAP32[(($1587)>>2)]=$1428;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$1557,$pa_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=454;break; } else { label=458;break; }
 case 454: 
 var $1588=(($1+4)|0);
 var $1589=HEAP8[(($1588)>>0)];
 var $1590=$1589&1;
 var $1591=(($1590<<24)>>24)==0;
 if($1591){label=455;break;}else{label=461;break;}
 case 455: 
 (function() { try { __THREW__ = 0; return ___assert_fail(5624,5512,132,10504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=456;break; } else { label=458;break; }
 case 456: 
 throw "Reached an unreachable!";
 case 457: 
 var $lpad_loopexit69$0 = ___cxa_find_matching_catch(); var $lpad_loopexit69$1 = tempRet0;
 var $lpad_phi71$1=$lpad_loopexit69$1;var $lpad_phi71$0=$lpad_loopexit69$0;label=459;break;
 case 458: 
 var $lpad_nonloopexit70$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit70$1 = tempRet0;
 var $lpad_phi71$1=$lpad_nonloopexit70$1;var $lpad_phi71$0=$lpad_nonloopexit70$0;label=459;break;
 case 459: 
 var $lpad_phi71$0;
 var $lpad_phi71$1;
 var $1595=$lpad_phi71$0;
 var $1596=$lpad_phi71$1;
 var $1597=$1501;
 var $1598=HEAP8[(($1597)>>0)];
 var $1599=$1598&1;
 var $1600=(($1599<<24)>>24)==0;
 if($1600){var $_0=$1595;var $_036=$1596;label=464;break;}else{label=460;break;}
 case 460: 
 var $1602=(($pa_i_i_i_i_i+12)|0);
 var $1603=HEAP32[(($1602)>>2)];
 _free($1603);
 var $_0=$1595;var $_036=$1596;label=464;break;
 case 461: 
 var $1605=HEAP8[(($1531)>>0)];
 var $1606=$1605&1;
 var $1607=(($1606<<24)>>24)==0;
 if($1607){label=469;break;}else{label=462;break;}
 case 462: 
 var $1609=(($pa_i_i_i_i_i+12)|0);
 var $1610=HEAP32[(($1609)>>2)];
 _free($1610);
 label=469;break;
 case 463: 
 ___assert_fail(4208,5512,203,10504);
 throw "Reached an unreachable!";
 case 464: 
 var $_036;
 var $_0;
 var $1612$0=$_0;
 var $1612$1=0;
 var $1613$0=$1612$0;
 var $1613$1=$_036;
 ___resumeException($1613$0)
 case 465: 
 var $_038;
 var $_037;
 var $1614$0=$_037;
 var $1614$1=0;
 var $1615$0=$1614$0;
 var $1615$1=$_038;
 ___resumeException($1615$0)
 case 466: 
 var $_040;
 var $_039;
 var $1616$0=$_039;
 var $1616$1=0;
 var $1617$0=$1616$0;
 var $1617$1=$_040;
 ___resumeException($1617$0)
 case 467: 
 var $_044;
 var $_043;
 var $1618$0=$_043;
 var $1618$1=0;
 var $1619$0=$1618$0;
 var $1619$1=$_044;
 ___resumeException($1619$0)
 case 468: 
 var $_046;
 var $_045;
 var $1620$0=$_045;
 var $1620$1=0;
 var $1621$0=$1620$0;
 var $1621$1=$_046;
 ___resumeException($1621$0)
 case 469: 
 STACKTOP=sp;return;
 case 470: 
 var $_042;
 var $_041;
 var $1622$0=$_042;
 var $1622$1=0;
 var $1623$0=$1622$0;
 var $1623$1=$_041;
 ___resumeException($1623$0)
  default: assert(0, "bad label: " + label);
 }

}

