//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi128EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=128;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19352;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<7;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<7))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(128))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(128))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi256EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=256;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19160;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<8;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<8))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(256))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(256))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi512EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=512;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19064;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<9;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<9))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(512))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(512))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1024EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=1024;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19448;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<10;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<10))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(1024))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(1024))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi2048EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=2048;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19208;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<11;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<11))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(2048))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(2048))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE21AddPerVertexAttributeINS0_2io9DummyTypeILi1048576EEEEENS0_7TriMeshINSt3__16vectorI8MyVertexNS9_9allocatorISB_EEEENSA_I6MyFaceNSC_ISF_EEEENSA_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE24PerVertexAttributeHandleIT_EERS2_NS9_12basic_stringIcNS9_11char_traitsIcEENSC_IcEEEE($agg_result,$m,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i=sp;
 var $1=(sp)+(24);
 var $2=(sp)+(32);
 var $h=(sp)+(40);
 var $3=(($h+4)|0);
 var $4=$3;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $6=($storemerge_i>>>0)<3;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($4+($storemerge_i<<2))|0);
 HEAP32[(($8)>>2)]=0;
 var $9=((($storemerge_i)+(1))|0);
 var $storemerge_i=$9;label=2;break;
 case 4: 
 var $10=(($h+4)|0);
 var $11=($10|0)==($name|0);
 var $_pre13=$name;
 if($11){var $_pre_phi=$_pre13;label=9;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP8[(($_pre13)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=(($name+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($name+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $27=$20;var $26=$18;label=8;break;
 case 7: 
 var $22=$name;
 var $23=(($22+1)|0);
 var $24=($13&255);
 var $25=$24>>>1;
 var $27=$25;var $26=$23;label=8;break;
 case 8: 
 var $26;
 var $27;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($10,$26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre_phi=$_pre13;label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre_phi;
 var $28=HEAP8[(($_pre_phi)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=(($name+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=12;break;
 case 11: 
 var $35=($28&255);
 var $36=$35>>>1;
 var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 if($38){label=20;break;}else{label=13;break;}
 case 13: 
 var $40=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($2,$40,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($2)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($m+120)|0);
 var $45=$44;
 var $46=($43|0)==($45|0);
 if($46){label=20;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4952,3376,1044,10352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi9$1=$lpad_loopexit7$1;var $lpad_phi9$0=$lpad_loopexit7$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi9$1=$lpad_nonloopexit8$1;var $lpad_phi9$0=$lpad_nonloopexit8$0;label=19;break;
 case 19: 
 var $lpad_phi9$0;
 var $lpad_phi9$1;
 var $50=$lpad_phi9$0;
 var $51=$lpad_phi9$1;
 var $_0=$50;var $_04=$51;label=54;break;
 case 20: 
 var $53=(($h+16)|0);
 HEAP32[(($53)>>2)]=1048576;
 var $54=(($h+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=_malloc(24);
 var $56=($55|0)==0;
 if($56){label=21;break;}else{var $_lcssa_i=$55;label=26;break;}
 case 21: 
 var $57=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=22;break;}
 case 22: 
 var $60=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=17;break; }
 case 23: 
 var $61=_malloc(24);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{var $_lcssa_i=$61;label=26;break;}
 case 24: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 HEAP32[(($65)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $66=(($m)|0);
 var $67=$_lcssa_i;
 HEAP32[(($67)>>2)]=19400;
 var $68=(($_lcssa_i+4)|0);
 var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 var $70=(($_lcssa_i+8)|0);
 var $71=$70;
 var $72=(($_lcssa_i+12)|0);
 var $73=$72;
 var $74=$70;
 var $75=(($m+8)|0);
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0; HEAP32[((($70)+(12))>>2)]=0;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($m)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$76;
 var $80=$78;
 var $81=((($79)-($80))|0);
 var $82=(((($81|0))/(28))&-1);
 var $83=$__v_i_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $84=($76|0)==($78|0);
 if($84){var $122=$66;var $121=$78;label=41;break;}else{label=27;break;}
 case 27: 
 var $86=(($_lcssa_i+16)|0);
 var $87=$86;
 var $88=(($__v_i_i+12)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($__v_i_i+16)|0);
 HEAP32[(($89)>>2)]=$87;
 var $90=($76|0)==($78|0);
 if($90){var $106=0;label=35;break;}else{label=28;break;}
 case 28: 
 var $92=$82<<20;
 var $93=($92|0)==0;
 var $_size_i_i_i=($93?1:$92);
 var $94=_malloc($_size_i_i_i);
 var $95=($94|0)==0;
 if($95){label=29;break;}else{var $_lcssa_i_i_i=$94;label=34;break;}
 case 29: 
 var $96=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $97=($96|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=$96;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=42;break; }
 case 31: 
 var $100=_malloc($_size_i_i_i);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_lcssa_i_i_i=$100;label=34;break;}
 case 32: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=43;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i_i_i;
 var $105=$_lcssa_i_i_i;
 var $106=$105;label=35;break;
 case 35: 
 var $106;
 var $107=(($__v_i_i)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($__v_i_i+8)|0);
 HEAP32[(($108)>>2)]=$106;
 var $109=(($__v_i_i+4)|0);
 HEAP32[(($109)>>2)]=$106;
 var $110=(($106+($82<<20))|0);
 HEAP32[(($88)>>2)]=$110;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($74,$__v_i_i);
 var $111=HEAP32[(($109)>>2)];
 var $_pre=HEAP32[(($108)>>2)];
 var $113=$_pre;label=36;break;
 case 36: 
 var $113;
 var $114=($111|0)==($113|0);
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=((($113)-(1048576))|0);
 HEAP32[(($108)>>2)]=$116;
 var $113=$116;label=36;break;
 case 38: 
 var $117=HEAP32[(($107)>>2)];
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=39;break;}
 case 39: 
 var $120=(($117)|0);
 _free($120);
 label=40;break;
 case 40: 
 var $_pre10=HEAP32[(($69)>>2)];
 var $_phi_trans_insert=(($_pre10)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $122=$_pre10;var $121=$_pre11;label=41;break;
 case 41: 
 var $121;
 var $122;
 var $$etemp$1$0=20;
 var $$etemp$1$1=0;

 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=$121;
 var $127=((($125)-($126))|0);
 var $128=(((($127|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE6resizeEj($74,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=43;break; }
 case 42: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $130=$lpad_phi$0;
 var $131=$lpad_phi$1;
 var $132=HEAP32[(($71)>>2)];
 var $133=($132|0)==0;
 if($133){label=53;break;}else{label=45;break;}
 case 45: 
 var $_pre12=HEAP32[(($73)>>2)];
 var $136=$_pre12;label=46;break;
 case 46: 
 var $136;
 var $137=($132|0)==($136|0);
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $139=((($136)-(1048576))|0);
 HEAP32[(($73)>>2)]=$139;
 var $136=$139;label=46;break;
 case 48: 
 var $140=(($132)|0);
 _free($140);
 label=53;break;
 case 49: 
 var $142=$_lcssa_i;
 var $143=(($h)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=(($m+112)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=((($145)+(1))|0);
 HEAP32[(($144)>>2)]=$146;
 var $147=(($h+24)|0);
 HEAP32[(($147)>>2)]=$146;
 var $148=(($m+116)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$148,$h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $150=(($1)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+40)|0);
 var $155=(($agg_result)|0);
 var $156=$153;
 HEAP32[(($155)>>2)]=$156;
 var $157=(($agg_result+4)|0);
 var $158=HEAP32[(($154)>>2)];
 HEAP32[(($157)>>2)]=$158;
 var $159=$10;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=52;break;}else{label=51;break;}
 case 51: 
 var $164=(($h+12)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 _free($_lcssa_i);
 var $_0=$130;var $_04=$131;label=54;break;
 case 54: 
 var $_04;
 var $_0;
 var $167=$10;
 var $168=HEAP8[(($167)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 var $172=(($h+12)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=56;break;
 case 56: 
 var $174$0=$_0;
 var $174$1=0;
 var $175$0=$174$0;
 var $175$1=$_04;
 ___resumeException($175$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>20;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>20;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 1048576)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+1048576)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>4095;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>20;
 var $61=($60>>>0)<2047;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=4095;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>19;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<20;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<20))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<20))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 1048576)|0;
 label=28;break;
 case 28: 
 var $99=(($95+1048576)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(1048576))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<20))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(1048576))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19400;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(1048576))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(1048576))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>20;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<20))|0);
 var $19=(($6+($storemerge<<20))|0);
 assert(1048576 % 1 === 0);(_memcpy($18, $19, 1048576)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEE6SizeOfEv($this){
 var label=0;


 return 1048576;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1048576EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<20))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1048576EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>20;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<20))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>11;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>11;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 2048)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+2048)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>2097151;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>11;
 var $61=($60>>>0)<1048575;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=2097151;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>10;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<11;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<11))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<11))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 2048)|0;
 label=28;break;
 case 28: 
 var $99=(($95+2048)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(2048))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<11))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(2048))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19208;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(2048))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(2048))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>11;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<11))|0);
 var $19=(($6+($storemerge<<11))|0);
 assert(2048 % 1 === 0);(_memcpy($18, $19, 2048)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEE6SizeOfEv($this){
 var label=0;


 return 2048;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi2048EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<11))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi2048EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>11;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<11))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>10;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>10;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 1024)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+1024)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>4194303;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>10;
 var $61=($60>>>0)<2097151;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=4194303;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>9;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<10;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<10))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<10))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 1024)|0;
 label=28;break;
 case 28: 
 var $99=(($95+1024)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(1024))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<10))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(1024))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19448;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(1024))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(1024))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>10;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<10))|0);
 var $19=(($6+($storemerge<<10))|0);
 assert(1024 % 1 === 0);(_memcpy($18, $19, 1024)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEE6SizeOfEv($this){
 var label=0;


 return 1024;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1024EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<10))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1024EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>10;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<10))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>9;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>9;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 512)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+512)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>8388607;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>9;
 var $61=($60>>>0)<4194303;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=8388607;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>8;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<9;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<9))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<9))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 512)|0;
 label=28;break;
 case 28: 
 var $99=(($95+512)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(512))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<9))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(512))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19064;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(512))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(512))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>9;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<9))|0);
 var $19=(($6+($storemerge<<9))|0);
 assert(512 % 1 === 0);(_memcpy($18, $19, 512)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEE6SizeOfEv($this){
 var label=0;


 return 512;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi512EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<9))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi512EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>9;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<9))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>8;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>8;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 256)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+256)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>16777215;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>8;
 var $61=($60>>>0)<8388607;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=16777215;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>7;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<8;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<8))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<8))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 256)|0;
 label=28;break;
 case 28: 
 var $99=(($95+256)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(256))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<8))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(256))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19160;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(256))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(256))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>8;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<8))|0);
 var $19=(($6+($storemerge<<8))|0);
 assert(256 % 1 === 0);(_memcpy($18, $19, 256)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEE6SizeOfEv($this){
 var label=0;


 return 256;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi256EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<8))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi256EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>8;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<8))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>7;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>7;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 128)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+128)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>33554431;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>7;
 var $61=($60>>>0)<16777215;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=33554431;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>6;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<7;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<7))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<7))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 128)|0;
 label=28;break;
 case 28: 
 var $99=(($95+128)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(128))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<7))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(128))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19352;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(128))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(128))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>7;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<7))|0);
 var $19=(($6+($storemerge<<7))|0);
 assert(128 % 1 === 0);(_memcpy($18, $19, 128)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEE6SizeOfEv($this){
 var label=0;


 return 128;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi128EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<7))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi128EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>7;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<7))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>6;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>6;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 64)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+64)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>67108863;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>6;
 var $61=($60>>>0)<33554431;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=67108863;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>5;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<6;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<6))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<6))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 64)|0;
 label=28;break;
 case 28: 
 var $99=(($95+64)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(64))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<6))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(64))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19016;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(64))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(64))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>6;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<6))|0);
 var $19=(($6+($storemerge<<6))|0);
 assert(64 % 1 === 0);(_memcpy($18, $19, 64)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEE6SizeOfEv($this){
 var label=0;


 return 64;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi64EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<6))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi64EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>6;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<6))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>5;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>5;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 32)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+32)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>134217727;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>5;
 var $61=($60>>>0)<67108863;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=134217727;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>4;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<5;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<5))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<5))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 32)|0;
 label=28;break;
 case 28: 
 var $99=(($95+32)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(32))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<5))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(32))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19112;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(32))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(32))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>5;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<5))|0);
 var $19=(($6+($storemerge<<5))|0);
 assert(32 % 1 === 0);(_memcpy($18, $19, 32)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEE6SizeOfEv($this){
 var label=0;


 return 32;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi32EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<5))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi32EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>5;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<5))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>4;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>4;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($20)|0);
 _memset($23, 0, 16)|0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+16)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>268435455;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>4;
 var $61=($60>>>0)<134217727;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=268435455;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>3;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<4;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<4))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<4))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($95)|0);
 _memset($98, 0, 16)|0;
 label=28;break;
 case 28: 
 var $99=(($95+16)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(16))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<4))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(16))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19304;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(16))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(16))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>4;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<4))|0);
 var $19=(($6+($storemerge<<4))|0);
 assert(16 % 1 === 0);(_memcpy($18, $19, 16)|0);
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEE6SizeOfEv($this){
 var label=0;


 return 16;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi16EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<4))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi16EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>4;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<4))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>3;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>3;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $24=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=$20;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $st$2$0=(($23)|0);
 tempBigInt=$$etemp$1$0;HEAP8[(($st$2$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$3$1=(($23+4)|0);
 tempBigInt=$$etemp$1$1;HEAP8[(($st$3$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))>>0)]=tempBigInt&0xff;
 var $_pre2=HEAP32[(($1)>>2)];
 var $24=$_pre2;label=5;break;
 case 5: 
 var $24;
 var $25=(($24+8)|0);
 HEAP32[(($1)>>2)]=$25;
 var $26=((($_01)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=38;break;}else{var $_01=$26;var $20=$25;label=3;break;}
 case 6: 
 var $29=(($this+8)|0);
 var $30=$29;
 var $31=($__sz>>>0)>536870911;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $32=___cxa_allocate_exception(8);
 var $33=$32;
 HEAP32[(($33)>>2)]=15352;
 var $34=(($32+4)|0);
 var $35=_strlen(1736);
 var $36=((($35)+(13))|0);
 var $37=($36|0)==0;
 var $_size_i4_i=($37?1:$36);
 var $38=_malloc($_size_i4_i);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{var $_lcssa_i6_i=$38;label=13;break;}
 case 8: 
 var $40=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $44=_malloc($_size_i4_i);
 var $45=($44|0)==0;
 if($45){label=8;break;}else{var $_lcssa_i6_i=$44;label=13;break;}
 case 11: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $49=$_lcssa_i6_i;
 HEAP32[(($49)>>2)]=$35;
 var $50=(($_lcssa_i6_i+4)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=$35;
 var $52=(($_lcssa_i6_i+8)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=(($_lcssa_i6_i+12)|0);
 var $55=((($35)+(1))|0);
 assert($55 % 1 === 0);(_memcpy($54, 1736, $55)|0);
 var $56=$34;
 HEAP32[(($56)>>2)]=$54;
 HEAP32[(($33)>>2)]=15320;
 ___cxa_throw($32,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($32);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $59=((($15)-($6))|0);
 var $60=$59>>3;
 var $61=($60>>>0)<268435455;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$30;
 var $71=536870911;var $70=$62;label=20;break;
 case 19: 
 var $64=$59>>2;
 var $65=($64>>>0)<($__sz>>>0);
 var $__sz_=($65?$__sz:$64);
 var $66=(($__v_i+12)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($__v_i+16)|0);
 HEAP32[(($67)>>2)]=$30;
 var $68=($__sz_|0)==0;
 if($68){var $88=0;var $87=$__sz_;var $86=$66;label=25;break;}else{var $71=$__sz_;var $70=$66;label=20;break;}
 case 20: 
 var $70;
 var $71;
 var $72=$71<<3;
 var $73=($72|0)==0;
 var $_size_i_i=($73?1:$72);
 var $74=_malloc($_size_i_i);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $_lcssa_i_i=$74;label=24;break;}
 case 21: 
 var $76=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=$76;
 FUNCTION_TABLE[$79]();
 var $80=_malloc($_size_i_i);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{var $_lcssa_i_i=$80;label=24;break;}
 case 23: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=15192;
 ___cxa_throw($83,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $85=$_lcssa_i_i;
 var $88=$85;var $87=$71;var $86=$70;label=25;break;
 case 25: 
 var $86;
 var $87;
 var $88;
 var $89=(($__v_i)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($88+($8<<3))|0);
 var $91=(($__v_i+8)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($__v_i+4)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=(($88+($87<<3))|0);
 HEAP32[(($86)>>2)]=$93;
 var $_0=$11;var $95=$90;label=26;break;
 case 26: 
 var $95;
 var $_0;
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=$95;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($98)|0);
 tempBigInt=$$etemp$4$0;HEAP8[(($st$5$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$6$1=(($98+4)|0);
 tempBigInt=$$etemp$4$1;HEAP8[(($st$6$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(3))>>0)]=tempBigInt&0xff;
 label=28;break;
 case 28: 
 var $99=(($95+8)|0);
 var $100=((($_0)-(1))|0);
 var $101=($100|0)==0;
 if($101){label=29;break;}else{var $_0=$100;var $95=$99;label=26;break;}
 case 29: 
 HEAP32[(($91)>>2)]=$99;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $102=HEAP32[(($92)>>2)];
 var $_pre=HEAP32[(($91)>>2)];
 var $104=$_pre;label=30;break;
 case 30: 
 var $104;
 var $105=($102|0)==($104|0);
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=((($104)-(8))|0);
 HEAP32[(($91)>>2)]=$107;
 var $104=$107;label=30;break;
 case 32: 
 var $108=HEAP32[(($89)>>2)];
 var $109=($108|0)==0;
 if($109){label=38;break;}else{label=33;break;}
 case 33: 
 var $111=(($108)|0);
 _free($111);
 label=38;break;
 case 34: 
 var $113=($8>>>0)>($__sz>>>0);
 if($113){label=35;break;}else{label=38;break;}
 case 35: 
 var $115=(($4+($__sz<<3))|0);
 var $117=$2;label=36;break;
 case 36: 
 var $117;
 var $118=($115|0)==($117|0);
 if($118){label=38;break;}else{label=37;break;}
 case 37: 
 var $120=((($117)-(8))|0);
 HEAP32[(($1)>>2)]=$120;
 var $117=$120;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18968;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(8))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(8))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>3;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($15<<3))|0);
 var $19=(($6+($storemerge<<3))|0);
 var $20=$19;
 var $21=$18;
 var $ld$0$0=(($20)|0);
 var $22$0=((((HEAPU8[(($ld$0$0)>>0)])|(HEAPU8[((($ld$0$0)+(1))>>0)]<<8)|(HEAPU8[((($ld$0$0)+(2))>>0)]<<16)|(HEAPU8[((($ld$0$0)+(3))>>0)]<<24))|0));
 var $ld$1$1=(($20+4)|0);
 var $22$1=((((HEAPU8[(($ld$1$1)>>0)])|(HEAPU8[((($ld$1$1)+(1))>>0)]<<8)|(HEAPU8[((($ld$1$1)+(2))>>0)]<<16)|(HEAPU8[((($ld$1$1)+(3))>>0)]<<24))|0));
 var $st$2$0=(($21)|0);
 tempBigInt=$22$0;HEAP8[(($st$2$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$3$1=(($21+4)|0);
 tempBigInt=$22$1;HEAP8[(($st$3$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))>>0)]=tempBigInt&0xff;
 label=5;break;
 case 5: 
 var $24=((($storemerge)+(1))|0);
 var $storemerge=$24;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEE6SizeOfEv($this){
 var label=0;


 return 8;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi8EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<3))|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi8EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>3;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<3))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=(($12)|0);
 var $14=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=($7>>>0)<($__sz>>>0);
 if($8){label=2;break;}else{label=34;break;}
 case 2: 
 var $10=((($__sz)-($7))|0);
 var $11=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $12=(($this+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=((($14)-($5))|0);
 var $16=($15>>>0)<($10>>>0);
 if($16){label=6;break;}else{var $_01=$10;var $18=$2;label=3;break;}
 case 3: 
 var $18;
 var $_01;
 var $19=($18|0)==0;
 if($19){var $22=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $21=(($18)|0);
 HEAP8[(($21)>>0)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $22=$_pre2;label=5;break;
 case 5: 
 var $22;
 var $23=(($22+1)|0);
 HEAP32[(($1)>>2)]=$23;
 var $24=((($_01)-(1))|0);
 var $25=($24|0)==0;
 if($25){label=38;break;}else{var $_01=$24;var $18=$23;label=3;break;}
 case 6: 
 var $27=(($this+8)|0);
 var $28=$27;
 var $29=($__sz|0)<0;
 if($29){label=7;break;}else{label=17;break;}
 case 7: 
 var $30=___cxa_allocate_exception(8);
 var $31=$30;
 HEAP32[(($31)>>2)]=15352;
 var $32=(($30+4)|0);
 var $33=_strlen(1736);
 var $34=((($33)+(13))|0);
 var $35=($34|0)==0;
 var $_size_i4_i=($35?1:$34);
 var $36=_malloc($_size_i4_i);
 var $37=($36|0)==0;
 if($37){label=8;break;}else{var $_lcssa_i6_i=$36;label=13;break;}
 case 8: 
 var $38=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $39=($38|0)==0;
 if($39){label=11;break;}else{label=9;break;}
 case 9: 
 var $41=$38;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $42=_malloc($_size_i4_i);
 var $43=($42|0)==0;
 if($43){label=8;break;}else{var $_lcssa_i6_i=$42;label=13;break;}
 case 11: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $47=$_lcssa_i6_i;
 HEAP32[(($47)>>2)]=$33;
 var $48=(($_lcssa_i6_i+4)|0);
 var $49=$48;
 HEAP32[(($49)>>2)]=$33;
 var $50=(($_lcssa_i6_i+8)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=0;
 var $52=(($_lcssa_i6_i+12)|0);
 var $53=((($33)+(1))|0);
 assert($53 % 1 === 0);(_memcpy($52, 1736, $53)|0);
 var $54=$32;
 HEAP32[(($54)>>2)]=$52;
 HEAP32[(($31)>>2)]=15320;
 ___cxa_throw($30,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($30);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $57=((($14)-($6))|0);
 var $58=($57>>>0)<1073741823;
 if($58){label=19;break;}else{label=18;break;}
 case 18: 
 var $59=(($__v_i+12)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=(($__v_i+16)|0);
 HEAP32[(($60)>>2)]=$28;
 var $68=2147483647;var $67=$59;label=20;break;
 case 19: 
 var $61=$57<<1;
 var $62=($61>>>0)<($__sz>>>0);
 var $__sz_=($62?$__sz:$61);
 var $63=(($__v_i+12)|0);
 HEAP32[(($63)>>2)]=0;
 var $64=(($__v_i+16)|0);
 HEAP32[(($64)>>2)]=$28;
 var $65=($__sz_|0)==0;
 if($65){var $83=0;var $82=$__sz_;var $81=$63;label=25;break;}else{var $68=$__sz_;var $67=$63;label=20;break;}
 case 20: 
 var $67;
 var $68;
 var $69=_malloc($68);
 var $70=($69|0)==0;
 if($70){label=21;break;}else{var $_lcssa_i_i=$69;label=24;break;}
 case 21: 
 var $71=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $72=($71|0)==0;
 if($72){label=23;break;}else{label=22;break;}
 case 22: 
 var $74=$71;
 FUNCTION_TABLE[$74]();
 var $75=_malloc($68);
 var $76=($75|0)==0;
 if($76){label=21;break;}else{var $_lcssa_i_i=$75;label=24;break;}
 case 23: 
 var $78=___cxa_allocate_exception(4);
 var $79=$78;
 HEAP32[(($79)>>2)]=15192;
 ___cxa_throw($78,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $80=$_lcssa_i_i;
 var $83=$80;var $82=$68;var $81=$67;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=(($__v_i)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=(($83+$7)|0);
 var $86=(($__v_i+8)|0);
 HEAP32[(($86)>>2)]=$85;
 var $87=(($__v_i+4)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=(($83+$82)|0);
 HEAP32[(($81)>>2)]=$88;
 var $_0=$10;var $90=$85;label=26;break;
 case 26: 
 var $90;
 var $_0;
 var $91=($90|0)==0;
 if($91){label=28;break;}else{label=27;break;}
 case 27: 
 var $93=(($90)|0);
 HEAP8[(($93)>>0)]=0;
 label=28;break;
 case 28: 
 var $94=(($90+1)|0);
 var $95=((($_0)-(1))|0);
 var $96=($95|0)==0;
 if($96){label=29;break;}else{var $_0=$95;var $90=$94;label=26;break;}
 case 29: 
 HEAP32[(($86)>>2)]=$94;
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v_i);
 var $97=HEAP32[(($87)>>2)];
 var $_pre=HEAP32[(($86)>>2)];
 var $99=$_pre;label=30;break;
 case 30: 
 var $99;
 var $100=($97|0)==($99|0);
 if($100){label=32;break;}else{label=31;break;}
 case 31: 
 var $102=((($99)-(1))|0);
 HEAP32[(($86)>>2)]=$102;
 var $99=$102;label=30;break;
 case 32: 
 var $103=HEAP32[(($84)>>2)];
 var $104=($103|0)==0;
 if($104){label=38;break;}else{label=33;break;}
 case 33: 
 var $106=(($103)|0);
 _free($106);
 label=38;break;
 case 34: 
 var $108=($7>>>0)>($__sz>>>0);
 if($108){label=35;break;}else{label=38;break;}
 case 35: 
 var $110=(($4+$__sz)|0);
 var $112=$2;label=36;break;
 case 36: 
 var $112;
 var $113=($110|0)==($112|0);
 if($113){label=38;break;}else{label=37;break;}
 case 37: 
 var $115=((($112)-(1))|0);
 HEAP32[(($1)>>2)]=$115;
 var $112=$115;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19256;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(1))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(1))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=(($3)|0);
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($storemerge>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 var $12=HEAP32[(($3)>>2)];
 var $13=(($12+($storemerge<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($6+$14)|0);
 var $18=(($6+$storemerge)|0);
 var $19=HEAP8[(($18)>>0)];
 HEAP8[(($17)>>0)]=$19;
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEE6SizeOfEv($this){
 var label=0;


 return 1;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 var $6=(($_)|0);
 return $6;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEENS_3tri2io9DummyTypeILi1EEEE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+$i)|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io9DummyTypeILi1EEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=HEAP32[(($5)>>2)];
 var $10=(((-$8))|0);
 var $11=(($9+$10)|0);
 HEAP32[(($5)>>2)]=$11;
 var $12=(($11)|0);
 var $13=(($2)|0);
 assert($8 % 1 === 0);(_memcpy($12, $13, $8)|0);
 var $14=HEAP32[(($1)>>2)];
 var $15=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$15;
 HEAP32[(($5)>>2)]=$14;
 var $16=(($__v+8)|0);
 var $17=HEAP32[(($3)>>2)];
 var $18=HEAP32[(($16)>>2)];
 HEAP32[(($3)>>2)]=$18;
 HEAP32[(($16)>>2)]=$17;
 var $19=(($this+8)|0);
 var $20=(($__v+12)|0);
 var $21=HEAP32[(($19)>>2)];
 var $22=HEAP32[(($20)>>2)];
 HEAP32[(($19)>>2)]=$22;
 HEAP32[(($20)>>2)]=$21;
 var $23=HEAP32[(($5)>>2)];
 var $24=(($__v)|0);
 HEAP32[(($24)>>2)]=$23;
 return;
}

//Func
function __ZNSt3__16vectorIlNS_9allocatorIlEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>2;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $23=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($20)>>2)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $23=$_pre2;label=5;break;
 case 5: 
 var $23;
 var $24=(($23+4)|0);
 HEAP32[(($1)>>2)]=$24;
 var $25=((($_01)-(1))|0);
 var $26=($25|0)==0;
 if($26){label=38;break;}else{var $_01=$25;var $20=$24;label=3;break;}
 case 6: 
 var $28=(($this+8)|0);
 var $29=$28;
 var $30=($__sz>>>0)>1073741823;
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $31=___cxa_allocate_exception(8);
 var $32=$31;
 HEAP32[(($32)>>2)]=15352;
 var $33=(($31+4)|0);
 var $34=_strlen(1736);
 var $35=((($34)+(13))|0);
 var $36=($35|0)==0;
 var $_size_i4_i=($36?1:$35);
 var $37=_malloc($_size_i4_i);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $_lcssa_i6_i=$37;label=13;break;}
 case 8: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=9;break;}
 case 9: 
 var $42=$39;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $43=_malloc($_size_i4_i);
 var $44=($43|0)==0;
 if($44){label=8;break;}else{var $_lcssa_i6_i=$43;label=13;break;}
 case 11: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $48=$_lcssa_i6_i;
 HEAP32[(($48)>>2)]=$34;
 var $49=(($_lcssa_i6_i+4)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=$34;
 var $51=(($_lcssa_i6_i+8)|0);
 var $52=$51;
 HEAP32[(($52)>>2)]=0;
 var $53=(($_lcssa_i6_i+12)|0);
 var $54=((($34)+(1))|0);
 assert($54 % 1 === 0);(_memcpy($53, 1736, $54)|0);
 var $55=$33;
 HEAP32[(($55)>>2)]=$53;
 HEAP32[(($32)>>2)]=15320;
 ___cxa_throw($31,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($31);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $58=((($15)-($6))|0);
 var $59=$58>>2;
 var $60=($59>>>0)<536870911;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $61=(($__v_i+12)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($__v_i+16)|0);
 HEAP32[(($62)>>2)]=$29;
 var $70=1073741823;var $69=$61;label=20;break;
 case 19: 
 var $63=$58>>1;
 var $64=($63>>>0)<($__sz>>>0);
 var $__sz_=($64?$__sz:$63);
 var $65=(($__v_i+12)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=(($__v_i+16)|0);
 HEAP32[(($66)>>2)]=$29;
 var $67=($__sz_|0)==0;
 if($67){var $87=0;var $86=$__sz_;var $85=$65;label=25;break;}else{var $70=$__sz_;var $69=$65;label=20;break;}
 case 20: 
 var $69;
 var $70;
 var $71=$70<<2;
 var $72=($71|0)==0;
 var $_size_i_i=($72?1:$71);
 var $73=_malloc($_size_i_i);
 var $74=($73|0)==0;
 if($74){label=21;break;}else{var $_lcssa_i_i=$73;label=24;break;}
 case 21: 
 var $75=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $76=($75|0)==0;
 if($76){label=23;break;}else{label=22;break;}
 case 22: 
 var $78=$75;
 FUNCTION_TABLE[$78]();
 var $79=_malloc($_size_i_i);
 var $80=($79|0)==0;
 if($80){label=21;break;}else{var $_lcssa_i_i=$79;label=24;break;}
 case 23: 
 var $82=___cxa_allocate_exception(4);
 var $83=$82;
 HEAP32[(($83)>>2)]=15192;
 ___cxa_throw($82,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $84=$_lcssa_i_i;
 var $87=$84;var $86=$70;var $85=$69;label=25;break;
 case 25: 
 var $85;
 var $86;
 var $87;
 var $88=(($__v_i)|0);
 HEAP32[(($88)>>2)]=$87;
 var $89=(($87+($8<<2))|0);
 var $90=(($__v_i+8)|0);
 HEAP32[(($90)>>2)]=$89;
 var $91=(($__v_i+4)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=(($87+($86<<2))|0);
 HEAP32[(($85)>>2)]=$92;
 var $_0=$11;var $94=$89;label=26;break;
 case 26: 
 var $94;
 var $_0;
 var $95=($94|0)==0;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($94)>>2)]=0;
 label=28;break;
 case 28: 
 var $97=(($94+4)|0);
 var $98=((($_0)-(1))|0);
 var $99=($98|0)==0;
 if($99){label=29;break;}else{var $_0=$98;var $94=$97;label=26;break;}
 case 29: 
 HEAP32[(($90)>>2)]=$97;
 __ZNSt3__16vectorIlNS_9allocatorIlEEE26__swap_out_circular_bufferERNS_14__split_bufferIlRS2_EE($this,$__v_i);
 var $100=HEAP32[(($91)>>2)];
 var $_pre=HEAP32[(($90)>>2)];
 var $102=$_pre;label=30;break;
 case 30: 
 var $102;
 var $103=($100|0)==($102|0);
 if($103){label=32;break;}else{label=31;break;}
 case 31: 
 var $105=((($102)-(4))|0);
 HEAP32[(($90)>>2)]=$105;
 var $102=$105;label=30;break;
 case 32: 
 var $106=HEAP32[(($88)>>2)];
 var $107=($106|0)==0;
 if($107){label=38;break;}else{label=33;break;}
 case 33: 
 var $109=$106;
 _free($109);
 label=38;break;
 case 34: 
 var $111=($8>>>0)>($__sz>>>0);
 if($111){label=35;break;}else{label=38;break;}
 case 35: 
 var $113=(($4+($__sz<<2))|0);
 var $115=$2;label=36;break;
 case 36: 
 var $115;
 var $116=($113|0)==($115|0);
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=((($115)-(4))|0);
 HEAP32[(($1)>>2)]=$118;
 var $115=$118;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18776;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(4))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(4))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=$3;
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIlNS_9allocatorIlEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+($15<<2))|0);
 HEAP32[(($20)>>2)]=$19;
 label=5;break;
 case 5: 
 var $22=((($storemerge)+(1))|0);
 var $storemerge=$22;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElE6SizeOfEv($this){
 var label=0;


 return 4;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElE9DataBeginEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){var $8=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $phitmp=$2;
 var $8=$phitmp;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEElE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<2))|0);
 var $4=$3;
 return $4;
}

//Func
function __ZNSt3__16vectorIlNS_9allocatorIlEEE26__swap_out_circular_bufferERNS_14__split_bufferIlRS2_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<2))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=$12;
 var $14=$2;
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>3;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>3;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $23=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAPF64[(($20)>>3)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $23=$_pre2;label=5;break;
 case 5: 
 var $23;
 var $24=(($23+8)|0);
 HEAP32[(($1)>>2)]=$24;
 var $25=((($_01)-(1))|0);
 var $26=($25|0)==0;
 if($26){label=38;break;}else{var $_01=$25;var $20=$24;label=3;break;}
 case 6: 
 var $28=(($this+8)|0);
 var $29=$28;
 var $30=($__sz>>>0)>536870911;
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $31=___cxa_allocate_exception(8);
 var $32=$31;
 HEAP32[(($32)>>2)]=15352;
 var $33=(($31+4)|0);
 var $34=_strlen(1736);
 var $35=((($34)+(13))|0);
 var $36=($35|0)==0;
 var $_size_i4_i=($36?1:$35);
 var $37=_malloc($_size_i4_i);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $_lcssa_i6_i=$37;label=13;break;}
 case 8: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=9;break;}
 case 9: 
 var $42=$39;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $43=_malloc($_size_i4_i);
 var $44=($43|0)==0;
 if($44){label=8;break;}else{var $_lcssa_i6_i=$43;label=13;break;}
 case 11: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $48=$_lcssa_i6_i;
 HEAP32[(($48)>>2)]=$34;
 var $49=(($_lcssa_i6_i+4)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=$34;
 var $51=(($_lcssa_i6_i+8)|0);
 var $52=$51;
 HEAP32[(($52)>>2)]=0;
 var $53=(($_lcssa_i6_i+12)|0);
 var $54=((($34)+(1))|0);
 assert($54 % 1 === 0);(_memcpy($53, 1736, $54)|0);
 var $55=$33;
 HEAP32[(($55)>>2)]=$53;
 HEAP32[(($32)>>2)]=15320;
 ___cxa_throw($31,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($31);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $58=((($15)-($6))|0);
 var $59=$58>>3;
 var $60=($59>>>0)<268435455;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $61=(($__v_i+12)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($__v_i+16)|0);
 HEAP32[(($62)>>2)]=$29;
 var $70=536870911;var $69=$61;label=20;break;
 case 19: 
 var $63=$58>>2;
 var $64=($63>>>0)<($__sz>>>0);
 var $__sz_=($64?$__sz:$63);
 var $65=(($__v_i+12)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=(($__v_i+16)|0);
 HEAP32[(($66)>>2)]=$29;
 var $67=($__sz_|0)==0;
 if($67){var $87=0;var $86=$__sz_;var $85=$65;label=25;break;}else{var $70=$__sz_;var $69=$65;label=20;break;}
 case 20: 
 var $69;
 var $70;
 var $71=$70<<3;
 var $72=($71|0)==0;
 var $_size_i_i=($72?1:$71);
 var $73=_malloc($_size_i_i);
 var $74=($73|0)==0;
 if($74){label=21;break;}else{var $_lcssa_i_i=$73;label=24;break;}
 case 21: 
 var $75=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $76=($75|0)==0;
 if($76){label=23;break;}else{label=22;break;}
 case 22: 
 var $78=$75;
 FUNCTION_TABLE[$78]();
 var $79=_malloc($_size_i_i);
 var $80=($79|0)==0;
 if($80){label=21;break;}else{var $_lcssa_i_i=$79;label=24;break;}
 case 23: 
 var $82=___cxa_allocate_exception(4);
 var $83=$82;
 HEAP32[(($83)>>2)]=15192;
 ___cxa_throw($82,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $84=$_lcssa_i_i;
 var $87=$84;var $86=$70;var $85=$69;label=25;break;
 case 25: 
 var $85;
 var $86;
 var $87;
 var $88=(($__v_i)|0);
 HEAP32[(($88)>>2)]=$87;
 var $89=(($87+($8<<3))|0);
 var $90=(($__v_i+8)|0);
 HEAP32[(($90)>>2)]=$89;
 var $91=(($__v_i+4)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=(($87+($86<<3))|0);
 HEAP32[(($85)>>2)]=$92;
 var $_0=$11;var $94=$89;label=26;break;
 case 26: 
 var $94;
 var $_0;
 var $95=($94|0)==0;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 HEAPF64[(($94)>>3)]=0;
 label=28;break;
 case 28: 
 var $97=(($94+8)|0);
 var $98=((($_0)-(1))|0);
 var $99=($98|0)==0;
 if($99){label=29;break;}else{var $_0=$98;var $94=$97;label=26;break;}
 case 29: 
 HEAP32[(($90)>>2)]=$97;
 __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v_i);
 var $100=HEAP32[(($91)>>2)];
 var $_pre=HEAP32[(($90)>>2)];
 var $102=$_pre;label=30;break;
 case 30: 
 var $102;
 var $103=($100|0)==($102|0);
 if($103){label=32;break;}else{label=31;break;}
 case 31: 
 var $105=((($102)-(8))|0);
 HEAP32[(($90)>>2)]=$105;
 var $102=$105;label=30;break;
 case 32: 
 var $106=HEAP32[(($88)>>2)];
 var $107=($106|0)==0;
 if($107){label=38;break;}else{label=33;break;}
 case 33: 
 var $109=$106;
 _free($109);
 label=38;break;
 case 34: 
 var $111=($8>>>0)>($__sz>>>0);
 if($111){label=35;break;}else{label=38;break;}
 case 35: 
 var $113=(($4+($__sz<<3))|0);
 var $115=$2;label=36;break;
 case 36: 
 var $115;
 var $116=($113|0)==($115|0);
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=((($115)-(8))|0);
 HEAP32[(($1)>>2)]=$118;
 var $115=$118;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18872;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(8))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(8))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=$3;
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>3;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($storemerge<<3))|0);
 var $19=HEAPF64[(($18)>>3)];
 var $20=(($6+($15<<3))|0);
 HEAPF64[(($20)>>3)]=$19;
 label=5;break;
 case 5: 
 var $22=((($storemerge)+(1))|0);
 var $storemerge=$22;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdE6SizeOfEv($this){
 var label=0;


 return 8;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdE9DataBeginEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){var $8=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $phitmp=$2;
 var $8=$phitmp;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEdE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<3))|0);
 var $4=$3;
 return $4;
}

//Func
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>3;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<3))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=$12;
 var $14=$2;
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>2;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $23=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($20)>>2)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $23=$_pre2;label=5;break;
 case 5: 
 var $23;
 var $24=(($23+4)|0);
 HEAP32[(($1)>>2)]=$24;
 var $25=((($_01)-(1))|0);
 var $26=($25|0)==0;
 if($26){label=38;break;}else{var $_01=$25;var $20=$24;label=3;break;}
 case 6: 
 var $28=(($this+8)|0);
 var $29=$28;
 var $30=($__sz>>>0)>1073741823;
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $31=___cxa_allocate_exception(8);
 var $32=$31;
 HEAP32[(($32)>>2)]=15352;
 var $33=(($31+4)|0);
 var $34=_strlen(1736);
 var $35=((($34)+(13))|0);
 var $36=($35|0)==0;
 var $_size_i4_i=($36?1:$35);
 var $37=_malloc($_size_i4_i);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $_lcssa_i6_i=$37;label=13;break;}
 case 8: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=9;break;}
 case 9: 
 var $42=$39;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $43=_malloc($_size_i4_i);
 var $44=($43|0)==0;
 if($44){label=8;break;}else{var $_lcssa_i6_i=$43;label=13;break;}
 case 11: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $48=$_lcssa_i6_i;
 HEAP32[(($48)>>2)]=$34;
 var $49=(($_lcssa_i6_i+4)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=$34;
 var $51=(($_lcssa_i6_i+8)|0);
 var $52=$51;
 HEAP32[(($52)>>2)]=0;
 var $53=(($_lcssa_i6_i+12)|0);
 var $54=((($34)+(1))|0);
 assert($54 % 1 === 0);(_memcpy($53, 1736, $54)|0);
 var $55=$33;
 HEAP32[(($55)>>2)]=$53;
 HEAP32[(($32)>>2)]=15320;
 ___cxa_throw($31,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($31);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $58=((($15)-($6))|0);
 var $59=$58>>2;
 var $60=($59>>>0)<536870911;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $61=(($__v_i+12)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($__v_i+16)|0);
 HEAP32[(($62)>>2)]=$29;
 var $70=1073741823;var $69=$61;label=20;break;
 case 19: 
 var $63=$58>>1;
 var $64=($63>>>0)<($__sz>>>0);
 var $__sz_=($64?$__sz:$63);
 var $65=(($__v_i+12)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=(($__v_i+16)|0);
 HEAP32[(($66)>>2)]=$29;
 var $67=($__sz_|0)==0;
 if($67){var $87=0;var $86=$__sz_;var $85=$65;label=25;break;}else{var $70=$__sz_;var $69=$65;label=20;break;}
 case 20: 
 var $69;
 var $70;
 var $71=$70<<2;
 var $72=($71|0)==0;
 var $_size_i_i=($72?1:$71);
 var $73=_malloc($_size_i_i);
 var $74=($73|0)==0;
 if($74){label=21;break;}else{var $_lcssa_i_i=$73;label=24;break;}
 case 21: 
 var $75=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $76=($75|0)==0;
 if($76){label=23;break;}else{label=22;break;}
 case 22: 
 var $78=$75;
 FUNCTION_TABLE[$78]();
 var $79=_malloc($_size_i_i);
 var $80=($79|0)==0;
 if($80){label=21;break;}else{var $_lcssa_i_i=$79;label=24;break;}
 case 23: 
 var $82=___cxa_allocate_exception(4);
 var $83=$82;
 HEAP32[(($83)>>2)]=15192;
 ___cxa_throw($82,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $84=$_lcssa_i_i;
 var $87=$84;var $86=$70;var $85=$69;label=25;break;
 case 25: 
 var $85;
 var $86;
 var $87;
 var $88=(($__v_i)|0);
 HEAP32[(($88)>>2)]=$87;
 var $89=(($87+($8<<2))|0);
 var $90=(($__v_i+8)|0);
 HEAP32[(($90)>>2)]=$89;
 var $91=(($__v_i+4)|0);
 HEAP32[(($91)>>2)]=$89;
 var $92=(($87+($86<<2))|0);
 HEAP32[(($85)>>2)]=$92;
 var $_0=$11;var $94=$89;label=26;break;
 case 26: 
 var $94;
 var $_0;
 var $95=($94|0)==0;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($94)>>2)]=0;
 label=28;break;
 case 28: 
 var $97=(($94+4)|0);
 var $98=((($_0)-(1))|0);
 var $99=($98|0)==0;
 if($99){label=29;break;}else{var $_0=$98;var $94=$97;label=26;break;}
 case 29: 
 HEAP32[(($90)>>2)]=$97;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v_i);
 var $100=HEAP32[(($91)>>2)];
 var $_pre=HEAP32[(($90)>>2)];
 var $102=$_pre;label=30;break;
 case 30: 
 var $102;
 var $103=($100|0)==($102|0);
 if($103){label=32;break;}else{label=31;break;}
 case 31: 
 var $105=((($102)-(4))|0);
 HEAP32[(($90)>>2)]=$105;
 var $102=$105;label=30;break;
 case 32: 
 var $106=HEAP32[(($88)>>2)];
 var $107=($106|0)==0;
 if($107){label=38;break;}else{label=33;break;}
 case 33: 
 var $109=$106;
 _free($109);
 label=38;break;
 case 34: 
 var $111=($8>>>0)>($__sz>>>0);
 if($111){label=35;break;}else{label=38;break;}
 case 35: 
 var $113=(($4+($__sz<<2))|0);
 var $115=$2;label=36;break;
 case 36: 
 var $115;
 var $116=($113|0)==($115|0);
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=((($115)-(4))|0);
 HEAP32[(($1)>>2)]=$118;
 var $115=$118;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18824;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(4))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(4))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=$3;
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+($15<<2))|0);
 HEAP32[(($20)>>2)]=$19;
 label=5;break;
 case 5: 
 var $22=((($storemerge)+(1))|0);
 var $storemerge=$22;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiE6SizeOfEv($this){
 var label=0;


 return 4;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiE9DataBeginEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){var $8=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $phitmp=$2;
 var $8=$phitmp;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEiE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<2))|0);
 var $4=$3;
 return $4;
}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<2))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=$12;
 var $14=$2;
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIsNS_9allocatorIsEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>1;
 var $9=($8>>>0)<($__sz>>>0);
 if($9){label=2;break;}else{label=34;break;}
 case 2: 
 var $11=((($__sz)-($8))|0);
 var $12=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=((($15)-($5))|0);
 var $17=$16>>1;
 var $18=($17>>>0)<($11>>>0);
 if($18){label=6;break;}else{var $_01=$11;var $20=$2;label=3;break;}
 case 3: 
 var $20;
 var $_01;
 var $21=($20|0)==0;
 if($21){var $23=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAP16[(($20)>>1)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $23=$_pre2;label=5;break;
 case 5: 
 var $23;
 var $24=(($23+2)|0);
 HEAP32[(($1)>>2)]=$24;
 var $25=((($_01)-(1))|0);
 var $26=($25|0)==0;
 if($26){label=38;break;}else{var $_01=$25;var $20=$24;label=3;break;}
 case 6: 
 var $28=(($this+8)|0);
 var $29=$28;
 var $30=($__sz|0)<0;
 if($30){label=7;break;}else{label=17;break;}
 case 7: 
 var $31=___cxa_allocate_exception(8);
 var $32=$31;
 HEAP32[(($32)>>2)]=15352;
 var $33=(($31+4)|0);
 var $34=_strlen(1736);
 var $35=((($34)+(13))|0);
 var $36=($35|0)==0;
 var $_size_i4_i=($36?1:$35);
 var $37=_malloc($_size_i4_i);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $_lcssa_i6_i=$37;label=13;break;}
 case 8: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=9;break;}
 case 9: 
 var $42=$39;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $43=_malloc($_size_i4_i);
 var $44=($43|0)==0;
 if($44){label=8;break;}else{var $_lcssa_i6_i=$43;label=13;break;}
 case 11: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $48=$_lcssa_i6_i;
 HEAP32[(($48)>>2)]=$34;
 var $49=(($_lcssa_i6_i+4)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=$34;
 var $51=(($_lcssa_i6_i+8)|0);
 var $52=$51;
 HEAP32[(($52)>>2)]=0;
 var $53=(($_lcssa_i6_i+12)|0);
 var $54=((($34)+(1))|0);
 assert($54 % 1 === 0);(_memcpy($53, 1736, $54)|0);
 var $55=$33;
 HEAP32[(($55)>>2)]=$53;
 HEAP32[(($32)>>2)]=15320;
 ___cxa_throw($31,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($31);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $58=((($15)-($6))|0);
 var $59=$58>>1;
 var $60=($59>>>0)<1073741823;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $61=(($__v_i+12)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($__v_i+16)|0);
 HEAP32[(($62)>>2)]=$29;
 var $69=2147483647;var $68=$61;label=20;break;
 case 19: 
 var $63=($58>>>0)<($__sz>>>0);
 var $__sz_=($63?$__sz:$58);
 var $64=(($__v_i+12)|0);
 HEAP32[(($64)>>2)]=0;
 var $65=(($__v_i+16)|0);
 HEAP32[(($65)>>2)]=$29;
 var $66=($__sz_|0)==0;
 if($66){var $86=0;var $85=$__sz_;var $84=$64;label=25;break;}else{var $69=$__sz_;var $68=$64;label=20;break;}
 case 20: 
 var $68;
 var $69;
 var $70=$69<<1;
 var $71=($70|0)==0;
 var $_size_i_i=($71?1:$70);
 var $72=_malloc($_size_i_i);
 var $73=($72|0)==0;
 if($73){label=21;break;}else{var $_lcssa_i_i=$72;label=24;break;}
 case 21: 
 var $74=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $75=($74|0)==0;
 if($75){label=23;break;}else{label=22;break;}
 case 22: 
 var $77=$74;
 FUNCTION_TABLE[$77]();
 var $78=_malloc($_size_i_i);
 var $79=($78|0)==0;
 if($79){label=21;break;}else{var $_lcssa_i_i=$78;label=24;break;}
 case 23: 
 var $81=___cxa_allocate_exception(4);
 var $82=$81;
 HEAP32[(($82)>>2)]=15192;
 ___cxa_throw($81,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $_lcssa_i_i;
 var $83=$_lcssa_i_i;
 var $86=$83;var $85=$69;var $84=$68;label=25;break;
 case 25: 
 var $84;
 var $85;
 var $86;
 var $87=(($__v_i)|0);
 HEAP32[(($87)>>2)]=$86;
 var $88=(($86+($8<<1))|0);
 var $89=(($__v_i+8)|0);
 HEAP32[(($89)>>2)]=$88;
 var $90=(($__v_i+4)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=(($86+($85<<1))|0);
 HEAP32[(($84)>>2)]=$91;
 var $_0=$11;var $93=$88;label=26;break;
 case 26: 
 var $93;
 var $_0;
 var $94=($93|0)==0;
 if($94){label=28;break;}else{label=27;break;}
 case 27: 
 HEAP16[(($93)>>1)]=0;
 label=28;break;
 case 28: 
 var $96=(($93+2)|0);
 var $97=((($_0)-(1))|0);
 var $98=($97|0)==0;
 if($98){label=29;break;}else{var $_0=$97;var $93=$96;label=26;break;}
 case 29: 
 HEAP32[(($89)>>2)]=$96;
 __ZNSt3__16vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($this,$__v_i);
 var $99=HEAP32[(($90)>>2)];
 var $_pre=HEAP32[(($89)>>2)];
 var $101=$_pre;label=30;break;
 case 30: 
 var $101;
 var $102=($99|0)==($101|0);
 if($102){label=32;break;}else{label=31;break;}
 case 31: 
 var $104=((($101)-(2))|0);
 HEAP32[(($89)>>2)]=$104;
 var $101=$104;label=30;break;
 case 32: 
 var $105=HEAP32[(($87)>>2)];
 var $106=($105|0)==0;
 if($106){label=38;break;}else{label=33;break;}
 case 33: 
 var $108=$105;
 _free($108);
 label=38;break;
 case 34: 
 var $110=($8>>>0)>($__sz>>>0);
 if($110){label=35;break;}else{label=38;break;}
 case 35: 
 var $112=(($4+($__sz<<1))|0);
 var $114=$2;label=36;break;
 case 36: 
 var $114;
 var $115=($112|0)==($114|0);
 if($115){label=38;break;}else{label=37;break;}
 case 37: 
 var $117=((($114)-(2))|0);
 HEAP32[(($1)>>2)]=$117;
 var $114=$117;label=36;break;
 case 38: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18728;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(2))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(2))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 var $16=$3;
 _free($16);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIsNS_9allocatorIsEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>1;
 var $11=($storemerge>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=HEAP32[(($3)>>2)];
 var $14=(($13+($storemerge<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=(($6+($storemerge<<1))|0);
 var $19=HEAP16[(($18)>>1)];
 var $20=(($6+($15<<1))|0);
 HEAP16[(($20)>>1)]=$19;
 label=5;break;
 case 5: 
 var $22=((($storemerge)+(1))|0);
 var $storemerge=$22;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsE6SizeOfEv($this){
 var label=0;


 return 2;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsE9DataBeginEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){var $8=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $phitmp=$2;
 var $8=$phitmp;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEsE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($i<<1))|0);
 var $4=$3;
 return $4;
}

//Func
function __ZNSt3__16vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=$8>>1;
 var $10=HEAP32[(($5)>>2)];
 var $11=(((-$9))|0);
 var $12=(($10+($11<<1))|0);
 HEAP32[(($5)>>2)]=$12;
 var $13=$12;
 var $14=$2;
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=HEAP32[(($1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$16;
 HEAP32[(($5)>>2)]=$15;
 var $17=(($__v+8)|0);
 var $18=HEAP32[(($3)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($3)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($this+8)|0);
 var $21=(($__v+12)|0);
 var $22=HEAP32[(($20)>>2)];
 var $23=HEAP32[(($21)>>2)];
 HEAP32[(($20)>>2)]=$23;
 HEAP32[(($21)>>2)]=$22;
 var $24=HEAP32[(($5)>>2)];
 var $25=(($__v)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}

//Func
function __ZNSt3__16vectorIcNS_9allocatorIcEEE7reserveEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v=sp;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=($7>>>0)<($__n>>>0);
 if($8){label=2;break;}else{label=12;break;}
 case 2: 
 var $10=(($this+8)|0);
 var $11=$10;
 var $12=(($this+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=((($14)-($6))|0);
 var $16=(($__v+12)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($__v+16)|0);
 HEAP32[(($17)>>2)]=$11;
 var $18=($__n|0)==0;
 if($18){var $31=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $20=_malloc($__n);
 var $21=($20|0)==0;
 if($21){label=4;break;}else{var $31=$20;label=7;break;}
 case 4: 
 var $22=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=$22;
 FUNCTION_TABLE[$25]();
 var $26=_malloc($__n);
 var $27=($26|0)==0;
 if($27){label=4;break;}else{var $31=$26;label=7;break;}
 case 6: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=15192;
 ___cxa_throw($29,26096,(782));
 throw "Reached an unreachable!";
 case 7: 
 var $31;
 var $32=(($__v)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($31+$15)|0);
 var $34=(($__v+8)|0);
 HEAP32[(($34)>>2)]=$33;
 var $35=(($__v+4)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=(($31+$__n)|0);
 HEAP32[(($16)>>2)]=$36;
 __ZNSt3__16vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this,$__v);
 var $37=HEAP32[(($35)>>2)];
 var $_pre=HEAP32[(($34)>>2)];
 var $39=$_pre;label=8;break;
 case 8: 
 var $39;
 var $40=($37|0)==($39|0);
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 var $42=((($39)-(1))|0);
 HEAP32[(($34)>>2)]=$42;
 var $39=$42;label=8;break;
 case 10: 
 var $43=HEAP32[(($32)>>2)];
 var $44=($43|0)==0;
 if($44){label=12;break;}else{label=11;break;}
 case 11: 
 _free($43);
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($this,$__sz){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=($7>>>0)<($__sz>>>0);
 if($8){label=2;break;}else{label=33;break;}
 case 2: 
 var $10=((($__sz)-($7))|0);
 var $11=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $12=(($this+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=((($14)-($5))|0);
 var $16=($15>>>0)<($10>>>0);
 if($16){label=6;break;}else{var $_01=$10;var $18=$2;label=3;break;}
 case 3: 
 var $18;
 var $_01;
 var $19=($18|0)==0;
 if($19){var $21=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAP8[(($18)>>0)]=0;
 var $_pre2=HEAP32[(($1)>>2)];
 var $21=$_pre2;label=5;break;
 case 5: 
 var $21;
 var $22=(($21+1)|0);
 HEAP32[(($1)>>2)]=$22;
 var $23=((($_01)-(1))|0);
 var $24=($23|0)==0;
 if($24){label=37;break;}else{var $_01=$23;var $18=$22;label=3;break;}
 case 6: 
 var $26=(($this+8)|0);
 var $27=$26;
 var $28=($__sz|0)<0;
 if($28){label=7;break;}else{label=17;break;}
 case 7: 
 var $29=___cxa_allocate_exception(8);
 var $30=$29;
 HEAP32[(($30)>>2)]=15352;
 var $31=(($29+4)|0);
 var $32=_strlen(1736);
 var $33=((($32)+(13))|0);
 var $34=($33|0)==0;
 var $_size_i4_i=($34?1:$33);
 var $35=_malloc($_size_i4_i);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{var $_lcssa_i6_i=$35;label=13;break;}
 case 8: 
 var $37=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=11;break;}else{label=9;break;}
 case 9: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $41=_malloc($_size_i4_i);
 var $42=($41|0)==0;
 if($42){label=8;break;}else{var $_lcssa_i6_i=$41;label=13;break;}
 case 11: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($44,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i6_i;
 var $46=$_lcssa_i6_i;
 HEAP32[(($46)>>2)]=$32;
 var $47=(($_lcssa_i6_i+4)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=$32;
 var $49=(($_lcssa_i6_i+8)|0);
 var $50=$49;
 HEAP32[(($50)>>2)]=0;
 var $51=(($_lcssa_i6_i+12)|0);
 var $52=((($32)+(1))|0);
 assert($52 % 1 === 0);(_memcpy($51, 1736, $52)|0);
 var $53=$31;
 HEAP32[(($53)>>2)]=$51;
 HEAP32[(($30)>>2)]=15320;
 ___cxa_throw($29,26160,(482));
 throw "Reached an unreachable!";
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=16;break;
 case 16: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($29);
 ___resumeException($lpad_phi$0)
 case 17: 
 var $56=((($14)-($6))|0);
 var $57=($56>>>0)<1073741823;
 if($57){label=19;break;}else{label=18;break;}
 case 18: 
 var $58=(($__v_i+12)|0);
 HEAP32[(($58)>>2)]=0;
 var $59=(($__v_i+16)|0);
 HEAP32[(($59)>>2)]=$27;
 var $67=2147483647;var $66=$58;label=20;break;
 case 19: 
 var $60=$56<<1;
 var $61=($60>>>0)<($__sz>>>0);
 var $__sz_=($61?$__sz:$60);
 var $62=(($__v_i+12)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($__v_i+16)|0);
 HEAP32[(($63)>>2)]=$27;
 var $64=($__sz_|0)==0;
 if($64){var $81=0;var $80=$__sz_;var $79=$62;label=24;break;}else{var $67=$__sz_;var $66=$62;label=20;break;}
 case 20: 
 var $66;
 var $67;
 var $68=_malloc($67);
 var $69=($68|0)==0;
 if($69){label=21;break;}else{var $81=$68;var $80=$67;var $79=$66;label=24;break;}
 case 21: 
 var $70=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $71=($70|0)==0;
 if($71){label=23;break;}else{label=22;break;}
 case 22: 
 var $73=$70;
 FUNCTION_TABLE[$73]();
 var $74=_malloc($67);
 var $75=($74|0)==0;
 if($75){label=21;break;}else{var $81=$74;var $80=$67;var $79=$66;label=24;break;}
 case 23: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 HEAP32[(($78)>>2)]=15192;
 ___cxa_throw($77,26096,(782));
 throw "Reached an unreachable!";
 case 24: 
 var $79;
 var $80;
 var $81;
 var $82=(($__v_i)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=(($81+$7)|0);
 var $84=(($__v_i+8)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=(($__v_i+4)|0);
 HEAP32[(($85)>>2)]=$83;
 var $86=(($81+$80)|0);
 HEAP32[(($79)>>2)]=$86;
 var $_0=$10;var $88=$83;label=25;break;
 case 25: 
 var $88;
 var $_0;
 var $89=($88|0)==0;
 if($89){label=27;break;}else{label=26;break;}
 case 26: 
 HEAP8[(($88)>>0)]=0;
 label=27;break;
 case 27: 
 var $91=(($88+1)|0);
 var $92=((($_0)-(1))|0);
 var $93=($92|0)==0;
 if($93){label=28;break;}else{var $_0=$92;var $88=$91;label=25;break;}
 case 28: 
 HEAP32[(($84)>>2)]=$91;
 __ZNSt3__16vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this,$__v_i);
 var $94=HEAP32[(($85)>>2)];
 var $_pre=HEAP32[(($84)>>2)];
 var $96=$_pre;label=29;break;
 case 29: 
 var $96;
 var $97=($94|0)==($96|0);
 if($97){label=31;break;}else{label=30;break;}
 case 30: 
 var $99=((($96)-(1))|0);
 HEAP32[(($84)>>2)]=$99;
 var $96=$99;label=29;break;
 case 31: 
 var $100=HEAP32[(($82)>>2)];
 var $101=($100|0)==0;
 if($101){label=37;break;}else{label=32;break;}
 case 32: 
 _free($100);
 label=37;break;
 case 33: 
 var $104=($7>>>0)>($__sz>>>0);
 if($104){label=34;break;}else{label=37;break;}
 case 34: 
 var $106=(($4+$__sz)|0);
 var $108=$2;label=35;break;
 case 35: 
 var $108;
 var $109=($106|0)==($108|0);
 if($109){label=37;break;}else{label=36;break;}
 case 36: 
 var $111=((($108)-(1))|0);
 HEAP32[(($1)>>2)]=$111;
 var $108=$111;label=35;break;
 case 37: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=19496;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(1))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(1))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 _free($3);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($storemerge>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 var $12=HEAP32[(($3)>>2)];
 var $13=(($12+($storemerge<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($6+$storemerge)|0);
 var $18=HEAP8[(($17)>>0)];
 var $19=(($6+$14)|0);
 HEAP8[(($19)>>0)]=$18;
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcE6SizeOfEv($this){
 var label=0;


 return 1;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 return $_;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEEcE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+$i)|0);
 return $3;
}

//Func
function __ZNSt3__16vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this,$__v){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $6=$4;
 var $7=$2;
 var $8=((($6)-($7))|0);
 var $9=HEAP32[(($5)>>2)];
 var $10=(((-$8))|0);
 var $11=(($9+$10)|0);
 HEAP32[(($5)>>2)]=$11;
 assert($8 % 1 === 0);(_memcpy($11, $2, $8)|0);
 var $12=HEAP32[(($1)>>2)];
 var $13=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$13;
 HEAP32[(($5)>>2)]=$12;
 var $14=(($__v+8)|0);
 var $15=HEAP32[(($3)>>2)];
 var $16=HEAP32[(($14)>>2)];
 HEAP32[(($3)>>2)]=$16;
 HEAP32[(($14)>>2)]=$15;
 var $17=(($this+8)|0);
 var $18=(($__v+12)|0);
 var $19=HEAP32[(($17)>>2)];
 var $20=HEAP32[(($18)>>2)];
 HEAP32[(($17)>>2)]=$20;
 HEAP32[(($18)>>2)]=$19;
 var $21=HEAP32[(($5)>>2)];
 var $22=(($__v)|0);
 HEAP32[(($22)>>2)]=$21;
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=18920;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+12)|0);
 var $_pre=HEAP32[(($4)>>2)];
 var $6=$_pre;label=2;break;
 case 2: 
 var $6;
 var $7=($3|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=((($6)-(1))|0);
 HEAP32[(($4)>>2)]=$9;
 var $6=$9;label=2;break;
 case 4: 
 var $10=($3|0)==0;
 if($10){label=8;break;}else{var $12=$3;label=5;break;}
 case 5: 
 var $12;
 var $13=($3|0)==($12|0);
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=((($12)-(1))|0);
 HEAP32[(($4)>>2)]=$15;
 var $12=$15;label=5;break;
 case 7: 
 _free($3);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcED0Ev($this){
 var label=0;


 __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcE6ResizeEj($this,$sz){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($1,$sz);
 return;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=(($this+8)|0);
 var $3=(($newVertIndex)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($1)>>2)];
 var $6=HEAP32[(($2)>>2)];
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($storemerge>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 var $12=HEAP32[(($3)>>2)];
 var $13=(($12+($storemerge<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($6+$storemerge)|0);
 var $18=HEAP8[(($17)>>0)];
 var $19=(($6+$14)|0);
 HEAP8[(($19)>>0)]=$18;
 label=5;break;
 case 5: 
 var $21=((($storemerge)+(1))|0);
 var $storemerge=$21;label=2;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcE6SizeOfEv($this){
 var label=0;


 return 1;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcE9DataBeginEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 var $_=($5?0:$2);
 return $_;
}

//Func
function __ZN3vcg14SimpleTempDataINSt3__16vectorI8MyVertexNS1_9allocatorIS3_EEEEcE2AtEj($this,$i){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+$i)|0);
 return $3;
}

//Func
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v=sp;
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=(((($9|0))/(12))&-1);
 var $11=((($10)+(1))|0);
 var $12=($11>>>0)>357913941;
 if($12){label=2;break;}else{label=12;break;}
 case 2: 
 var $13=___cxa_allocate_exception(8);
 var $14=$13;
 HEAP32[(($14)>>2)]=15352;
 var $15=(($13+4)|0);
 var $16=_strlen(1736);
 var $17=((($16)+(13))|0);
 var $18=($17|0)==0;
 var $_size_i5=($18?1:$17);
 var $19=_malloc($_size_i5);
 var $20=($19|0)==0;
 if($20){label=3;break;}else{var $_lcssa_i7=$19;label=8;break;}
 case 3: 
 var $21=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=4;break;}
 case 4: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $25=_malloc($_size_i5);
 var $26=($25|0)==0;
 if($26){label=3;break;}else{var $_lcssa_i7=$25;label=8;break;}
 case 6: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 HEAP32[(($29)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $_lcssa_i7;
 var $30=$_lcssa_i7;
 HEAP32[(($30)>>2)]=$16;
 var $31=(($_lcssa_i7+4)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=$16;
 var $33=(($_lcssa_i7+8)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $35=(($_lcssa_i7+12)|0);
 var $36=((($16)+(1))|0);
 assert($36 % 1 === 0);(_memcpy($35, 1736, $36)|0);
 var $37=$15;
 HEAP32[(($37)>>2)]=$35;
 HEAP32[(($14)>>2)]=15320;
 ___cxa_throw($13,26160,(482));
 throw "Reached an unreachable!";
 case 9: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($13);
 ___resumeException($lpad_phi$0)
 case 12: 
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=((($42)-($8))|0);
 var $44=(((($43|0))/(12))&-1);
 var $45=($44>>>0)<178956970;
 if($45){label=14;break;}else{label=13;break;}
 case 13: 
 var $46=(($__v+12)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($__v+16)|0);
 HEAP32[(($47)>>2)]=$2;
 var $storemerge111=357913941;var $54=$46;label=15;break;
 case 14: 
 var $48=$44<<1;
 var $49=($48>>>0)<($11>>>0);
 var $_=($49?$11:$48);
 var $50=(($__v+12)|0);
 HEAP32[(($50)>>2)]=0;
 var $51=(($__v+16)|0);
 HEAP32[(($51)>>2)]=$2;
 var $52=($_|0)==0;
 if($52){var $70=0;var $storemerge112=$_;var $69=$50;label=20;break;}else{var $storemerge111=$_;var $54=$50;label=15;break;}
 case 15: 
 var $54;
 var $storemerge111;
 var $55=((($storemerge111)*(12))&-1);
 var $56=($55|0)==0;
 var $_size_i=($56?1:$55);
 var $57=_malloc($_size_i);
 var $58=($57|0)==0;
 if($58){label=16;break;}else{var $_lcssa_i=$57;label=19;break;}
 case 16: 
 var $59=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $60=($59|0)==0;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=$59;
 FUNCTION_TABLE[$62]();
 var $63=_malloc($_size_i);
 var $64=($63|0)==0;
 if($64){label=16;break;}else{var $_lcssa_i=$63;label=19;break;}
 case 18: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=15192;
 ___cxa_throw($66,26096,(782));
 throw "Reached an unreachable!";
 case 19: 
 var $_lcssa_i;
 var $68=$_lcssa_i;
 var $70=$68;var $storemerge112=$storemerge111;var $69=$54;label=20;break;
 case 20: 
 var $69;
 var $storemerge112;
 var $70;
 var $71=(($__v)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($70+((($10)*(12))&-1))|0);
 var $73=(($__v+8)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($__v+4)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=(($70+((($storemerge112)*(12))&-1))|0);
 HEAP32[(($69)>>2)]=$75;
 var $76=($72|0)==0;
 if($76){label=24;break;}else{label=21;break;}
 case 21: 
 var $78=$72;
 var $79=$__x;
 assert(12 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];
 var $80=$__x;
 var $storemerge=0;label=22;break;
 case 22: 
 var $storemerge;
 var $82=($storemerge>>>0)<3;
 if($82){label=23;break;}else{label=24;break;}
 case 23: 
 var $84=(($80+($storemerge<<2))|0);
 HEAP32[(($84)>>2)]=0;
 var $85=((($storemerge)+(1))|0);
 var $storemerge=$85;label=22;break;
 case 24: 
 var $_sum=((($10)+(1))|0);
 var $86=(($70+((($_sum)*(12))&-1))|0);
 HEAP32[(($73)>>2)]=$86;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v);
 var $87=HEAP32[(($74)>>2)];
 var $_pre=HEAP32[(($73)>>2)];
 var $88=$_pre;label=25;break;
 case 25: 
 var $88;
 var $89=($87|0)==($88|0);
 if($89){label=28;break;}else{label=26;break;}
 case 26: 
 var $91=((($88)-(12))|0);
 HEAP32[(($73)>>2)]=$91;
 var $92=$91;
 var $93=HEAP8[(($92)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $88=$91;label=25;break;}else{label=27;break;}
 case 27: 
 var $97=((($88)-(12)+8)|0);
 var $98=HEAP32[(($97)>>2)];
 _free($98);
 var $88=$91;label=25;break;
 case 28: 
 var $99=HEAP32[(($71)>>2)];
 var $100=($99|0)==0;
 if($100){label=30;break;}else{label=29;break;}
 case 29: 
 var $102=$99;
 _free($102);
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $_0=$4;label=2;break;
 case 2: 
 var $_0;
 var $7=($_0|0)==($2|0);
 if($7){label=7;break;}else{label=3;break;}
 case 3: 
 var $9=HEAP32[(($5)>>2)];
 var $10=((($_0)-(12))|0);
 var $11=((($9)-(12))|0);
 var $12=$11;
 var $13=$10;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 var $14=$10;
 var $storemerge=0;label=4;break;
 case 4: 
 var $storemerge;
 var $16=($storemerge>>>0)<3;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=(($14+($storemerge<<2))|0);
 HEAP32[(($18)>>2)]=0;
 var $19=((($storemerge)+(1))|0);
 var $storemerge=$19;label=4;break;
 case 6: 
 var $20=HEAP32[(($5)>>2)];
 var $21=((($20)-(12))|0);
 HEAP32[(($5)>>2)]=$21;
 var $_0=$10;label=2;break;
 case 7: 
 var $22=HEAP32[(($1)>>2)];
 var $23=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$23;
 HEAP32[(($5)>>2)]=$22;
 var $24=(($__v+8)|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($24)>>2)];
 HEAP32[(($3)>>2)]=$26;
 HEAP32[(($24)>>2)]=$25;
 var $27=(($this+8)|0);
 var $28=(($__v+12)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=HEAP32[(($28)>>2)];
 HEAP32[(($27)>>2)]=$30;
 HEAP32[(($28)>>2)]=$29;
 var $31=HEAP32[(($5)>>2)];
 var $32=(($__v)|0);
 HEAP32[(($32)>>2)]=$31;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__last2;
 var $2=$__first2;
 var $3=((($1)-($2))|0);
 var $4=($__last2|0)==($__first2|0);
 if($4){var $_0=$__first1;label=9;break;}else{label=2;break;}
 case 2: 
 var $6=$__last1;
 var $7=$__first1;
 var $8=((($6)-($7))|0);
 var $9=($8|0)<($3|0);
 if($9){var $_0=$__last1;label=9;break;}else{label=3;break;}
 case 3: 
 var $11=(((1)-($3))|0);
 var $12=(($__last1+$11)|0);
 var $_01=$__first1;label=4;break;
 case 4: 
 var $_01;
 var $14=($_01|0)==($12|0);
 if($14){var $_0=$__last1;label=9;break;}else{label=5;break;}
 case 5: 
 var $16=HEAP8[(($_01)>>0)];
 var $17=HEAP8[(($__first2)>>0)];
 var $18=__ZNSt3__111char_traitsIcE2eqEcc($16,$17);
 if($18){var $__m2_0=$__first2;var $__m1_0=$_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $_01_be=(($_01+1)|0);
 var $_01=$_01_be;label=4;break;
 case 7: 
 var $__m1_0;
 var $__m2_0;
 var $19=(($__m2_0+1)|0);
 var $20=($19|0)==($__last2|0);
 if($20){var $_0=$_01;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=(($__m1_0+1)|0);
 var $23=HEAP8[(($22)>>0)];
 var $24=HEAP8[(($19)>>0)];
 var $25=__ZNSt3__111char_traitsIcE2eqEcc($23,$24);
 if($25){var $__m2_0=$19;var $__m1_0=$22;label=7;break;}else{label=6;break;}
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2){
 var label=0;


 var $1=(($__c1<<24)>>24)==(($__c2<<24)>>24);
 return $1;
}

//Func
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v=sp;
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=(((($9|0))/(12))&-1);
 var $11=((($10)+(1))|0);
 var $12=($11>>>0)>357913941;
 if($12){label=2;break;}else{label=12;break;}
 case 2: 
 var $13=___cxa_allocate_exception(8);
 var $14=$13;
 HEAP32[(($14)>>2)]=15352;
 var $15=(($13+4)|0);
 var $16=_strlen(1736);
 var $17=((($16)+(13))|0);
 var $18=($17|0)==0;
 var $_size_i13=($18?1:$17);
 var $19=_malloc($_size_i13);
 var $20=($19|0)==0;
 if($20){label=3;break;}else{var $_lcssa_i15=$19;label=8;break;}
 case 3: 
 var $21=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=4;break;}
 case 4: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $25=_malloc($_size_i13);
 var $26=($25|0)==0;
 if($26){label=3;break;}else{var $_lcssa_i15=$25;label=8;break;}
 case 6: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 HEAP32[(($29)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $_lcssa_i15;
 var $30=$_lcssa_i15;
 HEAP32[(($30)>>2)]=$16;
 var $31=(($_lcssa_i15+4)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=$16;
 var $33=(($_lcssa_i15+8)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $35=(($_lcssa_i15+12)|0);
 var $36=((($16)+(1))|0);
 assert($36 % 1 === 0);(_memcpy($35, 1736, $36)|0);
 var $37=$15;
 HEAP32[(($37)>>2)]=$35;
 HEAP32[(($14)>>2)]=15320;
 ___cxa_throw($13,26160,(482));
 throw "Reached an unreachable!";
 case 9: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($13);
 ___resumeException($lpad_phi$0)
 case 12: 
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=((($42)-($8))|0);
 var $44=(((($43|0))/(12))&-1);
 var $45=($44>>>0)<178956970;
 if($45){label=14;break;}else{label=13;break;}
 case 13: 
 var $46=(($__v+12)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($__v+16)|0);
 HEAP32[(($47)>>2)]=$2;
 var $storemerge26=357913941;var $54=$46;label=15;break;
 case 14: 
 var $48=$44<<1;
 var $49=($48>>>0)<($11>>>0);
 var $_=($49?$11:$48);
 var $50=(($__v+12)|0);
 HEAP32[(($50)>>2)]=0;
 var $51=(($__v+16)|0);
 HEAP32[(($51)>>2)]=$2;
 var $52=($_|0)==0;
 if($52){var $70=0;var $storemerge27=$_;var $69=$50;label=20;break;}else{var $storemerge26=$_;var $54=$50;label=15;break;}
 case 15: 
 var $54;
 var $storemerge26;
 var $55=((($storemerge26)*(12))&-1);
 var $56=($55|0)==0;
 var $_size_i=($56?1:$55);
 var $57=_malloc($_size_i);
 var $58=($57|0)==0;
 if($58){label=16;break;}else{var $_lcssa_i=$57;label=19;break;}
 case 16: 
 var $59=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $60=($59|0)==0;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=$59;
 FUNCTION_TABLE[$62]();
 var $63=_malloc($_size_i);
 var $64=($63|0)==0;
 if($64){label=16;break;}else{var $_lcssa_i=$63;label=19;break;}
 case 18: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=15192;
 ___cxa_throw($66,26096,(782));
 throw "Reached an unreachable!";
 case 19: 
 var $_lcssa_i;
 var $68=$_lcssa_i;
 var $70=$68;var $storemerge27=$storemerge26;var $69=$54;label=20;break;
 case 20: 
 var $69;
 var $storemerge27;
 var $70;
 var $71=(($__v)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($70+((($10)*(12))&-1))|0);
 var $73=(($__v+8)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($__v+4)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=(($70+((($storemerge27)*(12))&-1))|0);
 HEAP32[(($69)>>2)]=$75;
 var $76=($72|0)==0;
 if($76){var $119=0;label=36;break;}else{label=21;break;}
 case 21: 
 var $78=$__x;
 var $79=HEAP8[(($78)>>0)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=22;break;}else{label=23;break;}
 case 22: 
 var $83=$72;
 assert(12 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];HEAP32[((($83)+(8))>>2)]=HEAP32[((($78)+(8))>>2)];
 var $119=$72;label=36;break;
 case 23: 
 var $85=(($__x+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($__x+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88>>>0)>4294967279;
 if($89){label=24;break;}else{label=26;break;}
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=44;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $92=($88>>>0)<11;
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 var $94=$88<<1;
 var $95=(($94)&255);
 var $96=$72;
 HEAP8[(($96)>>0)]=$95;
 var $97=$72;
 var $98=(($97+1)|0);
 var $__p_0_i=$98;label=35;break;
 case 28: 
 var $99=((($88)+(16))|0);
 var $100=$99&-16;
 var $101=($100|0)==0;
 var $_size_i4=($101?1:$100);
 var $102=_malloc($_size_i4);
 var $103=($102|0)==0;
 if($103){label=29;break;}else{var $_lcssa_i6=$102;label=34;break;}
 case 29: 
 var $104=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $105=($104|0)==0;
 if($105){label=32;break;}else{label=30;break;}
 case 30: 
 var $107=$104;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=43;break; }
 case 31: 
 var $108=_malloc($_size_i4);
 var $109=($108|0)==0;
 if($109){label=29;break;}else{var $_lcssa_i6=$108;label=34;break;}
 case 32: 
 var $111=___cxa_allocate_exception(4);
 var $112=$111;
 HEAP32[(($112)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($111,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=44;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $_lcssa_i6;
 var $113=(($70+((($10)*(12))&-1)+8)|0);
 HEAP32[(($113)>>2)]=$_lcssa_i6;
 var $114=$100|1;
 var $115=(($72)|0);
 HEAP32[(($115)>>2)]=$114;
 var $116=(($70+((($10)*(12))&-1)+4)|0);
 HEAP32[(($116)>>2)]=$88;
 var $__p_0_i=$_lcssa_i6;label=35;break;
 case 35: 
 var $__p_0_i;
 assert($88 % 1 === 0);(_memcpy($__p_0_i, $86, $88)|0);
 var $117=(($__p_0_i+$88)|0);
 HEAP8[(($117)>>0)]=0;
 var $_pre=HEAP32[(($73)>>2)];
 var $119=$_pre;label=36;break;
 case 36: 
 var $119;
 var $120=(($119+12)|0);
 HEAP32[(($73)>>2)]=$120;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v);
 var $121=HEAP32[(($74)>>2)];
 var $_pre24=HEAP32[(($73)>>2)];
 var $122=$_pre24;label=37;break;
 case 37: 
 var $122;
 var $123=($121|0)==($122|0);
 if($123){label=40;break;}else{label=38;break;}
 case 38: 
 var $125=((($122)-(12))|0);
 HEAP32[(($73)>>2)]=$125;
 var $126=$125;
 var $127=HEAP8[(($126)>>0)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){var $122=$125;label=37;break;}else{label=39;break;}
 case 39: 
 var $131=((($122)-(12)+8)|0);
 var $132=HEAP32[(($131)>>2)];
 _free($132);
 var $122=$125;label=37;break;
 case 40: 
 var $133=HEAP32[(($71)>>2)];
 var $134=($133|0)==0;
 if($134){label=42;break;}else{label=41;break;}
 case 41: 
 var $136=$133;
 _free($136);
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
 case 43: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi23$1=$lpad_loopexit21$1;var $lpad_phi23$0=$lpad_loopexit21$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi23$1=$lpad_nonloopexit22$1;var $lpad_phi23$0=$lpad_nonloopexit22$0;label=45;break;
 case 45: 
 var $lpad_phi23$0;
 var $lpad_phi23$1;
 var $138=HEAP32[(($74)>>2)];
 var $_pre25=HEAP32[(($73)>>2)];
 var $139=$_pre25;label=46;break;
 case 46: 
 var $139;
 var $140=($138|0)==($139|0);
 if($140){label=49;break;}else{label=47;break;}
 case 47: 
 var $142=((($139)-(12))|0);
 HEAP32[(($73)>>2)]=$142;
 var $143=$142;
 var $144=HEAP8[(($143)>>0)];
 var $145=$144&1;
 var $146=(($145<<24)>>24)==0;
 if($146){var $139=$142;label=46;break;}else{label=48;break;}
 case 48: 
 var $148=((($139)-(12)+8)|0);
 var $149=HEAP32[(($148)>>2)];
 _free($149);
 var $139=$142;label=46;break;
 case 49: 
 var $150=HEAP32[(($71)>>2)];
 var $151=($150|0)==0;
 if($151){label=51;break;}else{label=50;break;}
 case 50: 
 var $153=$150;
 _free($153);
 label=51;break;
 case 51: 
 ___resumeException($lpad_phi23$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterOBJI6MyMeshE4OpenERS3_PKcRNS4_4InfoE($m,$filename,$oi){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i_i387=sp;
 var $f_i_i_i386=(sp)+(112);
 var $f_i_i_i383=(sp)+(224);
 var $f_i_i_i380=(sp)+(336);
 var $f_i_i_i377=(sp)+(448);
 var $f_i_i_i42_i=(sp)+(560);
 var $f_i_i_i41_i=(sp)+(672);
 var $f_i_i_i40_i=(sp)+(784);
 var $f_i_i_i39_i=(sp)+(896);
 var $f_i_i_i38_i=(sp)+(1008);
 var $f_i_i_i37_i=(sp)+(1120);
 var $f_i_i_i36_i=(sp)+(1232);
 var $f_i_i_i35_i=(sp)+(1344);
 var $f_i_i_i34_i=(sp)+(1456);
 var $f_i_i_i_i=(sp)+(1568);
 var $stream_i223=(sp)+(1680);
 var $tokens_i=(sp)+(1872);
 var $header_i=(sp)+(1888);
 var $currentMaterial_i=(sp)+(1904);
 var $1=(sp)+(1984);
 var $textureName_i=(sp)+(2064);
 var $2=(sp)+(2080);
 var $3=(sp)+(2096);
 var $4=(sp)+(2112);
 var $__v_i_i=(sp)+(2128);
 var $__v_i50=(sp)+(2152);
 var $f_i_i_i44=(sp)+(2176);
 var $f_i_i_i39=(sp)+(2288);
 var $f_i_i_i=(sp)+(2400);
 var $5=(sp)+(2512);
 var $stream_i=(sp)+(2528);
 var $line_i=(sp)+(2720);
 var $stream=(sp)+(2736);
 var $materials=(sp)+(2928);
 var $normals=(sp)+(2944);
 var $indexedFaces=(sp)+(2960);
 var $tokens=(sp)+(2976);
 var $header=(sp)+(2992);
 var $defaultMaterial=(sp)+(3008);
 var $vi=(sp)+(3088);
 var $vertexColorVector=(sp)+(3096);
 var $ff=(sp)+(3112);
 var $polygonVect=(sp)+(3160);
 var $indexVVect=(sp)+(3176);
 var $indexNVect=(sp)+(3192);
 var $indexTVect=(sp)+(3208);
 var $indexTriangulatedVect=(sp)+(3224);
 var $locInd=(sp)+(3240);
 var $materialFileName=(sp)+(3256);
 var $materialName=(sp)+(3272);
 var $currentMaterialName=(sp)+(3288);
 var $6=(sp)+(3304);
 var $7=(sp)+(3312);
 var $8=(($m)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($8);
 var $9=(($oi+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($oi)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==-1;
 if($13){label=2;break;}else{var $397=$12;label=103;break;}
 case 2: 
 var $15=$stream_i;
 var $$etemp$0$0=188;
 var $$etemp$0$1=0;

 var $16=$line_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $17=(($stream_i+108)|0);
 var $18=(($stream_i)|0);
 var $19=(($stream_i+8)|0);
 HEAP32[(($18)>>2)]=28556;
 var $20=$stream_i;
 var $21=(($stream_i+108)|0);
 var $22=(($21)|0);
 HEAP32[(($22)>>2)]=28576;
 var $23=(($stream_i+4)|0);
 HEAP32[(($23)>>2)]=0;
 var $24=HEAP32[(($20)>>2)];
 var $25=((($24)-(12))|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$19;
 var $_sum415=((($27)+(24))|0);
 var $29=(($15+$_sum415)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$28;
 var $_sum416=((($27)+(16))|0);
 var $31=(($15+$_sum416)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=0;
 var $_sum417=((($27)+(20))|0);
 var $33=(($15+$_sum417)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $_sum418=((($27)+(4))|0);
 var $35=(($15+$_sum418)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=4098;
 var $_sum419=((($27)+(12))|0);
 var $37=(($15+$_sum419)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0;
 var $_sum420=((($27)+(8))|0);
 var $39=(($15+$_sum420)|0);
 var $40=$39;
 HEAP32[(($40)>>2)]=6;
 var $_sum421=((($27)+(32))|0);
 var $41=(($15+$_sum421)|0);
 var $_sum422=((($27)+(28))|0);
 var $42=(($15+$_sum422)|0);
 var $43=$42;
 _memset($41, 0, 40)|0;
 __ZNSt3__16localeC2Ev($43);
 var $_sum_i=((($27)+(72))|0);
 var $44=(($15+$_sum_i)|0);
 var $45=$44;
 HEAP32[(($45)>>2)]=0;
 var $_sum1_i=((($27)+(76))|0);
 var $46=(($15+$_sum1_i)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=-1;
 HEAP32[(($18)>>2)]=17124;
 HEAP32[(($17)>>2)]=17144;
 var $48=(($stream_i+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $50=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($48,$filename,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $52=($50|0)==0;
 if($52){label=5;break;}else{label=9;break;}
 case 5: 
 var $54=HEAP32[(($20)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($15+$57)|0);
 var $59=$58;
 var $_sum6_i=((($57)+(16))|0);
 var $60=(($15+$_sum6_i)|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $63=$62|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($59,$63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=7;break; }
 case 6: 
 var $65$0 = ___cxa_find_matching_catch(); var $65$1 = tempRet0;
 var $66=$65$0;
 var $67=$65$1;
 var $_0467=$66;var $_0473=$67;label=8;break;
 case 7: 
 var $69$0 = ___cxa_find_matching_catch(); var $69$1 = tempRet0;
 var $70=$69$0;
 var $71=$69$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($48);
 var $_0467=$70;var $_0473=$71;label=8;break;
 case 8: 
 var $_0473;
 var $_0467;
 var $73=(($stream_i+108)|0);
 __ZNSt3__18ios_baseD2Ev($73);
 var $74$0=$_0467;
 var $74$1=0;
 var $75$0=$74$0;
 var $75$1=$_0473;
 ___resumeException($75$0)
 case 9: 
 var $76=HEAP32[(($20)>>2)];
 var $77=((($76)-(12))|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $_sum2_i=((($79)+(16))|0);
 var $80=(($15+$_sum2_i)|0);
 var $81=$80;
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&5;
 var $84=($83|0)==0;
 if($84){label=15;break;}else{label=10;break;}
 case 10: 
 var $86=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $87=($86|0)==0;
 if($87){label=12;break;}else{label=102;break;}
 case 12: 
 var $89=HEAP32[(($20)>>2)];
 var $90=((($89)-(12))|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($15+$92)|0);
 var $94=$93;
 var $_sum5_i=((($92)+(16))|0);
 var $95=(($15+$_sum5_i)|0);
 var $96=$95;
 var $97=HEAP32[(($96)>>2)];
 var $98=$97|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($94,$98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=13;break; }
 case 13: 
 var $100$0 = ___cxa_find_matching_catch(); var $100$1 = tempRet0;
 var $eh_lpad_body9_i$1=$100$1;var $eh_lpad_body9_i$0=$100$0;label=14;break;
 case 14: 
 var $eh_lpad_body9_i$0;
 var $eh_lpad_body9_i$1;
 var $101=$eh_lpad_body9_i$0;
 var $102=$eh_lpad_body9_i$1;
 var $_0474=$101;var $_0475=$102;label=101;break;
 case 15: 
 var $104=$stream_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($104,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=13;break; }
 case 16: 
 var $106=$5;
 var $$etemp$2$0=16;
 var $$etemp$2$1=0;

 var $107=HEAP32[(($20)>>2)];
 var $108=((($107)-(12))|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $_sum_i15_i=((($110)+(16))|0);
 var $111=(($15+$_sum_i15_i)|0);
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)==0;
 if($114){label=17;break;}else{label=20;break;}
 case 17: 
 var $_sum13_i_i=((($110)+(72))|0);
 var $116=(($15+$_sum13_i_i)|0);
 var $117=$116;
 var $118=HEAP32[(($117)>>2)];
 var $119=($118|0)==0;
 if($119){var $125=$110;label=21;break;}else{label=18;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=24;break; }
 case 19: 
 var $_pre=HEAP32[(($20)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert611=$_phi_trans_insert;
 var $_pre612=HEAP32[(($_phi_trans_insert611)>>2)];
 var $125=$_pre612;label=21;break;
 case 20: 
 var $122=(($15+$110)|0);
 var $123=$122;
 var $124=$113|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($123,$124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sroa_4443_0_off0=-1;label=30;break; } else { label=24;break; }
 case 21: 
 var $125;
 var $_sum16_i_i=((($125)+(16))|0);
 var $126=(($15+$_sum16_i_i)|0);
 var $127=$126;
 var $128=HEAP32[(($127)>>2)];
 var $phitmp683=($128|0)!=0;
 if($phitmp683){var $_sroa_4443_0_off0=-1;label=30;break;}else{label=22;break;}
 case 22: 
 var $130=HEAP32[(($20)>>2)];
 var $131=((($130)-(12))|0);
 var $132=$131;
 var $133=HEAP32[(($132)>>2)];
 var $_sum_i_i=((($133)+(24))|0);
 var $134=(($15+$_sum_i_i)|0);
 var $135=$134;
 var $136=HEAP32[(($135)>>2)];
 var $137=$136;
 var $138=$136;
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($5,$137,$$etemp$3$0,$$etemp$3$1,1,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=24;break; }
 case 23: 
 var $142=(($5+8)|0);
 var $ld$4$0=(($142)|0);
 var $143$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($142+4)|0);
 var $143$1=HEAP32[(($ld$5$1)>>2)];
 var $extract_t$0=$143$0;
 var $extract_t=$extract_t$0;
 var $_sroa_4443_0_off0=$extract_t;label=30;break;
 case 24: 
 var $145$0 = ___cxa_find_matching_catch(0); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=___cxa_begin_catch($146);
 var $148=HEAP32[(($20)>>2)];
 var $149=((($148)-(12))|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $_sum423=((($151)+(16))|0);
 var $152=(($15+$_sum423)|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=$154|1;
 HEAP32[(($153)>>2)]=$155;
 var $_sum424=((($151)+(20))|0);
 var $156=(($15+$_sum424)|0);
 var $157=$156;
 var $158=HEAP32[(($157)>>2)];
 var $159=$158&1;
 var $160=($159|0)==0;
 if($160){label=27;break;}else{label=25;break;}
 case 25: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=28;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sroa_4443_0_off0=-1;label=30;break; } else { label=13;break; }
 case 28: 
 var $163$0 = ___cxa_find_matching_catch(); var $163$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body9_i$1=$163$1;var $eh_lpad_body9_i$0=$163$0;label=14;break; } else { label=29;break; }
 case 29: 
 var $165$0 = ___cxa_find_matching_catch(0); var $165$1 = tempRet0;
 var $166=$165$0;
 ___clang_call_terminate($166);
 throw "Reached an unreachable!";
 case 30: 
 var $_sroa_4443_0_off0;
 var $$etemp$6$0=16;
 var $$etemp$6$1=0;

 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($104,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=13;break; }
 case 31: 
 var $168=($_sroa_4443_0_off0|0)==0;
 if($168){label=102;break;}else{label=32;break;}
 case 32: 
 var $170=(($oi+8)|0);
 var $171=(($oi+12)|0);
 var $172=(($oi+16)|0);
 var $173=(($oi+20)|0);
 var $174=(($oi+24)|0);
 var $175=$line_i;
 var $176=$170;
 HEAP32[(($176)>>2)]=0; HEAP32[((($176)+(4))>>2)]=0; HEAP32[((($176)+(8))>>2)]=0; HEAP32[((($176)+(12))>>2)]=0; HEAP32[((($176)+(16))>>2)]=0;
 var $storemerge_i=0;label=33;break;
 case 33: 
 var $storemerge_i;
 var $178=($storemerge_i>>>0)<3;
 if($178){label=35;break;}else{label=34;break;}
 case 34: 
 var $179=$line_i;
 var $180=(($179+1)|0);
 var $181=(($line_i+4)|0);
 var $182=(($line_i+8)|0);
 var $183=($_sroa_4443_0_off0|0);
 var $184=$183;
 var $bHasPerFaceColor_i_0=0;var $bHasNormals_i_0=0;var $bHasPerVertexColor_i_0=0;var $lineCount_i_0=1;var $totRead_i_0=0;label=36;break;
 case 35: 
 var $186=(($175+($storemerge_i<<2))|0);
 HEAP32[(($186)>>2)]=0;
 var $187=((($storemerge_i)+(1))|0);
 var $storemerge_i=$187;label=33;break;
 case 36: 
 var $totRead_i_0;
 var $lineCount_i_0;
 var $bHasPerVertexColor_i_0;
 var $bHasNormals_i_0;
 var $bHasPerFaceColor_i_0;
 var $188=HEAP32[(($20)>>2)];
 var $189=((($188)-(12))|0);
 var $190=$189;
 var $191=HEAP32[(($190)>>2)];
 var $_sum3_i=((($191)+(16))|0);
 var $192=(($15+$_sum3_i)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&2;
 var $196=($195|0)==0;
 if($196){label=37;break;}else{label=82;break;}
 case 37: 
 var $_sum425=((($191)+(28))|0);
 var $198=(($15+$_sum425)|0);
 var $199=$198;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+4)|0);
 var $202=(tempValue=HEAP32[(($201)>>2)],HEAP32[(($201)>>2)]=tempValue+1,tempValue);
 var $203=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=43;break; }
 case 38: 
 var $204=(($200+12)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($200+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$205;
 var $209=$207;
 var $210=((($208)-($209))|0);
 var $211=$210>>2;
 var $212=($211>>>0)>($203>>>0);
 if($212){label=39;break;}else{label=40;break;}
 case 39: 
 var $213=(($207+($203<<2))|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($214|0)==0;
 if($215){label=40;break;}else{label=42;break;}
 case 40: 
 var $216=___cxa_allocate_exception(4);
 var $217=$216;
 HEAP32[(($217)>>2)]=15224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($216,26112,(1060)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=44;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $218=$214;
 var $219=$214;
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+28)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$222]($218,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=43;break; }
 case 43: 
 var $lpad_loopexit603$0 = ___cxa_find_matching_catch(); var $lpad_loopexit603$1 = tempRet0;
 var $lpad_phi605$1=$lpad_loopexit603$1;var $lpad_phi605$0=$lpad_loopexit603$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit604$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit604$1 = tempRet0;
 var $lpad_phi605$1=$lpad_nonloopexit604$1;var $lpad_phi605$0=$lpad_nonloopexit604$0;label=45;break;
 case 45: 
 var $lpad_phi605$0;
 var $lpad_phi605$1;
 var $225=(tempValue=HEAP32[(($201)>>2)],HEAP32[(($201)>>2)]=tempValue+-1,tempValue);
 var $226=($225|0)==0;
 if($226){label=46;break;}else{var $eh_lpad_body_i$1=$lpad_phi605$1;var $eh_lpad_body_i$0=$lpad_phi605$0;label=58;break;}
 case 46: 
 var $228=(($200)|0);
 var $229=$200;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+8)|0);
 var $232=HEAP32[(($231)>>2)];
 FUNCTION_TABLE[$232]($228);
 var $eh_lpad_body_i$1=$lpad_phi605$1;var $eh_lpad_body_i$0=$lpad_phi605$0;label=58;break;
 case 47: 
 var $233=(tempValue=HEAP32[(($201)>>2)],HEAP32[(($201)>>2)]=tempValue+-1,tempValue);
 var $234=($233|0)==0;
 if($234){label=48;break;}else{label=49;break;}
 case 48: 
 var $236=(($200)|0);
 var $237=$200;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+8)|0);
 var $240=HEAP32[(($239)>>2)];
 FUNCTION_TABLE[$240]($236);
 label=49;break;
 case 49: 
 (function() { try { __THREW__ = 0; return __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($104,$line_i,$223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=56;break; }
 case 50: 
 var $241=HEAP8[(($16)>>0)];
 var $242=$241&1;
 var $243=(($242<<24)>>24)==0;
 if($243){label=52;break;}else{label=51;break;}
 case 51: 
 var $245=HEAP32[(($181)>>2)];
 var $249=$245;label=53;break;
 case 52: 
 var $247=($241&255);
 var $248=$247>>>1;
 var $249=$248;label=53;break;
 case 53: 
 var $249;
 var $250=((($totRead_i_0)+($249))|0);
 var $251=HEAP32[(($9)>>2)];
 var $252=($251|0)!=0;
 var $253=(((($lineCount_i_0|0))%(1000))&-1);
 var $254=($253|0)==0;
 var $or_cond688=$252&$254;
 if($or_cond688){label=54;break;}else{var $270=$241;label=60;break;}
 case 54: 
 var $256=($250|0);
 var $257=$256;
 var $258=($257)*(100);
 var $259=($258)/($184);
 var $260=(($259)&-1);
 var $261=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($260,9832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=56;break; }
 case 55: 
 var $_pre613=HEAP8[(($16)>>0)];
 var $270=$_pre613;label=60;break;
 case 56: 
 var $lpad_loopexit608$0 = ___cxa_find_matching_catch(); var $lpad_loopexit608$1 = tempRet0;
 var $eh_lpad_body_i$1=$lpad_loopexit608$1;var $eh_lpad_body_i$0=$lpad_loopexit608$0;label=58;break;
 case 57: 
 var $lpad_nonloopexit609$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit609$1 = tempRet0;
 var $eh_lpad_body_i$1=$lpad_nonloopexit609$1;var $eh_lpad_body_i$0=$lpad_nonloopexit609$0;label=58;break;
 case 58: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $262=$eh_lpad_body_i$0;
 var $263=$eh_lpad_body_i$1;
 var $264=HEAP8[(($16)>>0)];
 var $265=$264&1;
 var $266=(($265<<24)>>24)==0;
 if($266){var $_0474=$262;var $_0475=$263;label=101;break;}else{label=59;break;}
 case 59: 
 var $268=HEAP32[(($182)>>2)];
 _free($268);
 var $_0474=$262;var $_0475=$263;label=101;break;
 case 60: 
 var $270;
 var $271=$270&1;
 var $272=(($271<<24)>>24)==0;
 if($272){label=62;break;}else{label=61;break;}
 case 61: 
 var $274=HEAP32[(($181)>>2)];
 var $278=$274;label=63;break;
 case 62: 
 var $276=($270&255);
 var $277=$276>>>1;
 var $278=$277;label=63;break;
 case 63: 
 var $278;
 var $279=($278>>>0)>2;
 if($279){label=64;break;}else{var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_0;label=74;break;}
 case 64: 
 var $280=HEAP32[(($182)>>2)];
 var $_=($272?$180:$280);
 var $281=HEAP8[(($_)>>0)];
 var $282=(($281<<24)>>24)==118;
 var $283=HEAP32[(($182)>>2)];
 var $_689=($272?$180:$283);
 if($282){label=65;break;}else{label=75;break;}
 case 65: 
 var $284=(($_689+1)|0);
 var $285=HEAP8[(($284)>>0)];
 var $286=(($285<<24)>>24)==32;
 if($286){label=66;break;}else{var $bHasPerVertexColor_i_1=$bHasPerVertexColor_i_0;label=70;break;}
 case 66: 
 var $288=HEAP32[(($170)>>2)];
 var $289=((($288)+(1))|0);
 HEAP32[(($170)>>2)]=$289;
 if($272){label=68;break;}else{label=67;break;}
 case 67: 
 var $291=HEAP32[(($181)>>2)];
 var $295=$291;label=69;break;
 case 68: 
 var $293=($270&255);
 var $294=$293>>>1;
 var $295=$294;label=69;break;
 case 69: 
 var $295;
 var $296=($295>>>0)>6;
 var $_bHasPerVertexColor_i_0=($296?1:$bHasPerVertexColor_i_0);
 var $bHasPerVertexColor_i_1=$_bHasPerVertexColor_i_0;label=70;break;
 case 70: 
 var $bHasPerVertexColor_i_1;
 var $297=HEAP32[(($182)>>2)];
 var $_690=($272?$180:$297);
 var $298=(($_690+1)|0);
 var $299=HEAP8[(($298)>>0)];
 var $300=(($299<<24)>>24)==116;
 if($300){label=71;break;}else{label=72;break;}
 case 71: 
 var $302=HEAP32[(($173)>>2)];
 var $303=((($302)+(1))|0);
 HEAP32[(($173)>>2)]=$303;
 label=72;break;
 case 72: 
 var $304=HEAP32[(($182)>>2)];
 var $_691=($272?$180:$304);
 var $305=(($_691+1)|0);
 var $306=HEAP8[(($305)>>0)];
 var $307=(($306<<24)>>24)==110;
 if($307){label=73;break;}else{var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_1;label=74;break;}
 case 73: 
 var $309=HEAP32[(($174)>>2)];
 var $310=((($309)+(1))|0);
 HEAP32[(($174)>>2)]=$310;
 var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=1;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_1;label=74;break;
 case 74: 
 var $bHasPerVertexColor_i_0_be;
 var $bHasNormals_i_0_be;
 var $bHasPerFaceColor_i_0_be;
 var $phitmp682=((($lineCount_i_0)+(1))|0);
 var $bHasPerFaceColor_i_0=$bHasPerFaceColor_i_0_be;var $bHasNormals_i_0=$bHasNormals_i_0_be;var $bHasPerVertexColor_i_0=$bHasPerVertexColor_i_0_be;var $lineCount_i_0=$phitmp682;var $totRead_i_0=$250;label=36;break;
 case 75: 
 var $311=HEAP8[(($_689)>>0)];
 var $312=(($311<<24)>>24)==102;
 if($312){label=77;break;}else{label=76;break;}
 case 76: 
 var $313=HEAP32[(($182)>>2)];
 var $_693=($272?$180:$313);
 var $314=HEAP8[(($_693)>>0)];
 var $315=(($314<<24)>>24)==113;
 if($315){label=77;break;}else{label=78;break;}
 case 77: 
 var $317=HEAP32[(($172)>>2)];
 var $318=((($317)+(1))|0);
 HEAP32[(($172)>>2)]=$318;
 var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_0;label=74;break;
 case 78: 
 var $319=HEAP32[(($182)>>2)];
 var $_694=($272?$180:$319);
 var $320=HEAP8[(($_694)>>0)];
 var $321=(($320<<24)>>24)==108;
 if($321){label=79;break;}else{label=80;break;}
 case 79: 
 var $323=HEAP32[(($171)>>2)];
 var $324=((($323)+(1))|0);
 HEAP32[(($171)>>2)]=$324;
 var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_0;label=74;break;
 case 80: 
 var $325=HEAP32[(($182)>>2)];
 var $_695=($272?$180:$325);
 var $326=HEAP8[(($_695)>>0)];
 var $327=(($326<<24)>>24)==117;
 if($327){label=81;break;}else{var $bHasPerFaceColor_i_0_be=$bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_0;label=74;break;}
 case 81: 
 var $328=HEAP32[(($182)>>2)];
 var $_696=($272?$180:$328);
 var $329=(($_696+1)|0);
 var $330=HEAP8[(($329)>>0)];
 var $331=(($330<<24)>>24)==115;
 var $_bHasPerFaceColor_i_0=($331?1:$bHasPerFaceColor_i_0);
 var $bHasPerFaceColor_i_0_be=$_bHasPerFaceColor_i_0;var $bHasNormals_i_0_be=$bHasNormals_i_0;var $bHasPerVertexColor_i_0_be=$bHasPerVertexColor_i_0;label=74;break;
 case 82: 
 HEAP32[(($11)>>2)]=0;
 var $333=HEAP32[(($173)>>2)];
 var $334=($333|0)==0;
 if($334){var $342=0;label=86;break;}else{label=83;break;}
 case 83: 
 var $336=HEAP32[(($170)>>2)];
 var $337=($333|0)==($336|0);
 if($337){label=84;break;}else{var $340=4352;label=85;break;}
 case 84: 
 HEAP32[(($11)>>2)]=32;
 var $340=4384;label=85;break;
 case 85: 
 var $340;
 HEAP32[(($11)>>2)]=$340;
 var $342=$340;label=86;break;
 case 86: 
 var $342;
 var $343=$bHasPerFaceColor_i_0&1;
 var $344=(($343<<24)>>24)==0;
 if($344){var $348=$342;label=88;break;}else{label=87;break;}
 case 87: 
 var $346=$342|256;
 HEAP32[(($11)>>2)]=$346;
 var $348=$346;label=88;break;
 case 88: 
 var $348;
 var $349=$bHasPerVertexColor_i_0&1;
 var $350=(($349<<24)>>24)==0;
 if($350){var $354=$348;label=90;break;}else{label=89;break;}
 case 89: 
 var $352=$348|4;
 HEAP32[(($11)>>2)]=$352;
 var $354=$352;label=90;break;
 case 90: 
 var $354;
 var $355=$bHasNormals_i_0&1;
 var $356=(($355<<24)>>24)==0;
 if($356){var $366=$354;label=94;break;}else{label=91;break;}
 case 91: 
 var $358=HEAP32[(($174)>>2)];
 var $359=HEAP32[(($170)>>2)];
 var $360=($358|0)==($359|0);
 if($360){label=92;break;}else{label=93;break;}
 case 92: 
 var $362=$354|16;
 HEAP32[(($11)>>2)]=$362;
 var $366=$362;label=94;break;
 case 93: 
 var $364=$354|16384;
 HEAP32[(($11)>>2)]=$364;
 var $366=$364;label=94;break;
 case 94: 
 var $366;
 var $367=HEAP32[(($171)>>2)];
 var $368=($367|0)==0;
 if($368){label=96;break;}else{label=95;break;}
 case 95: 
 var $370=$366|524288;
 HEAP32[(($11)>>2)]=$370;
 label=96;break;
 case 96: 
 var $372=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=57;break; }
 case 97: 
 var $373=($372|0)==0;
 if($373){label=98;break;}else{label=99;break;}
 case 98: 
 var $375=HEAP32[(($20)>>2)];
 var $376=((($375)-(12))|0);
 var $377=$376;
 var $378=HEAP32[(($377)>>2)];
 var $379=(($15+$378)|0);
 var $380=$379;
 var $_sum4_i=((($378)+(16))|0);
 var $381=(($15+$_sum4_i)|0);
 var $382=$381;
 var $383=HEAP32[(($382)>>2)];
 var $384=$383|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($380,$384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=57;break; }
 case 99: 
 var $385=HEAP8[(($16)>>0)];
 var $386=$385&1;
 var $387=(($386<<24)>>24)==0;
 if($387){label=102;break;}else{label=100;break;}
 case 100: 
 var $389=HEAP32[(($182)>>2)];
 _free($389);
 label=102;break;
 case 101: 
 var $_0475;
 var $_0474;
 HEAP32[(($18)>>2)]=17124;
 var $390=(($21)|0);
 HEAP32[(($390)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($48);
 var $391=(($stream_i+108)|0);
 __ZNSt3__18ios_baseD2Ev($391);
 var $392$0=$_0474;
 var $392$1=0;
 var $393$0=$392$0;
 var $393$1=$_0475;
 ___resumeException($393$0)
 case 102: 
 HEAP32[(($18)>>2)]=17124;
 var $394=(($21)|0);
 HEAP32[(($394)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($48);
 var $395=(($stream_i+108)|0);
 __ZNSt3__18ios_baseD2Ev($395);
 var $$etemp$7$0=188;
 var $$etemp$7$1=0;

 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $_pre614=HEAP32[(($11)>>2)];
 var $397=$_pre614;label=103;break;
 case 103: 
 var $397;
 var $398=$397&256;
 var $399=($398|0)==0;
 if($399){var $403=$397;label=105;break;}else{label=104;break;}
 case 104: 
 var $401=$397&-257;
 HEAP32[(($11)>>2)]=$401;
 var $403=$401;label=105;break;
 case 105: 
 var $403;
 var $404=$403&4096;
 var $405=($404|0)==0;
 if($405){var $409=$403;label=107;break;}else{label=106;break;}
 case 106: 
 var $407=$403&-4097;
 HEAP32[(($11)>>2)]=$407;
 var $409=$407;label=107;break;
 case 107: 
 var $409;
 var $410=$409&16384;
 var $411=($410|0)==0;
 if($411){var $415=$409;label=109;break;}else{label=108;break;}
 case 108: 
 var $413=$409&-16385;
 HEAP32[(($11)>>2)]=$413;
 var $415=$413;label=109;break;
 case 109: 
 var $415;
 var $416=$415&4;
 var $417=($416|0)==0;
 if($417){label=111;break;}else{label=110;break;}
 case 110: 
 var $419=$415&-5;
 HEAP32[(($11)>>2)]=$419;
 label=111;break;
 case 111: 
 var $420=(($oi+8)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=($421|0)==0;
 if($422){var $_2470=18;label=1254;break;}else{label=112;break;}
 case 112: 
 var $423=(($stream+108)|0);
 var $424=(($stream)|0);
 var $425=(($stream+8)|0);
 HEAP32[(($424)>>2)]=28556;
 var $426=$stream;
 var $427=$stream;
 var $428=(($stream+108)|0);
 var $429=(($428)|0);
 HEAP32[(($429)>>2)]=28576;
 var $430=(($stream+4)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[(($426)>>2)];
 var $432=((($431)-(12))|0);
 var $433=$432;
 var $434=HEAP32[(($433)>>2)];
 var $435=$425;
 var $_sum388=((($434)+(24))|0);
 var $436=(($427+$_sum388)|0);
 var $437=$436;
 HEAP32[(($437)>>2)]=$435;
 var $_sum389=((($434)+(16))|0);
 var $438=(($427+$_sum389)|0);
 var $439=$438;
 HEAP32[(($439)>>2)]=0;
 var $_sum390=((($434)+(20))|0);
 var $440=(($427+$_sum390)|0);
 var $441=$440;
 HEAP32[(($441)>>2)]=0;
 var $_sum391=((($434)+(4))|0);
 var $442=(($427+$_sum391)|0);
 var $443=$442;
 HEAP32[(($443)>>2)]=4098;
 var $_sum392=((($434)+(12))|0);
 var $444=(($427+$_sum392)|0);
 var $445=$444;
 HEAP32[(($445)>>2)]=0;
 var $_sum393=((($434)+(8))|0);
 var $446=(($427+$_sum393)|0);
 var $447=$446;
 HEAP32[(($447)>>2)]=6;
 var $_sum394=((($434)+(32))|0);
 var $448=(($427+$_sum394)|0);
 var $_sum395=((($434)+(28))|0);
 var $449=(($427+$_sum395)|0);
 var $450=$449;
 _memset($448, 0, 40)|0;
 __ZNSt3__16localeC2Ev($450);
 var $_sum=((($434)+(72))|0);
 var $451=(($427+$_sum)|0);
 var $452=$451;
 HEAP32[(($452)>>2)]=0;
 var $_sum1=((($434)+(76))|0);
 var $453=(($427+$_sum1)|0);
 var $454=$453;
 HEAP32[(($454)>>2)]=-1;
 HEAP32[(($424)>>2)]=17124;
 HEAP32[(($423)>>2)]=17144;
 var $455=(($stream+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=116;break; }
 case 113: 
 var $457=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($455,$filename,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=117;break; }
 case 114: 
 var $459=($457|0)==0;
 if($459){label=115;break;}else{label=119;break;}
 case 115: 
 var $461=HEAP32[(($426)>>2)];
 var $462=((($461)-(12))|0);
 var $463=$462;
 var $464=HEAP32[(($463)>>2)];
 var $465=(($427+$464)|0);
 var $466=$465;
 var $_sum24=((($464)+(16))|0);
 var $467=(($427+$_sum24)|0);
 var $468=$467;
 var $469=HEAP32[(($468)>>2)];
 var $470=$469|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($466,$470) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=117;break; }
 case 116: 
 var $472$0 = ___cxa_find_matching_catch(); var $472$1 = tempRet0;
 var $473=$472$0;
 var $474=$472$1;
 var $_0471=$474;var $_0472=$473;label=118;break;
 case 117: 
 var $476$0 = ___cxa_find_matching_catch(); var $476$1 = tempRet0;
 var $477=$476$0;
 var $478=$476$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($455);
 var $_0471=$478;var $_0472=$477;label=118;break;
 case 118: 
 var $_0472;
 var $_0471;
 var $480=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($480);
 var $481$0=$_0472;
 var $481$1=0;
 var $482$0=$481$0;
 var $482$1=$_0471;
 ___resumeException($482$0)
 case 119: 
 var $483=HEAP32[(($426)>>2)];
 var $484=((($483)-(12))|0);
 var $485=$484;
 var $486=HEAP32[(($485)>>2)];
 var $_sum2=((($486)+(16))|0);
 var $487=(($427+$_sum2)|0);
 var $488=$487;
 var $489=HEAP32[(($488)>>2)];
 var $490=$489&5;
 var $491=($490|0)==0;
 if($491){label=124;break;}else{label=120;break;}
 case 120: 
 var $493=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=123;break; }
 case 121: 
 var $494=($493|0)==0;
 if($494){label=122;break;}else{var $_1469=12;label=1253;break;}
 case 122: 
 var $496=HEAP32[(($426)>>2)];
 var $497=((($496)-(12))|0);
 var $498=$497;
 var $499=HEAP32[(($498)>>2)];
 var $500=(($427+$499)|0);
 var $501=$500;
 var $_sum23=((($499)+(16))|0);
 var $502=(($427+$_sum23)|0);
 var $503=$502;
 var $504=HEAP32[(($503)>>2)];
 var $505=$504|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($501,$505) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1469=12;label=1253;break; } else { label=123;break; }
 case 123: 
 var $507$0 = ___cxa_find_matching_catch(); var $507$1 = tempRet0;
 var $508=$507$0;
 var $509=$507$1;
 var $_5=$509;var $_5463=$508;label=1255;break;
 case 124: 
 var $511=(($materials)|0);
 HEAP32[(($511)>>2)]=0;
 var $512=(($materials+4)|0);
 HEAP32[(($512)>>2)]=0;
 var $513=(($materials+8)|0);
 HEAP32[(($513)>>2)]=0;
 var $514=(($normals)|0);
 HEAP32[(($514)>>2)]=0;
 var $515=(($normals+4)|0);
 HEAP32[(($515)>>2)]=0;
 var $516=(($normals+8)|0);
 HEAP32[(($516)>>2)]=0;
 var $517=(($indexedFaces)|0);
 HEAP32[(($517)>>2)]=0;
 var $518=(($indexedFaces+4)|0);
 HEAP32[(($518)>>2)]=0;
 var $519=(($indexedFaces+8)|0);
 HEAP32[(($519)>>2)]=0;
 var $520=(($tokens)|0);
 HEAP32[(($520)>>2)]=0;
 var $521=(($tokens+4)|0);
 HEAP32[(($521)>>2)]=0;
 var $522=(($tokens+8)|0);
 HEAP32[(($522)>>2)]=0;
 var $523=$header;
 var $storemerge=0;label=125;break;
 case 125: 
 var $storemerge;
 var $525=($storemerge>>>0)<3;
 if($525){label=126;break;}else{label=127;break;}
 case 126: 
 var $527=(($523+($storemerge<<2))|0);
 HEAP32[(($527)>>2)]=0;
 var $528=((($storemerge)+(1))|0);
 var $storemerge=$528;label=125;break;
 case 127: 
 var $530=$defaultMaterial;
 _memset($530, 0, 80)|0;
 var $531=(($defaultMaterial+4)|0);
 var $532=$531;
 var $storemerge_i28=0;label=128;break;
 case 128: 
 var $storemerge_i28;
 var $534=($storemerge_i28>>>0)<3;
 if($534){label=129;break;}else{label=130;break;}
 case 129: 
 var $536=(($532+($storemerge_i28<<2))|0);
 HEAP32[(($536)>>2)]=0;
 var $537=((($storemerge_i28)+(1))|0);
 var $storemerge_i28=$537;label=128;break;
 case 130: 
 var $538=(($defaultMaterial+68)|0);
 var $539=$538;
 var $storemerge1_i=0;label=131;break;
 case 131: 
 var $storemerge1_i;
 var $541=($storemerge1_i>>>0)<3;
 if($541){label=132;break;}else{label=133;break;}
 case 132: 
 var $543=(($539+($storemerge1_i<<2))|0);
 HEAP32[(($543)>>2)]=0;
 var $544=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$544;label=131;break;
 case 133: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io8MaterialENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($materials,$defaultMaterial) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=158;break; }
 case 134: 
 var $546=HEAP32[(($420)>>2)];
 var $547=(($oi+16)|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=((($546)+($548))|0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($vi,$m,$546) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=135;break; } else { label=158;break; }
 case 135: 
 var $551=(($vertexColorVector)|0);
 HEAP32[(($551)>>2)]=0;
 var $552=(($vertexColorVector+4)|0);
 HEAP32[(($552)>>2)]=0;
 var $553=(($vertexColorVector+8)|0);
 HEAP32[(($553)>>2)]=0;
 var $554=(($ff)|0);
 var $555=(($ff+4)|0);
 var $556=(($ff+12)|0);
 var $557=(($ff+16)|0);
 var $558=(($ff+24)|0);
 var $559=(($ff+28)|0);
 var $560=$header;
 var $561=$header;
 var $562=(($561+1)|0);
 var $563=($10|0)==0;
 var $564=$f_i_i_i377;
 var $565=(($f_i_i_i377+4)|0);
 var $566=(($f_i_i_i377+8)|0);
 var $567=(($f_i_i_i377+44)|0);
 var $568=(($f_i_i_i377+76)|0);
 var $569=(($f_i_i_i377+104)|0);
 var $570=(($f_i_i_i377+108)|0);
 var $571=(($f_i_i_i377+100)|0);
 var $572=(($vi)|0);
 var $573=$f_i_i_i380;
 var $574=(($f_i_i_i380+4)|0);
 var $575=(($f_i_i_i380+8)|0);
 var $576=(($f_i_i_i380+44)|0);
 var $577=(($f_i_i_i380+76)|0);
 var $578=(($f_i_i_i380+104)|0);
 var $579=(($f_i_i_i380+108)|0);
 var $580=(($f_i_i_i380+100)|0);
 var $581=$f_i_i_i383;
 var $582=(($f_i_i_i383+4)|0);
 var $583=(($f_i_i_i383+8)|0);
 var $584=(($f_i_i_i383+44)|0);
 var $585=(($f_i_i_i383+76)|0);
 var $586=(($f_i_i_i383+104)|0);
 var $587=(($f_i_i_i383+108)|0);
 var $588=(($f_i_i_i383+100)|0);
 var $589=$f_i_i_i386;
 var $590=(($f_i_i_i386+4)|0);
 var $591=(($f_i_i_i386+8)|0);
 var $592=(($f_i_i_i386+44)|0);
 var $593=(($f_i_i_i386+76)|0);
 var $594=(($f_i_i_i386+104)|0);
 var $595=(($f_i_i_i386+108)|0);
 var $596=(($f_i_i_i386+100)|0);
 var $597=$f_i_i_i387;
 var $598=(($f_i_i_i387+4)|0);
 var $599=(($f_i_i_i387+8)|0);
 var $600=(($f_i_i_i387+44)|0);
 var $601=(($f_i_i_i387+76)|0);
 var $602=(($f_i_i_i387+104)|0);
 var $603=(($f_i_i_i387+108)|0);
 var $604=(($f_i_i_i387+100)|0);
 var $605=$f_i_i_i;
 var $606=(($f_i_i_i+4)|0);
 var $607=(($f_i_i_i+8)|0);
 var $608=(($f_i_i_i+44)|0);
 var $609=(($f_i_i_i+76)|0);
 var $610=(($f_i_i_i+104)|0);
 var $611=(($f_i_i_i+108)|0);
 var $612=(($f_i_i_i+100)|0);
 var $613=$f_i_i_i39;
 var $614=(($f_i_i_i39+4)|0);
 var $615=(($f_i_i_i39+8)|0);
 var $616=(($f_i_i_i39+44)|0);
 var $617=(($f_i_i_i39+76)|0);
 var $618=(($f_i_i_i39+104)|0);
 var $619=(($f_i_i_i39+108)|0);
 var $620=(($f_i_i_i39+100)|0);
 var $621=$f_i_i_i44;
 var $622=(($f_i_i_i44+4)|0);
 var $623=(($f_i_i_i44+8)|0);
 var $624=(($f_i_i_i44+44)|0);
 var $625=(($f_i_i_i44+76)|0);
 var $626=(($f_i_i_i44+104)|0);
 var $627=(($f_i_i_i44+108)|0);
 var $628=(($f_i_i_i44+100)|0);
 var $629=$__v_i50;
 var $630=(($normals+8)|0);
 var $631=$630;
 var $632=(($__v_i50+12)|0);
 var $633=(($__v_i50+16)|0);
 var $634=(($__v_i50)|0);
 var $635=(($__v_i50+8)|0);
 var $636=(($__v_i50+4)|0);
 var $637=(($polygonVect)|0);
 var $638=(($polygonVect+4)|0);
 var $639=(($polygonVect+8)|0);
 var $640=$__v_i_i;
 var $641=(($__v_i_i+12)|0);
 var $642=(($__v_i_i+16)|0);
 var $643=(($__v_i_i)|0);
 var $644=(($__v_i_i+8)|0);
 var $645=(($__v_i_i+4)|0);
 var $646=(($indexTriangulatedVect)|0);
 var $647=(($indexTriangulatedVect+4)|0);
 var $648=(($indexTriangulatedVect+8)|0);
 var $649=(($indexVVect)|0);
 var $650=(($indexNVect)|0);
 var $651=(($indexTVect)|0);
 var $652=$2;
 var $653=$3;
 var $654=$4;
 var $655=(($oi+20)|0);
 var $656=(($m)|0);
 var $657=$397&16384;
 var $658=($657|0)==0;
 var $659=$397>>>4;
 var $_tr_i=(($659)&255);
 var $phitmp1_i=$_tr_i&1;
 var $660=$2;
 var $661=(($660+1)|0);
 var $662=(($2+8)|0);
 var $663=$4;
 var $664=(($663+1)|0);
 var $665=(($4+8)|0);
 var $666=(($4)|0);
 var $667=(($4+4)|0);
 var $668=$3;
 var $669=(($668+1)|0);
 var $670=(($3+8)|0);
 var $671=(($3)|0);
 var $672=(($3+4)|0);
 var $673=(($2)|0);
 var $674=(($2+4)|0);
 var $675=(($ff)|0);
 var $676=(($ff+12)|0);
 var $677=(($ff+24)|0);
 var $678=(($ff+36)|0);
 var $679=$678;
 var $680=(($ff+43)|0);
 var $681=(($ff+44)|0);
 var $682=(($ff+45)|0);
 var $683=(($ff+46)|0);
 var $684=(($ff+43)|0);
 var $685=$684;
 var $686=(($indexVVect+4)|0);
 var $687=(($indexNVect+4)|0);
 var $688=(($indexTVect+4)|0);
 var $689=$materialFileName;
 var $690=$materialFileName;
 var $691=(($690+1)|0);
 var $692=(($m+88)|0);
 var $693=$stream_i223;
 var $694=$tokens_i;
 var $695=$header_i;
 var $696=$currentMaterial_i;
 var $697=$1;
 var $698=$textureName_i;
 var $699=(($stream_i223+108)|0);
 var $700=(($stream_i223)|0);
 var $701=(($stream_i223+8)|0);
 var $702=$stream_i223;
 var $703=(($stream_i223+4)|0);
 var $704=$701;
 var $705=(($stream_i223+8)|0);
 var $706=(($tokens_i)|0);
 var $707=(($tokens_i+4)|0);
 var $708=(($tokens_i+8)|0);
 var $709=$header_i;
 var $710=(($currentMaterial_i+4)|0);
 var $711=$710;
 var $712=(($currentMaterial_i+68)|0);
 var $713=$712;
 var $714=(($currentMaterial_i)|0);
 var $715=$header_i;
 var $716=(($715+1)|0);
 var $717=(($1+4)|0);
 var $718=$717;
 var $719=(($1+68)|0);
 var $720=$719;
 var $721=(($1)|0);
 var $722=$710;
 var $723=$710;
 var $724=(($723+1)|0);
 var $725=$717;
 var $726=(($1+16)|0);
 var $727=(($currentMaterial_i+16)|0);
 var $728=(($1+20)|0);
 var $729=(($currentMaterial_i+20)|0);
 var $730=(($1+24)|0);
 var $731=(($currentMaterial_i+24)|0);
 var $732=(($1+28)|0);
 var $733=(($currentMaterial_i+28)|0);
 var $734=(($1+32)|0);
 var $735=(($currentMaterial_i+32)|0);
 var $736=(($1+36)|0);
 var $737=(($currentMaterial_i+36)|0);
 var $738=(($1+40)|0);
 var $739=(($currentMaterial_i+40)|0);
 var $740=(($1+44)|0);
 var $741=(($currentMaterial_i+44)|0);
 var $742=(($1+48)|0);
 var $743=(($currentMaterial_i+48)|0);
 var $744=(($currentMaterial_i+52)|0);
 var $745=(($1+52)|0);
 var $746=$744;
 var $747=$745;
 var $748=(($currentMaterial_i+68)|0);
 var $749=(($1+68)|0);
 var $750=$748;
 var $751=$748;
 var $752=(($751+1)|0);
 var $753=$749;
 var $754=$749;
 var $755=(($1+12)|0);
 var $756=(($1+76)|0);
 var $757=(($currentMaterial_i+76)|0);
 var $758=(($currentMaterial_i+72)|0);
 var $759=(($currentMaterial_i+12)|0);
 var $760=(($currentMaterial_i+8)|0);
 var $761=$f_i_i_i_i;
 var $762=(($f_i_i_i_i+4)|0);
 var $763=(($f_i_i_i_i+8)|0);
 var $764=(($f_i_i_i_i+44)|0);
 var $765=(($f_i_i_i_i+76)|0);
 var $766=(($f_i_i_i_i+104)|0);
 var $767=(($f_i_i_i_i+108)|0);
 var $768=(($f_i_i_i_i+100)|0);
 var $769=$f_i_i_i34_i;
 var $770=(($f_i_i_i34_i+4)|0);
 var $771=(($f_i_i_i34_i+8)|0);
 var $772=(($f_i_i_i34_i+44)|0);
 var $773=(($f_i_i_i34_i+76)|0);
 var $774=(($f_i_i_i34_i+104)|0);
 var $775=(($f_i_i_i34_i+108)|0);
 var $776=(($f_i_i_i34_i+100)|0);
 var $777=$f_i_i_i35_i;
 var $778=(($f_i_i_i35_i+4)|0);
 var $779=(($f_i_i_i35_i+8)|0);
 var $780=(($f_i_i_i35_i+44)|0);
 var $781=(($f_i_i_i35_i+76)|0);
 var $782=(($f_i_i_i35_i+104)|0);
 var $783=(($f_i_i_i35_i+108)|0);
 var $784=(($f_i_i_i35_i+100)|0);
 var $785=$f_i_i_i36_i;
 var $786=(($f_i_i_i36_i+4)|0);
 var $787=(($f_i_i_i36_i+8)|0);
 var $788=(($f_i_i_i36_i+44)|0);
 var $789=(($f_i_i_i36_i+76)|0);
 var $790=(($f_i_i_i36_i+104)|0);
 var $791=(($f_i_i_i36_i+108)|0);
 var $792=(($f_i_i_i36_i+100)|0);
 var $793=$f_i_i_i37_i;
 var $794=(($f_i_i_i37_i+4)|0);
 var $795=(($f_i_i_i37_i+8)|0);
 var $796=(($f_i_i_i37_i+44)|0);
 var $797=(($f_i_i_i37_i+76)|0);
 var $798=(($f_i_i_i37_i+104)|0);
 var $799=(($f_i_i_i37_i+108)|0);
 var $800=(($f_i_i_i37_i+100)|0);
 var $801=$f_i_i_i38_i;
 var $802=(($f_i_i_i38_i+4)|0);
 var $803=(($f_i_i_i38_i+8)|0);
 var $804=(($f_i_i_i38_i+44)|0);
 var $805=(($f_i_i_i38_i+76)|0);
 var $806=(($f_i_i_i38_i+104)|0);
 var $807=(($f_i_i_i38_i+108)|0);
 var $808=(($f_i_i_i38_i+100)|0);
 var $809=$f_i_i_i39_i;
 var $810=(($f_i_i_i39_i+4)|0);
 var $811=(($f_i_i_i39_i+8)|0);
 var $812=(($f_i_i_i39_i+44)|0);
 var $813=(($f_i_i_i39_i+76)|0);
 var $814=(($f_i_i_i39_i+104)|0);
 var $815=(($f_i_i_i39_i+108)|0);
 var $816=(($f_i_i_i39_i+100)|0);
 var $817=$f_i_i_i40_i;
 var $818=(($f_i_i_i40_i+4)|0);
 var $819=(($f_i_i_i40_i+8)|0);
 var $820=(($f_i_i_i40_i+44)|0);
 var $821=(($f_i_i_i40_i+76)|0);
 var $822=(($f_i_i_i40_i+104)|0);
 var $823=(($f_i_i_i40_i+108)|0);
 var $824=(($f_i_i_i40_i+100)|0);
 var $825=$f_i_i_i41_i;
 var $826=(($f_i_i_i41_i+4)|0);
 var $827=(($f_i_i_i41_i+8)|0);
 var $828=(($f_i_i_i41_i+44)|0);
 var $829=(($f_i_i_i41_i+76)|0);
 var $830=(($f_i_i_i41_i+104)|0);
 var $831=(($f_i_i_i41_i+108)|0);
 var $832=(($f_i_i_i41_i+100)|0);
 var $833=$f_i_i_i42_i;
 var $834=(($f_i_i_i42_i+4)|0);
 var $835=(($f_i_i_i42_i+8)|0);
 var $836=(($f_i_i_i42_i+44)|0);
 var $837=(($f_i_i_i42_i+76)|0);
 var $838=(($f_i_i_i42_i+104)|0);
 var $839=(($f_i_i_i42_i+108)|0);
 var $840=(($f_i_i_i42_i+100)|0);
 var $841=(($currentMaterial_i+56)|0);
 var $842=(($currentMaterial_i+64)|0);
 var $843=(($currentMaterial_i+60)|0);
 var $844=$textureName_i;
 var $845=(($844+1)|0);
 var $846=(($m+92)|0);
 var $847=(($692)|0);
 var $848=(($textureName_i+8)|0);
 var $849=(($textureName_i+4)|0);
 var $850=(($m+96)|0);
 var $851=(($textureName_i)|0);
 var $852=(($header_i+8)|0);
 var $853=(($header_i+4)|0);
 var $854=(($stream_i223+108)|0);
 var $855=(($materialFileName+8)|0);
 var $856=(($materialFileName)|0);
 var $857=(($materialFileName+4)|0);
 var $858=$materialName;
 var $859=$currentMaterialName;
 var $860=$currentMaterialName;
 var $861=(($860+1)|0);
 var $862=$materialName;
 var $863=(($862+1)|0);
 var $864=(($materialName+8)|0);
 var $865=(($currentMaterialName+8)|0);
 var $866=(($materialName+4)|0);
 var $867=(($currentMaterialName+4)|0);
 var $868=(($currentMaterialName)|0);
 var $869=(($materialName)|0);
 var $870=(($header+8)|0);
 var $871=(($header+4)|0);
 var $872=$ff;
 _memset($872, 0, 36)|0;
 var $loadingStr_0=3008;var $extraTriangles_0=0;var $numVNormals_0=0;var $numTexCoords_0=0;var $numTriangles_0=0;var $numEdges_0=0;var $numVertices_0=0;var $currentColor_0=-4144960;var $currentMaterialIdx_0=0;var $result_0=0;var $texCoords_sroa_0_0=0;var $texCoords_sroa_13_0=0;var $texCoords_sroa_29_0=0;var $ev_sroa_0_0=0;var $ev_sroa_14_0=0;var $ev_sroa_30_0=0;label=136;break;
 case 136: 
 var $ev_sroa_30_0;
 var $ev_sroa_14_0;
 var $ev_sroa_0_0;
 var $texCoords_sroa_29_0;
 var $texCoords_sroa_13_0;
 var $texCoords_sroa_0_0;
 var $result_0;
 var $currentMaterialIdx_0;
 var $currentColor_0;
 var $numVertices_0;
 var $numEdges_0;
 var $numTriangles_0;
 var $numTexCoords_0;
 var $numVNormals_0;
 var $extraTriangles_0;
 var $loadingStr_0;
 var $873=HEAP32[(($426)>>2)];
 var $874=((($873)-(12))|0);
 var $875=$874;
 var $876=HEAP32[(($875)>>2)];
 var $_sum3=((($876)+(16))|0);
 var $877=(($427+$_sum3)|0);
 var $878=$877;
 var $879=HEAP32[(($878)>>2)];
 var $880=$879&2;
 var $881=($880|0)==0;
 if($881){label=137;break;}else{label=1097;break;}
 case 137: 
 var $883=HEAP32[(($520)>>2)];
 label=138;break;
 case 138: 
 var $884=HEAP32[(($521)>>2)];
 var $885=($883|0)==($884|0);
 if($885){label=141;break;}else{label=139;break;}
 case 139: 
 var $887=((($884)-(12))|0);
 HEAP32[(($521)>>2)]=$887;
 var $888=$887;
 var $889=HEAP8[(($888)>>0)];
 var $890=$889&1;
 var $891=(($890<<24)>>24)==0;
 if($891){label=138;break;}else{label=140;break;}
 case 140: 
 var $893=((($884)-(12)+8)|0);
 var $894=HEAP32[(($893)>>2)];
 _free($894);
 label=138;break;
 case 141: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOBJI6MyMeshE16TokenizeNextLineERNSt3__114basic_ifstreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEEPNSB_INS_6Color4IhEENSD_ISK_EEEE($stream,$tokens,$vertexColorVector) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=142;break; } else { label=164;break; }
 case 142: 
 var $896=HEAP32[(($521)>>2)];
 var $897=HEAP32[(($520)>>2)];
 var $898=$896;
 var $899=$897;
 var $900=((($898)-($899))|0);
 var $901=(((($900|0))/(12))&-1);
 var $902=($896|0)==($897|0);
 if($902){var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}else{label=143;break;}
 case 143: 
 var $904=HEAP8[(($560)>>0)];
 var $905=$904&1;
 var $906=(($905<<24)>>24)==0;
 if($906){label=145;break;}else{label=144;break;}
 case 144: 
 var $908=HEAP32[(($870)>>2)];
 HEAP8[(($908)>>0)]=0;
 HEAP32[(($871)>>2)]=0;
 var $_pre615=HEAP32[(($520)>>2)];
 var $910=$_pre615;label=146;break;
 case 145: 
 HEAP8[(($562)>>0)]=0;
 HEAP8[(($560)>>0)]=0;
 var $910=$897;label=146;break;
 case 146: 
 var $910;
 var $911=($header|0)==($910|0);
 if($911){label=151;break;}else{label=147;break;}
 case 147: 
 var $913=$910;
 var $914=HEAP8[(($913)>>0)];
 var $915=$914&1;
 var $916=(($915<<24)>>24)==0;
 if($916){label=149;break;}else{label=148;break;}
 case 148: 
 var $918=(($910+8)|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=(($910+4)|0);
 var $921=HEAP32[(($920)>>2)];
 var $928=$921;var $927=$919;label=150;break;
 case 149: 
 var $923=$910;
 var $924=(($923+1)|0);
 var $925=($914&255);
 var $926=$925>>>1;
 var $928=$926;var $927=$924;label=150;break;
 case 150: 
 var $927;
 var $928;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($header,$927,$928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=164;break; }
 case 151: 
 if($563){label=167;break;}else{label=152;break;}
 case 152: 
 var $930=((($numTriangles_0)+($numVertices_0))|0);
 var $931=(((($930|0))%(100))&-1);
 var $932=($931|0)==0;
 if($932){label=153;break;}else{label=167;break;}
 case 153: 
 var $934=((($930)*(100))&-1);
 var $935=(((($934|0))/(($549|0)))&-1);
 var $936=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($935,$loadingStr_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=154;break; } else { label=164;break; }
 case 154: 
 if($936){label=167;break;}else{label=155;break;}
 case 155: 
 var $939=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=165;break; }
 case 156: 
 var $940=($939|0)==0;
 if($940){label=157;break;}else{var $_0468=16;label=1153;break;}
 case 157: 
 var $942=HEAP32[(($426)>>2)];
 var $943=((($942)-(12))|0);
 var $944=$943;
 var $945=HEAP32[(($944)>>2)];
 var $946=(($427+$945)|0);
 var $947=$946;
 var $_sum22=((($945)+(16))|0);
 var $948=(($427+$_sum22)|0);
 var $949=$948;
 var $950=HEAP32[(($949)>>2)];
 var $951=$950|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($947,$951) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=16;label=1153;break; } else { label=165;break; }
 case 158: 
 var $953$0 = ___cxa_find_matching_catch(); var $953$1 = tempRet0;
 var $954=$953$0;
 var $955=$953$1;
 var $_4=$955;var $_4462=$954;var $texCoords_sroa_0_2=0;var $texCoords_sroa_13_3=0;label=1225;break;
 case 159: 
 var $lpad_loopexit513$0 = ___cxa_find_matching_catch(); var $lpad_loopexit513$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit513$1;var $eh_lpad_body$0=$lpad_loopexit513$0;label=166;break;
 case 160: 
 var $lpad_loopexit522$0 = ___cxa_find_matching_catch(); var $lpad_loopexit522$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit522$1;var $eh_lpad_body$0=$lpad_loopexit522$0;label=166;break;
 case 161: 
 var $lpad_loopexit580$0 = ___cxa_find_matching_catch(); var $lpad_loopexit580$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit580$1;var $eh_lpad_body$0=$lpad_loopexit580$0;label=166;break;
 case 162: 
 var $lpad_loopexit583$0 = ___cxa_find_matching_catch(); var $lpad_loopexit583$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit583$1;var $eh_lpad_body$0=$lpad_loopexit583$0;label=166;break;
 case 163: 
 var $lpad_loopexit586$0 = ___cxa_find_matching_catch(); var $lpad_loopexit586$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit586$1;var $eh_lpad_body$0=$lpad_loopexit586$0;label=166;break;
 case 164: 
 var $lpad_loopexit589$0 = ___cxa_find_matching_catch(); var $lpad_loopexit589$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit589$1;var $eh_lpad_body$0=$lpad_loopexit589$0;label=166;break;
 case 165: 
 var $lpad_nonloopexit590$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit590$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit590$1;var $eh_lpad_body$0=$lpad_nonloopexit590$0;label=166;break;
 case 166: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $956=$eh_lpad_body$0;
 var $957=$eh_lpad_body$1;
 var $_3=$957;var $_3461=$956;label=1205;break;
 case 167: 
 var $959=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2960);
 var $960=($959|0)==0;
 if($960){label=168;break;}else{label=182;break;}
 case 168: 
 var $962=($901>>>0)<4;
 if($962){label=169;break;}else{label=172;break;}
 case 169: 
 var $964=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=165;break; }
 case 170: 
 var $965=($964|0)==0;
 if($965){label=171;break;}else{var $_0468=22;label=1153;break;}
 case 171: 
 var $967=HEAP32[(($426)>>2)];
 var $968=((($967)-(12))|0);
 var $969=$968;
 var $970=HEAP32[(($969)>>2)];
 var $971=(($427+$970)|0);
 var $972=$971;
 var $_sum21=((($970)+(16))|0);
 var $973=(($427+$_sum21)|0);
 var $974=$973;
 var $975=HEAP32[(($974)>>2)];
 var $976=$975|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($972,$976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=22;label=1153;break; } else { label=165;break; }
 case 172: 
 var $978=HEAP32[(($520)>>2)];
 var $979=(($978+12)|0);
 var $980=$979;
 var $981=HEAP8[(($980)>>0)];
 var $982=$981&1;
 var $983=(($982<<24)>>24)==0;
 if($983){label=174;break;}else{label=173;break;}
 case 173: 
 var $985=(($978+20)|0);
 var $986=HEAP32[(($985)>>2)];
 var $991=$986;label=175;break;
 case 174: 
 var $988=$979;
 var $989=(($988+1)|0);
 var $991=$989;label=175;break;
 case 175: 
 var $991;
 var $$etemp$9$0=112;
 var $$etemp$9$1=0;

 _memset($564, 0, 108)|0;
 HEAP32[(($565)>>2)]=$991;
 HEAP32[(($566)>>2)]=-1;
 HEAP32[(($567)>>2)]=$991;
 HEAP32[(($568)>>2)]=-1;
 HEAP32[(($569)>>2)]=0;
 var $992=$991;
 var $993=$992^-1;
 HEAP32[(($570)>>2)]=$993;
 HEAP32[(($571)>>2)]=-1;
 var $994=___floatscan($f_i_i_i377,1,1);
 var $$etemp$10$0=112;
 var $$etemp$10$1=0;

 var $995=$994;
 var $996=HEAP32[(($572)>>2)];
 var $997=(($996)|0);
 HEAPF32[(($997)>>2)]=$995;
 var $998=HEAP32[(($520)>>2)];
 var $999=(($998+24)|0);
 var $1000=$999;
 var $1001=HEAP8[(($1000)>>0)];
 var $1002=$1001&1;
 var $1003=(($1002<<24)>>24)==0;
 if($1003){label=177;break;}else{label=176;break;}
 case 176: 
 var $1005=(($998+32)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1011=$1006;label=178;break;
 case 177: 
 var $1008=$999;
 var $1009=(($1008+1)|0);
 var $1011=$1009;label=178;break;
 case 178: 
 var $1011;
 var $$etemp$11$0=112;
 var $$etemp$11$1=0;

 _memset($573, 0, 108)|0;
 HEAP32[(($574)>>2)]=$1011;
 HEAP32[(($575)>>2)]=-1;
 HEAP32[(($576)>>2)]=$1011;
 HEAP32[(($577)>>2)]=-1;
 HEAP32[(($578)>>2)]=0;
 var $1012=$1011;
 var $1013=$1012^-1;
 HEAP32[(($579)>>2)]=$1013;
 HEAP32[(($580)>>2)]=-1;
 var $1014=___floatscan($f_i_i_i380,1,1);
 var $$etemp$12$0=112;
 var $$etemp$12$1=0;

 var $1015=$1014;
 var $1016=(($996+4)|0);
 HEAPF32[(($1016)>>2)]=$1015;
 var $1017=HEAP32[(($520)>>2)];
 var $1018=(($1017+36)|0);
 var $1019=$1018;
 var $1020=HEAP8[(($1019)>>0)];
 var $1021=$1020&1;
 var $1022=(($1021<<24)>>24)==0;
 if($1022){label=180;break;}else{label=179;break;}
 case 179: 
 var $1024=(($1017+44)|0);
 var $1025=HEAP32[(($1024)>>2)];
 var $1030=$1025;label=181;break;
 case 180: 
 var $1027=$1018;
 var $1028=(($1027+1)|0);
 var $1030=$1028;label=181;break;
 case 181: 
 var $1030;
 var $$etemp$13$0=112;
 var $$etemp$13$1=0;

 _memset($581, 0, 108)|0;
 HEAP32[(($582)>>2)]=$1030;
 HEAP32[(($583)>>2)]=-1;
 HEAP32[(($584)>>2)]=$1030;
 HEAP32[(($585)>>2)]=-1;
 HEAP32[(($586)>>2)]=0;
 var $1031=$1030;
 var $1032=$1031^-1;
 HEAP32[(($587)>>2)]=$1032;
 HEAP32[(($588)>>2)]=-1;
 var $1033=___floatscan($f_i_i_i383,1,1);
 var $$etemp$14$0=112;
 var $$etemp$14$1=0;

 var $1034=$1033;
 var $1035=(($996+8)|0);
 HEAPF32[(($1035)>>2)]=$1034;
 var $1036=((($numVertices_0)+(1))|0);
 var $1037=(($996+28)|0);
 HEAP32[(($572)>>2)]=$1037;
 var $loadingStr_0=2888;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$1036;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 182: 
 var $1039=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2824);
 var $1040=($1039|0)==0;
 if($1040){label=183;break;}else{label=225;break;}
 case 183: 
 var $1042=($901>>>0)<3;
 if($1042){label=184;break;}else{label=187;break;}
 case 184: 
 var $1044=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=165;break; }
 case 185: 
 var $1045=($1044|0)==0;
 if($1045){label=186;break;}else{var $_0468=24;label=1153;break;}
 case 186: 
 var $1047=HEAP32[(($426)>>2)];
 var $1048=((($1047)-(12))|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=(($427+$1050)|0);
 var $1052=$1051;
 var $_sum20=((($1050)+(16))|0);
 var $1053=(($427+$_sum20)|0);
 var $1054=$1053;
 var $1055=HEAP32[(($1054)>>2)];
 var $1056=$1055|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($1052,$1056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=24;label=1153;break; } else { label=165;break; }
 case 187: 
 var $1058=HEAP32[(($520)>>2)];
 var $1059=(($1058+12)|0);
 var $1060=$1059;
 var $1061=HEAP8[(($1060)>>0)];
 var $1062=$1061&1;
 var $1063=(($1062<<24)>>24)==0;
 if($1063){label=189;break;}else{label=188;break;}
 case 188: 
 var $1065=(($1058+20)|0);
 var $1066=HEAP32[(($1065)>>2)];
 var $1071=$1066;label=190;break;
 case 189: 
 var $1068=$1059;
 var $1069=(($1068+1)|0);
 var $1071=$1069;label=190;break;
 case 190: 
 var $1071;
 var $$etemp$15$0=112;
 var $$etemp$15$1=0;

 _memset($589, 0, 108)|0;
 HEAP32[(($590)>>2)]=$1071;
 HEAP32[(($591)>>2)]=-1;
 HEAP32[(($592)>>2)]=$1071;
 HEAP32[(($593)>>2)]=-1;
 HEAP32[(($594)>>2)]=0;
 var $1072=$1071;
 var $1073=$1072^-1;
 HEAP32[(($595)>>2)]=$1073;
 HEAP32[(($596)>>2)]=-1;
 var $1074=___floatscan($f_i_i_i386,1,1);
 var $$etemp$16$0=112;
 var $$etemp$16$1=0;

 var $1075=$1074;
 var $1076=(HEAPF32[((tempDoublePtr)>>2)]=$1075,HEAP32[((tempDoublePtr)>>2)]);
 var $1077=HEAP32[(($520)>>2)];
 var $1078=(($1077+24)|0);
 var $1079=$1078;
 var $1080=HEAP8[(($1079)>>0)];
 var $1081=$1080&1;
 var $1082=(($1081<<24)>>24)==0;
 if($1082){label=192;break;}else{label=191;break;}
 case 191: 
 var $1084=(($1077+32)|0);
 var $1085=HEAP32[(($1084)>>2)];
 var $1090=$1085;label=193;break;
 case 192: 
 var $1087=$1078;
 var $1088=(($1087+1)|0);
 var $1090=$1088;label=193;break;
 case 193: 
 var $1090;
 var $$etemp$17$0=112;
 var $$etemp$17$1=0;

 _memset($597, 0, 108)|0;
 HEAP32[(($598)>>2)]=$1090;
 HEAP32[(($599)>>2)]=-1;
 HEAP32[(($600)>>2)]=$1090;
 HEAP32[(($601)>>2)]=-1;
 HEAP32[(($602)>>2)]=0;
 var $1091=$1090;
 var $1092=$1091^-1;
 HEAP32[(($603)>>2)]=$1092;
 HEAP32[(($604)>>2)]=-1;
 var $1093=___floatscan($f_i_i_i387,1,1);
 var $$etemp$18$0=112;
 var $$etemp$18$1=0;

 var $1094=$1093;
 var $1095=($texCoords_sroa_13_0|0)==($texCoords_sroa_29_0|0);
 if($1095){label=196;break;}else{label=194;break;}
 case 194: 
 var $1097=($texCoords_sroa_13_0|0)==0;
 if($1097){var $texCoords_sroa_0_1=$texCoords_sroa_0_0;var $_pn680=$texCoords_sroa_13_0;var $texCoords_sroa_29_1=$texCoords_sroa_29_0;label=224;break;}else{label=195;break;}
 case 195: 
 var $1099=$texCoords_sroa_13_0;
 var $1100=(HEAPF32[((tempDoublePtr)>>2)]=$1094,HEAP32[((tempDoublePtr)>>2)]);
 var $1101$0=$1100;
 var $1101$1=0;
 var $1102$0=0;
 var $1102$1=$1101$0;
 var $1103$0=$1076;
 var $1103$1=0;
 var $1104$0=$1102$0|$1103$0;
 var $1104$1=$1102$1|$1103$1;
 var $st$19$0=(($1099)|0);
 HEAP32[(($st$19$0)>>2)]=$1104$0;
 var $st$20$1=(($1099+4)|0);
 HEAP32[(($st$20$1)>>2)]=$1104$1;
 var $texCoords_sroa_0_1=$texCoords_sroa_0_0;var $_pn680=$texCoords_sroa_13_0;var $texCoords_sroa_29_1=$texCoords_sroa_29_0;label=224;break;
 case 196: 
 var $1106=$texCoords_sroa_29_0;
 var $1107=$texCoords_sroa_0_0;
 var $1108=((($1106)-($1107))|0);
 var $1109=$1108>>3;
 var $1110=((($1109)+(1))|0);
 var $1111=($1110>>>0)>536870911;
 if($1111){label=197;break;}else{label=208;break;}
 case 197: 
 var $1112=___cxa_allocate_exception(8);
 var $1113=$1112;
 HEAP32[(($1113)>>2)]=15352;
 var $1114=(($1112+4)|0);
 var $1115=_strlen(1736);
 var $1116=((($1115)+(13))|0);
 var $1117=($1116|0)==0;
 var $_size_i_i=($1117?1:$1116);
 var $1118=_malloc($_size_i_i);
 var $1119=($1118|0)==0;
 if($1119){label=198;break;}else{var $_lcssa_i_i=$1118;label=203;break;}
 case 198: 
 var $1120=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1121=($1120|0)==0;
 if($1121){label=201;break;}else{label=199;break;}
 case 199: 
 var $1123=$1120;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1123]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=205;break; }
 case 200: 
 var $1124=_malloc($_size_i_i);
 var $1125=($1124|0)==0;
 if($1125){label=198;break;}else{var $_lcssa_i_i=$1124;label=203;break;}
 case 201: 
 var $1127=___cxa_allocate_exception(4);
 var $1128=$1127;
 HEAP32[(($1128)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1127,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { label=206;break; }
 case 202: 
 throw "Reached an unreachable!";
 case 203: 
 var $_lcssa_i_i;
 var $1129=$_lcssa_i_i;
 HEAP32[(($1129)>>2)]=$1115;
 var $1130=(($_lcssa_i_i+4)|0);
 var $1131=$1130;
 HEAP32[(($1131)>>2)]=$1115;
 var $1132=(($_lcssa_i_i+8)|0);
 var $1133=$1132;
 HEAP32[(($1133)>>2)]=0;
 var $1134=(($_lcssa_i_i+12)|0);
 var $1135=((($1115)+(1))|0);
 assert($1135 % 1 === 0);(_memcpy($1134, 1736, $1135)|0);
 var $1136=$1114;
 HEAP32[(($1136)>>2)]=$1134;
 HEAP32[(($1113)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1112,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=204;break; } else { label=165;break; }
 case 204: 
 throw "Reached an unreachable!";
 case 205: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=207;break;
 case 206: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=207;break;
 case 207: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($1112);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=166;break;
 case 208: 
 var $1139=($1109>>>0)<268435455;
 if($1139){label=209;break;}else{var $1143=536870911;label=210;break;}
 case 209: 
 var $1140=$1108>>2;
 var $1141=($1140>>>0)<($1110>>>0);
 var $_697=($1141?$1110:$1140);
 var $1142=($_697|0)==0;
 if($1142){var $1159=0;var $1158=$_697;label=217;break;}else{var $1143=$_697;label=210;break;}
 case 210: 
 var $1143;
 var $1144=$1143<<3;
 var $1145=($1144|0)==0;
 var $_size_i_i_i=($1145?1:$1144);
 var $1146=_malloc($_size_i_i_i);
 var $1147=($1146|0)==0;
 if($1147){label=211;break;}else{var $_lcssa_i_i_i=$1146;label=216;break;}
 case 211: 
 var $1148=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1149=($1148|0)==0;
 if($1149){label=214;break;}else{label=212;break;}
 case 212: 
 var $1151=$1148;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1151]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { label=163;break; }
 case 213: 
 var $1152=_malloc($_size_i_i_i);
 var $1153=($1152|0)==0;
 if($1153){label=211;break;}else{var $_lcssa_i_i_i=$1152;label=216;break;}
 case 214: 
 var $1155=___cxa_allocate_exception(4);
 var $1156=$1155;
 HEAP32[(($1156)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1155,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=215;break; } else { label=165;break; }
 case 215: 
 throw "Reached an unreachable!";
 case 216: 
 var $_lcssa_i_i_i;
 var $1157=$_lcssa_i_i_i;
 var $1159=$1157;var $1158=$1143;label=217;break;
 case 217: 
 var $1158;
 var $1159;
 var $1160=(($1159+($1109<<3))|0);
 var $1161=(($1159+($1158<<3))|0);
 var $1162=($1160|0)==0;
 if($1162){label=219;break;}else{label=218;break;}
 case 218: 
 var $1164=$1160;
 var $1165=(HEAPF32[((tempDoublePtr)>>2)]=$1094,HEAP32[((tempDoublePtr)>>2)]);
 var $1166$0=$1165;
 var $1166$1=0;
 var $1167$0=0;
 var $1167$1=$1166$0;
 var $1168$0=$1076;
 var $1168$1=0;
 var $1169$0=$1167$0|$1168$0;
 var $1169$1=$1167$1|$1168$1;
 var $st$21$0=(($1164)|0);
 HEAP32[(($st$21$0)>>2)]=$1169$0;
 var $st$22$1=(($1164+4)|0);
 HEAP32[(($st$22$1)>>2)]=$1169$1;
 label=219;break;
 case 219: 
 var $1170=$1159;
 var $1171=$texCoords_sroa_0_0;
 assert($1108 % 1 === 0);(_memcpy($1170, $1171, $1108)|0);
 var $__v_i_sroa_15_0=$texCoords_sroa_29_0;label=220;break;
 case 220: 
 var $__v_i_sroa_15_0;
 var $1173=($texCoords_sroa_0_0|0)==($__v_i_sroa_15_0|0);
 if($1173){label=222;break;}else{label=221;break;}
 case 221: 
 var $1175=((($__v_i_sroa_15_0)-(8))|0);
 var $__v_i_sroa_15_0=$1175;label=220;break;
 case 222: 
 var $1176=($texCoords_sroa_0_0|0)==0;
 if($1176){var $texCoords_sroa_0_1=$1159;var $_pn680=$1160;var $texCoords_sroa_29_1=$1161;label=224;break;}else{label=223;break;}
 case 223: 
 _free($1171);
 var $texCoords_sroa_0_1=$1159;var $_pn680=$1160;var $texCoords_sroa_29_1=$1161;label=224;break;
 case 224: 
 var $texCoords_sroa_29_1;
 var $_pn680;
 var $texCoords_sroa_0_1;
 var $texCoords_sroa_13_1=(($_pn680+8)|0);
 var $1178=((($numTexCoords_0)+(1))|0);
 var $loadingStr_0=2712;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$1178;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_1;var $texCoords_sroa_13_0=$texCoords_sroa_13_1;var $texCoords_sroa_29_0=$texCoords_sroa_29_1;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 225: 
 var $1180=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2648);
 var $1181=($1180|0)==0;
 if($1181){label=226;break;}else{label=273;break;}
 case 226: 
 var $1183=($900|0)==48;
 if($1183){label=230;break;}else{label=227;break;}
 case 227: 
 var $1185=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { label=165;break; }
 case 228: 
 var $1186=($1185|0)==0;
 if($1186){label=229;break;}else{var $_0468=26;label=1153;break;}
 case 229: 
 var $1188=HEAP32[(($426)>>2)];
 var $1189=((($1188)-(12))|0);
 var $1190=$1189;
 var $1191=HEAP32[(($1190)>>2)];
 var $1192=(($427+$1191)|0);
 var $1193=$1192;
 var $_sum19=((($1191)+(16))|0);
 var $1194=(($427+$_sum19)|0);
 var $1195=$1194;
 var $1196=HEAP32[(($1195)>>2)];
 var $1197=$1196|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($1193,$1197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=26;label=1153;break; } else { label=165;break; }
 case 230: 
 var $1199=HEAP32[(($520)>>2)];
 var $1200=(($1199+12)|0);
 var $1201=$1200;
 var $1202=HEAP8[(($1201)>>0)];
 var $1203=$1202&1;
 var $1204=(($1203<<24)>>24)==0;
 if($1204){label=232;break;}else{label=231;break;}
 case 231: 
 var $1206=(($1199+20)|0);
 var $1207=HEAP32[(($1206)>>2)];
 var $1212=$1207;label=233;break;
 case 232: 
 var $1209=$1200;
 var $1210=(($1209+1)|0);
 var $1212=$1210;label=233;break;
 case 233: 
 var $1212;
 var $$etemp$23$0=112;
 var $$etemp$23$1=0;

 _memset($605, 0, 108)|0;
 HEAP32[(($606)>>2)]=$1212;
 HEAP32[(($607)>>2)]=-1;
 HEAP32[(($608)>>2)]=$1212;
 HEAP32[(($609)>>2)]=-1;
 HEAP32[(($610)>>2)]=0;
 var $1213=$1212;
 var $1214=$1213^-1;
 HEAP32[(($611)>>2)]=$1214;
 HEAP32[(($612)>>2)]=-1;
 var $1215=___floatscan($f_i_i_i,1,1);
 var $$etemp$24$0=112;
 var $$etemp$24$1=0;

 var $1216=$1215;
 var $1217=HEAP32[(($520)>>2)];
 var $1218=(($1217+24)|0);
 var $1219=$1218;
 var $1220=HEAP8[(($1219)>>0)];
 var $1221=$1220&1;
 var $1222=(($1221<<24)>>24)==0;
 if($1222){label=235;break;}else{label=234;break;}
 case 234: 
 var $1224=(($1217+32)|0);
 var $1225=HEAP32[(($1224)>>2)];
 var $1230=$1225;label=236;break;
 case 235: 
 var $1227=$1218;
 var $1228=(($1227+1)|0);
 var $1230=$1228;label=236;break;
 case 236: 
 var $1230;
 var $$etemp$25$0=112;
 var $$etemp$25$1=0;

 _memset($613, 0, 108)|0;
 HEAP32[(($614)>>2)]=$1230;
 HEAP32[(($615)>>2)]=-1;
 HEAP32[(($616)>>2)]=$1230;
 HEAP32[(($617)>>2)]=-1;
 HEAP32[(($618)>>2)]=0;
 var $1231=$1230;
 var $1232=$1231^-1;
 HEAP32[(($619)>>2)]=$1232;
 HEAP32[(($620)>>2)]=-1;
 var $1233=___floatscan($f_i_i_i39,1,1);
 var $$etemp$26$0=112;
 var $$etemp$26$1=0;

 var $1234=$1233;
 var $1235=HEAP32[(($520)>>2)];
 var $1236=(($1235+36)|0);
 var $1237=$1236;
 var $1238=HEAP8[(($1237)>>0)];
 var $1239=$1238&1;
 var $1240=(($1239<<24)>>24)==0;
 if($1240){label=238;break;}else{label=237;break;}
 case 237: 
 var $1242=(($1235+44)|0);
 var $1243=HEAP32[(($1242)>>2)];
 var $1248=$1243;label=239;break;
 case 238: 
 var $1245=$1236;
 var $1246=(($1245+1)|0);
 var $1248=$1246;label=239;break;
 case 239: 
 var $1248;
 var $$etemp$27$0=112;
 var $$etemp$27$1=0;

 _memset($621, 0, 108)|0;
 HEAP32[(($622)>>2)]=$1248;
 HEAP32[(($623)>>2)]=-1;
 HEAP32[(($624)>>2)]=$1248;
 HEAP32[(($625)>>2)]=-1;
 HEAP32[(($626)>>2)]=0;
 var $1249=$1248;
 var $1250=$1249^-1;
 HEAP32[(($627)>>2)]=$1250;
 HEAP32[(($628)>>2)]=-1;
 var $1251=___floatscan($f_i_i_i44,1,1);
 var $$etemp$28$0=112;
 var $$etemp$28$1=0;

 var $1252=$1251;
 var $1253=HEAP32[(($515)>>2)];
 var $1254=HEAP32[(($516)>>2)];
 var $1255=($1253|0)==($1254|0);
 if($1255){label=243;break;}else{label=240;break;}
 case 240: 
 var $1257=($1253|0)==0;
 if($1257){var $1262=0;label=242;break;}else{label=241;break;}
 case 241: 
 var $1259=(($1253)|0);
 HEAPF32[(($1259)>>2)]=$1216;
 var $1260=(($1253+4)|0);
 HEAPF32[(($1260)>>2)]=$1234;
 var $1261=(($1253+8)|0);
 HEAPF32[(($1261)>>2)]=$1252;
 var $_pre617=HEAP32[(($515)>>2)];
 var $1262=$_pre617;label=242;break;
 case 242: 
 var $1262;
 var $1263=(($1262+12)|0);
 HEAP32[(($515)>>2)]=$1263;
 label=272;break;
 case 243: 
 var $$etemp$29$0=20;
 var $$etemp$29$1=0;

 var $1265=HEAP32[(($514)>>2)];
 var $1266=$1253;
 var $1267=$1265;
 var $1268=((($1266)-($1267))|0);
 var $1269=(((($1268|0))/(12))&-1);
 var $1270=((($1269)+(1))|0);
 var $1271=($1270>>>0)>357913941;
 if($1271){label=244;break;}else{label=255;break;}
 case 244: 
 var $1272=___cxa_allocate_exception(8);
 var $1273=$1272;
 HEAP32[(($1273)>>2)]=15352;
 var $1274=(($1272+4)|0);
 var $1275=_strlen(1736);
 var $1276=((($1275)+(13))|0);
 var $1277=($1276|0)==0;
 var $_size_i3_i=($1277?1:$1276);
 var $1278=_malloc($_size_i3_i);
 var $1279=($1278|0)==0;
 if($1279){label=245;break;}else{var $_lcssa_i5_i=$1278;label=250;break;}
 case 245: 
 var $1280=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1281=($1280|0)==0;
 if($1281){label=248;break;}else{label=246;break;}
 case 246: 
 var $1283=$1280;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1283]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=252;break; }
 case 247: 
 var $1284=_malloc($_size_i3_i);
 var $1285=($1284|0)==0;
 if($1285){label=245;break;}else{var $_lcssa_i5_i=$1284;label=250;break;}
 case 248: 
 var $1287=___cxa_allocate_exception(4);
 var $1288=$1287;
 HEAP32[(($1288)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1287,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=249;break; } else { label=253;break; }
 case 249: 
 throw "Reached an unreachable!";
 case 250: 
 var $_lcssa_i5_i;
 var $1289=$_lcssa_i5_i;
 HEAP32[(($1289)>>2)]=$1275;
 var $1290=(($_lcssa_i5_i+4)|0);
 var $1291=$1290;
 HEAP32[(($1291)>>2)]=$1275;
 var $1292=(($_lcssa_i5_i+8)|0);
 var $1293=$1292;
 HEAP32[(($1293)>>2)]=0;
 var $1294=(($_lcssa_i5_i+12)|0);
 var $1295=((($1275)+(1))|0);
 assert($1295 % 1 === 0);(_memcpy($1294, 1736, $1295)|0);
 var $1296=$1274;
 HEAP32[(($1296)>>2)]=$1294;
 HEAP32[(($1273)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1272,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=165;break; }
 case 251: 
 throw "Reached an unreachable!";
 case 252: 
 var $lpad_loopexit486$0 = ___cxa_find_matching_catch(); var $lpad_loopexit486$1 = tempRet0;
 var $lpad_phi488$1=$lpad_loopexit486$1;var $lpad_phi488$0=$lpad_loopexit486$0;label=254;break;
 case 253: 
 var $lpad_nonloopexit487$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit487$1 = tempRet0;
 var $lpad_phi488$1=$lpad_nonloopexit487$1;var $lpad_phi488$0=$lpad_nonloopexit487$0;label=254;break;
 case 254: 
 var $lpad_phi488$0;
 var $lpad_phi488$1;
 ___cxa_free_exception($1272);
 var $eh_lpad_body$1=$lpad_phi488$1;var $eh_lpad_body$0=$lpad_phi488$0;label=166;break;
 case 255: 
 var $1299=($1269>>>0)<178956970;
 if($1299){label=257;break;}else{label=256;break;}
 case 256: 
 HEAP32[(($632)>>2)]=0;
 HEAP32[(($633)>>2)]=$631;
 var $1304=357913941;label=258;break;
 case 257: 
 var $1300=$1269<<1;
 var $1301=($1300>>>0)<($1270>>>0);
 var $_698=($1301?$1270:$1300);
 HEAP32[(($632)>>2)]=0;
 HEAP32[(($633)>>2)]=$631;
 var $1302=($_698|0)==0;
 if($1302){var $1320=0;var $1319=$_698;label=265;break;}else{var $1304=$_698;label=258;break;}
 case 258: 
 var $1304;
 var $1305=((($1304)*(12))&-1);
 var $1306=($1305|0)==0;
 var $_size_i_i55=($1306?1:$1305);
 var $1307=_malloc($_size_i_i55);
 var $1308=($1307|0)==0;
 if($1308){label=259;break;}else{var $_lcssa_i_i57=$1307;label=264;break;}
 case 259: 
 var $1309=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1310=($1309|0)==0;
 if($1310){label=262;break;}else{label=260;break;}
 case 260: 
 var $1312=$1309;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1312]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=261;break; } else { label=162;break; }
 case 261: 
 var $1313=_malloc($_size_i_i55);
 var $1314=($1313|0)==0;
 if($1314){label=259;break;}else{var $_lcssa_i_i57=$1313;label=264;break;}
 case 262: 
 var $1316=___cxa_allocate_exception(4);
 var $1317=$1316;
 HEAP32[(($1317)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1316,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=263;break; } else { label=165;break; }
 case 263: 
 throw "Reached an unreachable!";
 case 264: 
 var $_lcssa_i_i57;
 var $1318=$_lcssa_i_i57;
 var $1320=$1318;var $1319=$1304;label=265;break;
 case 265: 
 var $1319;
 var $1320;
 HEAP32[(($634)>>2)]=$1320;
 var $1321=(($1320+((($1269)*(12))&-1))|0);
 HEAP32[(($635)>>2)]=$1321;
 HEAP32[(($636)>>2)]=$1321;
 var $1322=(($1320+((($1319)*(12))&-1))|0);
 HEAP32[(($632)>>2)]=$1322;
 var $1323=($1321|0)==0;
 if($1323){label=267;break;}else{label=266;break;}
 case 266: 
 var $1325=(($1321)|0);
 HEAPF32[(($1325)>>2)]=$1216;
 var $1326=(($1320+((($1269)*(12))&-1)+4)|0);
 HEAPF32[(($1326)>>2)]=$1234;
 var $1327=(($1320+((($1269)*(12))&-1)+8)|0);
 HEAPF32[(($1327)>>2)]=$1252;
 label=267;break;
 case 267: 
 var $_sum679=((($1269)+(1))|0);
 var $1328=(($1320+((($_sum679)*(12))&-1))|0);
 HEAP32[(($635)>>2)]=$1328;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($normals,$__v_i50);
 var $1329=HEAP32[(($636)>>2)];
 var $_pre616=HEAP32[(($635)>>2)];
 var $1331=$_pre616;label=268;break;
 case 268: 
 var $1331;
 var $1332=($1329|0)==($1331|0);
 if($1332){label=270;break;}else{label=269;break;}
 case 269: 
 var $1334=((($1331)-(12))|0);
 HEAP32[(($635)>>2)]=$1334;
 var $1331=$1334;label=268;break;
 case 270: 
 var $1335=HEAP32[(($634)>>2)];
 var $1336=($1335|0)==0;
 if($1336){label=272;break;}else{label=271;break;}
 case 271: 
 var $1338=$1335;
 _free($1338);
 label=272;break;
 case 272: 
 var $1339=((($numVNormals_0)+(1))|0);
 var $loadingStr_0=2600;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$1339;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 273: 
 var $1341=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,7680);
 var $1342=($1341|0)==0;
 if($1342){label=274;break;}else{label=329;break;}
 case 274: 
 var $1344=($901>>>0)<3;
 if($1344){var $loadingStr_0=2528;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=11;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}else{label=275;break;}
 case 275: 
 var $1346=HEAP32[(($520)>>2)];
 var $1347=(($1346+12)|0);
 var $1348=$1347;
 var $1349=HEAP8[(($1348)>>0)];
 var $1350=$1349&1;
 var $1351=(($1350<<24)>>24)==0;
 if($1351){label=277;break;}else{label=276;break;}
 case 276: 
 var $1353=(($1346+20)|0);
 var $1354=HEAP32[(($1353)>>2)];
 var $_0_i=$1354;label=278;break;
 case 277: 
 var $1356=$1347;
 var $1357=(($1356+1)|0);
 var $_0_i=$1357;label=278;break;
 case 278: 
 var $_0_i;
 var $1358=HEAP8[(($_0_i)>>0)];
 var $1359=(($1358<<24)>>24)==32;
 if($1359){label=279;break;}else{label=280;break;}
 case 279: 
 var $1360=(($_0_i+1)|0);
 var $_0_i=$1360;label=278;break;
 case 280: 
 var $1361=(($1358<<24)>>24);
 var $1362=((($1361)-(9))|0);
 var $phitmp410=($1362>>>0)>4;
 var $1363=(($_0_i+1)|0);
 if($phitmp410){label=281;break;}else{var $_0_i=$1363;label=278;break;}
 case 281: 
 if(($1361|0)==45){ label=282;break;}else if(($1361|0)==43){ var $neg_0_i=0;label=283;break;}else{var $neg_1_ph_i=0;var $_1_ph_i=$_0_i;var $1367=$1358;label=284;break;}
 case 282: 
 var $neg_0_i=1;label=283;break;
 case 283: 
 var $neg_0_i;
 var $_pre_i=HEAP8[(($1363)>>0)];
 var $neg_1_ph_i=$neg_0_i;var $_1_ph_i=$1363;var $1367=$_pre_i;label=284;break;
 case 284: 
 var $1367;
 var $_1_ph_i;
 var $neg_1_ph_i;
 var $1368=(($1367<<24)>>24);
 var $1369=((($1368)-(48))|0);
 var $1370=($1369>>>0)<10;
 if($1370){var $_12_i=$_1_ph_i;var $n_03_i=0;var $1371=$1367;label=285;break;}else{var $n_0_lcssa_i=0;label=286;break;}
 case 285: 
 var $1371;
 var $n_03_i;
 var $_12_i;
 var $1372=((($n_03_i)*(10))&-1);
 var $1373=(($_12_i+1)|0);
 var $1374=(($1371<<24)>>24);
 var $_neg1_i=((($1372)+(48))|0);
 var $1375=((($_neg1_i)-($1374))|0);
 var $1376=HEAP8[(($1373)>>0)];
 var $1377=(($1376<<24)>>24);
 var $1378=((($1377)-(48))|0);
 var $1379=($1378>>>0)<10;
 if($1379){var $_12_i=$1373;var $n_03_i=$1375;var $1371=$1376;label=285;break;}else{var $n_0_lcssa_i=$1375;label=286;break;}
 case 286: 
 var $n_0_lcssa_i;
 var $1380=(((-$n_0_lcssa_i))|0);
 var $1381=($neg_1_ph_i|0)!=0;
 var $1382=($1381?$n_0_lcssa_i:$1380);
 var $1383=((($1382)-(1))|0);
 var $1384=(($1346+24)|0);
 var $1385=$1384;
 var $1386=HEAP8[(($1385)>>0)];
 var $1387=$1386&1;
 var $1388=(($1387<<24)>>24)==0;
 if($1388){label=288;break;}else{label=287;break;}
 case 287: 
 var $1390=(($1346+32)|0);
 var $1391=HEAP32[(($1390)>>2)];
 var $_0_i65=$1391;label=289;break;
 case 288: 
 var $1393=$1384;
 var $1394=(($1393+1)|0);
 var $_0_i65=$1394;label=289;break;
 case 289: 
 var $_0_i65;
 var $1395=HEAP8[(($_0_i65)>>0)];
 var $1396=(($1395<<24)>>24)==32;
 if($1396){label=290;break;}else{label=291;break;}
 case 290: 
 var $1397=(($_0_i65+1)|0);
 var $_0_i65=$1397;label=289;break;
 case 291: 
 var $1398=(($1395<<24)>>24);
 var $1399=((($1398)-(9))|0);
 var $phitmp411=($1399>>>0)>4;
 var $1400=(($_0_i65+1)|0);
 if($phitmp411){label=292;break;}else{var $_0_i65=$1400;label=289;break;}
 case 292: 
 if(($1398|0)==45){ label=293;break;}else if(($1398|0)==43){ var $neg_0_i68=0;label=294;break;}else{var $neg_1_ph_i71=0;var $_1_ph_i70=$_0_i65;var $1404=$1395;label=295;break;}
 case 293: 
 var $neg_0_i68=1;label=294;break;
 case 294: 
 var $neg_0_i68;
 var $_pre_i69=HEAP8[(($1400)>>0)];
 var $neg_1_ph_i71=$neg_0_i68;var $_1_ph_i70=$1400;var $1404=$_pre_i69;label=295;break;
 case 295: 
 var $1404;
 var $_1_ph_i70;
 var $neg_1_ph_i71;
 var $1405=(($1404<<24)>>24);
 var $1406=((($1405)-(48))|0);
 var $1407=($1406>>>0)<10;
 if($1407){var $_12_i74=$_1_ph_i70;var $n_03_i73=0;var $1408=$1404;label=296;break;}else{var $n_0_lcssa_i77=0;label=297;break;}
 case 296: 
 var $1408;
 var $n_03_i73;
 var $_12_i74;
 var $1409=((($n_03_i73)*(10))&-1);
 var $1410=(($_12_i74+1)|0);
 var $1411=(($1408<<24)>>24);
 var $_neg1_i75=((($1409)+(48))|0);
 var $1412=((($_neg1_i75)-($1411))|0);
 var $1413=HEAP8[(($1410)>>0)];
 var $1414=(($1413<<24)>>24);
 var $1415=((($1414)-(48))|0);
 var $1416=($1415>>>0)<10;
 if($1416){var $_12_i74=$1410;var $n_03_i73=$1412;var $1408=$1413;label=296;break;}else{var $n_0_lcssa_i77=$1412;label=297;break;}
 case 297: 
 var $n_0_lcssa_i77;
 var $1417=(((-$n_0_lcssa_i77))|0);
 var $1418=($neg_1_ph_i71|0)!=0;
 var $1419=($1418?$n_0_lcssa_i77:$1417);
 var $1420=((($1419)-(1))|0);
 var $1421=($ev_sroa_14_0|0)==($ev_sroa_30_0|0);
 if($1421){label=300;break;}else{label=298;break;}
 case 298: 
 var $1423=($ev_sroa_14_0|0)==0;
 if($1423){var $ev_sroa_0_1=$ev_sroa_0_0;var $_pn=$ev_sroa_14_0;var $ev_sroa_30_1=$ev_sroa_30_0;label=328;break;}else{label=299;break;}
 case 299: 
 var $1425=$ev_sroa_14_0;
 var $1426$0=$1420;
 var $1426$1=0;
 var $1427$0=0;
 var $1427$1=$1426$0;
 var $1428$0=$1383;
 var $1428$1=0;
 var $1429$0=$1427$0|$1428$0;
 var $1429$1=$1427$1|$1428$1;
 var $st$30$0=(($1425)|0);
 HEAP32[(($st$30$0)>>2)]=$1429$0;
 var $st$31$1=(($1425+4)|0);
 HEAP32[(($st$31$1)>>2)]=$1429$1;
 var $ev_sroa_0_1=$ev_sroa_0_0;var $_pn=$ev_sroa_14_0;var $ev_sroa_30_1=$ev_sroa_30_0;label=328;break;
 case 300: 
 var $1431=$ev_sroa_30_0;
 var $1432=$ev_sroa_0_0;
 var $1433=((($1431)-($1432))|0);
 var $1434=$1433>>3;
 var $1435=((($1434)+(1))|0);
 var $1436=($1435>>>0)>536870911;
 if($1436){label=301;break;}else{label=312;break;}
 case 301: 
 var $1437=___cxa_allocate_exception(8);
 var $1438=$1437;
 HEAP32[(($1438)>>2)]=15352;
 var $1439=(($1437+4)|0);
 var $1440=_strlen(1736);
 var $1441=((($1440)+(13))|0);
 var $1442=($1441|0)==0;
 var $_size_i_i87=($1442?1:$1441);
 var $1443=_malloc($_size_i_i87);
 var $1444=($1443|0)==0;
 if($1444){label=302;break;}else{var $_lcssa_i_i92=$1443;label=307;break;}
 case 302: 
 var $1445=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1446=($1445|0)==0;
 if($1446){label=305;break;}else{label=303;break;}
 case 303: 
 var $1448=$1445;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1448]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=304;break; } else { label=309;break; }
 case 304: 
 var $1449=_malloc($_size_i_i87);
 var $1450=($1449|0)==0;
 if($1450){label=302;break;}else{var $_lcssa_i_i92=$1449;label=307;break;}
 case 305: 
 var $1452=___cxa_allocate_exception(4);
 var $1453=$1452;
 HEAP32[(($1453)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1452,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=310;break; }
 case 306: 
 throw "Reached an unreachable!";
 case 307: 
 var $_lcssa_i_i92;
 var $1454=$_lcssa_i_i92;
 HEAP32[(($1454)>>2)]=$1440;
 var $1455=(($_lcssa_i_i92+4)|0);
 var $1456=$1455;
 HEAP32[(($1456)>>2)]=$1440;
 var $1457=(($_lcssa_i_i92+8)|0);
 var $1458=$1457;
 HEAP32[(($1458)>>2)]=0;
 var $1459=(($_lcssa_i_i92+12)|0);
 var $1460=((($1440)+(1))|0);
 assert($1460 % 1 === 0);(_memcpy($1459, 1736, $1460)|0);
 var $1461=$1439;
 HEAP32[(($1461)>>2)]=$1459;
 HEAP32[(($1438)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1437,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=308;break; } else { label=165;break; }
 case 308: 
 throw "Reached an unreachable!";
 case 309: 
 var $lpad_loopexit491$0 = ___cxa_find_matching_catch(); var $lpad_loopexit491$1 = tempRet0;
 var $lpad_phi493$1=$lpad_loopexit491$1;var $lpad_phi493$0=$lpad_loopexit491$0;label=311;break;
 case 310: 
 var $lpad_nonloopexit492$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit492$1 = tempRet0;
 var $lpad_phi493$1=$lpad_nonloopexit492$1;var $lpad_phi493$0=$lpad_nonloopexit492$0;label=311;break;
 case 311: 
 var $lpad_phi493$0;
 var $lpad_phi493$1;
 ___cxa_free_exception($1437);
 var $eh_lpad_body$1=$lpad_phi493$1;var $eh_lpad_body$0=$lpad_phi493$0;label=166;break;
 case 312: 
 var $1464=($1434>>>0)<268435455;
 if($1464){label=313;break;}else{var $1468=536870911;label=314;break;}
 case 313: 
 var $1465=$1433>>2;
 var $1466=($1465>>>0)<($1435>>>0);
 var $_699=($1466?$1435:$1465);
 var $1467=($_699|0)==0;
 if($1467){var $1484=0;var $1483=$_699;label=321;break;}else{var $1468=$_699;label=314;break;}
 case 314: 
 var $1468;
 var $1469=$1468<<3;
 var $1470=($1469|0)==0;
 var $_size_i_i_i96=($1470?1:$1469);
 var $1471=_malloc($_size_i_i_i96);
 var $1472=($1471|0)==0;
 if($1472){label=315;break;}else{var $_lcssa_i_i_i98=$1471;label=320;break;}
 case 315: 
 var $1473=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1474=($1473|0)==0;
 if($1474){label=318;break;}else{label=316;break;}
 case 316: 
 var $1476=$1473;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1476]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=317;break; } else { label=161;break; }
 case 317: 
 var $1477=_malloc($_size_i_i_i96);
 var $1478=($1477|0)==0;
 if($1478){label=315;break;}else{var $_lcssa_i_i_i98=$1477;label=320;break;}
 case 318: 
 var $1480=___cxa_allocate_exception(4);
 var $1481=$1480;
 HEAP32[(($1481)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1480,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=165;break; }
 case 319: 
 throw "Reached an unreachable!";
 case 320: 
 var $_lcssa_i_i_i98;
 var $1482=$_lcssa_i_i_i98;
 var $1484=$1482;var $1483=$1468;label=321;break;
 case 321: 
 var $1483;
 var $1484;
 var $1485=(($1484+($1434<<3))|0);
 var $1486=(($1484+($1483<<3))|0);
 var $1487=($1485|0)==0;
 if($1487){label=323;break;}else{label=322;break;}
 case 322: 
 var $1489=$1485;
 var $1490$0=$1420;
 var $1490$1=0;
 var $1491$0=0;
 var $1491$1=$1490$0;
 var $1492$0=$1383;
 var $1492$1=0;
 var $1493$0=$1491$0|$1492$0;
 var $1493$1=$1491$1|$1492$1;
 var $st$32$0=(($1489)|0);
 HEAP32[(($st$32$0)>>2)]=$1493$0;
 var $st$33$1=(($1489+4)|0);
 HEAP32[(($st$33$1)>>2)]=$1493$1;
 label=323;break;
 case 323: 
 var $1494=$1484;
 var $1495=$ev_sroa_0_0;
 assert($1433 % 1 === 0);(_memcpy($1494, $1495, $1433)|0);
 var $__v_i86_sroa_15_0=$ev_sroa_30_0;label=324;break;
 case 324: 
 var $__v_i86_sroa_15_0;
 var $1497=($ev_sroa_0_0|0)==($__v_i86_sroa_15_0|0);
 if($1497){label=326;break;}else{label=325;break;}
 case 325: 
 var $1499=((($__v_i86_sroa_15_0)-(8))|0);
 var $__v_i86_sroa_15_0=$1499;label=324;break;
 case 326: 
 var $1500=($ev_sroa_0_0|0)==0;
 if($1500){var $ev_sroa_0_1=$1484;var $_pn=$1485;var $ev_sroa_30_1=$1486;label=328;break;}else{label=327;break;}
 case 327: 
 _free($1495);
 var $ev_sroa_0_1=$1484;var $_pn=$1485;var $ev_sroa_30_1=$1486;label=328;break;
 case 328: 
 var $ev_sroa_30_1;
 var $_pn;
 var $ev_sroa_0_1;
 var $ev_sroa_14_1=(($_pn+8)|0);
 var $1502=((($numEdges_0)+(1))|0);
 var $loadingStr_0=2528;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$1502;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_1;var $ev_sroa_14_0=$ev_sroa_14_1;var $ev_sroa_30_0=$ev_sroa_30_1;label=136;break;
 case 329: 
 var $1504=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,3320);
 var $1505=($1504|0)==0;
 if($1505){label=331;break;}else{label=330;break;}
 case 330: 
 var $1507=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2456);
 var $1508=($1507|0)==0;
 if($1508){label=331;break;}else{label=766;break;}
 case 331: 
 var $1510=HEAP32[(($521)>>2)];
 var $1511=HEAP32[(($520)>>2)];
 var $1512=$1510;
 var $1513=$1511;
 var $1514=((($1512)-($1513))|0);
 var $1515=(((($1514|0))/(12))&-1);
 var $1516=((($1515)-(1))|0);
 var $1517=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2456);
 var $1518=($1517|0)==0;
 if($1518){label=332;break;}else{label=336;break;}
 case 332: 
 var $1520=($1516|0)==4;
 if($1520){var $QuadFlag_0=1;label=338;break;}else{label=333;break;}
 case 333: 
 var $1522=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=165;break; }
 case 334: 
 var $1523=($1522|0)==0;
 if($1523){label=335;break;}else{var $_0468=34;label=1153;break;}
 case 335: 
 var $1525=HEAP32[(($426)>>2)];
 var $1526=((($1525)-(12))|0);
 var $1527=$1526;
 var $1528=HEAP32[(($1527)>>2)];
 var $1529=(($427+$1528)|0);
 var $1530=$1529;
 var $_sum18=((($1528)+(16))|0);
 var $1531=(($427+$_sum18)|0);
 var $1532=$1531;
 var $1533=HEAP32[(($1532)>>2)];
 var $1534=$1533|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($1530,$1534) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=34;label=1153;break; } else { label=165;break; }
 case 336: 
 var $1536=($1516|0)<3;
 if($1536){label=337;break;}else{var $QuadFlag_0=0;label=338;break;}
 case 337: 
 var $1538=((($extraTriangles_0)-(1))|0);
 var $loadingStr_0=2416;var $extraTriangles_0=$1538;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=11;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 338: 
 var $QuadFlag_0;
 HEAP32[(($637)>>2)]=0;
 HEAP32[(($638)>>2)]=0;
 HEAP32[(($639)>>2)]=0;
 var $1540=_malloc(12);
 var $1541=($1540|0)==0;
 if($1541){label=339;break;}else{var $_lcssa_i_i_i113=$1540;label=344;break;}
 case 339: 
 var $1542=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1543=($1542|0)==0;
 if($1543){label=342;break;}else{label=340;break;}
 case 340: 
 var $1545=$1542;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1545]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=341;break; } else { label=348;break; }
 case 341: 
 var $1546=_malloc(12);
 var $1547=($1546|0)==0;
 if($1547){label=339;break;}else{var $_lcssa_i_i_i113=$1546;label=344;break;}
 case 342: 
 var $1549=___cxa_allocate_exception(4);
 var $1550=$1549;
 HEAP32[(($1550)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1549,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=349;break; }
 case 343: 
 throw "Reached an unreachable!";
 case 344: 
 var $_lcssa_i_i_i113;
 var $1551=$_lcssa_i_i_i113;
 HEAP32[(($638)>>2)]=$1551;
 HEAP32[(($637)>>2)]=$1551;
 var $1552=(($_lcssa_i_i_i113+12)|0);
 var $1553=$1552;
 HEAP32[(($639)>>2)]=$1553;
 var $_0466=1;var $1555=$1551;label=345;break;
 case 345: 
 var $1555;
 var $_0466;
 var $1556=($1555|0)==0;
 if($1556){label=347;break;}else{label=346;break;}
 case 346: 
 var $1558=(($1555)|0);
 HEAP32[(($1558)>>2)]=0;
 var $1559=(($1555+4)|0);
 HEAP32[(($1559)>>2)]=0;
 var $1560=(($1555+8)|0);
 HEAP32[(($1560)>>2)]=0;
 label=347;break;
 case 347: 
 var $1561=(($1555+12)|0);
 HEAP32[(($638)>>2)]=$1561;
 var $1562=((($_0466)-(1))|0);
 var $1563=($1562|0)==0;
 if($1563){label=359;break;}else{var $_0466=$1562;var $1555=$1561;label=345;break;}
 case 348: 
 var $lpad_loopexit543$0 = ___cxa_find_matching_catch(); var $lpad_loopexit543$1 = tempRet0;
 var $lpad_phi545$1=$lpad_loopexit543$1;var $lpad_phi545$0=$lpad_loopexit543$0;label=350;break;
 case 349: 
 var $lpad_nonloopexit544$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit544$1 = tempRet0;
 var $lpad_phi545$1=$lpad_nonloopexit544$1;var $lpad_phi545$0=$lpad_nonloopexit544$0;label=350;break;
 case 350: 
 var $lpad_phi545$0;
 var $lpad_phi545$1;
 var $_pre653=HEAP32[(($637)>>2)];
 var $1564=($_pre653|0)==0;
 if($1564){var $eh_lpad_body$1=$lpad_phi545$1;var $eh_lpad_body$0=$lpad_phi545$0;label=166;break;}else{label=351;break;}
 case 351: 
 var $_pre654=HEAP32[(($638)>>2)];
 var $1566=$_pre654;label=352;break;
 case 352: 
 var $1566;
 var $1567=($_pre653|0)==($1566|0);
 if($1567){label=358;break;}else{label=353;break;}
 case 353: 
 var $1569=((($1566)-(12))|0);
 HEAP32[(($638)>>2)]=$1569;
 var $1570=(($1569)|0);
 var $1571=HEAP32[(($1570)>>2)];
 var $1572=($1571|0)==0;
 if($1572){var $1566=$1569;label=352;break;}else{label=354;break;}
 case 354: 
 var $1574=((($1566)-(12)+4)|0);
 var $_pre655=HEAP32[(($1574)>>2)];
 var $1576=$_pre655;label=355;break;
 case 355: 
 var $1576;
 var $1577=($1571|0)==($1576|0);
 if($1577){label=357;break;}else{label=356;break;}
 case 356: 
 var $1579=((($1576)-(12))|0);
 HEAP32[(($1574)>>2)]=$1579;
 var $1576=$1579;label=355;break;
 case 357: 
 var $1580=$1571;
 _free($1580);
 var $1566=$1569;label=352;break;
 case 358: 
 var $1581=$_pre653;
 _free($1581);
 var $eh_lpad_body$1=$lpad_phi545$1;var $eh_lpad_body$0=$lpad_phi545$0;label=166;break;
 case 359: 
 var $1582=(($1551+4)|0);
 var $1583=HEAP32[(($1582)>>2)];
 var $1584=(($1551)|0);
 var $1585=HEAP32[(($1584)>>2)];
 var $1586=$1583;
 var $1587=$1585;
 var $1588=((($1586)-($1587))|0);
 var $1589=(((($1588|0))/(12))&-1);
 var $1590=($1516>>>0)>($1589>>>0);
 if($1590){label=360;break;}else{label=392;break;}
 case 360: 
 var $1592=((($1516)-($1589))|0);
 var $$etemp$34$0=20;
 var $$etemp$34$1=0;

 var $1593=(($1551+8)|0);
 var $1594=HEAP32[(($1593)>>2)];
 var $1595=$1594;
 var $1596=((($1595)-($1586))|0);
 var $1597=(((($1596|0))/(12))&-1);
 var $1598=($1597>>>0)<($1592>>>0);
 if($1598){label=363;break;}else{var $_0465=$1592;var $1599=$1583;label=361;break;}
 case 361: 
 var $1599;
 var $_0465;
 var $1600=(($1599+12)|0);
 var $1601=((($_0465)-(1))|0);
 var $1602=($1601|0)==0;
 if($1602){label=362;break;}else{var $_0465=$1601;var $1599=$1600;label=361;break;}
 case 362: 
 HEAP32[(($1582)>>2)]=$1600;
 label=396;break;
 case 363: 
 var $1604=(($1551+8)|0);
 var $1605=$1604;
 var $1606=($1516>>>0)>357913941;
 if($1606){label=364;break;}else{label=375;break;}
 case 364: 
 var $1607=___cxa_allocate_exception(8);
 var $1608=$1607;
 HEAP32[(($1608)>>2)]=15352;
 var $1609=(($1607+4)|0);
 var $1610=_strlen(1736);
 var $1611=((($1610)+(13))|0);
 var $1612=($1611|0)==0;
 var $_size_i4_i_i=($1612?1:$1611);
 var $1613=_malloc($_size_i4_i_i);
 var $1614=($1613|0)==0;
 if($1614){label=365;break;}else{var $_lcssa_i6_i_i=$1613;label=370;break;}
 case 365: 
 var $1615=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1616=($1615|0)==0;
 if($1616){label=368;break;}else{label=366;break;}
 case 366: 
 var $1618=$1615;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1618]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=367;break; } else { label=372;break; }
 case 367: 
 var $1619=_malloc($_size_i4_i_i);
 var $1620=($1619|0)==0;
 if($1620){label=365;break;}else{var $_lcssa_i6_i_i=$1619;label=370;break;}
 case 368: 
 var $1622=___cxa_allocate_exception(4);
 var $1623=$1622;
 HEAP32[(($1623)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1622,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=369;break; } else { label=373;break; }
 case 369: 
 throw "Reached an unreachable!";
 case 370: 
 var $_lcssa_i6_i_i;
 var $1624=$_lcssa_i6_i_i;
 HEAP32[(($1624)>>2)]=$1610;
 var $1625=(($_lcssa_i6_i_i+4)|0);
 var $1626=$1625;
 HEAP32[(($1626)>>2)]=$1610;
 var $1627=(($_lcssa_i6_i_i+8)|0);
 var $1628=$1627;
 HEAP32[(($1628)>>2)]=0;
 var $1629=(($_lcssa_i6_i_i+12)|0);
 var $1630=((($1610)+(1))|0);
 assert($1630 % 1 === 0);(_memcpy($1629, 1736, $1630)|0);
 var $1631=$1609;
 HEAP32[(($1631)>>2)]=$1629;
 HEAP32[(($1608)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1607,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=371;break; } else { label=537;break; }
 case 371: 
 throw "Reached an unreachable!";
 case 372: 
 var $lpad_loopexit496$0 = ___cxa_find_matching_catch(); var $lpad_loopexit496$1 = tempRet0;
 var $lpad_phi498$1=$lpad_loopexit496$1;var $lpad_phi498$0=$lpad_loopexit496$0;label=374;break;
 case 373: 
 var $lpad_nonloopexit497$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit497$1 = tempRet0;
 var $lpad_phi498$1=$lpad_nonloopexit497$1;var $lpad_phi498$0=$lpad_nonloopexit497$0;label=374;break;
 case 374: 
 var $lpad_phi498$0;
 var $lpad_phi498$1;
 ___cxa_free_exception($1607);
 var $eh_lpad_body126$1=$lpad_phi498$1;var $eh_lpad_body126$0=$lpad_phi498$0;label=538;break;
 case 375: 
 var $1634=((($1595)-($1587))|0);
 var $1635=(((($1634|0))/(12))&-1);
 var $1636=($1635>>>0)<178956970;
 if($1636){label=377;break;}else{label=376;break;}
 case 376: 
 HEAP32[(($641)>>2)]=0;
 HEAP32[(($642)>>2)]=$1605;
 var $1641=357913941;label=378;break;
 case 377: 
 var $1637=$1635<<1;
 var $1638=($1637>>>0)<($1516>>>0);
 var $_700=($1638?$1516:$1637);
 HEAP32[(($641)>>2)]=0;
 HEAP32[(($642)>>2)]=$1605;
 var $1639=($_700|0)==0;
 if($1639){var $1657=0;var $1656=$_700;label=385;break;}else{var $1641=$_700;label=378;break;}
 case 378: 
 var $1641;
 var $1642=((($1641)*(12))&-1);
 var $1643=($1642|0)==0;
 var $_size_i_i_i120=($1643?1:$1642);
 var $1644=_malloc($_size_i_i_i120);
 var $1645=($1644|0)==0;
 if($1645){label=379;break;}else{var $_lcssa_i_i_i122=$1644;label=384;break;}
 case 379: 
 var $1646=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1647=($1646|0)==0;
 if($1647){label=382;break;}else{label=380;break;}
 case 380: 
 var $1649=$1646;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1649]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=381;break; } else { label=535;break; }
 case 381: 
 var $1650=_malloc($_size_i_i_i120);
 var $1651=($1650|0)==0;
 if($1651){label=379;break;}else{var $_lcssa_i_i_i122=$1650;label=384;break;}
 case 382: 
 var $1653=___cxa_allocate_exception(4);
 var $1654=$1653;
 HEAP32[(($1654)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1653,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=383;break; } else { label=537;break; }
 case 383: 
 throw "Reached an unreachable!";
 case 384: 
 var $_lcssa_i_i_i122;
 var $1655=$_lcssa_i_i_i122;
 var $1657=$1655;var $1656=$1641;label=385;break;
 case 385: 
 var $1656;
 var $1657;
 HEAP32[(($643)>>2)]=$1657;
 var $1658=(($1657+((($1589)*(12))&-1))|0);
 HEAP32[(($644)>>2)]=$1658;
 HEAP32[(($645)>>2)]=$1658;
 var $1659=(($1657+((($1656)*(12))&-1))|0);
 HEAP32[(($641)>>2)]=$1659;
 var $_0464=$1592;var $1660=$1658;label=386;break;
 case 386: 
 var $1660;
 var $_0464;
 var $1661=(($1660+12)|0);
 var $1662=((($_0464)-(1))|0);
 var $1663=($1662|0)==0;
 if($1663){label=387;break;}else{var $_0464=$1662;var $1660=$1661;label=386;break;}
 case 387: 
 HEAP32[(($644)>>2)]=$1661;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1551,$__v_i_i);
 var $1664=HEAP32[(($645)>>2)];
 var $_pre619=HEAP32[(($644)>>2)];
 var $1666=$_pre619;label=388;break;
 case 388: 
 var $1666;
 var $1667=($1664|0)==($1666|0);
 if($1667){label=390;break;}else{label=389;break;}
 case 389: 
 var $1669=((($1666)-(12))|0);
 HEAP32[(($644)>>2)]=$1669;
 var $1666=$1669;label=388;break;
 case 390: 
 var $1670=HEAP32[(($643)>>2)];
 var $1671=($1670|0)==0;
 if($1671){label=396;break;}else{label=391;break;}
 case 391: 
 var $1673=$1670;
 _free($1673);
 label=396;break;
 case 392: 
 var $1675=($1516>>>0)<($1589>>>0);
 if($1675){label=393;break;}else{label=396;break;}
 case 393: 
 var $1677=(($1585+((($1516)*(12))&-1))|0);
 var $1679=$1583;label=394;break;
 case 394: 
 var $1679;
 var $1680=($1677|0)==($1679|0);
 if($1680){label=396;break;}else{label=395;break;}
 case 395: 
 var $1682=((($1679)-(12))|0);
 HEAP32[(($1582)>>2)]=$1682;
 var $1679=$1682;label=394;break;
 case 396: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($indexVVect,$1516) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=397;break; } else { label=536;break; }
 case 397: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($indexNVect,$1516) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=398;break; } else { label=539;break; }
 case 398: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($indexTVect,$1516) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=399;break; } else { label=540;break; }
 case 399: 
 HEAP32[(($646)>>2)]=0;
 HEAP32[(($647)>>2)]=0;
 HEAP32[(($648)>>2)]=0;
 var $1686=(($QuadFlag_0<<24)>>24)==0;
 var $1687=((($numVertices_0)+(1))|0);
 var $storemerge11=0;label=400;break;
 case 400: 
 var $storemerge11;
 var $1689=($storemerge11|0)<($1516|0);
 if($1689){label=401;break;}else{label=563;break;}
 case 401: 
 var $1691=((($storemerge11)+(1))|0);
 var $1692=HEAP32[(($520)>>2)];
 var $1693=(($1692+((($1691)*(12))&-1))|0);
 var $1694=HEAP32[(($649)>>2)];
 var $1695=(($1694+($storemerge11<<2))|0);
 var $1696=HEAP32[(($650)>>2)];
 var $1697=(($1696+($storemerge11<<2))|0);
 var $1698=HEAP32[(($651)>>2)];
 var $1699=(($1698+($storemerge11<<2))|0);
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 HEAP32[(($1699)>>2)]=0;
 HEAP32[(($1697)>>2)]=0;
 HEAP32[(($1695)>>2)]=0;
 var $1700=$1693;
 var $1701=HEAP8[(($1700)>>0)];
 var $1702=$1701&1;
 var $1703=(($1702<<24)>>24)==0;
 if($1703){label=403;break;}else{label=402;break;}
 case 402: 
 var $1705=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1706=HEAP32[(($1705)>>2)];
 var $1710=$1706;label=404;break;
 case 403: 
 var $1708=($1701&255);
 var $1709=$1708>>>1;
 var $1710=$1709;label=404;break;
 case 404: 
 var $1710;
 var $1711=($1710|0)==0;
 if($1711){label=533;break;}else{label=405;break;}
 case 405: 
 if($1703){label=407;break;}else{label=406;break;}
 case 406: 
 var $1714=(($1692+((($1691)*(12))&-1)+8)|0);
 var $1715=HEAP32[(($1714)>>2)];
 var $1716=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1717=HEAP32[(($1716)>>2)];
 var $1724=$1717;var $1723=$1715;label=408;break;
 case 407: 
 var $1719=$1693;
 var $1720=(($1719+1)|0);
 var $1721=($1701&255);
 var $1722=$1721>>>1;
 var $1724=$1722;var $1723=$1720;label=408;break;
 case 408: 
 var $1723;
 var $1724;
 var $1725=($1724|0)==0;
 if($1725){var $firstSep_i_1=-1;var $hasTexcoord_i_0=0;label=440;break;}else{label=409;break;}
 case 409: 
 var $1727=$1723;
 var $1728=$1727&3;
 var $1729=($1728|0)==0;
 if($1729){var $s_0_lcssa_i_i684=$1723;var $_0_lcssa_i_i685=$1724;label=413;break;}else{var $_012_i_i=$1724;var $s_013_i_i=$1723;label=410;break;}
 case 410: 
 var $s_013_i_i;
 var $_012_i_i;
 var $1730=HEAP8[(($s_013_i_i)>>0)];
 var $1731=(($1730<<24)>>24)==47;
 if($1731){var $s_2_i_i=$s_013_i_i;var $_3_i_i=$_012_i_i;label=420;break;}else{label=411;break;}
 case 411: 
 var $1733=(($s_013_i_i+1)|0);
 var $1734=((($_012_i_i)-(1))|0);
 var $1735=$1733;
 var $1736=$1735&3;
 var $1737=($1736|0)!=0;
 var $1738=($1734|0)!=0;
 var $or_cond_i_i=$1737&$1738;
 if($or_cond_i_i){var $_012_i_i=$1734;var $s_013_i_i=$1733;label=410;break;}else{label=412;break;}
 case 412: 
 if($1738){var $s_0_lcssa_i_i684=$1733;var $_0_lcssa_i_i685=$1734;label=413;break;}else{var $s_2_i_i=$1733;var $_3_i_i=0;label=420;break;}
 case 413: 
 var $_0_lcssa_i_i685;
 var $s_0_lcssa_i_i684;
 var $_pre626=HEAP8[(($s_0_lcssa_i_i684)>>0)];
 var $phitmp677=(($_pre626<<24)>>24)==47;
 if($phitmp677){var $s_2_i_i=$s_0_lcssa_i_i684;var $_3_i_i=$_0_lcssa_i_i685;label=420;break;}else{label=414;break;}
 case 414: 
 var $1740=$s_0_lcssa_i_i684;
 var $1741=($_0_lcssa_i_i685>>>0)>3;
 if($1741){var $_15_i_i=$_0_lcssa_i_i685;var $w_06_i_i=$1740;label=415;break;}else{var $_1_lcssa_i_i=$_0_lcssa_i_i685;var $w_0_lcssa_i_i=$1740;label=417;break;}
 case 415: 
 var $w_06_i_i;
 var $_15_i_i;
 var $1742=HEAP32[(($w_06_i_i)>>2)];
 var $1743=$1742^791621423;
 var $1744=((($1743)-(16843009))|0);
 var $1745=$1742&-2139062144;
 var $1746=$1745^-2139062144;
 var $1747=$1746&$1744;
 var $1748=($1747|0)==0;
 if($1748){label=416;break;}else{var $_1_lcssa_i_i=$_15_i_i;var $w_0_lcssa_i_i=$w_06_i_i;label=417;break;}
 case 416: 
 var $1750=(($w_06_i_i+4)|0);
 var $1751=((($_15_i_i)-(4))|0);
 var $1752=($1751>>>0)>3;
 if($1752){var $_15_i_i=$1751;var $w_06_i_i=$1750;label=415;break;}else{var $_1_lcssa_i_i=$1751;var $w_0_lcssa_i_i=$1750;label=417;break;}
 case 417: 
 var $w_0_lcssa_i_i;
 var $_1_lcssa_i_i;
 var $1753=$w_0_lcssa_i_i;
 var $1754=($_1_lcssa_i_i|0)==0;
 if($1754){var $s_2_i_i=$1753;var $_3_i_i=0;label=420;break;}else{var $_22_i_i=$_1_lcssa_i_i;var $s_13_i_i=$1753;label=418;break;}
 case 418: 
 var $s_13_i_i;
 var $_22_i_i;
 var $1755=HEAP8[(($s_13_i_i)>>0)];
 var $1756=(($1755<<24)>>24)==47;
 if($1756){var $s_2_i_i=$s_13_i_i;var $_3_i_i=$_22_i_i;label=420;break;}else{label=419;break;}
 case 419: 
 var $1758=(($s_13_i_i+1)|0);
 var $1759=((($_22_i_i)-(1))|0);
 var $1760=($1759|0)==0;
 if($1760){var $s_2_i_i=$1758;var $_3_i_i=0;label=420;break;}else{var $_22_i_i=$1759;var $s_13_i_i=$1758;label=418;break;}
 case 420: 
 var $_3_i_i;
 var $s_2_i_i;
 var $1761=($_3_i_i|0)!=0;
 var $1762=($1761?$s_2_i_i:0);
 var $1763=($1762|0)==0;
 if($1763){var $firstSep_i_1=-1;var $hasTexcoord_i_0=0;label=440;break;}else{label=421;break;}
 case 421: 
 var $1764=$1762;
 var $1765=((($1764)-($1727))|0);
 var $1766=($1765|0)==-1;
 if($1766){var $firstSep_i_1=-1;var $hasTexcoord_i_0=0;label=440;break;}else{label=422;break;}
 case 422: 
 var $1768=((($1765)+(1))|0);
 if($1703){label=424;break;}else{label=423;break;}
 case 423: 
 var $1770=(($1692+((($1691)*(12))&-1)+8)|0);
 var $1771=HEAP32[(($1770)>>2)];
 var $1772=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1773=HEAP32[(($1772)>>2)];
 var $1780=$1773;var $1779=$1771;label=425;break;
 case 424: 
 var $1775=$1693;
 var $1776=(($1775+1)|0);
 var $1777=($1701&255);
 var $1778=$1777>>>1;
 var $1780=$1778;var $1779=$1776;label=425;break;
 case 425: 
 var $1779;
 var $1780;
 var $1781=($1780>>>0)>($1768>>>0);
 if($1781){label=426;break;}else{label=438;break;}
 case 426: 
 var $1783=(($1779+$1768)|0);
 var $1784=((($1780)-($1768))|0);
 var $1785=$1783;
 var $1786=$1785&3;
 var $1787=($1786|0)!=0;
 var $1788=($1780|0)!=($1768|0);
 var $or_cond11_i5_i=$1787&$1788;
 if($or_cond11_i5_i){var $_012_i8_i=$1784;var $s_013_i7_i=$1783;label=427;break;}else{var $_0_lcssa_i12_i=$1784;var $s_0_lcssa_i11_i=$1783;var $_lcssa_i10_i=$1788;label=429;break;}
 case 427: 
 var $s_013_i7_i;
 var $_012_i8_i;
 var $1789=HEAP8[(($s_013_i7_i)>>0)];
 var $1790=(($1789<<24)>>24)==47;
 if($1790){var $s_2_i27_i=$s_013_i7_i;var $_3_i26_i=$_012_i8_i;label=437;break;}else{label=428;break;}
 case 428: 
 var $1792=(($s_013_i7_i+1)|0);
 var $1793=((($_012_i8_i)-(1))|0);
 var $1794=$1792;
 var $1795=$1794&3;
 var $1796=($1795|0)!=0;
 var $1797=($1793|0)!=0;
 var $or_cond_i9_i=$1796&$1797;
 if($or_cond_i9_i){var $_012_i8_i=$1793;var $s_013_i7_i=$1792;label=427;break;}else{var $_0_lcssa_i12_i=$1793;var $s_0_lcssa_i11_i=$1792;var $_lcssa_i10_i=$1797;label=429;break;}
 case 429: 
 var $_lcssa_i10_i;
 var $s_0_lcssa_i11_i;
 var $_0_lcssa_i12_i;
 if($_lcssa_i10_i){label=430;break;}else{var $s_2_i27_i=$s_0_lcssa_i11_i;var $_3_i26_i=0;label=437;break;}
 case 430: 
 var $_pre627=HEAP8[(($s_0_lcssa_i11_i)>>0)];
 var $phitmp676=(($_pre627<<24)>>24)==47;
 if($phitmp676){var $s_2_i27_i=$s_0_lcssa_i11_i;var $_3_i26_i=$_0_lcssa_i12_i;label=437;break;}else{label=431;break;}
 case 431: 
 var $1799=$s_0_lcssa_i11_i;
 var $1800=($_0_lcssa_i12_i>>>0)>3;
 if($1800){var $_15_i18_i=$_0_lcssa_i12_i;var $w_06_i17_i=$1799;label=432;break;}else{var $_1_lcssa_i21_i=$_0_lcssa_i12_i;var $w_0_lcssa_i20_i=$1799;label=434;break;}
 case 432: 
 var $w_06_i17_i;
 var $_15_i18_i;
 var $1801=HEAP32[(($w_06_i17_i)>>2)];
 var $1802=$1801^791621423;
 var $1803=((($1802)-(16843009))|0);
 var $1804=$1801&-2139062144;
 var $1805=$1804^-2139062144;
 var $1806=$1805&$1803;
 var $1807=($1806|0)==0;
 if($1807){label=433;break;}else{var $_1_lcssa_i21_i=$_15_i18_i;var $w_0_lcssa_i20_i=$w_06_i17_i;label=434;break;}
 case 433: 
 var $1809=(($w_06_i17_i+4)|0);
 var $1810=((($_15_i18_i)-(4))|0);
 var $1811=($1810>>>0)>3;
 if($1811){var $_15_i18_i=$1810;var $w_06_i17_i=$1809;label=432;break;}else{var $_1_lcssa_i21_i=$1810;var $w_0_lcssa_i20_i=$1809;label=434;break;}
 case 434: 
 var $w_0_lcssa_i20_i;
 var $_1_lcssa_i21_i;
 var $1812=$w_0_lcssa_i20_i;
 var $1813=($_1_lcssa_i21_i|0)==0;
 if($1813){var $s_2_i27_i=$1812;var $_3_i26_i=0;label=437;break;}else{var $_22_i24_i=$_1_lcssa_i21_i;var $s_13_i23_i=$1812;label=435;break;}
 case 435: 
 var $s_13_i23_i;
 var $_22_i24_i;
 var $1814=HEAP8[(($s_13_i23_i)>>0)];
 var $1815=(($1814<<24)>>24)==47;
 if($1815){var $s_2_i27_i=$s_13_i23_i;var $_3_i26_i=$_22_i24_i;label=437;break;}else{label=436;break;}
 case 436: 
 var $1817=(($s_13_i23_i+1)|0);
 var $1818=((($_22_i24_i)-(1))|0);
 var $1819=($1818|0)==0;
 if($1819){var $s_2_i27_i=$1817;var $_3_i26_i=0;label=437;break;}else{var $_22_i24_i=$1818;var $s_13_i23_i=$1817;label=435;break;}
 case 437: 
 var $_3_i26_i;
 var $s_2_i27_i;
 var $1820=($_3_i26_i|0)!=0;
 var $1821=($1820?$s_2_i27_i:0);
 var $1822=($1821|0)==0;
 if($1822){label=438;break;}else{label=439;break;}
 case 438: 
 var $1823=($1768>>>0)<4294967295;
 var $phitmp_i686=($1823&1);
 var $firstSep_i_1=$1765;var $hasTexcoord_i_0=$phitmp_i686;label=440;break;
 case 439: 
 var $1825=$1821;
 var $1826=$1779;
 var $1827=((($1825)-($1826))|0);
 var $1828=($1768>>>0)<($1827>>>0);
 var $phitmp_i=($1828&1);
 var $1829=($1827|0)==-1;
 if($1829){var $firstSep_i_1=$1765;var $hasTexcoord_i_0=$phitmp_i;label=440;break;}else{var $1831=1;var $firstSep_i_2=$1765;var $secondSep_i_1=$1827;var $hasTexcoord_i_1=$phitmp_i;label=441;break;}
 case 440: 
 var $hasTexcoord_i_0;
 var $firstSep_i_1;
 var $phitmp1_i_=($658?$phitmp1_i:1);
 var $1831=$phitmp1_i_;var $firstSep_i_2=$firstSep_i_1;var $secondSep_i_1=-1;var $hasTexcoord_i_1=$hasTexcoord_i_0;label=441;break;
 case 441: 
 var $hasTexcoord_i_1;
 var $secondSep_i_1;
 var $firstSep_i_2;
 var $1831;
 if($1703){label=443;break;}else{label=442;break;}
 case 442: 
 var $1833=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1834=HEAP32[(($1833)>>2)];
 var $1835=(($1692+((($1691)*(12))&-1)+8)|0);
 var $1836=HEAP32[(($1835)>>2)];
 var $1843=$1836;var $1842=$1834;label=444;break;
 case 443: 
 var $1838=($1701&255);
 var $1839=$1838>>>1;
 var $1840=$1693;
 var $1841=(($1840+1)|0);
 var $1843=$1841;var $1842=$1839;label=444;break;
 case 444: 
 var $1842;
 var $1843;
 var $1844=($1842>>>0)<($firstSep_i_2>>>0);
 var $1845=($1844?$1842:$firstSep_i_2);
 var $1846=($1845>>>0)>4294967279;
 if($1846){label=445;break;}else{label=447;break;}
 case 445: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=446;break; } else { label=547;break; }
 case 446: 
 throw "Reached an unreachable!";
 case 447: 
 var $1849=($1845>>>0)<11;
 if($1849){label=448;break;}else{label=449;break;}
 case 448: 
 var $1851=$1845<<1;
 var $1852=(($1851)&255);
 HEAP8[(($652)>>0)]=$1852;
 var $__p_0_i_i=$661;label=456;break;
 case 449: 
 var $1853=((($1845)+(16))|0);
 var $1854=$1853&-16;
 var $1855=($1854|0)==0;
 var $_size_i_i131=($1855?1:$1854);
 var $1856=_malloc($_size_i_i131);
 var $1857=($1856|0)==0;
 if($1857){label=450;break;}else{var $_lcssa_i31_i=$1856;label=455;break;}
 case 450: 
 var $1858=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1859=($1858|0)==0;
 if($1859){label=453;break;}else{label=451;break;}
 case 451: 
 var $1861=$1858;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1861]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=452;break; } else { label=541;break; }
 case 452: 
 var $1862=_malloc($_size_i_i131);
 var $1863=($1862|0)==0;
 if($1863){label=450;break;}else{var $_lcssa_i31_i=$1862;label=455;break;}
 case 453: 
 var $1865=___cxa_allocate_exception(4);
 var $1866=$1865;
 HEAP32[(($1866)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1865,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=454;break; } else { label=547;break; }
 case 454: 
 throw "Reached an unreachable!";
 case 455: 
 var $_lcssa_i31_i;
 HEAP32[(($662)>>2)]=$_lcssa_i31_i;
 var $1867=$1854|1;
 HEAP32[(($673)>>2)]=$1867;
 HEAP32[(($674)>>2)]=$1845;
 var $__p_0_i_i=$_lcssa_i31_i;label=456;break;
 case 456: 
 var $__p_0_i_i;
 assert($1845 % 1 === 0);(_memcpy($__p_0_i_i, $1843, $1845)|0);
 var $1868=(($__p_0_i_i+$1845)|0);
 HEAP8[(($1868)>>0)]=0;
 var $1869=HEAP8[(($652)>>0)];
 var $1870=$1869&1;
 var $1871=(($1870<<24)>>24)==0;
 var $1872=HEAP32[(($662)>>2)];
 var $_701=($1871?$661:$1872);
 var $_0_i_i=$_701;label=457;break;
 case 457: 
 var $_0_i_i;
 var $1873=HEAP8[(($_0_i_i)>>0)];
 var $1874=(($1873<<24)>>24)==32;
 if($1874){label=458;break;}else{label=459;break;}
 case 458: 
 var $1875=(($_0_i_i+1)|0);
 var $_0_i_i=$1875;label=457;break;
 case 459: 
 var $1876=(($1873<<24)>>24);
 var $1877=((($1876)-(9))|0);
 var $phitmp406=($1877>>>0)>4;
 var $1878=(($_0_i_i+1)|0);
 if($phitmp406){label=460;break;}else{var $_0_i_i=$1878;label=457;break;}
 case 460: 
 if(($1876|0)==45){ label=461;break;}else if(($1876|0)==43){ var $neg_0_i_i=0;label=462;break;}else{var $neg_1_ph_i_i=0;var $_1_ph_i_i=$_0_i_i;var $1882=$1873;label=463;break;}
 case 461: 
 var $neg_0_i_i=1;label=462;break;
 case 462: 
 var $neg_0_i_i;
 var $_pre_i_i=HEAP8[(($1878)>>0)];
 var $neg_1_ph_i_i=$neg_0_i_i;var $_1_ph_i_i=$1878;var $1882=$_pre_i_i;label=463;break;
 case 463: 
 var $1882;
 var $_1_ph_i_i;
 var $neg_1_ph_i_i;
 var $1883=(($1882<<24)>>24);
 var $1884=((($1883)-(48))|0);
 var $1885=($1884>>>0)<10;
 if($1885){var $_12_i_i=$_1_ph_i_i;var $n_03_i_i=0;var $1886=$1882;label=464;break;}else{var $n_0_lcssa_i_i=0;label=465;break;}
 case 464: 
 var $1886;
 var $n_03_i_i;
 var $_12_i_i;
 var $1887=((($n_03_i_i)*(10))&-1);
 var $1888=(($_12_i_i+1)|0);
 var $1889=(($1886<<24)>>24);
 var $_neg1_i_i=((($1887)+(48))|0);
 var $1890=((($_neg1_i_i)-($1889))|0);
 var $1891=HEAP8[(($1888)>>0)];
 var $1892=(($1891<<24)>>24);
 var $1893=((($1892)-(48))|0);
 var $1894=($1893>>>0)<10;
 if($1894){var $_12_i_i=$1888;var $n_03_i_i=$1890;var $1886=$1891;label=464;break;}else{var $n_0_lcssa_i_i=$1890;label=465;break;}
 case 465: 
 var $n_0_lcssa_i_i;
 var $1895=($neg_1_ph_i_i|0)!=0;
 var $1896=(((-$n_0_lcssa_i_i))|0);
 var $1897=($1895?$n_0_lcssa_i_i:$1896);
 var $1898=((($1897)-(1))|0);
 HEAP32[(($1695)>>2)]=$1898;
 if($1871){label=467;break;}else{label=466;break;}
 case 466: 
 var $1900=HEAP32[(($662)>>2)];
 _free($1900);
 label=467;break;
 case 467: 
 var $1901=$hasTexcoord_i_1&1;
 var $1902=(($1901<<24)>>24)==0;
 if($1902){label=500;break;}else{label=468;break;}
 case 468: 
 var $1904=((($firstSep_i_2)+(1))|0);
 var $1905=((($secondSep_i_1)-($firstSep_i_2))|0);
 var $1906=((($1905)-(1))|0);
 var $1907=HEAP8[(($1700)>>0)];
 var $1908=$1907&1;
 var $1909=(($1908<<24)>>24)==0;
 if($1909){label=470;break;}else{label=469;break;}
 case 469: 
 var $1911=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1912=HEAP32[(($1911)>>2)];
 var $1916=$1912;label=471;break;
 case 470: 
 var $1914=($1907&255);
 var $1915=$1914>>>1;
 var $1916=$1915;label=471;break;
 case 471: 
 var $1916;
 var $1917=($1916>>>0)<($1904>>>0);
 if($1917){label=472;break;}else{label=474;break;}
 case 472: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=473;break; } else { label=547;break; }
 case 473: 
 throw "Reached an unreachable!";
 case 474: 
 if($1909){label=476;break;}else{label=475;break;}
 case 475: 
 var $1921=(($1692+((($1691)*(12))&-1)+8)|0);
 var $1922=HEAP32[(($1921)>>2)];
 var $1926=$1922;label=477;break;
 case 476: 
 var $1924=$1693;
 var $1925=(($1924+1)|0);
 var $1926=$1925;label=477;break;
 case 477: 
 var $1926;
 var $1927=(($1926+$1904)|0);
 var $1928=((($1916)-($1904))|0);
 var $1929=($1928>>>0)<($1906>>>0);
 var $1930=($1929?$1928:$1906);
 var $1931=($1930>>>0)>4294967279;
 if($1931){label=478;break;}else{label=480;break;}
 case 478: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=479;break; } else { label=547;break; }
 case 479: 
 throw "Reached an unreachable!";
 case 480: 
 var $1934=($1930>>>0)<11;
 if($1934){label=481;break;}else{label=482;break;}
 case 481: 
 var $1936=$1930<<1;
 var $1937=(($1936)&255);
 HEAP8[(($653)>>0)]=$1937;
 var $__p_0_i51_i=$669;label=489;break;
 case 482: 
 var $1938=((($1930)+(16))|0);
 var $1939=$1938&-16;
 var $1940=($1939|0)==0;
 var $_size_i53_i=($1940?1:$1939);
 var $1941=_malloc($_size_i53_i);
 var $1942=($1941|0)==0;
 if($1942){label=483;break;}else{var $_lcssa_i55_i=$1941;label=488;break;}
 case 483: 
 var $1943=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1944=($1943|0)==0;
 if($1944){label=486;break;}else{label=484;break;}
 case 484: 
 var $1946=$1943;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1946]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=485;break; } else { label=542;break; }
 case 485: 
 var $1947=_malloc($_size_i53_i);
 var $1948=($1947|0)==0;
 if($1948){label=483;break;}else{var $_lcssa_i55_i=$1947;label=488;break;}
 case 486: 
 var $1950=___cxa_allocate_exception(4);
 var $1951=$1950;
 HEAP32[(($1951)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1950,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=487;break; } else { label=547;break; }
 case 487: 
 throw "Reached an unreachable!";
 case 488: 
 var $_lcssa_i55_i;
 HEAP32[(($670)>>2)]=$_lcssa_i55_i;
 var $1952=$1939|1;
 HEAP32[(($671)>>2)]=$1952;
 HEAP32[(($672)>>2)]=$1930;
 var $__p_0_i51_i=$_lcssa_i55_i;label=489;break;
 case 489: 
 var $__p_0_i51_i;
 assert($1930 % 1 === 0);(_memcpy($__p_0_i51_i, $1927, $1930)|0);
 var $1953=(($__p_0_i51_i+$1930)|0);
 HEAP8[(($1953)>>0)]=0;
 var $1954=HEAP8[(($653)>>0)];
 var $1955=$1954&1;
 var $1956=(($1955<<24)>>24)==0;
 var $1957=HEAP32[(($670)>>2)];
 var $_702=($1956?$669:$1957);
 var $_0_i36_i=$_702;label=490;break;
 case 490: 
 var $_0_i36_i;
 var $1958=HEAP8[(($_0_i36_i)>>0)];
 var $1959=(($1958<<24)>>24)==32;
 if($1959){label=491;break;}else{label=492;break;}
 case 491: 
 var $1960=(($_0_i36_i+1)|0);
 var $_0_i36_i=$1960;label=490;break;
 case 492: 
 var $1961=(($1958<<24)>>24);
 var $1962=((($1961)-(9))|0);
 var $phitmp407=($1962>>>0)>4;
 var $1963=(($_0_i36_i+1)|0);
 if($phitmp407){label=493;break;}else{var $_0_i36_i=$1963;label=490;break;}
 case 493: 
 if(($1961|0)==45){ label=494;break;}else if(($1961|0)==43){ var $neg_0_i39_i=0;label=495;break;}else{var $neg_1_ph_i42_i=0;var $_1_ph_i41_i=$_0_i36_i;var $1967=$1958;label=496;break;}
 case 494: 
 var $neg_0_i39_i=1;label=495;break;
 case 495: 
 var $neg_0_i39_i;
 var $_pre_i40_i=HEAP8[(($1963)>>0)];
 var $neg_1_ph_i42_i=$neg_0_i39_i;var $_1_ph_i41_i=$1963;var $1967=$_pre_i40_i;label=496;break;
 case 496: 
 var $1967;
 var $_1_ph_i41_i;
 var $neg_1_ph_i42_i;
 var $1968=(($1967<<24)>>24);
 var $1969=((($1968)-(48))|0);
 var $1970=($1969>>>0)<10;
 if($1970){var $_12_i45_i=$_1_ph_i41_i;var $n_03_i44_i=0;var $1971=$1967;label=497;break;}else{var $n_0_lcssa_i48_i=0;label=498;break;}
 case 497: 
 var $1971;
 var $n_03_i44_i;
 var $_12_i45_i;
 var $1972=((($n_03_i44_i)*(10))&-1);
 var $1973=(($_12_i45_i+1)|0);
 var $1974=(($1971<<24)>>24);
 var $_neg1_i46_i=((($1972)+(48))|0);
 var $1975=((($_neg1_i46_i)-($1974))|0);
 var $1976=HEAP8[(($1973)>>0)];
 var $1977=(($1976<<24)>>24);
 var $1978=((($1977)-(48))|0);
 var $1979=($1978>>>0)<10;
 if($1979){var $_12_i45_i=$1973;var $n_03_i44_i=$1975;var $1971=$1976;label=497;break;}else{var $n_0_lcssa_i48_i=$1975;label=498;break;}
 case 498: 
 var $n_0_lcssa_i48_i;
 var $1980=($neg_1_ph_i42_i|0)!=0;
 var $1981=(((-$n_0_lcssa_i48_i))|0);
 var $1982=($1980?$n_0_lcssa_i48_i:$1981);
 var $1983=((($1982)-(1))|0);
 HEAP32[(($1699)>>2)]=$1983;
 if($1956){label=500;break;}else{label=499;break;}
 case 499: 
 var $1985=HEAP32[(($670)>>2)];
 _free($1985);
 label=500;break;
 case 500: 
 var $1986=(($1831<<24)>>24)==0;
 if($1986){label=533;break;}else{label=501;break;}
 case 501: 
 var $1988=((($secondSep_i_1)+(1))|0);
 var $1989=HEAP8[(($1700)>>0)];
 var $1990=$1989&1;
 var $1991=(($1990<<24)>>24)==0;
 if($1991){label=503;break;}else{label=502;break;}
 case 502: 
 var $1993=(($1692+((($1691)*(12))&-1)+4)|0);
 var $1994=HEAP32[(($1993)>>2)];
 var $1998=$1994;label=504;break;
 case 503: 
 var $1996=($1989&255);
 var $1997=$1996>>>1;
 var $1998=$1997;label=504;break;
 case 504: 
 var $1998;
 var $1999=($1998>>>0)<($1988>>>0);
 if($1999){label=505;break;}else{label=507;break;}
 case 505: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=506;break; } else { label=547;break; }
 case 506: 
 throw "Reached an unreachable!";
 case 507: 
 if($1991){label=509;break;}else{label=508;break;}
 case 508: 
 var $2003=(($1692+((($1691)*(12))&-1)+8)|0);
 var $2004=HEAP32[(($2003)>>2)];
 var $2008=$2004;label=510;break;
 case 509: 
 var $2006=$1693;
 var $2007=(($2006+1)|0);
 var $2008=$2007;label=510;break;
 case 510: 
 var $2008;
 var $2009=(($2008+$1988)|0);
 var $2010=((($1998)-($1988))|0);
 var $2011=($2010>>>0)>4294967279;
 if($2011){label=511;break;}else{label=513;break;}
 case 511: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=512;break; } else { label=547;break; }
 case 512: 
 throw "Reached an unreachable!";
 case 513: 
 var $2014=($2010>>>0)<11;
 if($2014){label=514;break;}else{label=515;break;}
 case 514: 
 var $2016=$2010<<1;
 var $2017=(($2016)&255);
 HEAP8[(($654)>>0)]=$2017;
 var $__p_0_i77_i=$664;label=522;break;
 case 515: 
 var $2018=((($2010)+(16))|0);
 var $2019=$2018&-16;
 var $2020=($2019|0)==0;
 var $_size_i79_i=($2020?1:$2019);
 var $2021=_malloc($_size_i79_i);
 var $2022=($2021|0)==0;
 if($2022){label=516;break;}else{var $_lcssa_i81_i=$2021;label=521;break;}
 case 516: 
 var $2023=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2024=($2023|0)==0;
 if($2024){label=519;break;}else{label=517;break;}
 case 517: 
 var $2026=$2023;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2026]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=518;break; } else { label=543;break; }
 case 518: 
 var $2027=_malloc($_size_i79_i);
 var $2028=($2027|0)==0;
 if($2028){label=516;break;}else{var $_lcssa_i81_i=$2027;label=521;break;}
 case 519: 
 var $2030=___cxa_allocate_exception(4);
 var $2031=$2030;
 HEAP32[(($2031)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2030,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=520;break; } else { label=547;break; }
 case 520: 
 throw "Reached an unreachable!";
 case 521: 
 var $_lcssa_i81_i;
 HEAP32[(($665)>>2)]=$_lcssa_i81_i;
 var $2032=$2019|1;
 HEAP32[(($666)>>2)]=$2032;
 HEAP32[(($667)>>2)]=$2010;
 var $__p_0_i77_i=$_lcssa_i81_i;label=522;break;
 case 522: 
 var $__p_0_i77_i;
 assert($2010 % 1 === 0);(_memcpy($__p_0_i77_i, $2009, $2010)|0);
 var $2033=(($__p_0_i77_i+$2010)|0);
 HEAP8[(($2033)>>0)]=0;
 var $2034=HEAP8[(($654)>>0)];
 var $2035=$2034&1;
 var $2036=(($2035<<24)>>24)==0;
 var $2037=HEAP32[(($665)>>2)];
 var $_703=($2036?$664:$2037);
 var $_0_i62_i=$_703;label=523;break;
 case 523: 
 var $_0_i62_i;
 var $2038=HEAP8[(($_0_i62_i)>>0)];
 var $2039=(($2038<<24)>>24)==32;
 if($2039){label=524;break;}else{label=525;break;}
 case 524: 
 var $2040=(($_0_i62_i+1)|0);
 var $_0_i62_i=$2040;label=523;break;
 case 525: 
 var $2041=(($2038<<24)>>24);
 var $2042=((($2041)-(9))|0);
 var $phitmp408=($2042>>>0)>4;
 var $2043=(($_0_i62_i+1)|0);
 if($phitmp408){label=526;break;}else{var $_0_i62_i=$2043;label=523;break;}
 case 526: 
 if(($2041|0)==45){ label=527;break;}else if(($2041|0)==43){ var $neg_0_i65_i=0;label=528;break;}else{var $neg_1_ph_i68_i=0;var $_1_ph_i67_i=$_0_i62_i;var $2047=$2038;label=529;break;}
 case 527: 
 var $neg_0_i65_i=1;label=528;break;
 case 528: 
 var $neg_0_i65_i;
 var $_pre_i66_i=HEAP8[(($2043)>>0)];
 var $neg_1_ph_i68_i=$neg_0_i65_i;var $_1_ph_i67_i=$2043;var $2047=$_pre_i66_i;label=529;break;
 case 529: 
 var $2047;
 var $_1_ph_i67_i;
 var $neg_1_ph_i68_i;
 var $2048=(($2047<<24)>>24);
 var $2049=((($2048)-(48))|0);
 var $2050=($2049>>>0)<10;
 if($2050){var $_12_i71_i=$_1_ph_i67_i;var $n_03_i70_i=0;var $2051=$2047;label=530;break;}else{var $n_0_lcssa_i74_i=0;label=531;break;}
 case 530: 
 var $2051;
 var $n_03_i70_i;
 var $_12_i71_i;
 var $2052=((($n_03_i70_i)*(10))&-1);
 var $2053=(($_12_i71_i+1)|0);
 var $2054=(($2051<<24)>>24);
 var $_neg1_i72_i=((($2052)+(48))|0);
 var $2055=((($_neg1_i72_i)-($2054))|0);
 var $2056=HEAP8[(($2053)>>0)];
 var $2057=(($2056<<24)>>24);
 var $2058=((($2057)-(48))|0);
 var $2059=($2058>>>0)<10;
 if($2059){var $_12_i71_i=$2053;var $n_03_i70_i=$2055;var $2051=$2056;label=530;break;}else{var $n_0_lcssa_i74_i=$2055;label=531;break;}
 case 531: 
 var $n_0_lcssa_i74_i;
 var $2060=($neg_1_ph_i68_i|0)!=0;
 var $2061=(((-$n_0_lcssa_i74_i))|0);
 var $2062=($2060?$n_0_lcssa_i74_i:$2061);
 var $2063=((($2062)-(1))|0);
 HEAP32[(($1697)>>2)]=$2063;
 if($2036){label=533;break;}else{label=532;break;}
 case 532: 
 var $2065=HEAP32[(($665)>>2)];
 _free($2065);
 label=533;break;
 case 533: 
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $_pre623=HEAP32[(($649)>>2)];
 var $_phi_trans_insert624=(($_pre623+($storemerge11<<2))|0);
 var $_pre625=HEAP32[(($_phi_trans_insert624)>>2)];
 if($1686){var $2099=$_pre625;label=558;break;}else{label=534;break;}
 case 534: 
 var $2068=((($_pre625)+(1))|0);
 HEAP32[(($_phi_trans_insert624)>>2)]=$2068;
 var $2099=$2068;label=558;break;
 case 535: 
 var $lpad_loopexit549$0 = ___cxa_find_matching_catch(); var $lpad_loopexit549$1 = tempRet0;
 var $eh_lpad_body126$1=$lpad_loopexit549$1;var $eh_lpad_body126$0=$lpad_loopexit549$0;label=538;break;
 case 536: 
 var $lpad_loopexit595$0 = ___cxa_find_matching_catch(); var $lpad_loopexit595$1 = tempRet0;
 var $eh_lpad_body126$1=$lpad_loopexit595$1;var $eh_lpad_body126$0=$lpad_loopexit595$0;label=538;break;
 case 537: 
 var $lpad_nonloopexit596$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit596$1 = tempRet0;
 var $eh_lpad_body126$1=$lpad_nonloopexit596$1;var $eh_lpad_body126$0=$lpad_nonloopexit596$0;label=538;break;
 case 538: 
 var $eh_lpad_body126$0;
 var $eh_lpad_body126$1;
 var $2069=$eh_lpad_body126$0;
 var $2070=$eh_lpad_body126$1;
 var $_2=$2070;var $_2460=$2069;label=757;break;
 case 539: 
 var $2072$0 = ___cxa_find_matching_catch(); var $2072$1 = tempRet0;
 var $2073=$2072$0;
 var $2074=$2072$1;
 var $_1457=$2074;var $_1459=$2073;label=752;break;
 case 540: 
 var $2076$0 = ___cxa_find_matching_catch(); var $2076$1 = tempRet0;
 var $2077=$2076$0;
 var $2078=$2076$1;
 var $_0456=$2078;var $_0458=$2077;label=747;break;
 case 541: 
 var $lpad_loopexit555$0 = ___cxa_find_matching_catch(); var $lpad_loopexit555$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit555$1;var $eh_lpad_body158$0=$lpad_loopexit555$0;label=548;break;
 case 542: 
 var $lpad_loopexit558$0 = ___cxa_find_matching_catch(); var $lpad_loopexit558$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit558$1;var $eh_lpad_body158$0=$lpad_loopexit558$0;label=548;break;
 case 543: 
 var $lpad_loopexit561$0 = ___cxa_find_matching_catch(); var $lpad_loopexit561$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit561$1;var $eh_lpad_body158$0=$lpad_loopexit561$0;label=548;break;
 case 544: 
 var $lpad_loopexit568$0 = ___cxa_find_matching_catch(); var $lpad_loopexit568$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit568$1;var $eh_lpad_body158$0=$lpad_loopexit568$0;label=548;break;
 case 545: 
 var $lpad_loopexit576$0 = ___cxa_find_matching_catch(); var $lpad_loopexit576$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit576$1;var $eh_lpad_body158$0=$lpad_loopexit576$0;label=548;break;
 case 546: 
 var $lpad_loopexit598$0 = ___cxa_find_matching_catch(); var $lpad_loopexit598$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_loopexit598$1;var $eh_lpad_body158$0=$lpad_loopexit598$0;label=548;break;
 case 547: 
 var $lpad_nonloopexit599$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit599$1 = tempRet0;
 var $eh_lpad_body158$1=$lpad_nonloopexit599$1;var $eh_lpad_body158$0=$lpad_nonloopexit599$0;label=548;break;
 case 548: 
 var $eh_lpad_body158$0;
 var $eh_lpad_body158$1;
 var $2079=$eh_lpad_body158$0;
 var $2080=$eh_lpad_body158$1;
 var $2081=HEAP32[(($646)>>2)];
 var $2082=($2081|0)==0;
 if($2082){label=553;break;}else{label=549;break;}
 case 549: 
 var $_pre629=HEAP32[(($647)>>2)];
 var $2085=$_pre629;label=550;break;
 case 550: 
 var $2085;
 var $2086=($2081|0)==($2085|0);
 if($2086){label=552;break;}else{label=551;break;}
 case 551: 
 var $2088=((($2085)-(4))|0);
 HEAP32[(($647)>>2)]=$2088;
 var $2085=$2088;label=550;break;
 case 552: 
 var $2089=$2081;
 _free($2089);
 label=553;break;
 case 553: 
 var $2090=HEAP32[(($651)>>2)];
 var $2091=($2090|0)==0;
 if($2091){var $_0456=$2080;var $_0458=$2079;label=747;break;}else{label=554;break;}
 case 554: 
 var $_pre628=HEAP32[(($688)>>2)];
 var $2094=$_pre628;label=555;break;
 case 555: 
 var $2094;
 var $2095=($2090|0)==($2094|0);
 if($2095){label=557;break;}else{label=556;break;}
 case 556: 
 var $2097=((($2094)-(4))|0);
 HEAP32[(($688)>>2)]=$2097;
 var $2094=$2097;label=555;break;
 case 557: 
 var $2098=$2090;
 _free($2098);
 var $_0456=$2080;var $_0458=$2079;label=747;break;
 case 558: 
 var $2099;
 var $2100=(($_pre623+($storemerge11<<2))|0);
 var $2101=($2099|0)<=($numVertices_0|0);
 var $2102=($2099|0)<0;
 var $or_cond704=$2101&$2102;
 if($or_cond704){label=559;break;}else{label=560;break;}
 case 559: 
 var $2104=((($2099)+($1687))|0);
 HEAP32[(($2100)>>2)]=$2104;
 label=560;break;
 case 560: 
 var $2106=HEAP32[(($651)>>2)];
 var $2107=(($2106+($storemerge11<<2))|0);
 var $2108=HEAP32[(($655)>>2)];
 var $2109=HEAP32[(($2107)>>2)];
 var $2110=($2109|0)<=($2108|0);
 var $2111=($2109|0)<0;
 var $or_cond705=$2110&$2111;
 if($or_cond705){label=561;break;}else{label=562;break;}
 case 561: 
 var $2113=((($2108)+(1))|0);
 var $2114=((($2109)+($2113))|0);
 HEAP32[(($2107)>>2)]=$2114;
 label=562;break;
 case 562: 
 var $2116=HEAP32[(($637)>>2)];
 var $2117=(($2116)|0);
 var $2118=HEAP32[(($2117)>>2)];
 var $2119=HEAP32[(($656)>>2)];
 var $2120=HEAP32[(($2100)>>2)];
 var $2121=(($2119+((($2120)*(28))&-1))|0);
 var $2122=HEAPF32[(($2121)>>2)];
 var $2123=(($2119+((($2120)*(28))&-1)+4)|0);
 var $2124=HEAPF32[(($2123)>>2)];
 var $2125=(($2119+((($2120)*(28))&-1)+8)|0);
 var $2126=HEAPF32[(($2125)>>2)];
 var $2127=(($2118+((($storemerge11)*(12))&-1))|0);
 HEAPF32[(($2127)>>2)]=$2122;
 var $2128=(($2118+((($storemerge11)*(12))&-1)+4)|0);
 HEAPF32[(($2128)>>2)]=$2124;
 var $2129=(($2118+((($storemerge11)*(12))&-1)+8)|0);
 HEAPF32[(($2129)>>2)]=$2126;
 var $storemerge11=$1691;label=400;break;
 case 563: 
 var $2131=($1516|0)>3;
 if($2131){label=564;break;}else{label=565;break;}
 case 564: 
 var $2133=HEAP32[(($11)>>2)];
 var $2134=$2133|131072;
 HEAP32[(($11)>>2)]=$2134;
 var $2135=($1516|0)<5;
 if($2135){label=565;break;}else{label=566;break;}
 case 565: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($polygonVect,$indexTriangulatedVect) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=567;break; } else { label=546;break; }
 case 566: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($polygonVect,$indexTriangulatedVect) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=567;break; } else { label=546;break; }
 case 567: 
 var $2138=HEAP32[(($647)>>2)];
 var $2139=HEAP32[(($646)>>2)];
 var $2140=$2138;
 var $2141=$2139;
 var $2142=((($2140)-($2141))|0);
 var $2143=$2142>>2;
 var $2144=(((($2143>>>0))/(3))&-1);
 var $2145=((($2144)-(1))|0);
 var $2146=((($extraTriangles_0)+($2145))|0);
 var $2147=((($numVNormals_0)+(1))|0);
 var $2148=(($currentMaterialIdx_0<<16)>>16);
 var $storemerge12=0;var $extraTriangles_1=$2146;var $numTriangles_1=$numTriangles_0;var $result_1=$result_0;var $2151=$2138;var $2150=$2139;label=568;break;
 case 568: 
 var $2150;
 var $2151;
 var $result_1;
 var $numTriangles_1;
 var $extraTriangles_1;
 var $storemerge12;
 var $2152=$2151;
 var $2153=$2150;
 var $2154=((($2152)-($2153))|0);
 var $2155=$2154>>2;
 var $2156=($storemerge12>>>0)<($2155>>>0);
 if($2156){label=569;break;}else{label=719;break;}
 case 569: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($675,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=570;break; } else { label=545;break; }
 case 570: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($676,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=571;break; } else { label=545;break; }
 case 571: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($677,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=572;break; } else { label=545;break; }
 case 572: 
 var $2159=HEAP32[(($649)>>2)];
 var $2160=HEAP32[(($650)>>2)];
 var $2161=HEAP32[(($651)>>2)];
 var $storemerge13=0;label=573;break;
 case 573: 
 var $storemerge13;
 var $2163=($storemerge13|0)<3;
 if($2163){label=574;break;}else{var $storemerge14=0;label=575;break;}
 case 574: 
 var $2165=HEAP32[(($646)>>2)];
 var $2166=((($storemerge12)+($storemerge13))|0);
 var $2167=(($2165+($2166<<2))|0);
 var $2168=HEAP32[(($2167)>>2)];
 var $2169=(($locInd+($storemerge13<<2))|0);
 HEAP32[(($2169)>>2)]=$2168;
 var $2170=(($2159+($2168<<2))|0);
 var $2171=HEAP32[(($554)>>2)];
 var $2172=HEAP32[(($2170)>>2)];
 var $2173=(($2171+($storemerge13<<2))|0);
 HEAP32[(($2173)>>2)]=$2172;
 var $2174=(($2160+($2168<<2))|0);
 var $2175=HEAP32[(($556)>>2)];
 var $2176=HEAP32[(($2174)>>2)];
 var $2177=(($2175+($storemerge13<<2))|0);
 HEAP32[(($2177)>>2)]=$2176;
 var $2178=(($2161+($2168<<2))|0);
 var $2179=HEAP32[(($558)>>2)];
 var $2180=HEAP32[(($2178)>>2)];
 var $2181=(($2179+($storemerge13<<2))|0);
 HEAP32[(($2181)>>2)]=$2180;
 var $2182=((($storemerge13)+(1))|0);
 var $storemerge13=$2182;label=573;break;
 case 575: 
 var $storemerge14;
 var $2183=($storemerge14|0)<3;
 if($2183){label=576;break;}else{label=579;break;}
 case 576: 
 var $2185=(($locInd+($storemerge14<<2))|0);
 var $2186=HEAP32[(($2185)>>2)];
 var $2187=((($2186)+(1))|0);
 var $2188=(((($2187|0))%(($1516|0)))&-1);
 var $2189=((($storemerge14)+(1))|0);
 var $2190=(((($2189|0))%(3))&-1);
 var $2191=(($locInd+($2190<<2))|0);
 var $2192=HEAP32[(($2191)>>2)];
 var $2193=($2188|0)==($2192|0);
 var $2194=(($ff+40+$storemerge14)|0);
 if($2193){label=577;break;}else{label=578;break;}
 case 577: 
 HEAP8[(($2194)>>0)]=0;
 var $storemerge14=$2189;label=575;break;
 case 578: 
 HEAP8[(($2194)>>0)]=1;
 var $storemerge14=$2189;label=575;break;
 case 579: 
 var $2198=HEAP32[(($11)>>2)];
 var $2199=$2198&4096;
 var $2200=($2199|0)==0;
 if($2200){label=586;break;}else{var $storemerge17=0;label=580;break;}
 case 580: 
 var $storemerge17;
 var $2202=($storemerge17|0)<3;
 if($2202){label=581;break;}else{label=585;break;}
 case 581: 
 var $2204=HEAP32[(($558)>>2)];
 var $2205=(($2204+($storemerge17<<2))|0);
 var $2206=HEAP32[(($655)>>2)];
 var $2207=HEAP32[(($2205)>>2)];
 var $2208=($2207|0)>($2206|0);
 if($2208){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=582;break;}
 case 582: 
 var $2210=($2207|0)<0;
 if($2210){label=583;break;}else{label=584;break;}
 case 583: 
 var $2212=((($2206)+(1))|0);
 var $2213=((($2207)+($2212))|0);
 HEAP32[(($2205)>>2)]=$2213;
 var $2214=($2213|0)<0;
 var $2215=($2213|0)>($2206|0);
 var $or_cond706=$2214|$2215;
 if($or_cond706){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=584;break;}
 case 584: 
 var $2217=((($storemerge17)+(1))|0);
 var $storemerge17=$2217;label=580;break;
 case 585: 
 var $2218=HEAP32[(($511)>>2)];
 var $2219=(($2218+((($2148)*(80))&-1))|0);
 var $2220=HEAP32[(($2219)>>2)];
 HEAP32[(($678)>>2)]=$2220;
 label=586;break;
 case 586: 
 var $2222=HEAP32[(($554)>>2)];
 var $2223=HEAP32[(($2222)>>2)];
 var $2224=(($2222+4)|0);
 var $2225=HEAP32[(($2224)>>2)];
 var $2226=($2223|0)==($2225|0);
 if($2226){label=588;break;}else{label=587;break;}
 case 587: 
 var $2228=(($2222+8)|0);
 var $2229=HEAP32[(($2228)>>2)];
 var $2230=($2223|0)==($2229|0);
 var $2231=($2225|0)==($2229|0);
 var $or_cond707=$2230|$2231;
 if($or_cond707){label=588;break;}else{var $storemerge15=0;label=589;break;}
 case 588: 
 var $2233=((($extraTriangles_1)-(1))|0);
 var $extraTriangles_2=$2233;var $numTriangles_2=$numTriangles_1;var $result_2=9;label=718;break;
 case 589: 
 var $storemerge15;
 var $2235=($storemerge15|0)<3;
 if($2235){label=590;break;}else{label=594;break;}
 case 590: 
 var $2237=HEAP32[(($554)>>2)];
 var $2238=(($2237+($storemerge15<<2))|0);
 var $2239=HEAP32[(($2238)>>2)];
 var $2240=($2239|0)>($numVertices_0|0);
 if($2240){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=591;break;}
 case 591: 
 var $2242=($2239|0)<0;
 if($2242){label=592;break;}else{label=593;break;}
 case 592: 
 var $2244=((($2239)+($1687))|0);
 HEAP32[(($2238)>>2)]=$2244;
 var $2245=($2244|0)<0;
 var $2246=($2244|0)>($numVertices_0|0);
 var $or_cond708=$2245|$2246;
 if($or_cond708){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=593;break;}
 case 593: 
 var $2248=((($storemerge15)+(1))|0);
 var $storemerge15=$2248;label=589;break;
 case 594: 
 var $2249=HEAP32[(($11)>>2)];
 var $2250=$2249&16384;
 var $2251=($2250|0)==0;
 var $2252=$2249&16;
 var $2253=($2252|0)==0;
 var $or_cond710=$2251&$2253;
 if($or_cond710){var $2270=$2249;label=601;break;}else{var $storemerge16=0;label=595;break;}
 case 595: 
 var $storemerge16;
 var $2255=($storemerge16|0)<3;
 if($2255){label=596;break;}else{label=600;break;}
 case 596: 
 var $2257=HEAP32[(($556)>>2)];
 var $2258=(($2257+($storemerge16<<2))|0);
 var $2259=HEAP32[(($2258)>>2)];
 var $2260=($2259|0)>($numVNormals_0|0);
 if($2260){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=597;break;}
 case 597: 
 var $2262=($2259|0)<0;
 if($2262){label=598;break;}else{label=599;break;}
 case 598: 
 var $2264=((($2259)+($2147))|0);
 HEAP32[(($2258)>>2)]=$2264;
 var $2265=($2264|0)<0;
 var $2266=($2264|0)>($numVNormals_0|0);
 var $or_cond711=$2265|$2266;
 if($or_cond711){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$numTriangles_1;var $result_2=$result_1;label=718;break;}else{label=599;break;}
 case 599: 
 var $2268=((($storemerge16)+(1))|0);
 var $storemerge16=$2268;label=595;break;
 case 600: 
 var $_pre633=HEAP32[(($11)>>2)];
 var $2270=$_pre633;label=601;break;
 case 601: 
 var $2270;
 var $2271=$2270&256;
 var $2272=($2271|0)==0;
 if($2272){label=603;break;}else{label=602;break;}
 case 602: 
 tempBigInt=$currentColor_0;HEAP8[(($685)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($685)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($685)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($685)+(3))>>0)]=tempBigInt&0xff;
 label=603;break;
 case 603: 
 var $2275=((($numTriangles_1)+(1))|0);
 var $2276=HEAP32[(($518)>>2)];
 var $2277=HEAP32[(($519)>>2)];
 var $2278=($2276|0)==($2277|0);
 if($2278){label=622;break;}else{label=604;break;}
 case 604: 
 var $2280=($2276|0)==0;
 if($2280){label=621;break;}else{label=605;break;}
 case 605: 
 var $2282=(($2276)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2282,$675) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=606;break; } else { label=545;break; }
 case 606: 
 var $2283=(($2276+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2283,$676) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=607;break; } else { label=608;break; }
 case 607: 
 var $2285=(($2276+24)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2285,$677) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=620;break; } else { label=609;break; }
 case 608: 
 var $2287$0 = ___cxa_find_matching_catch(); var $2287$1 = tempRet0;
 var $2288=$2287$0;
 var $2289=$2287$1;
 var $_0454=$2288;var $_0455=$2289;label=614;break;
 case 609: 
 var $2291$0 = ___cxa_find_matching_catch(); var $2291$1 = tempRet0;
 var $2292=$2291$0;
 var $2293=$2291$1;
 var $2294=(($2283)|0);
 var $2295=HEAP32[(($2294)>>2)];
 var $2296=($2295|0)==0;
 if($2296){var $_0454=$2292;var $_0455=$2293;label=614;break;}else{label=610;break;}
 case 610: 
 var $2298=(($2276+16)|0);
 var $_pre644=HEAP32[(($2298)>>2)];
 var $2300=$_pre644;label=611;break;
 case 611: 
 var $2300;
 var $2301=($2295|0)==($2300|0);
 if($2301){label=613;break;}else{label=612;break;}
 case 612: 
 var $2303=((($2300)-(4))|0);
 HEAP32[(($2298)>>2)]=$2303;
 var $2300=$2303;label=611;break;
 case 613: 
 var $2304=$2295;
 _free($2304);
 var $_0454=$2292;var $_0455=$2293;label=614;break;
 case 614: 
 var $_0455;
 var $_0454;
 var $2305=(($2276)|0);
 var $2306=HEAP32[(($2305)>>2)];
 var $2307=($2306|0)==0;
 if($2307){label=619;break;}else{label=615;break;}
 case 615: 
 var $2309=(($2276+4)|0);
 var $_pre645=HEAP32[(($2309)>>2)];
 var $2311=$_pre645;label=616;break;
 case 616: 
 var $2311;
 var $2312=($2306|0)==($2311|0);
 if($2312){label=618;break;}else{label=617;break;}
 case 617: 
 var $2314=((($2311)-(4))|0);
 HEAP32[(($2309)>>2)]=$2314;
 var $2311=$2314;label=616;break;
 case 618: 
 var $2315=$2306;
 _free($2315);
 label=619;break;
 case 619: 
 var $2316$0=$_0454;
 var $2316$1=0;
 var $2317$0=$2316$0;
 var $2317$1=$_0455;
 var $eh_lpad_body158$1=$2317$1;var $eh_lpad_body158$0=$2317$0;label=548;break;
 case 620: 
 var $2318=(($2276+36)|0);
 var $2319=$2318;
 assert(7 % 1 === 0);HEAP32[(($2319)>>2)]=HEAP32[(($679)>>2)];HEAP16[((($2319)+(4))>>1)]=HEAP16[((($679)+(4))>>1)];HEAP8[(((($2319)+(4))+(2))>>0)]=HEAP8[(((($679)+(4))+(2))>>0)];
 var $2320=HEAP8[(($680)>>0)];
 var $2321=(($2276+43)|0);
 HEAP8[(($2321)>>0)]=$2320;
 var $2322=HEAP8[(($681)>>0)];
 var $2323=(($2276+44)|0);
 HEAP8[(($2323)>>0)]=$2322;
 var $2324=HEAP8[(($682)>>0)];
 var $2325=(($2276+45)|0);
 HEAP8[(($2325)>>0)]=$2324;
 var $2326=HEAP8[(($683)>>0)];
 var $2327=(($2276+46)|0);
 HEAP8[(($2327)>>0)]=$2326;
 label=621;break;
 case 621: 
 var $2328=(($2276+48)|0);
 HEAP32[(($518)>>2)]=$2328;
 var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$2275;var $result_2=$result_1;label=718;break;
 case 622: 
 var $2330=HEAP32[(($517)>>2)];
 var $2331=$2276;
 var $2332=$2330;
 var $2333=((($2331)-($2332))|0);
 var $2334=(((($2333|0))/(48))&-1);
 var $2335=((($2334)+(1))|0);
 var $2336=($2335>>>0)>89478485;
 if($2336){label=623;break;}else{label=634;break;}
 case 623: 
 var $2337=___cxa_allocate_exception(8);
 var $2338=$2337;
 HEAP32[(($2338)>>2)]=15352;
 var $2339=(($2337+4)|0);
 var $2340=_strlen(1736);
 var $2341=((($2340)+(13))|0);
 var $2342=($2341|0)==0;
 var $_size_i_i170=($2342?1:$2341);
 var $2343=_malloc($_size_i_i170);
 var $2344=($2343|0)==0;
 if($2344){label=624;break;}else{var $_lcssa_i_i174=$2343;label=629;break;}
 case 624: 
 var $2345=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2346=($2345|0)==0;
 if($2346){label=627;break;}else{label=625;break;}
 case 625: 
 var $2348=$2345;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2348]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=626;break; } else { label=631;break; }
 case 626: 
 var $2349=_malloc($_size_i_i170);
 var $2350=($2349|0)==0;
 if($2350){label=624;break;}else{var $_lcssa_i_i174=$2349;label=629;break;}
 case 627: 
 var $2352=___cxa_allocate_exception(4);
 var $2353=$2352;
 HEAP32[(($2353)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2352,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=628;break; } else { label=632;break; }
 case 628: 
 throw "Reached an unreachable!";
 case 629: 
 var $_lcssa_i_i174;
 var $2354=$_lcssa_i_i174;
 HEAP32[(($2354)>>2)]=$2340;
 var $2355=(($_lcssa_i_i174+4)|0);
 var $2356=$2355;
 HEAP32[(($2356)>>2)]=$2340;
 var $2357=(($_lcssa_i_i174+8)|0);
 var $2358=$2357;
 HEAP32[(($2358)>>2)]=0;
 var $2359=(($_lcssa_i_i174+12)|0);
 var $2360=((($2340)+(1))|0);
 assert($2360 % 1 === 0);(_memcpy($2359, 1736, $2360)|0);
 var $2361=$2339;
 HEAP32[(($2361)>>2)]=$2359;
 HEAP32[(($2338)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2337,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=630;break; } else { label=547;break; }
 case 630: 
 throw "Reached an unreachable!";
 case 631: 
 var $lpad_loopexit501$0 = ___cxa_find_matching_catch(); var $lpad_loopexit501$1 = tempRet0;
 var $lpad_phi503$1=$lpad_loopexit501$1;var $lpad_phi503$0=$lpad_loopexit501$0;label=633;break;
 case 632: 
 var $lpad_nonloopexit502$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit502$1 = tempRet0;
 var $lpad_phi503$1=$lpad_nonloopexit502$1;var $lpad_phi503$0=$lpad_nonloopexit502$0;label=633;break;
 case 633: 
 var $lpad_phi503$0;
 var $lpad_phi503$1;
 ___cxa_free_exception($2337);
 var $eh_lpad_body158$1=$lpad_phi503$1;var $eh_lpad_body158$0=$lpad_phi503$0;label=548;break;
 case 634: 
 var $2364=($2334>>>0)<44739242;
 if($2364){label=635;break;}else{var $2368=89478485;label=636;break;}
 case 635: 
 var $2365=$2334<<1;
 var $2366=($2365>>>0)<($2335>>>0);
 var $_712=($2366?$2335:$2365);
 var $2367=($_712|0)==0;
 if($2367){var $2384=0;var $2383=$_712;label=643;break;}else{var $2368=$_712;label=636;break;}
 case 636: 
 var $2368;
 var $2369=((($2368)*(48))&-1);
 var $2370=($2369|0)==0;
 var $_size_i_i_i178=($2370?1:$2369);
 var $2371=_malloc($_size_i_i_i178);
 var $2372=($2371|0)==0;
 if($2372){label=637;break;}else{var $_lcssa_i_i_i180=$2371;label=642;break;}
 case 637: 
 var $2373=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2374=($2373|0)==0;
 if($2374){label=640;break;}else{label=638;break;}
 case 638: 
 var $2376=$2373;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2376]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=639;break; } else { label=544;break; }
 case 639: 
 var $2377=_malloc($_size_i_i_i178);
 var $2378=($2377|0)==0;
 if($2378){label=637;break;}else{var $_lcssa_i_i_i180=$2377;label=642;break;}
 case 640: 
 var $2380=___cxa_allocate_exception(4);
 var $2381=$2380;
 HEAP32[(($2381)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2380,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=641;break; } else { label=547;break; }
 case 641: 
 throw "Reached an unreachable!";
 case 642: 
 var $_lcssa_i_i_i180;
 var $2382=$_lcssa_i_i_i180;
 var $2384=$2382;var $2383=$2368;label=643;break;
 case 643: 
 var $2383;
 var $2384;
 var $2385=(($2384+((($2334)*(48))&-1))|0);
 var $2386=(($2384+((($2383)*(48))&-1))|0);
 var $2387=($2385|0)==0;
 if($2387){label=660;break;}else{label=644;break;}
 case 644: 
 var $2389=(($2385)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2389,$675) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=645;break; } else { label=698;break; }
 case 645: 
 var $2390=(($2384+((($2334)*(48))&-1)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2390,$676) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=646;break; } else { label=647;break; }
 case 646: 
 var $2392=(($2384+((($2334)*(48))&-1)+24)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2392,$677) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=659;break; } else { label=648;break; }
 case 647: 
 var $2394$0 = ___cxa_find_matching_catch(); var $2394$1 = tempRet0;
 var $2395=$2394$0;
 var $2396=$2394$1;
 var $_0452=$2395;var $_0453=$2396;label=653;break;
 case 648: 
 var $2398$0 = ___cxa_find_matching_catch(); var $2398$1 = tempRet0;
 var $2399=$2398$0;
 var $2400=$2398$1;
 var $2401=(($2390)|0);
 var $2402=HEAP32[(($2401)>>2)];
 var $2403=($2402|0)==0;
 if($2403){var $_0452=$2399;var $_0453=$2400;label=653;break;}else{label=649;break;}
 case 649: 
 var $2405=(($2384+((($2334)*(48))&-1)+16)|0);
 var $_pre642=HEAP32[(($2405)>>2)];
 var $2407=$_pre642;label=650;break;
 case 650: 
 var $2407;
 var $2408=($2402|0)==($2407|0);
 if($2408){label=652;break;}else{label=651;break;}
 case 651: 
 var $2410=((($2407)-(4))|0);
 HEAP32[(($2405)>>2)]=$2410;
 var $2407=$2410;label=650;break;
 case 652: 
 var $2411=$2402;
 _free($2411);
 var $_0452=$2399;var $_0453=$2400;label=653;break;
 case 653: 
 var $_0453;
 var $_0452;
 var $2412=(($2385)|0);
 var $2413=HEAP32[(($2412)>>2)];
 var $2414=($2413|0)==0;
 if($2414){label=658;break;}else{label=654;break;}
 case 654: 
 var $2416=(($2384+((($2334)*(48))&-1)+4)|0);
 var $_pre643=HEAP32[(($2416)>>2)];
 var $2418=$_pre643;label=655;break;
 case 655: 
 var $2418;
 var $2419=($2413|0)==($2418|0);
 if($2419){label=657;break;}else{label=656;break;}
 case 656: 
 var $2421=((($2418)-(4))|0);
 HEAP32[(($2416)>>2)]=$2421;
 var $2418=$2421;label=655;break;
 case 657: 
 var $2422=$2413;
 _free($2422);
 label=658;break;
 case 658: 
 var $2423$0=$_0452;
 var $2423$1=0;
 var $2424$0=$2423$0;
 var $2424$1=$_0453;
 var $eh_lpad_body_i185$1=$2424$1;var $eh_lpad_body_i185$0=$2424$0;var $__v_i169_sroa_18_2=$2385;var $__v_i169_sroa_9_2=$2385;label=699;break;
 case 659: 
 var $2425=(($2384+((($2334)*(48))&-1)+36)|0);
 var $2426=$2425;
 assert(7 % 1 === 0);HEAP32[(($2426)>>2)]=HEAP32[(($679)>>2)];HEAP16[((($2426)+(4))>>1)]=HEAP16[((($679)+(4))>>1)];HEAP8[(((($2426)+(4))+(2))>>0)]=HEAP8[(((($679)+(4))+(2))>>0)];
 var $2427=HEAP8[(($680)>>0)];
 var $2428=(($2384+((($2334)*(48))&-1)+43)|0);
 HEAP8[(($2428)>>0)]=$2427;
 var $2429=HEAP8[(($681)>>0)];
 var $2430=(($2384+((($2334)*(48))&-1)+44)|0);
 HEAP8[(($2430)>>0)]=$2429;
 var $2431=HEAP8[(($682)>>0)];
 var $2432=(($2384+((($2334)*(48))&-1)+45)|0);
 HEAP8[(($2432)>>0)]=$2431;
 var $2433=HEAP8[(($683)>>0)];
 var $2434=(($2384+((($2334)*(48))&-1)+46)|0);
 HEAP8[(($2434)>>0)]=$2433;
 label=660;break;
 case 660: 
 var $_sum675=((($2334)+(1))|0);
 var $2435=(($2384+((($_sum675)*(48))&-1))|0);
 var $2436=HEAP32[(($517)>>2)];
 var $2437=HEAP32[(($518)>>2)];
 var $_0451=$2437;var $__v_i169_sroa_9_0=$2385;label=661;break;
 case 661: 
 var $__v_i169_sroa_9_0;
 var $_0451;
 var $2439=($_0451|0)==($2436|0);
 if($2439){label=678;break;}else{label=662;break;}
 case 662: 
 var $2441=((($_0451)-(48))|0);
 var $2442=((($__v_i169_sroa_9_0)-(48))|0);
 var $2443=(($2442)|0);
 var $2444=(($2441)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2443,$2444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=663;break; } else { label=697;break; }
 case 663: 
 var $2445=((($__v_i169_sroa_9_0)-(48)+12)|0);
 var $2446=((($_0451)-(48)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2445,$2446) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=664;break; } else { label=665;break; }
 case 664: 
 var $2448=((($__v_i169_sroa_9_0)-(48)+24)|0);
 var $2449=((($_0451)-(48)+24)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($2448,$2449) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=677;break; } else { label=666;break; }
 case 665: 
 var $2451$0 = ___cxa_find_matching_catch(); var $2451$1 = tempRet0;
 var $2452=$2451$0;
 var $2453=$2451$1;
 var $_0449=$2452;var $_0450=$2453;label=671;break;
 case 666: 
 var $2455$0 = ___cxa_find_matching_catch(); var $2455$1 = tempRet0;
 var $2456=$2455$0;
 var $2457=$2455$1;
 var $2458=(($2445)|0);
 var $2459=HEAP32[(($2458)>>2)];
 var $2460=($2459|0)==0;
 if($2460){var $_0449=$2456;var $_0450=$2457;label=671;break;}else{label=667;break;}
 case 667: 
 var $2462=((($__v_i169_sroa_9_0)-(48)+16)|0);
 var $_pre637=HEAP32[(($2462)>>2)];
 var $2464=$_pre637;label=668;break;
 case 668: 
 var $2464;
 var $2465=($2459|0)==($2464|0);
 if($2465){label=670;break;}else{label=669;break;}
 case 669: 
 var $2467=((($2464)-(4))|0);
 HEAP32[(($2462)>>2)]=$2467;
 var $2464=$2467;label=668;break;
 case 670: 
 var $2468=$2459;
 _free($2468);
 var $_0449=$2456;var $_0450=$2457;label=671;break;
 case 671: 
 var $_0450;
 var $_0449;
 var $2469=(($2442)|0);
 var $2470=HEAP32[(($2469)>>2)];
 var $2471=($2470|0)==0;
 if($2471){label=676;break;}else{label=672;break;}
 case 672: 
 var $2473=((($__v_i169_sroa_9_0)-(48)+4)|0);
 var $_pre638=HEAP32[(($2473)>>2)];
 var $2475=$_pre638;label=673;break;
 case 673: 
 var $2475;
 var $2476=($2470|0)==($2475|0);
 if($2476){label=675;break;}else{label=674;break;}
 case 674: 
 var $2478=((($2475)-(4))|0);
 HEAP32[(($2473)>>2)]=$2478;
 var $2475=$2478;label=673;break;
 case 675: 
 var $2479=$2470;
 _free($2479);
 label=676;break;
 case 676: 
 var $2480$0=$_0449;
 var $2480$1=0;
 var $2481$0=$2480$0;
 var $2481$1=$_0450;
 var $eh_lpad_body_i185$1=$2481$1;var $eh_lpad_body_i185$0=$2481$0;var $__v_i169_sroa_18_2=$2435;var $__v_i169_sroa_9_2=$__v_i169_sroa_9_0;label=699;break;
 case 677: 
 var $2482=((($__v_i169_sroa_9_0)-(48)+36)|0);
 var $2483=((($_0451)-(48)+36)|0);
 var $2484=$2482;
 var $2485=$2483;
 assert(7 % 1 === 0);HEAP32[(($2484)>>2)]=HEAP32[(($2485)>>2)];HEAP16[((($2484)+(4))>>1)]=HEAP16[((($2485)+(4))>>1)];HEAP8[(((($2484)+(4))+(2))>>0)]=HEAP8[(((($2485)+(4))+(2))>>0)];
 var $2486=((($_0451)-(48)+43)|0);
 var $2487=HEAP8[(($2486)>>0)];
 var $2488=((($__v_i169_sroa_9_0)-(48)+43)|0);
 HEAP8[(($2488)>>0)]=$2487;
 var $2489=((($_0451)-(48)+44)|0);
 var $2490=HEAP8[(($2489)>>0)];
 var $2491=((($__v_i169_sroa_9_0)-(48)+44)|0);
 HEAP8[(($2491)>>0)]=$2490;
 var $2492=((($_0451)-(48)+45)|0);
 var $2493=HEAP8[(($2492)>>0)];
 var $2494=((($__v_i169_sroa_9_0)-(48)+45)|0);
 HEAP8[(($2494)>>0)]=$2493;
 var $2495=((($_0451)-(48)+46)|0);
 var $2496=HEAP8[(($2495)>>0)];
 var $2497=((($__v_i169_sroa_9_0)-(48)+46)|0);
 HEAP8[(($2497)>>0)]=$2496;
 var $_0451=$2441;var $__v_i169_sroa_9_0=$2442;label=661;break;
 case 678: 
 var $2498=HEAP32[(($517)>>2)];
 HEAP32[(($517)>>2)]=$__v_i169_sroa_9_0;
 var $2499=HEAP32[(($518)>>2)];
 HEAP32[(($518)>>2)]=$2435;
 HEAP32[(($519)>>2)]=$2386;
 var $__v_i169_sroa_18_0=$2499;label=679;break;
 case 679: 
 var $__v_i169_sroa_18_0;
 var $2500=($2498|0)==($__v_i169_sroa_18_0|0);
 if($2500){label=695;break;}else{label=680;break;}
 case 680: 
 var $2502=((($__v_i169_sroa_18_0)-(48))|0);
 var $2503=((($__v_i169_sroa_18_0)-(48)+24)|0);
 var $2504=HEAP32[(($2503)>>2)];
 var $2505=($2504|0)==0;
 if($2505){label=685;break;}else{label=681;break;}
 case 681: 
 var $2507=((($__v_i169_sroa_18_0)-(48)+28)|0);
 var $_pre636=HEAP32[(($2507)>>2)];
 var $2509=$_pre636;label=682;break;
 case 682: 
 var $2509;
 var $2510=($2504|0)==($2509|0);
 if($2510){label=684;break;}else{label=683;break;}
 case 683: 
 var $2512=((($2509)-(4))|0);
 HEAP32[(($2507)>>2)]=$2512;
 var $2509=$2512;label=682;break;
 case 684: 
 var $2513=$2504;
 _free($2513);
 label=685;break;
 case 685: 
 var $2514=((($__v_i169_sroa_18_0)-(48)+12)|0);
 var $2515=HEAP32[(($2514)>>2)];
 var $2516=($2515|0)==0;
 if($2516){label=690;break;}else{label=686;break;}
 case 686: 
 var $2518=((($__v_i169_sroa_18_0)-(48)+16)|0);
 var $_pre635=HEAP32[(($2518)>>2)];
 var $2520=$_pre635;label=687;break;
 case 687: 
 var $2520;
 var $2521=($2515|0)==($2520|0);
 if($2521){label=689;break;}else{label=688;break;}
 case 688: 
 var $2523=((($2520)-(4))|0);
 HEAP32[(($2518)>>2)]=$2523;
 var $2520=$2523;label=687;break;
 case 689: 
 var $2524=$2515;
 _free($2524);
 label=690;break;
 case 690: 
 var $2525=(($2502)|0);
 var $2526=HEAP32[(($2525)>>2)];
 var $2527=($2526|0)==0;
 if($2527){var $__v_i169_sroa_18_0=$2502;label=679;break;}else{label=691;break;}
 case 691: 
 var $2529=((($__v_i169_sroa_18_0)-(48)+4)|0);
 var $_pre634=HEAP32[(($2529)>>2)];
 var $2531=$_pre634;label=692;break;
 case 692: 
 var $2531;
 var $2532=($2526|0)==($2531|0);
 if($2532){label=694;break;}else{label=693;break;}
 case 693: 
 var $2534=((($2531)-(4))|0);
 HEAP32[(($2529)>>2)]=$2534;
 var $2531=$2534;label=692;break;
 case 694: 
 var $2535=$2526;
 _free($2535);
 var $__v_i169_sroa_18_0=$2502;label=679;break;
 case 695: 
 var $2536=($2498|0)==0;
 if($2536){var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$2275;var $result_2=$result_1;label=718;break;}else{label=696;break;}
 case 696: 
 var $2538=$2498;
 _free($2538);
 var $extraTriangles_2=$extraTriangles_1;var $numTriangles_2=$2275;var $result_2=$result_1;label=718;break;
 case 697: 
 var $lpad_loopexit573$0 = ___cxa_find_matching_catch(); var $lpad_loopexit573$1 = tempRet0;
 var $eh_lpad_body_i185$1=$lpad_loopexit573$1;var $eh_lpad_body_i185$0=$lpad_loopexit573$0;var $__v_i169_sroa_18_2=$2435;var $__v_i169_sroa_9_2=$__v_i169_sroa_9_0;label=699;break;
 case 698: 
 var $lpad_nonloopexit574$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit574$1 = tempRet0;
 var $eh_lpad_body_i185$1=$lpad_nonloopexit574$1;var $eh_lpad_body_i185$0=$lpad_nonloopexit574$0;var $__v_i169_sroa_18_2=$2385;var $__v_i169_sroa_9_2=$2385;label=699;break;
 case 699: 
 var $__v_i169_sroa_9_2;
 var $__v_i169_sroa_18_2;
 var $eh_lpad_body_i185$0;
 var $eh_lpad_body_i185$1;
 var $__v_i169_sroa_18_3=$__v_i169_sroa_18_2;label=700;break;
 case 700: 
 var $__v_i169_sroa_18_3;
 var $2539=($__v_i169_sroa_9_2|0)==($__v_i169_sroa_18_3|0);
 if($2539){label=716;break;}else{label=701;break;}
 case 701: 
 var $2541=((($__v_i169_sroa_18_3)-(48))|0);
 var $2542=((($__v_i169_sroa_18_3)-(48)+24)|0);
 var $2543=HEAP32[(($2542)>>2)];
 var $2544=($2543|0)==0;
 if($2544){label=706;break;}else{label=702;break;}
 case 702: 
 var $2546=((($__v_i169_sroa_18_3)-(48)+28)|0);
 var $_pre641=HEAP32[(($2546)>>2)];
 var $2548=$_pre641;label=703;break;
 case 703: 
 var $2548;
 var $2549=($2543|0)==($2548|0);
 if($2549){label=705;break;}else{label=704;break;}
 case 704: 
 var $2551=((($2548)-(4))|0);
 HEAP32[(($2546)>>2)]=$2551;
 var $2548=$2551;label=703;break;
 case 705: 
 var $2552=$2543;
 _free($2552);
 label=706;break;
 case 706: 
 var $2553=((($__v_i169_sroa_18_3)-(48)+12)|0);
 var $2554=HEAP32[(($2553)>>2)];
 var $2555=($2554|0)==0;
 if($2555){label=711;break;}else{label=707;break;}
 case 707: 
 var $2557=((($__v_i169_sroa_18_3)-(48)+16)|0);
 var $_pre640=HEAP32[(($2557)>>2)];
 var $2559=$_pre640;label=708;break;
 case 708: 
 var $2559;
 var $2560=($2554|0)==($2559|0);
 if($2560){label=710;break;}else{label=709;break;}
 case 709: 
 var $2562=((($2559)-(4))|0);
 HEAP32[(($2557)>>2)]=$2562;
 var $2559=$2562;label=708;break;
 case 710: 
 var $2563=$2554;
 _free($2563);
 label=711;break;
 case 711: 
 var $2564=(($2541)|0);
 var $2565=HEAP32[(($2564)>>2)];
 var $2566=($2565|0)==0;
 if($2566){var $__v_i169_sroa_18_3=$2541;label=700;break;}else{label=712;break;}
 case 712: 
 var $2568=((($__v_i169_sroa_18_3)-(48)+4)|0);
 var $_pre639=HEAP32[(($2568)>>2)];
 var $2570=$_pre639;label=713;break;
 case 713: 
 var $2570;
 var $2571=($2565|0)==($2570|0);
 if($2571){label=715;break;}else{label=714;break;}
 case 714: 
 var $2573=((($2570)-(4))|0);
 HEAP32[(($2568)>>2)]=$2573;
 var $2570=$2573;label=713;break;
 case 715: 
 var $2574=$2565;
 _free($2574);
 var $__v_i169_sroa_18_3=$2541;label=700;break;
 case 716: 
 var $2575=($2384|0)==0;
 if($2575){var $eh_lpad_body158$1=$eh_lpad_body_i185$1;var $eh_lpad_body158$0=$eh_lpad_body_i185$0;label=548;break;}else{label=717;break;}
 case 717: 
 var $2577=$2384;
 _free($2577);
 var $eh_lpad_body158$1=$eh_lpad_body_i185$1;var $eh_lpad_body158$0=$eh_lpad_body_i185$0;label=548;break;
 case 718: 
 var $result_2;
 var $numTriangles_2;
 var $extraTriangles_2;
 var $2578=((($storemerge12)+(3))|0);
 var $_pre630=HEAP32[(($647)>>2)];
 var $_pre631=HEAP32[(($646)>>2)];
 var $storemerge12=$2578;var $extraTriangles_1=$extraTriangles_2;var $numTriangles_1=$numTriangles_2;var $result_1=$result_2;var $2151=$_pre630;var $2150=$_pre631;label=568;break;
 case 719: 
 var $2580=($2150|0)==0;
 if($2580){label=723;break;}else{var $2582=$2151;label=720;break;}
 case 720: 
 var $2582;
 var $2583=($2150|0)==($2582|0);
 if($2583){label=722;break;}else{label=721;break;}
 case 721: 
 var $2585=((($2582)-(4))|0);
 HEAP32[(($647)>>2)]=$2585;
 var $2582=$2585;label=720;break;
 case 722: 
 var $2586=$2150;
 _free($2586);
 label=723;break;
 case 723: 
 var $2587=HEAP32[(($651)>>2)];
 var $2588=($2587|0)==0;
 if($2588){label=728;break;}else{label=724;break;}
 case 724: 
 var $_pre650=HEAP32[(($688)>>2)];
 var $2591=$_pre650;label=725;break;
 case 725: 
 var $2591;
 var $2592=($2587|0)==($2591|0);
 if($2592){label=727;break;}else{label=726;break;}
 case 726: 
 var $2594=((($2591)-(4))|0);
 HEAP32[(($688)>>2)]=$2594;
 var $2591=$2594;label=725;break;
 case 727: 
 var $2595=$2587;
 _free($2595);
 label=728;break;
 case 728: 
 var $2596=HEAP32[(($650)>>2)];
 var $2597=($2596|0)==0;
 if($2597){label=733;break;}else{label=729;break;}
 case 729: 
 var $_pre649=HEAP32[(($687)>>2)];
 var $2600=$_pre649;label=730;break;
 case 730: 
 var $2600;
 var $2601=($2596|0)==($2600|0);
 if($2601){label=732;break;}else{label=731;break;}
 case 731: 
 var $2603=((($2600)-(4))|0);
 HEAP32[(($687)>>2)]=$2603;
 var $2600=$2603;label=730;break;
 case 732: 
 var $2604=$2596;
 _free($2604);
 label=733;break;
 case 733: 
 var $2605=HEAP32[(($649)>>2)];
 var $2606=($2605|0)==0;
 if($2606){label=738;break;}else{label=734;break;}
 case 734: 
 var $_pre648=HEAP32[(($686)>>2)];
 var $2609=$_pre648;label=735;break;
 case 735: 
 var $2609;
 var $2610=($2605|0)==($2609|0);
 if($2610){label=737;break;}else{label=736;break;}
 case 736: 
 var $2612=((($2609)-(4))|0);
 HEAP32[(($686)>>2)]=$2612;
 var $2609=$2612;label=735;break;
 case 737: 
 var $2613=$2605;
 _free($2613);
 label=738;break;
 case 738: 
 var $2614=HEAP32[(($637)>>2)];
 var $2615=($2614|0)==0;
 if($2615){var $loadingStr_0=2416;var $extraTriangles_0=$extraTriangles_1;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_1;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_1;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}else{label=739;break;}
 case 739: 
 var $_pre646=HEAP32[(($638)>>2)];
 var $2617=$_pre646;label=740;break;
 case 740: 
 var $2617;
 var $2618=($2614|0)==($2617|0);
 if($2618){label=746;break;}else{label=741;break;}
 case 741: 
 var $2620=((($2617)-(12))|0);
 HEAP32[(($638)>>2)]=$2620;
 var $2621=(($2620)|0);
 var $2622=HEAP32[(($2621)>>2)];
 var $2623=($2622|0)==0;
 if($2623){var $2617=$2620;label=740;break;}else{label=742;break;}
 case 742: 
 var $2625=((($2617)-(12)+4)|0);
 var $_pre647=HEAP32[(($2625)>>2)];
 var $2627=$_pre647;label=743;break;
 case 743: 
 var $2627;
 var $2628=($2622|0)==($2627|0);
 if($2628){label=745;break;}else{label=744;break;}
 case 744: 
 var $2630=((($2627)-(12))|0);
 HEAP32[(($2625)>>2)]=$2630;
 var $2627=$2630;label=743;break;
 case 745: 
 var $2631=$2622;
 _free($2631);
 var $2617=$2620;label=740;break;
 case 746: 
 var $2632=$2614;
 _free($2632);
 var $loadingStr_0=2416;var $extraTriangles_0=$extraTriangles_1;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_1;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_1;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 747: 
 var $_0458;
 var $_0456;
 var $2633=HEAP32[(($650)>>2)];
 var $2634=($2633|0)==0;
 if($2634){var $_1457=$_0456;var $_1459=$_0458;label=752;break;}else{label=748;break;}
 case 748: 
 var $_pre651=HEAP32[(($687)>>2)];
 var $2637=$_pre651;label=749;break;
 case 749: 
 var $2637;
 var $2638=($2633|0)==($2637|0);
 if($2638){label=751;break;}else{label=750;break;}
 case 750: 
 var $2640=((($2637)-(4))|0);
 HEAP32[(($687)>>2)]=$2640;
 var $2637=$2640;label=749;break;
 case 751: 
 var $2641=$2633;
 _free($2641);
 var $_1457=$_0456;var $_1459=$_0458;label=752;break;
 case 752: 
 var $_1459;
 var $_1457;
 var $2642=HEAP32[(($649)>>2)];
 var $2643=($2642|0)==0;
 if($2643){var $_2=$_1457;var $_2460=$_1459;label=757;break;}else{label=753;break;}
 case 753: 
 var $_pre652=HEAP32[(($686)>>2)];
 var $2646=$_pre652;label=754;break;
 case 754: 
 var $2646;
 var $2647=($2642|0)==($2646|0);
 if($2647){label=756;break;}else{label=755;break;}
 case 755: 
 var $2649=((($2646)-(4))|0);
 HEAP32[(($686)>>2)]=$2649;
 var $2646=$2649;label=754;break;
 case 756: 
 var $2650=$2642;
 _free($2650);
 var $_2=$_1457;var $_2460=$_1459;label=757;break;
 case 757: 
 var $_2460;
 var $_2;
 var $2651=HEAP32[(($637)>>2)];
 var $2652=($2651|0)==0;
 if($2652){var $_3=$_2;var $_3461=$_2460;label=1205;break;}else{label=758;break;}
 case 758: 
 var $_pre620=HEAP32[(($638)>>2)];
 var $2654=$_pre620;label=759;break;
 case 759: 
 var $2654;
 var $2655=($2651|0)==($2654|0);
 if($2655){label=765;break;}else{label=760;break;}
 case 760: 
 var $2657=((($2654)-(12))|0);
 HEAP32[(($638)>>2)]=$2657;
 var $2658=(($2657)|0);
 var $2659=HEAP32[(($2658)>>2)];
 var $2660=($2659|0)==0;
 if($2660){var $2654=$2657;label=759;break;}else{label=761;break;}
 case 761: 
 var $2662=((($2654)-(12)+4)|0);
 var $_pre621=HEAP32[(($2662)>>2)];
 var $2664=$_pre621;label=762;break;
 case 762: 
 var $2664;
 var $2665=($2659|0)==($2664|0);
 if($2665){label=764;break;}else{label=763;break;}
 case 763: 
 var $2667=((($2664)-(12))|0);
 HEAP32[(($2662)>>2)]=$2667;
 var $2664=$2667;label=762;break;
 case 764: 
 var $2668=$2659;
 _free($2668);
 var $2654=$2657;label=759;break;
 case 765: 
 var $2669=$2651;
 _free($2669);
 var $_3=$_2;var $_3461=$_2460;label=1205;break;
 case 766: 
 var $2671=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2368);
 var $2672=($2671|0)==0;
 if($2672){label=767;break;}else{label=1039;break;}
 case 767: 
 var $2674=HEAP32[(($521)>>2)];
 var $2675=HEAP32[(($520)>>2)];
 var $2676=$2674;
 var $2677=$2675;
 var $2678=((($2676)-($2677))|0);
 var $2679=(((($2678|0))/(12))&-1);
 var $2680=($2679>>>0)>1;
 if($2680){label=768;break;}else{label=1039;break;}
 case 768: 
 var $2682=(($2675+12)|0);
 var $2683=$2682;
 var $2684=HEAP8[(($2683)>>0)];
 var $2685=$2684&1;
 var $2686=(($2685<<24)>>24)==0;
 if($2686){label=769;break;}else{label=770;break;}
 case 769: 
 assert(12 % 1 === 0);HEAP32[(($689)>>2)]=HEAP32[(($2683)>>2)];HEAP32[((($689)+(4))>>2)]=HEAP32[((($2683)+(4))>>2)];HEAP32[((($689)+(8))>>2)]=HEAP32[((($2683)+(8))>>2)];
 label=783;break;
 case 770: 
 var $2689=(($2675+20)|0);
 var $2690=HEAP32[(($2689)>>2)];
 var $2691=(($2675+16)|0);
 var $2692=HEAP32[(($2691)>>2)];
 var $2693=($2692>>>0)>4294967279;
 if($2693){label=771;break;}else{label=773;break;}
 case 771: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=772;break; } else { label=165;break; }
 case 772: 
 throw "Reached an unreachable!";
 case 773: 
 var $2696=($2692>>>0)<11;
 if($2696){label=774;break;}else{label=775;break;}
 case 774: 
 var $2698=$2692<<1;
 var $2699=(($2698)&255);
 HEAP8[(($689)>>0)]=$2699;
 var $__p_0_i=$691;label=782;break;
 case 775: 
 var $2700=((($2692)+(16))|0);
 var $2701=$2700&-16;
 var $2702=($2701|0)==0;
 var $_size_i=($2702?1:$2701);
 var $2703=_malloc($_size_i);
 var $2704=($2703|0)==0;
 if($2704){label=776;break;}else{var $_lcssa_i=$2703;label=781;break;}
 case 776: 
 var $2705=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2706=($2705|0)==0;
 if($2706){label=779;break;}else{label=777;break;}
 case 777: 
 var $2708=$2705;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2708]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=778;break; } else { label=160;break; }
 case 778: 
 var $2709=_malloc($_size_i);
 var $2710=($2709|0)==0;
 if($2710){label=776;break;}else{var $_lcssa_i=$2709;label=781;break;}
 case 779: 
 var $2712=___cxa_allocate_exception(4);
 var $2713=$2712;
 HEAP32[(($2713)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2712,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=780;break; } else { label=165;break; }
 case 780: 
 throw "Reached an unreachable!";
 case 781: 
 var $_lcssa_i;
 HEAP32[(($855)>>2)]=$_lcssa_i;
 var $2714=$2701|1;
 HEAP32[(($856)>>2)]=$2714;
 HEAP32[(($857)>>2)]=$2692;
 var $__p_0_i=$_lcssa_i;label=782;break;
 case 782: 
 var $__p_0_i;
 assert($2692 % 1 === 0);(_memcpy($__p_0_i, $2690, $2692)|0);
 var $2715=(($__p_0_i+$2692)|0);
 HEAP8[(($2715)>>0)]=0;
 label=783;break;
 case 783: 
 var $2716=HEAP8[(($689)>>0)];
 var $2717=$2716&1;
 var $2718=(($2717<<24)>>24)==0;
 var $2719=HEAP32[(($855)>>2)];
 var $_713=($2718?$691:$2719);
 var $$etemp$41$0=188;
 var $$etemp$41$1=0;

 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $$etemp$44$0=80;
 var $$etemp$44$1=0;

 var $$etemp$45$0=80;
 var $$etemp$45$1=0;

 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 HEAP32[(($700)>>2)]=28556;
 var $2720=(($stream_i223+108)|0);
 var $2721=(($2720)|0);
 HEAP32[(($2721)>>2)]=28576;
 HEAP32[(($703)>>2)]=0;
 var $2722=HEAP32[(($702)>>2)];
 var $2723=((($2722)-(12))|0);
 var $2724=$2723;
 var $2725=HEAP32[(($2724)>>2)];
 var $_sum396=((($2725)+(24))|0);
 var $2726=(($693+$_sum396)|0);
 var $2727=$2726;
 HEAP32[(($2727)>>2)]=$704;
 var $_sum397=((($2725)+(16))|0);
 var $2728=(($693+$_sum397)|0);
 var $2729=$2728;
 HEAP32[(($2729)>>2)]=0;
 var $_sum398=((($2725)+(20))|0);
 var $2730=(($693+$_sum398)|0);
 var $2731=$2730;
 HEAP32[(($2731)>>2)]=0;
 var $_sum399=((($2725)+(4))|0);
 var $2732=(($693+$_sum399)|0);
 var $2733=$2732;
 HEAP32[(($2733)>>2)]=4098;
 var $_sum400=((($2725)+(12))|0);
 var $2734=(($693+$_sum400)|0);
 var $2735=$2734;
 HEAP32[(($2735)>>2)]=0;
 var $_sum401=((($2725)+(8))|0);
 var $2736=(($693+$_sum401)|0);
 var $2737=$2736;
 HEAP32[(($2737)>>2)]=6;
 var $_sum402=((($2725)+(32))|0);
 var $2738=(($693+$_sum402)|0);
 var $_sum403=((($2725)+(28))|0);
 var $2739=(($693+$_sum403)|0);
 var $2740=$2739;
 _memset($2738, 0, 40)|0;
 __ZNSt3__16localeC2Ev($2740);
 var $_sum_i225=((($2725)+(72))|0);
 var $2741=(($693+$_sum_i225)|0);
 var $2742=$2741;
 HEAP32[(($2742)>>2)]=0;
 var $_sum1_i226=((($2725)+(76))|0);
 var $2743=(($693+$_sum1_i226)|0);
 var $2744=$2743;
 HEAP32[(($2744)>>2)]=-1;
 HEAP32[(($700)>>2)]=17124;
 HEAP32[(($699)>>2)]=17144;
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($705) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=784;break; } else { label=787;break; }
 case 784: 
 var $2746=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($705,$_713,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=785;break; } else { label=788;break; }
 case 785: 
 var $2748=($2746|0)==0;
 if($2748){label=786;break;}else{label=790;break;}
 case 786: 
 var $2750=HEAP32[(($702)>>2)];
 var $2751=((($2750)-(12))|0);
 var $2752=$2751;
 var $2753=HEAP32[(($2752)>>2)];
 var $2754=(($693+$2753)|0);
 var $2755=$2754;
 var $_sum6_i227=((($2753)+(16))|0);
 var $2756=(($693+$_sum6_i227)|0);
 var $2757=$2756;
 var $2758=HEAP32[(($2757)>>2)];
 var $2759=$2758|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($2755,$2759) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=790;break; } else { label=788;break; }
 case 787: 
 var $2761$0 = ___cxa_find_matching_catch(); var $2761$1 = tempRet0;
 var $2762=$2761$0;
 var $2763=$2761$1;
 var $_0=$2762;var $_0445=$2763;label=789;break;
 case 788: 
 var $2765$0 = ___cxa_find_matching_catch(); var $2765$1 = tempRet0;
 var $2766=$2765$0;
 var $2767=$2765$1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($705);
 var $_0=$2766;var $_0445=$2767;label=789;break;
 case 789: 
 var $_0445;
 var $_0;
 __ZNSt3__18ios_baseD2Ev($854);
 var $2769$0=$_0;
 var $2769$1=0;
 var $2770$0=$2769$0;
 var $2770$1=$_0445;
 var $eh_lpad_body268$1=$2770$1;var $eh_lpad_body268$0=$2770$0;var $3538=$2716;label=1036;break;
 case 790: 
 var $2771=HEAP32[(($702)>>2)];
 var $2772=((($2771)-(12))|0);
 var $2773=$2772;
 var $2774=HEAP32[(($2773)>>2)];
 var $_sum2_i230=((($2774)+(16))|0);
 var $2775=(($693+$_sum2_i230)|0);
 var $2776=$2775;
 var $2777=HEAP32[(($2776)>>2)];
 var $2778=$2777&5;
 var $2779=($2778|0)==0;
 if($2779){label=791;break;}else{var $_1=0;label=1035;break;}
 case 791: 
 HEAP32[(($706)>>2)]=0;
 HEAP32[(($707)>>2)]=0;
 HEAP32[(($708)>>2)]=0;
 var $storemerge_i231=0;label=792;break;
 case 792: 
 var $storemerge_i231;
 var $2782=($storemerge_i231>>>0)<3;
 if($2782){label=793;break;}else{label=794;break;}
 case 793: 
 var $2784=(($709+($storemerge_i231<<2))|0);
 HEAP32[(($2784)>>2)]=0;
 var $2785=((($storemerge_i231)+(1))|0);
 var $storemerge_i231=$2785;label=792;break;
 case 794: 
 var $2786=HEAP32[(($511)>>2)];
 var $_pre656=HEAP32[(($512)>>2)];
 var $2787=$_pre656;label=795;break;
 case 795: 
 var $2787;
 var $2788=($2786|0)==($2787|0);
 if($2788){label=800;break;}else{label=796;break;}
 case 796: 
 var $2790=((($2787)-(80))|0);
 HEAP32[(($512)>>2)]=$2790;
 var $2791=((($2787)-(80)+68)|0);
 var $2792=$2791;
 var $2793=HEAP8[(($2792)>>0)];
 var $2794=$2793&1;
 var $2795=(($2794<<24)>>24)==0;
 if($2795){label=798;break;}else{label=797;break;}
 case 797: 
 var $2797=((($2787)-(80)+76)|0);
 var $2798=HEAP32[(($2797)>>2)];
 _free($2798);
 label=798;break;
 case 798: 
 var $2799=((($2787)-(80)+4)|0);
 var $2800=$2799;
 var $2801=HEAP8[(($2800)>>0)];
 var $2802=$2801&1;
 var $2803=(($2802<<24)>>24)==0;
 if($2803){var $2787=$2790;label=795;break;}else{label=799;break;}
 case 799: 
 var $2805=((($2787)-(80)+12)|0);
 var $2806=HEAP32[(($2805)>>2)];
 _free($2806);
 var $2787=$2790;label=795;break;
 case 800: 
 _memset($696, 0, 80)|0;
 var $storemerge_i_i233=0;label=801;break;
 case 801: 
 var $storemerge_i_i233;
 var $2808=($storemerge_i_i233>>>0)<3;
 if($2808){label=802;break;}else{var $storemerge1_i_i=0;label=803;break;}
 case 802: 
 var $2810=(($711+($storemerge_i_i233<<2))|0);
 HEAP32[(($2810)>>2)]=0;
 var $2811=((($storemerge_i_i233)+(1))|0);
 var $storemerge_i_i233=$2811;label=801;break;
 case 803: 
 var $storemerge1_i_i;
 var $2812=($storemerge1_i_i>>>0)<3;
 if($2812){label=804;break;}else{label=805;break;}
 case 804: 
 var $2814=(($713+($storemerge1_i_i<<2))|0);
 HEAP32[(($2814)>>2)]=0;
 var $2815=((($storemerge1_i_i)+(1))|0);
 var $storemerge1_i_i=$2815;label=803;break;
 case 805: 
 HEAP32[(($714)>>2)]=-1;
 var $first_i_0=1;label=806;break;
 case 806: 
 var $first_i_0;
 var $2816=HEAP32[(($702)>>2)];
 var $2817=((($2816)-(12))|0);
 var $2818=$2817;
 var $2819=HEAP32[(($2818)>>2)];
 var $_sum3_i234=((($2819)+(16))|0);
 var $2820=(($693+$_sum3_i234)|0);
 var $2821=$2820;
 var $2822=HEAP32[(($2821)>>2)];
 var $2823=$2822&2;
 var $2824=($2823|0)==0;
 if($2824){label=807;break;}else{label=1004;break;}
 case 807: 
 var $2826=HEAP32[(($706)>>2)];
 label=808;break;
 case 808: 
 var $2827=HEAP32[(($707)>>2)];
 var $2828=($2826|0)==($2827|0);
 if($2828){label=811;break;}else{label=809;break;}
 case 809: 
 var $2830=((($2827)-(12))|0);
 HEAP32[(($707)>>2)]=$2830;
 var $2831=$2830;
 var $2832=HEAP8[(($2831)>>0)];
 var $2833=$2832&1;
 var $2834=(($2833<<24)>>24)==0;
 if($2834){label=808;break;}else{label=810;break;}
 case 810: 
 var $2836=((($2827)-(12)+8)|0);
 var $2837=HEAP32[(($2836)>>2)];
 _free($2837);
 label=808;break;
 case 811: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterOBJI6MyMeshE16TokenizeNextLineERNSt3__114basic_ifstreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEEPNSB_INS_6Color4IhEENSD_ISK_EEEE($stream_i223,$tokens_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=812;break; } else { label=855;break; }
 case 812: 
 var $2839=HEAP32[(($707)>>2)];
 var $2840=HEAP32[(($706)>>2)];
 var $2841=($2839|0)==($2840|0);
 if($2841){var $first_i_0=$first_i_0;label=806;break;}else{label=813;break;}
 case 813: 
 var $2843=HEAP8[(($695)>>0)];
 var $2844=$2843&1;
 var $2845=(($2844<<24)>>24)==0;
 if($2845){label=815;break;}else{label=814;break;}
 case 814: 
 var $2847=HEAP32[(($852)>>2)];
 HEAP8[(($2847)>>0)]=0;
 HEAP32[(($853)>>2)]=0;
 var $_pre657=HEAP32[(($706)>>2)];
 var $2849=$_pre657;label=816;break;
 case 815: 
 HEAP8[(($716)>>0)]=0;
 HEAP8[(($695)>>0)]=0;
 var $2849=$2840;label=816;break;
 case 816: 
 var $2849;
 var $2850=($header_i|0)==($2849|0);
 if($2850){label=821;break;}else{label=817;break;}
 case 817: 
 var $2852=$2849;
 var $2853=HEAP8[(($2852)>>0)];
 var $2854=$2853&1;
 var $2855=(($2854<<24)>>24)==0;
 if($2855){label=819;break;}else{label=818;break;}
 case 818: 
 var $2857=(($2849+8)|0);
 var $2858=HEAP32[(($2857)>>2)];
 var $2859=(($2849+4)|0);
 var $2860=HEAP32[(($2859)>>2)];
 var $2867=$2860;var $2866=$2858;label=820;break;
 case 819: 
 var $2862=$2849;
 var $2863=(($2862+1)|0);
 var $2864=($2853&255);
 var $2865=$2864>>>1;
 var $2867=$2865;var $2866=$2863;label=820;break;
 case 820: 
 var $2866;
 var $2867;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($header_i,$2866,$2867) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=821;break; } else { label=855;break; }
 case 821: 
 var $2868=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1696);
 var $2869=($2868|0)==0;
 if($2869){label=822;break;}else{label=865;break;}
 case 822: 
 var $2871=$first_i_0&1;
 var $2872=(($2871<<24)>>24)==0;
 if($2872){label=823;break;}else{var $first_i_1=0;label=859;break;}
 case 823: 
 var $2874=HEAP32[(($512)>>2)];
 var $2875=HEAP32[(($513)>>2)];
 var $2876=($2874|0)==($2875|0);
 if($2876){label=827;break;}else{label=824;break;}
 case 824: 
 var $2878=($2874|0)==0;
 if($2878){label=826;break;}else{label=825;break;}
 case 825: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8MaterialC2ERKS2_($2874,$currentMaterial_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=826;break; } else { label=855;break; }
 case 826: 
 var $2880=(($2874+80)|0);
 HEAP32[(($512)>>2)]=$2880;
 label=828;break;
 case 827: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io8MaterialENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($materials,$currentMaterial_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=828;break; } else { label=855;break; }
 case 828: 
 _memset($697, 0, 80)|0;
 var $storemerge_i13_i=0;label=829;break;
 case 829: 
 var $storemerge_i13_i;
 var $2883=($storemerge_i13_i>>>0)<3;
 if($2883){label=830;break;}else{var $storemerge1_i15_i=0;label=831;break;}
 case 830: 
 var $2885=(($718+($storemerge_i13_i<<2))|0);
 HEAP32[(($2885)>>2)]=0;
 var $2886=((($storemerge_i13_i)+(1))|0);
 var $storemerge_i13_i=$2886;label=829;break;
 case 831: 
 var $storemerge1_i15_i;
 var $2887=($storemerge1_i15_i>>>0)<3;
 if($2887){label=832;break;}else{label=833;break;}
 case 832: 
 var $2889=(($720+($storemerge1_i15_i<<2))|0);
 HEAP32[(($2889)>>2)]=0;
 var $2890=((($storemerge1_i15_i)+(1))|0);
 var $storemerge1_i15_i=$2890;label=831;break;
 case 833: 
 var $2891=HEAP32[(($721)>>2)];
 HEAP32[(($714)>>2)]=$2891;
 var $2892=HEAP8[(($722)>>0)];
 var $2893=$2892&1;
 var $2894=(($2893<<24)>>24)==0;
 if($2894){label=835;break;}else{label=834;break;}
 case 834: 
 var $2896=HEAP32[(($759)>>2)];
 HEAP8[(($2896)>>0)]=0;
 HEAP32[(($760)>>2)]=0;
 label=836;break;
 case 835: 
 HEAP8[(($724)>>0)]=0;
 HEAP8[(($722)>>0)]=0;
 label=836;break;
 case 836: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($710,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=838;break; } else { label=837;break; }
 case 837: 
 var $2899$0 = ___cxa_find_matching_catch(0); var $2899$1 = tempRet0;
 var $2900=$2899$0;
 ___clang_call_terminate($2900);
 throw "Reached an unreachable!";
 case 838: 
 assert(12 % 1 === 0);HEAP32[(($722)>>2)]=HEAP32[(($725)>>2)];HEAP32[((($722)+(4))>>2)]=HEAP32[((($725)+(4))>>2)];HEAP32[((($722)+(8))>>2)]=HEAP32[((($725)+(8))>>2)];
 var $storemerge_i23_i=0;label=839;break;
 case 839: 
 var $storemerge_i23_i;
 var $2902=($storemerge_i23_i>>>0)<3;
 if($2902){label=840;break;}else{label=841;break;}
 case 840: 
 var $2904=(($718+($storemerge_i23_i<<2))|0);
 HEAP32[(($2904)>>2)]=0;
 var $2905=((($storemerge_i23_i)+(1))|0);
 var $storemerge_i23_i=$2905;label=839;break;
 case 841: 
 var $2906=HEAPF32[(($726)>>2)];
 HEAPF32[(($727)>>2)]=$2906;
 var $2907=HEAPF32[(($728)>>2)];
 HEAPF32[(($729)>>2)]=$2907;
 var $2908=HEAPF32[(($730)>>2)];
 HEAPF32[(($731)>>2)]=$2908;
 var $2909=HEAPF32[(($732)>>2)];
 HEAPF32[(($733)>>2)]=$2909;
 var $2910=HEAPF32[(($734)>>2)];
 HEAPF32[(($735)>>2)]=$2910;
 var $2911=HEAPF32[(($736)>>2)];
 HEAPF32[(($737)>>2)]=$2911;
 var $2912=HEAPF32[(($738)>>2)];
 HEAPF32[(($739)>>2)]=$2912;
 var $2913=HEAPF32[(($740)>>2)];
 HEAPF32[(($741)>>2)]=$2913;
 var $2914=HEAPF32[(($742)>>2)];
 HEAPF32[(($743)>>2)]=$2914;
 assert(16 % 1 === 0);HEAP32[(($746)>>2)]=HEAP32[(($747)>>2)];HEAP32[((($746)+(4))>>2)]=HEAP32[((($747)+(4))>>2)];HEAP32[((($746)+(8))>>2)]=HEAP32[((($747)+(8))>>2)];HEAP32[((($746)+(12))>>2)]=HEAP32[((($747)+(12))>>2)];
 var $2915=HEAP8[(($750)>>0)];
 var $2916=$2915&1;
 var $2917=(($2916<<24)>>24)==0;
 if($2917){label=843;break;}else{label=842;break;}
 case 842: 
 var $2919=HEAP32[(($757)>>2)];
 HEAP8[(($2919)>>0)]=0;
 HEAP32[(($758)>>2)]=0;
 label=844;break;
 case 843: 
 HEAP8[(($752)>>0)]=0;
 HEAP8[(($750)>>0)]=0;
 label=844;break;
 case 844: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($748,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=846;break; } else { label=845;break; }
 case 845: 
 var $2922$0 = ___cxa_find_matching_catch(0); var $2922$1 = tempRet0;
 var $2923=$2922$0;
 ___clang_call_terminate($2923);
 throw "Reached an unreachable!";
 case 846: 
 assert(12 % 1 === 0);HEAP32[(($750)>>2)]=HEAP32[(($753)>>2)];HEAP32[((($750)+(4))>>2)]=HEAP32[((($753)+(4))>>2)];HEAP32[((($750)+(8))>>2)]=HEAP32[((($753)+(8))>>2)];
 var $storemerge1_i24_i=0;label=847;break;
 case 847: 
 var $storemerge1_i24_i;
 var $2925=($storemerge1_i24_i>>>0)<3;
 if($2925){label=848;break;}else{label=849;break;}
 case 848: 
 var $2927=(($754+($storemerge1_i24_i<<2))|0);
 HEAP32[(($2927)>>2)]=0;
 var $2928=((($storemerge1_i24_i)+(1))|0);
 var $storemerge1_i24_i=$2928;label=847;break;
 case 849: 
 var $2929=HEAP8[(($753)>>0)];
 var $2930=$2929&1;
 var $2931=(($2930<<24)>>24)==0;
 if($2931){label=851;break;}else{label=850;break;}
 case 850: 
 var $2933=HEAP32[(($756)>>2)];
 _free($2933);
 label=851;break;
 case 851: 
 var $2934=HEAP8[(($725)>>0)];
 var $2935=$2934&1;
 var $2936=(($2935<<24)>>24)==0;
 if($2936){label=853;break;}else{label=852;break;}
 case 852: 
 var $2938=HEAP32[(($755)>>2)];
 _free($2938);
 label=853;break;
 case 853: 
 HEAP32[(($714)>>2)]=-1;
 var $first_i_1=$first_i_0;label=859;break;
 case 854: 
 var $lpad_loopexit527$0 = ___cxa_find_matching_catch(); var $lpad_loopexit527$1 = tempRet0;
 var $lpad_phi529$1=$lpad_loopexit527$1;var $lpad_phi529$0=$lpad_loopexit527$0;label=858;break;
 case 855: 
 var $lpad_loopexit535$0 = ___cxa_find_matching_catch(); var $lpad_loopexit535$1 = tempRet0;
 var $lpad_phi529$1=$lpad_loopexit535$1;var $lpad_phi529$0=$lpad_loopexit535$0;label=858;break;
 case 856: 
 var $lpad_loopexit592$0 = ___cxa_find_matching_catch(); var $lpad_loopexit592$1 = tempRet0;
 var $lpad_phi529$1=$lpad_loopexit592$1;var $lpad_phi529$0=$lpad_loopexit592$0;label=858;break;
 case 857: 
 var $lpad_nonloopexit593$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit593$1 = tempRet0;
 var $lpad_phi529$1=$lpad_nonloopexit593$1;var $lpad_phi529$0=$lpad_nonloopexit593$0;label=858;break;
 case 858: 
 var $lpad_phi529$0;
 var $lpad_phi529$1;
 var $2939=$lpad_phi529$0;
 var $2940=$lpad_phi529$1;
 var $_0447=$2939;var $_0448=$2940;label=1023;break;
 case 859: 
 var $first_i_1;
 var $2942=HEAP32[(($707)>>2)];
 var $2943=HEAP32[(($706)>>2)];
 var $2944=$2942;
 var $2945=$2943;
 var $2946=((($2944)-($2945))|0);
 var $2947=(((($2946|0))/(12))&-1);
 var $2948=($2947>>>0)<2;
 if($2948){var $_0446=0;label=1012;break;}else{label=860;break;}
 case 860: 
 var $2950=(($2943+12)|0);
 var $2951=($710|0)==($2950|0);
 if($2951){var $first_i_0=$first_i_1;label=806;break;}else{label=861;break;}
 case 861: 
 var $2953=$2950;
 var $2954=HEAP8[(($2953)>>0)];
 var $2955=$2954&1;
 var $2956=(($2955<<24)>>24)==0;
 if($2956){label=863;break;}else{label=862;break;}
 case 862: 
 var $2958=(($2943+20)|0);
 var $2959=HEAP32[(($2958)>>2)];
 var $2960=(($2943+16)|0);
 var $2961=HEAP32[(($2960)>>2)];
 var $2968=$2961;var $2967=$2959;label=864;break;
 case 863: 
 var $2963=$2950;
 var $2964=(($2963+1)|0);
 var $2965=($2954&255);
 var $2966=$2965>>>1;
 var $2968=$2966;var $2967=$2964;label=864;break;
 case 864: 
 var $2967;
 var $2968;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($710,$2967,$2968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $first_i_0=$first_i_1;label=806;break; } else { label=855;break; }
 case 865: 
 var $2970=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1664);
 var $2971=($2970|0)==0;
 if($2971){label=866;break;}else{label=877;break;}
 case 866: 
 var $2973=HEAP32[(($707)>>2)];
 var $2974=HEAP32[(($706)>>2)];
 var $2975=$2973;
 var $2976=$2974;
 var $2977=((($2975)-($2976))|0);
 var $2978=(((($2977|0))/(12))&-1);
 var $2979=($2978>>>0)<4;
 if($2979){var $_0446=0;label=1012;break;}else{label=867;break;}
 case 867: 
 var $2981=(($2974+12)|0);
 var $2982=$2981;
 var $2983=HEAP8[(($2982)>>0)];
 var $2984=$2983&1;
 var $2985=(($2984<<24)>>24)==0;
 if($2985){label=869;break;}else{label=868;break;}
 case 868: 
 var $2987=(($2974+20)|0);
 var $2988=HEAP32[(($2987)>>2)];
 var $2992=$2988;label=870;break;
 case 869: 
 var $2990=$2981;
 var $2991=(($2990+1)|0);
 var $2992=$2991;label=870;break;
 case 870: 
 var $2992;
 var $$etemp$47$0=112;
 var $$etemp$47$1=0;

 _memset($761, 0, 108)|0;
 HEAP32[(($762)>>2)]=$2992;
 HEAP32[(($763)>>2)]=-1;
 HEAP32[(($764)>>2)]=$2992;
 HEAP32[(($765)>>2)]=-1;
 HEAP32[(($766)>>2)]=0;
 var $2993=$2992;
 var $2994=$2993^-1;
 HEAP32[(($767)>>2)]=$2994;
 HEAP32[(($768)>>2)]=-1;
 var $2995=___floatscan($f_i_i_i_i,1,1);
 var $$etemp$48$0=112;
 var $$etemp$48$1=0;

 var $2996=$2995;
 var $2997=HEAP32[(($706)>>2)];
 var $2998=(($2997+24)|0);
 var $2999=$2998;
 var $3000=HEAP8[(($2999)>>0)];
 var $3001=$3000&1;
 var $3002=(($3001<<24)>>24)==0;
 if($3002){label=872;break;}else{label=871;break;}
 case 871: 
 var $3004=(($2997+32)|0);
 var $3005=HEAP32[(($3004)>>2)];
 var $3009=$3005;label=873;break;
 case 872: 
 var $3007=$2998;
 var $3008=(($3007+1)|0);
 var $3009=$3008;label=873;break;
 case 873: 
 var $3009;
 var $$etemp$49$0=112;
 var $$etemp$49$1=0;

 _memset($769, 0, 108)|0;
 HEAP32[(($770)>>2)]=$3009;
 HEAP32[(($771)>>2)]=-1;
 HEAP32[(($772)>>2)]=$3009;
 HEAP32[(($773)>>2)]=-1;
 HEAP32[(($774)>>2)]=0;
 var $3010=$3009;
 var $3011=$3010^-1;
 HEAP32[(($775)>>2)]=$3011;
 HEAP32[(($776)>>2)]=-1;
 var $3012=___floatscan($f_i_i_i34_i,1,1);
 var $$etemp$50$0=112;
 var $$etemp$50$1=0;

 var $3013=$3012;
 var $3014=HEAP32[(($706)>>2)];
 var $3015=(($3014+36)|0);
 var $3016=$3015;
 var $3017=HEAP8[(($3016)>>0)];
 var $3018=$3017&1;
 var $3019=(($3018<<24)>>24)==0;
 if($3019){label=875;break;}else{label=874;break;}
 case 874: 
 var $3021=(($3014+44)|0);
 var $3022=HEAP32[(($3021)>>2)];
 var $3026=$3022;label=876;break;
 case 875: 
 var $3024=$3015;
 var $3025=(($3024+1)|0);
 var $3026=$3025;label=876;break;
 case 876: 
 var $3026;
 var $$etemp$51$0=112;
 var $$etemp$51$1=0;

 _memset($777, 0, 108)|0;
 HEAP32[(($778)>>2)]=$3026;
 HEAP32[(($779)>>2)]=-1;
 HEAP32[(($780)>>2)]=$3026;
 HEAP32[(($781)>>2)]=-1;
 HEAP32[(($782)>>2)]=0;
 var $3027=$3026;
 var $3028=$3027^-1;
 HEAP32[(($783)>>2)]=$3028;
 HEAP32[(($784)>>2)]=-1;
 var $3029=___floatscan($f_i_i_i35_i,1,1);
 var $$etemp$52$0=112;
 var $$etemp$52$1=0;

 var $3030=$3029;
 HEAPF32[(($727)>>2)]=$2996;
 HEAPF32[(($729)>>2)]=$3013;
 HEAPF32[(($731)>>2)]=$3030;
 var $first_i_0=$first_i_0;label=806;break;
 case 877: 
 var $3032=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1624);
 var $3033=($3032|0)==0;
 if($3033){label=878;break;}else{label=889;break;}
 case 878: 
 var $3035=HEAP32[(($707)>>2)];
 var $3036=HEAP32[(($706)>>2)];
 var $3037=$3035;
 var $3038=$3036;
 var $3039=((($3037)-($3038))|0);
 var $3040=(((($3039|0))/(12))&-1);
 var $3041=($3040>>>0)<4;
 if($3041){var $_0446=0;label=1012;break;}else{label=879;break;}
 case 879: 
 var $3043=(($3036+12)|0);
 var $3044=$3043;
 var $3045=HEAP8[(($3044)>>0)];
 var $3046=$3045&1;
 var $3047=(($3046<<24)>>24)==0;
 if($3047){label=881;break;}else{label=880;break;}
 case 880: 
 var $3049=(($3036+20)|0);
 var $3050=HEAP32[(($3049)>>2)];
 var $3054=$3050;label=882;break;
 case 881: 
 var $3052=$3043;
 var $3053=(($3052+1)|0);
 var $3054=$3053;label=882;break;
 case 882: 
 var $3054;
 var $$etemp$53$0=112;
 var $$etemp$53$1=0;

 _memset($785, 0, 108)|0;
 HEAP32[(($786)>>2)]=$3054;
 HEAP32[(($787)>>2)]=-1;
 HEAP32[(($788)>>2)]=$3054;
 HEAP32[(($789)>>2)]=-1;
 HEAP32[(($790)>>2)]=0;
 var $3055=$3054;
 var $3056=$3055^-1;
 HEAP32[(($791)>>2)]=$3056;
 HEAP32[(($792)>>2)]=-1;
 var $3057=___floatscan($f_i_i_i36_i,1,1);
 var $$etemp$54$0=112;
 var $$etemp$54$1=0;

 var $3058=$3057;
 var $3059=HEAP32[(($706)>>2)];
 var $3060=(($3059+24)|0);
 var $3061=$3060;
 var $3062=HEAP8[(($3061)>>0)];
 var $3063=$3062&1;
 var $3064=(($3063<<24)>>24)==0;
 if($3064){label=884;break;}else{label=883;break;}
 case 883: 
 var $3066=(($3059+32)|0);
 var $3067=HEAP32[(($3066)>>2)];
 var $3071=$3067;label=885;break;
 case 884: 
 var $3069=$3060;
 var $3070=(($3069+1)|0);
 var $3071=$3070;label=885;break;
 case 885: 
 var $3071;
 var $$etemp$55$0=112;
 var $$etemp$55$1=0;

 _memset($793, 0, 108)|0;
 HEAP32[(($794)>>2)]=$3071;
 HEAP32[(($795)>>2)]=-1;
 HEAP32[(($796)>>2)]=$3071;
 HEAP32[(($797)>>2)]=-1;
 HEAP32[(($798)>>2)]=0;
 var $3072=$3071;
 var $3073=$3072^-1;
 HEAP32[(($799)>>2)]=$3073;
 HEAP32[(($800)>>2)]=-1;
 var $3074=___floatscan($f_i_i_i37_i,1,1);
 var $$etemp$56$0=112;
 var $$etemp$56$1=0;

 var $3075=$3074;
 var $3076=HEAP32[(($706)>>2)];
 var $3077=(($3076+36)|0);
 var $3078=$3077;
 var $3079=HEAP8[(($3078)>>0)];
 var $3080=$3079&1;
 var $3081=(($3080<<24)>>24)==0;
 if($3081){label=887;break;}else{label=886;break;}
 case 886: 
 var $3083=(($3076+44)|0);
 var $3084=HEAP32[(($3083)>>2)];
 var $3088=$3084;label=888;break;
 case 887: 
 var $3086=$3077;
 var $3087=(($3086+1)|0);
 var $3088=$3087;label=888;break;
 case 888: 
 var $3088;
 var $$etemp$57$0=112;
 var $$etemp$57$1=0;

 _memset($801, 0, 108)|0;
 HEAP32[(($802)>>2)]=$3088;
 HEAP32[(($803)>>2)]=-1;
 HEAP32[(($804)>>2)]=$3088;
 HEAP32[(($805)>>2)]=-1;
 HEAP32[(($806)>>2)]=0;
 var $3089=$3088;
 var $3090=$3089^-1;
 HEAP32[(($807)>>2)]=$3090;
 HEAP32[(($808)>>2)]=-1;
 var $3091=___floatscan($f_i_i_i38_i,1,1);
 var $$etemp$58$0=112;
 var $$etemp$58$1=0;

 var $3092=$3091;
 HEAPF32[(($733)>>2)]=$3058;
 HEAPF32[(($735)>>2)]=$3075;
 HEAPF32[(($737)>>2)]=$3092;
 var $first_i_0=$first_i_0;label=806;break;
 case 889: 
 var $3094=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1576);
 var $3095=($3094|0)==0;
 if($3095){label=890;break;}else{label=901;break;}
 case 890: 
 var $3097=HEAP32[(($707)>>2)];
 var $3098=HEAP32[(($706)>>2)];
 var $3099=$3097;
 var $3100=$3098;
 var $3101=((($3099)-($3100))|0);
 var $3102=(((($3101|0))/(12))&-1);
 var $3103=($3102>>>0)<4;
 if($3103){var $_0446=0;label=1012;break;}else{label=891;break;}
 case 891: 
 var $3105=(($3098+12)|0);
 var $3106=$3105;
 var $3107=HEAP8[(($3106)>>0)];
 var $3108=$3107&1;
 var $3109=(($3108<<24)>>24)==0;
 if($3109){label=893;break;}else{label=892;break;}
 case 892: 
 var $3111=(($3098+20)|0);
 var $3112=HEAP32[(($3111)>>2)];
 var $3116=$3112;label=894;break;
 case 893: 
 var $3114=$3105;
 var $3115=(($3114+1)|0);
 var $3116=$3115;label=894;break;
 case 894: 
 var $3116;
 var $$etemp$59$0=112;
 var $$etemp$59$1=0;

 _memset($809, 0, 108)|0;
 HEAP32[(($810)>>2)]=$3116;
 HEAP32[(($811)>>2)]=-1;
 HEAP32[(($812)>>2)]=$3116;
 HEAP32[(($813)>>2)]=-1;
 HEAP32[(($814)>>2)]=0;
 var $3117=$3116;
 var $3118=$3117^-1;
 HEAP32[(($815)>>2)]=$3118;
 HEAP32[(($816)>>2)]=-1;
 var $3119=___floatscan($f_i_i_i39_i,1,1);
 var $$etemp$60$0=112;
 var $$etemp$60$1=0;

 var $3120=$3119;
 var $3121=HEAP32[(($706)>>2)];
 var $3122=(($3121+24)|0);
 var $3123=$3122;
 var $3124=HEAP8[(($3123)>>0)];
 var $3125=$3124&1;
 var $3126=(($3125<<24)>>24)==0;
 if($3126){label=896;break;}else{label=895;break;}
 case 895: 
 var $3128=(($3121+32)|0);
 var $3129=HEAP32[(($3128)>>2)];
 var $3133=$3129;label=897;break;
 case 896: 
 var $3131=$3122;
 var $3132=(($3131+1)|0);
 var $3133=$3132;label=897;break;
 case 897: 
 var $3133;
 var $$etemp$61$0=112;
 var $$etemp$61$1=0;

 _memset($817, 0, 108)|0;
 HEAP32[(($818)>>2)]=$3133;
 HEAP32[(($819)>>2)]=-1;
 HEAP32[(($820)>>2)]=$3133;
 HEAP32[(($821)>>2)]=-1;
 HEAP32[(($822)>>2)]=0;
 var $3134=$3133;
 var $3135=$3134^-1;
 HEAP32[(($823)>>2)]=$3135;
 HEAP32[(($824)>>2)]=-1;
 var $3136=___floatscan($f_i_i_i40_i,1,1);
 var $$etemp$62$0=112;
 var $$etemp$62$1=0;

 var $3137=$3136;
 var $3138=HEAP32[(($706)>>2)];
 var $3139=(($3138+36)|0);
 var $3140=$3139;
 var $3141=HEAP8[(($3140)>>0)];
 var $3142=$3141&1;
 var $3143=(($3142<<24)>>24)==0;
 if($3143){label=899;break;}else{label=898;break;}
 case 898: 
 var $3145=(($3138+44)|0);
 var $3146=HEAP32[(($3145)>>2)];
 var $3150=$3146;label=900;break;
 case 899: 
 var $3148=$3139;
 var $3149=(($3148+1)|0);
 var $3150=$3149;label=900;break;
 case 900: 
 var $3150;
 var $$etemp$63$0=112;
 var $$etemp$63$1=0;

 _memset($825, 0, 108)|0;
 HEAP32[(($826)>>2)]=$3150;
 HEAP32[(($827)>>2)]=-1;
 HEAP32[(($828)>>2)]=$3150;
 HEAP32[(($829)>>2)]=-1;
 HEAP32[(($830)>>2)]=0;
 var $3151=$3150;
 var $3152=$3151^-1;
 HEAP32[(($831)>>2)]=$3152;
 HEAP32[(($832)>>2)]=-1;
 var $3153=___floatscan($f_i_i_i41_i,1,1);
 var $$etemp$64$0=112;
 var $$etemp$64$1=0;

 var $3154=$3153;
 HEAPF32[(($739)>>2)]=$3120;
 HEAPF32[(($741)>>2)]=$3137;
 HEAPF32[(($743)>>2)]=$3154;
 var $first_i_0=$first_i_0;label=806;break;
 case 901: 
 var $3156=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,3544);
 var $3157=($3156|0)==0;
 if($3157){label=903;break;}else{label=902;break;}
 case 902: 
 var $3159=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1512);
 var $3160=($3159|0)==0;
 if($3160){label=903;break;}else{label=908;break;}
 case 903: 
 var $3162=HEAP32[(($707)>>2)];
 var $3163=HEAP32[(($706)>>2)];
 var $3164=$3162;
 var $3165=$3163;
 var $3166=((($3164)-($3165))|0);
 var $3167=(((($3166|0))/(12))&-1);
 var $3168=($3167>>>0)<2;
 if($3168){var $_0446=0;label=1012;break;}else{label=904;break;}
 case 904: 
 var $3170=(($3163+12)|0);
 var $3171=$3170;
 var $3172=HEAP8[(($3171)>>0)];
 var $3173=$3172&1;
 var $3174=(($3173<<24)>>24)==0;
 if($3174){label=906;break;}else{label=905;break;}
 case 905: 
 var $3176=(($3163+20)|0);
 var $3177=HEAP32[(($3176)>>2)];
 var $3181=$3177;label=907;break;
 case 906: 
 var $3179=$3170;
 var $3180=(($3179+1)|0);
 var $3181=$3180;label=907;break;
 case 907: 
 var $3181;
 var $$etemp$65$0=112;
 var $$etemp$65$1=0;

 _memset($833, 0, 108)|0;
 HEAP32[(($834)>>2)]=$3181;
 HEAP32[(($835)>>2)]=-1;
 HEAP32[(($836)>>2)]=$3181;
 HEAP32[(($837)>>2)]=-1;
 HEAP32[(($838)>>2)]=0;
 var $3182=$3181;
 var $3183=$3182^-1;
 HEAP32[(($839)>>2)]=$3183;
 HEAP32[(($840)>>2)]=-1;
 var $3184=___floatscan($f_i_i_i42_i,1,1);
 var $$etemp$66$0=112;
 var $$etemp$66$1=0;

 var $3185=$3184;
 HEAPF32[(($841)>>2)]=$3185;
 var $first_i_0=$first_i_0;label=806;break;
 case 908: 
 var $3187=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1480);
 var $3188=($3187|0)==0;
 if($3188){label=909;break;}else{label=922;break;}
 case 909: 
 var $3190=HEAP32[(($707)>>2)];
 var $3191=HEAP32[(($706)>>2)];
 var $3192=$3190;
 var $3193=$3191;
 var $3194=((($3192)-($3193))|0);
 var $3195=(((($3194|0))/(12))&-1);
 var $3196=($3195>>>0)<2;
 if($3196){var $_0446=0;label=1012;break;}else{label=910;break;}
 case 910: 
 var $3198=(($3191+12)|0);
 var $3199=$3198;
 var $3200=HEAP8[(($3199)>>0)];
 var $3201=$3200&1;
 var $3202=(($3201<<24)>>24)==0;
 if($3202){label=912;break;}else{label=911;break;}
 case 911: 
 var $3204=(($3191+20)|0);
 var $3205=HEAP32[(($3204)>>2)];
 var $_0_i_i240=$3205;label=913;break;
 case 912: 
 var $3207=$3198;
 var $3208=(($3207+1)|0);
 var $_0_i_i240=$3208;label=913;break;
 case 913: 
 var $_0_i_i240;
 var $3209=HEAP8[(($_0_i_i240)>>0)];
 var $3210=(($3209<<24)>>24)==32;
 if($3210){label=914;break;}else{label=915;break;}
 case 914: 
 var $3211=(($_0_i_i240+1)|0);
 var $_0_i_i240=$3211;label=913;break;
 case 915: 
 var $3212=(($3209<<24)>>24);
 var $3213=((($3212)-(9))|0);
 var $phitmp404=($3213>>>0)>4;
 var $3214=(($_0_i_i240+1)|0);
 if($phitmp404){label=916;break;}else{var $_0_i_i240=$3214;label=913;break;}
 case 916: 
 if(($3212|0)==45){ label=917;break;}else if(($3212|0)==43){ var $neg_0_i_i243=0;label=918;break;}else{var $neg_1_ph_i_i246=0;var $_1_ph_i_i245=$_0_i_i240;var $3218=$3209;label=919;break;}
 case 917: 
 var $neg_0_i_i243=1;label=918;break;
 case 918: 
 var $neg_0_i_i243;
 var $_pre_i_i244=HEAP8[(($3214)>>0)];
 var $neg_1_ph_i_i246=$neg_0_i_i243;var $_1_ph_i_i245=$3214;var $3218=$_pre_i_i244;label=919;break;
 case 919: 
 var $3218;
 var $_1_ph_i_i245;
 var $neg_1_ph_i_i246;
 var $3219=(($3218<<24)>>24);
 var $3220=((($3219)-(48))|0);
 var $3221=($3220>>>0)<10;
 if($3221){var $_12_i_i249=$_1_ph_i_i245;var $n_03_i_i248=0;var $3222=$3218;label=920;break;}else{var $n_0_lcssa_i_i252=0;label=921;break;}
 case 920: 
 var $3222;
 var $n_03_i_i248;
 var $_12_i_i249;
 var $3223=((($n_03_i_i248)*(10))&-1);
 var $3224=(($_12_i_i249+1)|0);
 var $3225=(($3222<<24)>>24);
 var $_neg1_i_i250=((($3223)+(48))|0);
 var $3226=((($_neg1_i_i250)-($3225))|0);
 var $3227=HEAP8[(($3224)>>0)];
 var $3228=(($3227<<24)>>24);
 var $3229=((($3228)-(48))|0);
 var $3230=($3229>>>0)<10;
 if($3230){var $_12_i_i249=$3224;var $n_03_i_i248=$3226;var $3222=$3227;label=920;break;}else{var $n_0_lcssa_i_i252=$3226;label=921;break;}
 case 921: 
 var $n_0_lcssa_i_i252;
 var $3231=($neg_1_ph_i_i246|0)!=0;
 var $3232=(((-$n_0_lcssa_i_i252))|0);
 var $3233=($3231?$n_0_lcssa_i_i252:$3232);
 var $3234=($3233|0);
 HEAPF32[(($842)>>2)]=$3234;
 var $first_i_0=$first_i_0;label=806;break;
 case 922: 
 var $3236=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1448);
 var $3237=($3236|0)==0;
 if($3237){label=923;break;}else{label=936;break;}
 case 923: 
 var $3239=HEAP32[(($707)>>2)];
 var $3240=HEAP32[(($706)>>2)];
 var $3241=$3239;
 var $3242=$3240;
 var $3243=((($3241)-($3242))|0);
 var $3244=(((($3243|0))/(12))&-1);
 var $3245=($3244>>>0)<2;
 if($3245){var $_0446=0;label=1012;break;}else{label=924;break;}
 case 924: 
 var $3247=(($3240+12)|0);
 var $3248=$3247;
 var $3249=HEAP8[(($3248)>>0)];
 var $3250=$3249&1;
 var $3251=(($3250<<24)>>24)==0;
 if($3251){label=926;break;}else{label=925;break;}
 case 925: 
 var $3253=(($3240+20)|0);
 var $3254=HEAP32[(($3253)>>2)];
 var $_0_i46_i=$3254;label=927;break;
 case 926: 
 var $3256=$3247;
 var $3257=(($3256+1)|0);
 var $_0_i46_i=$3257;label=927;break;
 case 927: 
 var $_0_i46_i;
 var $3258=HEAP8[(($_0_i46_i)>>0)];
 var $3259=(($3258<<24)>>24)==32;
 if($3259){label=928;break;}else{label=929;break;}
 case 928: 
 var $3260=(($_0_i46_i+1)|0);
 var $_0_i46_i=$3260;label=927;break;
 case 929: 
 var $3261=(($3258<<24)>>24);
 var $3262=((($3261)-(9))|0);
 var $phitmp=($3262>>>0)>4;
 var $3263=(($_0_i46_i+1)|0);
 if($phitmp){label=930;break;}else{var $_0_i46_i=$3263;label=927;break;}
 case 930: 
 if(($3261|0)==45){ label=931;break;}else if(($3261|0)==43){ var $neg_0_i49_i=0;label=932;break;}else{var $neg_1_ph_i52_i=0;var $_1_ph_i51_i=$_0_i46_i;var $3267=$3258;label=933;break;}
 case 931: 
 var $neg_0_i49_i=1;label=932;break;
 case 932: 
 var $neg_0_i49_i;
 var $_pre_i50_i=HEAP8[(($3263)>>0)];
 var $neg_1_ph_i52_i=$neg_0_i49_i;var $_1_ph_i51_i=$3263;var $3267=$_pre_i50_i;label=933;break;
 case 933: 
 var $3267;
 var $_1_ph_i51_i;
 var $neg_1_ph_i52_i;
 var $3268=(($3267<<24)>>24);
 var $3269=((($3268)-(48))|0);
 var $3270=($3269>>>0)<10;
 if($3270){var $_12_i55_i=$_1_ph_i51_i;var $n_03_i54_i=0;var $3271=$3267;label=934;break;}else{var $n_0_lcssa_i58_i=0;label=935;break;}
 case 934: 
 var $3271;
 var $n_03_i54_i;
 var $_12_i55_i;
 var $3272=((($n_03_i54_i)*(10))&-1);
 var $3273=(($_12_i55_i+1)|0);
 var $3274=(($3271<<24)>>24);
 var $_neg1_i56_i=((($3272)+(48))|0);
 var $3275=((($_neg1_i56_i)-($3274))|0);
 var $3276=HEAP8[(($3273)>>0)];
 var $3277=(($3276<<24)>>24);
 var $3278=((($3277)-(48))|0);
 var $3279=($3278>>>0)<10;
 if($3279){var $_12_i55_i=$3273;var $n_03_i54_i=$3275;var $3271=$3276;label=934;break;}else{var $n_0_lcssa_i58_i=$3275;label=935;break;}
 case 935: 
 var $n_0_lcssa_i58_i;
 var $3280=($neg_1_ph_i52_i|0)!=0;
 var $3281=(((-$n_0_lcssa_i58_i))|0);
 var $3282=($3280?$n_0_lcssa_i58_i:$3281);
 HEAP32[(($843)>>2)]=$3282;
 var $first_i_0=$first_i_0;label=806;break;
 case 936: 
 var $3284=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1416);
 var $3285=($3284|0)==0;
 if($3285){label=938;break;}else{label=937;break;}
 case 937: 
 var $3287=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header_i,1384);
 var $3288=($3287|0)==0;
 if($3288){label=938;break;}else{var $first_i_0=$first_i_0;label=806;break;}
 case 938: 
 var $3290=HEAP32[(($707)>>2)];
 var $3291=HEAP32[(($706)>>2)];
 var $3292=$3290;
 var $3293=$3291;
 var $3294=((($3292)-($3293))|0);
 var $3295=(((($3294|0))/(12))&-1);
 var $3296=($3295>>>0)<2;
 if($3296){var $_0446=0;label=1012;break;}else{label=939;break;}
 case 939: 
 var $3298=(($3291+12)|0);
 var $3299=$3298;
 var $3300=HEAP8[(($3299)>>0)];
 var $3301=$3300&1;
 var $3302=(($3301<<24)>>24)==0;
 if($3302){label=940;break;}else{label=941;break;}
 case 940: 
 assert(12 % 1 === 0);HEAP32[(($698)>>2)]=HEAP32[(($3299)>>2)];HEAP32[((($698)+(4))>>2)]=HEAP32[((($3299)+(4))>>2)];HEAP32[((($698)+(8))>>2)]=HEAP32[((($3299)+(8))>>2)];
 label=954;break;
 case 941: 
 var $3305=(($3291+20)|0);
 var $3306=HEAP32[(($3305)>>2)];
 var $3307=(($3291+16)|0);
 var $3308=HEAP32[(($3307)>>2)];
 var $3309=($3308>>>0)>4294967279;
 if($3309){label=942;break;}else{label=944;break;}
 case 942: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=943;break; } else { label=857;break; }
 case 943: 
 throw "Reached an unreachable!";
 case 944: 
 var $3312=($3308>>>0)<11;
 if($3312){label=945;break;}else{label=946;break;}
 case 945: 
 var $3314=$3308<<1;
 var $3315=(($3314)&255);
 HEAP8[(($698)>>0)]=$3315;
 var $__p_0_i_i258=$845;label=953;break;
 case 946: 
 var $3316=((($3308)+(16))|0);
 var $3317=$3316&-16;
 var $3318=($3317|0)==0;
 var $_size_i_i254=($3318?1:$3317);
 var $3319=_malloc($_size_i_i254);
 var $3320=($3319|0)==0;
 if($3320){label=947;break;}else{var $_lcssa_i_i256=$3319;label=952;break;}
 case 947: 
 var $3321=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $3322=($3321|0)==0;
 if($3322){label=950;break;}else{label=948;break;}
 case 948: 
 var $3324=$3321;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3324]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=949;break; } else { label=854;break; }
 case 949: 
 var $3325=_malloc($_size_i_i254);
 var $3326=($3325|0)==0;
 if($3326){label=947;break;}else{var $_lcssa_i_i256=$3325;label=952;break;}
 case 950: 
 var $3328=___cxa_allocate_exception(4);
 var $3329=$3328;
 HEAP32[(($3329)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($3328,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=951;break; } else { label=857;break; }
 case 951: 
 throw "Reached an unreachable!";
 case 952: 
 var $_lcssa_i_i256;
 HEAP32[(($848)>>2)]=$_lcssa_i_i256;
 var $3330=$3317|1;
 HEAP32[(($851)>>2)]=$3330;
 HEAP32[(($849)>>2)]=$3308;
 var $__p_0_i_i258=$_lcssa_i_i256;label=953;break;
 case 953: 
 var $__p_0_i_i258;
 assert($3308 % 1 === 0);(_memcpy($__p_0_i_i258, $3306, $3308)|0);
 var $3331=(($__p_0_i_i258+$3308)|0);
 HEAP8[(($3331)>>0)]=0;
 label=954;break;
 case 954: 
 var $3332=HEAP8[(($698)>>0)];
 var $3333=$3332&1;
 var $3334=(($3333<<24)>>24)==0;
 if($3334){label=956;break;}else{label=955;break;}
 case 955: 
 var $3336=HEAP32[(($848)>>2)];
 var $3337=HEAP32[(($849)>>2)];
 var $3342=$3337;var $3341=$3336;label=957;break;
 case 956: 
 var $3339=($3332&255);
 var $3340=$3339>>>1;
 var $3342=$3340;var $3341=$845;label=957;break;
 case 957: 
 var $3341;
 var $3342;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($748,$3341,$3342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=958;break; } else { label=976;break; }
 case 958: 
 var $3343=HEAP32[(($846)>>2)];
 var $3344=HEAP32[(($847)>>2)];
 var $3345=$3343;
 var $3346=$3344;
 var $3347=((($3345)-($3346))|0);
 var $3348=(((($3347|0))/(12))&-1);
 var $storemerge5_i=0;var $found_i_0=0;label=959;break;
 case 959: 
 var $found_i_0;
 var $storemerge5_i;
 var $3350=$found_i_0&1;
 var $3351=(($3350<<24)>>24)==0;
 var $3352=($storemerge5_i>>>0)<($3348>>>0);
 var $or_cond=$3351&$3352;
 if($or_cond){label=960;break;}else{label=981;break;}
 case 960: 
 var $3354=(($3344+((($storemerge5_i)*(12))&-1))|0);
 if($3334){label=962;break;}else{label=961;break;}
 case 961: 
 var $3356=HEAP32[(($849)>>2)];
 var $3360=$3356;label=963;break;
 case 962: 
 var $3358=($3332&255);
 var $3359=$3358>>>1;
 var $3360=$3359;label=963;break;
 case 963: 
 var $3360;
 var $3361=$3354;
 var $3362=HEAP8[(($3361)>>0)];
 var $3363=$3362&1;
 var $3364=(($3363<<24)>>24)==0;
 if($3364){label=965;break;}else{label=964;break;}
 case 964: 
 var $3366=(($3344+((($storemerge5_i)*(12))&-1)+4)|0);
 var $3367=HEAP32[(($3366)>>2)];
 var $3371=$3367;label=966;break;
 case 965: 
 var $3369=($3362&255);
 var $3370=$3369>>>1;
 var $3371=$3370;label=966;break;
 case 966: 
 var $3371;
 var $3372=HEAP32[(($848)>>2)];
 var $_714=($3334?$845:$3372);
 if($3364){label=968;break;}else{label=967;break;}
 case 967: 
 var $3374=(($3344+((($storemerge5_i)*(12))&-1)+8)|0);
 var $3375=HEAP32[(($3374)>>2)];
 var $3379=$3375;label=969;break;
 case 968: 
 var $3377=$3354;
 var $3378=(($3377+1)|0);
 var $3379=$3378;label=969;break;
 case 969: 
 var $3379;
 var $3380=($3371>>>0)<($3360>>>0);
 var $_715=($3380?$3371:$3360);
 var $3381=($_715|0)==0;
 if($3381){label=973;break;}else{var $_02_i_i_i=$_715;var $l_03_i_i_i=$_714;var $r_04_i_i_i=$3379;label=970;break;}
 case 970: 
 var $r_04_i_i_i;
 var $l_03_i_i_i;
 var $_02_i_i_i;
 var $3382=HEAP8[(($l_03_i_i_i)>>0)];
 var $3383=HEAP8[(($r_04_i_i_i)>>0)];
 var $3384=(($3382<<24)>>24)==(($3383<<24)>>24);
 if($3384){label=971;break;}else{label=972;break;}
 case 971: 
 var $3386=((($_02_i_i_i)-(1))|0);
 var $3387=(($l_03_i_i_i+1)|0);
 var $3388=(($r_04_i_i_i+1)|0);
 var $3389=($3386|0)==0;
 if($3389){label=973;break;}else{var $_02_i_i_i=$3386;var $l_03_i_i_i=$3387;var $r_04_i_i_i=$3388;label=970;break;}
 case 972: 
 var $3390=(($3382<<24)>>24)!=(($3383<<24)>>24);
 var $3391=($3360>>>0)<($3371>>>0);
 var $or_cond716=$3390|$3391;
 var $brmerge=$or_cond716|$3380;
 if($brmerge){var $found_i_1=$found_i_0;label=980;break;}else{label=974;break;}
 case 973: 
 var $_old=($3360>>>0)<($3371>>>0);
 var $brmerge717=$_old|$3380;
 if($brmerge717){var $found_i_1=$found_i_0;label=980;break;}else{label=974;break;}
 case 974: 
 HEAP32[(($714)>>2)]=$storemerge5_i;
 var $found_i_1=1;label=980;break;
 case 975: 
 var $lpad_loopexit532$0 = ___cxa_find_matching_catch(); var $lpad_loopexit532$1 = tempRet0;
 var $lpad_phi534$1=$lpad_loopexit532$1;var $lpad_phi534$0=$lpad_loopexit532$0;label=978;break;
 case 976: 
 var $lpad_loopexit538$0 = ___cxa_find_matching_catch(); var $lpad_loopexit538$1 = tempRet0;
 var $lpad_phi534$1=$lpad_loopexit538$1;var $lpad_phi534$0=$lpad_loopexit538$0;label=978;break;
 case 977: 
 var $lpad_nonloopexit539$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit539$1 = tempRet0;
 var $lpad_phi534$1=$lpad_nonloopexit539$1;var $lpad_phi534$0=$lpad_nonloopexit539$0;label=978;break;
 case 978: 
 var $lpad_phi534$0;
 var $lpad_phi534$1;
 var $3392=$lpad_phi534$0;
 var $3393=$lpad_phi534$1;
 var $3394=HEAP8[(($698)>>0)];
 var $3395=$3394&1;
 var $3396=(($3395<<24)>>24)==0;
 if($3396){var $_0447=$3392;var $_0448=$3393;label=1023;break;}else{label=979;break;}
 case 979: 
 var $3398=HEAP32[(($848)>>2)];
 _free($3398);
 var $_0447=$3392;var $_0448=$3393;label=1023;break;
 case 980: 
 var $found_i_1;
 var $3399=((($storemerge5_i)+(1))|0);
 var $storemerge5_i=$3399;var $found_i_0=$found_i_1;label=959;break;
 case 981: 
 if($3351){label=982;break;}else{var $3444=$3332;label=1002;break;}
 case 982: 
 var $3401=HEAP32[(($850)>>2)];
 var $3402=($3343|0)==($3401|0);
 if($3402){label=1000;break;}else{label=983;break;}
 case 983: 
 var $3404=($3343|0)==0;
 if($3404){var $_pre658_pre=$3332;label=999;break;}else{label=984;break;}
 case 984: 
 if($3334){label=985;break;}else{label=986;break;}
 case 985: 
 var $3407=$3343;
 assert(12 % 1 === 0);HEAP32[(($3407)>>2)]=HEAP32[(($698)>>2)];HEAP32[((($3407)+(4))>>2)]=HEAP32[((($698)+(4))>>2)];HEAP32[((($3407)+(8))>>2)]=HEAP32[((($698)+(8))>>2)];
 var $_pre658_pre=$3332;label=999;break;
 case 986: 
 var $3409=HEAP32[(($848)>>2)];
 var $3410=HEAP32[(($849)>>2)];
 var $3411=($3410>>>0)>4294967279;
 if($3411){label=987;break;}else{label=989;break;}
 case 987: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=988;break; } else { label=977;break; }
 case 988: 
 throw "Reached an unreachable!";
 case 989: 
 var $3414=($3410>>>0)<11;
 if($3414){label=990;break;}else{label=991;break;}
 case 990: 
 var $3416=$3410<<1;
 var $3417=(($3416)&255);
 var $3418=$3343;
 HEAP8[(($3418)>>0)]=$3417;
 var $3419=$3343;
 var $3420=(($3419+1)|0);
 var $__p_0_i73_i=$3420;label=998;break;
 case 991: 
 var $3421=((($3410)+(16))|0);
 var $3422=$3421&-16;
 var $3423=($3422|0)==0;
 var $_size_i77_i=($3423?1:$3422);
 var $3424=_malloc($_size_i77_i);
 var $3425=($3424|0)==0;
 if($3425){label=992;break;}else{var $_lcssa_i79_i=$3424;label=997;break;}
 case 992: 
 var $3426=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $3427=($3426|0)==0;
 if($3427){label=995;break;}else{label=993;break;}
 case 993: 
 var $3429=$3426;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3429]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=994;break; } else { label=975;break; }
 case 994: 
 var $3430=_malloc($_size_i77_i);
 var $3431=($3430|0)==0;
 if($3431){label=992;break;}else{var $_lcssa_i79_i=$3430;label=997;break;}
 case 995: 
 var $3433=___cxa_allocate_exception(4);
 var $3434=$3433;
 HEAP32[(($3434)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($3433,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=996;break; } else { label=977;break; }
 case 996: 
 throw "Reached an unreachable!";
 case 997: 
 var $_lcssa_i79_i;
 var $3435=(($3343+8)|0);
 HEAP32[(($3435)>>2)]=$_lcssa_i79_i;
 var $3436=$3422|1;
 var $3437=(($3343)|0);
 HEAP32[(($3437)>>2)]=$3436;
 var $3438=(($3343+4)|0);
 HEAP32[(($3438)>>2)]=$3410;
 var $__p_0_i73_i=$_lcssa_i79_i;label=998;break;
 case 998: 
 var $__p_0_i73_i;
 assert($3410 % 1 === 0);(_memcpy($__p_0_i73_i, $3409, $3410)|0);
 var $3439=(($__p_0_i73_i+$3410)|0);
 HEAP8[(($3439)>>0)]=0;
 var $_pre658_pre_pre=HEAP8[(($698)>>0)];
 var $_pre658_pre=$_pre658_pre_pre;label=999;break;
 case 999: 
 var $_pre658_pre;
 var $3440=HEAP32[(($846)>>2)];
 var $3441=(($3440+12)|0);
 HEAP32[(($846)>>2)]=$3441;
 var $_pre658=$_pre658_pre;label=1001;break;
 case 1000: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($692,$textureName_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_pre658=$3332;label=1001;break; } else { label=976;break; }
 case 1001: 
 var $_pre658;
 HEAP32[(($714)>>2)]=$3348;
 var $3444=$_pre658;label=1002;break;
 case 1002: 
 var $3444;
 var $3445=$3444&1;
 var $3446=(($3445<<24)>>24)==0;
 if($3446){var $first_i_0=$first_i_0;label=806;break;}else{label=1003;break;}
 case 1003: 
 var $3448=HEAP32[(($848)>>2)];
 _free($3448);
 var $first_i_0=$first_i_0;label=806;break;
 case 1004: 
 var $3450=HEAP32[(($512)>>2)];
 var $3451=HEAP32[(($513)>>2)];
 var $3452=($3450|0)==($3451|0);
 if($3452){label=1008;break;}else{label=1005;break;}
 case 1005: 
 var $3454=($3450|0)==0;
 if($3454){label=1007;break;}else{label=1006;break;}
 case 1006: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8MaterialC2ERKS2_($3450,$currentMaterial_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1007;break; } else { label=856;break; }
 case 1007: 
 var $3456=(($3450+80)|0);
 HEAP32[(($512)>>2)]=$3456;
 label=1009;break;
 case 1008: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3tri2io8MaterialENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($materials,$currentMaterial_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1009;break; } else { label=856;break; }
 case 1009: 
 var $3458=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($705) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1010;break; } else { label=856;break; }
 case 1010: 
 var $3459=($3458|0)==0;
 if($3459){label=1011;break;}else{var $_0446=1;label=1012;break;}
 case 1011: 
 var $3461=HEAP32[(($702)>>2)];
 var $3462=((($3461)-(12))|0);
 var $3463=$3462;
 var $3464=HEAP32[(($3463)>>2)];
 var $3465=(($693+$3464)|0);
 var $3466=$3465;
 var $_sum4_i264=((($3464)+(16))|0);
 var $3467=(($693+$_sum4_i264)|0);
 var $3468=$3467;
 var $3469=HEAP32[(($3468)>>2)];
 var $3470=$3469|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($3466,$3470) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0446=1;label=1012;break; } else { label=856;break; }
 case 1012: 
 var $_0446;
 var $3471=HEAP8[(($750)>>0)];
 var $3472=$3471&1;
 var $3473=(($3472<<24)>>24)==0;
 if($3473){label=1014;break;}else{label=1013;break;}
 case 1013: 
 var $3475=HEAP32[(($757)>>2)];
 _free($3475);
 label=1014;break;
 case 1014: 
 var $3476=HEAP8[(($722)>>0)];
 var $3477=$3476&1;
 var $3478=(($3477<<24)>>24)==0;
 if($3478){label=1016;break;}else{label=1015;break;}
 case 1015: 
 var $3480=HEAP32[(($759)>>2)];
 _free($3480);
 label=1016;break;
 case 1016: 
 var $3481=HEAP8[(($695)>>0)];
 var $3482=$3481&1;
 var $3483=(($3482<<24)>>24)==0;
 if($3483){label=1018;break;}else{label=1017;break;}
 case 1017: 
 var $3485=HEAP32[(($852)>>2)];
 _free($3485);
 label=1018;break;
 case 1018: 
 var $3486=HEAP32[(($706)>>2)];
 var $3487=($3486|0)==0;
 if($3487){var $_1=$_0446;label=1035;break;}else{label=1019;break;}
 case 1019: 
 var $3488=HEAP32[(($707)>>2)];
 var $3489=($3486|0)==($3488|0);
 if($3489){label=1022;break;}else{label=1020;break;}
 case 1020: 
 var $3491=((($3488)-(12))|0);
 HEAP32[(($707)>>2)]=$3491;
 var $3492=$3491;
 var $3493=HEAP8[(($3492)>>0)];
 var $3494=$3493&1;
 var $3495=(($3494<<24)>>24)==0;
 if($3495){label=1019;break;}else{label=1021;break;}
 case 1021: 
 var $3497=((($3488)-(12)+8)|0);
 var $3498=HEAP32[(($3497)>>2)];
 _free($3498);
 label=1019;break;
 case 1022: 
 var $3499=HEAP32[(($706)>>2)];
 var $3500=$3499;
 _free($3500);
 var $_1=$_0446;label=1035;break;
 case 1023: 
 var $_0448;
 var $_0447;
 var $3501=HEAP8[(($750)>>0)];
 var $3502=$3501&1;
 var $3503=(($3502<<24)>>24)==0;
 if($3503){label=1025;break;}else{label=1024;break;}
 case 1024: 
 var $3505=HEAP32[(($757)>>2)];
 _free($3505);
 label=1025;break;
 case 1025: 
 var $3506=HEAP8[(($722)>>0)];
 var $3507=$3506&1;
 var $3508=(($3507<<24)>>24)==0;
 if($3508){label=1027;break;}else{label=1026;break;}
 case 1026: 
 var $3510=HEAP32[(($759)>>2)];
 _free($3510);
 label=1027;break;
 case 1027: 
 var $3511=HEAP8[(($695)>>0)];
 var $3512=$3511&1;
 var $3513=(($3512<<24)>>24)==0;
 if($3513){label=1029;break;}else{label=1028;break;}
 case 1028: 
 var $3515=HEAP32[(($852)>>2)];
 _free($3515);
 label=1029;break;
 case 1029: 
 var $3516=HEAP32[(($706)>>2)];
 var $3517=($3516|0)==0;
 if($3517){label=1034;break;}else{label=1030;break;}
 case 1030: 
 var $3518=HEAP32[(($707)>>2)];
 var $3519=($3516|0)==($3518|0);
 if($3519){label=1033;break;}else{label=1031;break;}
 case 1031: 
 var $3521=((($3518)-(12))|0);
 HEAP32[(($707)>>2)]=$3521;
 var $3522=$3521;
 var $3523=HEAP8[(($3522)>>0)];
 var $3524=$3523&1;
 var $3525=(($3524<<24)>>24)==0;
 if($3525){label=1030;break;}else{label=1032;break;}
 case 1032: 
 var $3527=((($3518)-(12)+8)|0);
 var $3528=HEAP32[(($3527)>>2)];
 _free($3528);
 label=1030;break;
 case 1033: 
 var $3529=HEAP32[(($706)>>2)];
 var $3530=$3529;
 _free($3530);
 label=1034;break;
 case 1034: 
 HEAP32[(($700)>>2)]=17124;
 var $3531=(($2720)|0);
 HEAP32[(($3531)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($705);
 __ZNSt3__18ios_baseD2Ev($854);
 var $3532$0=$_0447;
 var $3532$1=0;
 var $3533$0=$3532$0;
 var $3533$1=$_0448;
 var $_pre659=HEAP8[(($689)>>0)];
 var $eh_lpad_body268$1=$3533$1;var $eh_lpad_body268$0=$3533$0;var $3538=$_pre659;label=1036;break;
 case 1035: 
 var $_1;
 HEAP32[(($700)>>2)]=17124;
 var $3534=(($2720)|0);
 HEAP32[(($3534)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($705);
 __ZNSt3__18ios_baseD2Ev($854);
 var $$etemp$67$0=188;
 var $$etemp$67$1=0;

 var $$etemp$68$0=12;
 var $$etemp$68$1=0;

 var $$etemp$69$0=12;
 var $$etemp$69$1=0;

 var $$etemp$70$0=80;
 var $$etemp$70$1=0;

 var $$etemp$71$0=80;
 var $$etemp$71$1=0;

 var $$etemp$72$0=12;
 var $$etemp$72$1=0;

 var $result_0_=($_1?$result_0:3);
 var $3535=HEAP8[(($689)>>0)];
 var $3536=$3535&1;
 var $3537=(($3536<<24)>>24)==0;
 if($3537){var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0_;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}else{label=1038;break;}
 case 1036: 
 var $3538;
 var $eh_lpad_body268$0;
 var $eh_lpad_body268$1;
 var $3539=$eh_lpad_body268$0;
 var $3540=$eh_lpad_body268$1;
 var $3541=$3538&1;
 var $3542=(($3541<<24)>>24)==0;
 if($3542){var $_3=$3540;var $_3461=$3539;label=1205;break;}else{label=1037;break;}
 case 1037: 
 var $3544=HEAP32[(($855)>>2)];
 _free($3544);
 var $_3=$3540;var $_3461=$3539;label=1205;break;
 case 1038: 
 var $3546=HEAP32[(($855)>>2)];
 _free($3546);
 var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0_;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 1039: 
 var $3548=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($header,2336);
 var $3549=($3548|0)==0;
 if($3549){label=1040;break;}else{var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}
 case 1040: 
 var $3551=HEAP32[(($521)>>2)];
 var $3552=HEAP32[(($520)>>2)];
 var $3553=$3551;
 var $3554=$3552;
 var $3555=((($3553)-($3554))|0);
 var $3556=(((($3555|0))/(12))&-1);
 var $3557=($3556>>>0)>1;
 if($3557){label=1041;break;}else{var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_0;var $currentMaterialIdx_0=$currentMaterialIdx_0;var $result_0=$result_0;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}
 case 1041: 
 var $3559=(($3552+12)|0);
 var $3560=$3559;
 var $3561=HEAP8[(($3560)>>0)];
 var $3562=$3561&1;
 var $3563=(($3562<<24)>>24)==0;
 if($3563){label=1042;break;}else{label=1043;break;}
 case 1042: 
 assert(12 % 1 === 0);HEAP32[(($858)>>2)]=HEAP32[(($3560)>>2)];HEAP32[((($858)+(4))>>2)]=HEAP32[((($3560)+(4))>>2)];HEAP32[((($858)+(8))>>2)]=HEAP32[((($3560)+(8))>>2)];
 var $i11_0=0;var $found_0=0;var $currentColor_1=$currentColor_0;var $currentMaterialIdx_1=$currentMaterialIdx_0;label=1056;break;
 case 1043: 
 var $3566=(($3552+20)|0);
 var $3567=HEAP32[(($3566)>>2)];
 var $3568=(($3552+16)|0);
 var $3569=HEAP32[(($3568)>>2)];
 var $3570=($3569>>>0)>4294967279;
 if($3570){label=1044;break;}else{label=1046;break;}
 case 1044: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1045;break; } else { label=165;break; }
 case 1045: 
 throw "Reached an unreachable!";
 case 1046: 
 var $3573=($3569>>>0)<11;
 if($3573){label=1047;break;}else{label=1048;break;}
 case 1047: 
 var $3575=$3569<<1;
 var $3576=(($3575)&255);
 HEAP8[(($858)>>0)]=$3576;
 var $__p_0_i274=$863;label=1055;break;
 case 1048: 
 var $3577=((($3569)+(16))|0);
 var $3578=$3577&-16;
 var $3579=($3578|0)==0;
 var $_size_i278=($3579?1:$3578);
 var $3580=_malloc($_size_i278);
 var $3581=($3580|0)==0;
 if($3581){label=1049;break;}else{var $_lcssa_i280=$3580;label=1054;break;}
 case 1049: 
 var $3582=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $3583=($3582|0)==0;
 if($3583){label=1052;break;}else{label=1050;break;}
 case 1050: 
 var $3585=$3582;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3585]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1051;break; } else { label=159;break; }
 case 1051: 
 var $3586=_malloc($_size_i278);
 var $3587=($3586|0)==0;
 if($3587){label=1049;break;}else{var $_lcssa_i280=$3586;label=1054;break;}
 case 1052: 
 var $3589=___cxa_allocate_exception(4);
 var $3590=$3589;
 HEAP32[(($3590)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($3589,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1053;break; } else { label=165;break; }
 case 1053: 
 throw "Reached an unreachable!";
 case 1054: 
 var $_lcssa_i280;
 HEAP32[(($864)>>2)]=$_lcssa_i280;
 var $3591=$3578|1;
 HEAP32[(($869)>>2)]=$3591;
 HEAP32[(($866)>>2)]=$3569;
 var $__p_0_i274=$_lcssa_i280;label=1055;break;
 case 1055: 
 var $__p_0_i274;
 assert($3569 % 1 === 0);(_memcpy($__p_0_i274, $3567, $3569)|0);
 var $3592=(($__p_0_i274+$3569)|0);
 HEAP8[(($3592)>>0)]=0;
 var $i11_0=0;var $found_0=0;var $currentColor_1=$currentColor_0;var $currentMaterialIdx_1=$currentMaterialIdx_0;label=1056;break;
 case 1056: 
 var $currentMaterialIdx_1;
 var $currentColor_1;
 var $found_0;
 var $i11_0;
 var $3593=$found_0&1;
 var $3594=(($3593<<24)>>24)==0;
 if($3594){label=1057;break;}else{var $currentMaterialIdx_3=$currentMaterialIdx_1;var $result_4=$result_0;label=1091;break;}
 case 1057: 
 var $3596=HEAP32[(($512)>>2)];
 var $3597=HEAP32[(($511)>>2)];
 var $3598=$3596;
 var $3599=$3597;
 var $3600=((($3598)-($3599))|0);
 var $3601=(((($3600|0))/(80))&-1);
 var $3602=($i11_0>>>0)<($3601>>>0);
 if($3602){label=1058;break;}else{var $currentMaterialIdx_3=0;var $result_4=5;label=1091;break;}
 case 1058: 
 var $3604=(($3597+((($i11_0)*(80))&-1)+4)|0);
 var $3605=$3604;
 var $3606=HEAP8[(($3605)>>0)];
 var $3607=$3606&1;
 var $3608=(($3607<<24)>>24)==0;
 if($3608){label=1059;break;}else{label=1060;break;}
 case 1059: 
 assert(12 % 1 === 0);HEAP32[(($859)>>2)]=HEAP32[(($3605)>>2)];HEAP32[((($859)+(4))>>2)]=HEAP32[((($3605)+(4))>>2)];HEAP32[((($859)+(8))>>2)]=HEAP32[((($3605)+(8))>>2)];
 label=1073;break;
 case 1060: 
 var $3611=(($3597+((($i11_0)*(80))&-1)+12)|0);
 var $3612=HEAP32[(($3611)>>2)];
 var $3613=(($3597+((($i11_0)*(80))&-1)+8)|0);
 var $3614=HEAP32[(($3613)>>2)];
 var $3615=($3614>>>0)>4294967279;
 if($3615){label=1061;break;}else{label=1063;break;}
 case 1061: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1062;break; } else { label=1094;break; }
 case 1062: 
 throw "Reached an unreachable!";
 case 1063: 
 var $3618=($3614>>>0)<11;
 if($3618){label=1064;break;}else{label=1065;break;}
 case 1064: 
 var $3620=$3614<<1;
 var $3621=(($3620)&255);
 HEAP8[(($859)>>0)]=$3621;
 var $__p_0_i287=$861;label=1072;break;
 case 1065: 
 var $3622=((($3614)+(16))|0);
 var $3623=$3622&-16;
 var $3624=($3623|0)==0;
 var $_size_i291=($3624?1:$3623);
 var $3625=_malloc($_size_i291);
 var $3626=($3625|0)==0;
 if($3626){label=1066;break;}else{var $_lcssa_i293=$3625;label=1071;break;}
 case 1066: 
 var $3627=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $3628=($3627|0)==0;
 if($3628){label=1069;break;}else{label=1067;break;}
 case 1067: 
 var $3630=$3627;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3630]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1068;break; } else { label=1093;break; }
 case 1068: 
 var $3631=_malloc($_size_i291);
 var $3632=($3631|0)==0;
 if($3632){label=1066;break;}else{var $_lcssa_i293=$3631;label=1071;break;}
 case 1069: 
 var $3634=___cxa_allocate_exception(4);
 var $3635=$3634;
 HEAP32[(($3635)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($3634,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1070;break; } else { label=1094;break; }
 case 1070: 
 throw "Reached an unreachable!";
 case 1071: 
 var $_lcssa_i293;
 HEAP32[(($865)>>2)]=$_lcssa_i293;
 var $3636=$3623|1;
 HEAP32[(($868)>>2)]=$3636;
 HEAP32[(($867)>>2)]=$3614;
 var $__p_0_i287=$_lcssa_i293;label=1072;break;
 case 1072: 
 var $__p_0_i287;
 assert($3614 % 1 === 0);(_memcpy($__p_0_i287, $3612, $3614)|0);
 var $3637=(($__p_0_i287+$3614)|0);
 HEAP8[(($3637)>>0)]=0;
 label=1073;break;
 case 1073: 
 var $3638=HEAP8[(($859)>>0)];
 var $3639=$3638&1;
 var $3640=(($3639<<24)>>24)==0;
 if($3640){label=1075;break;}else{label=1074;break;}
 case 1074: 
 var $3642=HEAP32[(($867)>>2)];
 var $3646=$3642;label=1076;break;
 case 1075: 
 var $3644=($3638&255);
 var $3645=$3644>>>1;
 var $3646=$3645;label=1076;break;
 case 1076: 
 var $3646;
 var $3647=HEAP8[(($858)>>0)];
 var $3648=$3647&1;
 var $3649=(($3648<<24)>>24)==0;
 if($3649){label=1078;break;}else{label=1077;break;}
 case 1077: 
 var $3651=HEAP32[(($866)>>2)];
 var $3655=$3651;label=1079;break;
 case 1078: 
 var $3653=($3647&255);
 var $3654=$3653>>>1;
 var $3655=$3654;label=1079;break;
 case 1079: 
 var $3655;
 var $3656=($3646|0)==($3655|0);
 if($3656){label=1080;break;}else{var $found_1=$found_0;var $currentColor_2=$currentColor_1;var $currentMaterialIdx_2=$currentMaterialIdx_1;label=1089;break;}
 case 1080: 
 var $3657=HEAP32[(($865)>>2)];
 var $_718=($3640?$861:$3657);
 var $3658=HEAP32[(($864)>>2)];
 var $3659=($3649?$863:$3658);
 if($3640){var $__lhs_sz_i_0=$3646;var $__lp_i_0=$_718;var $__rp_i_0=$3659;label=1084;break;}else{label=1081;break;}
 case 1081: 
 var $3661=($3646|0)==0;
 if($3661){label=1088;break;}else{var $_02_i_i=$3646;var $l_03_i_i=$_718;var $r_04_i_i=$3659;label=1082;break;}
 case 1082: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $3662=HEAP8[(($l_03_i_i)>>0)];
 var $3663=HEAP8[(($r_04_i_i)>>0)];
 var $3664=(($3662<<24)>>24)==(($3663<<24)>>24);
 if($3664){label=1083;break;}else{label=1087;break;}
 case 1083: 
 var $3666=((($_02_i_i)-(1))|0);
 var $3667=(($l_03_i_i+1)|0);
 var $3668=(($r_04_i_i+1)|0);
 var $3669=($3666|0)==0;
 if($3669){label=1088;break;}else{var $_02_i_i=$3666;var $l_03_i_i=$3667;var $r_04_i_i=$3668;label=1082;break;}
 case 1084: 
 var $__rp_i_0;
 var $__lp_i_0;
 var $__lhs_sz_i_0;
 var $3670=($__lhs_sz_i_0|0)==0;
 if($3670){label=1088;break;}else{label=1085;break;}
 case 1085: 
 var $3672=HEAP8[(($__lp_i_0)>>0)];
 var $3673=HEAP8[(($__rp_i_0)>>0)];
 var $3674=(($3672<<24)>>24)==(($3673<<24)>>24);
 if($3674){label=1086;break;}else{var $found_1=$found_0;var $currentColor_2=$currentColor_1;var $currentMaterialIdx_2=$currentMaterialIdx_1;label=1089;break;}
 case 1086: 
 var $3676=((($__lhs_sz_i_0)-(1))|0);
 var $3677=(($__lp_i_0+1)|0);
 var $3678=(($__rp_i_0+1)|0);
 var $__lhs_sz_i_0=$3676;var $__lp_i_0=$3677;var $__rp_i_0=$3678;label=1084;break;
 case 1087: 
 var $3679=(($3662<<24)>>24)==(($3663<<24)>>24);
 if($3679){label=1088;break;}else{var $found_1=$found_0;var $currentColor_2=$currentColor_1;var $currentMaterialIdx_2=$currentMaterialIdx_1;label=1089;break;}
 case 1088: 
 var $3680=(($i11_0)&65535);
 var $3681=(($3680<<16)>>16);
 var $3682=HEAP32[(($511)>>2)];
 var $3683=(($3682+((($3681)*(80))&-1)+28)|0);
 var $3684=HEAPF32[(($3683)>>2)];
 var $3685=(($3682+((($3681)*(80))&-1)+32)|0);
 var $3686=HEAPF32[(($3685)>>2)];
 var $3687=(($3682+((($3681)*(80))&-1)+36)|0);
 var $3688=HEAPF32[(($3687)>>2)];
 var $3689=$3684;
 var $3690=($3689)*(255);
 var $3691=($3690>=0 ? Math_floor($3690) : Math_ceil($3690));
 var $3692=$3686;
 var $3693=($3692)*(255);
 var $3694=($3693>=0 ? Math_floor($3693) : Math_ceil($3693));
 var $3695=$3688;
 var $3696=($3695)*(255);
 var $3697=($3696>=0 ? Math_floor($3696) : Math_ceil($3696));
 var $3698=(($3682+((($3681)*(80))&-1)+56)|0);
 var $3699=HEAPF32[(($3698)>>2)];
 var $3700=$3699;
 var $3701=($3700)*(255);
 var $3702=($3701>=0 ? Math_floor($3701) : Math_ceil($3701));
 var $3703=($3702&255);
 var $3704=$3703<<24;
 var $3705=($3697&255);
 var $3706=$3705<<16;
 var $3707=$3704|$3706;
 var $3708=($3694&255);
 var $3709=$3708<<8;
 var $3710=$3707|$3709;
 var $3711=($3691&255);
 var $3712=$3710|$3711;
 var $found_1=1;var $currentColor_2=$3712;var $currentMaterialIdx_2=$3680;label=1089;break;
 case 1089: 
 var $currentMaterialIdx_2;
 var $currentColor_2;
 var $found_1;
 var $3713=((($i11_0)+(1))|0);
 if($3640){var $i11_0=$3713;var $found_0=$found_1;var $currentColor_1=$currentColor_2;var $currentMaterialIdx_1=$currentMaterialIdx_2;label=1056;break;}else{label=1090;break;}
 case 1090: 
 var $3715=HEAP32[(($865)>>2)];
 _free($3715);
 var $i11_0=$3713;var $found_0=$found_1;var $currentColor_1=$currentColor_2;var $currentMaterialIdx_1=$currentMaterialIdx_2;label=1056;break;
 case 1091: 
 var $result_4;
 var $currentMaterialIdx_3;
 var $3716=HEAP8[(($858)>>0)];
 var $3717=$3716&1;
 var $3718=(($3717<<24)>>24)==0;
 if($3718){var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_1;var $currentMaterialIdx_0=$currentMaterialIdx_3;var $result_0=$result_4;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;}else{label=1092;break;}
 case 1092: 
 var $3720=HEAP32[(($864)>>2)];
 _free($3720);
 var $loadingStr_0=$loadingStr_0;var $extraTriangles_0=$extraTriangles_0;var $numVNormals_0=$numVNormals_0;var $numTexCoords_0=$numTexCoords_0;var $numTriangles_0=$numTriangles_0;var $numEdges_0=$numEdges_0;var $numVertices_0=$numVertices_0;var $currentColor_0=$currentColor_1;var $currentMaterialIdx_0=$currentMaterialIdx_3;var $result_0=$result_4;var $texCoords_sroa_0_0=$texCoords_sroa_0_0;var $texCoords_sroa_13_0=$texCoords_sroa_13_0;var $texCoords_sroa_29_0=$texCoords_sroa_29_0;var $ev_sroa_0_0=$ev_sroa_0_0;var $ev_sroa_14_0=$ev_sroa_14_0;var $ev_sroa_30_0=$ev_sroa_30_0;label=136;break;
 case 1093: 
 var $lpad_loopexit518$0 = ___cxa_find_matching_catch(); var $lpad_loopexit518$1 = tempRet0;
 var $lpad_phi520$1=$lpad_loopexit518$1;var $lpad_phi520$0=$lpad_loopexit518$0;label=1095;break;
 case 1094: 
 var $lpad_nonloopexit519$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit519$1 = tempRet0;
 var $lpad_phi520$1=$lpad_nonloopexit519$1;var $lpad_phi520$0=$lpad_nonloopexit519$0;label=1095;break;
 case 1095: 
 var $lpad_phi520$0;
 var $lpad_phi520$1;
 var $3722=$lpad_phi520$0;
 var $3723=$lpad_phi520$1;
 var $3724=HEAP8[(($858)>>0)];
 var $3725=$3724&1;
 var $3726=(($3725<<24)>>24)==0;
 if($3726){var $_3=$3723;var $_3461=$3722;label=1205;break;}else{label=1096;break;}
 case 1096: 
 var $3728=HEAP32[(($864)>>2)];
 _free($3728);
 var $_3=$3723;var $_3461=$3722;label=1205;break;
 case 1097: 
 var $3730=((($numTriangles_0)+($numVertices_0))|0);
 var $3731=((($549)+($extraTriangles_0))|0);
 var $3732=($3730|0)==($3731|0);
 if($3732){label=1100;break;}else{label=1098;break;}
 case 1098: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2224,2144,634,10536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1099;break; } else { label=165;break; }
 case 1099: 
 throw "Reached an unreachable!";
 case 1100: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($6,$m,$numTriangles_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1101;break; } else { label=165;break; }
 case 1101: 
 var $3737=($numEdges_0|0)>0;
 if($3737){label=1103;break;}else{label=1102;break;}
 case 1102: 
 var $3738=(($m+36)|0);
 var $3739=(($m+32)|0);
 var $3740=(($m+44)|0);
 var $storemerge4=0;label=1114;break;
 case 1103: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddEdgesERS2_j($7,$m,$numEdges_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1104;break; } else { label=165;break; }
 case 1104: 
 var $3743=(($m+20)|0);
 var $3744=HEAP32[(($3743)>>2)];
 var $3745=(($m+16)|0);
 var $3746=HEAP32[(($3745)>>2)];
 var $3747=$3744;
 var $3748=$3746;
 var $3749=((($3747)-($3748))|0);
 var $3750=(($m+28)|0);
 var $3751=HEAP32[(($3750)>>2)];
 var $3752=($3749|0)==($3751|0);
 if($3752){label=1107;break;}else{label=1105;break;}
 case 1105: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2104,2144,642,10536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1106;break; } else { label=165;break; }
 case 1106: 
 throw "Reached an unreachable!";
 case 1107: 
 var $3756=(($ev_sroa_0_0)|0);
 var $3757=HEAP32[(($3756)>>2)];
 var $3758=($3757|0)>-1;
 if($3758){label=1108;break;}else{label=1110;break;}
 case 1108: 
 var $3760=(($m+4)|0);
 var $3761=HEAP32[(($3760)>>2)];
 var $3762=HEAP32[(($656)>>2)];
 var $3763=$3761;
 var $3764=$3762;
 var $3765=((($3763)-($3764))|0);
 var $3766=(((($3765|0))/(28))&-1);
 var $3767=($3757>>>0)<($3766>>>0);
 if($3767){label=1109;break;}else{label=1110;break;}
 case 1109: 
 var $3769=(($ev_sroa_0_0+4)|0);
 var $3770=HEAP32[(($3769)>>2)];
 var $3771=($3770|0)>-1;
 var $3772=($3770>>>0)<($3766>>>0);
 var $or_cond720=$3771&$3772;
 if($or_cond720){label=1112;break;}else{label=1110;break;}
 case 1110: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2008,2144,650,10536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1111;break; } else { label=165;break; }
 case 1111: 
 throw "Reached an unreachable!";
 case 1112: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,1744,46,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1113;break; } else { label=165;break; }
 case 1113: 
 throw "Reached an unreachable!";
 case 1114: 
 var $storemerge4;
 var $3777=($storemerge4|0)<($numTriangles_0|0);
 if($3777){label=1115;break;}else{label=1143;break;}
 case 1115: 
 var $3779=HEAP32[(($3738)>>2)];
 var $3780=HEAP32[(($3739)>>2)];
 var $3781=$3779;
 var $3782=$3780;
 var $3783=((($3781)-($3782))|0);
 var $3784=$3783>>5;
 var $3785=HEAP32[(($3740)>>2)];
 var $3786=($3784|0)==($3785|0);
 if($3786){label=1116;break;}else{label=1117;break;}
 case 1116: 
 var $_pre666=HEAP32[(($517)>>2)];
 var $storemerge7=0;label=1119;break;
 case 1117: 
 (function() { try { __THREW__ = 0; return ___assert_fail(1952,2144,663,10536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1118;break; } else { label=165;break; }
 case 1118: 
 throw "Reached an unreachable!";
 case 1119: 
 var $storemerge7;
 var $3790=(($_pre666+((($storemerge4)*(48))&-1)+4)|0);
 var $3791=HEAP32[(($3790)>>2)];
 var $3792=(($_pre666+((($storemerge4)*(48))&-1))|0);
 var $3793=HEAP32[(($3792)>>2)];
 var $3794=$3791;
 var $3795=$3793;
 var $3796=((($3794)-($3795))|0);
 var $3797=$3796>>2;
 var $3798=($storemerge7>>>0)<($3797>>>0);
 if($3798){label=1120;break;}else{label=1142;break;}
 case 1120: 
 var $3800=(($3793+($storemerge7<<2))|0);
 var $3801=HEAP32[(($3800)>>2)];
 var $3802=HEAP32[(($656)>>2)];
 var $3803=(($3802+((($3801)*(28))&-1))|0);
 var $3804=HEAP32[(($3739)>>2)];
 var $3805=($storemerge7|0)>-1;
 var $3806=($storemerge7|0)<3;
 var $or_cond722=$3805&$3806;
 if($or_cond722){label=1123;break;}else{label=1121;break;}
 case 1121: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,173,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1122;break; } else { label=165;break; }
 case 1122: 
 throw "Reached an unreachable!";
 case 1123: 
 var $3809=(($3804+($storemerge4<<5)+16+($storemerge7<<2))|0);
 HEAP32[(($3809)>>2)]=$3803;
 var $3810=HEAP32[(($11)>>2)];
 var $3811=$3810&32;
 var $3812=($3811|0)==0;
 if($3812){label=1130;break;}else{label=1124;break;}
 case 1124: 
 var $3814=HEAP8[((34520)>>0)];
 var $3815=(($3814<<24)>>24)==0;
 if($3815){label=1125;break;}else{label=1128;break;}
 case 1125: 
 var $3817=___cxa_guard_acquire(34520);
 var $3818=($3817|0)==0;
 if($3818){label=1128;break;}else{var $3819=31544;label=1126;break;}
 case 1126: 
 var $3819;
 var $3820=(($3819+8)|0);
 var $3821=($3820|0)==31552;
 if($3821){label=1127;break;}else{var $3819=$3820;label=1126;break;}
 case 1127: 

 label=1128;break;
 case 1128: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,5736,94,10304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1129;break; } else { label=165;break; }
 case 1129: 
 throw "Reached an unreachable!";
 case 1130: 
 var $3824=$3810&16384;
 var $3825=($3824|0)==0;
 if($3825){label=1136;break;}else{label=1131;break;}
 case 1131: 
 var $3827=HEAP8[((34544)>>0)];
 var $3828=(($3827<<24)>>24)==0;
 if($3828){label=1132;break;}else{label=1134;break;}
 case 1132: 
 var $3830=___cxa_guard_acquire(34544);
 var $3831=($3830|0)==0;
 if($3831){label=1134;break;}else{label=1133;break;}
 case 1133: 

 label=1134;break;
 case 1134: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,52,10336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1135;break; } else { label=165;break; }
 case 1135: 
 throw "Reached an unreachable!";
 case 1136: 
 var $3835=$3810&16;
 var $3836=($3835|0)==0;
 if($3836){label=1138;break;}else{label=1137;break;}
 case 1137: 
 var $3838=HEAP32[(($3739)>>2)];
 var $3839=(($3838+($storemerge4<<5)+16+($storemerge7<<2))|0);
 var $3840=HEAP32[(($3839)>>2)];
 var $3841=(($_pre666+((($storemerge4)*(48))&-1)+12)|0);
 var $3842=HEAP32[(($3841)>>2)];
 var $3843=(($3842+($storemerge7<<2))|0);
 var $3844=HEAP32[(($514)>>2)];
 var $3845=HEAP32[(($3843)>>2)];
 var $3846=(($3844+((($3845)*(12))&-1))|0);
 var $3847=HEAPF32[(($3846)>>2)];
 var $3848=(($3840+12)|0);
 HEAPF32[(($3848)>>2)]=$3847;
 var $3849=(($3844+((($3845)*(12))&-1)+4)|0);
 var $3850=HEAPF32[(($3849)>>2)];
 var $3851=(($3840+16)|0);
 HEAPF32[(($3851)>>2)]=$3850;
 var $3852=(($3844+((($3845)*(12))&-1)+8)|0);
 var $3853=HEAPF32[(($3852)>>2)];
 var $3854=(($3840+20)|0);
 HEAPF32[(($3854)>>2)]=$3853;
 label=1138;break;
 case 1138: 
 var $3856=(($_pre666+((($storemerge4)*(48))&-1)+40+$storemerge7)|0);
 var $3857=HEAP8[(($3856)>>0)];
 var $3858=$3857&1;
 var $3859=(($3858<<24)>>24)==0;
 var $3860=HEAP32[(($3739)>>2)];
 var $3861=262144<<$storemerge7;
 if($3859){label=1140;break;}else{label=1139;break;}
 case 1139: 
 var $3863=(($3860+($storemerge4<<5)+28)|0);
 var $3864=HEAP32[(($3863)>>2)];
 var $3865=$3864|$3861;
 HEAP32[(($3863)>>2)]=$3865;
 label=1141;break;
 case 1140: 
 var $3867=$3861^-1;
 var $3868=(($3860+($storemerge4<<5)+28)|0);
 var $3869=HEAP32[(($3868)>>2)];
 var $3870=$3869&$3867;
 HEAP32[(($3868)>>2)]=$3870;
 label=1141;break;
 case 1141: 
 var $3872=((($storemerge7)+(1))|0);
 var $storemerge7=$3872;label=1119;break;
 case 1142: 
 var $3874=((($storemerge4)+(1))|0);
 var $storemerge4=$3874;label=1114;break;
 case 1143: 
 var $3876=HEAP32[(($552)>>2)];
 var $3877=HEAP32[(($551)>>2)];
 var $3878=($3876|0)==($3877|0);
 if($3878){label=1150;break;}else{label=1144;break;}
 case 1144: 
 var $3880=(($m+12)|0);
 var $3881=HEAP32[(($3880)>>2)];
 var $3882=($3881|0)>0;
 if($3882){label=1145;break;}else{label=1150;break;}
 case 1145: 
 var $3884=HEAP8[((34528)>>0)];
 var $3885=(($3884<<24)>>24)==0;
 if($3885){label=1146;break;}else{label=1148;break;}
 case 1146: 
 var $3887=___cxa_guard_acquire(34528);
 var $3888=($3887|0)==0;
 if($3888){label=1148;break;}else{label=1147;break;}
 case 1147: 

 label=1148;break;
 case 1148: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,5736,75,1328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1149;break; } else { label=165;break; }
 case 1149: 
 throw "Reached an unreachable!";
 case 1150: 
 var $3892=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1151;break; } else { label=165;break; }
 case 1151: 
 var $3893=($3892|0)==0;
 if($3893){label=1152;break;}else{var $_0468=$result_0;label=1153;break;}
 case 1152: 
 var $3895=HEAP32[(($426)>>2)];
 var $3896=((($3895)-(12))|0);
 var $3897=$3896;
 var $3898=HEAP32[(($3897)>>2)];
 var $3899=(($427+$3898)|0);
 var $3900=$3899;
 var $_sum5=((($3898)+(16))|0);
 var $3901=(($427+$_sum5)|0);
 var $3902=$3901;
 var $3903=HEAP32[(($3902)>>2)];
 var $3904=$3903|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($3900,$3904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0468=$result_0;label=1153;break; } else { label=165;break; }
 case 1153: 
 var $_0468;
 var $3905=(($ff+24)|0);
 var $3906=HEAP32[(($3905)>>2)];
 var $3907=($3906|0)==0;
 if($3907){label=1158;break;}else{label=1154;break;}
 case 1154: 
 var $_pre665=HEAP32[(($559)>>2)];
 var $3910=$_pre665;label=1155;break;
 case 1155: 
 var $3910;
 var $3911=($3906|0)==($3910|0);
 if($3911){label=1157;break;}else{label=1156;break;}
 case 1156: 
 var $3913=((($3910)-(4))|0);
 HEAP32[(($559)>>2)]=$3913;
 var $3910=$3913;label=1155;break;
 case 1157: 
 var $3914=$3906;
 _free($3914);
 label=1158;break;
 case 1158: 
 var $3915=(($ff+12)|0);
 var $3916=HEAP32[(($3915)>>2)];
 var $3917=($3916|0)==0;
 if($3917){label=1163;break;}else{label=1159;break;}
 case 1159: 
 var $_pre664=HEAP32[(($557)>>2)];
 var $3920=$_pre664;label=1160;break;
 case 1160: 
 var $3920;
 var $3921=($3916|0)==($3920|0);
 if($3921){label=1162;break;}else{label=1161;break;}
 case 1161: 
 var $3923=((($3920)-(4))|0);
 HEAP32[(($557)>>2)]=$3923;
 var $3920=$3923;label=1160;break;
 case 1162: 
 var $3924=$3916;
 _free($3924);
 label=1163;break;
 case 1163: 
 var $3925=HEAP32[(($554)>>2)];
 var $3926=($3925|0)==0;
 if($3926){label=1168;break;}else{label=1164;break;}
 case 1164: 
 var $_pre663=HEAP32[(($555)>>2)];
 var $3929=$_pre663;label=1165;break;
 case 1165: 
 var $3929;
 var $3930=($3925|0)==($3929|0);
 if($3930){label=1167;break;}else{label=1166;break;}
 case 1166: 
 var $3932=((($3929)-(4))|0);
 HEAP32[(($555)>>2)]=$3932;
 var $3929=$3932;label=1165;break;
 case 1167: 
 var $3933=$3925;
 _free($3933);
 label=1168;break;
 case 1168: 
 var $3934=HEAP32[(($551)>>2)];
 var $3935=($3934|0)==0;
 if($3935){label=1173;break;}else{label=1169;break;}
 case 1169: 
 var $_pre662=HEAP32[(($552)>>2)];
 var $3938=$_pre662;label=1170;break;
 case 1170: 
 var $3938;
 var $3939=($3934|0)==($3938|0);
 if($3939){label=1172;break;}else{label=1171;break;}
 case 1171: 
 var $3941=((($3938)-(4))|0);
 HEAP32[(($552)>>2)]=$3941;
 var $3938=$3941;label=1170;break;
 case 1172: 
 var $3942=(($3934)|0);
 _free($3942);
 label=1173;break;
 case 1173: 
 var $3943=($ev_sroa_0_0|0)==0;
 if($3943){label=1177;break;}else{var $ev_sroa_14_2=$ev_sroa_14_0;label=1174;break;}
 case 1174: 
 var $ev_sroa_14_2;
 var $3945=($ev_sroa_0_0|0)==($ev_sroa_14_2|0);
 if($3945){label=1176;break;}else{label=1175;break;}
 case 1175: 
 var $3947=((($ev_sroa_14_2)-(8))|0);
 var $ev_sroa_14_2=$3947;label=1174;break;
 case 1176: 
 var $3948=$ev_sroa_0_0;
 _free($3948);
 label=1177;break;
 case 1177: 
 var $3949=(($defaultMaterial+68)|0);
 var $3950=$3949;
 var $3951=HEAP8[(($3950)>>0)];
 var $3952=$3951&1;
 var $3953=(($3952<<24)>>24)==0;
 if($3953){label=1179;break;}else{label=1178;break;}
 case 1178: 
 var $3955=(($defaultMaterial+76)|0);
 var $3956=HEAP32[(($3955)>>2)];
 _free($3956);
 label=1179;break;
 case 1179: 
 var $3957=$531;
 var $3958=HEAP8[(($3957)>>0)];
 var $3959=$3958&1;
 var $3960=(($3959<<24)>>24)==0;
 if($3960){label=1181;break;}else{label=1180;break;}
 case 1180: 
 var $3962=(($defaultMaterial+12)|0);
 var $3963=HEAP32[(($3962)>>2)];
 _free($3963);
 label=1181;break;
 case 1181: 
 var $3964=HEAP8[(($560)>>0)];
 var $3965=$3964&1;
 var $3966=(($3965<<24)>>24)==0;
 if($3966){label=1183;break;}else{label=1182;break;}
 case 1182: 
 var $3968=HEAP32[(($870)>>2)];
 _free($3968);
 label=1183;break;
 case 1183: 
 var $3969=HEAP32[(($520)>>2)];
 var $3970=($3969|0)==0;
 if($3970){label=1188;break;}else{label=1184;break;}
 case 1184: 
 var $3971=HEAP32[(($521)>>2)];
 var $3972=($3969|0)==($3971|0);
 if($3972){label=1187;break;}else{label=1185;break;}
 case 1185: 
 var $3974=((($3971)-(12))|0);
 HEAP32[(($521)>>2)]=$3974;
 var $3975=$3974;
 var $3976=HEAP8[(($3975)>>0)];
 var $3977=$3976&1;
 var $3978=(($3977<<24)>>24)==0;
 if($3978){label=1184;break;}else{label=1186;break;}
 case 1186: 
 var $3980=((($3971)-(12)+8)|0);
 var $3981=HEAP32[(($3980)>>2)];
 _free($3981);
 label=1184;break;
 case 1187: 
 var $3982=HEAP32[(($520)>>2)];
 var $3983=$3982;
 _free($3983);
 label=1188;break;
 case 1188: 
 __ZNSt3__16vectorIN3vcg3tri2io11ImporterOBJI6MyMeshE14ObjIndexedFaceENS_9allocatorIS7_EEED2Ev($indexedFaces);
 var $3984=HEAP32[(($514)>>2)];
 var $3985=($3984|0)==0;
 if($3985){label=1193;break;}else{label=1189;break;}
 case 1189: 
 var $_pre661=HEAP32[(($515)>>2)];
 var $3988=$_pre661;label=1190;break;
 case 1190: 
 var $3988;
 var $3989=($3984|0)==($3988|0);
 if($3989){label=1192;break;}else{label=1191;break;}
 case 1191: 
 var $3991=((($3988)-(12))|0);
 HEAP32[(($515)>>2)]=$3991;
 var $3988=$3991;label=1190;break;
 case 1192: 
 var $3992=$3984;
 _free($3992);
 label=1193;break;
 case 1193: 
 var $3993=($texCoords_sroa_0_0|0)==0;
 if($3993){label=1197;break;}else{var $texCoords_sroa_13_2=$texCoords_sroa_13_0;label=1194;break;}
 case 1194: 
 var $texCoords_sroa_13_2;
 var $3995=($texCoords_sroa_0_0|0)==($texCoords_sroa_13_2|0);
 if($3995){label=1196;break;}else{label=1195;break;}
 case 1195: 
 var $3997=((($texCoords_sroa_13_2)-(8))|0);
 var $texCoords_sroa_13_2=$3997;label=1194;break;
 case 1196: 
 var $3998=$texCoords_sroa_0_0;
 _free($3998);
 label=1197;break;
 case 1197: 
 var $3999=HEAP32[(($511)>>2)];
 var $4000=($3999|0)==0;
 if($4000){var $_1469=$_0468;label=1253;break;}else{label=1198;break;}
 case 1198: 
 var $_pre660=HEAP32[(($512)>>2)];
 var $4002=$_pre660;label=1199;break;
 case 1199: 
 var $4002;
 var $4003=($3999|0)==($4002|0);
 if($4003){label=1204;break;}else{label=1200;break;}
 case 1200: 
 var $4005=((($4002)-(80))|0);
 HEAP32[(($512)>>2)]=$4005;
 var $4006=((($4002)-(80)+68)|0);
 var $4007=$4006;
 var $4008=HEAP8[(($4007)>>0)];
 var $4009=$4008&1;
 var $4010=(($4009<<24)>>24)==0;
 if($4010){label=1202;break;}else{label=1201;break;}
 case 1201: 
 var $4012=((($4002)-(80)+76)|0);
 var $4013=HEAP32[(($4012)>>2)];
 _free($4013);
 label=1202;break;
 case 1202: 
 var $4014=((($4002)-(80)+4)|0);
 var $4015=$4014;
 var $4016=HEAP8[(($4015)>>0)];
 var $4017=$4016&1;
 var $4018=(($4017<<24)>>24)==0;
 if($4018){var $4002=$4005;label=1199;break;}else{label=1203;break;}
 case 1203: 
 var $4020=((($4002)-(80)+12)|0);
 var $4021=HEAP32[(($4020)>>2)];
 _free($4021);
 var $4002=$4005;label=1199;break;
 case 1204: 
 var $4022=$3999;
 _free($4022);
 var $_1469=$_0468;label=1253;break;
 case 1205: 
 var $_3461;
 var $_3;
 var $4023=(($ff+24)|0);
 var $4024=HEAP32[(($4023)>>2)];
 var $4025=($4024|0)==0;
 if($4025){label=1209;break;}else{label=1206;break;}
 case 1206: 
 var $4027=HEAP32[(($559)>>2)];
 var $4028=($4024|0)==($4027|0);
 if($4028){label=1208;break;}else{label=1207;break;}
 case 1207: 
 var $4030=((($4027)-(4))|0);
 HEAP32[(($559)>>2)]=$4030;
 label=1206;break;
 case 1208: 
 var $4031=$4024;
 _free($4031);
 label=1209;break;
 case 1209: 
 var $4032=(($ff+12)|0);
 var $4033=HEAP32[(($4032)>>2)];
 var $4034=($4033|0)==0;
 if($4034){label=1213;break;}else{label=1210;break;}
 case 1210: 
 var $4036=HEAP32[(($557)>>2)];
 var $4037=($4033|0)==($4036|0);
 if($4037){label=1212;break;}else{label=1211;break;}
 case 1211: 
 var $4039=((($4036)-(4))|0);
 HEAP32[(($557)>>2)]=$4039;
 label=1210;break;
 case 1212: 
 var $4040=$4033;
 _free($4040);
 label=1213;break;
 case 1213: 
 var $4041=HEAP32[(($554)>>2)];
 var $4042=($4041|0)==0;
 if($4042){label=1217;break;}else{label=1214;break;}
 case 1214: 
 var $4044=HEAP32[(($555)>>2)];
 var $4045=($4041|0)==($4044|0);
 if($4045){label=1216;break;}else{label=1215;break;}
 case 1215: 
 var $4047=((($4044)-(4))|0);
 HEAP32[(($555)>>2)]=$4047;
 label=1214;break;
 case 1216: 
 var $4048=$4041;
 _free($4048);
 label=1217;break;
 case 1217: 
 var $4050=HEAP32[(($551)>>2)];
 var $4051=($4050|0)==0;
 if($4051){label=1221;break;}else{label=1218;break;}
 case 1218: 
 var $4053=HEAP32[(($552)>>2)];
 var $4054=($4050|0)==($4053|0);
 if($4054){label=1220;break;}else{label=1219;break;}
 case 1219: 
 var $4056=((($4053)-(4))|0);
 HEAP32[(($552)>>2)]=$4056;
 label=1218;break;
 case 1220: 
 var $4057=(($4050)|0);
 _free($4057);
 label=1221;break;
 case 1221: 
 var $4058=($ev_sroa_0_0|0)==0;
 if($4058){var $_4=$_3;var $_4462=$_3461;var $texCoords_sroa_0_2=$texCoords_sroa_0_0;var $texCoords_sroa_13_3=$texCoords_sroa_13_0;label=1225;break;}else{var $ev_sroa_14_3=$ev_sroa_14_0;label=1222;break;}
 case 1222: 
 var $ev_sroa_14_3;
 var $4060=($ev_sroa_0_0|0)==($ev_sroa_14_3|0);
 if($4060){label=1224;break;}else{label=1223;break;}
 case 1223: 
 var $4062=((($ev_sroa_14_3)-(8))|0);
 var $ev_sroa_14_3=$4062;label=1222;break;
 case 1224: 
 var $4063=$ev_sroa_0_0;
 _free($4063);
 var $_4=$_3;var $_4462=$_3461;var $texCoords_sroa_0_2=$texCoords_sroa_0_0;var $texCoords_sroa_13_3=$texCoords_sroa_13_0;label=1225;break;
 case 1225: 
 var $texCoords_sroa_13_3;
 var $texCoords_sroa_0_2;
 var $_4462;
 var $_4;
 var $4064=(($defaultMaterial+68)|0);
 var $4065=$4064;
 var $4066=HEAP8[(($4065)>>0)];
 var $4067=$4066&1;
 var $4068=(($4067<<24)>>24)==0;
 if($4068){label=1227;break;}else{label=1226;break;}
 case 1226: 
 var $4070=(($defaultMaterial+76)|0);
 var $4071=HEAP32[(($4070)>>2)];
 _free($4071);
 label=1227;break;
 case 1227: 
 var $4072=$531;
 var $4073=HEAP8[(($4072)>>0)];
 var $4074=$4073&1;
 var $4075=(($4074<<24)>>24)==0;
 if($4075){label=1229;break;}else{label=1228;break;}
 case 1228: 
 var $4077=(($defaultMaterial+12)|0);
 var $4078=HEAP32[(($4077)>>2)];
 _free($4078);
 label=1229;break;
 case 1229: 
 var $4079=$header;
 var $4080=HEAP8[(($4079)>>0)];
 var $4081=$4080&1;
 var $4082=(($4081<<24)>>24)==0;
 if($4082){label=1231;break;}else{label=1230;break;}
 case 1230: 
 var $4084=(($header+8)|0);
 var $4085=HEAP32[(($4084)>>2)];
 _free($4085);
 label=1231;break;
 case 1231: 
 var $4086=HEAP32[(($520)>>2)];
 var $4087=($4086|0)==0;
 if($4087){label=1236;break;}else{label=1232;break;}
 case 1232: 
 var $4088=HEAP32[(($521)>>2)];
 var $4089=($4086|0)==($4088|0);
 if($4089){label=1235;break;}else{label=1233;break;}
 case 1233: 
 var $4091=((($4088)-(12))|0);
 HEAP32[(($521)>>2)]=$4091;
 var $4092=$4091;
 var $4093=HEAP8[(($4092)>>0)];
 var $4094=$4093&1;
 var $4095=(($4094<<24)>>24)==0;
 if($4095){label=1232;break;}else{label=1234;break;}
 case 1234: 
 var $4097=((($4088)-(12)+8)|0);
 var $4098=HEAP32[(($4097)>>2)];
 _free($4098);
 label=1232;break;
 case 1235: 
 var $4099=HEAP32[(($520)>>2)];
 var $4100=$4099;
 _free($4100);
 label=1236;break;
 case 1236: 
 __ZNSt3__16vectorIN3vcg3tri2io11ImporterOBJI6MyMeshE14ObjIndexedFaceENS_9allocatorIS7_EEED2Ev($indexedFaces);
 var $4101=HEAP32[(($514)>>2)];
 var $4102=($4101|0)==0;
 if($4102){label=1241;break;}else{label=1237;break;}
 case 1237: 
 var $_pre672=HEAP32[(($515)>>2)];
 var $4105=$_pre672;label=1238;break;
 case 1238: 
 var $4105;
 var $4106=($4101|0)==($4105|0);
 if($4106){label=1240;break;}else{label=1239;break;}
 case 1239: 
 var $4108=((($4105)-(12))|0);
 HEAP32[(($515)>>2)]=$4108;
 var $4105=$4108;label=1238;break;
 case 1240: 
 var $4109=$4101;
 _free($4109);
 label=1241;break;
 case 1241: 
 var $4110=($texCoords_sroa_0_2|0)==0;
 if($4110){label=1245;break;}else{var $texCoords_sroa_13_4=$texCoords_sroa_13_3;label=1242;break;}
 case 1242: 
 var $texCoords_sroa_13_4;
 var $4112=($texCoords_sroa_0_2|0)==($texCoords_sroa_13_4|0);
 if($4112){label=1244;break;}else{label=1243;break;}
 case 1243: 
 var $4114=((($texCoords_sroa_13_4)-(8))|0);
 var $texCoords_sroa_13_4=$4114;label=1242;break;
 case 1244: 
 var $4115=$texCoords_sroa_0_2;
 _free($4115);
 label=1245;break;
 case 1245: 
 var $4116=HEAP32[(($511)>>2)];
 var $4117=($4116|0)==0;
 if($4117){var $_5=$_4;var $_5463=$_4462;label=1255;break;}else{label=1246;break;}
 case 1246: 
 var $_pre671=HEAP32[(($512)>>2)];
 var $4119=$_pre671;label=1247;break;
 case 1247: 
 var $4119;
 var $4120=($4116|0)==($4119|0);
 if($4120){label=1252;break;}else{label=1248;break;}
 case 1248: 
 var $4122=((($4119)-(80))|0);
 HEAP32[(($512)>>2)]=$4122;
 var $4123=((($4119)-(80)+68)|0);
 var $4124=$4123;
 var $4125=HEAP8[(($4124)>>0)];
 var $4126=$4125&1;
 var $4127=(($4126<<24)>>24)==0;
 if($4127){label=1250;break;}else{label=1249;break;}
 case 1249: 
 var $4129=((($4119)-(80)+76)|0);
 var $4130=HEAP32[(($4129)>>2)];
 _free($4130);
 label=1250;break;
 case 1250: 
 var $4131=((($4119)-(80)+4)|0);
 var $4132=$4131;
 var $4133=HEAP8[(($4132)>>0)];
 var $4134=$4133&1;
 var $4135=(($4134<<24)>>24)==0;
 if($4135){var $4119=$4122;label=1247;break;}else{label=1251;break;}
 case 1251: 
 var $4137=((($4119)-(80)+12)|0);
 var $4138=HEAP32[(($4137)>>2)];
 _free($4138);
 var $4119=$4122;label=1247;break;
 case 1252: 
 var $4139=$4116;
 _free($4139);
 var $_5=$_4;var $_5463=$_4462;label=1255;break;
 case 1253: 
 var $_1469;
 HEAP32[(($424)>>2)]=17124;
 var $4140=(($428)|0);
 HEAP32[(($4140)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($455);
 var $4141=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($4141);
 var $_2470=$_1469;label=1254;break;
 case 1254: 
 var $_2470;
 STACKTOP=sp;return $_2470;
 case 1255: 
 var $_5463;
 var $_5;
 HEAP32[(($424)>>2)]=17124;
 var $4143=(($428)|0);
 HEAP32[(($4143)>>2)]=17144;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($455);
 var $4144=(($stream+108)|0);
 __ZNSt3__18ios_baseD2Ev($4144);
 var $4145$0=$_5463;
 var $4145$1=0;
 var $4146$0=$4145$0;
 var $4146$1=$_5;
 ___resumeException($4146$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($agg_result,$m,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$1;
 var $$etemp$0$0=28;
 var $$etemp$0$1=0;

 var $3=($n|0)==0;
 if($3){label=2;break;}else{var $pu_sroa_34_0=0;label=3;break;}
 case 2: 
 var $5=(($m+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($agg_result)|0);
 HEAP32[(($7)>>2)]=$6;
 label=56;break;
 case 3: 
 var $pu_sroa_34_0;
 var $9=($pu_sroa_34_0|0)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=((($pu_sroa_34_0)-(4))|0);
 var $pu_sroa_34_0=$11;label=3;break;
 case 5: 
 var $12=(($m)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($m+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $_=($16?$13:$15);
 var $_18=($16?0:$15);
 var $_19=($16?0:$13);
 var $17=(($m)|0);
 var $18=$_;
 var $19=$13;
 var $20=((($18)-($19))|0);
 var $21=(((($20|0))/(28))&-1);
 var $22=((($21)+($n))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($17,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=58;break; }
 case 6: 
 var $23=(($m+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($24)+($n))|0);
 HEAP32[(($23)>>2)]=$25;
 var $26=(($m+116)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($m+120)|0);
 var $29=$28;
 var $30=(($1)|0);
 var $31=(($1+4)|0);
 var $32=$31;
 var $33=(($1+16)|0);
 var $34=$33;
 var $35=(($1+12)|0);
 var $36=$31;
 var $37=(($36+1)|0);
 var $38=(($31)|0);
 var $39=(($1+8)|0);
 var $ai_i_sroa_0_0=$27;label=7;break;
 case 7: 
 var $ai_i_sroa_0_0;
 var $41=($ai_i_sroa_0_0|0)==($29|0);
 if($41){label=33;break;}else{label=8;break;}
 case 8: 
 var $43=(($ai_i_sroa_0_0+16)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP32[(($30)>>2)]=$44;
 var $45=(($ai_i_sroa_0_0+20)|0);
 var $46=$45;
 var $47=HEAP8[(($46)>>0)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
 var $79=$44;label=23;break;
 case 10: 
 var $52=(($ai_i_sroa_0_0+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($ai_i_sroa_0_0+24)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55>>>0)>4294967279;
 if($56){label=11;break;}else{label=13;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=58;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $59=($55>>>0)<11;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$55<<1;
 var $62=(($61)&255);
 HEAP8[(($32)>>0)]=$62;
 var $__p_0_i_i_i=$37;label=22;break;
 case 15: 
 var $63=((($55)+(16))|0);
 var $64=$63&-16;
 var $65=($64|0)==0;
 var $_size_i_i=($65?1:$64);
 var $66=_malloc($_size_i_i);
 var $67=($66|0)==0;
 if($67){label=16;break;}else{var $_lcssa_i_i=$66;label=21;break;}
 case 16: 
 var $68=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $69=($68|0)==0;
 if($69){label=19;break;}else{label=17;break;}
 case 17: 
 var $71=$68;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=57;break; }
 case 18: 
 var $72=_malloc($_size_i_i);
 var $73=($72|0)==0;
 if($73){label=16;break;}else{var $_lcssa_i_i=$72;label=21;break;}
 case 19: 
 var $75=___cxa_allocate_exception(4);
 var $76=$75;
 HEAP32[(($76)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($75,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=58;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $_lcssa_i_i;
 HEAP32[(($35)>>2)]=$_lcssa_i_i;
 var $77=$64|1;
 HEAP32[(($38)>>2)]=$77;
 HEAP32[(($39)>>2)]=$55;
 var $__p_0_i_i_i=$_lcssa_i_i;label=22;break;
 case 22: 
 var $__p_0_i_i_i;
 assert($55 % 1 === 0);(_memcpy($__p_0_i_i_i, $53, $55)|0);
 var $78=(($__p_0_i_i_i+$55)|0);
 HEAP8[(($78)>>0)]=0;
 var $_pre16=HEAP32[(($30)>>2)];
 var $79=$_pre16;label=23;break;
 case 23: 
 var $79;
 var $80=(($ai_i_sroa_0_0+32)|0);
 var $81=$80;
 assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];
 var $82=HEAP32[(($14)>>2)];
 var $83=HEAP32[(($12)>>2)];
 var $84=$82;
 var $85=$83;
 var $86=((($84)-($85))|0);
 var $87=(((($86|0))/(28))&-1);
 var $88=$79;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+8)|0);
 var $91=HEAP32[(($90)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($79,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=31;break; }
 case 24: 
 var $92=HEAP8[(($32)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=26;break;}else{label=25;break;}
 case 25: 
 var $96=HEAP32[(($35)>>2)];
 _free($96);
 label=26;break;
 case 26: 
 var $97=(($ai_i_sroa_0_0+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){label=27;break;}else{var $storemerge_i_i=$98;label=28;break;}
 case 27: 
 var $100=(($ai_i_sroa_0_0)|0);
 var $_0=$100;label=29;break;
 case 28: 
 var $storemerge_i_i;
 var $102=(($storemerge_i_i)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){var $111=$storemerge_i_i;label=30;break;}else{var $storemerge_i_i=$103;label=28;break;}
 case 29: 
 var $_0;
 var $106=(($_0+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($_0|0)==($109|0);
 if($110){var $111=$107;label=30;break;}else{var $_0=$107;label=29;break;}
 case 30: 
 var $111;
 var $112=$111;
 var $ai_i_sroa_0_0=$112;label=7;break;
 case 31: 
 var $114$0 = ___cxa_find_matching_catch(); var $114$1 = tempRet0;
 var $115=HEAP8[(($32)>>0)];
 var $116=$115&1;
 var $117=(($116<<24)>>24)==0;
 if($117){var $eh_lpad_body$1=$114$1;var $eh_lpad_body$0=$114$0;label=59;break;}else{label=32;break;}
 case 32: 
 var $119=HEAP32[(($35)>>2)];
 _free($119);
 var $eh_lpad_body$1=$114$1;var $eh_lpad_body$0=$114$0;label=59;break;
 case 33: 
 var $121=HEAP32[(($12)>>2)];
 var $122=($_19|0)==0;
 var $123=($121|0)==($_19|0);
 var $or_cond=$122|$123;
 if($or_cond){var $174=$121;label=55;break;}else{label=34;break;}
 case 34: 
 var $125=(($m+32)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($m+36)|0);
 var $128=$_19;
 var $fi_i_sroa_0_0=$126;label=35;break;
 case 35: 
 var $fi_i_sroa_0_0;
 var $130=HEAP32[(($127)>>2)];
 var $131=($fi_i_sroa_0_0|0)==($130|0);
 if($131){label=48;break;}else{label=36;break;}
 case 36: 
 var $133=(($fi_i_sroa_0_0+28)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$134&1;
 var $136=($135|0)==0;
 if($136){var $storemerge_i=0;label=37;break;}else{label=47;break;}
 case 37: 
 var $storemerge_i;
 var $137=($storemerge_i|0)<3;
 if($137){label=38;break;}else{label=47;break;}
 case 38: 
 var $139=($storemerge_i|0)>-1;
 if($139){label=41;break;}else{label=39;break;}
 case 39: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,174,10248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=58;break; }
 case 40: 
 throw "Reached an unreachable!";
 case 41: 
 var $141=(($fi_i_sroa_0_0+16+($storemerge_i<<2))|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 var $144=($142>>>0)<($_19>>>0);
 var $or_cond20=$143|$144;
 var $145=($142>>>0)>($_18>>>0);
 var $or_cond21=$or_cond20|$145;
 if($or_cond21){label=46;break;}else{label=42;break;}
 case 42: 
 var $147=($142>>>0)<($_18>>>0);
 if($147){label=45;break;}else{label=43;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return ___assert_fail(1792,3376,134,10424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=58;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $150=$142;
 var $151=((($150)-($128))|0);
 var $152=(((($151|0))/(28))&-1);
 var $153=(($121+((($152)*(28))&-1))|0);
 HEAP32[(($141)>>2)]=$153;
 label=46;break;
 case 46: 
 var $154=((($storemerge_i)+(1))|0);
 var $storemerge_i=$154;label=37;break;
 case 47: 
 var $155=(($fi_i_sroa_0_0+32)|0);
 var $fi_i_sroa_0_0=$155;label=35;break;
 case 48: 
 var $157=(($m+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($m+20)|0);
 var $160=HEAP32[(($159)>>2)];
 var $ei_i_sroa_0_0=$158;label=49;break;
 case 49: 
 var $ei_i_sroa_0_0;
 var $162=($ei_i_sroa_0_0|0)==($160|0);
 if($162){label=51;break;}else{label=50;break;}
 case 50: 
 var $164=(($ei_i_sroa_0_0+1)|0);
 var $ei_i_sroa_0_0=$164;label=49;break;
 case 51: 
 var $166=(($m+48)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($m+52)|0);
 var $169=HEAP32[(($168)>>2)];
 var $hi_i_sroa_0_0=$167;label=52;break;
 case 52: 
 var $hi_i_sroa_0_0;
 var $171=($hi_i_sroa_0_0|0)==($169|0);
 if($171){label=54;break;}else{label=53;break;}
 case 53: 
 var $173=(($hi_i_sroa_0_0+1)|0);
 var $hi_i_sroa_0_0=$173;label=52;break;
 case 54: 
 var $_pre=HEAP32[(($12)>>2)];
 var $174=$_pre;label=55;break;
 case 55: 
 var $174;
 var $175=HEAP32[(($14)>>2)];
 var $176=$175;
 var $177=$174;
 var $178=((($176)-($177))|0);
 var $179=(((($178|0))/(28))&-1);
 var $180=((($179)-($n))|0);
 var $181=(($174+((($180)*(28))&-1))|0);
 var $182=(($agg_result)|0);
 HEAP32[(($182)>>2)]=$181;
 label=56;break;
 case 56: 
 var $$etemp$1$0=28;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 57: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=59;break;
 case 58: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=59;break;
 case 59: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterOBJI6MyMeshE16TokenizeNextLineERNSt3__114basic_ifstreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEEPNSB_INS_6Color4IhEENSD_ISK_EEEE($stream,$tokens,$colVec){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $line=(sp)+(112);
 var $buf=(sp)+(128);
 var $cc=(sp)+(136);
 var $1=(sp)+(144);
 var $2=(sp)+(160);
 var $3=$stream;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$stream;
 var $_sum=((($7)+(16))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&2;
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=163;break;}
 case 2: 
 var $15=$line;
 var $storemerge=0;label=3;break;
 case 3: 
 var $storemerge;
 var $17=($storemerge>>>0)<3;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$stream;
 var $19=$line;
 var $20=$line;
 var $21=(($20+1)|0);
 var $22=(($line+8)|0);
 var $23=(($line+4)|0);
 var $24=($colVec|0)==0;
 var $25=(($buf)|0);
 var $26=(($buf+1)|0);
 var $27=(($buf+2)|0);
 var $28=$f_i_i;
 var $29=(($f_i_i)|0);
 var $30=(($f_i_i+4)|0);
 var $31=(($f_i_i+44)|0);
 var $32=($buf|0)<0;
 var $33=(($f_i_i+8)|0);
 var $34=(($f_i_i+76)|0);
 var $35=(($f_i_i+104)|0);
 var $36=(($f_i_i+108)|0);
 var $37=(($f_i_i+100)|0);
 var $38=$cc;
 var $39=(($buf+2147483647)|0);
 var $40=(($colVec+4)|0);
 var $41=(($colVec+8)|0);
 var $42=(($colVec)|0);
 var $43=$cc;
 var $44=$cc;
 var $45=(($43+1)|0);
 var $46=(($43+2)|0);
 var $47=(($43+3)|0);
 var $_pre=HEAP32[(($6)>>2)];
 var $51=$_pre;label=6;break;
 case 5: 
 var $49=(($15+($storemerge<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=((($storemerge)+(1))|0);
 var $storemerge=$50;label=3;break;
 case 6: 
 var $51;
 var $_sum43=((($51)+(28))|0);
 var $52=(($8+$_sum43)|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+4)|0);
 var $56=(tempValue=HEAP32[(($55)>>2)],HEAP32[(($55)>>2)]=tempValue+1,tempValue);
 var $57=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 var $58=(($54+12)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($54+8)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$59;
 var $63=$61;
 var $64=((($62)-($63))|0);
 var $65=$64>>2;
 var $66=($65>>>0)>($57>>>0);
 if($66){label=8;break;}else{label=9;break;}
 case 8: 
 var $67=(($61+($57<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=9;break;}else{label=11;break;}
 case 9: 
 var $70=___cxa_allocate_exception(4);
 var $71=$70;
 HEAP32[(($71)>>2)]=15224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($70,26112,(1060)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $72=$68;
 var $73=$68;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+28)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($72,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=12;break; }
 case 12: 
 var $lpad_loopexit71$0 = ___cxa_find_matching_catch(); var $lpad_loopexit71$1 = tempRet0;
 var $lpad_phi72$1=$lpad_loopexit71$1;var $lpad_phi72$0=$lpad_loopexit71$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi72$1=$lpad_nonloopexit$1;var $lpad_phi72$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi72$0;
 var $lpad_phi72$1;
 var $79=(tempValue=HEAP32[(($55)>>2)],HEAP32[(($55)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=15;break;}else{var $eh_lpad_body$1=$lpad_phi72$1;var $eh_lpad_body$0=$lpad_phi72$0;label=42;break;}
 case 15: 
 var $82=(($54)|0);
 var $83=$54;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 var $eh_lpad_body$1=$lpad_phi72$1;var $eh_lpad_body$0=$lpad_phi72$0;label=42;break;
 case 16: 
 var $87=(tempValue=HEAP32[(($55)>>2)],HEAP32[(($55)>>2)]=tempValue+-1,tempValue);
 var $88=($87|0)==0;
 if($88){label=17;break;}else{label=18;break;}
 case 17: 
 var $90=(($54)|0);
 var $91=$54;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP32[(($93)>>2)];
 FUNCTION_TABLE[$94]($90);
 label=18;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($18,$line,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=40;break; }
 case 19: 
 var $95=HEAP8[(($19)>>0)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){label=21;break;}else{label=20;break;}
 case 20: 
 var $99=HEAP32[(($23)>>2)];
 var $103=$99;label=22;break;
 case 21: 
 var $101=($95&255);
 var $102=$101>>>1;
 var $103=$102;label=22;break;
 case 22: 
 var $103;
 var $104=($103|0)==0;
 var $brmerge=$104|$24;
 if($brmerge){var $281=$95;label=80;break;}else{label=23;break;}
 case 23: 
 var $105=HEAP32[(($22)>>2)];
 var $_=($97?$21:$105);
 var $106=HEAP8[(($_)>>0)];
 var $107=(($106<<24)>>24)==35;
 var $108=($103>>>0)>4;
 var $or_cond=$107&$108;
 if($or_cond){label=24;break;}else{var $281=$95;label=80;break;}
 case 24: 
 var $109=HEAP32[(($22)>>2)];
 var $_82=($97?$21:$109);
 var $110=(($_82+1)|0);
 var $111=HEAP8[(($110)>>0)];
 var $112=(($111<<24)>>24)==77;
 if($112){label=25;break;}else{var $281=$95;label=80;break;}
 case 25: 
 var $113=HEAP32[(($22)>>2)];
 var $_83=($97?$21:$113);
 var $114=(($_83+2)|0);
 var $115=HEAP8[(($114)>>0)];
 var $116=(($115<<24)>>24)==82;
 if($116){label=26;break;}else{var $281=$95;label=80;break;}
 case 26: 
 var $117=HEAP32[(($22)>>2)];
 var $_84=($97?$21:$117);
 var $118=(($_84+3)|0);
 var $119=HEAP8[(($118)>>0)];
 var $120=(($119<<24)>>24)==71;
 if($120){label=27;break;}else{var $281=$95;label=80;break;}
 case 27: 
 var $121=HEAP32[(($22)>>2)];
 var $_85=($97?$21:$121);
 var $122=(($_85+4)|0);
 var $123=HEAP8[(($122)>>0)];
 var $124=(($123<<24)>>24)==66;
 if($124){label=28;break;}else{var $281=$95;label=80;break;}
 case 28: 
 var $126=HEAP32[((32936)>>2)];
 var $127=((($126)+(1))|0);
 HEAP32[((32936)>>2)]=$127;
 assert(3 % 1 === 0);HEAP8[(($25)>>0)]=HEAP8[((15024)>>0)];HEAP8[((($25)+(1))>>0)]=HEAP8[((15025)>>0)];HEAP8[((($25)+(2))>>0)]=HEAP8[((15026)>>0)];
 HEAP32[(($cc)>>2)]=-16777216;
 var $storemerge5=6;label=29;break;
 case 29: 
 var $storemerge5;
 var $129=((($storemerge5)+(7))|0);
 var $130=($129>>>0)<($103>>>0);
 if($130){var $storemerge6=1;label=30;break;}else{label=79;break;}
 case 30: 
 var $storemerge6;
 var $131=($storemerge6>>>0)<4;
 if($131){label=31;break;}else{label=43;break;}
 case 31: 
 var $133=$storemerge6<<1;
 var $134=((($storemerge5)+($133))|0);
 var $135=HEAP8[(($19)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=33;break;}else{label=32;break;}
 case 32: 
 var $139=HEAP32[(($22)>>2)];
 var $140=(($139+$134)|0);
 var $141=HEAP8[(($140)>>0)];
 HEAP8[(($25)>>0)]=$141;
 var $142=$134|1;
 var $143=HEAP32[(($22)>>2)];
 var $149=$143;var $148=$142;label=34;break;
 case 33: 
 var $145=(($21+$134)|0);
 var $146=HEAP8[(($145)>>0)];
 HEAP8[(($25)>>0)]=$146;
 var $147=$134|1;
 var $149=$21;var $148=$147;label=34;break;
 case 34: 
 var $148;
 var $149;
 var $150=(($149+$148)|0);
 var $151=HEAP8[(($150)>>0)];
 HEAP8[(($26)>>0)]=$151;
 HEAP8[(($27)>>0)]=0;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 HEAP32[(($29)>>2)]=0;
 HEAP32[(($30)>>2)]=$25;
 HEAP32[(($31)>>2)]=$25;
 var $storemerge81=($32?-1:$39);
 HEAP32[(($33)>>2)]=$storemerge81;
 HEAP32[(($34)>>2)]=-1;
 HEAP32[(($35)>>2)]=0;
 var $152=$storemerge81;
 var $153=$buf;
 var $154=((($152)-($153))|0);
 HEAP32[(($36)>>2)]=$154;
 HEAP32[(($37)>>2)]=$storemerge81;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=0;
 var $155$0=___intscan($f_i_i,16,1,$$etemp$1$0,$$etemp$1$1);
 var $155$1=tempRet0;
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 var $156=((($storemerge6)-(1))|0);
 var $157=($156|0)>-1;
 var $158=($156|0)<4;
 var $or_cond86=$157&$158;
 if($or_cond86){label=37;break;}else{label=35;break;}
 case 35: 
 (function() { try { __THREW__ = 0; return ___assert_fail(1280,1160,145,1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $161=(($38+$156)|0);
 var $162$0=$155$0;
 var $162=$162$0&255;
 HEAP8[(($161)>>0)]=$162;
 var $163=((($storemerge6)+(1))|0);
 var $storemerge6=$163;label=30;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=42;break;
 case 39: 
 var $lpad_loopexit65$0 = ___cxa_find_matching_catch(); var $lpad_loopexit65$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit65$1;var $eh_lpad_body$0=$lpad_loopexit65$0;label=42;break;
 case 40: 
 var $lpad_loopexit73$0 = ___cxa_find_matching_catch(); var $lpad_loopexit73$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit73$1;var $eh_lpad_body$0=$lpad_loopexit73$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit74$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit74$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit74$1;var $eh_lpad_body$0=$lpad_nonloopexit74$0;label=42;break;
 case 42: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $164=$eh_lpad_body$0;
 var $165=$eh_lpad_body$1;
 var $_1=$164;var $_150=$165;label=164;break;
 case 43: 
 var $167=HEAP32[(($40)>>2)];
 var $168=HEAP32[(($41)>>2)];
 var $169=($167|0)==($168|0);
 if($169){label=47;break;}else{label=44;break;}
 case 44: 
 var $171=($167|0)==0;
 if($171){var $180=0;label=46;break;}else{label=45;break;}
 case 45: 
 var $172=HEAP8[(($44)>>0)];
 var $173=(($167)|0);
 HEAP8[(($173)>>0)]=$172;
 var $174=HEAP8[(($45)>>0)];
 var $175=(($167+1)|0);
 HEAP8[(($175)>>0)]=$174;
 var $176=HEAP8[(($46)>>0)];
 var $177=(($167+2)|0);
 HEAP8[(($177)>>0)]=$176;
 var $178=HEAP8[(($47)>>0)];
 var $179=(($167+3)|0);
 HEAP8[(($179)>>0)]=$178;
 var $_pre79=HEAP32[(($40)>>2)];
 var $180=$_pre79;label=46;break;
 case 46: 
 var $180;
 var $181=(($180+4)|0);
 HEAP32[(($40)>>2)]=$181;
 label=78;break;
 case 47: 
 var $183=HEAP32[(($42)>>2)];
 var $184=$167;
 var $185=$183;
 var $186=((($184)-($185))|0);
 var $187=$186>>2;
 var $188=((($187)+(1))|0);
 var $189=($188>>>0)>1073741823;
 if($189){label=48;break;}else{label=59;break;}
 case 48: 
 var $190=___cxa_allocate_exception(8);
 var $191=$190;
 HEAP32[(($191)>>2)]=15352;
 var $192=(($190+4)|0);
 var $193=_strlen(1736);
 var $194=((($193)+(13))|0);
 var $195=($194|0)==0;
 var $_size_i_i=($195?1:$194);
 var $196=_malloc($_size_i_i);
 var $197=($196|0)==0;
 if($197){label=49;break;}else{var $_lcssa_i_i=$196;label=54;break;}
 case 49: 
 var $198=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $199=($198|0)==0;
 if($199){label=52;break;}else{label=50;break;}
 case 50: 
 var $201=$198;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=56;break; }
 case 51: 
 var $202=_malloc($_size_i_i);
 var $203=($202|0)==0;
 if($203){label=49;break;}else{var $_lcssa_i_i=$202;label=54;break;}
 case 52: 
 var $205=___cxa_allocate_exception(4);
 var $206=$205;
 HEAP32[(($206)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($205,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=57;break; }
 case 53: 
 throw "Reached an unreachable!";
 case 54: 
 var $_lcssa_i_i;
 var $207=$_lcssa_i_i;
 HEAP32[(($207)>>2)]=$193;
 var $208=(($_lcssa_i_i+4)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$193;
 var $210=(($_lcssa_i_i+8)|0);
 var $211=$210;
 HEAP32[(($211)>>2)]=0;
 var $212=(($_lcssa_i_i+12)|0);
 var $213=((($193)+(1))|0);
 assert($213 % 1 === 0);(_memcpy($212, 1736, $213)|0);
 var $214=$192;
 HEAP32[(($214)>>2)]=$212;
 HEAP32[(($191)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($190,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=41;break; }
 case 55: 
 throw "Reached an unreachable!";
 case 56: 
 var $lpad_loopexit62$0 = ___cxa_find_matching_catch(); var $lpad_loopexit62$1 = tempRet0;
 var $lpad_phi64$1=$lpad_loopexit62$1;var $lpad_phi64$0=$lpad_loopexit62$0;label=58;break;
 case 57: 
 var $lpad_nonloopexit63$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit63$1 = tempRet0;
 var $lpad_phi64$1=$lpad_nonloopexit63$1;var $lpad_phi64$0=$lpad_nonloopexit63$0;label=58;break;
 case 58: 
 var $lpad_phi64$0;
 var $lpad_phi64$1;
 ___cxa_free_exception($190);
 var $eh_lpad_body$1=$lpad_phi64$1;var $eh_lpad_body$0=$lpad_phi64$0;label=42;break;
 case 59: 
 var $217=($187>>>0)<536870911;
 if($217){label=60;break;}else{var $221=1073741823;label=61;break;}
 case 60: 
 var $218=$186>>1;
 var $219=($218>>>0)<($188>>>0);
 var $_87=($219?$188:$218);
 var $220=($_87|0)==0;
 if($220){var $237=0;var $236=$_87;label=68;break;}else{var $221=$_87;label=61;break;}
 case 61: 
 var $221;
 var $222=$221<<2;
 var $223=($222|0)==0;
 var $_size_i_i_i=($223?1:$222);
 var $224=_malloc($_size_i_i_i);
 var $225=($224|0)==0;
 if($225){label=62;break;}else{var $_lcssa_i_i_i=$224;label=67;break;}
 case 62: 
 var $226=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $227=($226|0)==0;
 if($227){label=65;break;}else{label=63;break;}
 case 63: 
 var $229=$226;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=39;break; }
 case 64: 
 var $230=_malloc($_size_i_i_i);
 var $231=($230|0)==0;
 if($231){label=62;break;}else{var $_lcssa_i_i_i=$230;label=67;break;}
 case 65: 
 var $233=___cxa_allocate_exception(4);
 var $234=$233;
 HEAP32[(($234)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($233,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=41;break; }
 case 66: 
 throw "Reached an unreachable!";
 case 67: 
 var $_lcssa_i_i_i;
 var $235=$_lcssa_i_i_i;
 var $237=$235;var $236=$221;label=68;break;
 case 68: 
 var $236;
 var $237;
 var $238=(($237+($187<<2))|0);
 var $239=(($237+($236<<2))|0);
 var $240=($238|0)==0;
 if($240){label=70;break;}else{label=69;break;}
 case 69: 
 var $242=HEAP8[(($44)>>0)];
 var $243=(($238)|0);
 HEAP8[(($243)>>0)]=$242;
 var $244=HEAP8[(($45)>>0)];
 var $245=(($237+($187<<2)+1)|0);
 HEAP8[(($245)>>0)]=$244;
 var $246=HEAP8[(($46)>>0)];
 var $247=(($237+($187<<2)+2)|0);
 HEAP8[(($247)>>0)]=$246;
 var $248=HEAP8[(($47)>>0)];
 var $249=(($237+($187<<2)+3)|0);
 HEAP8[(($249)>>0)]=$248;
 label=70;break;
 case 70: 
 var $_sum80=((($187)+(1))|0);
 var $250=(($237+($_sum80<<2))|0);
 var $251=HEAP32[(($42)>>2)];
 var $252=HEAP32[(($40)>>2)];
 var $_0=$252;var $__v_i_sroa_7_0=$238;label=71;break;
 case 71: 
 var $__v_i_sroa_7_0;
 var $_0;
 var $254=($_0|0)==($251|0);
 if($254){label=73;break;}else{label=72;break;}
 case 72: 
 var $256=((($_0)-(4))|0);
 var $257=((($__v_i_sroa_7_0)-(4))|0);
 var $258=(($256)|0);
 var $259=HEAP8[(($258)>>0)];
 HEAP8[(($257)>>0)]=$259;
 var $260=((($_0)-(4)+1)|0);
 var $261=HEAP8[(($260)>>0)];
 var $262=((($__v_i_sroa_7_0)-(4)+1)|0);
 HEAP8[(($262)>>0)]=$261;
 var $263=((($_0)-(4)+2)|0);
 var $264=HEAP8[(($263)>>0)];
 var $265=((($__v_i_sroa_7_0)-(4)+2)|0);
 HEAP8[(($265)>>0)]=$264;
 var $266=((($_0)-(4)+3)|0);
 var $267=HEAP8[(($266)>>0)];
 var $268=((($__v_i_sroa_7_0)-(4)+3)|0);
 HEAP8[(($268)>>0)]=$267;
 var $269=((($__v_i_sroa_7_0)-(4))|0);
 var $_0=$256;var $__v_i_sroa_7_0=$269;label=71;break;
 case 73: 
 var $270=HEAP32[(($42)>>2)];
 HEAP32[(($42)>>2)]=$__v_i_sroa_7_0;
 var $271=HEAP32[(($40)>>2)];
 HEAP32[(($40)>>2)]=$250;
 HEAP32[(($41)>>2)]=$239;
 var $__v_i_sroa_15_0=$271;label=74;break;
 case 74: 
 var $__v_i_sroa_15_0;
 var $273=($270|0)==($__v_i_sroa_15_0|0);
 if($273){label=76;break;}else{label=75;break;}
 case 75: 
 var $275=((($__v_i_sroa_15_0)-(4))|0);
 var $__v_i_sroa_15_0=$275;label=74;break;
 case 76: 
 var $276=($270|0)==0;
 if($276){label=78;break;}else{label=77;break;}
 case 77: 
 var $278=(($270)|0);
 _free($278);
 label=78;break;
 case 78: 
 var $279=((($storemerge5)+(8))|0);
 var $storemerge5=$279;label=29;break;
 case 79: 
 var $_pre76=HEAP8[(($19)>>0)];
 var $281=$_pre76;label=80;break;
 case 80: 
 var $281;
 var $282=$281&1;
 var $283=(($282<<24)>>24)==0;
 if($283){label=82;break;}else{label=81;break;}
 case 81: 
 var $285=HEAP32[(($23)>>2)];
 var $289=$285;label=83;break;
 case 82: 
 var $287=($281&255);
 var $288=$287>>>1;
 var $289=$288;label=83;break;
 case 83: 
 var $289;
 var $290=($289|0)==0;
 if($290){label=85;break;}else{label=84;break;}
 case 84: 
 var $291=HEAP32[(($22)>>2)];
 var $_88=($283?$21:$291);
 var $292=HEAP8[(($_88)>>0)];
 var $293=(($292<<24)>>24)==35;
 if($293){label=85;break;}else{label=86;break;}
 case 85: 
 var $295=HEAP32[(($3)>>2)];
 var $296=((($295)-(12))|0);
 var $297=$296;
 var $298=HEAP32[(($297)>>2)];
 var $_sum4=((($298)+(16))|0);
 var $299=(($8+$_sum4)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=$301&2;
 var $303=($302|0)==0;
 if($303){var $51=$298;label=6;break;}else{label=86;break;}
 case 86: 
 if($283){label=88;break;}else{label=87;break;}
 case 87: 
 var $305=HEAP32[(($23)>>2)];
 var $309=$305;label=89;break;
 case 88: 
 var $307=($281&255);
 var $308=$307>>>1;
 var $309=$308;label=89;break;
 case 89: 
 var $309;
 var $310=($309|0)==0;
 if($310){var $495=$281;label=161;break;}else{label=90;break;}
 case 90: 
 var $311=HEAP32[(($22)>>2)];
 var $_89=($283?$21:$311);
 var $312=HEAP8[(($_89)>>0)];
 var $313=(($312<<24)>>24)==35;
 if($313){var $495=$281;label=161;break;}else{label=91;break;}
 case 91: 
 if($283){label=93;break;}else{label=92;break;}
 case 92: 
 var $316=HEAP32[(($23)>>2)];
 var $320=$316;label=94;break;
 case 93: 
 var $318=($281&255);
 var $319=$318>>>1;
 var $320=$319;label=94;break;
 case 94: 
 var $320;
 var $321=(($tokens)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($tokens+4)|0);
 label=95;break;
 case 95: 
 var $324=HEAP32[(($323)>>2)];
 var $325=($322|0)==($324|0);
 if($325){label=96;break;}else{label=97;break;}
 case 96: 
 var $326=$2;
 var $327=$2;
 var $328=(($327+1)|0);
 var $329=$1;
 var $330=$1;
 var $331=(($330+1)|0);
 var $332=(($tokens+8)|0);
 var $333=$1;
 var $334=(($2+8)|0);
 var $335=(($1+8)|0);
 var $336=(($1)|0);
 var $337=(($1+4)|0);
 var $338=(($2)|0);
 var $339=(($2+4)|0);
 var $from_0=0;label=99;break;
 case 97: 
 var $341=((($324)-(12))|0);
 HEAP32[(($323)>>2)]=$341;
 var $342=$341;
 var $343=HEAP8[(($342)>>0)];
 var $344=$343&1;
 var $345=(($344<<24)>>24)==0;
 if($345){label=95;break;}else{label=98;break;}
 case 98: 
 var $347=((($324)-(12)+8)|0);
 var $348=HEAP32[(($347)>>2)];
 _free($348);
 label=95;break;
 case 99: 
 var $from_0;
 var $349=($from_0|0)==($320|0);
 if($349){label=160;break;}else{label=100;break;}
 case 100: 
 var $350=HEAP8[(($19)>>0)];
 var $351=$350&1;
 var $352=(($351<<24)>>24)==0;
 var $353=HEAP32[(($22)>>2)];
 var $_90=($352?$21:$353);
 var $354=(($_90+$from_0)|0);
 var $355=HEAP8[(($354)>>0)];
 var $356=(($355<<24)>>24)==32;
 if($356){label=103;break;}else{label=101;break;}
 case 101: 
 var $357=HEAP32[(($22)>>2)];
 var $_91=($352?$21:$357);
 var $358=(($_91+$from_0)|0);
 var $359=HEAP8[(($358)>>0)];
 var $360=(($359<<24)>>24)==9;
 if($360){label=103;break;}else{label=102;break;}
 case 102: 
 var $362=HEAP32[(($22)>>2)];
 var $_92=($352?$21:$362);
 var $363=(($_92+$from_0)|0);
 var $364=HEAP8[(($363)>>0)];
 var $365=(($364<<24)>>24)==13;
 if($365){label=103;break;}else{label=104;break;}
 case 103: 
 var $366=((($from_0)+(1))|0);
 var $from_0=$366;label=99;break;
 case 104: 
 if($349){label=160;break;}else{label=105;break;}
 case 105: 
 var $368=HEAP32[(($22)>>2)];
 var $storemerge1_in=$from_0;label=106;break;
 case 106: 
 var $storemerge1_in;
 var $storemerge1=((($storemerge1_in)+(1))|0);
 var $370=($storemerge1|0)==($320|0);
 if($370){label=110;break;}else{label=107;break;}
 case 107: 
 var $371=HEAP8[(($19)>>0)];
 var $372=$371&1;
 var $373=(($372<<24)>>24)==0;
 var $_93=($373?$21:$368);
 var $374=(($_93+$storemerge1)|0);
 var $375=HEAP8[(($374)>>0)];
 var $376=(($375<<24)>>24)==32;
 if($376){label=110;break;}else{label=108;break;}
 case 108: 
 var $_94=($373?$21:$368);
 var $377=(($_94+$storemerge1)|0);
 var $378=HEAP8[(($377)>>0)];
 var $379=(($378<<24)>>24)==9;
 if($379){label=110;break;}else{label=109;break;}
 case 109: 
 var $_95=($373?$21:$368);
 var $381=(($_95+$storemerge1)|0);
 var $382=HEAP8[(($381)>>0)];
 var $383=(($382<<24)>>24)==13;
 if($383){label=110;break;}else{var $storemerge1_in=$storemerge1;label=106;break;}
 case 110: 
 var $384=((($storemerge1)-($from_0))|0);
 var $385=HEAP8[(($19)>>0)];
 var $386=$385&1;
 var $387=(($386<<24)>>24)==0;
 if($387){label=112;break;}else{label=111;break;}
 case 111: 
 var $389=HEAP32[(($23)>>2)];
 var $393=$389;label=113;break;
 case 112: 
 var $391=($385&255);
 var $392=$391>>>1;
 var $393=$392;label=113;break;
 case 113: 
 var $393;
 var $394=($393>>>0)<($from_0>>>0);
 if($394){label=114;break;}else{label=116;break;}
 case 114: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=41;break; }
 case 115: 
 throw "Reached an unreachable!";
 case 116: 
 var $_96=($387?$21:$368);
 var $396=(($_96+$from_0)|0);
 var $397=((($393)-($from_0))|0);
 var $398=($397>>>0)<($384>>>0);
 var $399=($398?$397:$384);
 var $400=($399>>>0)>4294967279;
 if($400){label=117;break;}else{label=119;break;}
 case 117: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=41;break; }
 case 118: 
 throw "Reached an unreachable!";
 case 119: 
 var $403=($399>>>0)<11;
 if($403){label=120;break;}else{label=121;break;}
 case 120: 
 var $405=$399<<1;
 var $406=(($405)&255);
 HEAP8[(($326)>>0)]=$406;
 var $__p_0_i33=$328;label=128;break;
 case 121: 
 var $407=((($399)+(16))|0);
 var $408=$407&-16;
 var $409=($408|0)==0;
 var $_size_i37=($409?1:$408);
 var $410=_malloc($_size_i37);
 var $411=($410|0)==0;
 if($411){label=122;break;}else{var $_lcssa_i39=$410;label=127;break;}
 case 122: 
 var $412=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $413=($412|0)==0;
 if($413){label=125;break;}else{label=123;break;}
 case 123: 
 var $415=$412;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$415]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=38;break; }
 case 124: 
 var $416=_malloc($_size_i37);
 var $417=($416|0)==0;
 if($417){label=122;break;}else{var $_lcssa_i39=$416;label=127;break;}
 case 125: 
 var $419=___cxa_allocate_exception(4);
 var $420=$419;
 HEAP32[(($420)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($419,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=41;break; }
 case 126: 
 throw "Reached an unreachable!";
 case 127: 
 var $_lcssa_i39;
 HEAP32[(($334)>>2)]=$_lcssa_i39;
 var $421=$408|1;
 HEAP32[(($338)>>2)]=$421;
 HEAP32[(($339)>>2)]=$399;
 var $__p_0_i33=$_lcssa_i39;label=128;break;
 case 128: 
 var $__p_0_i33;
 assert($399 % 1 === 0);(_memcpy($__p_0_i33, $396, $399)|0);
 var $422=(($__p_0_i33+$399)|0);
 HEAP8[(($422)>>0)]=0;
 var $423=HEAP8[(($326)>>0)];
 var $424=$423&1;
 var $425=(($424<<24)>>24)==0;
 var $426=HEAP32[(($334)>>2)];
 var $_97=($425?$328:$426);
 var $427=_strlen($_97);
 var $428=($427>>>0)>4294967279;
 if($428){label=129;break;}else{label=131;break;}
 case 129: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=153;break; }
 case 130: 
 throw "Reached an unreachable!";
 case 131: 
 var $431=($427>>>0)<11;
 if($431){label=132;break;}else{label=133;break;}
 case 132: 
 var $433=$427<<1;
 var $434=(($433)&255);
 HEAP8[(($329)>>0)]=$434;
 var $__p_0_i=$331;label=140;break;
 case 133: 
 var $435=((($427)+(16))|0);
 var $436=$435&-16;
 var $437=($436|0)==0;
 var $_size_i=($437?1:$436);
 var $438=_malloc($_size_i);
 var $439=($438|0)==0;
 if($439){label=134;break;}else{var $_lcssa_i=$438;label=139;break;}
 case 134: 
 var $440=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $441=($440|0)==0;
 if($441){label=137;break;}else{label=135;break;}
 case 135: 
 var $443=$440;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$443]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=136;break; } else { label=152;break; }
 case 136: 
 var $444=_malloc($_size_i);
 var $445=($444|0)==0;
 if($445){label=134;break;}else{var $_lcssa_i=$444;label=139;break;}
 case 137: 
 var $447=___cxa_allocate_exception(4);
 var $448=$447;
 HEAP32[(($448)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($447,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=138;break; } else { label=153;break; }
 case 138: 
 throw "Reached an unreachable!";
 case 139: 
 var $_lcssa_i;
 HEAP32[(($335)>>2)]=$_lcssa_i;
 var $449=$436|1;
 HEAP32[(($336)>>2)]=$449;
 HEAP32[(($337)>>2)]=$427;
 var $__p_0_i=$_lcssa_i;label=140;break;
 case 140: 
 var $__p_0_i;
 assert($427 % 1 === 0);(_memcpy($__p_0_i, $_97, $427)|0);
 var $451=(($__p_0_i+$427)|0);
 HEAP8[(($451)>>0)]=0;
 var $452=HEAP32[(($323)>>2)];
 var $453=HEAP32[(($332)>>2)];
 var $454=($452>>>0)<($453>>>0);
 if($454){label=141;break;}else{label=147;break;}
 case 141: 
 var $456=($452|0)==0;
 if($456){var $464=0;label=146;break;}else{label=142;break;}
 case 142: 
 var $458=$452;
 assert(12 % 1 === 0);HEAP32[(($458)>>2)]=HEAP32[(($329)>>2)];HEAP32[((($458)+(4))>>2)]=HEAP32[((($329)+(4))>>2)];HEAP32[((($458)+(8))>>2)]=HEAP32[((($329)+(8))>>2)];
 var $storemerge2=0;label=143;break;
 case 143: 
 var $storemerge2;
 var $460=($storemerge2>>>0)<3;
 if($460){label=144;break;}else{label=145;break;}
 case 144: 
 var $462=(($333+($storemerge2<<2))|0);
 HEAP32[(($462)>>2)]=0;
 var $463=((($storemerge2)+(1))|0);
 var $storemerge2=$463;label=143;break;
 case 145: 
 var $_pre78=HEAP32[(($323)>>2)];
 var $464=$_pre78;label=146;break;
 case 146: 
 var $464;
 var $465=(($464+12)|0);
 HEAP32[(($323)>>2)]=$465;
 label=148;break;
 case 147: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($tokens,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=155;break; }
 case 148: 
 var $467=HEAP8[(($329)>>0)];
 var $468=$467&1;
 var $469=(($468<<24)>>24)==0;
 if($469){label=150;break;}else{label=149;break;}
 case 149: 
 var $471=HEAP32[(($335)>>2)];
 _free($471);
 label=150;break;
 case 150: 
 var $472=HEAP8[(($326)>>0)];
 var $473=$472&1;
 var $474=(($473<<24)>>24)==0;
 if($474){label=159;break;}else{label=151;break;}
 case 151: 
 var $476=HEAP32[(($334)>>2)];
 _free($476);
 label=159;break;
 case 152: 
 var $lpad_loopexit53$0 = ___cxa_find_matching_catch(); var $lpad_loopexit53$1 = tempRet0;
 var $lpad_phi55$1=$lpad_loopexit53$1;var $lpad_phi55$0=$lpad_loopexit53$0;label=154;break;
 case 153: 
 var $lpad_nonloopexit57$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit57$1 = tempRet0;
 var $lpad_phi55$1=$lpad_nonloopexit57$1;var $lpad_phi55$0=$lpad_nonloopexit57$0;label=154;break;
 case 154: 
 var $lpad_phi55$0;
 var $lpad_phi55$1;
 var $477=$lpad_phi55$0;
 var $478=$lpad_phi55$1;
 var $_048=$477;var $_049=$478;label=157;break;
 case 155: 
 var $480$0 = ___cxa_find_matching_catch(); var $480$1 = tempRet0;
 var $481=$480$0;
 var $482=$480$1;
 var $483=HEAP8[(($329)>>0)];
 var $484=$483&1;
 var $485=(($484<<24)>>24)==0;
 if($485){var $_048=$481;var $_049=$482;label=157;break;}else{label=156;break;}
 case 156: 
 var $487=HEAP32[(($335)>>2)];
 _free($487);
 var $_048=$481;var $_049=$482;label=157;break;
 case 157: 
 var $_049;
 var $_048;
 var $488=HEAP8[(($326)>>0)];
 var $489=$488&1;
 var $490=(($489<<24)>>24)==0;
 if($490){var $_1=$_048;var $_150=$_049;label=164;break;}else{label=158;break;}
 case 158: 
 var $492=HEAP32[(($334)>>2)];
 _free($492);
 var $_1=$_048;var $_150=$_049;label=164;break;
 case 159: 
 var $493=($storemerge1>>>0)<($320>>>0);
 if($493){var $from_0=$storemerge1;label=99;break;}else{label=160;break;}
 case 160: 
 var $_pre77=HEAP8[(($19)>>0)];
 var $495=$_pre77;label=161;break;
 case 161: 
 var $495;
 var $496=$495&1;
 var $497=(($496<<24)>>24)==0;
 if($497){label=163;break;}else{label=162;break;}
 case 162: 
 var $499=HEAP32[(($22)>>2)];
 _free($499);
 label=163;break;
 case 163: 
 STACKTOP=sp;return;
 case 164: 
 var $_150;
 var $_1;
 var $500=HEAP8[(($19)>>0)];
 var $501=$500&1;
 var $502=(($501<<24)>>24)==0;
 if($502){label=166;break;}else{label=165;break;}
 case 165: 
 var $504=HEAP32[(($22)>>2)];
 _free($504);
 label=166;break;
 case 166: 
 var $505$0=$_1;
 var $505$1=0;
 var $506$0=$505$0;
 var $506$1=$_150;
 ___resumeException($506$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($this,$__x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11|0)==0;
 if($12){label=13;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $15=HEAP32[(($6)>>2)];
 var $16=HEAP32[(($4)>>2)];
 var $_0=$15;label=4;break;
 case 4: 
 var $_0;
 var $18=($_0|0)==($16|0);
 if($18){label=13;break;}else{label=5;break;}
 case 5: 
 var $20=HEAP32[(($2)>>2)];
 var $21=($20|0)==0;
 if($21){var $24=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $23=HEAP32[(($_0)>>2)];
 HEAP32[(($20)>>2)]=$23;
 var $_pre=HEAP32[(($2)>>2)];
 var $24=$_pre;label=7;break;
 case 7: 
 var $24;
 var $25=(($24+4)|0);
 HEAP32[(($2)>>2)]=$25;
 var $26=(($_0+4)|0);
 var $_0=$26;label=4;break;
 case 8: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=HEAP32[(($1)>>2)];
 var $30=($29|0)==0;
 if($30){label=14;break;}else{label=9;break;}
 case 9: 
 var $_pre1=HEAP32[(($2)>>2)];
 var $33=$_pre1;label=10;break;
 case 10: 
 var $33;
 var $34=($29|0)==($33|0);
 if($34){label=12;break;}else{label=11;break;}
 case 11: 
 var $36=((($33)-(4))|0);
 HEAP32[(($2)>>2)]=$36;
 var $33=$36;label=10;break;
 case 12: 
 var $37=$29;
 _free($37);
 label=14;break;
 case 13: 
 return;
 case 14: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=($__n|0)==0;
 if($4){label=12;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_0=$__n;var $8=$_pre;label=4;break;
 case 4: 
 var $8;
 var $_0;
 var $9=($8|0)==0;
 if($9){var $11=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($8)>>2)]=0;
 var $_pre1=HEAP32[(($2)>>2)];
 var $11=$_pre1;label=6;break;
 case 6: 
 var $11;
 var $12=(($11+4)|0);
 HEAP32[(($2)>>2)]=$12;
 var $13=((($_0)-(1))|0);
 var $14=($13|0)==0;
 if($14){label=12;break;}else{var $_0=$13;var $8=$12;label=4;break;}
 case 7: 
 var $16$0 = ___cxa_find_matching_catch(); var $16$1 = tempRet0;
 var $17=HEAP32[(($1)>>2)];
 var $18=($17|0)==0;
 if($18){label=13;break;}else{label=8;break;}
 case 8: 
 var $_pre2=HEAP32[(($2)>>2)];
 var $21=$_pre2;label=9;break;
 case 9: 
 var $21;
 var $22=($17|0)==($21|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 var $24=((($21)-(4))|0);
 HEAP32[(($2)>>2)]=$24;
 var $21=$24;label=9;break;
 case 11: 
 var $25=$17;
 _free($25);
 label=13;break;
 case 12: 
 return;
 case 13: 
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($outlines,$indices){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($indices)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($indices+4)|0);
 var $_pre=HEAP32[(($6)>>2)];
 var $8=$_pre;label=2;break;
 case 2: 
 var $8;
 var $9=($5|0)==($8|0);
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=((($8)-(4))|0);
 HEAP32[(($6)>>2)]=$11;
 var $8=$11;label=2;break;
 case 4: 
 var $12=(($outlines)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($outlines+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 if($16){label=22;break;}else{label=5;break;}
 case 5: 
 var $18=(($13+4)|0);
 var $19=(($13)|0);
 var $20=(($indices+8)|0);
 var $storemerge=0;label=6;break;
 case 6: 
 var $storemerge;
 var $21=HEAP32[(($18)>>2)];
 var $22=HEAP32[(($19)>>2)];
 var $23=$21;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=(((($25|0))/(12))&-1);
 var $27=((($26)-(2))|0);
 var $28=($storemerge>>>0)<($27>>>0);
 if($28){label=7;break;}else{label=22;break;}
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $30=HEAP32[(($6)>>2)];
 var $31=HEAP32[(($20)>>2)];
 var $32=($30>>>0)<($31>>>0);
 if($32){label=8;break;}else{label=11;break;}
 case 8: 
 var $34=($30|0)==0;
 if($34){var $36=0;label=10;break;}else{label=9;break;}
 case 9: 
 HEAP32[(($30)>>2)]=0;
 var $_pre1=HEAP32[(($6)>>2)];
 var $36=$_pre1;label=10;break;
 case 10: 
 var $36;
 var $37=(($36+4)|0);
 HEAP32[(($6)>>2)]=$37;
 var $39=$37;label=12;break;
 case 11: 
 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($indices,$1);
 var $_pre2=HEAP32[(($6)>>2)];
 var $39=$_pre2;label=12;break;
 case 12: 
 var $39;
 var $40=((($storemerge)+(1))|0);
 HEAP32[(($2)>>2)]=$40;
 var $41=HEAP32[(($20)>>2)];
 var $42=($39>>>0)<($41>>>0);
 if($42){label=13;break;}else{label=16;break;}
 case 13: 
 var $44=($39|0)==0;
 if($44){var $46=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($39)>>2)]=$40;
 var $_pre3=HEAP32[(($6)>>2)];
 var $46=$_pre3;label=15;break;
 case 15: 
 var $46;
 var $47=(($46+4)|0);
 HEAP32[(($6)>>2)]=$47;
 var $49=$47;label=17;break;
 case 16: 
 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($indices,$2);
 var $_pre4=HEAP32[(($6)>>2)];
 var $49=$_pre4;label=17;break;
 case 17: 
 var $49;
 var $50=((($storemerge)+(2))|0);
 HEAP32[(($3)>>2)]=$50;
 var $51=HEAP32[(($20)>>2)];
 var $52=($49>>>0)<($51>>>0);
 if($52){label=18;break;}else{label=21;break;}
 case 18: 
 var $54=($49|0)==0;
 if($54){var $56=0;label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($49)>>2)]=$50;
 var $_pre5=HEAP32[(($6)>>2)];
 var $56=$_pre5;label=20;break;
 case 20: 
 var $56;
 var $57=(($56+4)|0);
 HEAP32[(($6)>>2)]=$57;
 var $storemerge=$40;label=6;break;
 case 21: 
 __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($indices,$3);
 var $storemerge=$40;label=6;break;
 case 22: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($agg_result,$m,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$1;
 var $$etemp$0$0=28;
 var $$etemp$0$1=0;

 var $pu_sroa_33_0=0;label=2;break;
 case 2: 
 var $pu_sroa_33_0;
 var $4=($pu_sroa_33_0|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=((($pu_sroa_33_0)-(4))|0);
 var $pu_sroa_33_0=$6;label=2;break;
 case 4: 
 var $7=($n|0)==0;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=(($m+36)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($agg_result)|0);
 HEAP32[(($11)>>2)]=$10;
 label=50;break;
 case 6: 
 var $13=(($m+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($m+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 var $_=($17?$14:$16);
 var $_17=($17?0:$16);
 var $_18=($17?0:$14);
 var $18=(($m+32)|0);
 var $19=$_;
 var $20=$14;
 var $21=((($19)-($20))|0);
 var $22=$21>>5;
 var $23=((($22)+($n))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($18,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=52;break; }
 case 7: 
 var $24=(($m+44)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($25)+($n))|0);
 HEAP32[(($24)>>2)]=$26;
 var $27=HEAP32[(($15)>>2)];
 var $28=HEAP32[(($13)>>2)];
 var $29=$27;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>5;
 var $33=((($32)-($n))|0);
 var $34=(($28+($33<<5))|0);
 var $35=(($m+140)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($m+144)|0);
 var $38=$37;
 var $39=(($1)|0);
 var $40=(($1+4)|0);
 var $41=$40;
 var $42=(($1+16)|0);
 var $43=$42;
 var $44=(($1+12)|0);
 var $45=$40;
 var $46=(($45+1)|0);
 var $47=(($40)|0);
 var $48=(($1+8)|0);
 var $ai_i_sroa_0_0=$36;label=8;break;
 case 8: 
 var $ai_i_sroa_0_0;
 var $50=($ai_i_sroa_0_0|0)==($38|0);
 if($50){label=34;break;}else{label=9;break;}
 case 9: 
 var $52=(($ai_i_sroa_0_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 HEAP32[(($39)>>2)]=$53;
 var $54=(($ai_i_sroa_0_0+20)|0);
 var $55=$54;
 var $56=HEAP8[(($55)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
 var $88=$53;label=24;break;
 case 11: 
 var $61=(($ai_i_sroa_0_0+28)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($ai_i_sroa_0_0+24)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64>>>0)>4294967279;
 if($65){label=12;break;}else{label=14;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=52;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $68=($64>>>0)<11;
 if($68){label=15;break;}else{label=16;break;}
 case 15: 
 var $70=$64<<1;
 var $71=(($70)&255);
 HEAP8[(($41)>>0)]=$71;
 var $__p_0_i_i_i=$46;label=23;break;
 case 16: 
 var $72=((($64)+(16))|0);
 var $73=$72&-16;
 var $74=($73|0)==0;
 var $_size_i_i=($74?1:$73);
 var $75=_malloc($_size_i_i);
 var $76=($75|0)==0;
 if($76){label=17;break;}else{var $_lcssa_i_i=$75;label=22;break;}
 case 17: 
 var $77=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $78=($77|0)==0;
 if($78){label=20;break;}else{label=18;break;}
 case 18: 
 var $80=$77;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=51;break; }
 case 19: 
 var $81=_malloc($_size_i_i);
 var $82=($81|0)==0;
 if($82){label=17;break;}else{var $_lcssa_i_i=$81;label=22;break;}
 case 20: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 HEAP32[(($85)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=52;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $_lcssa_i_i;
 HEAP32[(($44)>>2)]=$_lcssa_i_i;
 var $86=$73|1;
 HEAP32[(($47)>>2)]=$86;
 HEAP32[(($48)>>2)]=$64;
 var $__p_0_i_i_i=$_lcssa_i_i;label=23;break;
 case 23: 
 var $__p_0_i_i_i;
 assert($64 % 1 === 0);(_memcpy($__p_0_i_i_i, $62, $64)|0);
 var $87=(($__p_0_i_i_i+$64)|0);
 HEAP8[(($87)>>0)]=0;
 var $_pre=HEAP32[(($39)>>2)];
 var $88=$_pre;label=24;break;
 case 24: 
 var $88;
 var $89=(($ai_i_sroa_0_0+32)|0);
 var $90=$89;
 assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];
 var $91=HEAP32[(($15)>>2)];
 var $92=HEAP32[(($13)>>2)];
 var $93=$91;
 var $94=$92;
 var $95=((($93)-($94))|0);
 var $96=$95>>5;
 var $97=$88;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+8)|0);
 var $100=HEAP32[(($99)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($88,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $101=HEAP8[(($41)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=27;break;}else{label=26;break;}
 case 26: 
 var $105=HEAP32[(($44)>>2)];
 _free($105);
 label=27;break;
 case 27: 
 var $106=(($ai_i_sroa_0_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=28;break;}else{var $storemerge_i_i=$107;label=29;break;}
 case 28: 
 var $109=(($ai_i_sroa_0_0)|0);
 var $_0=$109;label=30;break;
 case 29: 
 var $storemerge_i_i;
 var $111=(($storemerge_i_i)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 if($113){var $120=$storemerge_i_i;label=31;break;}else{var $storemerge_i_i=$112;label=29;break;}
 case 30: 
 var $_0;
 var $115=(($_0+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($_0|0)==($118|0);
 if($119){var $120=$116;label=31;break;}else{var $_0=$116;label=30;break;}
 case 31: 
 var $120;
 var $121=$120;
 var $ai_i_sroa_0_0=$121;label=8;break;
 case 32: 
 var $123$0 = ___cxa_find_matching_catch(); var $123$1 = tempRet0;
 var $124=HEAP8[(($41)>>0)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){var $eh_lpad_body$1=$123$1;var $eh_lpad_body$0=$123$0;label=53;break;}else{label=33;break;}
 case 33: 
 var $128=HEAP32[(($44)>>2)];
 _free($128);
 var $eh_lpad_body$1=$123$1;var $eh_lpad_body$0=$123$0;label=53;break;
 case 34: 
 var $130=HEAP32[(($13)>>2)];
 var $131=($_18|0)==0;
 var $132=($130|0)==($_18|0);
 var $or_cond=$131|$132;
 if($or_cond){label=49;break;}else{label=35;break;}
 case 35: 
 var $134=$_18;
 var $fi_i_sroa_0_0=$130;label=36;break;
 case 36: 
 var $fi_i_sroa_0_0;
 var $136=($fi_i_sroa_0_0|0)==($34|0);
 if($136){label=49;break;}else{label=37;break;}
 case 37: 
 var $138=(($fi_i_sroa_0_0+28)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$139&1;
 var $141=($140|0)==0;
 if($141){var $storemerge_i=0;label=38;break;}else{label=48;break;}
 case 38: 
 var $storemerge_i;
 var $142=($storemerge_i|0)<3;
 if($142){label=39;break;}else{label=48;break;}
 case 39: 
 var $144=($storemerge_i|0)>-1;
 if($144){label=42;break;}else{label=40;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,618,10256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=52;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $146=(($fi_i_sroa_0_0+($storemerge_i<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 var $149=($147>>>0)<($_18>>>0);
 var $or_cond19=$148|$149;
 var $150=($147>>>0)>($_17>>>0);
 var $or_cond20=$or_cond19|$150;
 if($or_cond20){label=47;break;}else{label=43;break;}
 case 43: 
 var $152=($147>>>0)<($_17>>>0);
 if($152){label=46;break;}else{label=44;break;}
 case 44: 
 (function() { try { __THREW__ = 0; return ___assert_fail(1792,3376,134,10424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=52;break; }
 case 45: 
 throw "Reached an unreachable!";
 case 46: 
 var $155=$147;
 var $156=((($155)-($134))|0);
 var $157=$156>>5;
 var $158=(($130+($157<<5))|0);
 HEAP32[(($146)>>2)]=$158;
 label=47;break;
 case 47: 
 var $159=((($storemerge_i)+(1))|0);
 var $storemerge_i=$159;label=38;break;
 case 48: 
 var $160=(($fi_i_sroa_0_0+32)|0);
 var $fi_i_sroa_0_0=$160;label=36;break;
 case 49: 
 var $161=(($agg_result)|0);
 HEAP32[(($161)>>2)]=$34;
 label=50;break;
 case 50: 
 var $$etemp$1$0=28;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 51: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=53;break;
 case 52: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=53;break;
 case 53: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddEdgesERS2_j($agg_result,$m,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$1;
 var $$etemp$0$0=28;
 var $$etemp$0$1=0;

 var $3=($n|0)==0;
 if($3){label=2;break;}else{var $pu_sroa_25_0=0;label=3;break;}
 case 2: 
 var $5=(($m+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($agg_result)|0);
 HEAP32[(($7)>>2)]=$6;
 label=69;break;
 case 3: 
 var $pu_sroa_25_0;
 var $9=($pu_sroa_25_0|0)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=((($pu_sroa_25_0)-(4))|0);
 var $pu_sroa_25_0=$11;label=3;break;
 case 5: 
 var $12=(($m+16)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($m+20)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $_=($16?$13:$15);
 var $_20=($16?0:$13);
 var $17=$_;
 var $18=$13;
 var $19=((($17)-($18))|0);
 var $20=((($19)+($n))|0);
 var $21=(($m+16)|0);
 var $22=($19>>>0)<($20>>>0);
 if($22){label=6;break;}else{label=37;break;}
 case 6: 
 var $24=(($m+24)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 var $27=((($26)-($17))|0);
 var $28=($27>>>0)<($n>>>0);
 if($28){label=9;break;}else{var $_09=$n;var $29=$_;label=7;break;}
 case 7: 
 var $29;
 var $_09;
 var $30=(($29+1)|0);
 var $31=((($_09)-(1))|0);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{var $_09=$31;var $29=$30;label=7;break;}
 case 8: 
 HEAP32[(($14)>>2)]=$30;
 label=41;break;
 case 9: 
 var $34=($20|0)<0;
 if($34){label=10;break;}else{label=21;break;}
 case 10: 
 var $35=___cxa_allocate_exception(8);
 var $36=$35;
 HEAP32[(($36)>>2)]=15352;
 var $37=(($35+4)|0);
 var $38=_strlen(1736);
 var $39=((($38)+(13))|0);
 var $40=($39|0)==0;
 var $_size_i_i_i_i=($40?1:$39);
 var $41=_malloc($_size_i_i_i_i);
 var $42=($41|0)==0;
 if($42){label=11;break;}else{var $_lcssa_i_i_i_i=$41;label=16;break;}
 case 11: 
 var $43=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $44=($43|0)==0;
 if($44){label=14;break;}else{label=12;break;}
 case 12: 
 var $46=$43;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $47=_malloc($_size_i_i_i_i);
 var $48=($47|0)==0;
 if($48){label=11;break;}else{var $_lcssa_i_i_i_i=$47;label=16;break;}
 case 14: 
 var $50=___cxa_allocate_exception(4);
 var $51=$50;
 HEAP32[(($51)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $_lcssa_i_i_i_i;
 var $52=$_lcssa_i_i_i_i;
 HEAP32[(($52)>>2)]=$38;
 var $53=(($_lcssa_i_i_i_i+4)|0);
 var $54=$53;
 HEAP32[(($54)>>2)]=$38;
 var $55=(($_lcssa_i_i_i_i+8)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=0;
 var $57=(($_lcssa_i_i_i_i+12)|0);
 var $58=((($38)+(1))|0);
 assert($58 % 1 === 0);(_memcpy($57, 1736, $58)|0);
 var $59=$37;
 HEAP32[(($59)>>2)]=$57;
 HEAP32[(($36)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=72;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=20;break;
 case 19: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=20;break;
 case 20: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($35);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=73;break;
 case 21: 
 var $62=((($26)-($18))|0);
 var $63=($62>>>0)<1073741823;
 if($63){label=22;break;}else{var $67=2147483647;label=23;break;}
 case 22: 
 var $64=$62<<1;
 var $65=($64>>>0)<($20>>>0);
 var $_21=($65?$20:$64);
 var $66=($_21|0)==0;
 if($66){var $81=0;var $80=$_21;label=30;break;}else{var $67=$_21;label=23;break;}
 case 23: 
 var $67;
 var $68=_malloc($67);
 var $69=($68|0)==0;
 if($69){label=24;break;}else{var $_lcssa_i_i_i_i_i=$68;label=29;break;}
 case 24: 
 var $70=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $71=($70|0)==0;
 if($71){label=27;break;}else{label=25;break;}
 case 25: 
 var $73=$70;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=71;break; }
 case 26: 
 var $74=_malloc($67);
 var $75=($74|0)==0;
 if($75){label=24;break;}else{var $_lcssa_i_i_i_i_i=$74;label=29;break;}
 case 27: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 HEAP32[(($78)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($77,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=72;break; }
 case 28: 
 throw "Reached an unreachable!";
 case 29: 
 var $_lcssa_i_i_i_i_i;
 var $79=$_lcssa_i_i_i_i_i;
 var $81=$79;var $80=$67;label=30;break;
 case 30: 
 var $80;
 var $81;
 var $82=(($81+$19)|0);
 var $83=(($81+$80)|0);
 var $_08=$n;var $__v_i_i_i_sroa_15_0=$82;label=31;break;
 case 31: 
 var $__v_i_i_i_sroa_15_0;
 var $_08;
 var $84=(($__v_i_i_i_sroa_15_0+1)|0);
 var $85=((($_08)-(1))|0);
 var $86=($85|0)==0;
 if($86){label=32;break;}else{var $_08=$85;var $__v_i_i_i_sroa_15_0=$84;label=31;break;}
 case 32: 
 var $87=HEAP32[(($21)>>2)];
 var $88=HEAP32[(($14)>>2)];
 var $89=$88;
 var $90=$87;
 var $91=((($89)-($90))|0);
 var $_sum=((($19)-($91))|0);
 var $92=(($81+$_sum)|0);
 var $93=(($92)|0);
 var $94=(($87)|0);
 assert($91 % 1 === 0);(_memcpy($93, $94, $91)|0);
 var $95=HEAP32[(($21)>>2)];
 HEAP32[(($21)>>2)]=$92;
 var $96=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=$84;
 HEAP32[(($24)>>2)]=$83;
 var $__v_i_i_i_sroa_15_1=$96;label=33;break;
 case 33: 
 var $__v_i_i_i_sroa_15_1;
 var $98=($95|0)==($__v_i_i_i_sroa_15_1|0);
 if($98){label=35;break;}else{label=34;break;}
 case 34: 
 var $100=((($__v_i_i_i_sroa_15_1)-(1))|0);
 var $__v_i_i_i_sroa_15_1=$100;label=33;break;
 case 35: 
 var $101=($95|0)==0;
 if($101){label=41;break;}else{label=36;break;}
 case 36: 
 var $103=(($95)|0);
 _free($103);
 label=41;break;
 case 37: 
 var $105=($19>>>0)>($20>>>0);
 if($105){label=38;break;}else{label=41;break;}
 case 38: 
 var $107=(($13+$20)|0);
 var $109=$_;label=39;break;
 case 39: 
 var $109;
 var $110=($107|0)==($109|0);
 if($110){label=41;break;}else{label=40;break;}
 case 40: 
 var $112=((($109)-(1))|0);
 HEAP32[(($14)>>2)]=$112;
 var $109=$112;label=39;break;
 case 41: 
 var $113=(($m+28)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=((($114)+($n))|0);
 HEAP32[(($113)>>2)]=$115;
 var $116=(($m+128)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($m+132)|0);
 var $119=$118;
 var $120=(($1)|0);
 var $121=(($1+4)|0);
 var $122=$121;
 var $123=(($1+16)|0);
 var $124=$123;
 var $125=(($1+12)|0);
 var $126=$121;
 var $127=(($126+1)|0);
 var $128=(($121)|0);
 var $129=(($1+8)|0);
 var $ai_i_sroa_0_0=$117;label=42;break;
 case 42: 
 var $ai_i_sroa_0_0;
 var $131=($ai_i_sroa_0_0|0)==($119|0);
 if($131){label=68;break;}else{label=43;break;}
 case 43: 
 var $133=(($ai_i_sroa_0_0+16)|0);
 var $134=HEAP32[(($133)>>2)];
 HEAP32[(($120)>>2)]=$134;
 var $135=(($ai_i_sroa_0_0+20)|0);
 var $136=$135;
 var $137=HEAP8[(($136)>>0)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=44;break;}else{label=45;break;}
 case 44: 
 assert(12 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($122)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];
 var $169=$134;label=58;break;
 case 45: 
 var $142=(($ai_i_sroa_0_0+28)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($ai_i_sroa_0_0+24)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145>>>0)>4294967279;
 if($146){label=46;break;}else{label=48;break;}
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=72;break; }
 case 47: 
 throw "Reached an unreachable!";
 case 48: 
 var $149=($145>>>0)<11;
 if($149){label=49;break;}else{label=50;break;}
 case 49: 
 var $151=$145<<1;
 var $152=(($151)&255);
 HEAP8[(($122)>>0)]=$152;
 var $__p_0_i_i_i=$127;label=57;break;
 case 50: 
 var $153=((($145)+(16))|0);
 var $154=$153&-16;
 var $155=($154|0)==0;
 var $_size_i_i=($155?1:$154);
 var $156=_malloc($_size_i_i);
 var $157=($156|0)==0;
 if($157){label=51;break;}else{var $_lcssa_i_i=$156;label=56;break;}
 case 51: 
 var $158=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $159=($158|0)==0;
 if($159){label=54;break;}else{label=52;break;}
 case 52: 
 var $161=$158;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=70;break; }
 case 53: 
 var $162=_malloc($_size_i_i);
 var $163=($162|0)==0;
 if($163){label=51;break;}else{var $_lcssa_i_i=$162;label=56;break;}
 case 54: 
 var $165=___cxa_allocate_exception(4);
 var $166=$165;
 HEAP32[(($166)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($165,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=72;break; }
 case 55: 
 throw "Reached an unreachable!";
 case 56: 
 var $_lcssa_i_i;
 HEAP32[(($125)>>2)]=$_lcssa_i_i;
 var $167=$154|1;
 HEAP32[(($128)>>2)]=$167;
 HEAP32[(($129)>>2)]=$145;
 var $__p_0_i_i_i=$_lcssa_i_i;label=57;break;
 case 57: 
 var $__p_0_i_i_i;
 assert($145 % 1 === 0);(_memcpy($__p_0_i_i_i, $143, $145)|0);
 var $168=(($__p_0_i_i_i+$145)|0);
 HEAP8[(($168)>>0)]=0;
 var $_pre=HEAP32[(($120)>>2)];
 var $169=$_pre;label=58;break;
 case 58: 
 var $169;
 var $170=(($ai_i_sroa_0_0+32)|0);
 var $171=$170;
 assert(12 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($171)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($171)+(4))>>2)];HEAP32[((($124)+(8))>>2)]=HEAP32[((($171)+(8))>>2)];
 var $172=HEAP32[(($14)>>2)];
 var $173=HEAP32[(($12)>>2)];
 var $174=$172;
 var $175=$173;
 var $176=((($174)-($175))|0);
 var $177=$169;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+8)|0);
 var $180=HEAP32[(($179)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($169,$176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=66;break; }
 case 59: 
 var $181=HEAP8[(($122)>>0)];
 var $182=$181&1;
 var $183=(($182<<24)>>24)==0;
 if($183){label=61;break;}else{label=60;break;}
 case 60: 
 var $185=HEAP32[(($125)>>2)];
 _free($185);
 label=61;break;
 case 61: 
 var $186=(($ai_i_sroa_0_0+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($187|0)==0;
 if($188){label=62;break;}else{var $storemerge_i3_i=$187;label=63;break;}
 case 62: 
 var $189=(($ai_i_sroa_0_0)|0);
 var $_0=$189;label=64;break;
 case 63: 
 var $storemerge_i3_i;
 var $191=(($storemerge_i3_i)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){var $200=$storemerge_i3_i;label=65;break;}else{var $storemerge_i3_i=$192;label=63;break;}
 case 64: 
 var $_0;
 var $195=(($_0+8)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($_0|0)==($198|0);
 if($199){var $200=$196;label=65;break;}else{var $_0=$196;label=64;break;}
 case 65: 
 var $200;
 var $201=$200;
 var $ai_i_sroa_0_0=$201;label=42;break;
 case 66: 
 var $203$0 = ___cxa_find_matching_catch(); var $203$1 = tempRet0;
 var $204=HEAP8[(($122)>>0)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){var $eh_lpad_body$1=$203$1;var $eh_lpad_body$0=$203$0;label=73;break;}else{label=67;break;}
 case 67: 
 var $208=HEAP32[(($125)>>2)];
 _free($208);
 var $eh_lpad_body$1=$203$1;var $eh_lpad_body$0=$203$0;label=73;break;
 case 68: 
 var $209=HEAP32[(($12)>>2)];
 var $210=($_20|0)==0;
 var $211=HEAP32[(($14)>>2)];
 var $212=$211;
 var $213=$209;
 var $214=((($212)-($213))|0);
 var $215=((($214)-($n))|0);
 var $216=(($209+$215)|0);
 var $217=(($agg_result)|0);
 HEAP32[(($217)>>2)]=$216;
 label=69;break;
 case 69: 
 var $$etemp$1$0=28;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 70: 
 var $lpad_loopexit12$0 = ___cxa_find_matching_catch(); var $lpad_loopexit12$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit12$1;var $eh_lpad_body$0=$lpad_loopexit12$0;label=73;break;
 case 71: 
 var $lpad_loopexit15$0 = ___cxa_find_matching_catch(); var $lpad_loopexit15$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit15$1;var $eh_lpad_body$0=$lpad_loopexit15$0;label=73;break;
 case 72: 
 var $lpad_nonloopexit16$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit16$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit16$1;var $eh_lpad_body$0=$lpad_nonloopexit16$0;label=73;break;
 case 73: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io11ImporterOBJI6MyMeshE14ObjIndexedFaceENS_9allocatorIS7_EEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=20;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+4)|0);
 label=3;break;
 case 3: 
 var $6=HEAP32[(($5)>>2)];
 var $7=($2|0)==($6|0);
 if($7){label=19;break;}else{label=4;break;}
 case 4: 
 var $9=((($6)-(48))|0);
 HEAP32[(($5)>>2)]=$9;
 var $10=((($6)-(48)+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=5;break;}
 case 5: 
 var $14=((($6)-(48)+28)|0);
 var $_pre2=HEAP32[(($14)>>2)];
 var $16=$_pre2;label=6;break;
 case 6: 
 var $16;
 var $17=($11|0)==($16|0);
 if($17){label=8;break;}else{label=7;break;}
 case 7: 
 var $19=((($16)-(4))|0);
 HEAP32[(($14)>>2)]=$19;
 var $16=$19;label=6;break;
 case 8: 
 var $20=$11;
 _free($20);
 label=9;break;
 case 9: 
 var $21=((($6)-(48)+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=10;break;}
 case 10: 
 var $25=((($6)-(48)+16)|0);
 var $_pre1=HEAP32[(($25)>>2)];
 var $27=$_pre1;label=11;break;
 case 11: 
 var $27;
 var $28=($22|0)==($27|0);
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 var $30=((($27)-(4))|0);
 HEAP32[(($25)>>2)]=$30;
 var $27=$30;label=11;break;
 case 13: 
 var $31=$22;
 _free($31);
 label=14;break;
 case 14: 
 var $32=(($9)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=3;break;}else{label=15;break;}
 case 15: 
 var $36=((($6)-(48)+4)|0);
 var $_pre=HEAP32[(($36)>>2)];
 var $38=$_pre;label=16;break;
 case 16: 
 var $38;
 var $39=($33|0)==($38|0);
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 var $41=((($38)-(4))|0);
 HEAP32[(($36)>>2)]=$41;
 var $38=$41;label=16;break;
 case 18: 
 var $42=$33;
 _free($42);
 label=3;break;
 case 19: 
 var $43=HEAP32[(($1)>>2)];
 var $44=$43;
 _free($44);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17124;
 var $2=(($this+108)|0);
 HEAP32[(($2)>>2)]=17144;
 var $3=(($this+8)|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($3);
 var $4=(($this+108)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 return;
}

//Func
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=17124;
 var $_sum=((($6)+(108))|0);
 var $9=(($1+$_sum)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=17144;
 var $_sum1=((($6)+(8))|0);
 var $11=(($1+$_sum1)|0);
 var $12=$11;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($12);
 var $13=$9;
 __ZNSt3__18ios_baseD2Ev($13);
 return;
}

//Func
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17124;
 var $2=$this;
 var $3=(($this+108)|0);
 HEAP32[(($3)>>2)]=17144;
 var $4=(($this+8)|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($4);
 var $5=(($this+108)|0);
 __ZNSt3__18ios_baseD2Ev($5);
 _free($2);
 return;
}

//Func
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=17124;
 var $_sum=((($6)+(108))|0);
 var $9=(($1+$_sum)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=17144;
 var $_sum1=((($6)+(8))|0);
 var $11=(($1+$_sum1)|0);
 var $12=$11;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($12);
 var $13=$9;
 __ZNSt3__18ios_baseD2Ev($13);
 _free($7);
 return;
}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17360;
 var $2=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 var $6=___cxa_begin_catch($5);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $8=(($this+96)|0);
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=4;break;}
 case 4: 
 var $13=(($this+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=8;break;}else{label=5;break;}
 case 5: 
 _free($14);
 label=8;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(0); var $18$1 = tempRet0;
 var $19=$18$0;
 HEAP32[(($1)>>2)]=17048;
 var $20=(($this+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+4)|0);
 var $23=(tempValue=HEAP32[(($22)>>2)],HEAP32[(($22)>>2)]=tempValue+-1,tempValue);
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=14;break;}
 case 7: 
 var $26=(($21)|0);
 var $27=$21;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($26);
 label=14;break;
 case 8: 
 var $32=(($this+97)|0);
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=9;break;}
 case 9: 
 var $37=(($this+56)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 _free($38);
 label=11;break;
 case 11: 
 HEAP32[(($1)>>2)]=17048;
 var $42=(($this+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+4)|0);
 var $45=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+-1,tempValue);
 var $46=($45|0)==0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=(($43)|0);
 var $49=$43;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+8)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($48);
 label=13;break;
 case 13: 
 return;
 case 14: 
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $__rt_2=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+24)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 var $11=($9|0)==0;
 var $this_=($11?$this:0);
 var $12=_fclose($2);
 var $13=($12|0)==0;
 if($13){label=5;break;}else{var $__rt_2=0;label=6;break;}
 case 4: 
 var $14$0 = ___cxa_find_matching_catch(); var $14$1 = tempRet0;
 var $15=$14$1;
 var $16=$14$0;
 var $17=_fclose($2);
 var $18$0=$16;
 var $18$1=0;
 var $19$0=$18$0;
 var $19$1=$15;
 ___resumeException($19$0)
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $__rt_2=$this_;label=6;break;
 case 6: 
 var $__rt_2;
 return $__rt_2;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=(($__loc)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=__ZNSt3__16locale2id5__getEv(33520);
 var $9=(($7+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($7+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=15224;
 ___cxa_throw($21,26112,(1060));
 throw "Reached an unreachable!";
 case 4: 
 var $23=$19;
 var $24=(($this+68)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=(($this+98)|0);
 var $26=HEAP8[(($25)>>0)];
 var $27=$26&1;
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+28)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($23);
 var $33=($32&1);
 HEAP8[(($25)>>0)]=$33;
 var $34=($27&255);
 var $35=($32&1);
 var $36=($34|0)==($35|0);
 if($36){label=22;break;}else{label=5;break;}
 case 5: 
 var $38=(($this+8)|0);
 var $39=$38;
 HEAP32[(($39)>>2)]=0; HEAP32[((($39)+(4))>>2)]=0; HEAP32[((($39)+(8))>>2)]=0; HEAP32[((($39)+(12))>>2)]=0; HEAP32[((($39)+(16))>>2)]=0; HEAP32[((($39)+(20))>>2)]=0;
 var $40=(($this+96)|0);
 var $41=HEAP8[(($40)>>0)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($32){label=6;break;}else{label=10;break;}
 case 6: 
 var $_pre=(($this+32)|0);
 if($43){var $_pre_phi=$_pre;label=9;break;}else{label=7;break;}
 case 7: 
 var $46=HEAP32[(($_pre)>>2)];
 var $47=($46|0)==0;
 if($47){var $_pre_phi=$_pre;label=9;break;}else{label=8;break;}
 case 8: 
 _free($46);
 var $_pre_phi=$_pre;label=9;break;
 case 9: 
 var $_pre_phi;
 var $49=(($this+97)|0);
 var $50=HEAP8[(($49)>>0)];
 var $51=$50&1;
 HEAP8[(($40)>>0)]=$51;
 var $52=(($this+60)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+52)|0);
 HEAP32[(($54)>>2)]=$53;
 var $55=(($this+56)|0);
 var $56=HEAP32[(($55)>>2)];
 HEAP32[(($_pre_phi)>>2)]=$56;
 HEAP32[(($52)>>2)]=0;
 HEAP32[(($55)>>2)]=0;
 HEAP8[(($49)>>0)]=0;
 label=22;break;
 case 10: 
 if($43){label=11;break;}else{label=17;break;}
 case 11: 
 var $59=(($this+32)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($this+44)|0);
 var $62=($60|0)==($61|0);
 if($62){label=17;break;}else{label=12;break;}
 case 12: 
 var $64=(($this+52)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($this+60)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=(($this+56)|0);
 HEAP32[(($67)>>2)]=$60;
 var $68=(($this+97)|0);
 HEAP8[(($68)>>0)]=0;
 var $69=($65|0)==0;
 var $_size_i=($69?1:$65);
 var $70=_malloc($_size_i);
 var $71=($70|0)==0;
 if($71){label=13;break;}else{var $_lcssa_i=$70;label=16;break;}
 case 13: 
 var $72=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $73=($72|0)==0;
 if($73){label=15;break;}else{label=14;break;}
 case 14: 
 var $75=$72;
 FUNCTION_TABLE[$75]();
 var $76=_malloc($_size_i);
 var $77=($76|0)==0;
 if($77){label=13;break;}else{var $_lcssa_i=$76;label=16;break;}
 case 15: 
 var $79=___cxa_allocate_exception(4);
 var $80=$79;
 HEAP32[(($80)>>2)]=15192;
 ___cxa_throw($79,26096,(782));
 throw "Reached an unreachable!";
 case 16: 
 var $_lcssa_i;
 HEAP32[(($59)>>2)]=$_lcssa_i;
 HEAP8[(($40)>>0)]=1;
 label=22;break;
 case 17: 
 var $82=(($this+52)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($this+60)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=($83|0)==0;
 var $_size_i1=($85?1:$83);
 var $86=_malloc($_size_i1);
 var $87=($86|0)==0;
 if($87){label=18;break;}else{var $_lcssa_i3=$86;label=21;break;}
 case 18: 
 var $88=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $89=($88|0)==0;
 if($89){label=20;break;}else{label=19;break;}
 case 19: 
 var $91=$88;
 FUNCTION_TABLE[$91]();
 var $92=_malloc($_size_i1);
 var $93=($92|0)==0;
 if($93){label=18;break;}else{var $_lcssa_i3=$92;label=21;break;}
 case 20: 
 var $95=___cxa_allocate_exception(4);
 var $96=$95;
 HEAP32[(($96)>>2)]=15192;
 ___cxa_throw($95,26096,(782));
 throw "Reached an unreachable!";
 case 21: 
 var $_lcssa_i3;
 var $97=(($this+56)|0);
 HEAP32[(($97)>>2)]=$_lcssa_i3;
 var $98=(($this+97)|0);
 HEAP8[(($98)>>0)]=1;
 label=22;break;
 case 22: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=(($this+96)|0);
 var $3=$1;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0; HEAP32[((($3)+(16))>>2)]=0; HEAP32[((($3)+(20))>>2)]=0;
 var $4=HEAP8[(($2)>>0)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 var $13=(($this+97)|0);
 var $14=HEAP8[(($13)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=5;break;}
 case 5: 
 var $18=(($this+56)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 _free($19);
 label=7;break;
 case 7: 
 var $23=(($this+52)|0);
 HEAP32[(($23)>>2)]=$__n;
 var $24=($__n>>>0)>8;
 if($24){label=8;break;}else{label=15;break;}
 case 8: 
 var $26=(($this+98)|0);
 var $27=HEAP8[(($26)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 var $30=($__s|0)==0;
 var $or_cond=$29|$30;
 if($or_cond){label=10;break;}else{label=9;break;}
 case 9: 
 var $32=(($this+32)|0);
 HEAP32[(($32)>>2)]=$__s;
 HEAP8[(($2)>>0)]=0;
 var $_pre_phi=$26;label=16;break;
 case 10: 
 var $34=($__n|0)==0;
 var $_size_i=($34?1:$__n);
 var $35=_malloc($_size_i);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{var $_lcssa_i=$35;label=14;break;}
 case 11: 
 var $37=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $40=$37;
 FUNCTION_TABLE[$40]();
 var $41=_malloc($_size_i);
 var $42=($41|0)==0;
 if($42){label=11;break;}else{var $_lcssa_i=$41;label=14;break;}
 case 13: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=15192;
 ___cxa_throw($44,26096,(782));
 throw "Reached an unreachable!";
 case 14: 
 var $_lcssa_i;
 var $46=(($this+32)|0);
 HEAP32[(($46)>>2)]=$_lcssa_i;
 HEAP8[(($2)>>0)]=1;
 var $_pre_phi=$26;label=16;break;
 case 15: 
 var $48=(($this+44)|0);
 var $49=(($this+32)|0);
 HEAP32[(($49)>>2)]=$48;
 HEAP32[(($23)>>2)]=8;
 HEAP8[(($2)>>0)]=0;
 var $_pre=(($this+98)|0);
 var $_pre_phi=$_pre;label=16;break;
 case 16: 
 var $_pre_phi;
 var $51=HEAP8[(($_pre_phi)>>0)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=17;break;}else{label=24;break;}
 case 17: 
 var $54=($__n|0)<8;
 var $___n=($54?8:$__n);
 var $55=(($this+60)|0);
 HEAP32[(($55)>>2)]=$___n;
 var $56=($__s|0)!=0;
 var $57=($___n>>>0)>7;
 var $or_cond5=$56&$57;
 if($or_cond5){label=18;break;}else{label=19;break;}
 case 18: 
 var $59=(($this+56)|0);
 HEAP32[(($59)>>2)]=$__s;
 HEAP8[(($13)>>0)]=0;
 label=25;break;
 case 19: 
 var $61=($___n|0)==0;
 var $_size_i1=($61?1:$___n);
 var $62=_malloc($_size_i1);
 var $63=($62|0)==0;
 if($63){label=20;break;}else{var $_lcssa_i3=$62;label=23;break;}
 case 20: 
 var $64=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $65=($64|0)==0;
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $67=$64;
 FUNCTION_TABLE[$67]();
 var $68=_malloc($_size_i1);
 var $69=($68|0)==0;
 if($69){label=20;break;}else{var $_lcssa_i3=$68;label=23;break;}
 case 22: 
 var $71=___cxa_allocate_exception(4);
 var $72=$71;
 HEAP32[(($72)>>2)]=15192;
 ___cxa_throw($71,26096,(782));
 throw "Reached an unreachable!";
 case 23: 
 var $_lcssa_i3;
 var $73=(($this+56)|0);
 HEAP32[(($73)>>2)]=$_lcssa_i3;
 HEAP8[(($13)>>0)]=1;
 label=25;break;
 case 24: 
 var $75=(($this+60)|0);
 HEAP32[(($75)>>2)]=0;
 var $76=(($this+56)|0);
 HEAP32[(($76)>>2)]=0;
 HEAP8[(($13)>>0)]=0;
 label=25;break;
 case 25: 
 var $78=(($this)|0);
 return $78;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this+68)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=___cxa_allocate_exception(4);
 var $7=$6;
 HEAP32[(($7)>>2)]=15224;
 ___cxa_throw($6,26112,(1060));
 throw "Reached an unreachable!";
 case 3: 
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($3);
 var $14=(($this+64)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=4;break;}
 case 4: 
 var $18=($13|0)>=1;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $19=(($__off$0|0) == ($$etemp$0$0|0)) & (($__off$1|0) == ($$etemp$0$1|0));
 var $or_cond=$18|$19;
 if($or_cond){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$this;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+24)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=FUNCTION_TABLE[$24]($this);
 var $26=($25|0)==0;
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $28=$agg_result;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $st$2$0=(($28)|0);
 HEAP32[(($st$2$0)>>2)]=$$etemp$1$0;
 var $st$3$1=(($28+4)|0);
 HEAP32[(($st$3$1)>>2)]=$$etemp$1$1;
 var $29=(($agg_result+8)|0);
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $st$5$0=(($29)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($29+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 label=16;break;
 case 7: 
 if(($__way|0)==0){ var $__whence_0=0;label=11;break;}else if(($__way|0)==1){ label=8;break;}else if(($__way|0)==2){ label=9;break;}else{label=10;break;}
 case 8: 
 var $__whence_0=$__way;label=11;break;
 case 9: 
 var $__whence_0=$__way;label=11;break;
 case 10: 
 var $34=$agg_result;
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $st$8$0=(($34)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$7$0;
 var $st$9$1=(($34+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$7$1;
 var $35=(($agg_result+8)|0);
 var $$etemp$10$0=-1;
 var $$etemp$10$1=-1;
 var $st$11$0=(($35)|0);
 HEAP32[(($st$11$0)>>2)]=$$etemp$10$0;
 var $st$12$1=(($35+4)|0);
 HEAP32[(($st$12$1)>>2)]=$$etemp$10$1;
 label=16;break;
 case 11: 
 var $__whence_0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($13|0)>0;
 if($38){label=12;break;}else{var $_off0=0;label=13;break;}
 case 12: 
 var $40$0=$13;
 var $40$1=((((($13|0)<0))|0)?-1:0);
 var $41$0=___muldi3($40$0,$40$1,$__off$0,$__off$1);var $41$1=tempRet0;
 var $extract_t$0=$41$0;
 var $extract_t=$extract_t$0;
 var $_off0=$extract_t;label=13;break;
 case 13: 
 var $_off0;
 var $43=_fseeko($37,$_off0,$__whence_0);
 var $44=($43|0)==0;
 if($44){label=15;break;}else{label=14;break;}
 case 14: 
 var $46=$agg_result;
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $st$14$0=(($46)|0);
 HEAP32[(($st$14$0)>>2)]=$$etemp$13$0;
 var $st$15$1=(($46+4)|0);
 HEAP32[(($st$15$1)>>2)]=$$etemp$13$1;
 var $47=(($agg_result+8)|0);
 var $$etemp$16$0=-1;
 var $$etemp$16$1=-1;
 var $st$17$0=(($47)|0);
 HEAP32[(($st$17$0)>>2)]=$$etemp$16$0;
 var $st$18$1=(($47+4)|0);
 HEAP32[(($st$18$1)>>2)]=$$etemp$16$1;
 label=16;break;
 case 15: 
 var $49=HEAP32[(($14)>>2)];
 var $50=_ftello($49);
 var $51$0=$50;
 var $51$1=((((($50|0)<0))|0)?-1:0);
 var $52=(($this+72)|0);
 var $53=$52;
 var $ld$19$0=(($53)|0);
 var $54$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$20$1)>>2)];
 var $55=$agg_result;
 var $st$21$0=(($55)|0);
 HEAP32[(($st$21$0)>>2)]=$54$0;
 var $st$22$1=(($55+4)|0);
 HEAP32[(($st$22$1)>>2)]=$54$1;
 var $56=(($agg_result+8)|0);
 var $st$23$0=(($56)|0);
 HEAP32[(($st$23$0)>>2)]=$51$0;
 var $st$24$1=(($56+4)|0);
 HEAP32[(($st$24$1)>>2)]=$51$1;
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this+64)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$this;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($this);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($13)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($13+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $14=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($14)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($14+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 label=7;break;
 case 4: 
 var $16=HEAP32[(($2)>>2)];
 var $17=(($__sp+8)|0);
 var $ld$6$0=(($17)|0);
 var $18$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$7$1)>>2)];
 var $19$0=$18$0;
 var $19=$19$0;
 var $20=_fseeko($16,$19,0);
 var $21=($20|0)==0;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=$agg_result;
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $st$9$0=(($23)|0);
 HEAP32[(($st$9$0)>>2)]=$$etemp$8$0;
 var $st$10$1=(($23+4)|0);
 HEAP32[(($st$10$1)>>2)]=$$etemp$8$1;
 var $24=(($agg_result+8)|0);
 var $$etemp$11$0=-1;
 var $$etemp$11$1=-1;
 var $st$12$0=(($24)|0);
 HEAP32[(($st$12$0)>>2)]=$$etemp$11$0;
 var $st$13$1=(($24+4)|0);
 HEAP32[(($st$13$1)>>2)]=$$etemp$11$1;
 label=7;break;
 case 6: 
 var $26=(($this+72)|0);
 var $27=$__sp;
 var $ld$14$0=(($27)|0);
 var $28$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$15$1)>>2)];
 var $29=$26;
 var $st$16$0=(($29)|0);
 HEAP32[(($st$16$0)>>2)]=$28$0;
 var $st$17$1=(($29+4)|0);
 HEAP32[(($st$17$1)>>2)]=$28$1;
 var $30=$agg_result;
 var $31=$__sp;
 assert(16 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbe=sp;
 var $__state=(sp)+(8);
 var $tmpcast=$__state;
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $_0=0;label=23;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+68)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___cxa_allocate_exception(4);
 var $10=$9;
 HEAP32[(($10)>>2)]=15224;
 ___cxa_throw($9,26112,(1060));
 throw "Reached an unreachable!";
 case 4: 
 var $12=(($this+92)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&16;
 var $15=($14|0)==0;
 if($15){label=11;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+24)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($this+20)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($18|0)==($20|0);
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=(($this+72)|0);
 var $23=(($this+32)|0);
 var $24=(($this+52)|0);
 label=8;break;
 case 7: 
 var $26=$this;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+52)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=FUNCTION_TABLE[$29]($this,-1);
 var $31=($30|0)==-1;
 if($31){var $_0=-1;label=23;break;}else{label=6;break;}
 case 8: 
 var $33=HEAP32[(($5)>>2)];
 var $34=HEAP32[(($23)>>2)];
 var $35=HEAP32[(($24)>>2)];
 var $36=(($34+$35)|0);
 var $37=$33;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+20)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($33,$22,$34,$36,$__extbe);
 var $42=HEAP32[(($__extbe)>>2)];
 var $43=HEAP32[(($23)>>2)];
 var $44=$42;
 var $45=$43;
 var $46=((($44)-($45))|0);
 var $47=HEAP32[(($1)>>2)];
 var $48=_fwrite($43,1,$46,$47);
 var $49=($48|0)==($46|0);
 if($49){label=9;break;}else{var $_0=-1;label=23;break;}
 case 9: 
 if(($41|0)==2){ var $_0=-1;label=23;break;}else if(($41|0)==1){ label=8;break;}else{label=10;break;}
 case 10: 
 var $52=HEAP32[(($1)>>2)];
 var $53=_fflush($52);
 var $54=($53|0)==0;
 if($54){label=22;break;}else{var $_0=-1;label=23;break;}
 case 11: 
 var $56=$13&8;
 var $57=($56|0)==0;
 if($57){label=22;break;}else{label=12;break;}
 case 12: 
 var $59=(($this+80)|0);
 var $60=$59;
 var $ld$0$0=(($60)|0);
 var $61$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($60+4)|0);
 var $61$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($__state)|0);
 HEAP32[(($st$2$0)>>2)]=$61$0;
 var $st$3$1=(($__state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$61$1;
 var $62=(($this+98)|0);
 var $63=HEAP8[(($62)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=14;break;}else{label=13;break;}
 case 13: 
 var $67=(($this+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($this+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$68;
 var $72=$70;
 var $73=((($71)-($72))|0);
 var $__c_0=$73;var $__update_st_0=0;label=18;break;
 case 14: 
 var $75=$6;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+24)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=FUNCTION_TABLE[$78]($6);
 var $80=(($this+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($this+36)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$81;
 var $85=$83;
 var $86=((($84)-($85))|0);
 var $87=($79|0)>0;
 if($87){label=15;break;}else{label=16;break;}
 case 15: 
 var $89=(($this+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($this+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$90;
 var $94=$92;
 var $95=((($93)-($94))|0);
 var $96=(Math_imul($79,$95)|0);
 var $97=((($86)+($96))|0);
 var $__c_0=$97;var $__update_st_0=0;label=18;break;
 case 16: 
 var $99=(($this+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($this+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){var $__c_0=$86;var $__update_st_0=0;label=18;break;}else{label=17;break;}
 case 17: 
 var $105=HEAP32[(($5)>>2)];
 var $106=(($this+32)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($this+8)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$100;
 var $111=$109;
 var $112=((($110)-($111))|0);
 var $113=$105;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+32)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=FUNCTION_TABLE[$116]($105,$tmpcast,$107,$83,$112);
 var $118=HEAP32[(($82)>>2)];
 var $119=HEAP32[(($106)>>2)];
 var $120=$118;
 var $121=$119;
 var $122=((($120)-($121))|0);
 var $123=((($122)-($117))|0);
 var $124=((($86)+($123))|0);
 var $__c_0=$124;var $__update_st_0=1;label=18;break;
 case 18: 
 var $__update_st_0;
 var $__c_0;
 var $126=HEAP32[(($1)>>2)];
 var $127=(((-$__c_0))|0);
 var $128=_fseeko($126,$127,1);
 var $129=($128|0)==0;
 if($129){label=19;break;}else{var $_0=-1;label=23;break;}
 case 19: 
 var $131=(($__update_st_0<<24)>>24)==0;
 if($131){label=21;break;}else{label=20;break;}
 case 20: 
 var $133=(($this+72)|0);
 var $134=$133;
 var $ld$4$0=(($__state)|0);
 var $135$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($__state+4)|0);
 var $135$1=HEAP32[(($ld$5$1)>>2)];
 var $st$6$0=(($134)|0);
 HEAP32[(($st$6$0)>>2)]=$135$0;
 var $st$7$1=(($134+4)|0);
 HEAP32[(($st$7$1)>>2)]=$135$1;
 label=21;break;
 case 21: 
 var $137=(($this+32)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($this+40)|0);
 HEAP32[(($139)>>2)]=$138;
 var $140=(($this+36)|0);
 HEAP32[(($140)>>2)]=$138;
 var $141=(($this+8)|0);
 HEAP32[(($141)>>2)]=0;
 var $142=(($this+12)|0);
 HEAP32[(($142)>>2)]=0;
 var $143=(($this+16)|0);
 HEAP32[(($143)>>2)]=0;
 HEAP32[(($12)>>2)]=0;
 label=22;break;
 case 22: 
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__1buf=sp;
 var $__inext=(sp)+(8);
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $storemerge=-1;label=28;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+92)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&8;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $_phi_trans_insert=(($this+12)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $storemerge_i=0;var $37=$_pre;var $_pre_phi=$_phi_trans_insert;label=8;break;
 case 4: 
 var $10=(($this+24)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($this+20)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($this+28)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($this+98)|0);
 var $14=HEAP8[(($13)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($this+32)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($this+52)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($19+$21)|0);
 var $23=(($this+8)|0);
 HEAP32[(($23)>>2)]=$19;
 var $24=(($this+12)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=(($this+16)|0);
 HEAP32[(($25)>>2)]=$22;
 var $36=$22;label=7;break;
 case 6: 
 var $27=(($this+56)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+60)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($28+$30)|0);
 var $32=(($this+8)|0);
 HEAP32[(($32)>>2)]=$28;
 var $33=(($this+12)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=(($this+16)|0);
 HEAP32[(($34)>>2)]=$31;
 var $36=$31;label=7;break;
 case 7: 
 var $36;
 HEAP32[(($5)>>2)]=8;
 var $_pre3=(($this+12)|0);
 var $storemerge_i=1;var $37=$36;var $_pre_phi=$_pre3;label=8;break;
 case 8: 
 var $_pre_phi;
 var $37;
 var $storemerge_i;
 var $38=($37|0)==0;
 if($38){label=9;break;}else{var $44=$37;label=10;break;}
 case 9: 
 var $40=(($__1buf+1)|0);
 var $41=(($this+8)|0);
 HEAP32[(($41)>>2)]=$__1buf;
 HEAP32[(($_pre_phi)>>2)]=$40;
 var $42=(($this+16)|0);
 HEAP32[(($42)>>2)]=$40;
 var $44=$40;label=10;break;
 case 10: 
 var $44;
 var $45=(($storemerge_i<<24)>>24)==0;
 var $46=(($this+16)|0);
 var $47=HEAP32[(($46)>>2)];
 if($45){label=11;break;}else{var $56=0;label=12;break;}
 case 11: 
 var $49=(($this+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$47;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=(((($53|0))/(2))&-1);
 var $55=($54>>>0)>4;
 var $_=($55?4:$54);
 var $56=$_;label=12;break;
 case 12: 
 var $56;
 var $57=(($this+16)|0);
 var $58=($44|0)==($47|0);
 if($58){label=13;break;}else{label=25;break;}
 case 13: 
 var $60=(($this+8)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(((-$56))|0);
 var $63=(($44+$62)|0);
 _memmove($61,$63,$56,1,0);
 var $64=(($this+98)|0);
 var $65=HEAP8[(($64)>>0)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=16;break;}else{label=14;break;}
 case 14: 
 var $69=HEAP32[(($57)>>2)];
 var $70=HEAP32[(($60)>>2)];
 var $71=$69;
 var $72=$70;
 var $73=((($71)-($72))|0);
 var $74=((($73)-($56))|0);
 var $75=(($70+$56)|0);
 var $76=HEAP32[(($1)>>2)];
 var $77=_fread($75,1,$74,$76);
 var $78=($77|0)==0;
 if($78){var $__c_0=-1;var $_pre_phi5=$60;label=26;break;}else{label=15;break;}
 case 15: 
 var $80=HEAP32[(($60)>>2)];
 var $81=(($80+$56)|0);
 var $_sum=((($56)+($77))|0);
 var $82=(($80+$_sum)|0);
 HEAP32[(($_pre_phi)>>2)]=$81;
 HEAP32[(($57)>>2)]=$82;
 var $83=HEAP8[(($81)>>0)];
 var $84=($83&255);
 var $__c_0=$84;var $_pre_phi5=$60;label=26;break;
 case 16: 
 var $86=(($this+32)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($this+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($this+40)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91;
 var $93=$89;
 var $94=((($92)-($93))|0);
 _memmove($87,$89,$94,1,0);
 var $95=HEAP32[(($86)>>2)];
 var $96=HEAP32[(($90)>>2)];
 var $97=HEAP32[(($88)>>2)];
 var $98=$96;
 var $99=$97;
 var $100=((($98)-($99))|0);
 var $101=(($95+$100)|0);
 HEAP32[(($88)>>2)]=$101;
 var $102=(($this+44)|0);
 var $103=($95|0)==($102|0);
 if($103){var $107=8;label=18;break;}else{label=17;break;}
 case 17: 
 var $105=(($this+52)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=$106;label=18;break;
 case 18: 
 var $107;
 var $108=(($95+$107)|0);
 HEAP32[(($90)>>2)]=$108;
 var $109=(($this+60)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=((($110)-($56))|0);
 var $112=$108;
 var $113=$101;
 var $114=((($112)-($113))|0);
 var $115=($114>>>0)<($111>>>0);
 var $_6=($115?$114:$111);
 var $116=(($this+80)|0);
 var $117=(($this+72)|0);
 var $118=$117;
 var $119=$116;
 var $ld$0$0=(($118)|0);
 var $120$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($118+4)|0);
 var $120$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($119)|0);
 HEAP32[(($st$2$0)>>2)]=$120$0;
 var $st$3$1=(($119+4)|0);
 HEAP32[(($st$3$1)>>2)]=$120$1;
 var $121=HEAP32[(($1)>>2)];
 var $122=_fread($101,1,$_6,$121);
 var $123=($122|0)==0;
 if($123){var $__c_0=-1;var $_pre_phi5=$60;label=26;break;}else{label=19;break;}
 case 19: 
 var $125=(($this+68)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==0;
 if($127){label=20;break;}else{label=21;break;}
 case 20: 
 var $129=___cxa_allocate_exception(4);
 var $130=$129;
 HEAP32[(($130)>>2)]=15224;
 ___cxa_throw($129,26112,(1060));
 throw "Reached an unreachable!";
 case 21: 
 var $132=HEAP32[(($88)>>2)];
 var $133=(($132+$122)|0);
 HEAP32[(($90)>>2)]=$133;
 var $134=HEAP32[(($86)>>2)];
 var $135=HEAP32[(($60)>>2)];
 var $136=(($135+$56)|0);
 var $137=HEAP32[(($109)>>2)];
 var $138=(($135+$137)|0);
 var $139=$126;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+16)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=FUNCTION_TABLE[$142]($126,$117,$134,$133,$88,$136,$138,$__inext);
 var $144=($143|0)==3;
 if($144){label=22;break;}else{label=23;break;}
 case 22: 
 var $146=HEAP32[(($86)>>2)];
 var $147=HEAP32[(($90)>>2)];
 HEAP32[(($60)>>2)]=$146;
 HEAP32[(($_pre_phi)>>2)]=$146;
 HEAP32[(($57)>>2)]=$147;
 var $148=HEAP8[(($146)>>0)];
 var $149=($148&255);
 var $__c_0=$149;var $_pre_phi5=$60;label=26;break;
 case 23: 
 var $151=HEAP32[(($__inext)>>2)];
 var $152=HEAP32[(($60)>>2)];
 var $153=(($152+$56)|0);
 var $154=($151|0)==($153|0);
 if($154){var $__c_0=-1;var $_pre_phi5=$60;label=26;break;}else{label=24;break;}
 case 24: 
 HEAP32[(($60)>>2)]=$152;
 HEAP32[(($_pre_phi)>>2)]=$153;
 HEAP32[(($57)>>2)]=$151;
 var $156=HEAP8[(($153)>>0)];
 var $157=($156&255);
 var $__c_0=$157;var $_pre_phi5=$60;label=26;break;
 case 25: 
 var $159=HEAP8[(($44)>>0)];
 var $160=($159&255);
 var $_pre4=(($this+8)|0);
 var $__c_0=$160;var $_pre_phi5=$_pre4;label=26;break;
 case 26: 
 var $_pre_phi5;
 var $__c_0;
 var $162=HEAP32[(($_pre_phi5)>>2)];
 var $163=($162|0)==($__1buf|0);
 if($163){label=27;break;}else{var $storemerge=$__c_0;label=28;break;}
 case 27: 
 HEAP32[(($_pre_phi5)>>2)]=0;
 HEAP32[(($_pre_phi)>>2)]=0;
 HEAP32[(($57)>>2)]=0;
 var $storemerge=$__c_0;label=28;break;
 case 28: 
 var $storemerge;
 STACKTOP=sp;return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $_0=-1;label=9;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)<($8>>>0);
 if($9){label=3;break;}else{var $_0=-1;label=9;break;}
 case 3: 
 var $11=($__c|0)==-1;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=((($8)-(1))|0);
 HEAP32[(($7)>>2)]=$12;
 var $_0=0;label=9;break;
 case 5: 
 var $14=(($this+88)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&16;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=((($8)-(1))|0);
 var $_pre1=(($__c)&255);
 var $_pre_phi=$_pre;var $_pre_phi2=$_pre1;label=8;break;
 case 7: 
 var $19=(($__c)&255);
 var $20=((($8)-(1))|0);
 var $21=HEAP8[(($20)>>0)];
 var $22=(($19<<24)>>24)==(($21<<24)>>24);
 if($22){var $_pre_phi=$20;var $_pre_phi2=$19;label=8;break;}else{var $_0=-1;label=9;break;}
 case 8: 
 var $_pre_phi2;
 var $_pre_phi;
 HEAP32[(($7)>>2)]=$_pre_phi;
 HEAP8[(($_pre_phi)>>0)]=$_pre_phi2;
 var $_0=$__c;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__1buf=sp;
 var $__extbe=(sp)+(8);
 var $__e=(sp)+(16);
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=29;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+92)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&16;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $_phi_trans_insert=(($this+20)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert1=(($this+28)|0);
 var $_pre2=HEAP32[(($_phi_trans_insert1)>>2)];
 var $47=$_pre;var $46=$_pre2;var $_pre_phi=$_phi_trans_insert;var $_pre_phi8=$_phi_trans_insert1;label=10;break;
 case 4: 
 var $10=(($this+8)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($this+12)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($this+16)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($this+52)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14>>>0)>8;
 if($15){label=5;break;}else{label=8;break;}
 case 5: 
 var $17=(($this+98)|0);
 var $18=HEAP8[(($17)>>0)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 var $22=(($this+32)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-(1))|0);
 var $25=(($23+$24)|0);
 var $26=(($this+24)|0);
 HEAP32[(($26)>>2)]=$23;
 var $27=(($this+20)|0);
 HEAP32[(($27)>>2)]=$23;
 var $28=(($this+28)|0);
 HEAP32[(($28)>>2)]=$25;
 var $45=$23;var $44=$25;label=9;break;
 case 7: 
 var $30=(($this+56)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($this+60)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=((($33)-(1))|0);
 var $35=(($31+$34)|0);
 var $36=(($this+24)|0);
 HEAP32[(($36)>>2)]=$31;
 var $37=(($this+20)|0);
 HEAP32[(($37)>>2)]=$31;
 var $38=(($this+28)|0);
 HEAP32[(($38)>>2)]=$35;
 var $45=$31;var $44=$35;label=9;break;
 case 8: 
 var $40=(($this+24)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($this+20)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($this+28)|0);
 HEAP32[(($42)>>2)]=0;
 var $45=0;var $44=0;label=9;break;
 case 9: 
 var $44;
 var $45;
 HEAP32[(($5)>>2)]=16;
 var $_pre6=(($this+20)|0);
 var $_pre7=(($this+28)|0);
 var $47=$45;var $46=$44;var $_pre_phi=$_pre6;var $_pre_phi8=$_pre7;label=10;break;
 case 10: 
 var $_pre_phi8;
 var $_pre_phi;
 var $46;
 var $47;
 var $48=($__c|0)==-1;
 var $_phi_trans_insert3=(($this+24)|0);
 var $_pre4=HEAP32[(($_phi_trans_insert3)>>2)];
 if($48){var $59=$_pre4;var $58=$47;label=14;break;}else{label=11;break;}
 case 11: 
 var $50=($_pre4|0)==0;
 if($50){label=12;break;}else{var $54=$_pre4;label=13;break;}
 case 12: 
 var $52=(($__1buf+1)|0);
 HEAP32[(($_phi_trans_insert3)>>2)]=$__1buf;
 HEAP32[(($_pre_phi)>>2)]=$__1buf;
 HEAP32[(($_pre_phi8)>>2)]=$52;
 var $54=$__1buf;label=13;break;
 case 13: 
 var $54;
 var $55=(($__c)&255);
 HEAP8[(($54)>>0)]=$55;
 var $56=HEAP32[(($_phi_trans_insert3)>>2)];
 var $57=(($56+1)|0);
 HEAP32[(($_phi_trans_insert3)>>2)]=$57;
 var $_pre5=HEAP32[(($_pre_phi)>>2)];
 var $59=$57;var $58=$_pre5;label=14;break;
 case 14: 
 var $58;
 var $59;
 var $60=(($this+24)|0);
 var $61=($59|0)==($58|0);
 if($61){label=28;break;}else{label=15;break;}
 case 15: 
 var $63=(($this+98)|0);
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=17;break;}else{label=16;break;}
 case 16: 
 var $68=$59;
 var $69=$58;
 var $70=((($68)-($69))|0);
 var $71=HEAP32[(($1)>>2)];
 var $72=_fwrite($58,1,$70,$71);
 var $73=($72|0)==($70|0);
 if($73){label=27;break;}else{label=29;break;}
 case 17: 
 var $75=(($this+32)|0);
 var $76=HEAP32[(($75)>>2)];
 HEAP32[(($__extbe)>>2)]=$76;
 var $77=(($this+68)|0);
 var $78=(($this+72)|0);
 var $79=(($this+52)|0);
 label=18;break;
 case 18: 
 var $81=HEAP32[(($77)>>2)];
 var $82=($81|0)==0;
 if($82){label=19;break;}else{label=20;break;}
 case 19: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 HEAP32[(($85)>>2)]=15224;
 ___cxa_throw($84,26112,(1060));
 throw "Reached an unreachable!";
 case 20: 
 var $87=HEAP32[(($_pre_phi)>>2)];
 var $88=HEAP32[(($60)>>2)];
 var $89=HEAP32[(($75)>>2)];
 var $90=HEAP32[(($79)>>2)];
 var $91=(($89+$90)|0);
 var $92=$81;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($81,$78,$87,$88,$__e,$89,$91,$__extbe);
 var $97=HEAP32[(($__e)>>2)];
 var $98=HEAP32[(($_pre_phi)>>2)];
 var $99=($97|0)==($98|0);
 if($99){label=29;break;}else{label=21;break;}
 case 21: 
 if(($96|0)==3){ label=22;break;}else if(($96|0)==0|($96|0)==1){ label=23;break;}else{label=29;break;}
 case 22: 
 var $102=HEAP32[(($60)>>2)];
 var $103=$102;
 var $104=$98;
 var $105=((($103)-($104))|0);
 var $106=HEAP32[(($1)>>2)];
 var $107=_fwrite($98,1,$105,$106);
 var $108=($107|0)==($105|0);
 if($108){label=26;break;}else{label=29;break;}
 case 23: 
 var $110=HEAP32[(($__extbe)>>2)];
 var $111=HEAP32[(($75)>>2)];
 var $112=$110;
 var $113=$111;
 var $114=((($112)-($113))|0);
 var $115=HEAP32[(($1)>>2)];
 var $116=_fwrite($111,1,$114,$115);
 var $117=($116|0)==($114|0);
 if($117){label=24;break;}else{label=29;break;}
 case 24: 
 var $119=($96|0)==1;
 if($119){label=25;break;}else{label=27;break;}
 case 25: 
 var $120=HEAP32[(($__e)>>2)];
 var $121=HEAP32[(($60)>>2)];
 HEAP32[(($_pre_phi)>>2)]=$120;
 HEAP32[(($_pre_phi8)>>2)]=$121;
 var $122=$121;
 var $123=$120;
 var $124=((($122)-($123))|0);
 var $125=(($120+$124)|0);
 HEAP32[(($60)>>2)]=$125;
 label=18;break;
 case 26: 
 var $127=($96|0)==1;
 label=27;break;
 case 27: 
 HEAP32[(($60)>>2)]=$47;
 HEAP32[(($_pre_phi)>>2)]=$47;
 HEAP32[(($_pre_phi8)>>2)]=$46;
 label=28;break;
 case 28: 
 var $___c=($48?0:$__c);
 STACKTOP=sp;return $___c;
 case 29: 
 STACKTOP=sp;return -1;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v=sp;
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=((($10)+(1))|0);
 var $12=($11>>>0)>1073741823;
 if($12){label=2;break;}else{label=12;break;}
 case 2: 
 var $13=___cxa_allocate_exception(8);
 var $14=$13;
 HEAP32[(($14)>>2)]=15352;
 var $15=(($13+4)|0);
 var $16=_strlen(1736);
 var $17=((($16)+(13))|0);
 var $18=($17|0)==0;
 var $_size_i3=($18?1:$17);
 var $19=_malloc($_size_i3);
 var $20=($19|0)==0;
 if($20){label=3;break;}else{var $_lcssa_i5=$19;label=8;break;}
 case 3: 
 var $21=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=4;break;}
 case 4: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $25=_malloc($_size_i3);
 var $26=($25|0)==0;
 if($26){label=3;break;}else{var $_lcssa_i5=$25;label=8;break;}
 case 6: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 HEAP32[(($29)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $_lcssa_i5;
 var $30=$_lcssa_i5;
 HEAP32[(($30)>>2)]=$16;
 var $31=(($_lcssa_i5+4)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=$16;
 var $33=(($_lcssa_i5+8)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $35=(($_lcssa_i5+12)|0);
 var $36=((($16)+(1))|0);
 assert($36 % 1 === 0);(_memcpy($35, 1736, $36)|0);
 var $37=$15;
 HEAP32[(($37)>>2)]=$35;
 HEAP32[(($14)>>2)]=15320;
 ___cxa_throw($13,26160,(482));
 throw "Reached an unreachable!";
 case 9: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($13);
 ___resumeException($lpad_phi$0)
 case 12: 
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=((($42)-($8))|0);
 var $44=$43>>2;
 var $45=($44>>>0)<536870911;
 if($45){label=14;break;}else{label=13;break;}
 case 13: 
 var $46=(($__v+12)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($__v+16)|0);
 HEAP32[(($47)>>2)]=$2;
 var $storemerge8=1073741823;var $54=$46;label=15;break;
 case 14: 
 var $48=$43>>1;
 var $49=($48>>>0)<($11>>>0);
 var $_=($49?$11:$48);
 var $50=(($__v+12)|0);
 HEAP32[(($50)>>2)]=0;
 var $51=(($__v+16)|0);
 HEAP32[(($51)>>2)]=$2;
 var $52=($_|0)==0;
 if($52){var $70=0;var $storemerge9=$_;var $69=$50;label=20;break;}else{var $storemerge8=$_;var $54=$50;label=15;break;}
 case 15: 
 var $54;
 var $storemerge8;
 var $55=$storemerge8<<2;
 var $56=($55|0)==0;
 var $_size_i=($56?1:$55);
 var $57=_malloc($_size_i);
 var $58=($57|0)==0;
 if($58){label=16;break;}else{var $_lcssa_i=$57;label=19;break;}
 case 16: 
 var $59=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $60=($59|0)==0;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=$59;
 FUNCTION_TABLE[$62]();
 var $63=_malloc($_size_i);
 var $64=($63|0)==0;
 if($64){label=16;break;}else{var $_lcssa_i=$63;label=19;break;}
 case 18: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=15192;
 ___cxa_throw($66,26096,(782));
 throw "Reached an unreachable!";
 case 19: 
 var $_lcssa_i;
 var $68=$_lcssa_i;
 var $70=$68;var $storemerge9=$storemerge8;var $69=$54;label=20;break;
 case 20: 
 var $69;
 var $storemerge9;
 var $70;
 var $71=(($__v)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($70+($10<<2))|0);
 var $73=(($__v+8)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=(($__v+4)|0);
 HEAP32[(($74)>>2)]=$72;
 var $75=(($70+($storemerge9<<2))|0);
 HEAP32[(($69)>>2)]=$75;
 var $76=($72|0)==0;
 if($76){label=22;break;}else{label=21;break;}
 case 21: 
 var $78=HEAP32[(($__x)>>2)];
 HEAP32[(($72)>>2)]=$78;
 label=22;break;
 case 22: 
 var $_sum=((($10)+(1))|0);
 var $80=(($70+($_sum<<2))|0);
 HEAP32[(($73)>>2)]=$80;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v);
 var $81=HEAP32[(($74)>>2)];
 var $_pre=HEAP32[(($73)>>2)];
 var $83=$_pre;label=23;break;
 case 23: 
 var $83;
 var $84=($81|0)==($83|0);
 if($84){label=25;break;}else{label=24;break;}
 case 24: 
 var $86=((($83)-(4))|0);
 HEAP32[(($73)>>2)]=$86;
 var $83=$86;label=23;break;
 case 25: 
 var $87=HEAP32[(($71)>>2)];
 var $88=($87|0)==0;
 if($88){label=27;break;}else{label=26;break;}
 case 26: 
 var $90=$87;
 _free($90);
 label=27;break;
 case 27: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741823;
 if($1){label=2;break;}else{label=12;break;}
 case 2: 
 var $2=___cxa_allocate_exception(8);
 var $3=$2;
 HEAP32[(($3)>>2)]=15352;
 var $4=(($2+4)|0);
 var $5=_strlen(1736);
 var $6=((($5)+(13))|0);
 var $7=($6|0)==0;
 var $_size_i1=($7?1:$6);
 var $8=_malloc($_size_i1);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $_lcssa_i3=$8;label=8;break;}
 case 3: 
 var $10=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=4;break;}
 case 4: 
 var $13=$10;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$13]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $14=_malloc($_size_i1);
 var $15=($14|0)==0;
 if($15){label=3;break;}else{var $_lcssa_i3=$14;label=8;break;}
 case 6: 
 var $17=___cxa_allocate_exception(4);
 var $18=$17;
 HEAP32[(($18)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($17,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $_lcssa_i3;
 var $19=$_lcssa_i3;
 HEAP32[(($19)>>2)]=$5;
 var $20=(($_lcssa_i3+4)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=$5;
 var $22=(($_lcssa_i3+8)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0;
 var $24=(($_lcssa_i3+12)|0);
 var $25=((($5)+(1))|0);
 assert($25 % 1 === 0);(_memcpy($24, 1736, $25)|0);
 var $26=$4;
 HEAP32[(($26)>>2)]=$24;
 HEAP32[(($3)>>2)]=15320;
 ___cxa_throw($2,26160,(482));
 throw "Reached an unreachable!";
 case 9: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($2);
 ___resumeException($lpad_phi$0)
 case 12: 
 var $29=$__n<<2;
 var $30=($29|0)==0;
 var $_size_i=($30?1:$29);
 var $31=_malloc($_size_i);
 var $32=($31|0)==0;
 if($32){label=13;break;}else{var $_lcssa_i=$31;label=16;break;}
 case 13: 
 var $33=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 var $36=$33;
 FUNCTION_TABLE[$36]();
 var $37=_malloc($_size_i);
 var $38=($37|0)==0;
 if($38){label=13;break;}else{var $_lcssa_i=$37;label=16;break;}
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=15192;
 ___cxa_throw($40,26096,(782));
 throw "Reached an unreachable!";
 case 16: 
 var $_lcssa_i;
 var $42=$_lcssa_i;
 var $43=(($this+4)|0);
 HEAP32[(($43)>>2)]=$42;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$42;
 var $45=(($42+($__n<<2))|0);
 var $46=(($this+8)|0);
 HEAP32[(($46)>>2)]=$45;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__v+4)|0);
 var $_0=$4;label=2;break;
 case 2: 
 var $_0;
 var $7=($_0|0)==($2|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=HEAP32[(($5)>>2)];
 var $9=((($_0)-(12))|0);
 var $10=(($9)|0);
 var $11=HEAPF32[(($10)>>2)];
 var $12=((($8)-(12))|0);
 HEAPF32[(($12)>>2)]=$11;
 var $13=((($_0)-(12)+4)|0);
 var $14=HEAPF32[(($13)>>2)];
 var $15=((($8)-(12)+4)|0);
 HEAPF32[(($15)>>2)]=$14;
 var $16=((($_0)-(12)+8)|0);
 var $17=HEAPF32[(($16)>>2)];
 var $18=((($8)-(12)+8)|0);
 HEAPF32[(($18)>>2)]=$17;
 var $19=HEAP32[(($5)>>2)];
 var $20=((($19)-(12))|0);
 HEAP32[(($5)>>2)]=$20;
 var $_0=$9;label=2;break;
 case 4: 
 var $21=HEAP32[(($1)>>2)];
 var $22=HEAP32[(($5)>>2)];
 HEAP32[(($1)>>2)]=$22;
 HEAP32[(($5)>>2)]=$21;
 var $23=(($__v+8)|0);
 var $24=HEAP32[(($3)>>2)];
 var $25=HEAP32[(($23)>>2)];
 HEAP32[(($3)>>2)]=$25;
 HEAP32[(($23)>>2)]=$24;
 var $26=(($this+8)|0);
 var $27=(($__v+12)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=HEAP32[(($27)>>2)];
 HEAP32[(($26)>>2)]=$29;
 HEAP32[(($27)>>2)]=$28;
 var $30=HEAP32[(($5)>>2)];
 var $31=(($__v)|0);
 HEAP32[(($31)>>2)]=$30;
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__is;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$__is;
 var $_sum_i=((($5)+(16))|0);
 var $7=(($6+$_sum_i)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum13_i=((($5)+(72))|0);
 var $12=(($6+$_sum13_i)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){var $21=$5;label=6;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=16;break; }
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert10=$_phi_trans_insert;
 var $_pre11=HEAP32[(($_phi_trans_insert10)>>2)];
 var $21=$_pre11;label=6;break;
 case 5: 
 var $18=(($6+$5)|0);
 var $19=$18;
 var $20=$9|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($19,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 6: 
 var $21;
 var $_sum16_i=((($21)+(16))|0);
 var $22=(($6+$_sum16_i)|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $phitmp=($24|0)!=0;
 if($phitmp){label=21;break;}else{label=7;break;}
 case 7: 
 var $26=$__str;
 var $27=HEAP8[(($26)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($__str+8)|0);
 var $32=HEAP32[(($31)>>2)];
 HEAP8[(($32)>>0)]=0;
 var $33=(($__str+4)|0);
 HEAP32[(($33)>>2)]=0;
 var $_pre13=$__str;
 var $_pre15=(($_pre13+1)|0);
 var $_pre_phi=$33;var $_pre_phi16=$_pre15;var $_pre_phi18=$31;label=10;break;
 case 9: 
 var $35=$__str;
 var $36=(($35+1)|0);
 HEAP8[(($36)>>0)]=0;
 HEAP8[(($26)>>0)]=0;
 var $_pre12=(($__str+4)|0);
 var $_pre17=(($__str+8)|0);
 var $_pre_phi=$_pre12;var $_pre_phi16=$36;var $_pre_phi18=$_pre17;label=10;break;
 case 10: 
 var $_pre_phi18;
 var $_pre_phi16;
 var $_pre_phi;
 var $37=(($__str)|0);
 var $__extr_0=0;label=11;break;
 case 11: 
 var $__extr_0;
 var $38=HEAP32[(($1)>>2)];
 var $39=((($38)-(12))|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $_sum=((($41)+(24))|0);
 var $42=(($6+$_sum)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+12)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($44+16)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=($47|0)==($50|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $53=$44;
 var $54=$44;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+40)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 13: 
 var $59=(($47+1)|0);
 HEAP32[(($46)>>2)]=$59;
 var $60=HEAP8[(($47)>>0)];
 var $__i_0_off0=$60;label=22;break;
 case 14: 
 var $62=($58|0)==-1;
 var $extract_t=(($58)&255);
 if($62){var $__extr_1=$__extr_0;var $__err_0=2;label=34;break;}else{var $__i_0_off0=$extract_t;label=22;break;}
 case 15: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(0); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(0); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=17;break;
 case 17: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $64=$lpad_phi$0;
 var $65=___cxa_begin_catch($64);
 var $66=HEAP32[(($1)>>2)];
 var $67=((($66)-(12))|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $_sum7=((($69)+(16))|0);
 var $70=(($6+$_sum7)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72|1;
 HEAP32[(($71)>>2)]=$73;
 var $_sum8=((($69)+(20))|0);
 var $74=(($6+$_sum8)|0);
 var $75=$74;
 var $76=HEAP32[(($75)>>2)];
 var $77=$76&1;
 var $78=($77|0)==0;
 if($78){label=20;break;}else{label=18;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=35;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 ___cxa_end_catch();
 label=21;break;
 case 21: 
 return;
 case 22: 
 var $__i_0_off0;
 var $81=((($__extr_0)+(1))|0);
 var $82=(($__i_0_off0<<24)>>24)==(($__dlm<<24)>>24);
 if($82){var $__extr_1=$81;var $__err_0=0;label=34;break;}else{label=23;break;}
 case 23: 
 var $84=HEAP8[(($26)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)!=0;
 if($86){label=25;break;}else{label=24;break;}
 case 24: 
 var $88=($84&255);
 var $89=$88>>>1;
 var $__sz_0_i=$89;var $__cap_0_i=10;label=26;break;
 case 25: 
 var $91=HEAP32[(($37)>>2)];
 var $92=$91&-2;
 var $93=((($92)-(1))|0);
 var $94=HEAP32[(($_pre_phi)>>2)];
 var $__sz_0_i=$94;var $__cap_0_i=$93;label=26;break;
 case 26: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $96=($__sz_0_i|0)==($__cap_0_i|0);
 if($96){label=27;break;}else{label=29;break;}
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__str,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=15;break; }
 case 28: 
 var $98=HEAP8[(($26)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=30;break;}else{label=31;break;}
 case 29: 
 if($86){label=31;break;}else{label=30;break;}
 case 30: 
 var $103=$__sz_0_i<<1;
 var $104=((($103)+(2))|0);
 var $105=(($104)&255);
 HEAP8[(($26)>>0)]=$105;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$_pre_phi16;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=32;break;
 case 31: 
 var $107=HEAP32[(($_pre_phi18)>>2)];
 var $108=((($__sz_0_i)+(1))|0);
 HEAP32[(($_pre_phi)>>2)]=$108;
 var $_pn_i=$107;var $__p_0_sum_pre_phi_i=$108;label=32;break;
 case 32: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[(($__p_0_i)>>0)]=$__i_0_off0;
 var $110=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[(($110)>>0)]=0;
 var $111=HEAP8[(($26)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){var $__extr_0=$81;label=11;break;}else{label=33;break;}
 case 33: 
 var $114=HEAP32[(($_pre_phi)>>2)];
 var $115=($114|0)==-17;
 if($115){var $__extr_1=$81;var $__err_0=4;label=34;break;}else{var $__extr_0=$81;label=11;break;}
 case 34: 
 var $__err_0;
 var $__extr_1;
 var $116=($__extr_1|0)==0;
 var $117=$__err_0|4;
 var $___err_0=($116?$117:$__err_0);
 var $118=HEAP32[(($1)>>2)];
 var $119=((($118)-(12))|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($6+$121)|0);
 var $123=$122;
 var $_sum1=((($121)+(16))|0);
 var $124=(($6+$_sum1)|0);
 var $125=$124;
 var $126=HEAP32[(($125)>>2)];
 var $127=$126|$___err_0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($123,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 35: 
 var $129$0 = ___cxa_find_matching_catch(); var $129$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=37;break; }
 case 36: 
 ___resumeException($129$0)
 case 37: 
 var $132$0 = ___cxa_find_matching_catch(0); var $132$1 = tempRet0;
 var $133=$132$0;
 ___clang_call_terminate($133);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg3tri2io8MaterialENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(80))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>53687091;
 if($10){label=2;break;}else{label=12;break;}
 case 2: 
 var $11=___cxa_allocate_exception(8);
 var $12=$11;
 HEAP32[(($12)>>2)]=15352;
 var $13=(($11+4)|0);
 var $14=_strlen(1736);
 var $15=((($14)+(13))|0);
 var $16=($15|0)==0;
 var $_size_i=($16?1:$15);
 var $17=_malloc($_size_i);
 var $18=($17|0)==0;
 if($18){label=3;break;}else{var $_lcssa_i=$17;label=8;break;}
 case 3: 
 var $19=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$19;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $23=_malloc($_size_i);
 var $24=($23|0)==0;
 if($24){label=3;break;}else{var $_lcssa_i=$23;label=8;break;}
 case 6: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $_lcssa_i;
 var $28=$_lcssa_i;
 HEAP32[(($28)>>2)]=$14;
 var $29=(($_lcssa_i+4)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$14;
 var $31=(($_lcssa_i+8)|0);
 var $32=$31;
 HEAP32[(($32)>>2)]=0;
 var $33=(($_lcssa_i+12)|0);
 var $34=((($14)+(1))|0);
 assert($34 % 1 === 0);(_memcpy($33, 1736, $34)|0);
 var $35=$13;
 HEAP32[(($35)>>2)]=$33;
 HEAP32[(($12)>>2)]=15320;
 ___cxa_throw($11,26160,(482));
 throw "Reached an unreachable!";
 case 9: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($11);
 ___resumeException($lpad_phi$0)
 case 12: 
 var $38=(($this+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$39;
 var $41=((($40)-($6))|0);
 var $42=(((($41|0))/(80))&-1);
 var $43=($42>>>0)<26843545;
 if($43){label=13;break;}else{var $storemerge13=53687091;label=14;break;}
 case 13: 
 var $44=$42<<1;
 var $45=($44>>>0)<($9>>>0);
 var $_=($45?$9:$44);
 var $46=($_|0)==0;
 if($46){var $61=0;var $storemerge14=$_;label=19;break;}else{var $storemerge13=$_;label=14;break;}
 case 14: 
 var $storemerge13;
 var $47=((($storemerge13)*(80))&-1);
 var $48=($47|0)==0;
 var $_size_i_i=($48?1:$47);
 var $49=_malloc($_size_i_i);
 var $50=($49|0)==0;
 if($50){label=15;break;}else{var $_lcssa_i_i=$49;label=18;break;}
 case 15: 
 var $51=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $52=($51|0)==0;
 if($52){label=17;break;}else{label=16;break;}
 case 16: 
 var $54=$51;
 FUNCTION_TABLE[$54]();
 var $55=_malloc($_size_i_i);
 var $56=($55|0)==0;
 if($56){label=15;break;}else{var $_lcssa_i_i=$55;label=18;break;}
 case 17: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 HEAP32[(($59)>>2)]=15192;
 ___cxa_throw($58,26096,(782));
 throw "Reached an unreachable!";
 case 18: 
 var $_lcssa_i_i;
 var $60=$_lcssa_i_i;
 var $61=$60;var $storemerge14=$storemerge13;label=19;break;
 case 19: 
 var $storemerge14;
 var $61;
 var $62=(($61+((($8)*(80))&-1))|0);
 var $63=(($61+((($storemerge14)*(80))&-1))|0);
 var $64=($62|0)==0;
 if($64){label=21;break;}else{label=20;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8MaterialC2ERKS2_($62,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=34;break; }
 case 21: 
 var $_sum=((($8)+(1))|0);
 var $66=(($61+((($_sum)*(80))&-1))|0);
 var $67=HEAP32[(($3)>>2)];
 var $68=HEAP32[(($1)>>2)];
 var $_0=$68;var $__v_sroa_7_0=$62;label=22;break;
 case 22: 
 var $__v_sroa_7_0;
 var $_0;
 var $69=($_0|0)==($67|0);
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $71=((($_0)-(80))|0);
 var $72=((($__v_sroa_7_0)-(80))|0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri2io8MaterialC2ERKS2_($72,$71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$71;var $__v_sroa_7_0=$72;label=22;break; } else { label=33;break; }
 case 24: 
 var $74=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=$__v_sroa_7_0;
 var $75=HEAP32[(($1)>>2)];
 HEAP32[(($1)>>2)]=$66;
 HEAP32[(($38)>>2)]=$63;
 var $__v_sroa_16_0=$75;label=25;break;
 case 25: 
 var $__v_sroa_16_0;
 var $76=($74|0)==($__v_sroa_16_0|0);
 if($76){label=30;break;}else{label=26;break;}
 case 26: 
 var $78=((($__v_sroa_16_0)-(80))|0);
 var $79=((($__v_sroa_16_0)-(80)+68)|0);
 var $80=$79;
 var $81=HEAP8[(($80)>>0)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=((($__v_sroa_16_0)-(80)+76)|0);
 var $86=HEAP32[(($85)>>2)];
 _free($86);
 label=28;break;
 case 28: 
 var $87=((($__v_sroa_16_0)-(80)+4)|0);
 var $88=$87;
 var $89=HEAP8[(($88)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $__v_sroa_16_0=$78;label=25;break;}else{label=29;break;}
 case 29: 
 var $93=((($__v_sroa_16_0)-(80)+12)|0);
 var $94=HEAP32[(($93)>>2)];
 _free($94);
 var $__v_sroa_16_0=$78;label=25;break;
 case 30: 
 var $95=($74|0)==0;
 if($95){label=32;break;}else{label=31;break;}
 case 31: 
 var $97=$74;
 _free($97);
 label=32;break;
 case 32: 
 return;
 case 33: 
 var $lpad_loopexit10$0 = ___cxa_find_matching_catch(); var $lpad_loopexit10$1 = tempRet0;
 var $lpad_phi12$1=$lpad_loopexit10$1;var $lpad_phi12$0=$lpad_loopexit10$0;var $__v_sroa_7_1=$__v_sroa_7_0;var $__v_sroa_16_1=$66;label=35;break;
 case 34: 
 var $lpad_nonloopexit11$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit11$1 = tempRet0;
 var $lpad_phi12$1=$lpad_nonloopexit11$1;var $lpad_phi12$0=$lpad_nonloopexit11$0;var $__v_sroa_7_1=$62;var $__v_sroa_16_1=$62;label=35;break;
 case 35: 
 var $__v_sroa_16_1;
 var $__v_sroa_7_1;
 var $lpad_phi12$0;
 var $lpad_phi12$1;
 var $__v_sroa_16_2=$__v_sroa_16_1;label=36;break;
 case 36: 
 var $__v_sroa_16_2;
 var $99=($__v_sroa_7_1|0)==($__v_sroa_16_2|0);
 if($99){label=41;break;}else{label=37;break;}
 case 37: 
 var $101=((($__v_sroa_16_2)-(80))|0);
 var $102=((($__v_sroa_16_2)-(80)+68)|0);
 var $103=$102;
 var $104=HEAP8[(($103)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=39;break;}else{label=38;break;}
 case 38: 
 var $108=((($__v_sroa_16_2)-(80)+76)|0);
 var $109=HEAP32[(($108)>>2)];
 _free($109);
 label=39;break;
 case 39: 
 var $110=((($__v_sroa_16_2)-(80)+4)|0);
 var $111=$110;
 var $112=HEAP8[(($111)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){var $__v_sroa_16_2=$101;label=36;break;}else{label=40;break;}
 case 40: 
 var $116=((($__v_sroa_16_2)-(80)+12)|0);
 var $117=HEAP32[(($116)>>2)];
 _free($117);
 var $__v_sroa_16_2=$101;label=36;break;
 case 41: 
 var $118=($61|0)==0;
 if($118){label=43;break;}else{label=42;break;}
 case 42: 
 var $120=$61;
 _free($120);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi12$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io8MaterialC2ERKS2_($this,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$4;
 var $5=(($this+4)|0);
 var $6=(($0+4)|0);
 var $7=$6;
 var $8=HEAP8[(($7)>>0)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$5;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 label=13;break;
 case 3: 
 var $14=(($0+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($0+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17>>>0)>4294967279;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $21=($17>>>0)<11;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$17<<1;
 var $24=(($23)&255);
 var $25=$5;
 HEAP8[(($25)>>0)]=$24;
 var $26=$5;
 var $27=(($26+1)|0);
 var $__p_0_i7=$27;label=12;break;
 case 7: 
 var $28=((($17)+(16))|0);
 var $29=$28&-16;
 var $30=($29|0)==0;
 var $_size_i9=($30?1:$29);
 var $31=_malloc($_size_i9);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{var $_lcssa_i11=$31;label=11;break;}
 case 8: 
 var $33=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $34=($33|0)==0;
 if($34){label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$33;
 FUNCTION_TABLE[$36]();
 var $37=_malloc($_size_i9);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $_lcssa_i11=$37;label=11;break;}
 case 10: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=15192;
 ___cxa_throw($40,26096,(782));
 throw "Reached an unreachable!";
 case 11: 
 var $_lcssa_i11;
 var $42=(($this+12)|0);
 HEAP32[(($42)>>2)]=$_lcssa_i11;
 var $43=$29|1;
 var $44=(($5)|0);
 HEAP32[(($44)>>2)]=$43;
 var $45=(($this+8)|0);
 HEAP32[(($45)>>2)]=$17;
 var $__p_0_i7=$_lcssa_i11;label=12;break;
 case 12: 
 var $__p_0_i7;
 assert($17 % 1 === 0);(_memcpy($__p_0_i7, $15, $17)|0);
 var $46=(($__p_0_i7+$17)|0);
 HEAP8[(($46)>>0)]=0;
 label=13;break;
 case 13: 
 var $48=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$48;
 var $49=(($0+16)|0);
 var $50=HEAPF32[(($49)>>2)];
 var $51=(($this+16)|0);
 HEAPF32[(($51)>>2)]=$50;
 var $52=(($0+20)|0);
 var $53=HEAPF32[(($52)>>2)];
 var $54=(($this+20)|0);
 HEAPF32[(($54)>>2)]=$53;
 var $55=(($0+24)|0);
 var $56=HEAPF32[(($55)>>2)];
 var $57=(($this+24)|0);
 HEAPF32[(($57)>>2)]=$56;
 var $58=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$58;
 var $59=(($0+28)|0);
 var $60=HEAPF32[(($59)>>2)];
 var $61=(($this+28)|0);
 HEAPF32[(($61)>>2)]=$60;
 var $62=(($0+32)|0);
 var $63=HEAPF32[(($62)>>2)];
 var $64=(($this+32)|0);
 HEAPF32[(($64)>>2)]=$63;
 var $65=(($0+36)|0);
 var $66=HEAPF32[(($65)>>2)];
 var $67=(($this+36)|0);
 HEAPF32[(($67)>>2)]=$66;
 var $68=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$68;
 var $69=(($0+40)|0);
 var $70=HEAPF32[(($69)>>2)];
 var $71=(($this+40)|0);
 HEAPF32[(($71)>>2)]=$70;
 var $72=(($0+44)|0);
 var $73=HEAPF32[(($72)>>2)];
 var $74=(($this+44)|0);
 HEAPF32[(($74)>>2)]=$73;
 var $75=(($0+48)|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=(($this+48)|0);
 HEAPF32[(($77)>>2)]=$76;
 var $78=(($this+52)|0);
 var $79=(($0+52)|0);
 var $80=$78;
 var $81=$79;
 assert(16 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];HEAP32[((($80)+(12))>>2)]=HEAP32[((($81)+(12))>>2)];
 var $82=(($this+68)|0);
 var $83=(($0+68)|0);
 var $84=$83;
 var $85=HEAP8[(($84)>>0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=14;break;}else{label=15;break;}
 case 14: 
 var $89=$82;
 assert(12 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($84)+(8))>>2)];
 label=28;break;
 case 15: 
 var $91=(($0+76)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($0+72)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=($94>>>0)>4294967279;
 if($95){label=16;break;}else{label=18;break;}
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=30;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $98=($94>>>0)<11;
 if($98){label=19;break;}else{label=20;break;}
 case 19: 
 var $100=$94<<1;
 var $101=(($100)&255);
 var $102=$82;
 HEAP8[(($102)>>0)]=$101;
 var $103=$82;
 var $104=(($103+1)|0);
 var $__p_0_i=$104;label=27;break;
 case 20: 
 var $105=((($94)+(16))|0);
 var $106=$105&-16;
 var $107=($106|0)==0;
 var $_size_i=($107?1:$106);
 var $108=_malloc($_size_i);
 var $109=($108|0)==0;
 if($109){label=21;break;}else{var $_lcssa_i=$108;label=26;break;}
 case 21: 
 var $110=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $111=($110|0)==0;
 if($111){label=24;break;}else{label=22;break;}
 case 22: 
 var $113=$110;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=29;break; }
 case 23: 
 var $114=_malloc($_size_i);
 var $115=($114|0)==0;
 if($115){label=21;break;}else{var $_lcssa_i=$114;label=26;break;}
 case 24: 
 var $117=___cxa_allocate_exception(4);
 var $118=$117;
 HEAP32[(($118)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($117,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=30;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $_lcssa_i;
 var $119=(($this+76)|0);
 HEAP32[(($119)>>2)]=$_lcssa_i;
 var $120=$106|1;
 var $121=(($82)|0);
 HEAP32[(($121)>>2)]=$120;
 var $122=(($this+72)|0);
 HEAP32[(($122)>>2)]=$94;
 var $__p_0_i=$_lcssa_i;label=27;break;
 case 27: 
 var $__p_0_i;
 assert($94 % 1 === 0);(_memcpy($__p_0_i, $92, $94)|0);
 var $123=(($__p_0_i+$94)|0);
 HEAP8[(($123)>>0)]=0;
 label=28;break;
 case 28: 
 return;
 case 29: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=31;break;
 case 30: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=31;break;
 case 31: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $125=$5;
 var $126=HEAP8[(($125)>>0)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){label=33;break;}else{label=32;break;}
 case 32: 
 var $130=(($this+12)|0);
 var $131=HEAP32[(($130)>>2)];
 _free($131);
 label=33;break;
 case 33: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=17048;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 HEAP32[(($1)>>2)]=17360;
 var $5=(($this+32)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+36)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($this+52)|0);
 var $9=(($this+68)|0);
 var $10=(($this+98)|0);
 var $11=(($this+4)|0);
 var $12=$8;
 _memset($12, 0, 47)|0;
 var $13=HEAP32[(($11)>>2)];
 var $14=(($13+4)|0);
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $17=(($13+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($13+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$18;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($16>>>0);
 if($25){label=3;break;}else{var $33=0;label=5;break;}
 case 3: 
 var $27=(($20+($16<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)!=0;
 var $33=$29;label=5;break;
 case 4: 
 var $31$0 = ___cxa_find_matching_catch(0); var $31$1 = tempRet0;
 var $32=$31$0;
 ___clang_call_terminate($32);
 throw "Reached an unreachable!";
 case 5: 
 var $33;
 var $34=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($13)|0);
 var $38=$13;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=7;break;
 case 7: 
 if($33){label=8;break;}else{label=19;break;}
 case 8: 
 var $43=HEAP32[(($11)>>2)];
 var $44=(($43+4)|0);
 var $45=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+1,tempValue);
 var $46=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(33520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=17;break; }
 case 9: 
 var $47=(($43+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($43+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$48;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=$53>>2;
 var $55=($54>>>0)>($46>>>0);
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 var $56=(($50+($46<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=11;break;}else{label=13;break;}
 case 11: 
 var $59=___cxa_allocate_exception(4);
 var $60=$59;
 HEAP32[(($60)>>2)]=15224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($59,26112,(1060)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=17;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $62=$57;
 HEAP32[(($9)>>2)]=$62;
 var $63=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 var $66=(($43)|0);
 var $67=$43;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=15;break;
 case 15: 
 var $71=HEAP32[(($9)>>2)];
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($71);
 var $77=($76&1);
 HEAP8[(($10)>>0)]=$77;
 label=19;break;
 case 16: 
 var $79$0 = ___cxa_find_matching_catch(); var $79$1 = tempRet0;
 var $80=$79$0;
 var $81=$79$1;
 var $_0=$80;var $_07=$81;label=21;break;
 case 17: 
 var $83$0 = ___cxa_find_matching_catch(); var $83$1 = tempRet0;
 var $84=$83$0;
 var $85=$83$1;
 var $86=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+-1,tempValue);
 var $87=($86|0)==0;
 if($87){label=18;break;}else{var $_0=$84;var $_07=$85;label=21;break;}
 case 18: 
 var $89=(($43)|0);
 var $90=$43;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+8)|0);
 var $93=HEAP32[(($92)>>2)];
 FUNCTION_TABLE[$93]($89);
 var $_0=$84;var $_07=$85;label=21;break;
 case 19: 
 var $95=$this;
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$98]($this,0,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=16;break; }
 case 20: 
 return;
 case 21: 
 var $_07;
 var $_0;
 HEAP32[(($1)>>2)]=17048;
 var $101=HEAP32[(($11)>>2)];
 var $102=(($101+4)|0);
 var $103=(tempValue=HEAP32[(($102)>>2)],HEAP32[(($102)>>2)]=tempValue+-1,tempValue);
 var $104=($103|0)==0;
 if($104){label=22;break;}else{label=23;break;}
 case 22: 
 var $106=(($101)|0);
 var $107=$101;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+8)|0);
 var $110=HEAP32[(($109)>>2)];
 FUNCTION_TABLE[$110]($106);
 label=23;break;
 case 23: 
 var $111$0=$_0;
 var $111$1=0;
 var $112$0=$111$0;
 var $112$1=$_07;
 ___resumeException($112$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $__rt_0=0;label=19;break;}
 case 2: 
 var $5=$__mode&-3;
 switch(($5|0)){case 12:{ label=10;break;}case 28:{ label=11;break;}case 60:{ label=12;break;}case 29:case 13:{ label=13;break;}case 16:case 48:{ var $__mdstr_0=1128;label=14;break;}case 17:case 1:{ label=3;break;}case 8:{ label=4;break;}case 24:{ label=5;break;}case 56:{ label=6;break;}case 25:case 9:{ label=7;break;}case 20:case 52:{ label=8;break;}case 21:case 5:{ label=9;break;}default:{var $__rt_0=0;label=19;break;}}break;
 case 3: 
 var $__mdstr_0=1096;label=14;break;
 case 4: 
 var $__mdstr_0=1064;label=14;break;
 case 5: 
 var $__mdstr_0=1032;label=14;break;
 case 6: 
 var $__mdstr_0=976;label=14;break;
 case 7: 
 var $__mdstr_0=10192;label=14;break;
 case 8: 
 var $__mdstr_0=10136;label=14;break;
 case 9: 
 var $__mdstr_0=10072;label=14;break;
 case 10: 
 var $__mdstr_0=4320;label=14;break;
 case 11: 
 var $__mdstr_0=10000;label=14;break;
 case 12: 
 var $__mdstr_0=9944;label=14;break;
 case 13: 
 var $__mdstr_0=9880;label=14;break;
 case 14: 
 var $__mdstr_0;
 var $18=($this|0)==0;
 if($18){var $__rt_0=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $20=_fopen($__s,$__mdstr_0);
 HEAP32[(($1)>>2)]=$20;
 var $21=($20|0)==0;
 if($21){var $__rt_0=0;label=19;break;}else{label=16;break;}
 case 16: 
 var $23=(($this+88)|0);
 HEAP32[(($23)>>2)]=$__mode;
 var $24=$__mode&2;
 var $25=($24|0)==0;
 if($25){var $__rt_0=$this;label=19;break;}else{label=17;break;}
 case 17: 
 var $27=_fseek($20,0,2);
 var $28=($27|0)==0;
 if($28){var $__rt_0=$this;label=19;break;}else{label=18;break;}
 case 18: 
 var $30=HEAP32[(($1)>>2)];
 var $31=_fclose($30);
 HEAP32[(($1)>>2)]=0;
 var $__rt_0=0;label=19;break;
 case 19: 
 var $__rt_0;
 return $__rt_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($stream,$tokens){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $line=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(32);
 var $3=$line;
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=($storemerge>>>0)<3;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$line;
 var $7=$line;
 var $8=(($7+1)|0);
 var $9=$stream;
 var $10=$stream;
 var $11=(($line+8)|0);
 var $12=(($line+4)|0);
 label=5;break;
 case 4: 
 var $14=(($3+($storemerge<<2))|0);
 HEAP32[(($14)>>2)]=0;
 var $15=((($storemerge)+(1))|0);
 var $storemerge=$15;label=2;break;
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($stream,$line,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=27;break; }
 case 6: 
 var $16=HEAP8[(($6)>>0)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 var $19=HEAP32[(($11)>>2)];
 var $_=($18?$8:$19);
 var $20=HEAP8[(($_)>>0)];
 var $21=(($20<<24)>>24)==35;
 if($21){label=12;break;}else{label=7;break;}
 case 7: 
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $24=HEAP32[(($12)>>2)];
 var $28=$24;label=10;break;
 case 9: 
 var $26=($16&255);
 var $27=$26>>>1;
 var $28=$27;label=10;break;
 case 10: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[(($11)>>2)];
 var $_45=($18?$8:$30);
 var $31=HEAP8[(($_45)>>0)];
 var $32=(($31<<24)>>24)==13;
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=HEAP32[(($9)>>2)];
 var $35=((($34)-(12))|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum=((($37)+(16))|0);
 var $38=(($10+$_sum)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$40&2;
 var $42=($41|0)==0;
 if($42){label=5;break;}else{label=13;break;}
 case 13: 
 if($18){label=15;break;}else{label=14;break;}
 case 14: 
 var $44=HEAP32[(($12)>>2)];
 var $48=$44;label=16;break;
 case 15: 
 var $46=($16&255);
 var $47=$46>>>1;
 var $48=$47;label=16;break;
 case 16: 
 var $48;
 var $49=(($tokens)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($tokens+4)|0);
 label=17;break;
 case 17: 
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$2;
 var $55=$2;
 var $56=(($55+1)|0);
 var $57=$1;
 var $58=$1;
 var $59=(($58+1)|0);
 var $60=(($tokens+8)|0);
 var $61=$1;
 var $62=(($2+8)|0);
 var $63=(($1+8)|0);
 var $64=(($1)|0);
 var $65=(($1+4)|0);
 var $66=(($2)|0);
 var $67=(($2+4)|0);
 var $from_0=0;label=21;break;
 case 19: 
 var $69=((($52)-(12))|0);
 HEAP32[(($51)>>2)]=$69;
 var $70=$69;
 var $71=HEAP8[(($70)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=17;break;}else{label=20;break;}
 case 20: 
 var $75=((($52)-(12)+8)|0);
 var $76=HEAP32[(($75)>>2)];
 _free($76);
 label=17;break;
 case 21: 
 var $from_0;
 var $77=($from_0|0)==($48|0);
 if($77){label=86;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[(($6)>>0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 var $81=HEAP32[(($11)>>2)];
 var $_46=($80?$8:$81);
 var $82=(($_46+$from_0)|0);
 var $83=HEAP8[(($82)>>0)];
 var $84=(($83<<24)>>24)==32;
 if($84){label=25;break;}else{label=23;break;}
 case 23: 
 var $85=HEAP32[(($11)>>2)];
 var $_47=($80?$8:$85);
 var $86=(($_47+$from_0)|0);
 var $87=HEAP8[(($86)>>0)];
 var $88=(($87<<24)>>24)==9;
 if($88){label=25;break;}else{label=24;break;}
 case 24: 
 var $90=HEAP32[(($11)>>2)];
 var $_48=($80?$8:$90);
 var $91=(($_48+$from_0)|0);
 var $92=HEAP8[(($91)>>0)];
 var $93=(($92<<24)>>24)==13;
 if($93){label=25;break;}else{label=30;break;}
 case 25: 
 var $94=((($from_0)+(1))|0);
 var $from_0=$94;label=21;break;
 case 26: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=29;break;
 case 27: 
 var $lpad_loopexit41$0 = ___cxa_find_matching_catch(); var $lpad_loopexit41$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit41$1;var $lpad_phi$0=$lpad_loopexit41$0;label=29;break;
 case 28: 
 var $lpad_nonloopexit42$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit42$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit42$1;var $lpad_phi$0=$lpad_nonloopexit42$0;label=29;break;
 case 29: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $95=$lpad_phi$0;
 var $96=$lpad_phi$1;
 var $_1=$95;var $_132=$96;label=89;break;
 case 30: 
 if($77){label=86;break;}else{label=31;break;}
 case 31: 
 var $98=HEAP32[(($11)>>2)];
 var $storemerge1_in=$from_0;label=32;break;
 case 32: 
 var $storemerge1_in;
 var $storemerge1=((($storemerge1_in)+(1))|0);
 var $99=($storemerge1|0)==($48|0);
 var $_pre=HEAP8[(($6)>>0)];
 if($99){var $112=$_pre;label=36;break;}else{label=33;break;}
 case 33: 
 var $100=$_pre&1;
 var $101=(($100<<24)>>24)==0;
 var $_49=($101?$8:$98);
 var $102=(($_49+$storemerge1)|0);
 var $103=HEAP8[(($102)>>0)];
 var $104=(($103<<24)>>24)==32;
 if($104){label=35;break;}else{label=34;break;}
 case 34: 
 var $_50=($101?$8:$98);
 var $105=(($_50+$storemerge1)|0);
 var $106=HEAP8[(($105)>>0)];
 var $107=(($106<<24)>>24)==9;
 if($107){label=35;break;}else{var $storemerge1_in=$storemerge1;label=32;break;}
 case 35: 
 var $_51=($101?$8:$98);
 var $109=(($_51+$storemerge1)|0);
 var $110=HEAP8[(($109)>>0)];
 var $111=(($110<<24)>>24)==13;
 if($111){var $storemerge1_in=$storemerge1;label=32;break;}else{var $112=$_pre;label=36;break;}
 case 36: 
 var $112;
 var $113=((($storemerge1)-($from_0))|0);
 var $114=$112&1;
 var $115=(($114<<24)>>24)==0;
 if($115){label=38;break;}else{label=37;break;}
 case 37: 
 var $117=HEAP32[(($12)>>2)];
 var $121=$117;label=39;break;
 case 38: 
 var $119=($112&255);
 var $120=$119>>>1;
 var $121=$120;label=39;break;
 case 39: 
 var $121;
 var $122=($121>>>0)<($from_0>>>0);
 if($122){label=40;break;}else{label=42;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=28;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $_52=($115?$8:$98);
 var $124=(($_52+$from_0)|0);
 var $125=((($121)-($from_0))|0);
 var $126=($125>>>0)<($113>>>0);
 var $127=($126?$125:$113);
 var $128=($127>>>0)>4294967279;
 if($128){label=43;break;}else{label=45;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=28;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $131=($127>>>0)<11;
 if($131){label=46;break;}else{label=47;break;}
 case 46: 
 var $133=$127<<1;
 var $134=(($133)&255);
 HEAP8[(($54)>>0)]=$134;
 var $__p_0_i17=$56;label=54;break;
 case 47: 
 var $135=((($127)+(16))|0);
 var $136=$135&-16;
 var $137=($136|0)==0;
 var $_size_i21=($137?1:$136);
 var $138=_malloc($_size_i21);
 var $139=($138|0)==0;
 if($139){label=48;break;}else{var $_lcssa_i23=$138;label=53;break;}
 case 48: 
 var $140=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=$140;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=26;break; }
 case 50: 
 var $144=_malloc($_size_i21);
 var $145=($144|0)==0;
 if($145){label=48;break;}else{var $_lcssa_i23=$144;label=53;break;}
 case 51: 
 var $147=___cxa_allocate_exception(4);
 var $148=$147;
 HEAP32[(($148)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($147,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=28;break; }
 case 52: 
 throw "Reached an unreachable!";
 case 53: 
 var $_lcssa_i23;
 HEAP32[(($62)>>2)]=$_lcssa_i23;
 var $149=$136|1;
 HEAP32[(($66)>>2)]=$149;
 HEAP32[(($67)>>2)]=$127;
 var $__p_0_i17=$_lcssa_i23;label=54;break;
 case 54: 
 var $__p_0_i17;
 assert($127 % 1 === 0);(_memcpy($__p_0_i17, $124, $127)|0);
 var $150=(($__p_0_i17+$127)|0);
 HEAP8[(($150)>>0)]=0;
 var $151=HEAP8[(($54)>>0)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 var $154=HEAP32[(($62)>>2)];
 var $_53=($153?$56:$154);
 var $155=_strlen($_53);
 var $156=($155>>>0)>4294967279;
 if($156){label=55;break;}else{label=57;break;}
 case 55: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=79;break; }
 case 56: 
 throw "Reached an unreachable!";
 case 57: 
 var $159=($155>>>0)<11;
 if($159){label=58;break;}else{label=59;break;}
 case 58: 
 var $161=$155<<1;
 var $162=(($161)&255);
 HEAP8[(($57)>>0)]=$162;
 var $__p_0_i=$59;label=66;break;
 case 59: 
 var $163=((($155)+(16))|0);
 var $164=$163&-16;
 var $165=($164|0)==0;
 var $_size_i=($165?1:$164);
 var $166=_malloc($_size_i);
 var $167=($166|0)==0;
 if($167){label=60;break;}else{var $_lcssa_i=$166;label=65;break;}
 case 60: 
 var $168=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $169=($168|0)==0;
 if($169){label=63;break;}else{label=61;break;}
 case 61: 
 var $171=$168;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$171]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=78;break; }
 case 62: 
 var $172=_malloc($_size_i);
 var $173=($172|0)==0;
 if($173){label=60;break;}else{var $_lcssa_i=$172;label=65;break;}
 case 63: 
 var $175=___cxa_allocate_exception(4);
 var $176=$175;
 HEAP32[(($176)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($175,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=79;break; }
 case 64: 
 throw "Reached an unreachable!";
 case 65: 
 var $_lcssa_i;
 HEAP32[(($63)>>2)]=$_lcssa_i;
 var $177=$164|1;
 HEAP32[(($64)>>2)]=$177;
 HEAP32[(($65)>>2)]=$155;
 var $__p_0_i=$_lcssa_i;label=66;break;
 case 66: 
 var $__p_0_i;
 assert($155 % 1 === 0);(_memcpy($__p_0_i, $_53, $155)|0);
 var $179=(($__p_0_i+$155)|0);
 HEAP8[(($179)>>0)]=0;
 var $180=HEAP32[(($51)>>2)];
 var $181=HEAP32[(($60)>>2)];
 var $182=($180>>>0)<($181>>>0);
 if($182){label=67;break;}else{label=73;break;}
 case 67: 
 var $184=($180|0)==0;
 if($184){var $192=0;label=72;break;}else{label=68;break;}
 case 68: 
 var $186=$180;
 assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
 var $storemerge2=0;label=69;break;
 case 69: 
 var $storemerge2;
 var $188=($storemerge2>>>0)<3;
 if($188){label=70;break;}else{label=71;break;}
 case 70: 
 var $190=(($61+($storemerge2<<2))|0);
 HEAP32[(($190)>>2)]=0;
 var $191=((($storemerge2)+(1))|0);
 var $storemerge2=$191;label=69;break;
 case 71: 
 var $_pre44=HEAP32[(($51)>>2)];
 var $192=$_pre44;label=72;break;
 case 72: 
 var $192;
 var $193=(($192+12)|0);
 HEAP32[(($51)>>2)]=$193;
 label=74;break;
 case 73: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($tokens,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=81;break; }
 case 74: 
 var $195=HEAP8[(($57)>>0)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=76;break;}else{label=75;break;}
 case 75: 
 var $199=HEAP32[(($63)>>2)];
 _free($199);
 label=76;break;
 case 76: 
 var $200=HEAP8[(($54)>>0)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=85;break;}else{label=77;break;}
 case 77: 
 var $204=HEAP32[(($62)>>2)];
 _free($204);
 label=85;break;
 case 78: 
 var $lpad_loopexit35$0 = ___cxa_find_matching_catch(); var $lpad_loopexit35$1 = tempRet0;
 var $lpad_phi37$1=$lpad_loopexit35$1;var $lpad_phi37$0=$lpad_loopexit35$0;label=80;break;
 case 79: 
 var $lpad_nonloopexit39$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit39$1 = tempRet0;
 var $lpad_phi37$1=$lpad_nonloopexit39$1;var $lpad_phi37$0=$lpad_nonloopexit39$0;label=80;break;
 case 80: 
 var $lpad_phi37$0;
 var $lpad_phi37$1;
 var $205=$lpad_phi37$0;
 var $206=$lpad_phi37$1;
 var $_0=$205;var $_031=$206;label=83;break;
 case 81: 
 var $208$0 = ___cxa_find_matching_catch(); var $208$1 = tempRet0;
 var $209=$208$0;
 var $210=$208$1;
 var $211=HEAP8[(($57)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){var $_0=$209;var $_031=$210;label=83;break;}else{label=82;break;}
 case 82: 
 var $215=HEAP32[(($63)>>2)];
 _free($215);
 var $_0=$209;var $_031=$210;label=83;break;
 case 83: 
 var $_031;
 var $_0;
 var $216=HEAP8[(($54)>>0)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){var $_1=$_0;var $_132=$_031;label=89;break;}else{label=84;break;}
 case 84: 
 var $220=HEAP32[(($62)>>2)];
 _free($220);
 var $_1=$_0;var $_132=$_031;label=89;break;
 case 85: 
 var $221=($storemerge1>>>0)<($48>>>0);
 if($221){var $from_0=$storemerge1;label=21;break;}else{label=86;break;}
 case 86: 
 var $222=HEAP8[(($6)>>0)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=88;break;}else{label=87;break;}
 case 87: 
 var $226=HEAP32[(($11)>>2)];
 _free($226);
 label=88;break;
 case 88: 
 STACKTOP=sp;return;
 case 89: 
 var $_132;
 var $_1;
 var $227=HEAP8[(($6)>>0)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=91;break;}else{label=90;break;}
 case 90: 
 var $231=HEAP32[(($11)>>2)];
 _free($231);
 label=91;break;
 case 91: 
 var $232$0=$_1;
 var $232$1=0;
 var $233$0=$232$0;
 var $233$1=$_132;
 ___resumeException($233$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE($q){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(32);
 var $5=(sp)+(48);
 var $6=(sp)+(64);
 var $N00=(sp)+(80);
 var $N01=(sp)+(96);
 var $N10=(sp)+(112);
 var $N11=(sp)+(128);
 var $7=(sp)+(144);
 var $8=(sp)+(152);
 var $9=HEAP8[((34560)>>0)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=2;break;}else{label=4;break;}
 case 2: 
 var $12=___cxa_guard_acquire(34560);
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[((31580)>>2)]=0;
 HEAP32[((31584)>>2)]=0;
 HEAP32[((31576)>>2)]=31580;
 var $15=___cxa_atexit((186),31576,___dso_handle);

 label=4;break;
 case 4: 
 var $17=(($q+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($q)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$18;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=($23|0)==16;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=HEAP32[((31580)>>2)];
 var $27=$26;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(31576,$27);
 HEAP32[((31584)>>2)]=0;
 HEAP32[((31576)>>2)]=31580;
 HEAP32[((31580)>>2)]=0;
 label=27;break;
 case 6: 
 var $29=HEAP32[(($20)>>2)];
 var $30=(($29)|0);
 var $31=HEAPF32[(($30)>>2)];
 var $32=(($3)|0);
 HEAPF32[(($32)>>2)]=$31;
 var $33=(($29+4)|0);
 var $34=HEAPF32[(($33)>>2)];
 var $35=(($3+4)|0);
 HEAPF32[(($35)>>2)]=$34;
 var $36=(($29+8)|0);
 var $37=HEAPF32[(($36)>>2)];
 var $38=(($3+8)|0);
 HEAPF32[(($38)>>2)]=$37;
 var $39=(($20+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40)|0);
 var $42=HEAPF32[(($41)>>2)];
 var $43=(($4)|0);
 HEAPF32[(($43)>>2)]=$42;
 var $44=(($40+4)|0);
 var $45=HEAPF32[(($44)>>2)];
 var $46=(($4+4)|0);
 HEAPF32[(($46)>>2)]=$45;
 var $47=(($40+8)|0);
 var $48=HEAPF32[(($47)>>2)];
 var $49=(($4+8)|0);
 HEAPF32[(($49)>>2)]=$48;
 var $50=(($20+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51)|0);
 var $53=HEAPF32[(($52)>>2)];
 var $54=(($5)|0);
 HEAPF32[(($54)>>2)]=$53;
 var $55=(($51+4)|0);
 var $56=HEAPF32[(($55)>>2)];
 var $57=(($5+4)|0);
 HEAPF32[(($57)>>2)]=$56;
 var $58=(($51+8)|0);
 var $59=HEAPF32[(($58)>>2)];
 var $60=(($5+8)|0);
 HEAPF32[(($60)>>2)]=$59;
 var $61=(($20+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62)|0);
 var $64=HEAPF32[(($63)>>2)];
 var $65=(($6)|0);
 HEAPF32[(($65)>>2)]=$64;
 var $66=(($62+4)|0);
 var $67=HEAPF32[(($66)>>2)];
 var $68=(($6+4)|0);
 HEAPF32[(($68)>>2)]=$67;
 var $69=(($62+8)|0);
 var $70=HEAPF32[(($69)>>2)];
 var $71=(($6+8)|0);
 HEAPF32[(($71)>>2)]=$70;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N00,$3,$42,$45,$48,$5);
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N01,$3,$53,$56,$59,$6);
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N10,$4,$53,$56,$59,$6);
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N11,$4,$64,$67,$70,$3);
 var $72=(($N00)|0);
 var $73=HEAPF32[(($72)>>2)];
 var $74=($73)*($73);
 var $75=(($N00+4)|0);
 var $76=HEAPF32[(($75)>>2)];
 var $77=($76)*($76);
 var $78=($74)+($77);
 var $79=(($N00+8)|0);
 var $80=HEAPF32[(($79)>>2)];
 var $81=($80)*($80);
 var $82=($78)+($81);
 var $83=Math_sqrt($82);
 var $84=(($N01)|0);
 var $85=HEAPF32[(($84)>>2)];
 var $86=($85)*($85);
 var $87=(($N01+4)|0);
 var $88=HEAPF32[(($87)>>2)];
 var $89=($88)*($88);
 var $90=($86)+($89);
 var $91=(($N01+8)|0);
 var $92=HEAPF32[(($91)>>2)];
 var $93=($92)*($92);
 var $94=($90)+($93);
 var $95=Math_sqrt($94);
 var $96=($83)*($95);
 var $97=$96==0;
 if($97){var $storemerge_i=-1;label=11;break;}else{label=7;break;}
 case 7: 
 var $99=($73)*($85);
 var $100=($76)*($88);
 var $101=($99)+($100);
 var $102=($80)*($92);
 var $103=($101)+($102);
 var $104=($103)/($96);
 var $105=$104>1;
 if($105){var $t_i_0=1;label=10;break;}else{label=8;break;}
 case 8: 
 var $107=$104<-1;
 if($107){label=9;break;}else{var $t_i_0=$104;label=10;break;}
 case 9: 
 var $t_i_0=-1;label=10;break;
 case 10: 
 var $t_i_0;
 var $110=$t_i_0;
 var $111=Math_acos($110);
 var $112=$111;
 var $phitmp88=$112;
 var $storemerge_i=$phitmp88;label=11;break;
 case 11: 
 var $storemerge_i;
 var $113=(($N10)|0);
 var $114=HEAPF32[(($113)>>2)];
 var $115=($114)*($114);
 var $116=(($N10+4)|0);
 var $117=HEAPF32[(($116)>>2)];
 var $118=($117)*($117);
 var $119=($115)+($118);
 var $120=(($N10+8)|0);
 var $121=HEAPF32[(($120)>>2)];
 var $122=($121)*($121);
 var $123=($119)+($122);
 var $124=Math_sqrt($123);
 var $125=(($N11)|0);
 var $126=HEAPF32[(($125)>>2)];
 var $127=($126)*($126);
 var $128=(($N11+4)|0);
 var $129=HEAPF32[(($128)>>2)];
 var $130=($129)*($129);
 var $131=($127)+($130);
 var $132=(($N11+8)|0);
 var $133=HEAPF32[(($132)>>2)];
 var $134=($133)*($133);
 var $135=($131)+($134);
 var $136=Math_sqrt($135);
 var $137=($124)*($136);
 var $138=$137==0;
 if($138){var $storemerge_i26=-1;label=16;break;}else{label=12;break;}
 case 12: 
 var $140=($114)*($126);
 var $141=($117)*($129);
 var $142=($140)+($141);
 var $143=($121)*($133);
 var $144=($142)+($143);
 var $145=($144)/($137);
 var $146=$145>1;
 if($146){var $t_i25_0=1;label=15;break;}else{label=13;break;}
 case 13: 
 var $148=$145<-1;
 if($148){label=14;break;}else{var $t_i25_0=$145;label=15;break;}
 case 14: 
 var $t_i25_0=-1;label=15;break;
 case 15: 
 var $t_i25_0;
 var $151=$t_i25_0;
 var $152=Math_acos($151);
 var $153=$152;
 var $phitmp87=$153;
 var $storemerge_i26=$phitmp87;label=16;break;
 case 16: 
 var $storemerge_i26;
 var $154=__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($3,$4,$5);
 var $155=__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($3,$5,$6);
 var $156=$155<$154;
 var $157=($156?$155:$154);
 var $158=__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($4,$5,$6);
 var $159=__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($4,$6,$3);
 var $160=$159<$158;
 var $161=($160?$159:$158);
 var $162=$157<$161;
 var $163=$storemerge_i26>(1.5707963267948966);
 if($163){label=17;break;}else{var $167=0;label=18;break;}
 case 17: 
 var $165=$storemerge_i<(1.5707963267948966);
 var $phitmp=($165&1);
 var $167=$phitmp;label=18;break;
 case 18: 
 var $167;
 var $168=(($167<<24)>>24)==0;
 var $or_cond=$162&$168;
 if($or_cond){label=19;break;}else{label=21;break;}
 case 19: 
 var $170=HEAP32[(($19)>>2)];
 var $171=(($170+4)|0);
 var $172=HEAP32[(($17)>>2)];
 var $173=($171|0)==($172|0);
 if($173){label=21;break;}else{label=20;break;}
 case 20: 
 var $175=HEAP32[(($170)>>2)];
 var $176=$172;
 var $177=$171;
 var $178=((($176)-($177))|0);
 var $179=$178>>2;
 var $180=$170;
 var $181=$171;
 _memmove($180,$181,$178,4,0);
 var $182=(($170+($179<<2))|0);
 HEAP32[(($182)>>2)]=$175;
 label=21;break;
 case 21: 
 var $183=HEAP32[(($19)>>2)];
 var $184=HEAP32[(($183)>>2)];
 var $185=(($183+8)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184>>>0)<($186>>>0);
 if($187){label=22;break;}else{label=23;break;}
 case 22: 
 var $189=(($7)|0);
 HEAP32[(($189)>>2)]=$184;
 var $190=(($7+4)|0);
 HEAP32[(($190)>>2)]=$186;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueIS4_EENS1_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEEOT_($1,31576,$7);
 var $191=(($1+4)|0);
 var $192=HEAP8[(($191)>>0)];
 var $res_sroa_2_0_in=$192;label=24;break;
 case 23: 
 var $194=(($8)|0);
 HEAP32[(($194)>>2)]=$186;
 var $195=(($8+4)|0);
 HEAP32[(($195)>>2)]=$184;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueIS4_EENS1_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEEOT_($2,31576,$8);
 var $196=(($2+4)|0);
 var $197=HEAP8[(($196)>>0)];
 var $res_sroa_2_0_in=$197;label=24;break;
 case 24: 
 var $res_sroa_2_0_in;
 var $199=$res_sroa_2_0_in&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=25;break;}else{label=27;break;}
 case 25: 
 var $202=HEAP32[(($19)>>2)];
 var $203=(($202+4)|0);
 var $204=HEAP32[(($17)>>2)];
 var $205=($203|0)==($204|0);
 if($205){label=27;break;}else{label=26;break;}
 case 26: 
 var $207=HEAP32[(($202)>>2)];
 var $208=$204;
 var $209=$203;
 var $210=((($208)-($209))|0);
 var $211=$210>>2;
 var $212=$202;
 var $213=$203;
 _memmove($212,$213,$210,4,0);
 var $214=(($202+($211<<2))|0);
 HEAP32[(($214)>>2)]=$207;
 label=27;break;
 case 27: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=($__n|0)==0;
 if($4){label=31;break;}else{label=2;break;}
 case 2: 
 var $6=($__n>>>0)>1073741823;
 if($6){label=3;break;}else{label=14;break;}
 case 3: 
 var $7=___cxa_allocate_exception(8);
 var $8=$7;
 HEAP32[(($8)>>2)]=15352;
 var $9=(($7+4)|0);
 var $10=_strlen(1736);
 var $11=((($10)+(13))|0);
 var $12=($11|0)==0;
 var $_size_i1_i=($12?1:$11);
 var $13=_malloc($_size_i1_i);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{var $_lcssa_i3_i=$13;label=9;break;}
 case 4: 
 var $15=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $16=($15|0)==0;
 if($16){label=7;break;}else{label=5;break;}
 case 5: 
 var $18=$15;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $19=_malloc($_size_i1_i);
 var $20=($19|0)==0;
 if($20){label=4;break;}else{var $_lcssa_i3_i=$19;label=9;break;}
 case 7: 
 var $22=___cxa_allocate_exception(4);
 var $23=$22;
 HEAP32[(($23)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($22,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $_lcssa_i3_i;
 var $24=$_lcssa_i3_i;
 HEAP32[(($24)>>2)]=$10;
 var $25=(($_lcssa_i3_i+4)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=$10;
 var $27=(($_lcssa_i3_i+8)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=0;
 var $29=(($_lcssa_i3_i+12)|0);
 var $30=((($10)+(1))|0);
 assert($30 % 1 === 0);(_memcpy($29, 1736, $30)|0);
 var $31=$9;
 HEAP32[(($31)>>2)]=$29;
 HEAP32[(($8)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($7,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=25;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=13;break;
 case 13: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($7);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=26;break;
 case 14: 
 var $34=$__n<<2;
 var $35=($34|0)==0;
 var $_size_i_i=($35?1:$34);
 var $36=_malloc($_size_i_i);
 var $37=($36|0)==0;
 if($37){label=15;break;}else{var $_lcssa_i_i=$36;label=20;break;}
 case 15: 
 var $38=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=16;break;}
 case 16: 
 var $41=$38;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=24;break; }
 case 17: 
 var $42=_malloc($_size_i_i);
 var $43=($42|0)==0;
 if($43){label=15;break;}else{var $_lcssa_i_i=$42;label=20;break;}
 case 18: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=25;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $_lcssa_i_i;
 var $47=$_lcssa_i_i;
 HEAP32[(($2)>>2)]=$47;
 HEAP32[(($1)>>2)]=$47;
 var $48=(($47+($__n<<2))|0);
 HEAP32[(($3)>>2)]=$48;
 var $_0=$__n;var $50=$47;label=21;break;
 case 21: 
 var $50;
 var $_0;
 var $51=($50|0)==0;
 if($51){var $53=0;label=23;break;}else{label=22;break;}
 case 22: 
 HEAP32[(($50)>>2)]=0;
 var $_pre9=HEAP32[(($2)>>2)];
 var $53=$_pre9;label=23;break;
 case 23: 
 var $53;
 var $54=(($53+4)|0);
 HEAP32[(($2)>>2)]=$54;
 var $55=((($_0)-(1))|0);
 var $56=($55|0)==0;
 if($56){label=31;break;}else{var $_0=$55;var $50=$54;label=21;break;}
 case 24: 
 var $lpad_loopexit5$0 = ___cxa_find_matching_catch(); var $lpad_loopexit5$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit5$1;var $eh_lpad_body$0=$lpad_loopexit5$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit6$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit6$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit6$1;var $eh_lpad_body$0=$lpad_nonloopexit6$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $57=HEAP32[(($1)>>2)];
 var $58=($57|0)==0;
 if($58){label=32;break;}else{label=27;break;}
 case 27: 
 var $_pre=HEAP32[(($2)>>2)];
 var $61=$_pre;label=28;break;
 case 28: 
 var $61;
 var $62=($57|0)==($61|0);
 if($62){label=30;break;}else{label=29;break;}
 case 29: 
 var $64=((($61)-(4))|0);
 HEAP32[(($2)>>2)]=$64;
 var $61=$64;label=28;break;
 case 30: 
 var $65=$57;
 _free($65);
 label=32;break;
 case 31: 
 return;
 case 32: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($this,$__x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=(((($10|0))/(12))&-1);
 var $12=($5|0)==($7|0);
 if($12){label=23;break;}else{label=2;break;}
 case 2: 
 var $14=($11>>>0)>357913941;
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=17;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $17=($5|0)==($7|0);
 var $_size_i=($17?1:$10);
 var $18=_malloc($_size_i);
 var $19=($18|0)==0;
 if($19){label=6;break;}else{var $_lcssa_i=$18;label=11;break;}
 case 6: 
 var $20=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=7;break;}
 case 7: 
 var $23=$20;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=16;break; }
 case 8: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=6;break;}else{var $_lcssa_i=$24;label=11;break;}
 case 9: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 HEAP32[(($28)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $_lcssa_i;
 var $29=$_lcssa_i;
 HEAP32[(($2)>>2)]=$29;
 HEAP32[(($1)>>2)]=$29;
 var $30=(($29+((($11)*(12))&-1))|0);
 HEAP32[(($3)>>2)]=$30;
 var $31=HEAP32[(($6)>>2)];
 var $32=HEAP32[(($4)>>2)];
 var $_0=$31;var $34=$29;label=12;break;
 case 12: 
 var $34;
 var $_0;
 var $35=($_0|0)==($32|0);
 if($35){label=23;break;}else{label=13;break;}
 case 13: 
 var $37=($34|0)==0;
 if($37){var $48=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $39=(($_0)|0);
 var $40=HEAPF32[(($39)>>2)];
 var $41=(($34)|0);
 HEAPF32[(($41)>>2)]=$40;
 var $42=(($_0+4)|0);
 var $43=HEAPF32[(($42)>>2)];
 var $44=(($34+4)|0);
 HEAPF32[(($44)>>2)]=$43;
 var $45=(($_0+8)|0);
 var $46=HEAPF32[(($45)>>2)];
 var $47=(($34+8)|0);
 HEAPF32[(($47)>>2)]=$46;
 var $_pre5=HEAP32[(($2)>>2)];
 var $48=$_pre5;label=15;break;
 case 15: 
 var $48;
 var $49=(($48+12)|0);
 HEAP32[(($2)>>2)]=$49;
 var $50=(($_0+12)|0);
 var $_0=$50;var $34=$49;label=12;break;
 case 16: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=18;break;
 case 17: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=18;break;
 case 18: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $52=HEAP32[(($1)>>2)];
 var $53=($52|0)==0;
 if($53){label=24;break;}else{label=19;break;}
 case 19: 
 var $_pre=HEAP32[(($2)>>2)];
 var $56=$_pre;label=20;break;
 case 20: 
 var $56;
 var $57=($52|0)==($56|0);
 if($57){label=22;break;}else{label=21;break;}
 case 21: 
 var $59=((($56)-(12))|0);
 HEAP32[(($2)>>2)]=$59;
 var $56=$59;label=20;break;
 case 22: 
 var $60=$52;
 _free($60);
 label=24;break;
 case 23: 
 return;
 case 24: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($1,$4);
 return;
}

//Func
function __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($agg_result,$p0,$p1_0_0_0_val,$p1_0_0_1_val,$p1_0_0_2_val,$p2){
 var label=0;


 var $1=(($p0)|0);
 var $2=HEAPF32[(($1)>>2)];
 var $3=($p1_0_0_0_val)-($2);
 var $4=(($p0+4)|0);
 var $5=HEAPF32[(($4)>>2)];
 var $6=($p1_0_0_1_val)-($5);
 var $7=(($p0+8)|0);
 var $8=HEAPF32[(($7)>>2)];
 var $9=($p1_0_0_2_val)-($8);
 var $10=(($p2)|0);
 var $11=HEAPF32[(($10)>>2)];
 var $12=($11)-($2);
 var $13=(($p2+4)|0);
 var $14=HEAPF32[(($13)>>2)];
 var $15=($14)-($5);
 var $16=(($p2+8)|0);
 var $17=HEAPF32[(($16)>>2)];
 var $18=($17)-($8);
 var $19=($6)*($18);
 var $20=($9)*($15);
 var $21=($19)-($20);
 var $22=($9)*($12);
 var $23=($3)*($18);
 var $24=($22)-($23);
 var $25=($3)*($15);
 var $26=($6)*($12);
 var $27=($25)-($26);
 var $28=(($agg_result)|0);
 HEAPF32[(($28)>>2)]=$21;
 var $29=(($agg_result+4)|0);
 HEAPF32[(($29)>>2)]=$24;
 var $30=(($agg_result+8)|0);
 HEAPF32[(($30)>>2)]=$27;
 return;
}

//Func
function __ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($p0,$p1,$p2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p1)|0);
 var $2=HEAPF32[(($1)>>2)];
 var $3=(($p0)|0);
 var $4=HEAPF32[(($3)>>2)];
 var $5=($2)-($4);
 var $6=(($p1+4)|0);
 var $7=HEAPF32[(($6)>>2)];
 var $8=(($p0+4)|0);
 var $9=HEAPF32[(($8)>>2)];
 var $10=($7)-($9);
 var $11=(($p1+8)|0);
 var $12=HEAPF32[(($11)>>2)];
 var $13=(($p0+8)|0);
 var $14=HEAPF32[(($13)>>2)];
 var $15=($12)-($14);
 var $16=($5)*($5);
 var $17=($10)*($10);
 var $18=($16)+($17);
 var $19=($15)*($15);
 var $20=($18)+($19);
 var $21=Math_sqrt($20);
 var $22=(($p2)|0);
 var $23=HEAPF32[(($22)>>2)];
 var $24=HEAPF32[(($3)>>2)];
 var $25=($23)-($24);
 var $26=(($p2+4)|0);
 var $27=HEAPF32[(($26)>>2)];
 var $28=HEAPF32[(($8)>>2)];
 var $29=($27)-($28);
 var $30=(($p2+8)|0);
 var $31=HEAPF32[(($30)>>2)];
 var $32=HEAPF32[(($13)>>2)];
 var $33=($31)-($32);
 var $34=($25)*($25);
 var $35=($29)*($29);
 var $36=($34)+($35);
 var $37=($33)*($33);
 var $38=($36)+($37);
 var $39=Math_sqrt($38);
 var $40=HEAPF32[(($1)>>2)];
 var $41=HEAPF32[(($22)>>2)];
 var $42=($40)-($41);
 var $43=HEAPF32[(($6)>>2)];
 var $44=HEAPF32[(($26)>>2)];
 var $45=($43)-($44);
 var $46=HEAPF32[(($11)>>2)];
 var $47=HEAPF32[(($30)>>2)];
 var $48=($46)-($47);
 var $49=($42)*($42);
 var $50=($45)*($45);
 var $51=($49)+($50);
 var $52=($48)*($48);
 var $53=($51)+($52);
 var $54=Math_sqrt($53);
 var $55=($21)+($39);
 var $56=($55)+($54);
 var $57=($56)*((0.5));
 var $58=($55)-($57);
 var $59=($57)*($58);
 var $60=($21)+($54);
 var $61=($60)-($57);
 var $62=($59)*($61);
 var $63=($39)+($54);
 var $64=($63)-($57);
 var $65=($62)*($64);
 var $66=$65>0;
 if($66){label=2;break;}else{var $storemerge=0;label=3;break;}
 case 2: 
 var $68=($65)*(8);
 var $69=($21)*($39);
 var $70=($69)*($54);
 var $71=($70)*($57);
 var $72=($68)/($71);
 var $storemerge=$72;label=3;break;
 case 3: 
 var $storemerge;
 return $storemerge;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueIS4_EENS1_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEEOT_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent_i=sp;
 var $1=_malloc(24);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_lcssa_i_i=$1;label=5;break;}
 case 2: 
 var $3=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$3;
 FUNCTION_TABLE[$6]();
 var $7=_malloc(24);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i_i=$7;label=5;break;}
 case 4: 
 var $10=___cxa_allocate_exception(4);
 var $11=$10;
 HEAP32[(($11)>>2)]=15192;
 ___cxa_throw($10,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i_i;
 var $12=$_lcssa_i_i;
 var $13=(($_lcssa_i_i+16)|0);
 var $14=$__v;
 var $15=$13;
 var $ld$0$0=(($14)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($15)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($15+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $17=$__parent_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $18=(($this+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 var $21$0=$16$0;
 var $21=$21$0;
 var $22=$21;
 var $23$0=$16$1;
 var $23$1=0;
 var $24$0=$23$0;
 var $24=$24$0;
 var $25=$24;
 if($20){label=15;break;}else{var $__nd_i_i_0_in=$19;label=6;break;}
 case 6: 
 var $__nd_i_i_0_in;
 var $26=(($__nd_i_i_0_in+16)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=($22>>>0)<($28>>>0);
 if($29){label=9;break;}else{label=7;break;}
 case 7: 
 var $31=($28>>>0)<($22>>>0);
 if($31){label=11;break;}else{label=8;break;}
 case 8: 
 var $32=(($__nd_i_i_0_in+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 var $35=($25>>>0)<($34>>>0);
 if($35){label=9;break;}else{label=11;break;}
 case 9: 
 var $36=(($__nd_i_i_0_in)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=10;break;}else{var $__nd_i_i_0_in=$37;label=6;break;}
 case 10: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $40=(($__nd_i_i_0_in)|0);
 var $57=$__nd_i_i_0_in;var $_04=$40;label=17;break;
 case 11: 
 var $41=($28>>>0)<($22>>>0);
 if($41){label=13;break;}else{label=12;break;}
 case 12: 
 var $42=(($__nd_i_i_0_in+20)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43;
 var $45=($44>>>0)<($25>>>0);
 if($45){label=13;break;}else{label=16;break;}
 case 13: 
 var $46=(($__nd_i_i_0_in+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=14;break;}else{var $__nd_i_i_0_in=$47;label=6;break;}
 case 14: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $50=(($__nd_i_i_0_in+4)|0);
 var $57=$__nd_i_i_0_in;var $_04=$50;label=17;break;
 case 15: 
 var $52=(($this+4)|0);
 var $53=$52;
 HEAP32[(($__parent_i)>>2)]=$53;
 var $54=(($52)|0);
 var $57=$53;var $_04=$54;label=17;break;
 case 16: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $55=$__nd_i_i_0_in;
 var $56=($__nd_i_i_0_in|0)==0;
 if($56){var $57=$__nd_i_i_0_in;var $_04=$__parent_i;label=17;break;}else{var $__r_i_0=$55;var $__inserted_i_0=0;label=20;break;}
 case 17: 
 var $_04;
 var $57;
 var $58=$_lcssa_i_i;
 var $59=$_lcssa_i_i;
 HEAP32[(($59)>>2)]=0;
 var $60=(($_lcssa_i_i+4)|0);
 var $61=$60;
 HEAP32[(($61)>>2)]=0;
 var $62=(($_lcssa_i_i+8)|0);
 var $63=$62;
 HEAP32[(($63)>>2)]=$57;
 HEAP32[(($_04)>>2)]=$58;
 var $64=(($this)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 if($68){var $71=$58;label=19;break;}else{label=18;break;}
 case 18: 
 var $70=$67;
 HEAP32[(($64)>>2)]=$70;
 var $_pre=HEAP32[(($_04)>>2)];
 var $71=$_pre;label=19;break;
 case 19: 
 var $71;
 var $72=HEAP32[(($18)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($72,$71);
 var $73=(($this+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=((($74)+(1))|0);
 HEAP32[(($73)>>2)]=$75;
 var $__r_i_0=$12;var $__inserted_i_0=1;label=20;break;
 case 20: 
 var $__inserted_i_0;
 var $__r_i_0;
 var $77=(($agg_result)|0);
 HEAP32[(($77)>>2)]=$__r_i_0;
 var $78=(($agg_result+4)|0);
 HEAP8[(($78)>>0)]=$__inserted_i_0;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $79=(($__inserted_i_0<<24)>>24)==0;
 if($79){var $__h_sroa_0_0=$12;label=21;break;}else{label=23;break;}
 case 21: 
 var $__h_sroa_0_0;
 var $81=($__h_sroa_0_0|0)==0;
 if($81){label=23;break;}else{label=22;break;}
 case 22: 
 var $83=$__h_sroa_0_0;
 _free($83);
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$8);
 var $9=$__nd;
 _free($9);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__last2;
 var $2=$__first2;
 var $3=((($1)-($2))|0);
 var $4=($__last2|0)==($__first2|0);
 if($4){var $_0=$__last1;label=8;break;}else{label=2;break;}
 case 2: 
 var $6=$__last1;
 var $7=$__first1;
 var $8=((($6)-($7))|0);
 var $9=($8|0)<($3|0);
 if($9){var $_0=$__last1;label=8;break;}else{label=3;break;}
 case 3: 
 var $11=((($3)-(1))|0);
 var $12=(($__first1+$11)|0);
 var $13=((($__last2)-(1))|0);
 var $__l1_0=$__last1;label=4;break;
 case 4: 
 var $__l1_0;
 var $14=($12|0)==($__l1_0|0);
 if($14){var $_0=$__last1;label=8;break;}else{label=5;break;}
 case 5: 
 var $16=((($__l1_0)-(1))|0);
 var $17=HEAP8[(($16)>>0)];
 var $18=HEAP8[(($13)>>0)];
 var $19=__ZNSt3__111char_traitsIcE2eqEcc($17,$18);
 if($19){var $__m2_0=$13;var $__m1_0=$16;label=6;break;}else{var $__l1_0=$16;label=4;break;}
 case 6: 
 var $__m1_0;
 var $__m2_0;
 var $20=($__m2_0|0)==($__first2|0);
 if($20){var $_0=$__m1_0;label=8;break;}else{label=7;break;}
 case 7: 
 var $22=((($__m1_0)-(1))|0);
 var $23=HEAP8[(($22)>>0)];
 var $24=((($__m2_0)-(1))|0);
 var $25=HEAP8[(($24)>>0)];
 var $26=__ZNSt3__111char_traitsIcE2eqEcc($23,$25);
 if($26){var $__m2_0=$24;var $__m1_0=$22;label=6;break;}else{var $__l1_0=$16;label=4;break;}
 case 8: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterSTLI6MyMeshE11IsSTLBinaryEPKc($filename){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $facenum=sp;
 var $tmpbuf=(sp)+(8);
 var $1=_fopen($filename,1064);
 var $2=_fseek($1,0,2);
 var $3=_ftell($1);
 var $4=_fseek($1,80,0);
 var $5=$facenum;
 var $6=_fread($5,4,1,$1);
 var $7=HEAP32[(($facenum)>>2)];
 var $8=((($7)*(50))&-1);
 var $9=((($8)+(84))|0);
 var $10=($3|0)==($9|0);
 var $_=($10?1:0);
 var $11=(($tmpbuf)|0);
 var $12=_fread($11,128,1,$1);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $14=($storemerge>>>0)<128;
 if($14){label=3;break;}else{var $binary_1=$_;label=5;break;}
 case 3: 
 var $16=(($tmpbuf+$storemerge)|0);
 var $17=HEAP8[(($16)>>0)];
 var $18=(($17<<24)>>24)<0;
 if($18){var $binary_1=1;label=5;break;}else{label=4;break;}
 case 4: 
 var $20=((($storemerge)+(1))|0);
 var $storemerge=$20;label=2;break;
 case 5: 
 var $binary_1;
 var $21=_fclose($1);
 var $22=$binary_1&1;
 var $23=(($22<<24)>>24)!=0;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterPLYI6MyMeshE4OpenERS3_PKcRNS1_7PlyInfoE($m,$filename,$pi){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fn2_i=sp;
 var $f_i=(sp)+(256);
 var $f1_i=(sp)+(264);
 var $f2_i=(sp)+(272);
 var $f3_i=(sp)+(280);
 var $__v_i=(sp)+(288);
 var $1=(sp)+(312);
 var $f_i_i_i_i_i=(sp)+(328);
 var $buf_i_i=(sp)+(440);
 var $tokenPtr_i_i=(sp)+(952);
 var $2=(sp)+(960);
 var $3=(sp)+(976);
 var $t_i_i=(sp)+(992);
 var $fa=(sp)+(1024);
 var $ea=(sp)+(3608);
 var $tsa=(sp)+(3872);
 var $va=(sp)+(4136);
 var $rga=(sp)+(4448);
 var $RangeGridAuxVec=(sp)+(4472);
 var $pf=(sp)+(4488);
 var $VPV=(sp)+(4552);
 var $FPV=(sp)+(4568);
 var $ca=(sp)+(4584);
 var $rm=(sp)+(4680);
 var $vi=(sp)+(4744);
 var $ei=(sp)+(4752);
 var $fi=(sp)+(4760);
 var $4=(sp)+(4768);
 var $5=(sp)+(4776);
 var $num_cols=(sp)+(4784);
 var $num_rows=(sp)+(4800);
 var $bufstr=(sp)+(4816);
 var $bufclean=(sp)+(4832);
 var $6=(sp)+(4848);
 var $7=(sp)+(4864);
 var $8=(sp)+(4880);
 var $9=(sp)+(4896);
 var $10=(sp)+(4912);
 var $TFILE=(sp)+(4920);
 var $NFILE=(sp)+(4936);
 var $bufstr18=(sp)+(4952);
 var $bufclean19=(sp)+(4968);
 var $11=(sp)+(4984);
 var $12=(sp)+(5000);
 var $buf2=(sp)+(5016);
 var $13=(sp)+(5272);
 var $14=($filename|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(9096,9032,354,10536);
 throw "Reached an unreachable!";
 case 3: 
 var $17=(($RangeGridAuxVec)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=(($RangeGridAuxVec+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=(($RangeGridAuxVec+8)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($pi+4)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=(($va+24)|0);
 HEAP32[(($21)>>2)]=42;
 var $22=(($pi)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=(($pf)|0);
 var $24=(($pf+4)|0);
 var $25=(($pf+8)|0);
 var $26=(($pf+12)|0);
 var $27=(($pf+16)|0);
 var $28=(($pf+20)|0);
 var $29=(($pf+40)|0);
 var $30=$29;
 var $31=$pf;
 HEAP32[(($31)>>2)]=0; HEAP32[((($31)+(4))>>2)]=0; HEAP32[((($31)+(8))>>2)]=0; HEAP32[((($31)+(12))>>2)]=0; HEAP32[((($31)+(16))>>2)]=0; HEAP32[((($31)+(20))>>2)]=0;
 var $storemerge_i=0;label=4;break;
 case 4: 
 var $storemerge_i;
 var $33=($storemerge_i>>>0)<3;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=(($30+($storemerge_i<<2))|0);
 HEAP32[(($35)>>2)]=0;
 var $36=((($storemerge_i)+(1))|0);
 var $storemerge_i=$36;label=4;break;
 case 6: 
 var $37=(($pf+24)|0);
 var $38=(($pf+28)|0);
 var $39=(($pf+32)|0);
 var $40=(($pf+36)|0);
 var $41=(($pf+52)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($pf+56)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=$37;
 HEAP32[(($43)>>2)]=0; HEAP32[((($43)+(4))>>2)]=0; HEAP32[((($43)+(8))>>2)]=0; HEAP32[((($43)+(12))>>2)]=0;
 var $44=(($buf_i_i)|0);
 var $$etemp$0$0=512;
 var $$etemp$0$1=0;

 var $45=$tokenPtr_i_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $46=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $47=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $48=$t_i_i;
 var $$etemp$4$0=28;
 var $$etemp$4$1=0;

 HEAP32[(($42)>>2)]=0;
 var $49=_fopen($filename,4320);
 HEAP32[(($37)>>2)]=$49;
 var $50=($49|0)==0;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 HEAP32[(($39)>>2)]=1;
 label=270;break;
 case 8: 
 var $53=$29;
 var $54=HEAP8[(($53)>>0)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=10;break;}else{label=9;break;}
 case 9: 
 var $58=(($pf+48)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP8[(($59)>>0)]=0;
 var $60=(($pf+44)|0);
 HEAP32[(($60)>>2)]=0;
 label=11;break;
 case 10: 
 var $62=$29;
 var $63=(($62+1)|0);
 HEAP8[(($63)>>0)]=0;
 HEAP8[(($53)>>0)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($29,1536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=279;break; }
 case 12: 
 var $64=HEAP32[(($37)>>2)];
 var $65=_fgets($44,511,$64);
 var $66=($65|0)==0;
 if($66){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 14: 
 var $69=_strlen($44);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($29,$44,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=279;break; }
 case 15: 
 var $70=_strlen(5504);
 var $71=($70|0)==0;
 if($71){label=21;break;}else{label=16;break;}
 case 16: 
 var $72=HEAP8[(($44)>>0)];
 var $73=(($72<<24)>>24)==0;
 if($73){var $r_0_lcssa_i_i_i=5504;var $84=0;label=19;break;}else{var $l_05_i_i_i=$44;var $r_06_i_i_i=5504;var $_07_in_i_i_i=$70;var $74=$72;label=17;break;}
 case 17: 
 var $74;
 var $_07_in_i_i_i;
 var $r_06_i_i_i;
 var $l_05_i_i_i;
 var $_07_i_i_i=((($_07_in_i_i_i)-(1))|0);
 var $75=HEAP8[(($r_06_i_i_i)>>0)];
 var $76=(($75<<24)>>24)!=0;
 var $77=($_07_i_i_i|0)!=0;
 var $or_cond_i_i_i=$76&$77;
 var $78=(($74<<24)>>24)==(($75<<24)>>24);
 var $or_cond3_i_i_i=$or_cond_i_i_i&$78;
 if($or_cond3_i_i_i){label=18;break;}else{var $r_0_lcssa_i_i_i=$r_06_i_i_i;var $84=$74;label=19;break;}
 case 18: 
 var $80=(($l_05_i_i_i+1)|0);
 var $81=(($r_06_i_i_i+1)|0);
 var $82=HEAP8[(($80)>>0)];
 var $83=(($82<<24)>>24)==0;
 if($83){var $r_0_lcssa_i_i_i=$81;var $84=0;label=19;break;}else{var $l_05_i_i_i=$80;var $r_06_i_i_i=$81;var $_07_in_i_i_i=$_07_i_i_i;var $74=$82;label=17;break;}
 case 19: 
 var $84;
 var $r_0_lcssa_i_i_i;
 var $85=HEAP8[(($r_0_lcssa_i_i_i)>>0)];
 var $phitmp515=(($84<<24)>>24)==(($85<<24)>>24);
 if($phitmp515){label=21;break;}else{label=20;break;}
 case 20: 
 HEAP32[(($39)>>2)]=2;
 label=270;break;
 case 21: 
 var $87=HEAP32[(($37)>>2)];
 var $88=_fgets($44,511,$87);
 var $89=($88|0)==0;
 if($89){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 23: 
 var $92=_strlen($44);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($29,$44,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=279;break; }
 case 24: 
 var $93=_strtok_r($44,5616,$tokenPtr_i_i);
 var $94=($93|0)==0;
 if($94){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 26: 
 var $97=HEAP8[(($93)>>0)];
 var $98=(($97<<24)>>24)==102;
 if($98){var $_014_i_i_i=$93;var $_05_i_i_i=5392;label=27;break;}else{label=29;break;}
 case 27: 
 var $_05_i_i_i;
 var $_014_i_i_i;
 var $99=(($_014_i_i_i+1)|0);
 var $100=(($_05_i_i_i+1)|0);
 var $101=HEAP8[(($99)>>0)];
 var $102=HEAP8[(($100)>>0)];
 var $103=(($101<<24)>>24)!=(($102<<24)>>24);
 var $104=(($101<<24)>>24)==0;
 var $or_cond_i6_i_i=$103|$104;
 if($or_cond_i6_i_i){var $_lcssa_i_i_i=$101;var $_lcssa2_i_i_i=$102;label=28;break;}else{var $_014_i_i_i=$99;var $_05_i_i_i=$100;label=27;break;}
 case 28: 
 var $_lcssa2_i_i_i;
 var $_lcssa_i_i_i;
 var $105=(($_lcssa_i_i_i<<24)>>24)==(($_lcssa2_i_i_i<<24)>>24);
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($39)>>2)]=4;
 label=270;break;
 case 30: 
 var $107=_strtok_r(0,5616,$tokenPtr_i_i);
 var $108=($107|0)==0;
 if($108){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 32: 
 var $111=HEAP8[(($107)>>0)];
 var $112=(($111<<24)>>24)==97;
 if($112){var $_014_i10_i_i=$107;var $_05_i9_i_i=5272;label=33;break;}else{label=36;break;}
 case 33: 
 var $_05_i9_i_i;
 var $_014_i10_i_i;
 var $113=(($_014_i10_i_i+1)|0);
 var $114=(($_05_i9_i_i+1)|0);
 var $115=HEAP8[(($113)>>0)];
 var $116=HEAP8[(($114)>>0)];
 var $117=(($115<<24)>>24)!=(($116<<24)>>24);
 var $118=(($115<<24)>>24)==0;
 var $or_cond_i11_i_i=$117|$118;
 if($or_cond_i11_i_i){var $_lcssa_i14_i_i=$115;var $_lcssa2_i13_i_i=$116;label=34;break;}else{var $_014_i10_i_i=$113;var $_05_i9_i_i=$114;label=33;break;}
 case 34: 
 var $_lcssa2_i13_i_i;
 var $_lcssa_i14_i_i;
 var $119=(($_lcssa_i14_i_i<<24)>>24)==(($_lcssa2_i13_i_i<<24)>>24);
 if($119){label=35;break;}else{label=36;break;}
 case 35: 
 HEAP32[(($40)>>2)]=1;
 label=45;break;
 case 36: 
 var $121=(($111<<24)>>24)!=98;
 if($121){label=44;break;}else{var $_014_i18_i_i=$107;var $_05_i17_i_i=5040;label=37;break;}
 case 37: 
 var $_05_i17_i_i;
 var $_014_i18_i_i;
 var $122=(($_014_i18_i_i+1)|0);
 var $123=(($_05_i17_i_i+1)|0);
 var $124=HEAP8[(($122)>>0)];
 var $125=HEAP8[(($123)>>0)];
 var $126=(($124<<24)>>24)!=(($125<<24)>>24);
 var $127=(($124<<24)>>24)==0;
 var $or_cond_i19_i_i=$126|$127;
 if($or_cond_i19_i_i){var $_lcssa_i22_i_i=$124;var $_lcssa2_i21_i_i=$125;label=38;break;}else{var $_014_i18_i_i=$122;var $_05_i17_i_i=$123;label=37;break;}
 case 38: 
 var $_lcssa2_i21_i_i;
 var $_lcssa_i22_i_i;
 var $128=(($_lcssa_i22_i_i<<24)>>24)==(($_lcssa2_i21_i_i<<24)>>24);
 if($128){label=39;break;}else{label=40;break;}
 case 39: 
 HEAP32[(($40)>>2)]=3;
 label=45;break;
 case 40: 
 if($121){label=44;break;}else{var $_014_i26_i_i=$107;var $_05_i25_i_i=4928;label=41;break;}
 case 41: 
 var $_05_i25_i_i;
 var $_014_i26_i_i;
 var $131=(($_014_i26_i_i+1)|0);
 var $132=(($_05_i25_i_i+1)|0);
 var $133=HEAP8[(($131)>>0)];
 var $134=HEAP8[(($132)>>0)];
 var $135=(($133<<24)>>24)!=(($134<<24)>>24);
 var $136=(($133<<24)>>24)==0;
 var $or_cond_i27_i_i=$135|$136;
 if($or_cond_i27_i_i){var $_lcssa_i30_i_i=$133;var $_lcssa2_i29_i_i=$134;label=42;break;}else{var $_014_i26_i_i=$131;var $_05_i25_i_i=$132;label=41;break;}
 case 42: 
 var $_lcssa2_i29_i_i;
 var $_lcssa_i30_i_i;
 var $137=(($_lcssa_i30_i_i<<24)>>24)==(($_lcssa2_i29_i_i<<24)>>24);
 if($137){label=43;break;}else{label=44;break;}
 case 43: 
 HEAP32[(($40)>>2)]=2;
 label=45;break;
 case 44: 
 HEAP32[(($39)>>2)]=4;
 label=270;break;
 case 45: 
 var $140=_strtok_r(0,5616,$tokenPtr_i_i);
 var $141=($140|0)==0;
 if($141){label=46;break;}else{label=47;break;}
 case 46: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 47: 
 var $144=$f_i_i_i_i_i;
 var $$etemp$5$0=112;
 var $$etemp$5$1=0;

 _memset($144, 0, 108)|0;
 var $145=(($f_i_i_i_i_i+4)|0);
 HEAP32[(($145)>>2)]=$140;
 var $146=(($f_i_i_i_i_i+8)|0);
 HEAP32[(($146)>>2)]=-1;
 var $147=(($f_i_i_i_i_i+44)|0);
 HEAP32[(($147)>>2)]=$140;
 var $148=(($f_i_i_i_i_i+76)|0);
 HEAP32[(($148)>>2)]=-1;
 var $149=(($f_i_i_i_i_i+104)|0);
 HEAP32[(($149)>>2)]=0;
 var $150=$140;
 var $151=$150^-1;
 var $152=(($f_i_i_i_i_i+108)|0);
 HEAP32[(($152)>>2)]=$151;
 var $153=(($f_i_i_i_i_i+100)|0);
 HEAP32[(($153)>>2)]=-1;
 var $154=___floatscan($f_i_i_i_i_i,1,1);
 var $$etemp$6$0=112;
 var $$etemp$6$1=0;

 var $155=$154;
 HEAPF32[(($38)>>2)]=$155;
 var $156=(($pf+12)|0);
 var $157=$2;
 var $158=(($157+1)|0);
 var $159=$2;
 var $160=(($2+8)|0);
 var $161=(($2)|0);
 var $162=(($2+4)|0);
 var $163=$3;
 var $164=(($163+1)|0);
 var $165=$3;
 var $166=(($3+8)|0);
 var $167=(($3)|0);
 var $168=(($3+4)|0);
 var $169=$1;
 var $170=$t_i_i;
 var $171=(($t_i_i+16)|0);
 var $172=(($t_i_i+20)|0);
 var $173=(($t_i_i+24)|0);
 var $174=(($t_i_i)|0);
 var $175=$1;
 var $176=(($175+1)|0);
 var $177=$t_i_i;
 var $178=(($177+1)|0);
 var $179=$1;
 var $180=(($t_i_i+12)|0);
 var $181=(($t_i_i+16)|0);
 var $182=(($t_i_i+8)|0);
 var $183=(($1+8)|0);
 var $184=(($t_i_i+4)|0);
 var $185=(($1)|0);
 var $186=(($1+4)|0);
 var $curelement_i_i_0=0;label=48;break;
 case 48: 
 var $curelement_i_i_0;
 var $187=HEAP32[(($37)>>2)];
 var $188=_fgets($44,511,$187);
 var $189=($188|0)==0;
 if($189){label=49;break;}else{label=50;break;}
 case 49: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 50: 
 var $192=_strlen($44);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($29,$44,$192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=278;break; }
 case 51: 
 var $193=_strtok_r($44,5616,$tokenPtr_i_i);
 var $194=($193|0)==0;
 if($194){label=52;break;}else{label=53;break;}
 case 52: 
 HEAP32[(($39)>>2)]=3;
 label=270;break;
 case 53: 
 var $197=HEAP8[(($193)>>0)];
 if((($197<<24)>>24)==99){ var $_014_i34_i_i=$193;var $_05_i33_i_i=4776;label=54;break;}else if((($197<<24)>>24)==111){ var $_014_i45_i_i=$193;var $_05_i44_i_i=4704;label=81;break;}else{label=107;break;}
 case 54: 
 var $_05_i33_i_i;
 var $_014_i34_i_i;
 var $198=(($_014_i34_i_i+1)|0);
 var $199=(($_05_i33_i_i+1)|0);
 var $200=HEAP8[(($198)>>0)];
 var $201=HEAP8[(($199)>>0)];
 var $202=(($200<<24)>>24)!=(($201<<24)>>24);
 var $203=(($200<<24)>>24)==0;
 var $or_cond_i35_i_i=$202|$203;
 if($or_cond_i35_i_i){var $_lcssa_i38_i_i=$200;var $_lcssa2_i37_i_i=$201;label=55;break;}else{var $_014_i34_i_i=$198;var $_05_i33_i_i=$199;label=54;break;}
 case 55: 
 var $_lcssa2_i37_i_i;
 var $_lcssa_i38_i_i;
 var $204=(($_lcssa_i38_i_i<<24)>>24)==(($_lcssa2_i37_i_i<<24)>>24);
 if($204){label=56;break;}else{label=80;break;}
 case 56: 
 var $205=_strlen($193);
 var $_sum_i_i=((($205)+(1))|0);
 var $206=(($193+$_sum_i_i)|0);
 var $207=_strlen($206);
 var $208=($207>>>0)>4294967279;
 if($208){label=57;break;}else{label=59;break;}
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=279;break; }
 case 58: 
 throw "Reached an unreachable!";
 case 59: 
 var $211=($207>>>0)<11;
 if($211){label=60;break;}else{label=61;break;}
 case 60: 
 var $213=$207<<1;
 var $214=(($213)&255);
 HEAP8[(($46)>>0)]=$214;
 var $__p_0_i_i_i=$158;label=68;break;
 case 61: 
 var $215=((($207)+(16))|0);
 var $216=$215&-16;
 var $217=($216|0)==0;
 var $_size_i_i_i=($217?1:$216);
 var $218=_malloc($_size_i_i_i);
 var $219=($218|0)==0;
 if($219){label=62;break;}else{var $_lcssa_i41_i_i=$218;label=67;break;}
 case 62: 
 var $220=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $221=($220|0)==0;
 if($221){label=65;break;}else{label=63;break;}
 case 63: 
 var $223=$220;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=277;break; }
 case 64: 
 var $224=_malloc($_size_i_i_i);
 var $225=($224|0)==0;
 if($225){label=62;break;}else{var $_lcssa_i41_i_i=$224;label=67;break;}
 case 65: 
 var $227=___cxa_allocate_exception(4);
 var $228=$227;
 HEAP32[(($228)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($227,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=279;break; }
 case 66: 
 throw "Reached an unreachable!";
 case 67: 
 var $_lcssa_i41_i_i;
 HEAP32[(($160)>>2)]=$_lcssa_i41_i_i;
 var $229=$216|1;
 HEAP32[(($161)>>2)]=$229;
 HEAP32[(($162)>>2)]=$207;
 var $__p_0_i_i_i=$_lcssa_i41_i_i;label=68;break;
 case 68: 
 var $__p_0_i_i_i;
 assert($207 % 1 === 0);(_memcpy($__p_0_i_i_i, $206, $207)|0);
 var $230=(($__p_0_i_i_i+$207)|0);
 HEAP8[(($230)>>0)]=0;
 var $231=HEAP32[(($27)>>2)];
 var $232=HEAP32[(($28)>>2)];
 var $233=($231>>>0)<($232>>>0);
 if($233){label=69;break;}else{label=75;break;}
 case 69: 
 var $235=($231|0)==0;
 if($235){var $243=0;label=74;break;}else{label=70;break;}
 case 70: 
 var $237=$231;
 assert(12 % 1 === 0);HEAP32[(($237)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($237)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($237)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
 var $storemerge_i_i=0;label=71;break;
 case 71: 
 var $storemerge_i_i;
 var $239=($storemerge_i_i>>>0)<3;
 if($239){label=72;break;}else{label=73;break;}
 case 72: 
 var $241=(($159+($storemerge_i_i<<2))|0);
 HEAP32[(($241)>>2)]=0;
 var $242=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$242;label=71;break;
 case 73: 
 var $_pre746=HEAP32[(($27)>>2)];
 var $243=$_pre746;label=74;break;
 case 74: 
 var $243;
 var $244=(($243+12)|0);
 HEAP32[(($27)>>2)]=$244;
 label=76;break;
 case 75: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($156,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=78;break; }
 case 76: 
 var $246=HEAP8[(($46)>>0)];
 var $247=$246&1;
 var $248=(($247<<24)>>24)==0;
 if($248){var $curelement_i_i_0=$curelement_i_i_0;label=48;break;}else{label=77;break;}
 case 77: 
 var $250=HEAP32[(($160)>>2)];
 _free($250);
 var $curelement_i_i_0=$curelement_i_i_0;label=48;break;
 case 78: 
 var $252$0 = ___cxa_find_matching_catch(); var $252$1 = tempRet0;
 var $253=$252$0;
 var $254=$252$1;
 var $255=HEAP8[(($46)>>0)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){var $_0532=$253;var $_0533=$254;label=273;break;}else{label=79;break;}
 case 79: 
 var $259=HEAP32[(($160)>>2)];
 _free($259);
 var $_0532=$253;var $_0533=$254;label=273;break;
 case 80: 
 var $260=(($197<<24)>>24)==111;
 if($260){var $_014_i45_i_i=$193;var $_05_i44_i_i=4704;label=81;break;}else{label=107;break;}
 case 81: 
 var $_05_i44_i_i;
 var $_014_i45_i_i;
 var $261=(($_014_i45_i_i+1)|0);
 var $262=(($_05_i44_i_i+1)|0);
 var $263=HEAP8[(($261)>>0)];
 var $264=HEAP8[(($262)>>0)];
 var $265=(($263<<24)>>24)!=(($264<<24)>>24);
 var $266=(($263<<24)>>24)==0;
 var $or_cond_i46_i_i=$265|$266;
 if($or_cond_i46_i_i){var $_lcssa_i49_i_i=$263;var $_lcssa2_i48_i_i=$264;label=82;break;}else{var $_014_i45_i_i=$261;var $_05_i44_i_i=$262;label=81;break;}
 case 82: 
 var $_lcssa2_i48_i_i;
 var $_lcssa_i49_i_i;
 var $267=(($_lcssa_i49_i_i<<24)>>24)==(($_lcssa2_i48_i_i<<24)>>24);
 if($267){label=83;break;}else{label=107;break;}
 case 83: 
 var $268=_strlen($193);
 var $_sum1_i_i=((($268)+(1))|0);
 var $269=(($193+$_sum1_i_i)|0);
 var $270=_strlen($269);
 var $271=($270>>>0)>4294967279;
 if($271){label=84;break;}else{label=86;break;}
 case 84: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=279;break; }
 case 85: 
 throw "Reached an unreachable!";
 case 86: 
 var $274=($270>>>0)<11;
 if($274){label=87;break;}else{label=88;break;}
 case 87: 
 var $276=$270<<1;
 var $277=(($276)&255);
 HEAP8[(($47)>>0)]=$277;
 var $__p_0_i52_i_i=$164;label=95;break;
 case 88: 
 var $278=((($270)+(16))|0);
 var $279=$278&-16;
 var $280=($279|0)==0;
 var $_size_i54_i_i=($280?1:$279);
 var $281=_malloc($_size_i54_i_i);
 var $282=($281|0)==0;
 if($282){label=89;break;}else{var $_lcssa_i56_i_i=$281;label=94;break;}
 case 89: 
 var $283=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $284=($283|0)==0;
 if($284){label=92;break;}else{label=90;break;}
 case 90: 
 var $286=$283;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$286]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=276;break; }
 case 91: 
 var $287=_malloc($_size_i54_i_i);
 var $288=($287|0)==0;
 if($288){label=89;break;}else{var $_lcssa_i56_i_i=$287;label=94;break;}
 case 92: 
 var $290=___cxa_allocate_exception(4);
 var $291=$290;
 HEAP32[(($291)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($290,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=279;break; }
 case 93: 
 throw "Reached an unreachable!";
 case 94: 
 var $_lcssa_i56_i_i;
 HEAP32[(($166)>>2)]=$_lcssa_i56_i_i;
 var $292=$279|1;
 HEAP32[(($167)>>2)]=$292;
 HEAP32[(($168)>>2)]=$270;
 var $__p_0_i52_i_i=$_lcssa_i56_i_i;label=95;break;
 case 95: 
 var $__p_0_i52_i_i;
 assert($270 % 1 === 0);(_memcpy($__p_0_i52_i_i, $269, $270)|0);
 var $293=(($__p_0_i52_i_i+$270)|0);
 HEAP8[(($293)>>0)]=0;
 var $294=HEAP32[(($27)>>2)];
 var $295=HEAP32[(($28)>>2)];
 var $296=($294>>>0)<($295>>>0);
 if($296){label=96;break;}else{label=102;break;}
 case 96: 
 var $298=($294|0)==0;
 if($298){var $306=0;label=101;break;}else{label=97;break;}
 case 97: 
 var $300=$294;
 assert(12 % 1 === 0);HEAP32[(($300)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($300)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($300)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
 var $storemerge2_i_i=0;label=98;break;
 case 98: 
 var $storemerge2_i_i;
 var $302=($storemerge2_i_i>>>0)<3;
 if($302){label=99;break;}else{label=100;break;}
 case 99: 
 var $304=(($165+($storemerge2_i_i<<2))|0);
 HEAP32[(($304)>>2)]=0;
 var $305=((($storemerge2_i_i)+(1))|0);
 var $storemerge2_i_i=$305;label=98;break;
 case 100: 
 var $_pre747=HEAP32[(($27)>>2)];
 var $306=$_pre747;label=101;break;
 case 101: 
 var $306;
 var $307=(($306+12)|0);
 HEAP32[(($27)>>2)]=$307;
 label=103;break;
 case 102: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($156,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=105;break; }
 case 103: 
 var $309=HEAP8[(($47)>>0)];
 var $310=$309&1;
 var $311=(($310<<24)>>24)==0;
 if($311){var $curelement_i_i_0=$curelement_i_i_0;label=48;break;}else{label=104;break;}
 case 104: 
 var $313=HEAP32[(($166)>>2)];
 _free($313);
 var $curelement_i_i_0=$curelement_i_i_0;label=48;break;
 case 105: 
 var $315$0 = ___cxa_find_matching_catch(); var $315$1 = tempRet0;
 var $316=$315$0;
 var $317=$315$1;
 var $318=HEAP8[(($47)>>0)];
 var $319=$318&1;
 var $320=(($319<<24)>>24)==0;
 if($320){var $_0532=$316;var $_0533=$317;label=273;break;}else{label=106;break;}
 case 106: 
 var $322=HEAP32[(($166)>>2)];
 _free($322);
 var $_0532=$316;var $_0533=$317;label=273;break;
 case 107: 
 var $323=(($197<<24)>>24)!=101;
 if($323){label=238;break;}else{var $_014_i62_i_i=$193;var $_05_i61_i_i=4392;label=108;break;}
 case 108: 
 var $_05_i61_i_i;
 var $_014_i62_i_i;
 var $324=(($_014_i62_i_i+1)|0);
 var $325=(($_05_i61_i_i+1)|0);
 var $326=HEAP8[(($324)>>0)];
 var $327=HEAP8[(($325)>>0)];
 var $328=(($326<<24)>>24)!=(($327<<24)>>24);
 var $329=(($326<<24)>>24)==0;
 var $or_cond_i63_i_i=$328|$329;
 if($or_cond_i63_i_i){var $_lcssa_i66_i_i=$326;var $_lcssa2_i65_i_i=$327;label=109;break;}else{var $_014_i62_i_i=$324;var $_05_i61_i_i=$325;label=108;break;}
 case 109: 
 var $_lcssa2_i65_i_i;
 var $_lcssa_i66_i_i;
 var $330=(($_lcssa_i66_i_i<<24)>>24)==(($_lcssa2_i65_i_i<<24)>>24);
 if($330){label=110;break;}else{label=111;break;}
 case 110: 
 var $332=HEAP32[(($40)>>2)];
 var $333=($332|0)==1;
 if($333){label=268;break;}else{label=269;break;}
 case 111: 
 if($323){label=238;break;}else{var $_014_i70_i_i=$193;var $_05_i69_i_i=4512;label=112;break;}
 case 112: 
 var $_05_i69_i_i;
 var $_014_i70_i_i;
 var $335=(($_014_i70_i_i+1)|0);
 var $336=(($_05_i69_i_i+1)|0);
 var $337=HEAP8[(($335)>>0)];
 var $338=HEAP8[(($336)>>0)];
 var $339=(($337<<24)>>24)!=(($338<<24)>>24);
 var $340=(($337<<24)>>24)==0;
 var $or_cond_i71_i_i=$339|$340;
 if($or_cond_i71_i_i){var $_lcssa_i74_i_i=$337;var $_lcssa2_i73_i_i=$338;label=113;break;}else{var $_014_i70_i_i=$335;var $_05_i69_i_i=$336;label=112;break;}
 case 113: 
 var $_lcssa2_i73_i_i;
 var $_lcssa_i74_i_i;
 var $341=(($_lcssa_i74_i_i<<24)>>24)==(($_lcssa2_i73_i_i<<24)>>24);
 if($341){label=114;break;}else{label=238;break;}
 case 114: 
 var $343=_strtok_r(0,5616,$tokenPtr_i_i);
 var $344=($343|0)==0;
 if($344){label=115;break;}else{label=116;break;}
 case 115: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 116: 
 var $347=_strtok_r(0,5616,$tokenPtr_i_i);
 var $_0_i_i_i=$347;label=117;break;
 case 117: 
 var $_0_i_i_i;
 var $348=HEAP8[(($_0_i_i_i)>>0)];
 var $349=(($348<<24)>>24)==32;
 if($349){label=118;break;}else{label=119;break;}
 case 118: 
 var $350=(($_0_i_i_i+1)|0);
 var $_0_i_i_i=$350;label=117;break;
 case 119: 
 var $351=(($348<<24)>>24);
 var $352=((($351)-(9))|0);
 var $phitmp516=($352>>>0)>4;
 var $353=(($_0_i_i_i+1)|0);
 if($phitmp516){label=120;break;}else{var $_0_i_i_i=$353;label=117;break;}
 case 120: 
 if(($351|0)==45){ label=121;break;}else if(($351|0)==43){ var $neg_0_i_i_i=0;label=122;break;}else{var $neg_1_ph_i_i_i=0;var $_1_ph_i_i_i=$_0_i_i_i;var $357=$348;label=123;break;}
 case 121: 
 var $neg_0_i_i_i=1;label=122;break;
 case 122: 
 var $neg_0_i_i_i;
 var $_pre_i_i_i=HEAP8[(($353)>>0)];
 var $neg_1_ph_i_i_i=$neg_0_i_i_i;var $_1_ph_i_i_i=$353;var $357=$_pre_i_i_i;label=123;break;
 case 123: 
 var $357;
 var $_1_ph_i_i_i;
 var $neg_1_ph_i_i_i;
 var $358=(($357<<24)>>24);
 var $359=((($358)-(48))|0);
 var $360=($359>>>0)<10;
 if($360){var $_12_i_i_i=$_1_ph_i_i_i;var $n_03_i_i_i=0;var $361=$357;label=124;break;}else{var $n_0_lcssa_i_i_i=0;label=125;break;}
 case 124: 
 var $361;
 var $n_03_i_i_i;
 var $_12_i_i_i;
 var $362=((($n_03_i_i_i)*(10))&-1);
 var $363=(($_12_i_i_i+1)|0);
 var $364=(($361<<24)>>24);
 var $_neg1_i_i_i=((($362)+(48))|0);
 var $365=((($_neg1_i_i_i)-($364))|0);
 var $366=HEAP8[(($363)>>0)];
 var $367=(($366<<24)>>24);
 var $368=((($367)-(48))|0);
 var $369=($368>>>0)<10;
 if($369){var $_12_i_i_i=$363;var $n_03_i_i_i=$365;var $361=$366;label=124;break;}else{var $n_0_lcssa_i_i_i=$365;label=125;break;}
 case 125: 
 var $n_0_lcssa_i_i_i;
 var $370=($neg_1_ph_i_i_i|0)!=0;
 var $371=(((-$n_0_lcssa_i_i_i))|0);
 var $372=($370?$n_0_lcssa_i_i_i:$371);
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $storemerge_i_i_i=0;label=126;break;
 case 126: 
 var $storemerge_i_i_i;
 var $374=($storemerge_i_i_i>>>0)<3;
 if($374){label=127;break;}else{label=137;break;}
 case 127: 
 var $376=(($170+($storemerge_i_i_i<<2))|0);
 HEAP32[(($376)>>2)]=0;
 var $377=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$377;label=126;break;
 case 128: 
 var $lpad_loopexit697$0 = ___cxa_find_matching_catch(); var $lpad_loopexit697$1 = tempRet0;
 var $lpad_phi699$1=$lpad_loopexit697$1;var $lpad_phi699$0=$lpad_loopexit697$0;label=130;break;
 case 129: 
 var $lpad_nonloopexit715$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit715$1 = tempRet0;
 var $lpad_phi699$1=$lpad_nonloopexit715$1;var $lpad_phi699$0=$lpad_nonloopexit715$0;label=130;break;
 case 130: 
 var $lpad_phi699$0;
 var $lpad_phi699$1;
 var $378=HEAP32[(($171)>>2)];
 var $379=($378|0)==0;
 if($379){label=135;break;}else{label=131;break;}
 case 131: 
 var $380=HEAP32[(($172)>>2)];
 var $381=($378|0)==($380|0);
 if($381){label=134;break;}else{label=132;break;}
 case 132: 
 var $383=((($380)-(76))|0);
 HEAP32[(($172)>>2)]=$383;
 var $384=$383;
 var $385=HEAP8[(($384)>>0)];
 var $386=$385&1;
 var $387=(($386<<24)>>24)==0;
 if($387){label=131;break;}else{label=133;break;}
 case 133: 
 var $389=((($380)-(76)+8)|0);
 var $390=HEAP32[(($389)>>2)];
 _free($390);
 label=131;break;
 case 134: 
 var $391=HEAP32[(($171)>>2)];
 var $392=$391;
 _free($392);
 label=135;break;
 case 135: 
 var $393=HEAP8[(($48)>>0)];
 var $394=$393&1;
 var $395=(($394<<24)>>24)==0;
 if($395){var $eh_lpad_body$1=$lpad_phi699$1;var $eh_lpad_body$0=$lpad_phi699$0;label=280;break;}else{label=136;break;}
 case 136: 
 var $397=HEAP32[(($182)>>2)];
 _free($397);
 var $eh_lpad_body$1=$lpad_phi699$1;var $eh_lpad_body$0=$lpad_phi699$0;label=280;break;
 case 137: 
 HEAP32[(($171)>>2)]=0;
 HEAP32[(($172)>>2)]=0;
 HEAP32[(($173)>>2)]=0;
 var $399=($372|0)>-1;
 if($399){label=140;break;}else{label=138;break;}
 case 138: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2680,2760,195,12336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=129;break; }
 case 139: 
 throw "Reached an unreachable!";
 case 140: 
 var $402=_strlen($343);
 var $403=($402>>>0)>4294967279;
 if($403){label=141;break;}else{label=143;break;}
 case 141: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=142;break; } else { label=129;break; }
 case 142: 
 throw "Reached an unreachable!";
 case 143: 
 var $406=($402>>>0)<11;
 if($406){label=144;break;}else{label=145;break;}
 case 144: 
 var $408=$402<<1;
 var $409=(($408)&255);
 HEAP8[(($169)>>0)]=$409;
 var $__p_0_i_i_i_i=$176;label=152;break;
 case 145: 
 var $410=((($402)+(16))|0);
 var $411=$410&-16;
 var $412=($411|0)==0;
 var $_size_i_i_i_i=($412?1:$411);
 var $413=_malloc($_size_i_i_i_i);
 var $414=($413|0)==0;
 if($414){label=146;break;}else{var $_lcssa_i_i_i_i=$413;label=151;break;}
 case 146: 
 var $415=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $416=($415|0)==0;
 if($416){label=149;break;}else{label=147;break;}
 case 147: 
 var $418=$415;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$418]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=128;break; }
 case 148: 
 var $419=_malloc($_size_i_i_i_i);
 var $420=($419|0)==0;
 if($420){label=146;break;}else{var $_lcssa_i_i_i_i=$419;label=151;break;}
 case 149: 
 var $422=___cxa_allocate_exception(4);
 var $423=$422;
 HEAP32[(($423)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($422,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=150;break; } else { label=129;break; }
 case 150: 
 throw "Reached an unreachable!";
 case 151: 
 var $_lcssa_i_i_i_i;
 HEAP32[(($183)>>2)]=$_lcssa_i_i_i_i;
 var $424=$411|1;
 HEAP32[(($185)>>2)]=$424;
 HEAP32[(($186)>>2)]=$402;
 var $__p_0_i_i_i_i=$_lcssa_i_i_i_i;label=152;break;
 case 152: 
 var $__p_0_i_i_i_i;
 assert($402 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $343, $402)|0);
 var $425=(($__p_0_i_i_i_i+$402)|0);
 HEAP8[(($425)>>0)]=0;
 var $426=HEAP8[(($48)>>0)];
 var $427=$426&1;
 var $428=(($427<<24)>>24)==0;
 if($428){label=154;break;}else{label=153;break;}
 case 153: 
 var $430=HEAP32[(($182)>>2)];
 HEAP8[(($430)>>0)]=0;
 HEAP32[(($184)>>2)]=0;
 label=155;break;
 case 154: 
 HEAP8[(($178)>>0)]=0;
 HEAP8[(($48)>>0)]=0;
 label=155;break;
 case 155: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($174,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=157;break; } else { label=156;break; }
 case 156: 
 var $433$0 = ___cxa_find_matching_catch(0); var $433$1 = tempRet0;
 var $434=$433$0;
 ___clang_call_terminate($434);
 throw "Reached an unreachable!";
 case 157: 
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($169)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($169)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($169)+(8))>>2)];
 var $storemerge1_i_i_i=0;label=158;break;
 case 158: 
 var $storemerge1_i_i_i;
 var $436=($storemerge1_i_i_i>>>0)<3;
 if($436){label=159;break;}else{label=160;break;}
 case 159: 
 var $438=(($179+($storemerge1_i_i_i<<2))|0);
 HEAP32[(($438)>>2)]=0;
 var $439=((($storemerge1_i_i_i)+(1))|0);
 var $storemerge1_i_i_i=$439;label=158;break;
 case 160: 
 var $440=HEAP8[(($169)>>0)];
 var $441=$440&1;
 var $442=(($441<<24)>>24)==0;
 if($442){label=162;break;}else{label=161;break;}
 case 161: 
 var $444=HEAP32[(($183)>>2)];
 _free($444);
 label=162;break;
 case 162: 
 HEAP32[(($180)>>2)]=$372;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $445=HEAP32[(($24)>>2)];
 var $446=HEAP32[(($25)>>2)];
 var $447=($445|0)==($446|0);
 if($447){label=167;break;}else{label=163;break;}
 case 163: 
 var $449=($445|0)==0;
 if($449){var $451=0;label=166;break;}else{label=164;break;}
 case 164: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply10PlyElementC2ERKS1_($445,$t_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { label=229;break; }
 case 165: 
 var $_pre749=HEAP32[(($24)>>2)];
 var $451=$_pre749;label=166;break;
 case 166: 
 var $451;
 var $452=(($451+28)|0);
 HEAP32[(($24)>>2)]=$452;
 var $608=$452;label=221;break;
 case 167: 
 var $454=HEAP32[(($23)>>2)];
 var $455=$445;
 var $456=$454;
 var $457=((($455)-($456))|0);
 var $458=(((($457|0))/(28))&-1);
 var $459=((($458)+(1))|0);
 var $460=($459>>>0)>153391689;
 if($460){label=168;break;}else{label=179;break;}
 case 168: 
 var $461=___cxa_allocate_exception(8);
 var $462=$461;
 HEAP32[(($462)>>2)]=15352;
 var $463=(($461+4)|0);
 var $464=_strlen(1736);
 var $465=((($464)+(13))|0);
 var $466=($465|0)==0;
 var $_size_i_i78_i_i=($466?1:$465);
 var $467=_malloc($_size_i_i78_i_i);
 var $468=($467|0)==0;
 if($468){label=169;break;}else{var $_lcssa_i_i81_i_i=$467;label=174;break;}
 case 169: 
 var $469=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $470=($469|0)==0;
 if($470){label=172;break;}else{label=170;break;}
 case 170: 
 var $472=$469;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$472]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { label=176;break; }
 case 171: 
 var $473=_malloc($_size_i_i78_i_i);
 var $474=($473|0)==0;
 if($474){label=169;break;}else{var $_lcssa_i_i81_i_i=$473;label=174;break;}
 case 172: 
 var $476=___cxa_allocate_exception(4);
 var $477=$476;
 HEAP32[(($477)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($476,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { label=177;break; }
 case 173: 
 throw "Reached an unreachable!";
 case 174: 
 var $_lcssa_i_i81_i_i;
 var $478=$_lcssa_i_i81_i_i;
 HEAP32[(($478)>>2)]=$464;
 var $479=(($_lcssa_i_i81_i_i+4)|0);
 var $480=$479;
 HEAP32[(($480)>>2)]=$464;
 var $481=(($_lcssa_i_i81_i_i+8)|0);
 var $482=$481;
 HEAP32[(($482)>>2)]=0;
 var $483=(($_lcssa_i_i81_i_i+12)|0);
 var $484=((($464)+(1))|0);
 assert($484 % 1 === 0);(_memcpy($483, 1736, $484)|0);
 var $485=$463;
 HEAP32[(($485)>>2)]=$483;
 HEAP32[(($462)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($461,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=230;break; }
 case 175: 
 throw "Reached an unreachable!";
 case 176: 
 var $lpad_loopexit691$0 = ___cxa_find_matching_catch(); var $lpad_loopexit691$1 = tempRet0;
 var $lpad_phi693$1=$lpad_loopexit691$1;var $lpad_phi693$0=$lpad_loopexit691$0;label=178;break;
 case 177: 
 var $lpad_nonloopexit692$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit692$1 = tempRet0;
 var $lpad_phi693$1=$lpad_nonloopexit692$1;var $lpad_phi693$0=$lpad_nonloopexit692$0;label=178;break;
 case 178: 
 var $lpad_phi693$0;
 var $lpad_phi693$1;
 ___cxa_free_exception($461);
 var $eh_lpad_body_i_i$1=$lpad_phi693$1;var $eh_lpad_body_i_i$0=$lpad_phi693$0;label=231;break;
 case 179: 
 var $488=($458>>>0)<76695844;
 if($488){label=180;break;}else{var $492=153391689;label=181;break;}
 case 180: 
 var $489=$458<<1;
 var $490=($489>>>0)<($459>>>0);
 var $_=($490?$459:$489);
 var $491=($_|0)==0;
 if($491){var $508=0;var $507=$_;label=188;break;}else{var $492=$_;label=181;break;}
 case 181: 
 var $492;
 var $493=((($492)*(28))&-1);
 var $494=($493|0)==0;
 var $_size_i_i_i_i_i=($494?1:$493);
 var $495=_malloc($_size_i_i_i_i_i);
 var $496=($495|0)==0;
 if($496){label=182;break;}else{var $_lcssa_i_i_i_i_i=$495;label=187;break;}
 case 182: 
 var $497=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $498=($497|0)==0;
 if($498){label=185;break;}else{label=183;break;}
 case 183: 
 var $500=$497;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$500]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=184;break; } else { label=228;break; }
 case 184: 
 var $501=_malloc($_size_i_i_i_i_i);
 var $502=($501|0)==0;
 if($502){label=182;break;}else{var $_lcssa_i_i_i_i_i=$501;label=187;break;}
 case 185: 
 var $504=___cxa_allocate_exception(4);
 var $505=$504;
 HEAP32[(($505)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($504,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=186;break; } else { label=230;break; }
 case 186: 
 throw "Reached an unreachable!";
 case 187: 
 var $_lcssa_i_i_i_i_i;
 var $506=$_lcssa_i_i_i_i_i;
 var $508=$506;var $507=$492;label=188;break;
 case 188: 
 var $507;
 var $508;
 var $509=(($508+((($458)*(28))&-1))|0);
 var $510=(($508+((($507)*(28))&-1))|0);
 var $511=($509|0)==0;
 if($511){label=190;break;}else{label=189;break;}
 case 189: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply10PlyElementC2ERKS1_($509,$t_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=190;break; } else { label=208;break; }
 case 190: 
 var $_sum772=((($458)+(1))|0);
 var $513=(($508+((($_sum772)*(28))&-1))|0);
 var $514=HEAP32[(($23)>>2)];
 var $515=HEAP32[(($24)>>2)];
 var $_0531=$515;var $__v_i_i_i_sroa_9_0=$509;label=191;break;
 case 191: 
 var $__v_i_i_i_sroa_9_0;
 var $_0531;
 var $517=($_0531|0)==($514|0);
 if($517){label=196;break;}else{label=192;break;}
 case 192: 
 var $519=((($_0531)-(28))|0);
 var $520=((($__v_i_i_i_sroa_9_0)-(28))|0);
 var $521=$520;
 var $522=$519;
 assert(12 % 1 === 0);HEAP32[(($521)>>2)]=HEAP32[(($522)>>2)];HEAP32[((($521)+(4))>>2)]=HEAP32[((($522)+(4))>>2)];HEAP32[((($521)+(8))>>2)]=HEAP32[((($522)+(8))>>2)];
 var $523=$519;
 var $storemerge_i_i_i_i_i=0;label=193;break;
 case 193: 
 var $storemerge_i_i_i_i_i;
 var $525=($storemerge_i_i_i_i_i>>>0)<3;
 if($525){label=194;break;}else{label=195;break;}
 case 194: 
 var $527=(($523+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($527)>>2)]=0;
 var $528=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$528;label=193;break;
 case 195: 
 var $529=((($__v_i_i_i_sroa_9_0)-(28)+12)|0);
 var $530=((($_0531)-(28)+12)|0);
 var $531=HEAP32[(($530)>>2)];
 HEAP32[(($529)>>2)]=$531;
 var $532=((($__v_i_i_i_sroa_9_0)-(28)+16)|0);
 HEAP32[(($532)>>2)]=0;
 var $533=((($__v_i_i_i_sroa_9_0)-(28)+20)|0);
 HEAP32[(($533)>>2)]=0;
 var $534=((($__v_i_i_i_sroa_9_0)-(28)+24)|0);
 HEAP32[(($534)>>2)]=0;
 var $535=((($_0531)-(28)+16)|0);
 var $536=HEAP32[(($535)>>2)];
 HEAP32[(($532)>>2)]=$536;
 var $537=((($_0531)-(28)+20)|0);
 var $538=HEAP32[(($537)>>2)];
 HEAP32[(($533)>>2)]=$538;
 var $539=((($_0531)-(28)+24)|0);
 var $540=HEAP32[(($539)>>2)];
 HEAP32[(($534)>>2)]=$540;
 HEAP32[(($539)>>2)]=0;
 HEAP32[(($537)>>2)]=0;
 HEAP32[(($535)>>2)]=0;
 var $541=HEAP32[(($530)>>2)];
 HEAP32[(($529)>>2)]=$541;
 var $_0531=$519;var $__v_i_i_i_sroa_9_0=$520;label=191;break;
 case 196: 
 var $542=HEAP32[(($23)>>2)];
 HEAP32[(($23)>>2)]=$__v_i_i_i_sroa_9_0;
 var $543=HEAP32[(($24)>>2)];
 HEAP32[(($24)>>2)]=$513;
 HEAP32[(($25)>>2)]=$510;
 var $__v_i_i_i_sroa_18_0=$543;label=197;break;
 case 197: 
 var $__v_i_i_i_sroa_18_0;
 var $544=($542|0)==($__v_i_i_i_sroa_18_0|0);
 if($544){label=206;break;}else{label=198;break;}
 case 198: 
 var $546=((($__v_i_i_i_sroa_18_0)-(28))|0);
 var $547=((($__v_i_i_i_sroa_18_0)-(28)+16)|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=($548|0)==0;
 if($549){label=204;break;}else{label=199;break;}
 case 199: 
 var $551=((($__v_i_i_i_sroa_18_0)-(28)+20)|0);
 label=200;break;
 case 200: 
 var $552=HEAP32[(($551)>>2)];
 var $553=($548|0)==($552|0);
 if($553){label=203;break;}else{label=201;break;}
 case 201: 
 var $555=((($552)-(76))|0);
 HEAP32[(($551)>>2)]=$555;
 var $556=$555;
 var $557=HEAP8[(($556)>>0)];
 var $558=$557&1;
 var $559=(($558<<24)>>24)==0;
 if($559){label=200;break;}else{label=202;break;}
 case 202: 
 var $561=((($552)-(76)+8)|0);
 var $562=HEAP32[(($561)>>2)];
 _free($562);
 label=200;break;
 case 203: 
 var $563=HEAP32[(($547)>>2)];
 var $564=$563;
 _free($564);
 label=204;break;
 case 204: 
 var $565=$546;
 var $566=HEAP8[(($565)>>0)];
 var $567=$566&1;
 var $568=(($567<<24)>>24)==0;
 if($568){var $__v_i_i_i_sroa_18_0=$546;label=197;break;}else{label=205;break;}
 case 205: 
 var $570=((($__v_i_i_i_sroa_18_0)-(28)+8)|0);
 var $571=HEAP32[(($570)>>2)];
 _free($571);
 var $__v_i_i_i_sroa_18_0=$546;label=197;break;
 case 206: 
 var $572=($542|0)==0;
 if($572){label=220;break;}else{label=207;break;}
 case 207: 
 var $574=$542;
 _free($574);
 label=220;break;
 case 208: 
 var $576$0 = ___cxa_find_matching_catch(); var $576$1 = tempRet0;
 var $__v_i_i_i_sroa_18_1=$509;label=209;break;
 case 209: 
 var $__v_i_i_i_sroa_18_1;
 var $577=($509|0)==($__v_i_i_i_sroa_18_1|0);
 if($577){label=218;break;}else{label=210;break;}
 case 210: 
 var $579=((($__v_i_i_i_sroa_18_1)-(28))|0);
 var $580=((($__v_i_i_i_sroa_18_1)-(28)+16)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=($581|0)==0;
 if($582){label=216;break;}else{label=211;break;}
 case 211: 
 var $584=((($__v_i_i_i_sroa_18_1)-(28)+20)|0);
 label=212;break;
 case 212: 
 var $585=HEAP32[(($584)>>2)];
 var $586=($581|0)==($585|0);
 if($586){label=215;break;}else{label=213;break;}
 case 213: 
 var $588=((($585)-(76))|0);
 HEAP32[(($584)>>2)]=$588;
 var $589=$588;
 var $590=HEAP8[(($589)>>0)];
 var $591=$590&1;
 var $592=(($591<<24)>>24)==0;
 if($592){label=212;break;}else{label=214;break;}
 case 214: 
 var $594=((($585)-(76)+8)|0);
 var $595=HEAP32[(($594)>>2)];
 _free($595);
 label=212;break;
 case 215: 
 var $596=HEAP32[(($580)>>2)];
 var $597=$596;
 _free($597);
 label=216;break;
 case 216: 
 var $598=$579;
 var $599=HEAP8[(($598)>>0)];
 var $600=$599&1;
 var $601=(($600<<24)>>24)==0;
 if($601){var $__v_i_i_i_sroa_18_1=$579;label=209;break;}else{label=217;break;}
 case 217: 
 var $603=((($__v_i_i_i_sroa_18_1)-(28)+8)|0);
 var $604=HEAP32[(($603)>>2)];
 _free($604);
 var $__v_i_i_i_sroa_18_1=$579;label=209;break;
 case 218: 
 var $605=($508|0)==0;
 if($605){var $eh_lpad_body_i_i$1=$576$1;var $eh_lpad_body_i_i$0=$576$0;label=231;break;}else{label=219;break;}
 case 219: 
 var $607=$508;
 _free($607);
 var $eh_lpad_body_i_i$1=$576$1;var $eh_lpad_body_i_i$0=$576$0;label=231;break;
 case 220: 
 var $_pre748=HEAP32[(($24)>>2)];
 var $608=$_pre748;label=221;break;
 case 221: 
 var $608;
 var $609=((($608)-(28))|0);
 var $610=HEAP32[(($181)>>2)];
 var $611=($610|0)==0;
 if($611){label=226;break;}else{label=222;break;}
 case 222: 
 var $612=HEAP32[(($172)>>2)];
 var $613=($610|0)==($612|0);
 if($613){label=225;break;}else{label=223;break;}
 case 223: 
 var $615=((($612)-(76))|0);
 HEAP32[(($172)>>2)]=$615;
 var $616=$615;
 var $617=HEAP8[(($616)>>0)];
 var $618=$617&1;
 var $619=(($618<<24)>>24)==0;
 if($619){label=222;break;}else{label=224;break;}
 case 224: 
 var $621=((($612)-(76)+8)|0);
 var $622=HEAP32[(($621)>>2)];
 _free($622);
 label=222;break;
 case 225: 
 var $623=HEAP32[(($181)>>2)];
 var $624=$623;
 _free($624);
 label=226;break;
 case 226: 
 var $625=HEAP8[(($48)>>0)];
 var $626=$625&1;
 var $627=(($626<<24)>>24)==0;
 if($627){var $curelement_i_i_0=$609;label=48;break;}else{label=227;break;}
 case 227: 
 var $629=HEAP32[(($182)>>2)];
 _free($629);
 var $curelement_i_i_0=$609;label=48;break;
 case 228: 
 var $lpad_loopexit702$0 = ___cxa_find_matching_catch(); var $lpad_loopexit702$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit702$1;var $eh_lpad_body_i_i$0=$lpad_loopexit702$0;label=231;break;
 case 229: 
 var $lpad_loopexit717$0 = ___cxa_find_matching_catch(); var $lpad_loopexit717$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit717$1;var $eh_lpad_body_i_i$0=$lpad_loopexit717$0;label=231;break;
 case 230: 
 var $lpad_nonloopexit718$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit718$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_nonloopexit718$1;var $eh_lpad_body_i_i$0=$lpad_nonloopexit718$0;label=231;break;
 case 231: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $630=$eh_lpad_body_i_i$0;
 var $631=$eh_lpad_body_i_i$1;
 var $632=HEAP32[(($181)>>2)];
 var $633=($632|0)==0;
 if($633){label=236;break;}else{label=232;break;}
 case 232: 
 var $634=HEAP32[(($172)>>2)];
 var $635=($632|0)==($634|0);
 if($635){label=235;break;}else{label=233;break;}
 case 233: 
 var $637=((($634)-(76))|0);
 HEAP32[(($172)>>2)]=$637;
 var $638=$637;
 var $639=HEAP8[(($638)>>0)];
 var $640=$639&1;
 var $641=(($640<<24)>>24)==0;
 if($641){label=232;break;}else{label=234;break;}
 case 234: 
 var $643=((($634)-(76)+8)|0);
 var $644=HEAP32[(($643)>>2)];
 _free($644);
 label=232;break;
 case 235: 
 var $645=HEAP32[(($181)>>2)];
 var $646=$645;
 _free($646);
 label=236;break;
 case 236: 
 var $647=HEAP8[(($48)>>0)];
 var $648=$647&1;
 var $649=(($648<<24)>>24)==0;
 if($649){var $_0532=$630;var $_0533=$631;label=273;break;}else{label=237;break;}
 case 237: 
 var $651=HEAP32[(($182)>>2)];
 _free($651);
 var $_0532=$630;var $_0533=$631;label=273;break;
 case 238: 
 var $652=(($197<<24)>>24)==112;
 if($652){var $_014_i99_i_i=$193;var $_05_i98_i_i=4456;label=239;break;}else{label=267;break;}
 case 239: 
 var $_05_i98_i_i;
 var $_014_i99_i_i;
 var $653=(($_014_i99_i_i+1)|0);
 var $654=(($_05_i98_i_i+1)|0);
 var $655=HEAP8[(($653)>>0)];
 var $656=HEAP8[(($654)>>0)];
 var $657=(($655<<24)>>24)!=(($656<<24)>>24);
 var $658=(($655<<24)>>24)==0;
 var $or_cond_i100_i_i=$657|$658;
 if($or_cond_i100_i_i){var $_lcssa_i103_i_i=$655;var $_lcssa2_i102_i_i=$656;label=240;break;}else{var $_014_i99_i_i=$653;var $_05_i98_i_i=$654;label=239;break;}
 case 240: 
 var $_lcssa2_i102_i_i;
 var $_lcssa_i103_i_i;
 var $659=(($_lcssa_i103_i_i<<24)>>24)==(($_lcssa2_i102_i_i<<24)>>24);
 if($659){label=241;break;}else{label=267;break;}
 case 241: 
 var $661=($curelement_i_i_0|0)==0;
 if($661){label=242;break;}else{label=243;break;}
 case 242: 
 HEAP32[(($39)>>2)]=6;
 label=270;break;
 case 243: 
 var $664=_strtok_r(0,5616,$tokenPtr_i_i);
 var $665=($664|0)==0;
 if($665){label=244;break;}else{label=245;break;}
 case 244: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 245: 
 var $668=HEAP8[(($664)>>0)];
 var $669=(($668<<24)>>24)==108;
 if($669){var $_014_i107_i_i=$664;var $_05_i106_i_i=4328;label=246;break;}else{label=261;break;}
 case 246: 
 var $_05_i106_i_i;
 var $_014_i107_i_i;
 var $670=(($_014_i107_i_i+1)|0);
 var $671=(($_05_i106_i_i+1)|0);
 var $672=HEAP8[(($670)>>0)];
 var $673=HEAP8[(($671)>>0)];
 var $674=(($672<<24)>>24)!=(($673<<24)>>24);
 var $675=(($672<<24)>>24)==0;
 var $or_cond_i108_i_i=$674|$675;
 if($or_cond_i108_i_i){var $_lcssa_i111_i_i=$672;var $_lcssa2_i110_i_i=$673;label=247;break;}else{var $_014_i107_i_i=$670;var $_05_i106_i_i=$671;label=246;break;}
 case 247: 
 var $_lcssa2_i110_i_i;
 var $_lcssa_i111_i_i;
 var $676=(($_lcssa_i111_i_i<<24)>>24)==(($_lcssa2_i110_i_i<<24)>>24);
 if($676){label=248;break;}else{label=261;break;}
 case 248: 
 var $678=_strtok_r(0,5616,$tokenPtr_i_i);
 var $679=($678|0)==0;
 if($679){label=249;break;}else{label=250;break;}
 case 249: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 250: 
 var $682=(function() { try { __THREW__ = 0; return __ZNK3vcg3ply7PlyFile8FindTypeEPKc($678) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=278;break; }
 case 251: 
 var $683=($682|0)==-1;
 if($683){label=252;break;}else{label=253;break;}
 case 252: 
 HEAP32[(($39)>>2)]=7;
 label=270;break;
 case 253: 
 var $686=_strtok_r(0,5616,$tokenPtr_i_i);
 var $687=($686|0)==0;
 if($687){label=254;break;}else{label=255;break;}
 case 254: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 255: 
 var $690=(function() { try { __THREW__ = 0; return __ZNK3vcg3ply7PlyFile8FindTypeEPKc($686) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=278;break; }
 case 256: 
 var $691=($690|0)==-1;
 if($691){label=257;break;}else{label=258;break;}
 case 257: 
 HEAP32[(($39)>>2)]=7;
 label=270;break;
 case 258: 
 var $694=_strtok_r(0,5616,$tokenPtr_i_i);
 var $695=($694|0)==0;
 if($695){label=259;break;}else{label=260;break;}
 case 259: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 260: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply10PlyElement7AddPropEPKciii($curelement_i_i_0,$694,$690,1,$682) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $curelement_i_i_0=$curelement_i_i_0;label=48;break; } else { label=278;break; }
 case 261: 
 var $698=(function() { try { __THREW__ = 0; return __ZNK3vcg3ply7PlyFile8FindTypeEPKc($664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=262;break; } else { label=278;break; }
 case 262: 
 var $699=($698|0)==-1;
 if($699){label=263;break;}else{label=264;break;}
 case 263: 
 HEAP32[(($39)>>2)]=7;
 label=270;break;
 case 264: 
 var $702=_strtok_r(0,5616,$tokenPtr_i_i);
 var $703=($702|0)==0;
 if($703){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 266: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply10PlyElement7AddPropEPKciii($curelement_i_i_0,$702,$698,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $curelement_i_i_0=$curelement_i_i_0;label=48;break; } else { label=278;break; }
 case 267: 
 HEAP32[(($39)>>2)]=5;
 label=270;break;
 case 268: 
 HEAP32[(($42)>>2)]=662;
 label=281;break;
 case 269: 
 HEAP32[(($42)>>2)]=46;
 label=281;break;
 case 270: 
 var $709=HEAP32[(($37)>>2)];
 var $710=($709|0)==0;
 if($710){label=272;break;}else{label=271;break;}
 case 271: 
 var $711=_fclose($709);
 HEAP32[(($37)>>2)]=0;
 label=272;break;
 case 272: 
 HEAP32[(($42)>>2)]=0;
 var $$etemp$9$0=512;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=28;
 var $$etemp$13$1=0;

 var $_pre=HEAP32[(($39)>>2)];
 HEAP32[(($22)>>2)]=$_pre;
 var $_1542=$_pre;var $index_sroa_0_9=0;var $index_sroa_22_11=0;label=1185;break;
 case 273: 
 var $_0533;
 var $_0532;
 var $712$0=$_0532;
 var $712$1=0;
 var $713$0=$712$0;
 var $713$1=$_0533;
 var $eh_lpad_body$1=$713$1;var $eh_lpad_body$0=$713$0;label=280;break;
 case 274: 
 var $lpad_loopexit682$0 = ___cxa_find_matching_catch(); var $lpad_loopexit682$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit682$1;var $eh_lpad_body$0=$lpad_loopexit682$0;label=280;break;
 case 275: 
 var $lpad_loopexit686$0 = ___cxa_find_matching_catch(); var $lpad_loopexit686$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit686$1;var $eh_lpad_body$0=$lpad_loopexit686$0;label=280;break;
 case 276: 
 var $lpad_loopexit705$0 = ___cxa_find_matching_catch(); var $lpad_loopexit705$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit705$1;var $eh_lpad_body$0=$lpad_loopexit705$0;label=280;break;
 case 277: 
 var $lpad_loopexit708$0 = ___cxa_find_matching_catch(); var $lpad_loopexit708$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit708$1;var $eh_lpad_body$0=$lpad_loopexit708$0;label=280;break;
 case 278: 
 var $lpad_loopexit711$0 = ___cxa_find_matching_catch(); var $lpad_loopexit711$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit711$1;var $eh_lpad_body$0=$lpad_loopexit711$0;label=280;break;
 case 279: 
 var $lpad_nonloopexit712$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit712$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit712$1;var $eh_lpad_body$0=$lpad_nonloopexit712$0;label=280;break;
 case 280: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $714=$eh_lpad_body$0;
 var $715=$eh_lpad_body$1;
 var $_5=$715;var $_5540=$714;var $index_sroa_0_10=0;var $index_sroa_22_13=0;label=1195;break;
 case 281: 
 var $$etemp$14$0=512;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=28;
 var $$etemp$18$1=0;

 var $717=$29;
 var $718=HEAP8[(($717)>>0)];
 var $719=$718&1;
 var $720=(($719<<24)>>24)==0;
 if($720){label=283;break;}else{label=282;break;}
 case 282: 
 var $722=(($pf+48)|0);
 var $723=HEAP32[(($722)>>2)];
 var $727=$723;label=284;break;
 case 283: 
 var $725=$29;
 var $726=(($725+1)|0);
 var $727=$726;label=284;break;
 case 284: 
 var $727;
 var $728=(($pi+28)|0);
 var $729=_strlen($727);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($728,$727,$729) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge=0;label=285;break; } else { label=279;break; }
 case 285: 
 var $storemerge;
 var $730=($storemerge|0)<23;
 if($730){label=286;break;}else{label=289;break;}
 case 286: 
 var $732=((14008+((($storemerge)*(44))&-1))|0);
 var $733=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$732) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=287;break; } else { label=275;break; }
 case 287: 
 var $735=($733|0)==-1;
 if($735){label=290;break;}else{label=288;break;}
 case 288: 
 var $737=((($storemerge)+(1))|0);
 var $storemerge=$737;label=285;break;
 case 289: 
 var $738=HEAP32[(($20)>>2)];
 var $739=$738|32768;
 HEAP32[(($20)>>2)]=$739;
 label=290;break;
 case 290: 
 var $740=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=291;break; } else { label=279;break; }
 case 291: 
 var $742=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$740) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=292;break; } else { label=279;break; }
 case 292: 
 var $744=($742|0)==-1;
 if($744){label=293;break;}else{label=297;break;}
 case 293: 
 var $746=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=279;break; }
 case 294: 
 var $748=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$746) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=279;break; }
 case 295: 
 var $750=($748|0)==0;
 if($750){label=297;break;}else{label=296;break;}
 case 296: 
 HEAP32[(($22)>>2)]=14;
 var $_1542=14;var $index_sroa_0_9=0;var $index_sroa_22_11=0;label=1185;break;
 case 297: 
 var $753=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=298;break; } else { label=279;break; }
 case 298: 
 var $755=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$753) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=299;break; } else { label=279;break; }
 case 299: 
 var $757=($755|0)==-1;
 if($757){label=300;break;}else{label=304;break;}
 case 300: 
 var $759=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=279;break; }
 case 301: 
 var $761=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$759) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=302;break; } else { label=279;break; }
 case 302: 
 var $763=($761|0)==0;
 if($763){label=304;break;}else{label=303;break;}
 case 303: 
 HEAP32[(($22)>>2)]=14;
 var $_1542=14;var $index_sroa_0_9=0;var $index_sroa_22_11=0;label=1185;break;
 case 304: 
 var $766=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=305;break; } else { label=279;break; }
 case 305: 
 var $768=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$766) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=279;break; }
 case 306: 
 var $770=($768|0)==-1;
 if($770){label=307;break;}else{label=311;break;}
 case 307: 
 var $772=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=308;break; } else { label=279;break; }
 case 308: 
 var $774=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$772) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=309;break; } else { label=279;break; }
 case 309: 
 var $776=($774|0)==0;
 if($776){label=311;break;}else{label=310;break;}
 case 310: 
 HEAP32[(($22)>>2)]=14;
 var $_1542=14;var $index_sroa_0_9=0;var $index_sroa_22_11=0;label=1185;break;
 case 311: 
 var $779=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,12944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=279;break; }
 case 312: 
 var $781=($779|0)==-1;
 if($781){var $storemerge31=9;label=313;break;}else{label=323;break;}
 case 313: 
 var $storemerge31;
 var $782=($storemerge31|0)<21;
 if($782){label=314;break;}else{label=317;break;}
 case 314: 
 var $784=((12944+((($storemerge31)*(44))&-1))|0);
 var $785=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=315;break; } else { label=274;break; }
 case 315: 
 var $787=($785|0)==-1;
 if($787){label=316;break;}else{label=317;break;}
 case 316: 
 var $789=((($storemerge31)+(1))|0);
 var $storemerge31=$789;label=313;break;
 case 317: 
 var $790=($storemerge31|0)==21;
 if($790){label=318;break;}else{label=323;break;}
 case 318: 
 var $792=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,13960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=279;break; }
 case 319: 
 var $794=($792|0)==-1;
 if($794){label=320;break;}else{label=323;break;}
 case 320: 
 var $796=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,12896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=321;break; } else { label=279;break; }
 case 321: 
 var $798=($796|0)==-1;
 if($798){label=322;break;}else{label=323;break;}
 case 322: 
 HEAP32[(($22)>>2)]=15;
 label=323;break;
 case 323: 
 var $801=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,13872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=324;break; } else { label=279;break; }
 case 324: 
 var $803=($801|0)==-1;
 if($803){label=328;break;}else{label=325;break;}
 case 325: 
 var $805=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,13916) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=326;break; } else { label=279;break; }
 case 326: 
 var $807=($805|0)==-1;
 if($807){label=328;break;}else{label=327;break;}
 case 327: 
 var $809=HEAP32[(($20)>>2)];
 var $810=$809|524288;
 HEAP32[(($20)>>2)]=$810;
 label=328;break;
 case 328: 
 var $812=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=329;break; } else { label=279;break; }
 case 329: 
 var $814=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$812) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=330;break; } else { label=279;break; }
 case 330: 
 var $816=($814|0)==-1;
 if($816){label=332;break;}else{label=331;break;}
 case 331: 
 var $818=HEAP32[(($20)>>2)];
 var $819=$818|2;
 HEAP32[(($20)>>2)]=$819;
 label=332;break;
 case 332: 
 var $821=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=333;break; } else { label=279;break; }
 case 333: 
 var $823=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$821) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=279;break; }
 case 334: 
 var $825=($823|0)==-1;
 if($825){label=342;break;}else{label=335;break;}
 case 335: 
 var $827=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=336;break; } else { label=279;break; }
 case 336: 
 var $829=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$827) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=337;break; } else { label=279;break; }
 case 337: 
 var $831=($829|0)==-1;
 if($831){label=342;break;}else{label=338;break;}
 case 338: 
 var $833=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=339;break; } else { label=279;break; }
 case 339: 
 var $835=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$833) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=340;break; } else { label=279;break; }
 case 340: 
 var $837=($835|0)==-1;
 if($837){label=342;break;}else{label=341;break;}
 case 341: 
 var $839=HEAP32[(($20)>>2)];
 var $840=$839|16;
 HEAP32[(($20)>>2)]=$840;
 label=352;break;
 case 342: 
 var $842=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=279;break; }
 case 343: 
 var $844=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$842) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=344;break; } else { label=279;break; }
 case 344: 
 var $846=($844|0)==-1;
 if($846){label=352;break;}else{label=345;break;}
 case 345: 
 var $848=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=346;break; } else { label=279;break; }
 case 346: 
 var $850=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=347;break; } else { label=279;break; }
 case 347: 
 var $852=($850|0)==-1;
 if($852){label=352;break;}else{label=348;break;}
 case 348: 
 var $854=(function() { try { __THREW__ = 0; return __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi(27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=349;break; } else { label=279;break; }
 case 349: 
 var $856=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$854) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=279;break; }
 case 350: 
 var $858=($856|0)==-1;
 if($858){label=352;break;}else{label=351;break;}
 case 351: 
 var $860=HEAP32[(($20)>>2)];
 var $861=$860|16;
 HEAP32[(($20)>>2)]=$861;
 label=352;break;
 case 352: 
 var $863=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,12988) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=353;break; } else { label=279;break; }
 case 353: 
 var $865=($863|0)==-1;
 if($865){label=355;break;}else{label=354;break;}
 case 354: 
 var $867=HEAP32[(($20)>>2)];
 var $868=$867|128;
 HEAP32[(($20)>>2)]=$868;
 label=355;break;
 case 355: 
 var $870=(($pi+12)|0);
 var $871=HEAP32[(($870)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3ply14PropDescriptorENS_9allocatorIS3_EEEC2Ej($VPV,$871) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=356;break; } else { label=279;break; }
 case 356: 
 var $873=(($pi+20)|0);
 var $874=HEAP32[(($873)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN3vcg3ply14PropDescriptorENS_9allocatorIS3_EEEC2Ej($FPV,$874) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=357;break; } else { label=363;break; }
 case 357: 
 var $876=HEAP32[(($870)>>2)];
 var $877=($876|0)>0;
 if($877){label=358;break;}else{label=384;break;}
 case 358: 
 var $879=(($VPV)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=(($pi+16)|0);
 var $storemerge30=0;var $totsz_0=0;var $883=$876;label=359;break;
 case 359: 
 var $883;
 var $totsz_0;
 var $storemerge30;
 var $884=($storemerge30|0)<($883|0);
 if($884){label=360;break;}else{label=382;break;}
 case 360: 
 var $886=(($880+((($storemerge30)*(44))&-1))|0);
 var $887=HEAP32[(($881)>>2)];
 var $888=(($887+((($storemerge30)*(44))&-1))|0);
 var $889=$886;
 var $890=$888;
 assert(44 % 1 === 0);(_memcpy($889, $890, 44)|0);
 var $891=((($totsz_0)+(39))|0);
 var $892=(($880+((($storemerge30)*(44))&-1)+16)|0);
 HEAP32[(($892)>>2)]=$891;
 var $893=HEAP32[(($881)>>2)];
 var $894=(($893+((($storemerge30)*(44))&-1)+12)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=((28712+($895<<2))|0);
 var $897=HEAP32[(($896)>>2)];
 var $898=((($totsz_0)+($897))|0);
 var $899=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$886) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=361;break; } else { label=378;break; }
 case 361: 
 var $901=($899|0)==-1;
 if($901){label=362;break;}else{label=381;break;}
 case 362: 
 var $903=HEAP32[(($39)>>2)];
 HEAP32[(($22)>>2)]=$903;
 var $_0541=$903;var $index_sroa_0_6=0;var $index_sroa_22_8=0;label=1165;break;
 case 363: 
 var $905$0 = ___cxa_find_matching_catch(); var $905$1 = tempRet0;
 var $906=$905$0;
 var $907=$905$1;
 var $_4=$907;var $_4539=$906;var $index_sroa_0_8=0;var $index_sroa_22_10=0;label=1180;break;
 case 364: 
 var $lpad_loopexit554$0 = ___cxa_find_matching_catch(); var $lpad_loopexit554$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit554$1;var $eh_lpad_body163$0=$lpad_loopexit554$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 365: 
 var $lpad_loopexit591$0 = ___cxa_find_matching_catch(); var $lpad_loopexit591$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit591$1;var $eh_lpad_body163$0=$lpad_loopexit591$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 366: 
 var $lpad_loopexit594$0 = ___cxa_find_matching_catch(); var $lpad_loopexit594$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit594$1;var $eh_lpad_body163$0=$lpad_loopexit594$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 367: 
 var $lpad_loopexit626$0 = ___cxa_find_matching_catch(); var $lpad_loopexit626$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit626$1;var $eh_lpad_body163$0=$lpad_loopexit626$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 368: 
 var $lpad_loopexit630$0 = ___cxa_find_matching_catch(); var $lpad_loopexit630$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit630$1;var $eh_lpad_body163$0=$lpad_loopexit630$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 369: 
 var $lpad_loopexit634$0 = ___cxa_find_matching_catch(); var $lpad_loopexit634$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit634$1;var $eh_lpad_body163$0=$lpad_loopexit634$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 370: 
 var $lpad_loopexit638$0 = ___cxa_find_matching_catch(); var $lpad_loopexit638$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit638$1;var $eh_lpad_body163$0=$lpad_loopexit638$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 371: 
 var $lpad_loopexit642$0 = ___cxa_find_matching_catch(); var $lpad_loopexit642$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit642$1;var $eh_lpad_body163$0=$lpad_loopexit642$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 372: 
 var $lpad_loopexit651$0 = ___cxa_find_matching_catch(); var $lpad_loopexit651$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit651$1;var $eh_lpad_body163$0=$lpad_loopexit651$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 373: 
 var $lpad_loopexit656$0 = ___cxa_find_matching_catch(); var $lpad_loopexit656$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit656$1;var $eh_lpad_body163$0=$lpad_loopexit656$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 374: 
 var $lpad_loopexit660$0 = ___cxa_find_matching_catch(); var $lpad_loopexit660$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit660$1;var $eh_lpad_body163$0=$lpad_loopexit660$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 375: 
 var $lpad_loopexit666$0 = ___cxa_find_matching_catch(); var $lpad_loopexit666$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit666$1;var $eh_lpad_body163$0=$lpad_loopexit666$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 376: 
 var $lpad_loopexit669$0 = ___cxa_find_matching_catch(); var $lpad_loopexit669$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit669$1;var $eh_lpad_body163$0=$lpad_loopexit669$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 377: 
 var $lpad_loopexit672$0 = ___cxa_find_matching_catch(); var $lpad_loopexit672$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_loopexit672$1;var $eh_lpad_body163$0=$lpad_loopexit672$0;var $index_sroa_0_1=0;var $index_sroa_22_1=0;var $_pre758_pre_phi=$919;label=380;break;
 case 378: 
 var $lpad_loopexit675$0 = ___cxa_find_matching_catch(); var $lpad_loopexit675$1 = tempRet0;
 var $_pre758_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre=(($FPV)|0);
 var $eh_lpad_body163$1=$lpad_loopexit675$1;var $eh_lpad_body163$0=$lpad_loopexit675$0;var $index_sroa_0_1=0;var $index_sroa_22_1=0;var $_pre758_pre_phi=$_pre758_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre_pre;label=380;break;
 case 379: 
 var $lpad_nonloopexit676$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit676$1 = tempRet0;
 var $eh_lpad_body163$1=$lpad_nonloopexit676$1;var $eh_lpad_body163$0=$lpad_nonloopexit676$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 380: 
 var $_pre758_pre_phi;
 var $index_sroa_22_1;
 var $index_sroa_0_1;
 var $eh_lpad_body163$0;
 var $eh_lpad_body163$1;
 var $908=$eh_lpad_body163$0;
 var $909=$eh_lpad_body163$1;
 var $_3=$909;var $_3538=$908;var $index_sroa_0_7=$index_sroa_0_1;var $index_sroa_22_9=$index_sroa_22_1;var $_pre_phi=$_pre758_pre_phi;label=1175;break;
 case 381: 
 var $911=((($storemerge30)+(1))|0);
 var $_pre722=HEAP32[(($870)>>2)];
 var $storemerge30=$911;var $totsz_0=$898;var $883=$_pre722;label=359;break;
 case 382: 
 var $913=($totsz_0>>>0)>256;
 if($913){label=383;break;}else{label=384;break;}
 case 383: 
 HEAP32[(($22)>>2)]=10;
 var $_0541=10;var $index_sroa_0_6=0;var $index_sroa_22_8=0;label=1165;break;
 case 384: 
 var $916=HEAP32[(($873)>>2)];
 var $917=($916|0)>0;
 if($917){label=386;break;}else{label=385;break;}
 case 385: 
 var $_pre761=(($pi+24)|0);
 var $_pre763=(($FPV)|0);
 var $_pre_phi762=$_pre761;var $_pre_phi764=$_pre763;label=394;break;
 case 386: 
 var $919=(($FPV)|0);
 var $920=HEAP32[(($919)>>2)];
 var $921=(($pi+24)|0);
 var $storemerge29=0;var $totsz2_0=0;var $923=$916;label=387;break;
 case 387: 
 var $923;
 var $totsz2_0;
 var $storemerge29;
 var $924=($storemerge29|0)<($923|0);
 if($924){label=388;break;}else{label=392;break;}
 case 388: 
 var $926=(($920+((($storemerge29)*(44))&-1))|0);
 var $927=HEAP32[(($921)>>2)];
 var $928=(($927+((($storemerge29)*(44))&-1))|0);
 var $929=$926;
 var $930=$928;
 assert(44 % 1 === 0);(_memcpy($929, $930, 44)|0);
 var $931=((($totsz2_0)+(2328))|0);
 var $932=(($920+((($storemerge29)*(44))&-1)+16)|0);
 HEAP32[(($932)>>2)]=$931;
 var $933=HEAP32[(($921)>>2)];
 var $934=(($933+((($storemerge29)*(44))&-1)+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=((28712+($935<<2))|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=((($totsz2_0)+($937))|0);
 var $939=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($pf,$926) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=389;break; } else { label=377;break; }
 case 389: 
 var $941=($939|0)==-1;
 if($941){label=390;break;}else{label=391;break;}
 case 390: 
 var $943=HEAP32[(($39)>>2)];
 HEAP32[(($22)>>2)]=$943;
 var $_0541=$943;var $index_sroa_0_6=0;var $index_sroa_22_8=0;label=1165;break;
 case 391: 
 var $945=((($storemerge29)+(1))|0);
 var $_pre726=HEAP32[(($873)>>2)];
 var $storemerge29=$945;var $totsz2_0=$938;var $923=$_pre726;label=387;break;
 case 392: 
 var $947=($totsz2_0>>>0)>256;
 if($947){label=393;break;}else{var $_pre_phi762=$921;var $_pre_phi764=$919;label=394;break;}
 case 393: 
 HEAP32[(($22)>>2)]=10;
 var $_0541=10;var $index_sroa_0_6=0;var $index_sroa_22_8=0;label=1165;break;
 case 394: 
 var $_pre_phi764;
 var $_pre_phi762;
 var $950=(($m)|0);
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($950);
 var $951=(($pi+8)|0);
 var $952=(($rga)|0);
 var $953=(($rga+4)|0);
 var $954=$__v_i;
 var $955=(($RangeGridAuxVec+8)|0);
 var $956=$955;
 var $957=(($__v_i+12)|0);
 var $958=(($__v_i+16)|0);
 var $959=(($__v_i)|0);
 var $960=(($__v_i+8)|0);
 var $961=(($__v_i+4)|0);
 var $962=$f_i;
 var $963=$f1_i;
 var $964=$f2_i;
 var $965=$f3_i;
 var $966=(($m+12)|0);
 var $967=(($m+4)|0);
 var $968=(($m)|0);
 var $969=(($f_i)|0);
 var $970=(($f1_i)|0);
 var $971=(($f2_i)|0);
 var $972=(($f3_i)|0);
 var $973=$num_cols;
 var $974=$num_cols;
 var $975=(($974+1)|0);
 var $976=$num_rows;
 var $977=$num_rows;
 var $978=(($977+1)|0);
 var $979=$bufstr;
 var $980=$bufclean;
 var $981=$6;
 var $982=$6;
 var $983=(($982+1)|0);
 var $984=(($6+8)|0);
 var $985=(($num_cols+8)|0);
 var $986=$7;
 var $987=$7;
 var $988=(($987+1)|0);
 var $989=$bufstr;
 var $990=$bufstr;
 var $991=(($990+1)|0);
 var $992=$7;
 var $993=(($bufstr+8)|0);
 var $994=(($7+8)|0);
 var $995=(($bufstr+4)|0);
 var $996=(($7)|0);
 var $997=(($7+4)|0);
 var $998=(($num_cols+4)|0);
 var $999=$8;
 var $1000=$8;
 var $1001=(($1000+1)|0);
 var $1002=(($8+8)|0);
 var $1003=(($num_rows+8)|0);
 var $1004=$9;
 var $1005=$9;
 var $1006=(($1005+1)|0);
 var $1007=$9;
 var $1008=(($9+8)|0);
 var $1009=(($9)|0);
 var $1010=(($9+4)|0);
 var $1011=(($num_rows+4)|0);
 var $1012=$bufclean;
 var $1013=(($bufclean+8)|0);
 var $1014=(($8+4)|0);
 var $1015=(($8)|0);
 var $1016=(($6+4)|0);
 var $1017=(($6)|0);
 var $1018=(($num_rows)|0);
 var $1019=(($num_cols)|0);
 var $1020=$tsa;
 var $1021=(($tsa)|0);
 var $1022=(($tsa+4)|0);
 var $1023=(($m+36)|0);
 var $1024=(($fa)|0);
 var $1025=(($fi)|0);
 var $1026=(($m+32)|0);
 var $1027=(($fa+4)|0);
 var $1028=(($fa+2052)|0);
 var $1029=$va;
 var $1030=(($va)|0);
 var $1031=(($vi)|0);
 var $1032=(($va+4)|0);
 var $1033=(($va+8)|0);
 var $1034=(($pi+16)|0);
 var $1035=(($VPV)|0);
 var $1036=(($va+12)|0);
 var $1037=(($va+16)|0);
 var $1038=(($va+20)|0);
 var $1039=$ca;
 var $1040=(($m+220)|0);
 var $1041=(($m+284)|0);
 var $1042=(($m+288)|0);
 var $1043=(($m+292)|0);
 var $1044=(($ca)|0);
 var $1045=(($ca+4)|0);
 var $1046=(($ca+8)|0);
 var $1047=(($ca+12)|0);
 var $1048=(($rm)|0);
 var $1049=(($ca+16)|0);
 var $1050=(($rm+4)|0);
 var $1051=(($ca+20)|0);
 var $1052=(($rm+8)|0);
 var $1053=(($ca+24)|0);
 var $1054=(($rm+16)|0);
 var $1055=(($ca+28)|0);
 var $1056=(($rm+20)|0);
 var $1057=(($ca+32)|0);
 var $1058=(($rm+24)|0);
 var $1059=(($ca+36)|0);
 var $1060=(($rm+32)|0);
 var $1061=(($ca+40)|0);
 var $1062=(($rm+36)|0);
 var $1063=(($ca+44)|0);
 var $1064=(($rm+40)|0);
 var $1065=(($m+220)|0);
 var $1066=$1065;
 var $1067=$rm;
 var $1068=(($ca+48)|0);
 var $1069=(($m+164)|0);
 var $1070=(($ca+52)|0);
 var $1071=(($m+176)|0);
 var $1072=(($ca+56)|0);
 var $1073=(($m+180)|0);
 var $1074=(($ca+60)|0);
 var $1075=(($m+184)|0);
 var $1076=(($ca+64)|0);
 var $1077=(($m+188)|0);
 var $1078=(($ca+68)|0);
 var $1079=(($m+168)|0);
 var $1080=(($ca+72)|0);
 var $1081=(($m+172)|0);
 var $1082=(($ca+76)|0);
 var $1083=(($m+200)|0);
 var $1084=(($ca+80)|0);
 var $1085=(($m+204)|0);
 var $1086=(($ca+84)|0);
 var $1087=(($m+208)|0);
 var $1088=(($ca+88)|0);
 var $1089=(($m+212)|0);
 var $storemerge1=0;var $RangeGridRows_0=0;var $RangeGridCols_0=0;var $index_sroa_0_2=0;var $index_sroa_22_2=0;var $index_sroa_42_0=0;label=395;break;
 case 395: 
 var $index_sroa_42_0;
 var $index_sroa_22_2;
 var $index_sroa_0_2;
 var $RangeGridCols_0;
 var $RangeGridRows_0;
 var $storemerge1;
 var $1091=HEAP32[(($24)>>2)];
 var $1092=HEAP32[(($23)>>2)];
 var $1093=$1091;
 var $1094=$1092;
 var $1095=((($1093)-($1094))|0);
 var $1096=(((($1095|0))/(28))&-1);
 var $1097=($storemerge1|0)<($1096|0);
 if($1097){label=396;break;}else{label=938;break;}
 case 396: 
 var $1099=($storemerge1|0)<0;
 if($1099){var $storemerge_i67=0;var $storemerge_i66775=0;label=400;break;}else{label=397;break;}
 case 397: 
 var $1101=(($1092+((($storemerge1)*(28))&-1)+12)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1104=$1103;
 var $1105=HEAP8[(($1104)>>0)];
 var $1106=$1105&1;
 var $1107=(($1106<<24)>>24)==0;
 if($1107){label=399;break;}else{label=398;break;}
 case 398: 
 var $1109=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1110=HEAP32[(($1109)>>2)];
 var $storemerge_i67=$1110;var $storemerge_i66775=$1102;label=400;break;
 case 399: 
 var $1112=$1103;
 var $1113=(($1112+1)|0);
 var $storemerge_i67=$1113;var $storemerge_i66775=$1102;label=400;break;
 case 400: 
 var $storemerge_i66775;
 var $storemerge_i67;
 var $1114=HEAP8[(($storemerge_i67)>>0)];
 var $1115=(($1114<<24)>>24)==99;
 if($1115){var $_014_i=$storemerge_i67;var $_05_i=9000;label=401;break;}else{label=412;break;}
 case 401: 
 var $_05_i;
 var $_014_i;
 var $1116=(($_014_i+1)|0);
 var $1117=(($_05_i+1)|0);
 var $1118=HEAP8[(($1116)>>0)];
 var $1119=HEAP8[(($1117)>>0)];
 var $1120=(($1118<<24)>>24)!=(($1119<<24)>>24);
 var $1121=(($1118<<24)>>24)==0;
 var $or_cond_i=$1120|$1121;
 if($or_cond_i){label=402;break;}else{var $_014_i=$1116;var $_05_i=$1117;label=401;break;}
 case 402: 
 var $1122=(($1118<<24)>>24)==(($1119<<24)>>24);
 if($1122){label=403;break;}else{label=412;break;}
 case 403: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge8=0;label=404;break; } else { label=376;break; }
 case 404: 
 var $storemerge8;
 var $1124=($storemerge8|0)<($storemerge_i66775|0);
 if($1124){label=405;break;}else{var $RangeGridRows_4=$RangeGridRows_0;var $RangeGridCols_4=$RangeGridCols_0;var $index_sroa_0_5=$index_sroa_0_2;var $index_sroa_22_7=$index_sroa_22_2;var $index_sroa_42_3=$index_sroa_42_0;label=937;break;}
 case 405: 
 var $1126=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$1039) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=406;break; } else { label=375;break; }
 case 406: 
 var $1128=($1126|0)==-1;
 if($1128){label=407;break;}else{label=408;break;}
 case 407: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 408: 
 (function() { try { __THREW__ = 0; return __ZN3vcg8Matrix44IfE11SetIdentityEv($1040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=409;break; } else { label=375;break; }
 case 409: 
 var $1132=HEAPF32[(($1044)>>2)];
 var $1133=HEAPF32[(($1045)>>2)];
 var $1134=HEAPF32[(($1046)>>2)];
 HEAPF32[(($1041)>>2)]=$1132;
 HEAPF32[(($1042)>>2)]=$1133;
 HEAPF32[(($1043)>>2)]=$1134;
 (function() { try { __THREW__ = 0; return __ZN3vcg8Matrix44IfE11SetIdentityEv($rm) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=410;break; } else { label=411;break; }
 case 410: 
 var $1136=HEAPF32[(($1047)>>2)];
 HEAPF32[(($1048)>>2)]=$1136;
 var $1137=HEAPF32[(($1049)>>2)];
 HEAPF32[(($1050)>>2)]=$1137;
 var $1138=HEAPF32[(($1051)>>2)];
 HEAPF32[(($1052)>>2)]=$1138;
 var $1139=HEAPF32[(($1053)>>2)];
 HEAPF32[(($1054)>>2)]=$1139;
 var $1140=HEAPF32[(($1055)>>2)];
 HEAPF32[(($1056)>>2)]=$1140;
 var $1141=HEAPF32[(($1057)>>2)];
 HEAPF32[(($1058)>>2)]=$1141;
 var $1142=HEAPF32[(($1059)>>2)];
 HEAPF32[(($1060)>>2)]=$1142;
 var $1143=HEAPF32[(($1061)>>2)];
 HEAPF32[(($1062)>>2)]=$1143;
 var $1144=HEAPF32[(($1063)>>2)];
 HEAPF32[(($1064)>>2)]=$1144;
 assert(64 % 1 === 0);(_memcpy($1066, $1067, 64)|0);
 var $1145=HEAPF32[(($1068)>>2)];
 HEAPF32[(($1069)>>2)]=$1145;
 var $1146=HEAPF32[(($1070)>>2)];
 HEAPF32[(($1071)>>2)]=$1146;
 var $1147=HEAPF32[(($1072)>>2)];
 HEAPF32[(($1073)>>2)]=$1147;
 var $1148=HEAPF32[(($1074)>>2)];
 HEAPF32[(($1075)>>2)]=$1148;
 var $1149=HEAPF32[(($1076)>>2)];
 HEAPF32[(($1077)>>2)]=$1149;
 var $1150=HEAP32[(($1078)>>2)];
 HEAP32[(($1079)>>2)]=$1150;
 var $1151=HEAP32[(($1080)>>2)];
 HEAP32[(($1081)>>2)]=$1151;
 var $1152=HEAPF32[(($1082)>>2)];
 HEAPF32[(($1083)>>2)]=$1152;
 var $1153=HEAPF32[(($1084)>>2)];
 HEAPF32[(($1085)>>2)]=$1153;
 var $1154=HEAPF32[(($1086)>>2)];
 HEAPF32[(($1087)>>2)]=$1154;
 var $1155=HEAPF32[(($1088)>>2)];
 HEAPF32[(($1089)>>2)]=$1155;
 var $1156=((($storemerge8)+(1))|0);
 var $storemerge8=$1156;label=404;break;
 case 411: 
 var $1158$0 = ___cxa_find_matching_catch(); var $1158$1 = tempRet0;
 var $1159=$1158$0;
 var $1160=$1158$1;
 var $_3=$1160;var $_3538=$1159;var $index_sroa_0_7=$index_sroa_0_2;var $index_sroa_22_9=$index_sroa_22_2;var $_pre_phi=$_pre_phi764;label=1175;break;
 case 412: 
 if($1099){var $storemerge_i97=0;label=416;break;}else{label=413;break;}
 case 413: 
 var $1162=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1163=$1162;
 var $1164=HEAP8[(($1163)>>0)];
 var $1165=$1164&1;
 var $1166=(($1165<<24)>>24)==0;
 if($1166){label=415;break;}else{label=414;break;}
 case 414: 
 var $1168=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1169=HEAP32[(($1168)>>2)];
 var $storemerge_i97=$1169;label=416;break;
 case 415: 
 var $1171=$1162;
 var $1172=(($1171+1)|0);
 var $storemerge_i97=$1172;label=416;break;
 case 416: 
 var $storemerge_i97;
 var $1174=HEAP8[(($storemerge_i97)>>0)];
 var $1175=(($1174<<24)>>24)==118;
 if($1175){var $_014_i101=$storemerge_i97;var $_05_i100=8968;label=417;break;}else{label=497;break;}
 case 417: 
 var $_05_i100;
 var $_014_i101;
 var $1176=(($_014_i101+1)|0);
 var $1177=(($_05_i100+1)|0);
 var $1178=HEAP8[(($1176)>>0)];
 var $1179=HEAP8[(($1177)>>0)];
 var $1180=(($1178<<24)>>24)!=(($1179<<24)>>24);
 var $1181=(($1178<<24)>>24)==0;
 var $or_cond_i102=$1180|$1181;
 if($or_cond_i102){label=418;break;}else{var $_014_i101=$1176;var $_05_i100=$1177;label=417;break;}
 case 418: 
 var $1182=(($1178<<24)>>24)==(($1179<<24)>>24);
 if($1182){label=419;break;}else{label=497;break;}
 case 419: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=420;break; } else { label=376;break; }
 case 420: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($vi,$m,$storemerge_i66775) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=421;break; } else { label=376;break; }
 case 421: 
 var $1185=HEAP32[(($1035)>>2)];
 var $storemerge9=0;label=422;break;
 case 422: 
 var $storemerge9;
 var $1187=($storemerge9|0)<($storemerge_i66775|0);
 if($1187){label=423;break;}else{label=455;break;}
 case 423: 
 var $1189=HEAP32[(($951)>>2)];
 var $1190=($1189|0)!=0;
 var $1191=(((($storemerge9|0))%(1000))&-1);
 var $1192=($1191|0)==0;
 var $or_cond=$1190&$1192;
 if($or_cond){label=424;break;}else{label=425;break;}
 case 424: 
 var $1194=((($storemerge9)*(50))&-1);
 var $1195=(((($1194|0))/(($storemerge_i66775|0)))&-1);
 var $1196=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1189]($1195,2888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=425;break; } else { label=373;break; }
 case 425: 
 var $1198=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$1029) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=426;break; } else { label=373;break; }
 case 426: 
 var $1200=($1198|0)==-1;
 if($1200){label=427;break;}else{label=428;break;}
 case 427: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 428: 
 var $1203=HEAPF32[(($1030)>>2)];
 var $1204=HEAP32[(($1031)>>2)];
 var $1205=(($1204)|0);
 HEAPF32[(($1205)>>2)]=$1203;
 var $1206=HEAPF32[(($1032)>>2)];
 var $1207=(($1204+4)|0);
 HEAPF32[(($1207)>>2)]=$1206;
 var $1208=HEAPF32[(($1033)>>2)];
 var $1209=(($1204+8)|0);
 HEAPF32[(($1209)>>2)]=$1208;
 var $1210=HEAP32[(($20)>>2)];
 var $1211=$1210&2;
 var $1212=($1211|0)==0;
 if($1212){var $1217=$1210;label=430;break;}else{label=429;break;}
 case 429: 
 var $1214=(($1204+24)|0);
 var $1215=HEAP32[(($21)>>2)];
 HEAP32[(($1214)>>2)]=$1215;
 var $_pre739=HEAP32[(($20)>>2)];
 var $1217=$_pre739;label=430;break;
 case 430: 
 var $1217;
 var $1218=$1217&8;
 var $1219=($1218|0)==0;
 if($1219){label=433;break;}else{label=431;break;}
 case 431: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,5736,69,10344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=432;break; } else { label=379;break; }
 case 432: 
 throw "Reached an unreachable!";
 case 433: 
 var $1222=$1217&16;
 var $1223=($1222|0)==0;
 if($1223){var $1232=$1217;label=435;break;}else{label=434;break;}
 case 434: 
 var $1225=HEAPF32[(($1036)>>2)];
 var $1226=(($1204+12)|0);
 HEAPF32[(($1226)>>2)]=$1225;
 var $1227=HEAPF32[(($1037)>>2)];
 var $1228=(($1204+16)|0);
 HEAPF32[(($1228)>>2)]=$1227;
 var $1229=HEAPF32[(($1038)>>2)];
 var $1230=(($1204+20)|0);
 HEAPF32[(($1230)>>2)]=$1229;
 var $_pre740=HEAP32[(($20)>>2)];
 var $1232=$_pre740;label=435;break;
 case 435: 
 var $1232;
 var $1233=$1232&32;
 var $1234=($1233|0)==0;
 if($1234){label=442;break;}else{label=436;break;}
 case 436: 
 var $1236=HEAP8[((34520)>>0)];
 var $1237=(($1236<<24)>>24)==0;
 if($1237){label=437;break;}else{label=440;break;}
 case 437: 
 var $1239=___cxa_guard_acquire(34520);
 var $1240=($1239|0)==0;
 if($1240){label=440;break;}else{var $1241=31544;label=438;break;}
 case 438: 
 var $1241;
 var $1242=(($1241+8)|0);
 var $1243=($1242|0)==31552;
 if($1243){label=439;break;}else{var $1241=$1242;label=438;break;}
 case 439: 

 label=440;break;
 case 440: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,5736,94,10304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=441;break; } else { label=379;break; }
 case 441: 
 throw "Reached an unreachable!";
 case 442: 
 var $1246=$1232&4;
 var $1247=($1246|0)==0;
 if($1247){label=448;break;}else{label=443;break;}
 case 443: 
 var $1249=HEAP8[((34528)>>0)];
 var $1250=(($1249<<24)>>24)==0;
 if($1250){label=444;break;}else{label=446;break;}
 case 444: 
 var $1252=___cxa_guard_acquire(34528);
 var $1253=($1252|0)==0;
 if($1253){label=446;break;}else{label=445;break;}
 case 445: 

 label=446;break;
 case 446: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,5736,75,1328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=447;break; } else { label=379;break; }
 case 447: 
 throw "Reached an unreachable!";
 case 448: 
 var $1257=$1232&65536;
 var $1258=($1257|0)==0;
 if($1258){label=449;break;}else{label=450;break;}
 case 449: 
 var $1259=$1204;
 var $storemerge10=0;label=452;break;
 case 450: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8064,5736,88,10312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=451;break; } else { label=379;break; }
 case 451: 
 throw "Reached an unreachable!";
 case 452: 
 var $storemerge10;
 var $1262=HEAP32[(($870)>>2)];
 var $1263=($storemerge10|0)<($1262|0);
 if($1263){label=453;break;}else{label=454;break;}
 case 453: 
 var $1265=HEAP32[(($1034)>>2)];
 var $1266=(($1265+((($storemerge10)*(44))&-1)+16)|0);
 var $1267=HEAP32[(($1266)>>2)];
 var $1268=(($1259+$1267)|0);
 var $1269=(($1185+((($storemerge10)*(44))&-1)+16)|0);
 var $1270=HEAP32[(($1269)>>2)];
 var $1271=(($1029+$1270)|0);
 var $1272=(($1185+((($storemerge10)*(44))&-1)+12)|0);
 var $1273=HEAP32[(($1272)>>2)];
 var $1274=((28712+($1273<<2))|0);
 var $1275=HEAP32[(($1274)>>2)];
 assert($1275 % 1 === 0);(_memcpy($1268, $1271, $1275)|0);
 var $1276=((($storemerge10)+(1))|0);
 var $storemerge10=$1276;label=452;break;
 case 454: 
 var $1278=HEAP32[(($1031)>>2)];
 var $1279=(($1278+28)|0);
 HEAP32[(($1031)>>2)]=$1279;
 var $1280=((($storemerge9)+(1))|0);
 var $storemerge9=$1280;label=422;break;
 case 455: 
 var $1282=$index_sroa_22_2;
 var $1283=$index_sroa_0_2;
 var $1284=((($1282)-($1283))|0);
 var $1285=$1284>>2;
 var $1286=($storemerge_i66775>>>0)>($1285>>>0);
 if($1286){label=456;break;}else{label=490;break;}
 case 456: 
 var $1288=((($storemerge_i66775)-($1285))|0);
 var $1289=$index_sroa_42_0;
 var $1290=((($1289)-($1282))|0);
 var $1291=$1290>>2;
 var $1292=($1291>>>0)<($1288>>>0);
 if($1292){label=460;break;}else{var $_0530=$1288;var $index_sroa_22_3=$index_sroa_22_2;label=457;break;}
 case 457: 
 var $index_sroa_22_3;
 var $_0530;
 var $1294=($index_sroa_22_3|0)==0;
 if($1294){label=459;break;}else{label=458;break;}
 case 458: 
 HEAP32[(($index_sroa_22_3)>>2)]=0;
 label=459;break;
 case 459: 
 var $1296=(($index_sroa_22_3+4)|0);
 var $1297=((($_0530)-(1))|0);
 var $1298=($1297|0)==0;
 if($1298){var $index_sroa_0_4=$index_sroa_0_2;var $index_sroa_22_6=$1296;var $index_sroa_42_2=$index_sroa_42_0;label=494;break;}else{var $_0530=$1297;var $index_sroa_22_3=$1296;label=457;break;}
 case 460: 
 var $1300=($storemerge_i66775>>>0)>1073741823;
 if($1300){label=461;break;}else{label=472;break;}
 case 461: 
 var $1301=___cxa_allocate_exception(8);
 var $1302=$1301;
 HEAP32[(($1302)>>2)]=15352;
 var $1303=(($1301+4)|0);
 var $1304=_strlen(1736);
 var $1305=((($1304)+(13))|0);
 var $1306=($1305|0)==0;
 var $_size_i_i_i150=($1306?1:$1305);
 var $1307=_malloc($_size_i_i_i150);
 var $1308=($1307|0)==0;
 if($1308){label=462;break;}else{var $_lcssa_i_i_i154=$1307;label=467;break;}
 case 462: 
 var $1309=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1310=($1309|0)==0;
 if($1310){label=465;break;}else{label=463;break;}
 case 463: 
 var $1312=$1309;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1312]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=464;break; } else { label=469;break; }
 case 464: 
 var $1313=_malloc($_size_i_i_i150);
 var $1314=($1313|0)==0;
 if($1314){label=462;break;}else{var $_lcssa_i_i_i154=$1313;label=467;break;}
 case 465: 
 var $1316=___cxa_allocate_exception(4);
 var $1317=$1316;
 HEAP32[(($1317)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1316,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=466;break; } else { label=470;break; }
 case 466: 
 throw "Reached an unreachable!";
 case 467: 
 var $_lcssa_i_i_i154;
 var $1318=$_lcssa_i_i_i154;
 HEAP32[(($1318)>>2)]=$1304;
 var $1319=(($_lcssa_i_i_i154+4)|0);
 var $1320=$1319;
 HEAP32[(($1320)>>2)]=$1304;
 var $1321=(($_lcssa_i_i_i154+8)|0);
 var $1322=$1321;
 HEAP32[(($1322)>>2)]=0;
 var $1323=(($_lcssa_i_i_i154+12)|0);
 var $1324=((($1304)+(1))|0);
 assert($1324 % 1 === 0);(_memcpy($1323, 1736, $1324)|0);
 var $1325=$1303;
 HEAP32[(($1325)>>2)]=$1323;
 HEAP32[(($1302)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1301,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=468;break; } else { label=379;break; }
 case 468: 
 throw "Reached an unreachable!";
 case 469: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=471;break;
 case 470: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=471;break;
 case 471: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($1301);
 var $eh_lpad_body163$1=$lpad_phi$1;var $eh_lpad_body163$0=$lpad_phi$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 472: 
 var $1328=((($1289)-($1283))|0);
 var $1329=$1328>>2;
 var $1330=($1329>>>0)<536870911;
 if($1330){label=473;break;}else{var $1334=1073741823;label=474;break;}
 case 473: 
 var $1331=$1328>>1;
 var $1332=($1331>>>0)<($storemerge_i66775>>>0);
 var $storemerge_i66775_=($1332?$storemerge_i66775:$1331);
 var $1333=($storemerge_i66775_|0)==0;
 if($1333){var $1350=0;var $1349=$storemerge_i66775_;label=481;break;}else{var $1334=$storemerge_i66775_;label=474;break;}
 case 474: 
 var $1334;
 var $1335=$1334<<2;
 var $1336=($1335|0)==0;
 var $_size_i_i_i_i157=($1336?1:$1335);
 var $1337=_malloc($_size_i_i_i_i157);
 var $1338=($1337|0)==0;
 if($1338){label=475;break;}else{var $_lcssa_i_i_i_i159=$1337;label=480;break;}
 case 475: 
 var $1339=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1340=($1339|0)==0;
 if($1340){label=478;break;}else{label=476;break;}
 case 476: 
 var $1342=$1339;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1342]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=477;break; } else { label=374;break; }
 case 477: 
 var $1343=_malloc($_size_i_i_i_i157);
 var $1344=($1343|0)==0;
 if($1344){label=475;break;}else{var $_lcssa_i_i_i_i159=$1343;label=480;break;}
 case 478: 
 var $1346=___cxa_allocate_exception(4);
 var $1347=$1346;
 HEAP32[(($1347)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1346,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=479;break; } else { label=379;break; }
 case 479: 
 throw "Reached an unreachable!";
 case 480: 
 var $_lcssa_i_i_i_i159;
 var $1348=$_lcssa_i_i_i_i159;
 var $1350=$1348;var $1349=$1334;label=481;break;
 case 481: 
 var $1349;
 var $1350;
 var $1351=(($1350+($1285<<2))|0);
 var $1352=(($1350+($1349<<2))|0);
 var $_0=$1288;var $__v_i_i_sroa_15_0=$1351;label=482;break;
 case 482: 
 var $__v_i_i_sroa_15_0;
 var $_0;
 var $1354=($__v_i_i_sroa_15_0|0)==0;
 if($1354){label=484;break;}else{label=483;break;}
 case 483: 
 HEAP32[(($__v_i_i_sroa_15_0)>>2)]=0;
 label=484;break;
 case 484: 
 var $1356=(($__v_i_i_sroa_15_0+4)|0);
 var $1357=((($_0)-(1))|0);
 var $1358=($1357|0)==0;
 if($1358){label=485;break;}else{var $_0=$1357;var $__v_i_i_sroa_15_0=$1356;label=482;break;}
 case 485: 
 var $1359=$1350;
 var $1360=$index_sroa_0_2;
 assert($1284 % 1 === 0);(_memcpy($1359, $1360, $1284)|0);
 var $__v_i_i_sroa_15_1=$index_sroa_22_2;label=486;break;
 case 486: 
 var $__v_i_i_sroa_15_1;
 var $1362=($index_sroa_0_2|0)==($__v_i_i_sroa_15_1|0);
 if($1362){label=488;break;}else{label=487;break;}
 case 487: 
 var $1364=((($__v_i_i_sroa_15_1)-(4))|0);
 var $__v_i_i_sroa_15_1=$1364;label=486;break;
 case 488: 
 var $1365=($index_sroa_0_2|0)==0;
 if($1365){var $index_sroa_0_4=$1350;var $index_sroa_22_6=$1356;var $index_sroa_42_2=$1352;label=494;break;}else{label=489;break;}
 case 489: 
 _free($1360);
 var $index_sroa_0_4=$1350;var $index_sroa_22_6=$1356;var $index_sroa_42_2=$1352;label=494;break;
 case 490: 
 var $1368=($storemerge_i66775>>>0)<($1285>>>0);
 if($1368){label=491;break;}else{var $index_sroa_0_4=$index_sroa_0_2;var $index_sroa_22_6=$index_sroa_22_2;var $index_sroa_42_2=$index_sroa_42_0;label=494;break;}
 case 491: 
 var $1370=(($index_sroa_0_2+($storemerge_i66775<<2))|0);
 var $index_sroa_22_5=$index_sroa_22_2;label=492;break;
 case 492: 
 var $index_sroa_22_5;
 var $1372=($1370|0)==($index_sroa_22_5|0);
 if($1372){var $index_sroa_0_4=$index_sroa_0_2;var $index_sroa_22_6=$1370;var $index_sroa_42_2=$index_sroa_42_0;label=494;break;}else{label=493;break;}
 case 493: 
 var $1374=((($index_sroa_22_5)-(4))|0);
 var $index_sroa_22_5=$1374;label=492;break;
 case 494: 
 var $index_sroa_42_2;
 var $index_sroa_22_6;
 var $index_sroa_0_4;
 var $1375=HEAP32[(($968)>>2)];
 var $j5_0=0;var $storemerge770=$1375;label=495;break;
 case 495: 
 var $storemerge770;
 var $j5_0;
 HEAP32[(($1031)>>2)]=$storemerge770;
 var $1377=($j5_0|0)<($storemerge_i66775|0);
 if($1377){label=496;break;}else{var $RangeGridRows_4=$RangeGridRows_0;var $RangeGridCols_4=$RangeGridCols_0;var $index_sroa_0_5=$index_sroa_0_4;var $index_sroa_22_7=$index_sroa_22_6;var $index_sroa_42_3=$index_sroa_42_2;label=937;break;}
 case 496: 
 var $1379=(($index_sroa_0_4+($j5_0<<2))|0);
 HEAP32[(($1379)>>2)]=$storemerge770;
 var $1380=((($j5_0)+(1))|0);
 var $1381=HEAP32[(($1031)>>2)];
 var $1382=(($1381+28)|0);
 var $j5_0=$1380;var $storemerge770=$1382;label=495;break;
 case 497: 
 if($1099){var $storemerge_i167=0;label=501;break;}else{label=498;break;}
 case 498: 
 var $1384=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1385=$1384;
 var $1386=HEAP8[(($1385)>>0)];
 var $1387=$1386&1;
 var $1388=(($1387<<24)>>24)==0;
 if($1388){label=500;break;}else{label=499;break;}
 case 499: 
 var $1390=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1391=HEAP32[(($1390)>>2)];
 var $storemerge_i167=$1391;label=501;break;
 case 500: 
 var $1393=$1384;
 var $1394=(($1393+1)|0);
 var $storemerge_i167=$1394;label=501;break;
 case 501: 
 var $storemerge_i167;
 var $1396=HEAP8[(($storemerge_i167)>>0)];
 var $1397=(($1396<<24)>>24)==101;
 if($1397){var $_014_i171=$storemerge_i167;var $_05_i170=8880;label=502;break;}else{label=520;break;}
 case 502: 
 var $_05_i170;
 var $_014_i171;
 var $1398=(($_014_i171+1)|0);
 var $1399=(($_05_i170+1)|0);
 var $1400=HEAP8[(($1398)>>0)];
 var $1401=HEAP8[(($1399)>>0)];
 var $1402=(($1400<<24)>>24)!=(($1401<<24)>>24);
 var $1403=(($1400<<24)>>24)==0;
 var $or_cond_i172=$1402|$1403;
 if($or_cond_i172){label=503;break;}else{var $_014_i171=$1398;var $_05_i170=$1399;label=502;break;}
 case 503: 
 var $1404=(($1400<<24)>>24)==(($1401<<24)>>24);
 var $1405=($storemerge_i66775|0)>0;
 var $or_cond786=$1404&$1405;
 if($or_cond786){label=504;break;}else{label=520;break;}
 case 504: 
 var $1407=HEAP32[(($20)>>2)];
 var $1408=$1407&524288;
 var $1409=($1408|0)==0;
 if($1409){label=505;break;}else{label=507;break;}
 case 505: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8824,9032,702,10536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=506;break; } else { label=379;break; }
 case 506: 
 throw "Reached an unreachable!";
 case 507: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddEdgesERS2_j($ei,$m,$storemerge_i66775) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=508;break; } else { label=376;break; }
 case 508: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=509;break; } else { label=376;break; }
 case 509: 
 var $1415=HEAP32[(($951)>>2)];
 var $1416=($1415|0)==0;
 if($1416){label=511;break;}else{label=510;break;}
 case 510: 
 var $1418=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1415](50,2528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=511;break; } else { label=379;break; }
 case 511: 
 var $1420=$ea;
 var $1421=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$1420) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=512;break; } else { label=379;break; }
 case 512: 
 var $1423=($1421|0)==-1;
 if($1423){label=513;break;}else{label=514;break;}
 case 513: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 514: 
 var $1426=(($ea)|0);
 var $1427=HEAP32[(($1426)>>2)];
 var $1428=($1427|0)<0;
 if($1428){label=517;break;}else{label=515;break;}
 case 515: 
 var $1430=(($ea+4)|0);
 var $1431=HEAP32[(($1430)>>2)];
 var $1432=($1431|0)<0;
 if($1432){label=517;break;}else{label=516;break;}
 case 516: 
 var $1434=HEAP32[(($966)>>2)];
 var $1435=($1427|0)<($1434|0);
 var $1436=($1431|0)<($1434|0);
 var $or_cond787=$1435&$1436;
 if($or_cond787){label=518;break;}else{label=517;break;}
 case 517: 
 HEAP32[(($22)>>2)]=21;
 var $_0541=21;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 518: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,1744,46,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=519;break; } else { label=379;break; }
 case 519: 
 throw "Reached an unreachable!";
 case 520: 
 if($1099){var $storemerge_i181=0;label=524;break;}else{label=521;break;}
 case 521: 
 var $1440=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1441=$1440;
 var $1442=HEAP8[(($1441)>>0)];
 var $1443=$1442&1;
 var $1444=(($1443<<24)>>24)==0;
 if($1444){label=523;break;}else{label=522;break;}
 case 522: 
 var $1446=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1447=HEAP32[(($1446)>>2)];
 var $storemerge_i181=$1447;label=524;break;
 case 523: 
 var $1449=$1440;
 var $1450=(($1449+1)|0);
 var $storemerge_i181=$1450;label=524;break;
 case 524: 
 var $storemerge_i181;
 var $1452=HEAP8[(($storemerge_i181)>>0)];
 var $1453=(($1452<<24)>>24)==102;
 if($1453){var $_014_i185=$storemerge_i181;var $_05_i184=8784;label=525;break;}else{label=598;break;}
 case 525: 
 var $_05_i184;
 var $_014_i185;
 var $1454=(($_014_i185+1)|0);
 var $1455=(($_05_i184+1)|0);
 var $1456=HEAP8[(($1454)>>0)];
 var $1457=HEAP8[(($1455)>>0)];
 var $1458=(($1456<<24)>>24)!=(($1457<<24)>>24);
 var $1459=(($1456<<24)>>24)==0;
 var $or_cond_i186=$1458|$1459;
 if($or_cond_i186){label=526;break;}else{var $_014_i185=$1454;var $_05_i184=$1455;label=525;break;}
 case 526: 
 var $1460=(($1456<<24)>>24)==(($1457<<24)>>24);
 var $1461=($storemerge_i66775|0)>0;
 var $or_cond788=$1460&$1461;
 if($or_cond788){label=527;break;}else{label=598;break;}
 case 527: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($fi,$m,$storemerge_i66775) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=528;break; } else { label=376;break; }
 case 528: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge21=0;label=529;break; } else { label=376;break; }
 case 529: 
 var $storemerge21;
 var $1464=($storemerge21|0)<($storemerge_i66775|0);
 if($1464){label=530;break;}else{var $RangeGridRows_4=$RangeGridRows_0;var $RangeGridCols_4=$RangeGridCols_0;var $index_sroa_0_5=$index_sroa_0_2;var $index_sroa_22_7=$index_sroa_22_2;var $index_sroa_42_3=$index_sroa_42_0;label=937;break;}
 case 530: 
 var $1466=HEAP32[(($951)>>2)];
 var $1467=($1466|0)!=0;
 var $1468=(((($storemerge21|0))%(1000))&-1);
 var $1469=($1468|0)==0;
 var $or_cond790=$1467&$1469;
 if($or_cond790){label=531;break;}else{label=532;break;}
 case 531: 
 var $1471=((($storemerge21)*(50))&-1);
 var $1472=(((($1471|0))/(($storemerge_i66775|0)))&-1);
 var $1473=((($1472)+(50))|0);
 var $1474=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1466]($1473,2416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=532;break; } else { label=372;break; }
 case 532: 
 var $1476=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=533;break; } else { label=372;break; }
 case 533: 
 var $1478=($1476|0)==-1;
 if($1478){label=534;break;}else{label=535;break;}
 case 534: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 535: 
 var $1481=HEAP8[(($1024)>>0)];
 var $1482=(($1481<<24)>>24)==3;
 var $_pre732=HEAP32[(($20)>>2)];
 if($1482){label=538;break;}else{label=536;break;}
 case 536: 
 var $1484=$_pre732&2048;
 var $1485=($1484|0)==0;
 var $1486=$_pre732&4096;
 var $1487=($1486|0)==0;
 var $or_cond792=$1485&$1487;
 if($or_cond792){label=538;break;}else{label=537;break;}
 case 537: 
 HEAP32[(($22)>>2)]=17;
 var $_0541=17;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 538: 
 var $1489=$_pre732&128;
 var $1490=($1489|0)==0;
 if($1490){var $1496=$_pre732;label=540;break;}else{label=539;break;}
 case 539: 
 var $1492=HEAP32[(($1025)>>2)];
 var $1493=(($1492+28)|0);
 var $1494=HEAP32[(($1028)>>2)];
 HEAP32[(($1493)>>2)]=$1494;
 var $_pre733=HEAP32[(($20)>>2)];
 var $1496=$_pre733;label=540;break;
 case 540: 
 var $1496;
 var $1497=$1496&512;
 var $1498=($1497|0)==0;
 if($1498){label=543;break;}else{label=541;break;}
 case 541: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,79,10344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=542;break; } else { label=379;break; }
 case 542: 
 throw "Reached an unreachable!";
 case 543: 
 var $1501=$1496&256;
 var $1502=($1501|0)==0;
 if($1502){label=549;break;}else{label=544;break;}
 case 544: 
 var $1504=HEAP8[((34552)>>0)];
 var $1505=(($1504<<24)>>24)==0;
 if($1505){label=545;break;}else{label=547;break;}
 case 545: 
 var $1507=___cxa_guard_acquire(34552);
 var $1508=($1507|0)==0;
 if($1508){label=547;break;}else{label=546;break;}
 case 546: 

 label=547;break;
 case 547: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,75,1328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=548;break; } else { label=379;break; }
 case 548: 
 throw "Reached an unreachable!";
 case 549: 
 var $1512=$1496&4096;
 var $1513=($1512|0)==0;
 if($1513){var $storemerge22=0;label=556;break;}else{label=550;break;}
 case 550: 
 var $1515=HEAP8[((34536)>>0)];
 var $1516=(($1515<<24)>>24)==0;
 if($1516){label=551;break;}else{label=554;break;}
 case 551: 
 var $1518=___cxa_guard_acquire(34536);
 var $1519=($1518|0)==0;
 if($1519){label=554;break;}else{var $1520=31560;label=552;break;}
 case 552: 
 var $1520;
 var $1521=(($1520+8)|0);
 var $1522=($1521|0)==31568;
 if($1522){label=553;break;}else{var $1520=$1521;label=552;break;}
 case 553: 

 label=554;break;
 case 554: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,58,10328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=555;break; } else { label=379;break; }
 case 555: 
 throw "Reached an unreachable!";
 case 556: 
 var $storemerge22;
 var $1524=($storemerge22|0)<3;
 if($1524){label=557;break;}else{label=564;break;}
 case 557: 
 var $1526=(($fa+4+($storemerge22<<2))|0);
 var $1527=HEAP32[(($1526)>>2)];
 var $1528=($1527|0)<0;
 if($1528){label=559;break;}else{label=558;break;}
 case 558: 
 var $1530=HEAP32[(($966)>>2)];
 var $1531=($1527|0)<($1530|0);
 if($1531){label=560;break;}else{label=559;break;}
 case 559: 
 HEAP32[(($22)>>2)]=18;
 var $_0541=18;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 560: 
 var $1534=(($index_sroa_0_2+($1527<<2))|0);
 var $1535=HEAP32[(($1534)>>2)];
 var $1536=HEAP32[(($1025)>>2)];
 var $1537=($storemerge22|0)>-1;
 if($1537){label=563;break;}else{label=561;break;}
 case 561: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,173,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=562;break; } else { label=379;break; }
 case 562: 
 throw "Reached an unreachable!";
 case 563: 
 var $1540=(($1536+16+($storemerge22<<2))|0);
 HEAP32[(($1540)>>2)]=$1535;
 var $1541=((($storemerge22)+(1))|0);
 var $storemerge22=$1541;label=556;break;
 case 564: 
 var $1543=HEAP8[(($1024)>>0)];
 var $1544=($1543&255)>3;
 var $1545=HEAP32[(($1025)>>2)];
 if($1544){label=565;break;}else{label=566;break;}
 case 565: 
 var $1547=(($1545+28)|0);
 var $1548=HEAP32[(($1547)>>2)];
 var $1549=$1548|1048576;
 HEAP32[(($1547)>>2)]=$1549;
 label=566;break;
 case 566: 
 var $1550=$1545;
 var $1551=HEAP32[(($_pre_phi764)>>2)];
 var $storemerge23=0;label=567;break;
 case 567: 
 var $storemerge23;
 var $1553=HEAP32[(($873)>>2)];
 var $1554=($storemerge23|0)<($1553|0);
 if($1554){label=568;break;}else{label=569;break;}
 case 568: 
 var $1556=HEAP32[(($_pre_phi762)>>2)];
 var $1557=(($1556+((($storemerge23)*(44))&-1)+16)|0);
 var $1558=HEAP32[(($1557)>>2)];
 var $1559=(($1550+$1558)|0);
 var $1560=(($1551+((($storemerge23)*(44))&-1)+16)|0);
 var $1561=HEAP32[(($1560)>>2)];
 var $1562=(($1024+$1561)|0);
 var $1563=(($1551+((($storemerge23)*(44))&-1)+12)|0);
 var $1564=HEAP32[(($1563)>>2)];
 var $1565=((28712+($1564<<2))|0);
 var $1566=HEAP32[(($1565)>>2)];
 assert($1566 % 1 === 0);(_memcpy($1559, $1562, $1566)|0);
 var $1567=((($storemerge23)+(1))|0);
 var $storemerge23=$1567;label=567;break;
 case 569: 
 var $1569=(($1545+32)|0);
 HEAP32[(($1025)>>2)]=$1569;
 var $1570=HEAP8[(($1024)>>0)];
 var $1571=($1570&255)>3;
 if($1571){label=570;break;}else{var $storemerge24=0;var $1585=$1569;label=572;break;}
 case 570: 
 var $1573=HEAP32[(($1026)>>2)];
 var $1574=($1570&255);
 var $1575=((($1574)-(3))|0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($4,$m,$1575) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=571;break; } else { label=372;break; }
 case 571: 
 var $1577=$1573;
 var $1578=$1569;
 var $1579=((($1578)-($1577))|0);
 var $1580=$1579>>5;
 var $1581=HEAP32[(($1026)>>2)];
 var $1582=(($1581+($1580<<5))|0);
 HEAP32[(($1025)>>2)]=$1582;
 var $1583=HEAP32[(($20)>>2)];
 var $1584=$1583|131072;
 HEAP32[(($20)>>2)]=$1584;
 var $storemerge24=0;var $1585=$1582;label=572;break;
 case 572: 
 var $1585;
 var $storemerge24;
 var $1586=HEAP8[(($1024)>>0)];
 var $1587=($1586&255);
 var $1588=((($1587)-(3))|0);
 var $1589=($storemerge24|0)<($1588|0);
 if($1589){label=573;break;}else{label=597;break;}
 case 573: 
 var $1591=HEAP32[(($1027)>>2)];
 var $1592=(($index_sroa_0_2+($1591<<2))|0);
 var $1593=HEAP32[(($1592)>>2)];
 var $1594=(($1585+16)|0);
 HEAP32[(($1594)>>2)]=$1593;
 var $1595=((($storemerge24)+(2))|0);
 var $1596=(($fa+4+($1595<<2))|0);
 var $1597=((($storemerge24)+(1))|0);
 var $storemerge25=1;label=574;break;
 case 574: 
 var $storemerge25;
 var $1599=($storemerge25|0)<3;
 if($1599){label=575;break;}else{label=582;break;}
 case 575: 
 var $1601=HEAP32[(($1596)>>2)];
 var $1602=($1601|0)<0;
 if($1602){label=577;break;}else{label=576;break;}
 case 576: 
 var $1604=HEAP32[(($966)>>2)];
 var $1605=($1601|0)<($1604|0);
 if($1605){label=578;break;}else{label=577;break;}
 case 577: 
 HEAP32[(($22)>>2)]=18;
 var $_0541=18;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 578: 
 var $1608=((($1597)+($storemerge25))|0);
 var $1609=(($fa+4+($1608<<2))|0);
 var $1610=HEAP32[(($1609)>>2)];
 var $1611=(($index_sroa_0_2+($1610<<2))|0);
 var $1612=HEAP32[(($1611)>>2)];
 var $1613=HEAP32[(($1025)>>2)];
 var $1614=($storemerge25|0)>-1;
 if($1614){label=581;break;}else{label=579;break;}
 case 579: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,173,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=580;break; } else { label=379;break; }
 case 580: 
 throw "Reached an unreachable!";
 case 581: 
 var $1617=(($1613+16+($storemerge25<<2))|0);
 HEAP32[(($1617)>>2)]=$1612;
 var $1618=((($storemerge25)+(1))|0);
 var $storemerge25=$1618;label=574;break;
 case 582: 
 var $1620=HEAP32[(($20)>>2)];
 var $1621=$1620&512;
 var $1622=($1621|0)==0;
 if($1622){label=585;break;}else{label=583;break;}
 case 583: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,79,10344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=584;break; } else { label=379;break; }
 case 584: 
 throw "Reached an unreachable!";
 case 585: 
 var $1625=$1620&256;
 var $1626=($1625|0)==0;
 if($1626){label=591;break;}else{label=586;break;}
 case 586: 
 var $1628=HEAP8[((34552)>>0)];
 var $1629=(($1628<<24)>>24)==0;
 if($1629){label=587;break;}else{label=589;break;}
 case 587: 
 var $1631=___cxa_guard_acquire(34552);
 var $1632=($1631|0)==0;
 if($1632){label=589;break;}else{label=588;break;}
 case 588: 

 label=589;break;
 case 589: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,8624,75,1328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=590;break; } else { label=379;break; }
 case 590: 
 throw "Reached an unreachable!";
 case 591: 
 var $1636=HEAP32[(($1025)>>2)];
 var $1637=(($1636+28)|0);
 var $1638=HEAP32[(($1637)>>2)];
 var $1639=$1638|262144;
 HEAP32[(($1637)>>2)]=$1639;
 var $1640=HEAP8[(($1024)>>0)];
 var $1641=($1640&255);
 var $1642=((($1641)-(4))|0);
 var $1643=($storemerge24|0)<($1642|0);
 if($1643){label=592;break;}else{label=593;break;}
 case 592: 
 var $1645=$1638|1310720;
 HEAP32[(($1637)>>2)]=$1645;
 label=593;break;
 case 593: 
 var $1646=$1636;
 var $1647=HEAP32[(($_pre_phi764)>>2)];
 var $storemerge26=0;label=594;break;
 case 594: 
 var $storemerge26;
 var $1649=HEAP32[(($873)>>2)];
 var $1650=($storemerge26|0)<($1649|0);
 if($1650){label=595;break;}else{label=596;break;}
 case 595: 
 var $1652=HEAP32[(($_pre_phi762)>>2)];
 var $1653=(($1652+((($storemerge26)*(44))&-1)+16)|0);
 var $1654=HEAP32[(($1653)>>2)];
 var $1655=(($1646+$1654)|0);
 var $1656=(($1647+((($storemerge26)*(44))&-1)+16)|0);
 var $1657=HEAP32[(($1656)>>2)];
 var $1658=(($1024+$1657)|0);
 var $1659=(($1647+((($storemerge26)*(44))&-1)+12)|0);
 var $1660=HEAP32[(($1659)>>2)];
 var $1661=((28712+($1660<<2))|0);
 var $1662=HEAP32[(($1661)>>2)];
 assert($1662 % 1 === 0);(_memcpy($1655, $1658, $1662)|0);
 var $1663=((($storemerge26)+(1))|0);
 var $storemerge26=$1663;label=594;break;
 case 596: 
 var $1665=(($1636+32)|0);
 HEAP32[(($1025)>>2)]=$1665;
 var $storemerge24=$1597;var $1585=$1665;label=572;break;
 case 597: 
 var $1667=((($storemerge21)+(1))|0);
 var $storemerge21=$1667;label=529;break;
 case 598: 
 if($1099){var $storemerge_i230=0;label=602;break;}else{label=599;break;}
 case 599: 
 var $1669=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1670=$1669;
 var $1671=HEAP8[(($1670)>>0)];
 var $1672=$1671&1;
 var $1673=(($1672<<24)>>24)==0;
 if($1673){label=601;break;}else{label=600;break;}
 case 600: 
 var $1675=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1676=HEAP32[(($1675)>>2)];
 var $storemerge_i230=$1676;label=602;break;
 case 601: 
 var $1678=$1669;
 var $1679=(($1678+1)|0);
 var $storemerge_i230=$1679;label=602;break;
 case 602: 
 var $storemerge_i230;
 var $1681=HEAP8[(($storemerge_i230)>>0)];
 var $1682=(($1681<<24)>>24)==116;
 if($1682){var $_014_i234=$storemerge_i230;var $_05_i233=8712;label=603;break;}else{label=625;break;}
 case 603: 
 var $_05_i233;
 var $_014_i234;
 var $1683=(($_014_i234+1)|0);
 var $1684=(($_05_i233+1)|0);
 var $1685=HEAP8[(($1683)>>0)];
 var $1686=HEAP8[(($1684)>>0)];
 var $1687=(($1685<<24)>>24)!=(($1686<<24)>>24);
 var $1688=(($1685<<24)>>24)==0;
 var $or_cond_i235=$1687|$1688;
 if($or_cond_i235){label=604;break;}else{var $_014_i234=$1683;var $_05_i233=$1684;label=603;break;}
 case 604: 
 var $1689=(($1685<<24)>>24)==(($1686<<24)>>24);
 if($1689){label=605;break;}else{label=625;break;}
 case 605: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=606;break; } else { label=376;break; }
 case 606: 
 var $1692=HEAP32[(($967)>>2)];
 var $1693=HEAP32[(($968)>>2)];
 var $1694=$1692;
 var $1695=$1693;
 var $1696=((($1694)-($1695))|0);
 var $1697=(((($1696|0))/(28))&-1);
 var $storemerge11=0;label=607;break;
 case 607: 
 var $storemerge11;
 var $1699=($storemerge11|0)<($storemerge_i66775|0);
 if($1699){label=608;break;}else{var $RangeGridRows_4=$RangeGridRows_0;var $RangeGridCols_4=$RangeGridCols_0;var $index_sroa_0_5=$index_sroa_0_2;var $index_sroa_22_7=$index_sroa_22_2;var $index_sroa_42_3=$index_sroa_42_0;label=937;break;}
 case 608: 
 var $1701=HEAP32[(($951)>>2)];
 var $1702=($1701|0)!=0;
 var $1703=(((($storemerge11|0))%(1000))&-1);
 var $1704=($1703|0)==0;
 var $or_cond794=$1702&$1704;
 if($or_cond794){label=609;break;}else{label=610;break;}
 case 609: 
 var $1706=((($storemerge11)*(50))&-1);
 var $1707=(((($1706|0))/(($storemerge_i66775|0)))&-1);
 var $1708=((($1707)+(50))|0);
 var $1709=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1701]($1708,8600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=610;break; } else { label=371;break; }
 case 610: 
 var $1711=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$1020) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=611;break; } else { label=371;break; }
 case 611: 
 var $1713=($1711|0)==-1;
 if($1713){label=612;break;}else{var $storemerge12=0;var $remainder_0=0;label=613;break;}
 case 612: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 613: 
 var $remainder_0;
 var $storemerge12;
 var $1716=HEAP32[(($1021)>>2)];
 var $1717=((($1716)-(2))|0);
 var $1718=($storemerge12|0)<($1717|0);
 if($1718){label=614;break;}else{label=624;break;}
 case 614: 
 var $1720=HEAP32[(($951)>>2)];
 var $1721=($1720|0)!=0;
 var $1722=(((($storemerge12|0))%(1000))&-1);
 var $1723=($1722|0)==0;
 var $or_cond796=$1721&$1723;
 if($or_cond796){label=615;break;}else{label=616;break;}
 case 615: 
 var $1725=((($storemerge12)*(50))&-1);
 var $1726=(((($1725|0))/(($1716|0)))&-1);
 var $1727=((($1726)+(50))|0);
 var $1728=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1720]($1727,8600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=616;break; } else { label=370;break; }
 case 616: 
 var $1730=HEAP32[(($1022)>>2)];
 var $1731=(($1730+($storemerge12<<2))|0);
 var $1732=HEAP32[(($1731)>>2)];
 var $1733=($1732|0)>=0;
 var $1734=($1732|0)<($1697|0);
 var $or_cond797=$1733&$1734;
 if($or_cond797){label=618;break;}else{label=617;break;}
 case 617: 
 HEAP32[(($22)>>2)]=18;
 var $_0541=18;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 618: 
 var $1737=((($storemerge12)+(2))|0);
 var $1738=(($1730+($1737<<2))|0);
 var $1739=HEAP32[(($1738)>>2)];
 var $1740=($1739|0)==-1;
 if($1740){label=619;break;}else{label=620;break;}
 case 619: 
 var $1742=$1737&1;
 var $1743=($1742|0)==0;
 var $_798=($1743?1:0);
 var $remainder_1=$_798;var $k12_0=$1737;label=623;break;
 case 620: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($5,$m,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=621;break; } else { label=370;break; }
 case 621: 
 var $1746=HEAP32[(($1023)>>2)];
 var $1747=HEAP32[(($1022)>>2)];
 var $1748=(($1747+($storemerge12<<2))|0);
 var $1749=HEAP32[(($1748)>>2)];
 var $1750=(($index_sroa_0_2+($1749<<2))|0);
 var $1751=HEAP32[(($1750)>>2)];
 var $1752=((($1746)-(32)+16)|0);
 HEAP32[(($1752)>>2)]=$1751;
 var $1753=HEAP32[(($1022)>>2)];
 var $1754=((($storemerge12)+(1))|0);
 var $1755=(($1753+($1754<<2))|0);
 var $1756=HEAP32[(($1755)>>2)];
 var $1757=(($index_sroa_0_2+($1756<<2))|0);
 var $1758=HEAP32[(($1757)>>2)];
 var $1759=((($1746)-(32)+20)|0);
 HEAP32[(($1759)>>2)]=$1758;
 var $1760=HEAP32[(($1022)>>2)];
 var $1761=(($1760+($1737<<2))|0);
 var $1762=HEAP32[(($1761)>>2)];
 var $1763=(($index_sroa_0_2+($1762<<2))|0);
 var $1764=HEAP32[(($1763)>>2)];
 var $1765=((($1746)-(32)+24)|0);
 HEAP32[(($1765)>>2)]=$1764;
 var $1766=((($storemerge12)+($remainder_0))|0);
 var $1767=$1766&1;
 var $1768=($1767|0)==0;
 if($1768){var $remainder_1=$remainder_0;var $k12_0=$storemerge12;label=623;break;}else{label=622;break;}
 case 622: 
 HEAP32[(($1752)>>2)]=$1758;
 HEAP32[(($1759)>>2)]=$1751;
 var $remainder_1=$remainder_0;var $k12_0=$storemerge12;label=623;break;
 case 623: 
 var $k12_0;
 var $remainder_1;
 var $1771=((($k12_0)+(1))|0);
 var $storemerge12=$1771;var $remainder_0=$remainder_1;label=613;break;
 case 624: 
 var $1773=((($storemerge11)+(1))|0);
 var $storemerge11=$1773;label=607;break;
 case 625: 
 if($1099){var $storemerge_i251=0;label=629;break;}else{label=626;break;}
 case 626: 
 var $1775=(($1092+((($storemerge1)*(28))&-1))|0);
 var $1776=$1775;
 var $1777=HEAP8[(($1776)>>0)];
 var $1778=$1777&1;
 var $1779=(($1778<<24)>>24)==0;
 if($1779){label=628;break;}else{label=627;break;}
 case 627: 
 var $1781=(($1092+((($storemerge1)*(28))&-1)+8)|0);
 var $1782=HEAP32[(($1781)>>2)];
 var $storemerge_i251=$1782;label=629;break;
 case 628: 
 var $1784=$1775;
 var $1785=(($1784+1)|0);
 var $storemerge_i251=$1785;label=629;break;
 case 629: 
 var $storemerge_i251;
 var $1787=HEAP8[(($storemerge_i251)>>0)];
 var $1788=(($1787<<24)>>24)==114;
 if($1788){var $_014_i255=$storemerge_i251;var $_05_i254=8568;label=630;break;}else{label=929;break;}
 case 630: 
 var $_05_i254;
 var $_014_i255;
 var $1789=(($_014_i255+1)|0);
 var $1790=(($_05_i254+1)|0);
 var $1791=HEAP8[(($1789)>>0)];
 var $1792=HEAP8[(($1790)>>0)];
 var $1793=(($1791<<24)>>24)!=(($1792<<24)>>24);
 var $1794=(($1791<<24)>>24)==0;
 var $or_cond_i256=$1793|$1794;
 if($or_cond_i256){label=631;break;}else{var $_014_i255=$1789;var $_05_i254=$1790;label=630;break;}
 case 631: 
 var $1795=(($1791<<24)>>24)==(($1792<<24)>>24);
 if($1795){label=632;break;}else{label=929;break;}
 case 632: 
 var $1797=($RangeGridCols_0|0)==0;
 if($1797){var $storemerge15=0;var $RangeGridRows_1=$RangeGridRows_0;var $RangeGridCols_1=0;label=633;break;}else{var $RangeGridRows_3=$RangeGridRows_0;var $RangeGridCols_3=$RangeGridCols_0;label=848;break;}
 case 633: 
 var $RangeGridCols_1;
 var $RangeGridRows_1;
 var $storemerge15;
 var $1798=HEAP32[(($27)>>2)];
 var $1799=HEAP32[(($26)>>2)];
 var $1800=$1798;
 var $1801=$1799;
 var $1802=((($1800)-($1801))|0);
 var $1803=(((($1802|0))/(12))&-1);
 var $1804=($storemerge15|0)<($1803|0);
 if($1804){label=634;break;}else{var $RangeGridRows_3=$RangeGridRows_1;var $RangeGridCols_3=$RangeGridCols_1;label=848;break;}
 case 634: 
 var $1805=_strlen(8496);
 var $1806=($1805>>>0)>4294967279;
 if($1806){label=635;break;}else{label=637;break;}
 case 635: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=636;break; } else { label=379;break; }
 case 636: 
 throw "Reached an unreachable!";
 case 637: 
 var $1809=($1805>>>0)<11;
 if($1809){label=638;break;}else{label=639;break;}
 case 638: 
 var $1811=$1805<<1;
 var $1812=(($1811)&255);
 HEAP8[(($973)>>0)]=$1812;
 var $__p_0_i=$975;label=646;break;
 case 639: 
 var $1813=((($1805)+(16))|0);
 var $1814=$1813&-16;
 var $1815=($1814|0)==0;
 var $_size_i=($1815?1:$1814);
 var $1816=_malloc($_size_i);
 var $1817=($1816|0)==0;
 if($1817){label=640;break;}else{var $_lcssa_i265=$1816;label=645;break;}
 case 640: 
 var $1818=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1819=($1818|0)==0;
 if($1819){label=643;break;}else{label=641;break;}
 case 641: 
 var $1821=$1818;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1821]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=642;break; } else { label=366;break; }
 case 642: 
 var $1822=_malloc($_size_i);
 var $1823=($1822|0)==0;
 if($1823){label=640;break;}else{var $_lcssa_i265=$1822;label=645;break;}
 case 643: 
 var $1825=___cxa_allocate_exception(4);
 var $1826=$1825;
 HEAP32[(($1826)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1825,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=644;break; } else { label=379;break; }
 case 644: 
 throw "Reached an unreachable!";
 case 645: 
 var $_lcssa_i265;
 HEAP32[(($985)>>2)]=$_lcssa_i265;
 var $1827=$1814|1;
 HEAP32[(($1019)>>2)]=$1827;
 HEAP32[(($998)>>2)]=$1805;
 var $__p_0_i=$_lcssa_i265;label=646;break;
 case 646: 
 var $__p_0_i;
 assert($1805 % 1 === 0);(_memcpy($__p_0_i, 8496, $1805)|0);
 var $1828=(($__p_0_i+$1805)|0);
 HEAP8[(($1828)>>0)]=0;
 var $1829=_strlen(8408);
 var $1830=($1829>>>0)>4294967279;
 if($1830){label=647;break;}else{label=649;break;}
 case 647: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=648;break; } else { label=744;break; }
 case 648: 
 throw "Reached an unreachable!";
 case 649: 
 var $1833=($1829>>>0)<11;
 if($1833){label=650;break;}else{label=651;break;}
 case 650: 
 var $1835=$1829<<1;
 var $1836=(($1835)&255);
 HEAP8[(($976)>>0)]=$1836;
 var $__p_0_i271=$978;label=658;break;
 case 651: 
 var $1837=((($1829)+(16))|0);
 var $1838=$1837&-16;
 var $1839=($1838|0)==0;
 var $_size_i275=($1839?1:$1838);
 var $1840=_malloc($_size_i275);
 var $1841=($1840|0)==0;
 if($1841){label=652;break;}else{var $_lcssa_i277=$1840;label=657;break;}
 case 652: 
 var $1842=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1843=($1842|0)==0;
 if($1843){label=655;break;}else{label=653;break;}
 case 653: 
 var $1845=$1842;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1845]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=654;break; } else { label=743;break; }
 case 654: 
 var $1846=_malloc($_size_i275);
 var $1847=($1846|0)==0;
 if($1847){label=652;break;}else{var $_lcssa_i277=$1846;label=657;break;}
 case 655: 
 var $1849=___cxa_allocate_exception(4);
 var $1850=$1849;
 HEAP32[(($1850)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1849,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=656;break; } else { label=744;break; }
 case 656: 
 throw "Reached an unreachable!";
 case 657: 
 var $_lcssa_i277;
 HEAP32[(($1003)>>2)]=$_lcssa_i277;
 var $1851=$1838|1;
 HEAP32[(($1018)>>2)]=$1851;
 HEAP32[(($1011)>>2)]=$1829;
 var $__p_0_i271=$_lcssa_i277;label=658;break;
 case 658: 
 var $__p_0_i271;
 assert($1829 % 1 === 0);(_memcpy($__p_0_i271, 8408, $1829)|0);
 var $1853=(($__p_0_i271+$1829)|0);
 HEAP8[(($1853)>>0)]=0;
 var $1854=HEAP32[(($26)>>2)];
 var $1855=(($1854+((($storemerge15)*(12))&-1))|0);
 var $storemerge16=0;label=659;break;
 case 659: 
 var $storemerge16;
 var $1857=($storemerge16>>>0)<3;
 if($1857){label=660;break;}else{var $storemerge17=0;label=661;break;}
 case 660: 
 var $1859=(($979+($storemerge16<<2))|0);
 HEAP32[(($1859)>>2)]=0;
 var $1860=((($storemerge16)+(1))|0);
 var $storemerge16=$1860;label=659;break;
 case 661: 
 var $storemerge17;
 var $1861=($storemerge17>>>0)<3;
 if($1861){label=662;break;}else{label=663;break;}
 case 662: 
 var $1863=(($980+($storemerge17<<2))|0);
 HEAP32[(($1863)>>2)]=0;
 var $1864=((($storemerge17)+(1))|0);
 var $storemerge17=$1864;label=661;break;
 case 663: 
 var $1865=HEAP8[(($973)>>0)];
 var $1866=$1865&1;
 var $1867=(($1866<<24)>>24)==0;
 if($1867){label=665;break;}else{label=664;break;}
 case 664: 
 var $1869=HEAP32[(($998)>>2)];
 var $1873=$1869;label=666;break;
 case 665: 
 var $1871=($1865&255);
 var $1872=$1871>>>1;
 var $1873=$1872;label=666;break;
 case 666: 
 var $1873;
 var $1874=$1855;
 var $1875=HEAP8[(($1874)>>0)];
 var $1876=$1875&1;
 var $1877=(($1876<<24)>>24)==0;
 if($1877){label=668;break;}else{label=667;break;}
 case 667: 
 var $1879=(($1854+((($storemerge15)*(12))&-1)+4)|0);
 var $1880=HEAP32[(($1879)>>2)];
 var $1881=(($1854+((($storemerge15)*(12))&-1)+8)|0);
 var $1882=HEAP32[(($1881)>>2)];
 var $1889=$1882;var $1888=$1880;label=669;break;
 case 668: 
 var $1884=($1875&255);
 var $1885=$1884>>>1;
 var $1886=$1855;
 var $1887=(($1886+1)|0);
 var $1889=$1887;var $1888=$1885;label=669;break;
 case 669: 
 var $1888;
 var $1889;
 var $1890=($1888>>>0)<($1873>>>0);
 var $1891=($1890?$1888:$1873);
 var $1892=($1891>>>0)>4294967279;
 if($1892){label=670;break;}else{label=672;break;}
 case 670: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=671;break; } else { label=750;break; }
 case 671: 
 throw "Reached an unreachable!";
 case 672: 
 var $1895=($1891>>>0)<11;
 if($1895){label=673;break;}else{label=674;break;}
 case 673: 
 var $1897=$1891<<1;
 var $1898=(($1897)&255);
 HEAP8[(($981)>>0)]=$1898;
 var $__p_0_i283=$983;label=681;break;
 case 674: 
 var $1899=((($1891)+(16))|0);
 var $1900=$1899&-16;
 var $1901=($1900|0)==0;
 var $_size_i287=($1901?1:$1900);
 var $1902=_malloc($_size_i287);
 var $1903=($1902|0)==0;
 if($1903){label=675;break;}else{var $_lcssa_i289=$1902;label=680;break;}
 case 675: 
 var $1904=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $1905=($1904|0)==0;
 if($1905){label=678;break;}else{label=676;break;}
 case 676: 
 var $1907=$1904;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1907]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=677;break; } else { label=746;break; }
 case 677: 
 var $1908=_malloc($_size_i287);
 var $1909=($1908|0)==0;
 if($1909){label=675;break;}else{var $_lcssa_i289=$1908;label=680;break;}
 case 678: 
 var $1911=___cxa_allocate_exception(4);
 var $1912=$1911;
 HEAP32[(($1912)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1911,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=679;break; } else { label=750;break; }
 case 679: 
 throw "Reached an unreachable!";
 case 680: 
 var $_lcssa_i289;
 HEAP32[(($984)>>2)]=$_lcssa_i289;
 var $1913=$1900|1;
 HEAP32[(($1017)>>2)]=$1913;
 HEAP32[(($1016)>>2)]=$1891;
 var $__p_0_i283=$_lcssa_i289;label=681;break;
 case 681: 
 var $__p_0_i283;
 assert($1891 % 1 === 0);(_memcpy($__p_0_i283, $1889, $1891)|0);
 var $1915=(($__p_0_i283+$1891)|0);
 HEAP8[(($1915)>>0)]=0;
 var $1916=HEAP8[(($973)>>0)];
 var $1917=$1916&1;
 var $1918=(($1917<<24)>>24)==0;
 if($1918){label=683;break;}else{label=682;break;}
 case 682: 
 var $1920=HEAP32[(($998)>>2)];
 var $1924=$1920;label=684;break;
 case 683: 
 var $1922=($1916&255);
 var $1923=$1922>>>1;
 var $1924=$1923;label=684;break;
 case 684: 
 var $1924;
 var $1925=HEAP8[(($981)>>0)];
 var $1926=$1925&1;
 var $1927=(($1926<<24)>>24)==0;
 if($1927){label=686;break;}else{label=685;break;}
 case 685: 
 var $1929=HEAP32[(($1016)>>2)];
 var $1933=$1929;label=687;break;
 case 686: 
 var $1931=($1925&255);
 var $1932=$1931>>>1;
 var $1933=$1932;label=687;break;
 case 687: 
 var $1933;
 var $1934=($1924|0)==($1933|0);
 if($1934){label=688;break;}else{var $1958=0;label=696;break;}
 case 688: 
 var $1935=HEAP32[(($985)>>2)];
 var $_799=($1918?$975:$1935);
 var $1936=HEAP32[(($984)>>2)];
 var $1937=($1927?$983:$1936);
 if($1918){var $__lhs_sz_i102_0=$1924;var $__lp_i103_0=$_799;var $__rp_i104_0=$1937;label=693;break;}else{label=689;break;}
 case 689: 
 var $1939=($1924|0)==0;
 if($1939){var $1958=1;label=696;break;}else{var $_02_i_i=$1924;var $l_03_i_i=$_799;var $r_04_i_i=$1937;label=690;break;}
 case 690: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $1940=HEAP8[(($l_03_i_i)>>0)];
 var $1941=HEAP8[(($r_04_i_i)>>0)];
 var $1942=(($1940<<24)>>24)==(($1941<<24)>>24);
 if($1942){label=691;break;}else{label=692;break;}
 case 691: 
 var $1944=((($_02_i_i)-(1))|0);
 var $1945=(($l_03_i_i+1)|0);
 var $1946=(($r_04_i_i+1)|0);
 var $1947=($1944|0)==0;
 if($1947){var $1958=1;label=696;break;}else{var $_02_i_i=$1944;var $l_03_i_i=$1945;var $r_04_i_i=$1946;label=690;break;}
 case 692: 
 var $phitmp769=(($1940<<24)>>24)==(($1941<<24)>>24);
 var $1958=$phitmp769;label=696;break;
 case 693: 
 var $__rp_i104_0;
 var $__lp_i103_0;
 var $__lhs_sz_i102_0;
 var $1949=($__lhs_sz_i102_0|0)==0;
 if($1949){var $1958=1;label=696;break;}else{label=694;break;}
 case 694: 
 var $1951=HEAP8[(($__lp_i103_0)>>0)];
 var $1952=HEAP8[(($__rp_i104_0)>>0)];
 var $1953=(($1951<<24)>>24)==(($1952<<24)>>24);
 if($1953){label=695;break;}else{var $1958=0;label=696;break;}
 case 695: 
 var $1955=((($__lhs_sz_i102_0)-(1))|0);
 var $1956=(($__lp_i103_0+1)|0);
 var $1957=(($__rp_i104_0+1)|0);
 var $__lhs_sz_i102_0=$1955;var $__lp_i103_0=$1956;var $__rp_i104_0=$1957;label=693;break;
 case 696: 
 var $1958;
 if($1927){label=698;break;}else{label=697;break;}
 case 697: 
 var $1960=HEAP32[(($984)>>2)];
 _free($1960);
 label=698;break;
 case 698: 
 if($1958){label=699;break;}else{var $RangeGridCols_2=$RangeGridCols_1;var $2078=$1916;label=755;break;}
 case 699: 
 if($1918){label=701;break;}else{label=700;break;}
 case 700: 
 var $1963=HEAP32[(($998)>>2)];
 var $1967=$1963;label=702;break;
 case 701: 
 var $1965=($1916&255);
 var $1966=$1965>>>1;
 var $1967=$1966;label=702;break;
 case 702: 
 var $1967;
 var $1968=((($1967)+(1))|0);
 var $1969=HEAP8[(($1874)>>0)];
 var $1970=$1969&1;
 var $1971=(($1970<<24)>>24)==0;
 if($1971){label=704;break;}else{label=703;break;}
 case 703: 
 var $1973=(($1854+((($storemerge15)*(12))&-1)+4)|0);
 var $1974=HEAP32[(($1973)>>2)];
 var $1978=$1974;label=705;break;
 case 704: 
 var $1976=($1969&255);
 var $1977=$1976>>>1;
 var $1978=$1977;label=705;break;
 case 705: 
 var $1978;
 var $1979=($1978>>>0)<($1968>>>0);
 if($1979){label=706;break;}else{label=708;break;}
 case 706: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=707;break; } else { label=750;break; }
 case 707: 
 throw "Reached an unreachable!";
 case 708: 
 if($1971){label=710;break;}else{label=709;break;}
 case 709: 
 var $1983=(($1854+((($storemerge15)*(12))&-1)+8)|0);
 var $1984=HEAP32[(($1983)>>2)];
 var $1988=$1984;label=711;break;
 case 710: 
 var $1986=$1855;
 var $1987=(($1986+1)|0);
 var $1988=$1987;label=711;break;
 case 711: 
 var $1988;
 var $1989=(($1988+$1968)|0);
 var $1990=((($1978)-($1968))|0);
 var $1991=($1990>>>0)>4294967279;
 if($1991){label=712;break;}else{label=714;break;}
 case 712: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=713;break; } else { label=750;break; }
 case 713: 
 throw "Reached an unreachable!";
 case 714: 
 var $1994=($1990>>>0)<11;
 if($1994){label=715;break;}else{label=716;break;}
 case 715: 
 var $1996=$1990<<1;
 var $1997=(($1996)&255);
 HEAP8[(($986)>>0)]=$1997;
 var $__p_0_i299=$988;label=723;break;
 case 716: 
 var $1998=((($1990)+(16))|0);
 var $1999=$1998&-16;
 var $2000=($1999|0)==0;
 var $_size_i303=($2000?1:$1999);
 var $2001=_malloc($_size_i303);
 var $2002=($2001|0)==0;
 if($2002){label=717;break;}else{var $_lcssa_i305=$2001;label=722;break;}
 case 717: 
 var $2003=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2004=($2003|0)==0;
 if($2004){label=720;break;}else{label=718;break;}
 case 718: 
 var $2006=$2003;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2006]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=719;break; } else { label=747;break; }
 case 719: 
 var $2007=_malloc($_size_i303);
 var $2008=($2007|0)==0;
 if($2008){label=717;break;}else{var $_lcssa_i305=$2007;label=722;break;}
 case 720: 
 var $2010=___cxa_allocate_exception(4);
 var $2011=$2010;
 HEAP32[(($2011)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2010,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=721;break; } else { label=750;break; }
 case 721: 
 throw "Reached an unreachable!";
 case 722: 
 var $_lcssa_i305;
 HEAP32[(($994)>>2)]=$_lcssa_i305;
 var $2012=$1999|1;
 HEAP32[(($996)>>2)]=$2012;
 HEAP32[(($997)>>2)]=$1990;
 var $__p_0_i299=$_lcssa_i305;label=723;break;
 case 723: 
 var $__p_0_i299;
 assert($1990 % 1 === 0);(_memcpy($__p_0_i299, $1989, $1990)|0);
 var $2014=(($__p_0_i299+$1990)|0);
 HEAP8[(($2014)>>0)]=0;
 var $2015=HEAP8[(($989)>>0)];
 var $2016=$2015&1;
 var $2017=(($2016<<24)>>24)==0;
 if($2017){label=725;break;}else{label=724;break;}
 case 724: 
 var $2019=HEAP32[(($993)>>2)];
 HEAP8[(($2019)>>0)]=0;
 HEAP32[(($995)>>2)]=0;
 label=726;break;
 case 725: 
 HEAP8[(($991)>>0)]=0;
 HEAP8[(($989)>>0)]=0;
 label=726;break;
 case 726: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($bufstr,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=728;break; } else { label=727;break; }
 case 727: 
 var $2022$0 = ___cxa_find_matching_catch(0); var $2022$1 = tempRet0;
 var $2023=$2022$0;
 ___clang_call_terminate($2023);
 throw "Reached an unreachable!";
 case 728: 
 assert(12 % 1 === 0);HEAP32[(($989)>>2)]=HEAP32[(($986)>>2)];HEAP32[((($989)+(4))>>2)]=HEAP32[((($986)+(4))>>2)];HEAP32[((($989)+(8))>>2)]=HEAP32[((($986)+(8))>>2)];
 var $storemerge19=0;label=729;break;
 case 729: 
 var $storemerge19;
 var $2025=($storemerge19>>>0)<3;
 if($2025){label=730;break;}else{label=731;break;}
 case 730: 
 var $2027=(($992+($storemerge19<<2))|0);
 HEAP32[(($2027)>>2)]=0;
 var $2028=((($storemerge19)+(1))|0);
 var $storemerge19=$2028;label=729;break;
 case 731: 
 var $2029=HEAP8[(($986)>>0)];
 var $2030=$2029&1;
 var $2031=(($2030<<24)>>24)==0;
 if($2031){label=733;break;}else{label=732;break;}
 case 732: 
 var $2033=HEAP32[(($994)>>2)];
 _free($2033);
 label=733;break;
 case 733: 
 var $2034=HEAP8[(($989)>>0)];
 var $2035=$2034&1;
 var $2036=(($2035<<24)>>24)==0;
 var $2037=HEAP32[(($993)>>2)];
 var $_800=($2036?$991:$2037);
 var $_0_i=$_800;label=734;break;
 case 734: 
 var $_0_i;
 var $2038=HEAP8[(($_0_i)>>0)];
 var $2039=(($2038<<24)>>24)==32;
 if($2039){label=735;break;}else{label=736;break;}
 case 735: 
 var $2040=(($_0_i+1)|0);
 var $_0_i=$2040;label=734;break;
 case 736: 
 var $2041=(($2038<<24)>>24);
 var $2042=((($2041)-(9))|0);
 var $phitmp507=($2042>>>0)>4;
 var $2043=(($_0_i+1)|0);
 if($phitmp507){label=737;break;}else{var $_0_i=$2043;label=734;break;}
 case 737: 
 if(($2041|0)==45){ label=738;break;}else if(($2041|0)==43){ var $neg_0_i=0;label=739;break;}else{var $neg_1_ph_i=0;var $_1_ph_i=$_0_i;var $2047=$2038;label=740;break;}
 case 738: 
 var $neg_0_i=1;label=739;break;
 case 739: 
 var $neg_0_i;
 var $_pre_i=HEAP8[(($2043)>>0)];
 var $neg_1_ph_i=$neg_0_i;var $_1_ph_i=$2043;var $2047=$_pre_i;label=740;break;
 case 740: 
 var $2047;
 var $_1_ph_i;
 var $neg_1_ph_i;
 var $2048=(($2047<<24)>>24);
 var $2049=((($2048)-(48))|0);
 var $2050=($2049>>>0)<10;
 if($2050){var $_12_i=$_1_ph_i;var $n_03_i=0;var $2051=$2047;label=741;break;}else{var $n_0_lcssa_i=0;label=742;break;}
 case 741: 
 var $2051;
 var $n_03_i;
 var $_12_i;
 var $2052=((($n_03_i)*(10))&-1);
 var $2053=(($_12_i+1)|0);
 var $2054=(($2051<<24)>>24);
 var $_neg1_i=((($2052)+(48))|0);
 var $2055=((($_neg1_i)-($2054))|0);
 var $2056=HEAP8[(($2053)>>0)];
 var $2057=(($2056<<24)>>24);
 var $2058=((($2057)-(48))|0);
 var $2059=($2058>>>0)<10;
 if($2059){var $_12_i=$2053;var $n_03_i=$2055;var $2051=$2056;label=741;break;}else{var $n_0_lcssa_i=$2055;label=742;break;}
 case 742: 
 var $n_0_lcssa_i;
 var $2060=(((-$n_0_lcssa_i))|0);
 var $2061=($neg_1_ph_i|0)!=0;
 var $2062=($2061?$n_0_lcssa_i:$2060);
 var $_pre730=HEAP8[(($973)>>0)];
 var $RangeGridCols_2=$2062;var $2078=$_pre730;label=755;break;
 case 743: 
 var $lpad_loopexit599$0 = ___cxa_find_matching_catch(); var $lpad_loopexit599$1 = tempRet0;
 var $lpad_phi601$1=$lpad_loopexit599$1;var $lpad_phi601$0=$lpad_loopexit599$0;label=745;break;
 case 744: 
 var $lpad_nonloopexit624$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit624$1 = tempRet0;
 var $lpad_phi601$1=$lpad_nonloopexit624$1;var $lpad_phi601$0=$lpad_nonloopexit624$0;label=745;break;
 case 745: 
 var $lpad_phi601$0;
 var $lpad_phi601$1;
 var $2063=$lpad_phi601$0;
 var $2064=$lpad_phi601$1;
 var $_0534=$2064;var $_0535=$2063;label=846;break;
 case 746: 
 var $lpad_loopexit604$0 = ___cxa_find_matching_catch(); var $lpad_loopexit604$1 = tempRet0;
 var $lpad_phi606$1=$lpad_loopexit604$1;var $lpad_phi606$0=$lpad_loopexit604$0;label=751;break;
 case 747: 
 var $lpad_loopexit608$0 = ___cxa_find_matching_catch(); var $lpad_loopexit608$1 = tempRet0;
 var $lpad_phi606$1=$lpad_loopexit608$1;var $lpad_phi606$0=$lpad_loopexit608$0;label=751;break;
 case 748: 
 var $lpad_loopexit611$0 = ___cxa_find_matching_catch(); var $lpad_loopexit611$1 = tempRet0;
 var $lpad_phi606$1=$lpad_loopexit611$1;var $lpad_phi606$0=$lpad_loopexit611$0;label=751;break;
 case 749: 
 var $lpad_loopexit615$0 = ___cxa_find_matching_catch(); var $lpad_loopexit615$1 = tempRet0;
 var $lpad_phi606$1=$lpad_loopexit615$1;var $lpad_phi606$0=$lpad_loopexit615$0;label=751;break;
 case 750: 
 var $lpad_nonloopexit616$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit616$1 = tempRet0;
 var $lpad_phi606$1=$lpad_nonloopexit616$1;var $lpad_phi606$0=$lpad_nonloopexit616$0;label=751;break;
 case 751: 
 var $lpad_phi606$0;
 var $lpad_phi606$1;
 var $2065=$lpad_phi606$0;
 var $2066=$lpad_phi606$1;
 var $2067=HEAP8[(($1012)>>0)];
 var $2068=$2067&1;
 var $2069=(($2068<<24)>>24)==0;
 if($2069){label=753;break;}else{label=752;break;}
 case 752: 
 var $2071=HEAP32[(($1013)>>2)];
 _free($2071);
 label=753;break;
 case 753: 
 var $2072=HEAP8[(($989)>>0)];
 var $2073=$2072&1;
 var $2074=(($2073<<24)>>24)==0;
 if($2074){label=844;break;}else{label=754;break;}
 case 754: 
 var $2076=HEAP32[(($993)>>2)];
 _free($2076);
 label=844;break;
 case 755: 
 var $2078;
 var $RangeGridCols_2;
 var $2079=$2078&1;
 var $2080=(($2079<<24)>>24)==0;
 if($2080){label=757;break;}else{label=756;break;}
 case 756: 
 var $2082=HEAP32[(($998)>>2)];
 var $2086=$2082;label=758;break;
 case 757: 
 var $2084=($2078&255);
 var $2085=$2084>>>1;
 var $2086=$2085;label=758;break;
 case 758: 
 var $2086;
 var $2087=HEAP8[(($1874)>>0)];
 var $2088=$2087&1;
 var $2089=(($2088<<24)>>24)==0;
 if($2089){label=760;break;}else{label=759;break;}
 case 759: 
 var $2091=(($1854+((($storemerge15)*(12))&-1)+4)|0);
 var $2092=HEAP32[(($2091)>>2)];
 var $2093=(($1854+((($storemerge15)*(12))&-1)+8)|0);
 var $2094=HEAP32[(($2093)>>2)];
 var $2101=$2094;var $2100=$2092;label=761;break;
 case 760: 
 var $2096=($2087&255);
 var $2097=$2096>>>1;
 var $2098=$1855;
 var $2099=(($2098+1)|0);
 var $2101=$2099;var $2100=$2097;label=761;break;
 case 761: 
 var $2100;
 var $2101;
 var $2102=($2100>>>0)<($2086>>>0);
 var $2103=($2102?$2100:$2086);
 var $2104=($2103>>>0)>4294967279;
 if($2104){label=762;break;}else{label=764;break;}
 case 762: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=763;break; } else { label=750;break; }
 case 763: 
 throw "Reached an unreachable!";
 case 764: 
 var $2107=($2103>>>0)<11;
 if($2107){label=765;break;}else{label=766;break;}
 case 765: 
 var $2109=$2103<<1;
 var $2110=(($2109)&255);
 HEAP8[(($999)>>0)]=$2110;
 var $__p_0_i318=$1001;label=773;break;
 case 766: 
 var $2111=((($2103)+(16))|0);
 var $2112=$2111&-16;
 var $2113=($2112|0)==0;
 var $_size_i322=($2113?1:$2112);
 var $2114=_malloc($_size_i322);
 var $2115=($2114|0)==0;
 if($2115){label=767;break;}else{var $_lcssa_i324=$2114;label=772;break;}
 case 767: 
 var $2116=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2117=($2116|0)==0;
 if($2117){label=770;break;}else{label=768;break;}
 case 768: 
 var $2119=$2116;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2119]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=769;break; } else { label=748;break; }
 case 769: 
 var $2120=_malloc($_size_i322);
 var $2121=($2120|0)==0;
 if($2121){label=767;break;}else{var $_lcssa_i324=$2120;label=772;break;}
 case 770: 
 var $2123=___cxa_allocate_exception(4);
 var $2124=$2123;
 HEAP32[(($2124)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2123,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=771;break; } else { label=750;break; }
 case 771: 
 throw "Reached an unreachable!";
 case 772: 
 var $_lcssa_i324;
 HEAP32[(($1002)>>2)]=$_lcssa_i324;
 var $2125=$2112|1;
 HEAP32[(($1015)>>2)]=$2125;
 HEAP32[(($1014)>>2)]=$2103;
 var $__p_0_i318=$_lcssa_i324;label=773;break;
 case 773: 
 var $__p_0_i318;
 assert($2103 % 1 === 0);(_memcpy($__p_0_i318, $2101, $2103)|0);
 var $2127=(($__p_0_i318+$2103)|0);
 HEAP8[(($2127)>>0)]=0;
 var $2128=HEAP8[(($976)>>0)];
 var $2129=$2128&1;
 var $2130=(($2129<<24)>>24)==0;
 if($2130){label=775;break;}else{label=774;break;}
 case 774: 
 var $2132=HEAP32[(($1011)>>2)];
 var $2136=$2132;label=776;break;
 case 775: 
 var $2134=($2128&255);
 var $2135=$2134>>>1;
 var $2136=$2135;label=776;break;
 case 776: 
 var $2136;
 var $2137=HEAP8[(($999)>>0)];
 var $2138=$2137&1;
 var $2139=(($2138<<24)>>24)==0;
 if($2139){label=778;break;}else{label=777;break;}
 case 777: 
 var $2141=HEAP32[(($1014)>>2)];
 var $2145=$2141;label=779;break;
 case 778: 
 var $2143=($2137&255);
 var $2144=$2143>>>1;
 var $2145=$2144;label=779;break;
 case 779: 
 var $2145;
 var $2146=($2136|0)==($2145|0);
 if($2146){label=780;break;}else{var $2170=0;label=788;break;}
 case 780: 
 var $2147=HEAP32[(($1003)>>2)];
 var $_801=($2130?$978:$2147);
 var $2148=HEAP32[(($1002)>>2)];
 var $2149=($2139?$1001:$2148);
 if($2130){var $__lhs_sz_i75_0=$2136;var $__lp_i76_0=$_801;var $__rp_i77_0=$2149;label=785;break;}else{label=781;break;}
 case 781: 
 var $2151=($2136|0)==0;
 if($2151){var $2170=1;label=788;break;}else{var $_02_i_i330=$2136;var $l_03_i_i329=$_801;var $r_04_i_i328=$2149;label=782;break;}
 case 782: 
 var $r_04_i_i328;
 var $l_03_i_i329;
 var $_02_i_i330;
 var $2152=HEAP8[(($l_03_i_i329)>>0)];
 var $2153=HEAP8[(($r_04_i_i328)>>0)];
 var $2154=(($2152<<24)>>24)==(($2153<<24)>>24);
 if($2154){label=783;break;}else{label=784;break;}
 case 783: 
 var $2156=((($_02_i_i330)-(1))|0);
 var $2157=(($l_03_i_i329+1)|0);
 var $2158=(($r_04_i_i328+1)|0);
 var $2159=($2156|0)==0;
 if($2159){var $2170=1;label=788;break;}else{var $_02_i_i330=$2156;var $l_03_i_i329=$2157;var $r_04_i_i328=$2158;label=782;break;}
 case 784: 
 var $phitmp768=(($2152<<24)>>24)==(($2153<<24)>>24);
 var $2170=$phitmp768;label=788;break;
 case 785: 
 var $__rp_i77_0;
 var $__lp_i76_0;
 var $__lhs_sz_i75_0;
 var $2161=($__lhs_sz_i75_0|0)==0;
 if($2161){var $2170=1;label=788;break;}else{label=786;break;}
 case 786: 
 var $2163=HEAP8[(($__lp_i76_0)>>0)];
 var $2164=HEAP8[(($__rp_i77_0)>>0)];
 var $2165=(($2163<<24)>>24)==(($2164<<24)>>24);
 if($2165){label=787;break;}else{var $2170=0;label=788;break;}
 case 787: 
 var $2167=((($__lhs_sz_i75_0)-(1))|0);
 var $2168=(($__lp_i76_0+1)|0);
 var $2169=(($__rp_i77_0+1)|0);
 var $__lhs_sz_i75_0=$2167;var $__lp_i76_0=$2168;var $__rp_i77_0=$2169;label=785;break;
 case 788: 
 var $2170;
 if($2139){label=790;break;}else{label=789;break;}
 case 789: 
 var $2172=HEAP32[(($1002)>>2)];
 _free($2172);
 label=790;break;
 case 790: 
 if($2170){label=791;break;}else{var $RangeGridRows_2=$RangeGridRows_1;label=835;break;}
 case 791: 
 if($2130){label=793;break;}else{label=792;break;}
 case 792: 
 var $2175=HEAP32[(($1011)>>2)];
 var $2179=$2175;label=794;break;
 case 793: 
 var $2177=($2128&255);
 var $2178=$2177>>>1;
 var $2179=$2178;label=794;break;
 case 794: 
 var $2179;
 var $2180=((($2179)+(1))|0);
 var $2181=HEAP8[(($1874)>>0)];
 var $2182=$2181&1;
 var $2183=(($2182<<24)>>24)==0;
 if($2183){label=796;break;}else{label=795;break;}
 case 795: 
 var $2185=(($1854+((($storemerge15)*(12))&-1)+4)|0);
 var $2186=HEAP32[(($2185)>>2)];
 var $2190=$2186;label=797;break;
 case 796: 
 var $2188=($2181&255);
 var $2189=$2188>>>1;
 var $2190=$2189;label=797;break;
 case 797: 
 var $2190;
 var $2191=($2190>>>0)<($2180>>>0);
 if($2191){label=798;break;}else{label=800;break;}
 case 798: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=799;break; } else { label=750;break; }
 case 799: 
 throw "Reached an unreachable!";
 case 800: 
 if($2183){label=802;break;}else{label=801;break;}
 case 801: 
 var $2195=(($1854+((($storemerge15)*(12))&-1)+8)|0);
 var $2196=HEAP32[(($2195)>>2)];
 var $2200=$2196;label=803;break;
 case 802: 
 var $2198=$1855;
 var $2199=(($2198+1)|0);
 var $2200=$2199;label=803;break;
 case 803: 
 var $2200;
 var $2201=(($2200+$2180)|0);
 var $2202=((($2190)-($2180))|0);
 var $2203=($2202>>>0)>4294967279;
 if($2203){label=804;break;}else{label=806;break;}
 case 804: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=805;break; } else { label=750;break; }
 case 805: 
 throw "Reached an unreachable!";
 case 806: 
 var $2206=($2202>>>0)<11;
 if($2206){label=807;break;}else{label=808;break;}
 case 807: 
 var $2208=$2202<<1;
 var $2209=(($2208)&255);
 HEAP8[(($1004)>>0)]=$2209;
 var $__p_0_i340=$1006;label=815;break;
 case 808: 
 var $2210=((($2202)+(16))|0);
 var $2211=$2210&-16;
 var $2212=($2211|0)==0;
 var $_size_i344=($2212?1:$2211);
 var $2213=_malloc($_size_i344);
 var $2214=($2213|0)==0;
 if($2214){label=809;break;}else{var $_lcssa_i346=$2213;label=814;break;}
 case 809: 
 var $2215=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2216=($2215|0)==0;
 if($2216){label=812;break;}else{label=810;break;}
 case 810: 
 var $2218=$2215;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2218]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=811;break; } else { label=749;break; }
 case 811: 
 var $2219=_malloc($_size_i344);
 var $2220=($2219|0)==0;
 if($2220){label=809;break;}else{var $_lcssa_i346=$2219;label=814;break;}
 case 812: 
 var $2222=___cxa_allocate_exception(4);
 var $2223=$2222;
 HEAP32[(($2223)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2222,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=813;break; } else { label=750;break; }
 case 813: 
 throw "Reached an unreachable!";
 case 814: 
 var $_lcssa_i346;
 HEAP32[(($1008)>>2)]=$_lcssa_i346;
 var $2224=$2211|1;
 HEAP32[(($1009)>>2)]=$2224;
 HEAP32[(($1010)>>2)]=$2202;
 var $__p_0_i340=$_lcssa_i346;label=815;break;
 case 815: 
 var $__p_0_i340;
 assert($2202 % 1 === 0);(_memcpy($__p_0_i340, $2201, $2202)|0);
 var $2226=(($__p_0_i340+$2202)|0);
 HEAP8[(($2226)>>0)]=0;
 var $2227=HEAP8[(($989)>>0)];
 var $2228=$2227&1;
 var $2229=(($2228<<24)>>24)==0;
 if($2229){label=817;break;}else{label=816;break;}
 case 816: 
 var $2231=HEAP32[(($993)>>2)];
 HEAP8[(($2231)>>0)]=0;
 HEAP32[(($995)>>2)]=0;
 label=818;break;
 case 817: 
 HEAP8[(($991)>>0)]=0;
 HEAP8[(($989)>>0)]=0;
 label=818;break;
 case 818: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($bufstr,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=820;break; } else { label=819;break; }
 case 819: 
 var $2234$0 = ___cxa_find_matching_catch(0); var $2234$1 = tempRet0;
 var $2235=$2234$0;
 ___clang_call_terminate($2235);
 throw "Reached an unreachable!";
 case 820: 
 assert(12 % 1 === 0);HEAP32[(($989)>>2)]=HEAP32[(($1004)>>2)];HEAP32[((($989)+(4))>>2)]=HEAP32[((($1004)+(4))>>2)];HEAP32[((($989)+(8))>>2)]=HEAP32[((($1004)+(8))>>2)];
 var $storemerge18=0;label=821;break;
 case 821: 
 var $storemerge18;
 var $2237=($storemerge18>>>0)<3;
 if($2237){label=822;break;}else{label=823;break;}
 case 822: 
 var $2239=(($1007+($storemerge18<<2))|0);
 HEAP32[(($2239)>>2)]=0;
 var $2240=((($storemerge18)+(1))|0);
 var $storemerge18=$2240;label=821;break;
 case 823: 
 var $2241=HEAP8[(($1004)>>0)];
 var $2242=$2241&1;
 var $2243=(($2242<<24)>>24)==0;
 if($2243){label=825;break;}else{label=824;break;}
 case 824: 
 var $2245=HEAP32[(($1008)>>2)];
 _free($2245);
 label=825;break;
 case 825: 
 var $2246=HEAP8[(($989)>>0)];
 var $2247=$2246&1;
 var $2248=(($2247<<24)>>24)==0;
 var $2249=HEAP32[(($993)>>2)];
 var $_802=($2248?$991:$2249);
 var $_0_i351=$_802;label=826;break;
 case 826: 
 var $_0_i351;
 var $2250=HEAP8[(($_0_i351)>>0)];
 var $2251=(($2250<<24)>>24)==32;
 if($2251){label=827;break;}else{label=828;break;}
 case 827: 
 var $2252=(($_0_i351+1)|0);
 var $_0_i351=$2252;label=826;break;
 case 828: 
 var $2253=(($2250<<24)>>24);
 var $2254=((($2253)-(9))|0);
 var $phitmp=($2254>>>0)>4;
 var $2255=(($_0_i351+1)|0);
 if($phitmp){label=829;break;}else{var $_0_i351=$2255;label=826;break;}
 case 829: 
 if(($2253|0)==45){ label=830;break;}else if(($2253|0)==43){ var $neg_0_i354=0;label=831;break;}else{var $neg_1_ph_i357=0;var $_1_ph_i356=$_0_i351;var $2259=$2250;label=832;break;}
 case 830: 
 var $neg_0_i354=1;label=831;break;
 case 831: 
 var $neg_0_i354;
 var $_pre_i355=HEAP8[(($2255)>>0)];
 var $neg_1_ph_i357=$neg_0_i354;var $_1_ph_i356=$2255;var $2259=$_pre_i355;label=832;break;
 case 832: 
 var $2259;
 var $_1_ph_i356;
 var $neg_1_ph_i357;
 var $2260=(($2259<<24)>>24);
 var $2261=((($2260)-(48))|0);
 var $2262=($2261>>>0)<10;
 if($2262){var $_12_i360=$_1_ph_i356;var $n_03_i359=0;var $2263=$2259;label=833;break;}else{var $n_0_lcssa_i363=0;label=834;break;}
 case 833: 
 var $2263;
 var $n_03_i359;
 var $_12_i360;
 var $2264=((($n_03_i359)*(10))&-1);
 var $2265=(($_12_i360+1)|0);
 var $2266=(($2263<<24)>>24);
 var $_neg1_i361=((($2264)+(48))|0);
 var $2267=((($_neg1_i361)-($2266))|0);
 var $2268=HEAP8[(($2265)>>0)];
 var $2269=(($2268<<24)>>24);
 var $2270=((($2269)-(48))|0);
 var $2271=($2270>>>0)<10;
 if($2271){var $_12_i360=$2265;var $n_03_i359=$2267;var $2263=$2268;label=833;break;}else{var $n_0_lcssa_i363=$2267;label=834;break;}
 case 834: 
 var $n_0_lcssa_i363;
 var $2272=(((-$n_0_lcssa_i363))|0);
 var $2273=($neg_1_ph_i357|0)!=0;
 var $2274=($2273?$n_0_lcssa_i363:$2272);
 var $RangeGridRows_2=$2274;label=835;break;
 case 835: 
 var $RangeGridRows_2;
 var $2276=HEAP8[(($1012)>>0)];
 var $2277=$2276&1;
 var $2278=(($2277<<24)>>24)==0;
 if($2278){label=837;break;}else{label=836;break;}
 case 836: 
 var $2280=HEAP32[(($1013)>>2)];
 _free($2280);
 label=837;break;
 case 837: 
 var $2281=HEAP8[(($989)>>0)];
 var $2282=$2281&1;
 var $2283=(($2282<<24)>>24)==0;
 if($2283){label=839;break;}else{label=838;break;}
 case 838: 
 var $2285=HEAP32[(($993)>>2)];
 _free($2285);
 label=839;break;
 case 839: 
 var $2286=HEAP8[(($976)>>0)];
 var $2287=$2286&1;
 var $2288=(($2287<<24)>>24)==0;
 if($2288){label=841;break;}else{label=840;break;}
 case 840: 
 var $2290=HEAP32[(($1003)>>2)];
 _free($2290);
 label=841;break;
 case 841: 
 var $2291=HEAP8[(($973)>>0)];
 var $2292=$2291&1;
 var $2293=(($2292<<24)>>24)==0;
 if($2293){label=843;break;}else{label=842;break;}
 case 842: 
 var $2295=HEAP32[(($985)>>2)];
 _free($2295);
 label=843;break;
 case 843: 
 var $2296=((($storemerge15)+(1))|0);
 var $storemerge15=$2296;var $RangeGridRows_1=$RangeGridRows_2;var $RangeGridCols_1=$RangeGridCols_2;label=633;break;
 case 844: 
 var $2297=HEAP8[(($976)>>0)];
 var $2298=$2297&1;
 var $2299=(($2298<<24)>>24)==0;
 if($2299){var $_0534=$2066;var $_0535=$2065;label=846;break;}else{label=845;break;}
 case 845: 
 var $2301=HEAP32[(($1003)>>2)];
 _free($2301);
 var $_0534=$2066;var $_0535=$2065;label=846;break;
 case 846: 
 var $_0535;
 var $_0534;
 var $2302=HEAP8[(($973)>>0)];
 var $2303=$2302&1;
 var $2304=(($2303<<24)>>24)==0;
 if($2304){var $_3=$_0534;var $_3538=$_0535;var $index_sroa_0_7=$index_sroa_0_2;var $index_sroa_22_9=$index_sroa_22_2;var $_pre_phi=$_pre_phi764;label=1175;break;}else{label=847;break;}
 case 847: 
 var $2306=HEAP32[(($985)>>2)];
 _free($2306);
 var $_3=$_0534;var $_3538=$_0535;var $index_sroa_0_7=$index_sroa_0_2;var $index_sroa_22_9=$index_sroa_22_2;var $_pre_phi=$_pre_phi764;label=1175;break;
 case 848: 
 var $RangeGridCols_3;
 var $RangeGridRows_3;
 var $2307=(Math_imul($RangeGridCols_3,$RangeGridRows_3)|0);
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge14=0;label=849;break; } else { label=376;break; }
 case 849: 
 var $storemerge14;
 var $2308=($storemerge14|0)<($2307|0);
 if($2308){label=850;break;}else{label=895;break;}
 case 850: 
 var $2310=HEAP32[(($951)>>2)];
 var $2311=($2310|0)!=0;
 var $2312=(((($storemerge14|0))%(1000))&-1);
 var $2313=($2312|0)==0;
 var $or_cond804=$2311&$2313;
 if($or_cond804){label=851;break;}else{label=852;break;}
 case 851: 
 var $2315=((($storemerge14)*(50))&-1);
 var $2316=(((($2315|0))/(($2307|0)))&-1);
 var $2317=((($2316)+(50))|0);
 var $2318=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2310]($2317,8368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=852;break; } else { label=368;break; }
 case 852: 
 var $2320=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,$952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=853;break; } else { label=368;break; }
 case 853: 
 var $2322=($2320|0)==-1;
 if($2322){label=854;break;}else{label=855;break;}
 case 854: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 855: 
 var $2325=HEAP8[(($952)>>0)];
 var $2326=(($2325<<24)>>24)==0;
 if($2326){label=856;break;}else{label=861;break;}
 case 856: 
 HEAP32[(($10)>>2)]=-1;
 var $2328=HEAP32[(($18)>>2)];
 var $2329=HEAP32[(($19)>>2)];
 var $2330=($2328>>>0)<($2329>>>0);
 if($2330){label=857;break;}else{label=860;break;}
 case 857: 
 var $2332=($2328|0)==0;
 if($2332){var $2334=0;label=859;break;}else{label=858;break;}
 case 858: 
 HEAP32[(($2328)>>2)]=-1;
 var $_pre727=HEAP32[(($18)>>2)];
 var $2334=$_pre727;label=859;break;
 case 859: 
 var $2334;
 var $2335=(($2334+4)|0);
 HEAP32[(($18)>>2)]=$2335;
 label=894;break;
 case 860: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($RangeGridAuxVec,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=894;break; } else { label=368;break; }
 case 861: 
 var $2338=HEAP32[(($18)>>2)];
 var $2339=HEAP32[(($19)>>2)];
 var $2340=($2338|0)==($2339|0);
 if($2340){label=865;break;}else{label=862;break;}
 case 862: 
 var $2342=($2338|0)==0;
 if($2342){var $2345=0;label=864;break;}else{label=863;break;}
 case 863: 
 var $2344=HEAP32[(($953)>>2)];
 HEAP32[(($2338)>>2)]=$2344;
 var $_pre729=HEAP32[(($18)>>2)];
 var $2345=$_pre729;label=864;break;
 case 864: 
 var $2345;
 var $2346=(($2345+4)|0);
 HEAP32[(($18)>>2)]=$2346;
 label=894;break;
 case 865: 
 var $$etemp$19$0=20;
 var $$etemp$19$1=0;

 var $2348=HEAP32[(($17)>>2)];
 var $2349=$2338;
 var $2350=$2348;
 var $2351=((($2349)-($2350))|0);
 var $2352=$2351>>2;
 var $2353=((($2352)+(1))|0);
 var $2354=($2353>>>0)>1073741823;
 if($2354){label=866;break;}else{label=877;break;}
 case 866: 
 var $2355=___cxa_allocate_exception(8);
 var $2356=$2355;
 HEAP32[(($2356)>>2)]=15352;
 var $2357=(($2355+4)|0);
 var $2358=_strlen(1736);
 var $2359=((($2358)+(13))|0);
 var $2360=($2359|0)==0;
 var $_size_i3_i=($2360?1:$2359);
 var $2361=_malloc($_size_i3_i);
 var $2362=($2361|0)==0;
 if($2362){label=867;break;}else{var $_lcssa_i5_i=$2361;label=872;break;}
 case 867: 
 var $2363=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2364=($2363|0)==0;
 if($2364){label=870;break;}else{label=868;break;}
 case 868: 
 var $2366=$2363;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2366]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=869;break; } else { label=874;break; }
 case 869: 
 var $2367=_malloc($_size_i3_i);
 var $2368=($2367|0)==0;
 if($2368){label=867;break;}else{var $_lcssa_i5_i=$2367;label=872;break;}
 case 870: 
 var $2370=___cxa_allocate_exception(4);
 var $2371=$2370;
 HEAP32[(($2371)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2370,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=871;break; } else { label=875;break; }
 case 871: 
 throw "Reached an unreachable!";
 case 872: 
 var $_lcssa_i5_i;
 var $2372=$_lcssa_i5_i;
 HEAP32[(($2372)>>2)]=$2358;
 var $2373=(($_lcssa_i5_i+4)|0);
 var $2374=$2373;
 HEAP32[(($2374)>>2)]=$2358;
 var $2375=(($_lcssa_i5_i+8)|0);
 var $2376=$2375;
 HEAP32[(($2376)>>2)]=0;
 var $2377=(($_lcssa_i5_i+12)|0);
 var $2378=((($2358)+(1))|0);
 assert($2378 % 1 === 0);(_memcpy($2377, 1736, $2378)|0);
 var $2379=$2357;
 HEAP32[(($2379)>>2)]=$2377;
 HEAP32[(($2356)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2355,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=873;break; } else { label=379;break; }
 case 873: 
 throw "Reached an unreachable!";
 case 874: 
 var $lpad_loopexit549$0 = ___cxa_find_matching_catch(); var $lpad_loopexit549$1 = tempRet0;
 var $lpad_phi551$1=$lpad_loopexit549$1;var $lpad_phi551$0=$lpad_loopexit549$0;label=876;break;
 case 875: 
 var $lpad_nonloopexit550$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit550$1 = tempRet0;
 var $lpad_phi551$1=$lpad_nonloopexit550$1;var $lpad_phi551$0=$lpad_nonloopexit550$0;label=876;break;
 case 876: 
 var $lpad_phi551$0;
 var $lpad_phi551$1;
 ___cxa_free_exception($2355);
 var $eh_lpad_body163$1=$lpad_phi551$1;var $eh_lpad_body163$0=$lpad_phi551$0;var $index_sroa_0_1=$index_sroa_0_2;var $index_sroa_22_1=$index_sroa_22_2;var $_pre758_pre_phi=$_pre_phi764;label=380;break;
 case 877: 
 var $2382=($2352>>>0)<536870911;
 if($2382){label=879;break;}else{label=878;break;}
 case 878: 
 HEAP32[(($957)>>2)]=0;
 HEAP32[(($958)>>2)]=$956;
 var $2387=1073741823;label=880;break;
 case 879: 
 var $2383=$2351>>1;
 var $2384=($2383>>>0)<($2353>>>0);
 var $_805=($2384?$2353:$2383);
 HEAP32[(($957)>>2)]=0;
 HEAP32[(($958)>>2)]=$956;
 var $2385=($_805|0)==0;
 if($2385){var $2403=0;var $2402=$_805;label=887;break;}else{var $2387=$_805;label=880;break;}
 case 880: 
 var $2387;
 var $2388=$2387<<2;
 var $2389=($2388|0)==0;
 var $_size_i_i=($2389?1:$2388);
 var $2390=_malloc($_size_i_i);
 var $2391=($2390|0)==0;
 if($2391){label=881;break;}else{var $_lcssa_i_i=$2390;label=886;break;}
 case 881: 
 var $2392=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2393=($2392|0)==0;
 if($2393){label=884;break;}else{label=882;break;}
 case 882: 
 var $2395=$2392;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2395]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=883;break; } else { label=367;break; }
 case 883: 
 var $2396=_malloc($_size_i_i);
 var $2397=($2396|0)==0;
 if($2397){label=881;break;}else{var $_lcssa_i_i=$2396;label=886;break;}
 case 884: 
 var $2399=___cxa_allocate_exception(4);
 var $2400=$2399;
 HEAP32[(($2400)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2399,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=885;break; } else { label=379;break; }
 case 885: 
 throw "Reached an unreachable!";
 case 886: 
 var $_lcssa_i_i;
 var $2401=$_lcssa_i_i;
 var $2403=$2401;var $2402=$2387;label=887;break;
 case 887: 
 var $2402;
 var $2403;
 HEAP32[(($959)>>2)]=$2403;
 var $2404=(($2403+($2352<<2))|0);
 HEAP32[(($960)>>2)]=$2404;
 HEAP32[(($961)>>2)]=$2404;
 var $2405=(($2403+($2402<<2))|0);
 HEAP32[(($957)>>2)]=$2405;
 var $2406=($2404|0)==0;
 if($2406){label=889;break;}else{label=888;break;}
 case 888: 
 var $2408=HEAP32[(($953)>>2)];
 HEAP32[(($2404)>>2)]=$2408;
 label=889;break;
 case 889: 
 var $_sum=((($2352)+(1))|0);
 var $2409=(($2403+($_sum<<2))|0);
 HEAP32[(($960)>>2)]=$2409;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($RangeGridAuxVec,$__v_i);
 var $2410=HEAP32[(($961)>>2)];
 var $_pre728=HEAP32[(($960)>>2)];
 var $2412=$_pre728;label=890;break;
 case 890: 
 var $2412;
 var $2413=($2410|0)==($2412|0);
 if($2413){label=892;break;}else{label=891;break;}
 case 891: 
 var $2415=((($2412)-(4))|0);
 HEAP32[(($960)>>2)]=$2415;
 var $2412=$2415;label=890;break;
 case 892: 
 var $2416=HEAP32[(($959)>>2)];
 var $2417=($2416|0)==0;
 if($2417){label=894;break;}else{label=893;break;}
 case 893: 
 var $2419=$2416;
 _free($2419);
 label=894;break;
 case 894: 
 var $2420=((($storemerge14)+(1))|0);
 var $storemerge14=$2420;label=849;break;
 case 895: 
 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $$etemp$22$0=4;
 var $$etemp$22$1=0;

 var $$etemp$23$0=4;
 var $$etemp$23$1=0;

 var $2422=HEAP32[(($966)>>2)];
 var $2423=HEAP32[(($967)>>2)];
 var $2424=HEAP32[(($968)>>2)];
 var $2425=$2423;
 var $2426=$2424;
 var $2427=((($2425)-($2426))|0);
 var $2428=(((($2427|0))/(28))&-1);
 var $2429=($2422|0)==($2428|0);
 if($2429){label=898;break;}else{label=896;break;}
 case 896: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8208,8128,762,10464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=897;break; } else { label=379;break; }
 case 897: 
 throw "Reached an unreachable!";
 case 898: 
 var $2432=($2422|0)>($2307|0);
 if($2432){label=900;break;}else{label=899;break;}
 case 899: 
 var $2433=((($RangeGridRows_3)-(1))|0);
 var $2434=((($RangeGridCols_3)-(1))|0);
 var $storemerge_i380=0;label=902;break;
 case 900: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8112,8128,763,10464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=901;break; } else { label=379;break; }
 case 901: 
 throw "Reached an unreachable!";
 case 902: 
 var $storemerge_i380;
 var $2437=($storemerge_i380|0)<($2433|0);
 if($2437){label=903;break;}else{var $RangeGridRows_4=$RangeGridRows_3;var $RangeGridCols_4=$RangeGridCols_3;var $index_sroa_0_5=$index_sroa_0_2;var $index_sroa_22_7=$index_sroa_22_2;var $index_sroa_42_3=$index_sroa_42_0;label=937;break;}
 case 903: 
 var $2438=(Math_imul($storemerge_i380,$RangeGridCols_3)|0);
 var $2439=((($storemerge_i380)+(1))|0);
 var $2440=(Math_imul($2439,$RangeGridCols_3)|0);
 var $storemerge1_i=0;label=904;break;
 case 904: 
 var $storemerge1_i;
 var $2442=($storemerge1_i|0)<($2434|0);
 if($2442){label=905;break;}else{var $storemerge_i380=$2439;label=902;break;}
 case 905: 
 var $2444=((($2438)+($storemerge1_i))|0);
 var $2445=HEAP32[(($17)>>2)];
 var $2446=(($2445+($2444<<2))|0);
 var $2447=HEAP32[(($2446)>>2)];
 var $2448=((($2444)+(1))|0);
 var $2449=(($2445+($2448<<2))|0);
 var $2450=HEAP32[(($2449)>>2)];
 var $2451=((($2440)+($storemerge1_i))|0);
 var $2452=(($2445+($2451<<2))|0);
 var $2453=HEAP32[(($2452)>>2)];
 var $2454=((($2451)+(1))|0);
 var $2455=(($2445+($2454<<2))|0);
 var $2456=HEAP32[(($2455)>>2)];
 var $2457=($2447|0)>-1;
 if($2457){label=906;break;}else{label=921;break;}
 case 906: 
 var $2459=($2450|0)>-1;
 if($2459){label=907;break;}else{var $_ph=0;label=909;break;}
 case 907: 
 var $2461=($2453|0)>-1;
 if($2461){label=908;break;}else{var $quad_i_0779=0;var $ndone_i_0780=0;label=915;break;}
 case 908: 
 var $2463=($2456|0)>-1;
 if($2463){var $_ph777783=1;label=911;break;}else{var $ndone_i_0=0;var $quad_i_0=0;label=914;break;}
 case 909: 
 var $_ph;
 var $2465=($2453|0)>-1;
 if($2465){var $_ph777=$_ph;label=910;break;}else{var $ndone_i_0=0;var $quad_i_0=$_ph;label=914;break;}
 case 910: 
 var $_ph777;
 var $2466=($2456|0)>-1;
 if($2466){var $_ph777783=$_ph777;label=911;break;}else{var $ndone_i_0=0;var $quad_i_0=$_ph777;label=914;break;}
 case 911: 
 var $_ph777783;
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($f_i,$m,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=912;break; } else { label=369;break; }
 case 912: 
 var $2467=HEAP32[(($968)>>2)];
 var $2468=HEAP32[(($969)>>2)];
 var $2469=(($2467+((($2456)*(28))&-1))|0);
 var $2470=(($2468+16)|0);
 HEAP32[(($2470)>>2)]=$2469;
 var $2471=HEAP32[(($968)>>2)];
 var $2472=(($2471+((($2453)*(28))&-1))|0);
 var $2473=(($2468+20)|0);
 HEAP32[(($2473)>>2)]=$2472;
 var $2474=HEAP32[(($968)>>2)];
 var $2475=(($2474+((($2447)*(28))&-1))|0);
 var $2476=(($2468+24)|0);
 HEAP32[(($2476)>>2)]=$2475;
 var $2477=(($_ph777783<<24)>>24)==0;
 if($2477){var $ndone_i_0=1;var $quad_i_0=$_ph777783;label=914;break;}else{label=913;break;}
 case 913: 
 var $2479=(($2468+28)|0);
 var $2480=HEAP32[(($2479)>>2)];
 var $2481=$2480|1048576;
 HEAP32[(($2479)>>2)]=$2481;
 var $ndone_i_0=1;var $quad_i_0=$_ph777783;label=914;break;
 case 914: 
 var $quad_i_0;
 var $ndone_i_0;
 if($2457){var $quad_i_0779=$quad_i_0;var $ndone_i_0780=$ndone_i_0;label=915;break;}else{var $2503=$ndone_i_0;label=920;break;}
 case 915: 
 var $ndone_i_0780;
 var $quad_i_0779;
 var $2482=($2450|0)>-1;
 var $2483=($2456|0)>-1;
 var $or_cond806=$2482&$2483;
 if($or_cond806){label=916;break;}else{var $2503=$ndone_i_0780;label=920;break;}
 case 916: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($f1_i,$m,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=917;break; } else { label=369;break; }
 case 917: 
 var $2485=HEAP32[(($968)>>2)];
 var $2486=HEAP32[(($970)>>2)];
 var $2487=(($2485+((($2447)*(28))&-1))|0);
 var $2488=(($2486+16)|0);
 HEAP32[(($2488)>>2)]=$2487;
 var $2489=HEAP32[(($968)>>2)];
 var $2490=(($2489+((($2450)*(28))&-1))|0);
 var $2491=(($2486+20)|0);
 HEAP32[(($2491)>>2)]=$2490;
 var $2492=HEAP32[(($968)>>2)];
 var $2493=(($2492+((($2456)*(28))&-1))|0);
 var $2494=(($2486+24)|0);
 HEAP32[(($2494)>>2)]=$2493;
 var $2495=$quad_i_0779&1;
 var $2496=(($2495<<24)>>24)==0;
 if($2496){label=919;break;}else{label=918;break;}
 case 918: 
 var $2498=(($2486+28)|0);
 var $2499=HEAP32[(($2498)>>2)];
 var $2500=$2499|1048576;
 HEAP32[(($2498)>>2)]=$2500;
 label=919;break;
 case 919: 
 var $2502=((($ndone_i_0780)+(1))|0);
 var $2503=$2502;label=920;break;
 case 920: 
 var $2503;
 var $2504=($2503|0)==0;
 if($2504){label=921;break;}else{label=928;break;}
 case 921: 
 var $2505=($2453|0)>-1;
 var $_not=$2505^1;
 var $_not807=$2457^1;
 var $brmerge=$_not|$_not807;
 if($brmerge){label=925;break;}else{label=922;break;}
 case 922: 
 var $2507=($2450|0)>-1;
 if($2507){label=923;break;}else{label=928;break;}
 case 923: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($f2_i,$m,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=924;break; } else { label=369;break; }
 case 924: 
 var $2509=HEAP32[(($968)>>2)];
 var $2510=HEAP32[(($971)>>2)];
 var $2511=(($2509+((($2453)*(28))&-1))|0);
 var $2512=(($2510+16)|0);
 HEAP32[(($2512)>>2)]=$2511;
 var $2513=HEAP32[(($968)>>2)];
 var $2514=(($2513+((($2447)*(28))&-1))|0);
 var $2515=(($2510+20)|0);
 HEAP32[(($2515)>>2)]=$2514;
 var $2516=HEAP32[(($968)>>2)];
 var $2517=(($2516+((($2450)*(28))&-1))|0);
 var $2518=(($2510+24)|0);
 HEAP32[(($2518)>>2)]=$2517;
 label=925;break;
 case 925: 
 var $2520=($2450|0)>-1;
 var $2521=($2456|0)>-1;
 var $or_cond808=$2520&$2521;
 var $or_cond808_not=$or_cond808^1;
 var $_not809=$2505^1;
 var $brmerge810=$or_cond808_not|$_not809;
 if($brmerge810){label=928;break;}else{label=926;break;}
 case 926: 
 (function() { try { __THREW__ = 0; return __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($f3_i,$m,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=927;break; } else { label=369;break; }
 case 927: 
 var $2523=HEAP32[(($968)>>2)];
 var $2524=HEAP32[(($972)>>2)];
 var $2525=(($2523+((($2450)*(28))&-1))|0);
 var $2526=(($2524+16)|0);
 HEAP32[(($2526)>>2)]=$2525;
 var $2527=HEAP32[(($968)>>2)];
 var $2528=(($2527+((($2456)*(28))&-1))|0);
 var $2529=(($2524+20)|0);
 HEAP32[(($2529)>>2)]=$2528;
 var $2530=HEAP32[(($968)>>2)];
 var $2531=(($2530+((($2453)*(28))&-1))|0);
 var $2532=(($2524+24)|0);
 HEAP32[(($2532)>>2)]=$2531;
 label=928;break;
 case 928: 
 var $2533=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$2533;label=904;break;
 case 929: 
 if($1099){var $storemerge_i399=0;label=931;break;}else{label=930;break;}
 case 930: 
 var $2535=(($1092+((($storemerge1)*(28))&-1)+12)|0);
 var $2536=HEAP32[(($2535)>>2)];
 var $storemerge_i399=$2536;label=931;break;
 case 931: 
 var $storemerge_i399;
 (function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile13SetCurElementEi($pf,$storemerge1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge20=0;label=932;break; } else { label=376;break; }
 case 932: 
 var $storemerge20;
 var $2538=($storemerge20|0)<($storemerge_i399|0);
 if($2538){label=933;break;}else{var $RangeGridRows_4=$RangeGridRows_0;var $RangeGridCols_4=$RangeGridCols_0;var $index_sroa_0_5=$index_sroa_0_2;var $index_sroa_22_7=$index_sroa_22_2;var $index_sroa_42_3=$index_sroa_42_0;label=937;break;}
 case 933: 
 var $2540=(function() { try { __THREW__ = 0; return __ZN3vcg3ply7PlyFile4ReadEPv($pf,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=934;break; } else { label=365;break; }
 case 934: 
 var $2542=($2540|0)==-1;
 if($2542){label=935;break;}else{label=936;break;}
 case 935: 
 HEAP32[(($22)>>2)]=16;
 var $_0541=16;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;
 case 936: 
 var $2545=((($storemerge20)+(1))|0);
 var $storemerge20=$2545;label=932;break;
 case 937: 
 var $index_sroa_42_3;
 var $index_sroa_22_7;
 var $index_sroa_0_5;
 var $RangeGridCols_4;
 var $RangeGridRows_4;
 var $2546=((($storemerge1)+(1))|0);
 var $storemerge1=$2546;var $RangeGridRows_0=$RangeGridRows_4;var $RangeGridCols_0=$RangeGridCols_4;var $index_sroa_0_2=$index_sroa_0_5;var $index_sroa_22_2=$index_sroa_22_7;var $index_sroa_42_0=$index_sroa_42_3;label=395;break;
 case 938: 
 var $2548=(($m+88)|0);
 var $2549=HEAP32[(($2548)>>2)];
 var $2550=(($m+92)|0);
 label=939;break;
 case 939: 
 var $2551=HEAP32[(($2550)>>2)];
 var $2552=($2549|0)==($2551|0);
 if($2552){label=942;break;}else{label=940;break;}
 case 940: 
 var $2554=((($2551)-(12))|0);
 HEAP32[(($2550)>>2)]=$2554;
 var $2555=$2554;
 var $2556=HEAP8[(($2555)>>0)];
 var $2557=$2556&1;
 var $2558=(($2557<<24)>>24)==0;
 if($2558){label=939;break;}else{label=941;break;}
 case 941: 
 var $2560=((($2551)-(12)+8)|0);
 var $2561=HEAP32[(($2560)>>2)];
 _free($2561);
 label=939;break;
 case 942: 
 var $2562=(($m+100)|0);
 var $2563=HEAP32[(($2562)>>2)];
 var $2564=(($m+104)|0);
 label=943;break;
 case 943: 
 var $2565=HEAP32[(($2564)>>2)];
 var $2566=($2563|0)==($2565|0);
 if($2566){label=944;break;}else{label=945;break;}
 case 944: 
 var $2567=$TFILE;
 var $2568=$TFILE;
 var $2569=(($2568+1)|0);
 var $2570=$NFILE;
 var $2571=$NFILE;
 var $2572=(($2571+1)|0);
 var $2573=$bufstr18;
 var $2574=$bufclean19;
 var $2575=$11;
 var $2576=$11;
 var $2577=(($2576+1)|0);
 var $2578=(($11+8)|0);
 var $2579=(($TFILE+8)|0);
 var $2580=$12;
 var $2581=$12;
 var $2582=(($2581+1)|0);
 var $2583=$bufstr18;
 var $2584=$bufstr18;
 var $2585=(($2584+1)|0);
 var $2586=$12;
 var $2587=$bufclean19;
 var $2588=(($bufclean19)|0);
 var $2589=(($bufclean19+4)|0);
 var $2590=$bufclean19;
 var $2591=(($2590+1)|0);
 var $2592=(($bufclean19+8)|0);
 var $2593=(($bufstr18+8)|0);
 var $2594=(($buf2)|0);
 var $2595=(($fn2_i)|0);
 var $2596=(($m+88)|0);
 var $2597=$13;
 var $2598=$13;
 var $2599=(($2598+1)|0);
 var $2600=(($m+96)|0);
 var $2601=$13;
 var $2602=(($13+8)|0);
 var $2603=(($13)|0);
 var $2604=(($13+4)|0);
 var $2605=(($bufstr18+4)|0);
 var $2606=(($12+8)|0);
 var $2607=(($12)|0);
 var $2608=(($12+4)|0);
 var $2609=(($TFILE+4)|0);
 var $2610=(($NFILE+8)|0);
 var $2611=(($11+4)|0);
 var $2612=(($11)|0);
 var $2613=(($NFILE)|0);
 var $2614=(($NFILE+4)|0);
 var $2615=(($TFILE)|0);
 var $storemerge2=0;label=947;break;
 case 945: 
 var $2617=((($2565)-(12))|0);
 HEAP32[(($2564)>>2)]=$2617;
 var $2618=$2617;
 var $2619=HEAP8[(($2618)>>0)];
 var $2620=$2619&1;
 var $2621=(($2620<<24)>>24)==0;
 if($2621){label=943;break;}else{label=946;break;}
 case 946: 
 var $2623=((($2565)-(12)+8)|0);
 var $2624=HEAP32[(($2623)>>2)];
 _free($2624);
 label=943;break;
 case 947: 
 var $storemerge2;
 var $2625=HEAP32[(($27)>>2)];
 var $2626=HEAP32[(($26)>>2)];
 var $2627=$2625;
 var $2628=$2626;
 var $2629=((($2627)-($2628))|0);
 var $2630=(((($2629|0))/(12))&-1);
 var $2631=($storemerge2|0)<($2630|0);
 if($2631){label=948;break;}else{label=1137;break;}
 case 948: 
 var $2632=_strlen(8296);
 var $2633=($2632>>>0)>4294967279;
 if($2633){label=949;break;}else{label=951;break;}
 case 949: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=950;break; } else { label=379;break; }
 case 950: 
 throw "Reached an unreachable!";
 case 951: 
 var $2636=($2632>>>0)<11;
 if($2636){label=952;break;}else{label=953;break;}
 case 952: 
 var $2638=$2632<<1;
 var $2639=(($2638)&255);
 HEAP8[(($2567)>>0)]=$2639;
 var $__p_0_i406=$2569;label=960;break;
 case 953: 
 var $2640=((($2632)+(16))|0);
 var $2641=$2640&-16;
 var $2642=($2641|0)==0;
 var $_size_i410=($2642?1:$2641);
 var $2643=_malloc($_size_i410);
 var $2644=($2643|0)==0;
 if($2644){label=954;break;}else{var $_lcssa_i412=$2643;label=959;break;}
 case 954: 
 var $2645=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2646=($2645|0)==0;
 if($2646){label=957;break;}else{label=955;break;}
 case 955: 
 var $2648=$2645;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2648]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=956;break; } else { label=364;break; }
 case 956: 
 var $2649=_malloc($_size_i410);
 var $2650=($2649|0)==0;
 if($2650){label=954;break;}else{var $_lcssa_i412=$2649;label=959;break;}
 case 957: 
 var $2652=___cxa_allocate_exception(4);
 var $2653=$2652;
 HEAP32[(($2653)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2652,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=958;break; } else { label=379;break; }
 case 958: 
 throw "Reached an unreachable!";
 case 959: 
 var $_lcssa_i412;
 HEAP32[(($2579)>>2)]=$_lcssa_i412;
 var $2654=$2641|1;
 HEAP32[(($2615)>>2)]=$2654;
 HEAP32[(($2609)>>2)]=$2632;
 var $__p_0_i406=$_lcssa_i412;label=960;break;
 case 960: 
 var $__p_0_i406;
 assert($2632 % 1 === 0);(_memcpy($__p_0_i406, 8296, $2632)|0);
 var $2655=(($__p_0_i406+$2632)|0);
 HEAP8[(($2655)>>0)]=0;
 var $2656=_strlen(8256);
 var $2657=($2656>>>0)>4294967279;
 if($2657){label=961;break;}else{label=963;break;}
 case 961: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=962;break; } else { label=1067;break; }
 case 962: 
 throw "Reached an unreachable!";
 case 963: 
 var $2660=($2656>>>0)<11;
 if($2660){label=964;break;}else{label=965;break;}
 case 964: 
 var $2662=$2656<<1;
 var $2663=(($2662)&255);
 HEAP8[(($2570)>>0)]=$2663;
 var $__p_0_i419=$2572;label=972;break;
 case 965: 
 var $2664=((($2656)+(16))|0);
 var $2665=$2664&-16;
 var $2666=($2665|0)==0;
 var $_size_i423=($2666?1:$2665);
 var $2667=_malloc($_size_i423);
 var $2668=($2667|0)==0;
 if($2668){label=966;break;}else{var $_lcssa_i425=$2667;label=971;break;}
 case 966: 
 var $2669=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2670=($2669|0)==0;
 if($2670){label=969;break;}else{label=967;break;}
 case 967: 
 var $2672=$2669;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2672]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=968;break; } else { label=1066;break; }
 case 968: 
 var $2673=_malloc($_size_i423);
 var $2674=($2673|0)==0;
 if($2674){label=966;break;}else{var $_lcssa_i425=$2673;label=971;break;}
 case 969: 
 var $2676=___cxa_allocate_exception(4);
 var $2677=$2676;
 HEAP32[(($2677)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2676,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=970;break; } else { label=1067;break; }
 case 970: 
 throw "Reached an unreachable!";
 case 971: 
 var $_lcssa_i425;
 HEAP32[(($2610)>>2)]=$_lcssa_i425;
 var $2678=$2665|1;
 HEAP32[(($2613)>>2)]=$2678;
 HEAP32[(($2614)>>2)]=$2656;
 var $__p_0_i419=$_lcssa_i425;label=972;break;
 case 972: 
 var $__p_0_i419;
 assert($2656 % 1 === 0);(_memcpy($__p_0_i419, 8256, $2656)|0);
 var $2680=(($__p_0_i419+$2656)|0);
 HEAP8[(($2680)>>0)]=0;
 var $2681=HEAP32[(($26)>>2)];
 var $2682=(($2681+((($storemerge2)*(12))&-1))|0);
 var $storemerge3=0;label=973;break;
 case 973: 
 var $storemerge3;
 var $2684=($storemerge3>>>0)<3;
 if($2684){label=974;break;}else{var $storemerge4=0;label=975;break;}
 case 974: 
 var $2686=(($2573+($storemerge3<<2))|0);
 HEAP32[(($2686)>>2)]=0;
 var $2687=((($storemerge3)+(1))|0);
 var $storemerge3=$2687;label=973;break;
 case 975: 
 var $storemerge4;
 var $2688=($storemerge4>>>0)<3;
 if($2688){label=976;break;}else{label=977;break;}
 case 976: 
 var $2690=(($2574+($storemerge4<<2))|0);
 HEAP32[(($2690)>>2)]=0;
 var $2691=((($storemerge4)+(1))|0);
 var $storemerge4=$2691;label=975;break;
 case 977: 
 var $2692=HEAP8[(($2567)>>0)];
 var $2693=$2692&1;
 var $2694=(($2693<<24)>>24)==0;
 if($2694){label=979;break;}else{label=978;break;}
 case 978: 
 var $2696=HEAP32[(($2609)>>2)];
 var $2700=$2696;label=980;break;
 case 979: 
 var $2698=($2692&255);
 var $2699=$2698>>>1;
 var $2700=$2699;label=980;break;
 case 980: 
 var $2700;
 var $2701=$2682;
 var $2702=HEAP8[(($2701)>>0)];
 var $2703=$2702&1;
 var $2704=(($2703<<24)>>24)==0;
 if($2704){label=982;break;}else{label=981;break;}
 case 981: 
 var $2706=(($2681+((($storemerge2)*(12))&-1)+4)|0);
 var $2707=HEAP32[(($2706)>>2)];
 var $2708=(($2681+((($storemerge2)*(12))&-1)+8)|0);
 var $2709=HEAP32[(($2708)>>2)];
 var $2716=$2709;var $2715=$2707;label=983;break;
 case 982: 
 var $2711=($2702&255);
 var $2712=$2711>>>1;
 var $2713=$2682;
 var $2714=(($2713+1)|0);
 var $2716=$2714;var $2715=$2712;label=983;break;
 case 983: 
 var $2715;
 var $2716;
 var $2717=($2715>>>0)<($2700>>>0);
 var $2718=($2717?$2715:$2700);
 var $2719=($2718>>>0)>4294967279;
 if($2719){label=984;break;}else{label=986;break;}
 case 984: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=985;break; } else { label=1073;break; }
 case 985: 
 throw "Reached an unreachable!";
 case 986: 
 var $2722=($2718>>>0)<11;
 if($2722){label=987;break;}else{label=988;break;}
 case 987: 
 var $2724=$2718<<1;
 var $2725=(($2724)&255);
 HEAP8[(($2575)>>0)]=$2725;
 var $__p_0_i434=$2577;label=995;break;
 case 988: 
 var $2726=((($2718)+(16))|0);
 var $2727=$2726&-16;
 var $2728=($2727|0)==0;
 var $_size_i438=($2728?1:$2727);
 var $2729=_malloc($_size_i438);
 var $2730=($2729|0)==0;
 if($2730){label=989;break;}else{var $_lcssa_i440=$2729;label=994;break;}
 case 989: 
 var $2731=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2732=($2731|0)==0;
 if($2732){label=992;break;}else{label=990;break;}
 case 990: 
 var $2734=$2731;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2734]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=991;break; } else { label=1069;break; }
 case 991: 
 var $2735=_malloc($_size_i438);
 var $2736=($2735|0)==0;
 if($2736){label=989;break;}else{var $_lcssa_i440=$2735;label=994;break;}
 case 992: 
 var $2738=___cxa_allocate_exception(4);
 var $2739=$2738;
 HEAP32[(($2739)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2738,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=993;break; } else { label=1073;break; }
 case 993: 
 throw "Reached an unreachable!";
 case 994: 
 var $_lcssa_i440;
 HEAP32[(($2578)>>2)]=$_lcssa_i440;
 var $2740=$2727|1;
 HEAP32[(($2612)>>2)]=$2740;
 HEAP32[(($2611)>>2)]=$2718;
 var $__p_0_i434=$_lcssa_i440;label=995;break;
 case 995: 
 var $__p_0_i434;
 assert($2718 % 1 === 0);(_memcpy($__p_0_i434, $2716, $2718)|0);
 var $2742=(($__p_0_i434+$2718)|0);
 HEAP8[(($2742)>>0)]=0;
 var $2743=HEAP8[(($2567)>>0)];
 var $2744=$2743&1;
 var $2745=(($2744<<24)>>24)==0;
 if($2745){label=997;break;}else{label=996;break;}
 case 996: 
 var $2747=HEAP32[(($2609)>>2)];
 var $2751=$2747;label=998;break;
 case 997: 
 var $2749=($2743&255);
 var $2750=$2749>>>1;
 var $2751=$2750;label=998;break;
 case 998: 
 var $2751;
 var $2752=HEAP8[(($2575)>>0)];
 var $2753=$2752&1;
 var $2754=(($2753<<24)>>24)==0;
 if($2754){label=1000;break;}else{label=999;break;}
 case 999: 
 var $2756=HEAP32[(($2611)>>2)];
 var $2760=$2756;label=1001;break;
 case 1000: 
 var $2758=($2752&255);
 var $2759=$2758>>>1;
 var $2760=$2759;label=1001;break;
 case 1001: 
 var $2760;
 var $2761=($2751|0)==($2760|0);
 if($2761){label=1002;break;}else{var $2785=0;label=1010;break;}
 case 1002: 
 var $2762=HEAP32[(($2579)>>2)];
 var $_811=($2745?$2569:$2762);
 var $2763=HEAP32[(($2578)>>2)];
 var $2764=($2754?$2577:$2763);
 if($2745){var $__lhs_sz_i_0=$2751;var $__lp_i_0=$_811;var $__rp_i_0=$2764;label=1007;break;}else{label=1003;break;}
 case 1003: 
 var $2766=($2751|0)==0;
 if($2766){var $2785=1;label=1010;break;}else{var $_02_i_i446=$2751;var $l_03_i_i445=$_811;var $r_04_i_i444=$2764;label=1004;break;}
 case 1004: 
 var $r_04_i_i444;
 var $l_03_i_i445;
 var $_02_i_i446;
 var $2767=HEAP8[(($l_03_i_i445)>>0)];
 var $2768=HEAP8[(($r_04_i_i444)>>0)];
 var $2769=(($2767<<24)>>24)==(($2768<<24)>>24);
 if($2769){label=1005;break;}else{label=1006;break;}
 case 1005: 
 var $2771=((($_02_i_i446)-(1))|0);
 var $2772=(($l_03_i_i445+1)|0);
 var $2773=(($r_04_i_i444+1)|0);
 var $2774=($2771|0)==0;
 if($2774){var $2785=1;label=1010;break;}else{var $_02_i_i446=$2771;var $l_03_i_i445=$2772;var $r_04_i_i444=$2773;label=1004;break;}
 case 1006: 
 var $phitmp767=(($2767<<24)>>24)==(($2768<<24)>>24);
 var $2785=$phitmp767;label=1010;break;
 case 1007: 
 var $__rp_i_0;
 var $__lp_i_0;
 var $__lhs_sz_i_0;
 var $2776=($__lhs_sz_i_0|0)==0;
 if($2776){var $2785=1;label=1010;break;}else{label=1008;break;}
 case 1008: 
 var $2778=HEAP8[(($__lp_i_0)>>0)];
 var $2779=HEAP8[(($__rp_i_0)>>0)];
 var $2780=(($2778<<24)>>24)==(($2779<<24)>>24);
 if($2780){label=1009;break;}else{var $2785=0;label=1010;break;}
 case 1009: 
 var $2782=((($__lhs_sz_i_0)-(1))|0);
 var $2783=(($__lp_i_0+1)|0);
 var $2784=(($__rp_i_0+1)|0);
 var $__lhs_sz_i_0=$2782;var $__lp_i_0=$2783;var $__rp_i_0=$2784;label=1007;break;
 case 1010: 
 var $2785;
 if($2754){label=1012;break;}else{label=1011;break;}
 case 1011: 
 var $2787=HEAP32[(($2578)>>2)];
 _free($2787);
 label=1012;break;
 case 1012: 
 if($2785){label=1013;break;}else{label=1120;break;}
 case 1013: 
 if($2745){label=1015;break;}else{label=1014;break;}
 case 1014: 
 var $2790=HEAP32[(($2609)>>2)];
 var $2794=$2790;label=1016;break;
 case 1015: 
 var $2792=($2743&255);
 var $2793=$2792>>>1;
 var $2794=$2793;label=1016;break;
 case 1016: 
 var $2794;
 var $2795=((($2794)+(1))|0);
 var $2796=HEAP8[(($2701)>>0)];
 var $2797=$2796&1;
 var $2798=(($2797<<24)>>24)==0;
 if($2798){label=1018;break;}else{label=1017;break;}
 case 1017: 
 var $2800=(($2681+((($storemerge2)*(12))&-1)+4)|0);
 var $2801=HEAP32[(($2800)>>2)];
 var $2805=$2801;label=1019;break;
 case 1018: 
 var $2803=($2796&255);
 var $2804=$2803>>>1;
 var $2805=$2804;label=1019;break;
 case 1019: 
 var $2805;
 var $2806=($2805>>>0)<($2795>>>0);
 if($2806){label=1020;break;}else{label=1022;break;}
 case 1020: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1021;break; } else { label=1073;break; }
 case 1021: 
 throw "Reached an unreachable!";
 case 1022: 
 if($2798){label=1024;break;}else{label=1023;break;}
 case 1023: 
 var $2810=(($2681+((($storemerge2)*(12))&-1)+8)|0);
 var $2811=HEAP32[(($2810)>>2)];
 var $2815=$2811;label=1025;break;
 case 1024: 
 var $2813=$2682;
 var $2814=(($2813+1)|0);
 var $2815=$2814;label=1025;break;
 case 1025: 
 var $2815;
 var $2816=(($2815+$2795)|0);
 var $2817=((($2805)-($2795))|0);
 var $2818=($2817>>>0)>4294967279;
 if($2818){label=1026;break;}else{label=1028;break;}
 case 1026: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1027;break; } else { label=1073;break; }
 case 1027: 
 throw "Reached an unreachable!";
 case 1028: 
 var $2821=($2817>>>0)<11;
 if($2821){label=1029;break;}else{label=1030;break;}
 case 1029: 
 var $2823=$2817<<1;
 var $2824=(($2823)&255);
 HEAP8[(($2580)>>0)]=$2824;
 var $__p_0_i456=$2582;label=1037;break;
 case 1030: 
 var $2825=((($2817)+(16))|0);
 var $2826=$2825&-16;
 var $2827=($2826|0)==0;
 var $_size_i460=($2827?1:$2826);
 var $2828=_malloc($_size_i460);
 var $2829=($2828|0)==0;
 if($2829){label=1031;break;}else{var $_lcssa_i462=$2828;label=1036;break;}
 case 1031: 
 var $2830=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $2831=($2830|0)==0;
 if($2831){label=1034;break;}else{label=1032;break;}
 case 1032: 
 var $2833=$2830;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2833]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1033;break; } else { label=1070;break; }
 case 1033: 
 var $2834=_malloc($_size_i460);
 var $2835=($2834|0)==0;
 if($2835){label=1031;break;}else{var $_lcssa_i462=$2834;label=1036;break;}
 case 1034: 
 var $2837=___cxa_allocate_exception(4);
 var $2838=$2837;
 HEAP32[(($2838)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2837,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1035;break; } else { label=1073;break; }
 case 1035: 
 throw "Reached an unreachable!";
 case 1036: 
 var $_lcssa_i462;
 HEAP32[(($2606)>>2)]=$_lcssa_i462;
 var $2839=$2826|1;
 HEAP32[(($2607)>>2)]=$2839;
 HEAP32[(($2608)>>2)]=$2817;
 var $__p_0_i456=$_lcssa_i462;label=1037;break;
 case 1037: 
 var $__p_0_i456;
 assert($2817 % 1 === 0);(_memcpy($__p_0_i456, $2816, $2817)|0);
 var $2841=(($__p_0_i456+$2817)|0);
 HEAP8[(($2841)>>0)]=0;
 var $2842=HEAP8[(($2583)>>0)];
 var $2843=$2842&1;
 var $2844=(($2843<<24)>>24)==0;
 if($2844){label=1039;break;}else{label=1038;break;}
 case 1038: 
 var $2846=HEAP32[(($2593)>>2)];
 HEAP8[(($2846)>>0)]=0;
 HEAP32[(($2605)>>2)]=0;
 label=1040;break;
 case 1039: 
 HEAP8[(($2585)>>0)]=0;
 HEAP8[(($2583)>>0)]=0;
 label=1040;break;
 case 1040: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($bufstr18,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1042;break; } else { label=1041;break; }
 case 1041: 
 var $2849$0 = ___cxa_find_matching_catch(0); var $2849$1 = tempRet0;
 var $2850=$2849$0;
 ___clang_call_terminate($2850);
 throw "Reached an unreachable!";
 case 1042: 
 assert(12 % 1 === 0);HEAP32[(($2583)>>2)]=HEAP32[(($2580)>>2)];HEAP32[((($2583)+(4))>>2)]=HEAP32[((($2580)+(4))>>2)];HEAP32[((($2583)+(8))>>2)]=HEAP32[((($2580)+(8))>>2)];
 var $storemerge5=0;label=1043;break;
 case 1043: 
 var $storemerge5;
 var $2852=($storemerge5>>>0)<3;
 if($2852){label=1044;break;}else{label=1045;break;}
 case 1044: 
 var $2854=(($2586+($storemerge5<<2))|0);
 HEAP32[(($2854)>>2)]=0;
 var $2855=((($storemerge5)+(1))|0);
 var $storemerge5=$2855;label=1043;break;
 case 1045: 
 var $2856=HEAP8[(($2580)>>0)];
 var $2857=$2856&1;
 var $2858=(($2857<<24)>>24)==0;
 if($2858){label=1047;break;}else{label=1046;break;}
 case 1046: 
 var $2860=HEAP32[(($2606)>>2)];
 _free($2860);
 label=1047;break;
 case 1047: 
 var $2861=HEAP8[(($2583)>>0)];
 var $2862=$2861&1;
 var $2863=(($2862<<24)>>24)==0;
 if($2863){label=1049;break;}else{label=1048;break;}
 case 1048: 
 var $2865=HEAP32[(($2605)>>2)];
 var $2869=$2865;label=1050;break;
 case 1049: 
 var $2867=($2861&255);
 var $2868=$2867>>>1;
 var $2869=$2868;label=1050;break;
 case 1050: 
 var $2869;
 var $storemerge6=0;label=1051;break;
 case 1051: 
 var $storemerge6;
 var $2871=($storemerge6|0)<($2869|0);
 if($2871){label=1052;break;}else{label=1076;break;}
 case 1052: 
 var $2872=HEAP8[(($2583)>>0)];
 var $2873=$2872&1;
 var $2874=(($2873<<24)>>24)==0;
 var $2875=HEAP32[(($2593)>>2)];
 var $_812=($2874?$2585:$2875);
 var $2876=(($_812+$storemerge6)|0);
 var $2877=HEAP8[(($2876)>>0)];
 var $2878=(($2877<<24)>>24)==32;
 if($2878){label=1075;break;}else{label=1053;break;}
 case 1053: 
 var $2879=HEAP32[(($2593)>>2)];
 var $_813=($2874?$2585:$2879);
 var $2880=(($_813+$storemerge6)|0);
 var $2881=HEAP8[(($2880)>>0)];
 var $2882=(($2881<<24)>>24)==9;
 if($2882){label=1075;break;}else{label=1054;break;}
 case 1054: 
 var $2883=HEAP32[(($2593)>>2)];
 var $_814=($2874?$2585:$2883);
 var $2884=(($_814+$storemerge6)|0);
 var $2885=HEAP8[(($2884)>>0)];
 var $2886=(($2885<<24)>>24)>32;
 if($2886){label=1055;break;}else{label=1075;break;}
 case 1055: 
 var $2887=HEAP32[(($2593)>>2)];
 var $_815=($2874?$2585:$2887);
 var $2888=(($_815+$storemerge6)|0);
 var $2889=HEAP8[(($2888)>>0)];
 var $2890=(($2889<<24)>>24)<125;
 if($2890){label=1056;break;}else{label=1075;break;}
 case 1056: 
 var $2891=HEAP32[(($2593)>>2)];
 var $_816=($2874?$2585:$2891);
 var $2892=(($_816+$storemerge6)|0);
 var $2893=HEAP8[(($2892)>>0)];
 var $2894=HEAP8[(($2587)>>0)];
 var $2895=$2894&1;
 var $2896=(($2895<<24)>>24)!=0;
 if($2896){label=1058;break;}else{label=1057;break;}
 case 1057: 
 var $2898=($2894&255);
 var $2899=$2898>>>1;
 var $__sz_0_i=$2899;var $__cap_0_i=10;label=1059;break;
 case 1058: 
 var $2901=HEAP32[(($2588)>>2)];
 var $2902=$2901&-2;
 var $2903=((($2902)-(1))|0);
 var $2904=HEAP32[(($2589)>>2)];
 var $__sz_0_i=$2904;var $__cap_0_i=$2903;label=1059;break;
 case 1059: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $2906=($__sz_0_i|0)==($__cap_0_i|0);
 if($2906){label=1060;break;}else{label=1062;break;}
 case 1060: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($bufclean19,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1061;break; } else { label=1071;break; }
 case 1061: 
 var $2908=HEAP8[(($2587)>>0)];
 var $2909=$2908&1;
 var $2910=(($2909<<24)>>24)==0;
 if($2910){label=1063;break;}else{label=1064;break;}
 case 1062: 
 if($2896){label=1064;break;}else{label=1063;break;}
 case 1063: 
 var $2913=$__sz_0_i<<1;
 var $2914=((($2913)+(2))|0);
 var $2915=(($2914)&255);
 HEAP8[(($2587)>>0)]=$2915;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$2591;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=1065;break;
 case 1064: 
 var $2917=HEAP32[(($2592)>>2)];
 var $2918=((($__sz_0_i)+(1))|0);
 HEAP32[(($2589)>>2)]=$2918;
 var $_pn_i=$2917;var $__p_0_sum_pre_phi_i=$2918;label=1065;break;
 case 1065: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i467=(($_pn_i+$__sz_0_i)|0);
 HEAP8[(($__p_0_i467)>>0)]=$2893;
 var $2920=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[(($2920)>>0)]=0;
 label=1075;break;
 case 1066: 
 var $lpad_loopexit559$0 = ___cxa_find_matching_catch(); var $lpad_loopexit559$1 = tempRet0;
 var $lpad_phi561$1=$lpad_loopexit559$1;var $lpad_phi561$0=$lpad_loopexit559$0;label=1068;break;
 case 1067: 
 var $lpad_nonloopexit584$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit584$1 = tempRet0;
 var $lpad_phi561$1=$lpad_nonloopexit584$1;var $lpad_phi561$0=$lpad_nonloopexit584$0;label=1068;break;
 case 1068: 
 var $lpad_phi561$0;
 var $lpad_phi561$1;
 var $2921=$lpad_phi561$0;
 var $2922=$lpad_phi561$1;
 var $_2=$2922;var $_2537=$2921;label=1135;break;
 case 1069: 
 var $lpad_loopexit564$0 = ___cxa_find_matching_catch(); var $lpad_loopexit564$1 = tempRet0;
 var $lpad_phi566$1=$lpad_loopexit564$1;var $lpad_phi566$0=$lpad_loopexit564$0;label=1074;break;
 case 1070: 
 var $lpad_loopexit568$0 = ___cxa_find_matching_catch(); var $lpad_loopexit568$1 = tempRet0;
 var $lpad_phi566$1=$lpad_loopexit568$1;var $lpad_phi566$0=$lpad_loopexit568$0;label=1074;break;
 case 1071: 
 var $lpad_loopexit571$0 = ___cxa_find_matching_catch(); var $lpad_loopexit571$1 = tempRet0;
 var $lpad_phi566$1=$lpad_loopexit571$1;var $lpad_phi566$0=$lpad_loopexit571$0;label=1074;break;
 case 1072: 
 var $lpad_loopexit577$0 = ___cxa_find_matching_catch(); var $lpad_loopexit577$1 = tempRet0;
 var $lpad_phi566$1=$lpad_loopexit577$1;var $lpad_phi566$0=$lpad_loopexit577$0;label=1074;break;
 case 1073: 
 var $lpad_nonloopexit587$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit587$1 = tempRet0;
 var $lpad_phi566$1=$lpad_nonloopexit587$1;var $lpad_phi566$0=$lpad_nonloopexit587$0;label=1074;break;
 case 1074: 
 var $lpad_phi566$0;
 var $lpad_phi566$1;
 var $2923=$lpad_phi566$0;
 var $2924=$lpad_phi566$1;
 var $_1=$2924;var $_1536=$2923;label=1129;break;
 case 1075: 
 var $2926=((($storemerge6)+(1))|0);
 var $storemerge6=$2926;label=1051;break;
 case 1076: 
 var $2927=HEAP8[(($2587)>>0)];
 var $2928=$2927&1;
 var $2929=(($2928<<24)>>24)==0;
 var $2930=HEAP32[(($2592)>>2)];
 var $_817=($2929?$2591:$2930);
 var $$etemp$24$0=255;
 var $$etemp$24$1=0;

 HEAP8[(($2594)>>0)]=0;
 var $ia_i_0=0;var $io_i_0=0;label=1077;break;
 case 1077: 
 var $io_i_0;
 var $ia_i_0;
 var $2931=(($_817+$ia_i_0)|0);
 var $2932=HEAP8[(($2931)>>0)];
 if((($2932<<24)>>24)==60){ label=1078;break;}else if((($2932<<24)>>24)==0){ label=1096;break;}else{label=1095;break;}
 case 1078: 
 var $2933=_strlen($_817);
 var $2934=((($ia_i_0)+(5))|0);
 var $2935=($2933|0)>($2934|0);
 if($2935){label=1079;break;}else{label=1095;break;}
 case 1079: 
 var $2937=((($ia_i_0)+(1))|0);
 var $2938=(($_817+$2937)|0);
 var $2939=HEAP8[(($2938)>>0)];
 if((($2939<<24)>>24)==116|(($2939<<24)>>24)==84){ label=1080;break;}else{label=1095;break;}
 case 1080: 
 var $2941=((($ia_i_0)+(2))|0);
 var $2942=(($_817+$2941)|0);
 var $2943=HEAP8[(($2942)>>0)];
 if((($2943<<24)>>24)==104|(($2943<<24)>>24)==72){ label=1081;break;}else{label=1095;break;}
 case 1081: 
 var $2945=((($ia_i_0)+(3))|0);
 var $2946=(($_817+$2945)|0);
 var $2947=HEAP8[(($2946)>>0)];
 if((($2947<<24)>>24)==105|(($2947<<24)>>24)==73){ label=1082;break;}else{label=1095;break;}
 case 1082: 
 var $2949=((($ia_i_0)+(4))|0);
 var $2950=(($_817+$2949)|0);
 var $2951=HEAP8[(($2950)>>0)];
 if((($2951<<24)>>24)==115|(($2951<<24)>>24)==83){ label=1083;break;}else{label=1095;break;}
 case 1083: 
 var $2953=(($_817+$2934)|0);
 var $2954=HEAP8[(($2953)>>0)];
 var $2955=(($2954<<24)>>24)==62;
 if($2955){var $storemerge_i469=0;var $lastbar_i_0=0;label=1084;break;}else{label=1095;break;}
 case 1084: 
 var $lastbar_i_0;
 var $storemerge_i469;
 var $2957=(($filename+$storemerge_i469)|0);
 var $2958=HEAP8[(($2957)>>0)];
 if((($2958<<24)>>24)==47|(($2958<<24)>>24)==92){ label=1086;break;}else if((($2958<<24)>>24)==0){ var $storemerge1_i470=$lastbar_i_0;label=1087;break;}else{label=1085;break;}
 case 1085: 
 var $_pre765=((($storemerge_i469)+(1))|0);
 var $storemerge_i469=$_pre765;var $lastbar_i_0=$lastbar_i_0;label=1084;break;
 case 1086: 
 var $2960=((($storemerge_i469)+(1))|0);
 var $storemerge_i469=$2960;var $lastbar_i_0=$2960;label=1084;break;
 case 1087: 
 var $storemerge1_i470;
 var $2962=(($filename+$storemerge1_i470)|0);
 var $2963=HEAP8[(($2962)>>0)];
 var $2964=(($2963<<24)>>24)==0;
 var $2965=((($storemerge1_i470)-($lastbar_i_0))|0);
 var $2966=(($fn2_i+$2965)|0);
 if($2964){label=1089;break;}else{label=1088;break;}
 case 1088: 
 HEAP8[(($2966)>>0)]=$2963;
 var $2968=((($storemerge1_i470)+(1))|0);
 var $storemerge1_i470=$2968;label=1087;break;
 case 1089: 
 HEAP8[(($2966)>>0)]=0;
 var $2970=((($2965)-(4))|0);
 var $2971=(($fn2_i+$2970)|0);
 var $2972=HEAP8[(($2971)>>0)];
 var $2973=(($2972<<24)>>24)==46;
 if($2973){label=1090;break;}else{label=1094;break;}
 case 1090: 
 var $2975=((($2965)-(3))|0);
 var $2976=(($fn2_i+$2975)|0);
 var $2977=HEAP8[(($2976)>>0)];
 if((($2977<<24)>>24)==80|(($2977<<24)>>24)==112){ label=1091;break;}else{label=1094;break;}
 case 1091: 
 var $2979=((($2965)-(2))|0);
 var $2980=(($fn2_i+$2979)|0);
 var $2981=HEAP8[(($2980)>>0)];
 if((($2981<<24)>>24)==76|(($2981<<24)>>24)==108){ label=1092;break;}else{label=1094;break;}
 case 1092: 
 var $2983=((($2965)-(1))|0);
 var $2984=(($fn2_i+$2983)|0);
 var $2985=HEAP8[(($2984)>>0)];
 if((($2985<<24)>>24)==89|(($2985<<24)>>24)==121){ label=1093;break;}else{label=1094;break;}
 case 1093: 
 HEAP8[(($2971)>>0)]=0;
 label=1094;break;
 case 1094: 
 var $2987=(($buf2+$io_i_0)|0);
 HEAP8[(($2987)>>0)]=0;
 _sprintf($2594,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2594,HEAP32[(((tempVarArgs)+(8))>>2)]=$2595,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2988=_strlen($2594);
 var $2989=((($ia_i_0)+(6))|0);
 var $ia_i_0=$2989;var $io_i_0=$2988;label=1077;break;
 case 1095: 
 var $2991=((($ia_i_0)+(1))|0);
 var $2992=((($io_i_0)+(1))|0);
 var $2993=(($buf2+$io_i_0)|0);
 HEAP8[(($2993)>>0)]=$2932;
 var $ia_i_0=$2991;var $io_i_0=$2992;label=1077;break;
 case 1096: 
 var $2994=(($buf2+$io_i_0)|0);
 HEAP8[(($2994)>>0)]=0;
 var $$etemp$25$0=255;
 var $$etemp$25$1=0;

 var $2995=_strlen($2594);
 var $2996=($2995>>>0)>4294967279;
 if($2996){label=1097;break;}else{label=1099;break;}
 case 1097: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1098;break; } else { label=1073;break; }
 case 1098: 
 throw "Reached an unreachable!";
 case 1099: 
 var $2999=($2995>>>0)<11;
 if($2999){label=1100;break;}else{label=1101;break;}
 case 1100: 
 var $3001=$2995<<1;
 var $3002=(($3001)&255);
 HEAP8[(($2597)>>0)]=$3002;
 var $__p_0_i476=$2599;label=1108;break;
 case 1101: 
 var $3003=((($2995)+(16))|0);
 var $3004=$3003&-16;
 var $3005=($3004|0)==0;
 var $_size_i480=($3005?1:$3004);
 var $3006=_malloc($_size_i480);
 var $3007=($3006|0)==0;
 if($3007){label=1102;break;}else{var $_lcssa_i482=$3006;label=1107;break;}
 case 1102: 
 var $3008=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $3009=($3008|0)==0;
 if($3009){label=1105;break;}else{label=1103;break;}
 case 1103: 
 var $3011=$3008;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3011]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1104;break; } else { label=1072;break; }
 case 1104: 
 var $3012=_malloc($_size_i480);
 var $3013=($3012|0)==0;
 if($3013){label=1102;break;}else{var $_lcssa_i482=$3012;label=1107;break;}
 case 1105: 
 var $3015=___cxa_allocate_exception(4);
 var $3016=$3015;
 HEAP32[(($3016)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($3015,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1106;break; } else { label=1073;break; }
 case 1106: 
 throw "Reached an unreachable!";
 case 1107: 
 var $_lcssa_i482;
 HEAP32[(($2602)>>2)]=$_lcssa_i482;
 var $3017=$3004|1;
 HEAP32[(($2603)>>2)]=$3017;
 HEAP32[(($2604)>>2)]=$2995;
 var $__p_0_i476=$_lcssa_i482;label=1108;break;
 case 1108: 
 var $__p_0_i476;
 assert($2995 % 1 === 0);(_memcpy($__p_0_i476, $2594, $2995)|0);
 var $3019=(($__p_0_i476+$2995)|0);
 HEAP8[(($3019)>>0)]=0;
 var $3020=HEAP32[(($2550)>>2)];
 var $3021=HEAP32[(($2600)>>2)];
 var $3022=($3020>>>0)<($3021>>>0);
 if($3022){label=1109;break;}else{label=1115;break;}
 case 1109: 
 var $3024=($3020|0)==0;
 if($3024){var $3032=0;label=1114;break;}else{label=1110;break;}
 case 1110: 
 var $3026=$3020;
 assert(12 % 1 === 0);HEAP32[(($3026)>>2)]=HEAP32[(($2597)>>2)];HEAP32[((($3026)+(4))>>2)]=HEAP32[((($2597)+(4))>>2)];HEAP32[((($3026)+(8))>>2)]=HEAP32[((($2597)+(8))>>2)];
 var $storemerge7=0;label=1111;break;
 case 1111: 
 var $storemerge7;
 var $3028=($storemerge7>>>0)<3;
 if($3028){label=1112;break;}else{label=1113;break;}
 case 1112: 
 var $3030=(($2601+($storemerge7<<2))|0);
 HEAP32[(($3030)>>2)]=0;
 var $3031=((($storemerge7)+(1))|0);
 var $storemerge7=$3031;label=1111;break;
 case 1113: 
 var $_pre742=HEAP32[(($2550)>>2)];
 var $3032=$_pre742;label=1114;break;
 case 1114: 
 var $3032;
 var $3033=(($3032+12)|0);
 HEAP32[(($2550)>>2)]=$3033;
 label=1116;break;
 case 1115: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($2596,$13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1116;break; } else { label=1118;break; }
 case 1116: 
 var $3035=HEAP8[(($2597)>>0)];
 var $3036=$3035&1;
 var $3037=(($3036<<24)>>24)==0;
 if($3037){label=1120;break;}else{label=1117;break;}
 case 1117: 
 var $3039=HEAP32[(($2602)>>2)];
 _free($3039);
 label=1120;break;
 case 1118: 
 var $3041$0 = ___cxa_find_matching_catch(); var $3041$1 = tempRet0;
 var $3042=$3041$0;
 var $3043=$3041$1;
 var $3044=HEAP8[(($2597)>>0)];
 var $3045=$3044&1;
 var $3046=(($3045<<24)>>24)==0;
 if($3046){var $_1=$3043;var $_1536=$3042;label=1129;break;}else{label=1119;break;}
 case 1119: 
 var $3048=HEAP32[(($2602)>>2)];
 _free($3048);
 var $_1=$3043;var $_1536=$3042;label=1129;break;
 case 1120: 
 var $3049=HEAP8[(($2587)>>0)];
 var $3050=$3049&1;
 var $3051=(($3050<<24)>>24)==0;
 if($3051){label=1122;break;}else{label=1121;break;}
 case 1121: 
 var $3053=HEAP32[(($2592)>>2)];
 _free($3053);
 label=1122;break;
 case 1122: 
 var $3054=HEAP8[(($2583)>>0)];
 var $3055=$3054&1;
 var $3056=(($3055<<24)>>24)==0;
 if($3056){label=1124;break;}else{label=1123;break;}
 case 1123: 
 var $3058=HEAP32[(($2593)>>2)];
 _free($3058);
 label=1124;break;
 case 1124: 
 var $3059=HEAP8[(($2570)>>0)];
 var $3060=$3059&1;
 var $3061=(($3060<<24)>>24)==0;
 if($3061){label=1126;break;}else{label=1125;break;}
 case 1125: 
 var $3063=HEAP32[(($2610)>>2)];
 _free($3063);
 label=1126;break;
 case 1126: 
 var $3064=HEAP8[(($2567)>>0)];
 var $3065=$3064&1;
 var $3066=(($3065<<24)>>24)==0;
 if($3066){label=1128;break;}else{label=1127;break;}
 case 1127: 
 var $3068=HEAP32[(($2579)>>2)];
 _free($3068);
 label=1128;break;
 case 1128: 
 var $3069=((($storemerge2)+(1))|0);
 var $storemerge2=$3069;label=947;break;
 case 1129: 
 var $_1536;
 var $_1;
 var $3070=HEAP8[(($2587)>>0)];
 var $3071=$3070&1;
 var $3072=(($3071<<24)>>24)==0;
 if($3072){label=1131;break;}else{label=1130;break;}
 case 1130: 
 var $3074=HEAP32[(($2592)>>2)];
 _free($3074);
 label=1131;break;
 case 1131: 
 var $3075=HEAP8[(($2583)>>0)];
 var $3076=$3075&1;
 var $3077=(($3076<<24)>>24)==0;
 if($3077){label=1133;break;}else{label=1132;break;}
 case 1132: 
 var $3079=HEAP32[(($2593)>>2)];
 _free($3079);
 label=1133;break;
 case 1133: 
 var $3080=HEAP8[(($2570)>>0)];
 var $3081=$3080&1;
 var $3082=(($3081<<24)>>24)==0;
 if($3082){var $_2=$_1;var $_2537=$_1536;label=1135;break;}else{label=1134;break;}
 case 1134: 
 var $3084=HEAP32[(($2610)>>2)];
 _free($3084);
 var $_2=$_1;var $_2537=$_1536;label=1135;break;
 case 1135: 
 var $_2537;
 var $_2;
 var $3085=HEAP8[(($2567)>>0)];
 var $3086=$3085&1;
 var $3087=(($3086<<24)>>24)==0;
 if($3087){var $_3=$_2;var $_3538=$_2537;var $index_sroa_0_7=$index_sroa_0_2;var $index_sroa_22_9=$index_sroa_22_2;var $_pre_phi=$_pre_phi764;label=1175;break;}else{label=1136;break;}
 case 1136: 
 var $3089=HEAP32[(($2579)>>2)];
 _free($3089);
 var $_3=$_2;var $_3538=$_2537;var $index_sroa_0_7=$index_sroa_0_2;var $index_sroa_22_9=$index_sroa_22_2;var $_pre_phi=$_pre_phi764;label=1175;break;
 case 1137: 
 HEAP32[(($966)>>2)]=0;
 var $3091=HEAP32[(($968)>>2)];
 var $_pre743=HEAP32[(($967)>>2)];
 var $vi22_sroa_0_0=$3091;var $3093=0;label=1138;break;
 case 1138: 
 var $3093;
 var $vi22_sroa_0_0;
 var $3094=($vi22_sroa_0_0|0)==($_pre743|0);
 if($3094){label=1142;break;}else{label=1139;break;}
 case 1139: 
 var $3096=(($vi22_sroa_0_0+24)|0);
 var $3097=HEAP32[(($3096)>>2)];
 var $3098=$3097&1;
 var $3099=($3098|0)==0;
 if($3099){label=1140;break;}else{var $3103=$3093;label=1141;break;}
 case 1140: 
 var $3101=((($3093)+(1))|0);
 HEAP32[(($966)>>2)]=$3101;
 var $3103=$3101;label=1141;break;
 case 1141: 
 var $3103;
 var $3104=(($vi22_sroa_0_0+28)|0);
 var $vi22_sroa_0_0=$3104;var $3093=$3103;label=1138;break;
 case 1142: 
 var $3106=(($m+44)|0);
 HEAP32[(($3106)>>2)]=0;
 var $3107=HEAP32[(($1026)>>2)];
 var $_pre744=HEAP32[(($1023)>>2)];
 var $fi23_sroa_0_0=$3107;var $3109=0;label=1143;break;
 case 1143: 
 var $3109;
 var $fi23_sroa_0_0;
 var $3110=($fi23_sroa_0_0|0)==($_pre744|0);
 if($3110){label=1147;break;}else{label=1144;break;}
 case 1144: 
 var $3112=(($fi23_sroa_0_0+28)|0);
 var $3113=HEAP32[(($3112)>>2)];
 var $3114=$3113&1;
 var $3115=($3114|0)==0;
 if($3115){label=1145;break;}else{var $3119=$3109;label=1146;break;}
 case 1145: 
 var $3117=((($3109)+(1))|0);
 HEAP32[(($3106)>>2)]=$3117;
 var $3119=$3117;label=1146;break;
 case 1146: 
 var $3119;
 var $3120=(($fi23_sroa_0_0+32)|0);
 var $fi23_sroa_0_0=$3120;var $3109=$3119;label=1143;break;
 case 1147: 
 var $3122=(($m+64)|0);
 HEAPF32[(($3122)>>2)]=1;
 var $3123=(($m+76)|0);
 HEAPF32[(($3123)>>2)]=-1;
 var $3124=(($m+68)|0);
 HEAPF32[(($3124)>>2)]=1;
 var $3125=(($m+80)|0);
 HEAPF32[(($3125)>>2)]=-1;
 var $3126=(($m+72)|0);
 HEAPF32[(($3126)>>2)]=1;
 var $3127=(($m+84)|0);
 HEAPF32[(($3127)>>2)]=-1;
 var $3128=(($m+64)|0);
 var $3129=(($m+76)|0);
 var $vi_i_sroa_0_0=$3091;var $3136=1;var $3135=-1;var $3134=1;var $3133=-1;var $3132=1;var $3131=-1;label=1148;break;
 case 1148: 
 var $3131;
 var $3132;
 var $3133;
 var $3134;
 var $3135;
 var $3136;
 var $vi_i_sroa_0_0;
 var $3137=($vi_i_sroa_0_0|0)==($_pre743|0);
 if($3137){var $_0541=0;var $index_sroa_0_6=$index_sroa_0_2;var $index_sroa_22_8=$index_sroa_22_2;label=1165;break;}else{label=1149;break;}
 case 1149: 
 var $3139=(($vi_i_sroa_0_0+24)|0);
 var $3140=HEAP32[(($3139)>>2)];
 var $3141=$3140&1;
 var $3142=($3141|0)==0;
 if($3142){label=1150;break;}else{var $3181=$3136;var $3180=$3135;var $3179=$3134;var $3178=$3133;var $3177=$3132;var $3176=$3131;label=1164;break;}
 case 1150: 
 var $3144=(($vi_i_sroa_0_0)|0);
 var $3145=HEAPF32[(($3144)>>2)];
 var $3146=(($vi_i_sroa_0_0+4)|0);
 var $3147=HEAPF32[(($3146)>>2)];
 var $3148=(($vi_i_sroa_0_0+8)|0);
 var $3149=HEAPF32[(($3148)>>2)];
 var $3150=$3136>$3135;
 var $3151=$3134>$3133;
 var $or_cond818=$3150|$3151;
 var $3152=$3132>$3131;
 var $or_cond819=$or_cond818|$3152;
 if($or_cond819){label=1151;break;}else{label=1152;break;}
 case 1151: 
 HEAPF32[(($3129)>>2)]=$3145;
 HEAPF32[(($3125)>>2)]=$3147;
 HEAPF32[(($3127)>>2)]=$3149;
 HEAPF32[(($3128)>>2)]=$3145;
 HEAPF32[(($3124)>>2)]=$3147;
 HEAPF32[(($3126)>>2)]=$3149;
 var $3181=$3145;var $3180=$3145;var $3179=$3147;var $3178=$3147;var $3177=$3149;var $3176=$3149;label=1164;break;
 case 1152: 
 var $3154=$3136>$3145;
 if($3154){label=1153;break;}else{var $3157=$3136;label=1154;break;}
 case 1153: 
 HEAPF32[(($3128)>>2)]=$3145;
 var $3157=$3145;label=1154;break;
 case 1154: 
 var $3157;
 var $3158=$3134>$3147;
 if($3158){label=1155;break;}else{var $3161=$3134;label=1156;break;}
 case 1155: 
 HEAPF32[(($3124)>>2)]=$3147;
 var $3161=$3147;label=1156;break;
 case 1156: 
 var $3161;
 var $3162=$3132>$3149;
 if($3162){label=1157;break;}else{var $3165=$3132;label=1158;break;}
 case 1157: 
 HEAPF32[(($3126)>>2)]=$3149;
 var $3165=$3149;label=1158;break;
 case 1158: 
 var $3165;
 var $3166=$3135<$3145;
 if($3166){label=1159;break;}else{var $3169=$3135;label=1160;break;}
 case 1159: 
 HEAPF32[(($3123)>>2)]=$3145;
 var $3169=$3145;label=1160;break;
 case 1160: 
 var $3169;
 var $3170=$3133<$3147;
 if($3170){label=1161;break;}else{var $3173=$3133;label=1162;break;}
 case 1161: 
 HEAPF32[(($3125)>>2)]=$3147;
 var $3173=$3147;label=1162;break;
 case 1162: 
 var $3173;
 var $3174=$3131<$3149;
 if($3174){label=1163;break;}else{var $3181=$3157;var $3180=$3169;var $3179=$3161;var $3178=$3173;var $3177=$3165;var $3176=$3131;label=1164;break;}
 case 1163: 
 HEAPF32[(($3127)>>2)]=$3149;
 var $3181=$3157;var $3180=$3169;var $3179=$3161;var $3178=$3173;var $3177=$3165;var $3176=$3149;label=1164;break;
 case 1164: 
 var $3176;
 var $3177;
 var $3178;
 var $3179;
 var $3180;
 var $3181;
 var $3182=(($vi_i_sroa_0_0+28)|0);
 var $vi_i_sroa_0_0=$3182;var $3136=$3181;var $3135=$3180;var $3134=$3179;var $3133=$3178;var $3132=$3177;var $3131=$3176;label=1148;break;
 case 1165: 
 var $index_sroa_22_8;
 var $index_sroa_0_6;
 var $_0541;
 var $3184=(($FPV)|0);
 var $3185=HEAP32[(($3184)>>2)];
 var $3186=($3185|0)==0;
 if($3186){label=1170;break;}else{label=1166;break;}
 case 1166: 
 var $3188=(($FPV+4)|0);
 var $_pre724=HEAP32[(($3188)>>2)];
 var $3190=$_pre724;label=1167;break;
 case 1167: 
 var $3190;
 var $3191=($3185|0)==($3190|0);
 if($3191){label=1169;break;}else{label=1168;break;}
 case 1168: 
 var $3193=((($3190)-(44))|0);
 HEAP32[(($3188)>>2)]=$3193;
 var $3190=$3193;label=1167;break;
 case 1169: 
 var $3194=$3185;
 _free($3194);
 label=1170;break;
 case 1170: 
 var $3195=(($VPV)|0);
 var $3196=HEAP32[(($3195)>>2)];
 var $3197=($3196|0)==0;
 if($3197){var $_1542=$_0541;var $index_sroa_0_9=$index_sroa_0_6;var $index_sroa_22_11=$index_sroa_22_8;label=1185;break;}else{label=1171;break;}
 case 1171: 
 var $3199=(($VPV+4)|0);
 var $_pre723=HEAP32[(($3199)>>2)];
 var $3201=$_pre723;label=1172;break;
 case 1172: 
 var $3201;
 var $3202=($3196|0)==($3201|0);
 if($3202){label=1174;break;}else{label=1173;break;}
 case 1173: 
 var $3204=((($3201)-(44))|0);
 HEAP32[(($3199)>>2)]=$3204;
 var $3201=$3204;label=1172;break;
 case 1174: 
 var $3205=$3196;
 _free($3205);
 var $_1542=$_0541;var $index_sroa_0_9=$index_sroa_0_6;var $index_sroa_22_11=$index_sroa_22_8;label=1185;break;
 case 1175: 
 var $_pre_phi;
 var $index_sroa_22_9;
 var $index_sroa_0_7;
 var $_3538;
 var $_3;
 var $3206=HEAP32[(($_pre_phi)>>2)];
 var $3207=($3206|0)==0;
 if($3207){var $_4=$_3;var $_4539=$_3538;var $index_sroa_0_8=$index_sroa_0_7;var $index_sroa_22_10=$index_sroa_22_9;label=1180;break;}else{label=1176;break;}
 case 1176: 
 var $3209=(($FPV+4)|0);
 var $_pre725=HEAP32[(($3209)>>2)];
 var $3211=$_pre725;label=1177;break;
 case 1177: 
 var $3211;
 var $3212=($3206|0)==($3211|0);
 if($3212){label=1179;break;}else{label=1178;break;}
 case 1178: 
 var $3214=((($3211)-(44))|0);
 HEAP32[(($3209)>>2)]=$3214;
 var $3211=$3214;label=1177;break;
 case 1179: 
 var $3215=$3206;
 _free($3215);
 var $_4=$_3;var $_4539=$_3538;var $index_sroa_0_8=$index_sroa_0_7;var $index_sroa_22_10=$index_sroa_22_9;label=1180;break;
 case 1180: 
 var $index_sroa_22_10;
 var $index_sroa_0_8;
 var $_4539;
 var $_4;
 var $3216=(($VPV)|0);
 var $3217=HEAP32[(($3216)>>2)];
 var $3218=($3217|0)==0;
 if($3218){var $_5=$_4;var $_5540=$_4539;var $index_sroa_0_10=$index_sroa_0_8;var $index_sroa_22_13=$index_sroa_22_10;label=1195;break;}else{label=1181;break;}
 case 1181: 
 var $3220=(($VPV+4)|0);
 var $_pre745=HEAP32[(($3220)>>2)];
 var $3222=$_pre745;label=1182;break;
 case 1182: 
 var $3222;
 var $3223=($3217|0)==($3222|0);
 if($3223){label=1184;break;}else{label=1183;break;}
 case 1183: 
 var $3225=((($3222)-(44))|0);
 HEAP32[(($3220)>>2)]=$3225;
 var $3222=$3225;label=1182;break;
 case 1184: 
 var $3226=$3217;
 _free($3226);
 var $_5=$_4;var $_5540=$_4539;var $index_sroa_0_10=$index_sroa_0_8;var $index_sroa_22_13=$index_sroa_22_10;label=1195;break;
 case 1185: 
 var $index_sroa_22_11;
 var $index_sroa_0_9;
 var $_1542;
 __ZN3vcg3ply7PlyFileD2Ev($pf);
 var $3227=HEAP32[(($17)>>2)];
 var $3228=($3227|0)==0;
 if($3228){label=1190;break;}else{label=1186;break;}
 case 1186: 
 var $_pre721=HEAP32[(($18)>>2)];
 var $3231=$_pre721;label=1187;break;
 case 1187: 
 var $3231;
 var $3232=($3227|0)==($3231|0);
 if($3232){label=1189;break;}else{label=1188;break;}
 case 1188: 
 var $3234=((($3231)-(4))|0);
 HEAP32[(($18)>>2)]=$3234;
 var $3231=$3234;label=1187;break;
 case 1189: 
 var $3235=$3227;
 _free($3235);
 label=1190;break;
 case 1190: 
 var $3236=($index_sroa_0_9|0)==0;
 if($3236){label=1194;break;}else{var $index_sroa_22_12=$index_sroa_22_11;label=1191;break;}
 case 1191: 
 var $index_sroa_22_12;
 var $3238=($index_sroa_0_9|0)==($index_sroa_22_12|0);
 if($3238){label=1193;break;}else{label=1192;break;}
 case 1192: 
 var $3240=((($index_sroa_22_12)-(4))|0);
 var $index_sroa_22_12=$3240;label=1191;break;
 case 1193: 
 var $3241=$index_sroa_0_9;
 _free($3241);
 label=1194;break;
 case 1194: 
 STACKTOP=sp;return $_1542;
 case 1195: 
 var $index_sroa_22_13;
 var $index_sroa_0_10;
 var $_5540;
 var $_5;
 __ZN3vcg3ply7PlyFileD2Ev($pf);
 var $3242=HEAP32[(($17)>>2)];
 var $3243=($3242|0)==0;
 if($3243){label=1200;break;}else{label=1196;break;}
 case 1196: 
 var $_pre750=HEAP32[(($18)>>2)];
 var $3246=$_pre750;label=1197;break;
 case 1197: 
 var $3246;
 var $3247=($3242|0)==($3246|0);
 if($3247){label=1199;break;}else{label=1198;break;}
 case 1198: 
 var $3249=((($3246)-(4))|0);
 HEAP32[(($18)>>2)]=$3249;
 var $3246=$3249;label=1197;break;
 case 1199: 
 var $3250=$3242;
 _free($3250);
 label=1200;break;
 case 1200: 
 var $3251=($index_sroa_0_10|0)==0;
 if($3251){label=1204;break;}else{var $index_sroa_22_14=$index_sroa_22_13;label=1201;break;}
 case 1201: 
 var $index_sroa_22_14;
 var $3253=($index_sroa_0_10|0)==($index_sroa_22_14|0);
 if($3253){label=1203;break;}else{label=1202;break;}
 case 1202: 
 var $3255=((($index_sroa_22_14)-(4))|0);
 var $index_sroa_22_14=$3255;label=1201;break;
 case 1203: 
 var $3256=$index_sroa_0_10;
 _free($3256);
 label=1204;break;
 case 1204: 
 var $3258$0=$_5540;
 var $3258$1=0;
 var $3259$0=$3258$0;
 var $3259$1=$_5;
 ___resumeException($3259$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply7PlyFile9AddToReadERKNS0_14PropDescriptorE($this,$p){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($p+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($p+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($p+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($p+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($p+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($p+24)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($p+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($p+32)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($p+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($2|0)==0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 ___assert_fail(4128,6944,1310,12352);
 throw "Reached an unreachable!";
 case 3: 
 var $24=(($this)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($this+4)|0);
 var $i_i_i_sroa_0_0=$25;label=4;break;
 case 4: 
 var $i_i_i_sroa_0_0;
 var $28=HEAP32[(($26)>>2)];
 var $29=($i_i_i_sroa_0_0|0)==($28|0);
 if($29){label=8;break;}else{label=5;break;}
 case 5: 
 var $31=(($i_i_i_sroa_0_0)|0);
 var $32=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($31,$2);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=6;break;}
 case 6: 
 var $35=(($i_i_i_sroa_0_0+28)|0);
 var $i_i_i_sroa_0_0=$35;label=4;break;
 case 7: 
 var $36=($i_i_i_sroa_0_0|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=(($this+32)|0);
 HEAP32[(($37)>>2)]=8;
 var $_0=-1;label=28;break;
 case 9: 
 var $39=($4|0)==0;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 ___assert_fail(5720,6944,892,12352);
 throw "Reached an unreachable!";
 case 11: 
 var $42=(($i_i_i_sroa_0_0+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($i_i_i_sroa_0_0+20)|0);
 var $i_i_i_i_sroa_0_0=$43;label=12;break;
 case 12: 
 var $i_i_i_i_sroa_0_0;
 var $46=HEAP32[(($44)>>2)];
 var $47=($i_i_i_i_sroa_0_0|0)==($46|0);
 if($47){var $_ph=9;label=27;break;}else{label=13;break;}
 case 13: 
 var $49=(($i_i_i_i_sroa_0_0)|0);
 var $50=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($49,$4);
 var $51=($50|0)==0;
 if($51){label=15;break;}else{label=14;break;}
 case 14: 
 var $53=(($i_i_i_i_sroa_0_0+76)|0);
 var $i_i_i_i_sroa_0_0=$53;label=12;break;
 case 15: 
 var $54=($i_i_i_i_sroa_0_0|0)==0;
 if($54){var $_ph=9;label=27;break;}else{label=16;break;}
 case 16: 
 var $56=($6|0)<1;
 var $57=($6|0)>8;
 var $or_cond=$56|$57;
 var $58=($8|0)<1;
 var $or_cond1=$or_cond|$58;
 var $59=($8|0)>8;
 var $or_cond2=$or_cond1|$59;
 if($or_cond2){var $_ph=10;label=27;break;}else{label=17;break;}
 case 17: 
 var $61=($12|0)==0;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $63=($16|0)<1;
 var $64=($16|0)>8;
 var $or_cond3=$63|$64;
 var $65=($18|0)<1;
 var $or_cond4=$or_cond3|$65;
 var $66=($18|0)>8;
 var $or_cond5=$or_cond4|$66;
 if($or_cond5){var $_ph=10;label=27;break;}else{label=19;break;}
 case 19: 
 var $68=(($i_i_i_i_sroa_0_0+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($12|0)==($69|0);
 if($70){label=20;break;}else{var $_ph=11;label=27;break;}
 case 20: 
 var $72=(($i_i_i_i_sroa_0_0+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($6|0)==($73|0);
 if($74){label=21;break;}else{var $_ph=11;label=27;break;}
 case 21: 
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $77=(($i_i_i_i_sroa_0_0+20)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($16|0)==($78|0);
 if($79){label=23;break;}else{var $_ph=11;label=27;break;}
 case 23: 
 var $81=((28624+((($6)*(9))&-1)+$6)|0);
 var $82=HEAP8[(($81)>>0)];
 var $83=(($82<<24)>>24)==0;
 if($83){var $_ph=12;label=27;break;}else{label=24;break;}
 case 24: 
 if($61){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=(($i_i_i_i_sroa_0_0+20)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=((28624+((($87)*(9))&-1)+$16)|0);
 var $89=HEAP8[(($88)>>0)];
 var $90=(($89<<24)>>24)==0;
 if($90){var $_ph=12;label=27;break;}else{label=26;break;}
 case 26: 
 var $92=(($i_i_i_i_sroa_0_0+24)|0);
 HEAP32[(($92)>>2)]=1;
 var $93=(($i_i_i_i_sroa_0_0+36)|0);
 HEAP32[(($93)>>2)]=$6;
 var $94=(($i_i_i_i_sroa_0_0+40)|0);
 HEAP32[(($94)>>2)]=$8;
 var $95=(($i_i_i_i_sroa_0_0+44)|0);
 HEAP32[(($95)>>2)]=$10;
 var $96=(($i_i_i_i_sroa_0_0+48)|0);
 HEAP32[(($96)>>2)]=$12;
 var $97=(($i_i_i_i_sroa_0_0+52)|0);
 HEAP32[(($97)>>2)]=$14;
 var $98=(($i_i_i_i_sroa_0_0+56)|0);
 HEAP32[(($98)>>2)]=$16;
 var $99=(($i_i_i_i_sroa_0_0+60)|0);
 HEAP32[(($99)>>2)]=$18;
 var $100=(($i_i_i_i_sroa_0_0+64)|0);
 HEAP32[(($100)>>2)]=$20;
 var $_0=0;label=28;break;
 case 27: 
 var $_ph;
 var $102=(($this+32)|0);
 HEAP32[(($102)>>2)]=$_ph;
 var $_0=-1;label=28;break;
 case 28: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3tri2io11ImporterPLYI6MyMeshE8VertDescEi($i){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((34568)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(34568);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[((31616)>>2)]=8968;
 HEAP32[((31620)>>2)]=2880;
 HEAP32[((31624)>>2)]=7;
 HEAP32[((31628)>>2)]=7;
 HEAP32[((31632)>>2)]=0; HEAP32[((31636)>>2)]=0; HEAP32[((31640)>>2)]=0; HEAP32[((31644)>>2)]=0; HEAP32[((31648)>>2)]=0; HEAP32[((31652)>>2)]=0; HEAP32[((31656)>>2)]=0;
 HEAP32[((31660)>>2)]=8968;
 HEAP32[((31664)>>2)]=7672;
 HEAP32[((31668)>>2)]=7;
 HEAP32[((31672)>>2)]=7;
 HEAP32[((31676)>>2)]=4;
 HEAP32[((31680)>>2)]=0; HEAP32[((31684)>>2)]=0; HEAP32[((31688)>>2)]=0; HEAP32[((31692)>>2)]=0; HEAP32[((31696)>>2)]=0; HEAP32[((31700)>>2)]=0;
 HEAP32[((31704)>>2)]=8968;
 HEAP32[((31708)>>2)]=7656;
 HEAP32[((31712)>>2)]=7;
 HEAP32[((31716)>>2)]=7;
 HEAP32[((31720)>>2)]=8;
 HEAP32[((31724)>>2)]=0; HEAP32[((31728)>>2)]=0; HEAP32[((31732)>>2)]=0; HEAP32[((31736)>>2)]=0; HEAP32[((31740)>>2)]=0; HEAP32[((31744)>>2)]=0;
 HEAP32[((31748)>>2)]=8968;
 HEAP32[((31752)>>2)]=7904;
 HEAP32[((31756)>>2)]=3;
 HEAP32[((31760)>>2)]=3;
 HEAP32[((31764)>>2)]=24;
 HEAP32[((31768)>>2)]=0; HEAP32[((31772)>>2)]=0; HEAP32[((31776)>>2)]=0; HEAP32[((31780)>>2)]=0; HEAP32[((31784)>>2)]=0; HEAP32[((31788)>>2)]=0;
 HEAP32[((31792)>>2)]=8968;
 HEAP32[((31796)>>2)]=7888;
 HEAP32[((31800)>>2)]=7;
 HEAP32[((31804)>>2)]=7;
 HEAP32[((31808)>>2)]=28;
 HEAP32[((31812)>>2)]=0; HEAP32[((31816)>>2)]=0; HEAP32[((31820)>>2)]=0; HEAP32[((31824)>>2)]=0; HEAP32[((31828)>>2)]=0; HEAP32[((31832)>>2)]=0;
 HEAP32[((31836)>>2)]=8968;
 HEAP32[((31840)>>2)]=7784;
 HEAP32[((31844)>>2)]=4;
 HEAP32[((31848)>>2)]=4;
 HEAP32[((31852)>>2)]=36;
 HEAP32[((31856)>>2)]=0; HEAP32[((31860)>>2)]=0; HEAP32[((31864)>>2)]=0; HEAP32[((31868)>>2)]=0; HEAP32[((31872)>>2)]=0; HEAP32[((31876)>>2)]=0;
 HEAP32[((31880)>>2)]=8968;
 HEAP32[((31884)>>2)]=7760;
 HEAP32[((31888)>>2)]=4;
 HEAP32[((31892)>>2)]=4;
 HEAP32[((31896)>>2)]=37;
 HEAP32[((31900)>>2)]=0; HEAP32[((31904)>>2)]=0; HEAP32[((31908)>>2)]=0; HEAP32[((31912)>>2)]=0; HEAP32[((31916)>>2)]=0; HEAP32[((31920)>>2)]=0;
 HEAP32[((31924)>>2)]=8968;
 HEAP32[((31928)>>2)]=7752;
 HEAP32[((31932)>>2)]=4;
 HEAP32[((31936)>>2)]=4;
 HEAP32[((31940)>>2)]=38;
 HEAP32[((31944)>>2)]=0; HEAP32[((31948)>>2)]=0; HEAP32[((31952)>>2)]=0; HEAP32[((31956)>>2)]=0; HEAP32[((31960)>>2)]=0; HEAP32[((31964)>>2)]=0;
 HEAP32[((31968)>>2)]=8968;
 HEAP32[((31972)>>2)]=7632;
 HEAP32[((31976)>>2)]=4;
 HEAP32[((31980)>>2)]=4;
 HEAP32[((31984)>>2)]=36;
 HEAP32[((31988)>>2)]=0; HEAP32[((31992)>>2)]=0; HEAP32[((31996)>>2)]=0; HEAP32[((32000)>>2)]=0; HEAP32[((32004)>>2)]=0; HEAP32[((32008)>>2)]=0;
 HEAP32[((32012)>>2)]=8968;
 HEAP32[((32016)>>2)]=7608;
 HEAP32[((32020)>>2)]=4;
 HEAP32[((32024)>>2)]=4;
 HEAP32[((32028)>>2)]=37;
 HEAP32[((32032)>>2)]=0; HEAP32[((32036)>>2)]=0; HEAP32[((32040)>>2)]=0; HEAP32[((32044)>>2)]=0; HEAP32[((32048)>>2)]=0; HEAP32[((32052)>>2)]=0;
 HEAP32[((32056)>>2)]=8968;
 HEAP32[((32060)>>2)]=7568;
 HEAP32[((32064)>>2)]=4;
 HEAP32[((32068)>>2)]=4;
 HEAP32[((32072)>>2)]=38;
 HEAP32[((32076)>>2)]=0; HEAP32[((32080)>>2)]=0; HEAP32[((32084)>>2)]=0; HEAP32[((32088)>>2)]=0; HEAP32[((32092)>>2)]=0; HEAP32[((32096)>>2)]=0;
 HEAP32[((32100)>>2)]=8968;
 HEAP32[((32104)>>2)]=7544;
 HEAP32[((32108)>>2)]=7;
 HEAP32[((32112)>>2)]=7;
 HEAP32[((32116)>>2)]=28;
 HEAP32[((32120)>>2)]=0; HEAP32[((32124)>>2)]=0; HEAP32[((32128)>>2)]=0; HEAP32[((32132)>>2)]=0; HEAP32[((32136)>>2)]=0; HEAP32[((32140)>>2)]=0;
 HEAP32[((32144)>>2)]=8968;
 HEAP32[((32148)>>2)]=7528;
 HEAP32[((32152)>>2)]=7;
 HEAP32[((32156)>>2)]=7;
 HEAP32[((32160)>>2)]=12;
 HEAP32[((32164)>>2)]=0; HEAP32[((32168)>>2)]=0; HEAP32[((32172)>>2)]=0; HEAP32[((32176)>>2)]=0; HEAP32[((32180)>>2)]=0; HEAP32[((32184)>>2)]=0;
 HEAP32[((32188)>>2)]=8968;
 HEAP32[((32192)>>2)]=7512;
 HEAP32[((32196)>>2)]=7;
 HEAP32[((32200)>>2)]=7;
 HEAP32[((32204)>>2)]=16;
 HEAP32[((32208)>>2)]=0; HEAP32[((32212)>>2)]=0; HEAP32[((32216)>>2)]=0; HEAP32[((32220)>>2)]=0; HEAP32[((32224)>>2)]=0; HEAP32[((32228)>>2)]=0;
 HEAP32[((32232)>>2)]=8968;
 HEAP32[((32236)>>2)]=7480;
 HEAP32[((32240)>>2)]=7;
 HEAP32[((32244)>>2)]=7;
 HEAP32[((32248)>>2)]=20;
 HEAP32[((32252)>>2)]=0; HEAP32[((32256)>>2)]=0; HEAP32[((32260)>>2)]=0; HEAP32[((32264)>>2)]=0; HEAP32[((32268)>>2)]=0; HEAP32[((32272)>>2)]=0;
 HEAP32[((32276)>>2)]=8968;
 HEAP32[((32280)>>2)]=7440;
 HEAP32[((32284)>>2)]=7;
 HEAP32[((32288)>>2)]=7;
 HEAP32[((32292)>>2)]=296;
 HEAP32[((32296)>>2)]=0; HEAP32[((32300)>>2)]=0; HEAP32[((32304)>>2)]=0; HEAP32[((32308)>>2)]=0; HEAP32[((32312)>>2)]=0; HEAP32[((32316)>>2)]=0;
 HEAP32[((32320)>>2)]=8968;
 HEAP32[((32324)>>2)]=7400;
 HEAP32[((32328)>>2)]=7;
 HEAP32[((32332)>>2)]=7;
 HEAP32[((32336)>>2)]=300;
 HEAP32[((32340)>>2)]=0; HEAP32[((32344)>>2)]=0; HEAP32[((32348)>>2)]=0; HEAP32[((32352)>>2)]=0; HEAP32[((32356)>>2)]=0; HEAP32[((32360)>>2)]=0;
 HEAP32[((32364)>>2)]=8968;
 HEAP32[((32368)>>2)]=7360;
 HEAP32[((32372)>>2)]=7;
 HEAP32[((32376)>>2)]=7;
 HEAP32[((32380)>>2)]=304;
 HEAP32[((32384)>>2)]=0; HEAP32[((32388)>>2)]=0; HEAP32[((32392)>>2)]=0; HEAP32[((32396)>>2)]=0; HEAP32[((32400)>>2)]=0; HEAP32[((32404)>>2)]=0;
 HEAP32[((32408)>>2)]=8968;
 HEAP32[((32412)>>2)]=7336;
 HEAP32[((32416)>>2)]=7;
 HEAP32[((32420)>>2)]=7;
 HEAP32[((32424)>>2)]=308;
 HEAP32[((32428)>>2)]=0; HEAP32[((32432)>>2)]=0; HEAP32[((32436)>>2)]=0; HEAP32[((32440)>>2)]=0; HEAP32[((32444)>>2)]=0; HEAP32[((32448)>>2)]=0;
 HEAP32[((32452)>>2)]=8968;
 HEAP32[((32456)>>2)]=7288;
 HEAP32[((32460)>>2)]=7;
 HEAP32[((32464)>>2)]=7;
 HEAP32[((32468)>>2)]=32;
 HEAP32[((32472)>>2)]=0; HEAP32[((32476)>>2)]=0; HEAP32[((32480)>>2)]=0; HEAP32[((32484)>>2)]=0; HEAP32[((32488)>>2)]=0; HEAP32[((32492)>>2)]=0;
 HEAP32[((32496)>>2)]=8968;
 HEAP32[((32500)>>2)]=3000;
 HEAP32[((32504)>>2)]=7;
 HEAP32[((32508)>>2)]=7;
 HEAP32[((32512)>>2)]=300;
 HEAP32[((32516)>>2)]=0; HEAP32[((32520)>>2)]=0; HEAP32[((32524)>>2)]=0; HEAP32[((32528)>>2)]=0; HEAP32[((32532)>>2)]=0; HEAP32[((32536)>>2)]=0;
 HEAP32[((32540)>>2)]=8968;
 HEAP32[((32544)>>2)]=7224;
 HEAP32[((32548)>>2)]=7;
 HEAP32[((32552)>>2)]=7;
 HEAP32[((32556)>>2)]=304;
 HEAP32[((32560)>>2)]=0; HEAP32[((32564)>>2)]=0; HEAP32[((32568)>>2)]=0; HEAP32[((32572)>>2)]=0; HEAP32[((32576)>>2)]=0; HEAP32[((32580)>>2)]=0;
 HEAP32[((32584)>>2)]=8968;
 HEAP32[((32588)>>2)]=2880;
 HEAP32[((32592)>>2)]=8;
 HEAP32[((32596)>>2)]=7;
 HEAP32[((32600)>>2)]=0; HEAP32[((32604)>>2)]=0; HEAP32[((32608)>>2)]=0; HEAP32[((32612)>>2)]=0; HEAP32[((32616)>>2)]=0; HEAP32[((32620)>>2)]=0; HEAP32[((32624)>>2)]=0;
 HEAP32[((32628)>>2)]=8968;
 HEAP32[((32632)>>2)]=7672;
 HEAP32[((32636)>>2)]=8;
 HEAP32[((32640)>>2)]=7;
 HEAP32[((32644)>>2)]=4;
 HEAP32[((32648)>>2)]=0; HEAP32[((32652)>>2)]=0; HEAP32[((32656)>>2)]=0; HEAP32[((32660)>>2)]=0; HEAP32[((32664)>>2)]=0; HEAP32[((32668)>>2)]=0;
 HEAP32[((32672)>>2)]=8968;
 HEAP32[((32676)>>2)]=7656;
 HEAP32[((32680)>>2)]=8;
 HEAP32[((32684)>>2)]=7;
 HEAP32[((32688)>>2)]=8;
 HEAP32[((32692)>>2)]=0; HEAP32[((32696)>>2)]=0; HEAP32[((32700)>>2)]=0; HEAP32[((32704)>>2)]=0; HEAP32[((32708)>>2)]=0; HEAP32[((32712)>>2)]=0;
 HEAP32[((32716)>>2)]=8968;
 HEAP32[((32720)>>2)]=7528;
 HEAP32[((32724)>>2)]=8;
 HEAP32[((32728)>>2)]=7;
 HEAP32[((32732)>>2)]=12;
 HEAP32[((32736)>>2)]=0; HEAP32[((32740)>>2)]=0; HEAP32[((32744)>>2)]=0; HEAP32[((32748)>>2)]=0; HEAP32[((32752)>>2)]=0; HEAP32[((32756)>>2)]=0;
 HEAP32[((32760)>>2)]=8968;
 HEAP32[((32764)>>2)]=7512;
 HEAP32[((32768)>>2)]=8;
 HEAP32[((32772)>>2)]=7;
 HEAP32[((32776)>>2)]=16;
 HEAP32[((32780)>>2)]=0; HEAP32[((32784)>>2)]=0; HEAP32[((32788)>>2)]=0; HEAP32[((32792)>>2)]=0; HEAP32[((32796)>>2)]=0; HEAP32[((32800)>>2)]=0;
 HEAP32[((32804)>>2)]=8968;
 HEAP32[((32808)>>2)]=7480;
 HEAP32[((32812)>>2)]=8;
 HEAP32[((32816)>>2)]=7;
 HEAP32[((32820)>>2)]=20;
 HEAP32[((32824)>>2)]=0; HEAP32[((32828)>>2)]=0; HEAP32[((32832)>>2)]=0; HEAP32[((32836)>>2)]=0; HEAP32[((32840)>>2)]=0; HEAP32[((32844)>>2)]=0;
 HEAP32[((32848)>>2)]=8968;
 HEAP32[((32852)>>2)]=7440;
 HEAP32[((32856)>>2)]=8;
 HEAP32[((32860)>>2)]=7;
 HEAP32[((32864)>>2)]=296;
 HEAP32[((32868)>>2)]=0; HEAP32[((32872)>>2)]=0; HEAP32[((32876)>>2)]=0; HEAP32[((32880)>>2)]=0; HEAP32[((32884)>>2)]=0; HEAP32[((32888)>>2)]=0;
 HEAP32[((32892)>>2)]=8968;
 HEAP32[((32896)>>2)]=7888;
 HEAP32[((32900)>>2)]=8;
 HEAP32[((32904)>>2)]=7;
 HEAP32[((32908)>>2)]=28;
 HEAP32[((32912)>>2)]=0; HEAP32[((32916)>>2)]=0; HEAP32[((32920)>>2)]=0; HEAP32[((32924)>>2)]=0; HEAP32[((32928)>>2)]=0; HEAP32[((32932)>>2)]=0;

 label=4;break;
 case 4: 
 var $8=((31616+((($i)*(44))&-1))|0);
 return $8;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16vectorIN3vcg3ply14PropDescriptorENS_9allocatorIS3_EEEC2Ej($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=($__n|0)==0;
 if($4){label=31;break;}else{label=2;break;}
 case 2: 
 var $6=($__n>>>0)>97612893;
 if($6){label=3;break;}else{label=14;break;}
 case 3: 
 var $7=___cxa_allocate_exception(8);
 var $8=$7;
 HEAP32[(($8)>>2)]=15352;
 var $9=(($7+4)|0);
 var $10=_strlen(1736);
 var $11=((($10)+(13))|0);
 var $12=($11|0)==0;
 var $_size_i1_i=($12?1:$11);
 var $13=_malloc($_size_i1_i);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{var $_lcssa_i3_i=$13;label=9;break;}
 case 4: 
 var $15=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $16=($15|0)==0;
 if($16){label=7;break;}else{label=5;break;}
 case 5: 
 var $18=$15;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $19=_malloc($_size_i1_i);
 var $20=($19|0)==0;
 if($20){label=4;break;}else{var $_lcssa_i3_i=$19;label=9;break;}
 case 7: 
 var $22=___cxa_allocate_exception(4);
 var $23=$22;
 HEAP32[(($23)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($22,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $_lcssa_i3_i;
 var $24=$_lcssa_i3_i;
 HEAP32[(($24)>>2)]=$10;
 var $25=(($_lcssa_i3_i+4)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=$10;
 var $27=(($_lcssa_i3_i+8)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=0;
 var $29=(($_lcssa_i3_i+12)|0);
 var $30=((($10)+(1))|0);
 assert($30 % 1 === 0);(_memcpy($29, 1736, $30)|0);
 var $31=$9;
 HEAP32[(($31)>>2)]=$29;
 HEAP32[(($8)>>2)]=15320;
 (function() { try { __THREW__ = 0; return ___cxa_throw($7,26160,(482)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=25;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=13;break;
 case 13: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($7);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=26;break;
 case 14: 
 var $34=((($__n)*(44))&-1);
 var $35=($34|0)==0;
 var $_size_i_i=($35?1:$34);
 var $36=_malloc($_size_i_i);
 var $37=($36|0)==0;
 if($37){label=15;break;}else{var $_lcssa_i_i=$36;label=20;break;}
 case 15: 
 var $38=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=16;break;}
 case 16: 
 var $41=$38;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=24;break; }
 case 17: 
 var $42=_malloc($_size_i_i);
 var $43=($42|0)==0;
 if($43){label=15;break;}else{var $_lcssa_i_i=$42;label=20;break;}
 case 18: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=15192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,26096,(782)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=25;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $_lcssa_i_i;
 var $47=$_lcssa_i_i;
 HEAP32[(($2)>>2)]=$47;
 HEAP32[(($1)>>2)]=$47;
 var $48=(($47+((($__n)*(44))&-1))|0);
 HEAP32[(($3)>>2)]=$48;
 var $_0=$__n;var $50=$47;label=21;break;
 case 21: 
 var $50;
 var $_0;
 var $51=($50|0)==0;
 if($51){var $54=0;label=23;break;}else{label=22;break;}
 case 22: 
 var $53=$50;
 _memset($53, 0, 44)|0;
 var $_pre9=HEAP32[(($2)>>2)];
 var $54=$_pre9;label=23;break;
 case 23: 
 var $54;
 var $55=(($54+44)|0);
 HEAP32[(($2)>>2)]=$55;
 var $56=((($_0)-(1))|0);
 var $57=($56|0)==0;
 if($57){label=31;break;}else{var $_0=$56;var $50=$55;label=21;break;}
 case 24: 
 var $lpad_loopexit5$0 = ___cxa_find_matching_catch(); var $lpad_loopexit5$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit5$1;var $eh_lpad_body$0=$lpad_loopexit5$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit6$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit6$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit6$1;var $eh_lpad_body$0=$lpad_nonloopexit6$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $58=HEAP32[(($1)>>2)];
 var $59=($58|0)==0;
 if($59){label=32;break;}else{label=27;break;}
 case 27: 
 var $_pre=HEAP32[(($2)>>2)];
 var $62=$_pre;label=28;break;
 case 28: 
 var $62;
 var $63=($58|0)==($62|0);
 if($63){label=30;break;}else{label=29;break;}
 case 29: 
 var $65=((($62)-(44))|0);
 HEAP32[(($2)>>2)]=$65;
 var $62=$65;label=28;break;
 case 30: 
 var $66=$58;
 _free($66);
 label=32;break;
 case 31: 
 return;
 case 32: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN3vcg3ply7PlyFile13SetCurElementEi($this,$i){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($i|0)<0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=(((($9|0))/(28))&-1);
 var $11=($10|0)>($i|0);
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($this+52)|0);
 HEAP32[(($13)>>2)]=0;
 label=173;break;
 case 4: 
 var $15=(($6+((($i)*(28))&-1))|0);
 var $16=(($this+52)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($6+((($i)*(28))&-1)+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($6+((($i)*(28))&-1)+20)|0);
 var $20=(($this+36)|0);
 var $i_i_sroa_0_0=$18;label=5;break;
 case 5: 
 var $i_i_sroa_0_0;
 var $22=HEAP32[(($19)>>2)];
 var $23=($i_i_sroa_0_0|0)==($22|0);
 if($23){label=173;break;}else{label=6;break;}
 case 6: 
 var $25=HEAP32[(($20)>>2)];
 var $26=(($i_i_sroa_0_0+68)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=HEAP32[(($20)>>2)];
 var $28=($27|0)==1;
 var $29=(($i_i_sroa_0_0+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 var $32=(($i_i_sroa_0_0+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($28){label=7;break;}else{label=17;break;}
 case 7: 
 if($31){label=11;break;}else{label=8;break;}
 case 8: 
 var $37=(($i_i_sroa_0_0+72)|0);
 if($34){label=10;break;}else{label=9;break;}
 case 9: 
 HEAP32[(($37)>>2)]=1190;
 label=172;break;
 case 10: 
 HEAP32[(($37)>>2)]=464;
 label=172;break;
 case 11: 
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $42=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($42)>>2)]=1480;
 label=172;break;
 case 13: 
 var $44=(($i_i_sroa_0_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 switch(($45|0)){case 1:case 2:case 3:case 4:case 5:case 6:{ label=14;break;}case 7:case 8:{ label=15;break;}default:{label=16;break;}}break;
 case 14: 
 var $47=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($47)>>2)]=694;
 label=172;break;
 case 15: 
 var $49=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($49)>>2)]=1010;
 label=172;break;
 case 16: 
 var $51=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($51)>>2)]=0;
 ___assert_fail(4208,6944,3204,12304);
 throw "Reached an unreachable!";
 case 17: 
 if($31){label=95;break;}else{label=18;break;}
 case 18: 
 if($34){label=89;break;}else{label=19;break;}
 case 19: 
 var $55=(($i_i_sroa_0_0+36)|0);
 var $56=HEAP32[(($55)>>2)];
 switch(($56|0)){case 1:{ label=20;break;}case 2:{ label=30;break;}case 3:{ label=40;break;}case 4:{ label=50;break;}case 5:{ label=60;break;}case 6:{ label=70;break;}case 7:{ label=80;break;}case 8:{ label=84;break;}default:{label=88;break;}}break;
 case 20: 
 var $58=(($i_i_sroa_0_0+40)|0);
 var $59=HEAP32[(($58)>>2)];
 switch(($59|0)){case 1:{ label=21;break;}case 2:{ label=22;break;}case 3:{ label=23;break;}case 4:{ label=24;break;}case 5:{ label=25;break;}case 6:{ label=26;break;}case 7:{ label=27;break;}case 8:{ label=28;break;}default:{label=29;break;}}break;
 case 21: 
 var $61=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($61)>>2)]=80;
 label=172;break;
 case 22: 
 var $63=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($63)>>2)]=798;
 label=172;break;
 case 23: 
 var $65=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($65)>>2)]=152;
 label=172;break;
 case 24: 
 var $67=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($67)>>2)]=446;
 label=172;break;
 case 25: 
 var $69=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($69)>>2)]=560;
 label=172;break;
 case 26: 
 var $71=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($71)>>2)]=768;
 label=172;break;
 case 27: 
 var $73=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($73)>>2)]=128;
 label=172;break;
 case 28: 
 var $75=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($75)>>2)]=258;
 label=172;break;
 case 29: 
 ___assert_fail(4208,6944,3228,12304);
 throw "Reached an unreachable!";
 case 30: 
 var $78=(($i_i_sroa_0_0+40)|0);
 var $79=HEAP32[(($78)>>2)];
 switch(($79|0)){case 1:{ label=31;break;}case 2:{ label=32;break;}case 3:{ label=33;break;}case 4:{ label=34;break;}case 5:{ label=35;break;}case 6:{ label=36;break;}case 7:{ label=37;break;}case 8:{ label=38;break;}default:{label=39;break;}}break;
 case 31: 
 var $81=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($81)>>2)]=1226;
 label=172;break;
 case 32: 
 var $83=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($83)>>2)]=938;
 label=172;break;
 case 33: 
 var $85=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($85)>>2)]=946;
 label=172;break;
 case 34: 
 var $87=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($87)>>2)]=1234;
 label=172;break;
 case 35: 
 var $89=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($89)>>2)]=874;
 label=172;break;
 case 36: 
 var $91=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($91)>>2)]=88;
 label=172;break;
 case 37: 
 var $93=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($93)>>2)]=1436;
 label=172;break;
 case 38: 
 var $95=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($95)>>2)]=614;
 label=172;break;
 case 39: 
 ___assert_fail(4208,6944,3242,12304);
 throw "Reached an unreachable!";
 case 40: 
 var $98=(($i_i_sroa_0_0+40)|0);
 var $99=HEAP32[(($98)>>2)];
 switch(($99|0)){case 1:{ label=41;break;}case 2:{ label=42;break;}case 3:{ label=43;break;}case 4:{ label=44;break;}case 5:{ label=45;break;}case 6:{ label=46;break;}case 7:{ label=47;break;}case 8:{ label=48;break;}default:{label=49;break;}}break;
 case 41: 
 var $101=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($101)>>2)]=1044;
 label=172;break;
 case 42: 
 var $103=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($103)>>2)]=1314;
 label=172;break;
 case 43: 
 var $105=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($105)>>2)]=926;
 label=172;break;
 case 44: 
 var $107=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($107)>>2)]=204;
 label=172;break;
 case 45: 
 var $109=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($109)>>2)]=616;
 label=172;break;
 case 46: 
 var $111=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($111)>>2)]=302;
 label=172;break;
 case 47: 
 var $113=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($113)>>2)]=588;
 label=172;break;
 case 48: 
 var $115=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($115)>>2)]=192;
 label=172;break;
 case 49: 
 ___assert_fail(4208,6944,3256,12304);
 throw "Reached an unreachable!";
 case 50: 
 var $118=(($i_i_sroa_0_0+40)|0);
 var $119=HEAP32[(($118)>>2)];
 switch(($119|0)){case 1:{ label=51;break;}case 2:{ label=52;break;}case 3:{ label=53;break;}case 4:{ label=54;break;}case 5:{ label=55;break;}case 6:{ label=56;break;}case 7:{ label=57;break;}case 8:{ label=58;break;}default:{label=59;break;}}break;
 case 51: 
 var $121=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($121)>>2)]=116;
 label=172;break;
 case 52: 
 var $123=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($123)>>2)]=844;
 label=172;break;
 case 53: 
 var $125=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($125)>>2)]=52;
 label=172;break;
 case 54: 
 var $127=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($127)>>2)]=108;
 label=172;break;
 case 55: 
 var $129=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($129)>>2)]=426;
 label=172;break;
 case 56: 
 var $131=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($131)>>2)]=840;
 label=172;break;
 case 57: 
 var $133=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($133)>>2)]=1020;
 label=172;break;
 case 58: 
 var $135=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($135)>>2)]=564;
 label=172;break;
 case 59: 
 ___assert_fail(4208,6944,3270,12304);
 throw "Reached an unreachable!";
 case 60: 
 var $138=(($i_i_sroa_0_0+40)|0);
 var $139=HEAP32[(($138)>>2)];
 switch(($139|0)){case 1:{ label=61;break;}case 2:{ label=62;break;}case 3:{ label=63;break;}case 4:{ label=64;break;}case 5:{ label=65;break;}case 6:{ label=66;break;}case 7:{ label=67;break;}case 8:{ label=68;break;}default:{label=69;break;}}break;
 case 61: 
 var $141=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($141)>>2)]=1008;
 label=172;break;
 case 62: 
 var $143=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($143)>>2)]=566;
 label=172;break;
 case 63: 
 var $145=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($145)>>2)]=610;
 label=172;break;
 case 64: 
 var $147=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($147)>>2)]=868;
 label=172;break;
 case 65: 
 var $149=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($149)>>2)]=550;
 label=172;break;
 case 66: 
 var $151=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($151)>>2)]=632;
 label=172;break;
 case 67: 
 var $153=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($153)>>2)]=1458;
 label=172;break;
 case 68: 
 var $155=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($155)>>2)]=1274;
 label=172;break;
 case 69: 
 ___assert_fail(4208,6944,3284,12304);
 throw "Reached an unreachable!";
 case 70: 
 var $158=(($i_i_sroa_0_0+40)|0);
 var $159=HEAP32[(($158)>>2)];
 switch(($159|0)){case 1:{ label=71;break;}case 2:{ label=72;break;}case 3:{ label=73;break;}case 4:{ label=74;break;}case 5:{ label=75;break;}case 6:{ label=76;break;}case 7:{ label=77;break;}case 8:{ label=78;break;}default:{label=79;break;}}break;
 case 71: 
 var $161=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($161)>>2)]=876;
 label=172;break;
 case 72: 
 var $163=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($163)>>2)]=1238;
 label=172;break;
 case 73: 
 var $165=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($165)>>2)]=100;
 label=172;break;
 case 74: 
 var $167=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($167)>>2)]=450;
 label=172;break;
 case 75: 
 var $169=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($169)>>2)]=226;
 label=172;break;
 case 76: 
 var $171=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($171)>>2)]=282;
 label=172;break;
 case 77: 
 var $173=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($173)>>2)]=1402;
 label=172;break;
 case 78: 
 var $175=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($175)>>2)]=1252;
 label=172;break;
 case 79: 
 ___assert_fail(4208,6944,3298,12304);
 throw "Reached an unreachable!";
 case 80: 
 var $178=(($i_i_sroa_0_0+40)|0);
 var $179=HEAP32[(($178)>>2)];
 if(($179|0)==7){ label=81;break;}else if(($179|0)==8){ label=82;break;}else{label=83;break;}
 case 81: 
 var $181=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($181)>>2)]=688;
 label=172;break;
 case 82: 
 var $183=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($183)>>2)]=90;
 label=172;break;
 case 83: 
 ___assert_fail(4208,6944,3306,12304);
 throw "Reached an unreachable!";
 case 84: 
 var $186=(($i_i_sroa_0_0+40)|0);
 var $187=HEAP32[(($186)>>2)];
 if(($187|0)==7){ label=85;break;}else if(($187|0)==8){ label=86;break;}else{label=87;break;}
 case 85: 
 var $189=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($189)>>2)]=4;
 label=172;break;
 case 86: 
 var $191=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($191)>>2)]=980;
 label=172;break;
 case 87: 
 ___assert_fail(4208,6944,3314,12304);
 throw "Reached an unreachable!";
 case 88: 
 ___assert_fail(4208,6944,3318,12304);
 throw "Reached an unreachable!";
 case 89: 
 var $195=(($i_i_sroa_0_0+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=((28712+($196<<2))|0);
 var $198=HEAP32[(($197)>>2)];
 if(($198|0)==1){ label=90;break;}else if(($198|0)==2){ label=91;break;}else if(($198|0)==4){ label=92;break;}else if(($198|0)==8){ label=93;break;}else{label=94;break;}
 case 90: 
 var $200=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($200)>>2)]=1484;
 label=172;break;
 case 91: 
 var $202=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($202)>>2)]=660;
 label=172;break;
 case 92: 
 var $204=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($204)>>2)]=562;
 label=172;break;
 case 93: 
 var $206=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($206)>>2)]=64;
 label=172;break;
 case 94: 
 var $208=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($208)>>2)]=0;
 ___assert_fail(4208,6944,3329,12304);
 throw "Reached an unreachable!";
 case 95: 
 if($34){label=166;break;}else{label=96;break;}
 case 96: 
 var $211=(($i_i_sroa_0_0+36)|0);
 var $212=HEAP32[(($211)>>2)];
 switch(($212|0)){case 2:{ label=107;break;}case 3:{ label=117;break;}case 4:{ label=127;break;}case 5:{ label=137;break;}case 6:{ label=147;break;}case 7:{ label=157;break;}case 8:{ label=161;break;}case 1:{ label=97;break;}default:{label=165;break;}}break;
 case 97: 
 var $214=(($i_i_sroa_0_0+40)|0);
 var $215=HEAP32[(($214)>>2)];
 switch(($215|0)){case 3:{ label=100;break;}case 4:{ label=101;break;}case 5:{ label=102;break;}case 6:{ label=103;break;}case 7:{ label=104;break;}case 8:{ label=105;break;}case 1:{ label=98;break;}case 2:{ label=99;break;}default:{label=106;break;}}break;
 case 98: 
 var $217=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($217)>>2)]=882;
 label=172;break;
 case 99: 
 var $219=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($219)>>2)]=8;
 label=172;break;
 case 100: 
 var $221=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($221)>>2)]=764;
 label=172;break;
 case 101: 
 var $223=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($223)>>2)]=248;
 label=172;break;
 case 102: 
 var $225=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($225)>>2)]=654;
 label=172;break;
 case 103: 
 var $227=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($227)>>2)]=1066;
 label=172;break;
 case 104: 
 var $229=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($229)>>2)]=496;
 label=172;break;
 case 105: 
 var $231=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($231)>>2)]=362;
 label=172;break;
 case 106: 
 ___assert_fail(4208,6944,3350,12304);
 throw "Reached an unreachable!";
 case 107: 
 var $234=(($i_i_sroa_0_0+40)|0);
 var $235=HEAP32[(($234)>>2)];
 switch(($235|0)){case 1:{ label=108;break;}case 2:{ label=109;break;}case 3:{ label=110;break;}case 4:{ label=111;break;}case 5:{ label=112;break;}case 6:{ label=113;break;}case 7:{ label=114;break;}case 8:{ label=115;break;}default:{label=116;break;}}break;
 case 108: 
 var $237=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($237)>>2)]=1216;
 label=172;break;
 case 109: 
 var $239=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($239)>>2)]=812;
 label=172;break;
 case 110: 
 var $241=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($241)>>2)]=1202;
 label=172;break;
 case 111: 
 var $243=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($243)>>2)]=160;
 label=172;break;
 case 112: 
 var $245=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($245)>>2)]=460;
 label=172;break;
 case 113: 
 var $247=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($247)>>2)]=390;
 label=172;break;
 case 114: 
 var $249=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($249)>>2)]=220;
 label=172;break;
 case 115: 
 var $251=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($251)>>2)]=894;
 label=172;break;
 case 116: 
 ___assert_fail(4208,6944,3364,12304);
 throw "Reached an unreachable!";
 case 117: 
 var $254=(($i_i_sroa_0_0+40)|0);
 var $255=HEAP32[(($254)>>2)];
 switch(($255|0)){case 1:{ label=118;break;}case 2:{ label=119;break;}case 3:{ label=120;break;}case 4:{ label=121;break;}case 5:{ label=122;break;}case 6:{ label=123;break;}case 7:{ label=124;break;}case 8:{ label=125;break;}default:{label=126;break;}}break;
 case 118: 
 var $257=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($257)>>2)]=1186;
 label=172;break;
 case 119: 
 var $259=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($259)>>2)]=762;
 label=172;break;
 case 120: 
 var $261=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($261)>>2)]=756;
 label=172;break;
 case 121: 
 var $263=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($263)>>2)]=1230;
 label=172;break;
 case 122: 
 var $265=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($265)>>2)]=360;
 label=172;break;
 case 123: 
 var $267=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($267)>>2)]=1258;
 label=172;break;
 case 124: 
 var $269=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($269)>>2)]=1088;
 label=172;break;
 case 125: 
 var $271=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($271)>>2)]=356;
 label=172;break;
 case 126: 
 ___assert_fail(4208,6944,3378,12304);
 throw "Reached an unreachable!";
 case 127: 
 var $274=(($i_i_sroa_0_0+40)|0);
 var $275=HEAP32[(($274)>>2)];
 switch(($275|0)){case 1:{ label=128;break;}case 2:{ label=129;break;}case 3:{ label=130;break;}case 4:{ label=131;break;}case 5:{ label=132;break;}case 6:{ label=133;break;}case 7:{ label=134;break;}case 8:{ label=135;break;}default:{label=136;break;}}break;
 case 128: 
 var $277=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($277)>>2)]=134;
 label=172;break;
 case 129: 
 var $279=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($279)>>2)]=1188;
 label=172;break;
 case 130: 
 var $281=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($281)>>2)]=700;
 label=172;break;
 case 131: 
 var $283=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($283)>>2)]=528;
 label=172;break;
 case 132: 
 var $285=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($285)>>2)]=1180;
 label=172;break;
 case 133: 
 var $287=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($287)>>2)]=502;
 label=172;break;
 case 134: 
 var $289=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($289)>>2)]=406;
 label=172;break;
 case 135: 
 var $291=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($291)>>2)]=1462;
 label=172;break;
 case 136: 
 ___assert_fail(4208,6944,3392,12304);
 throw "Reached an unreachable!";
 case 137: 
 var $294=(($i_i_sroa_0_0+40)|0);
 var $295=HEAP32[(($294)>>2)];
 switch(($295|0)){case 1:{ label=138;break;}case 2:{ label=139;break;}case 3:{ label=140;break;}case 4:{ label=141;break;}case 5:{ label=142;break;}case 6:{ label=143;break;}case 7:{ label=144;break;}case 8:{ label=145;break;}default:{label=146;break;}}break;
 case 138: 
 var $297=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($297)>>2)]=470;
 label=172;break;
 case 139: 
 var $299=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($299)>>2)]=1232;
 label=172;break;
 case 140: 
 var $301=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($301)>>2)]=104;
 label=172;break;
 case 141: 
 var $303=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($303)>>2)]=1298;
 label=172;break;
 case 142: 
 var $305=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($305)>>2)]=1426;
 label=172;break;
 case 143: 
 var $307=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($307)>>2)]=970;
 label=172;break;
 case 144: 
 var $309=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($309)>>2)]=990;
 label=172;break;
 case 145: 
 var $311=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($311)>>2)]=1016;
 label=172;break;
 case 146: 
 ___assert_fail(4208,6944,3406,12304);
 throw "Reached an unreachable!";
 case 147: 
 var $314=(($i_i_sroa_0_0+40)|0);
 var $315=HEAP32[(($314)>>2)];
 switch(($315|0)){case 1:{ label=148;break;}case 2:{ label=149;break;}case 3:{ label=150;break;}case 4:{ label=151;break;}case 5:{ label=152;break;}case 6:{ label=153;break;}case 7:{ label=154;break;}case 8:{ label=155;break;}default:{label=156;break;}}break;
 case 148: 
 var $317=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($317)>>2)]=512;
 label=172;break;
 case 149: 
 var $319=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($319)>>2)]=222;
 label=172;break;
 case 150: 
 var $321=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($321)>>2)]=432;
 label=172;break;
 case 151: 
 var $323=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($323)>>2)]=214;
 label=172;break;
 case 152: 
 var $325=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($325)>>2)]=138;
 label=172;break;
 case 153: 
 var $327=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($327)>>2)]=22;
 label=172;break;
 case 154: 
 var $329=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($329)>>2)]=1412;
 label=172;break;
 case 155: 
 var $331=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($331)>>2)]=488;
 label=172;break;
 case 156: 
 ___assert_fail(4208,6944,3420,12304);
 throw "Reached an unreachable!";
 case 157: 
 var $334=(($i_i_sroa_0_0+40)|0);
 var $335=HEAP32[(($334)>>2)];
 if(($335|0)==7){ label=158;break;}else if(($335|0)==8){ label=159;break;}else{label=160;break;}
 case 158: 
 var $337=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($337)>>2)]=556;
 label=172;break;
 case 159: 
 var $339=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($339)>>2)]=340;
 label=172;break;
 case 160: 
 ___assert_fail(4208,6944,3428,12304);
 throw "Reached an unreachable!";
 case 161: 
 var $342=(($i_i_sroa_0_0+40)|0);
 var $343=HEAP32[(($342)>>2)];
 if(($343|0)==7){ label=162;break;}else if(($343|0)==8){ label=163;break;}else{label=164;break;}
 case 162: 
 var $345=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($345)>>2)]=680;
 label=172;break;
 case 163: 
 var $347=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($347)>>2)]=144;
 label=172;break;
 case 164: 
 ___assert_fail(4208,6944,3436,12304);
 throw "Reached an unreachable!";
 case 165: 
 ___assert_fail(4208,6944,3440,12304);
 throw "Reached an unreachable!";
 case 166: 
 var $351=(($i_i_sroa_0_0+12)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=((28712+($352<<2))|0);
 var $354=HEAP32[(($353)>>2)];
 if(($354|0)==1){ label=167;break;}else if(($354|0)==2){ label=168;break;}else if(($354|0)==4){ label=169;break;}else if(($354|0)==8){ label=170;break;}else{label=171;break;}
 case 167: 
 var $356=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($356)>>2)]=1364;
 label=172;break;
 case 168: 
 var $358=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($358)>>2)]=382;
 label=172;break;
 case 169: 
 var $360=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($360)>>2)]=1422;
 label=172;break;
 case 170: 
 var $362=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($362)>>2)]=6;
 label=172;break;
 case 171: 
 var $364=(($i_i_sroa_0_0+72)|0);
 HEAP32[(($364)>>2)]=0;
 ___assert_fail(4208,6944,3451,12304);
 throw "Reached an unreachable!";
 case 172: 
 var $365=(($i_i_sroa_0_0+76)|0);
 var $i_i_sroa_0_0=$365;label=5;break;
 case 173: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __GLOBAL__I_a(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 __embind_register_class(28528,26224,26192,0,15136,(794),2960,0,2960,0,10232,15096,(630));
 __embind_register_class_constructor(28528,1,15072,15152,(1126),(490));
 var $1=_malloc(8);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_lcssa_i_i21_i_i=$1;label=5;break;}
 case 2: 
 var $3=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$3;
 FUNCTION_TABLE[$6]();
 var $7=_malloc(8);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i_i21_i_i=$7;label=5;break;}
 case 4: 
 var $10=___cxa_allocate_exception(4);
 var $11=$10;
 HEAP32[(($11)>>2)]=15192;
 ___cxa_throw($10,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i_i21_i_i;
 var $12=$_lcssa_i_i21_i_i;
 var $$etemp$0=(740);
 var $st$1$0=(($12)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0;
 var $st$2$1=(($12+4)|0);
 HEAP32[(($st$2$1)>>2)]=0;
 __embind_register_class_function(28528,10216,3,15048,15128,(596),$_lcssa_i_i21_i_i,0);
 var $13=_malloc(8);
 var $14=($13|0)==0;
 if($14){label=6;break;}else{var $_lcssa_i_i23_i_i=$13;label=9;break;}
 case 6: 
 var $15=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $16=($15|0)==0;
 if($16){label=8;break;}else{label=7;break;}
 case 7: 
 var $18=$15;
 FUNCTION_TABLE[$18]();
 var $19=_malloc(8);
 var $20=($19|0)==0;
 if($20){label=6;break;}else{var $_lcssa_i_i23_i_i=$19;label=9;break;}
 case 8: 
 var $22=___cxa_allocate_exception(4);
 var $23=$22;
 HEAP32[(($23)>>2)]=15192;
 ___cxa_throw($22,26096,(782));
 throw "Reached an unreachable!";
 case 9: 
 var $_lcssa_i_i23_i_i;
 var $24=$_lcssa_i_i23_i_i;
 var $$etemp$3=(1166);
 var $st$4$0=(($24)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3;
 var $st$5$1=(($24+4)|0);
 HEAP32[(($st$5$1)>>2)]=0;
 __embind_register_class_function(28528,6432,2,15064,15120,(652),$_lcssa_i_i23_i_i,0);
 var $25=_malloc(8);
 var $26=($25|0)==0;
 if($26){label=10;break;}else{var $_lcssa_i_i19_i_i=$25;label=13;break;}
 case 10: 
 var $27=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=12;break;}else{label=11;break;}
 case 11: 
 var $30=$27;
 FUNCTION_TABLE[$30]();
 var $31=_malloc(8);
 var $32=($31|0)==0;
 if($32){label=10;break;}else{var $_lcssa_i_i19_i_i=$31;label=13;break;}
 case 12: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=15192;
 ___cxa_throw($34,26096,(782));
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i_i19_i_i;
 var $36=$_lcssa_i_i19_i_i;
 var $$etemp$6=(678);
 var $st$7$0=(($36)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6;
 var $st$8$1=(($36+4)|0);
 HEAP32[(($st$8$1)>>2)]=0;
 __embind_register_class_function(28528,4808,2,15064,15120,(652),$_lcssa_i_i19_i_i,0);
 var $37=_malloc(8);
 var $38=($37|0)==0;
 if($38){label=14;break;}else{var $_lcssa_i_i16_i_i=$37;label=17;break;}
 case 14: 
 var $39=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=16;break;}else{label=15;break;}
 case 15: 
 var $42=$39;
 FUNCTION_TABLE[$42]();
 var $43=_malloc(8);
 var $44=($43|0)==0;
 if($44){label=14;break;}else{var $_lcssa_i_i16_i_i=$43;label=17;break;}
 case 16: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=15192;
 ___cxa_throw($46,26096,(782));
 throw "Reached an unreachable!";
 case 17: 
 var $_lcssa_i_i16_i_i;
 var $48=$_lcssa_i_i16_i_i;
 var $$etemp$9=(848);
 var $st$10$0=(($48)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9;
 var $st$11$1=(($48+4)|0);
 HEAP32[(($st$11$1)>>2)]=0;
 __embind_register_class_function(28528,4080,2,15040,15112,(682),$_lcssa_i_i16_i_i,0);
 var $49=_malloc(8);
 var $50=($49|0)==0;
 if($50){label=18;break;}else{var $_lcssa_i_i13_i_i=$49;label=21;break;}
 case 18: 
 var $51=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $52=($51|0)==0;
 if($52){label=20;break;}else{label=19;break;}
 case 19: 
 var $54=$51;
 FUNCTION_TABLE[$54]();
 var $55=_malloc(8);
 var $56=($55|0)==0;
 if($56){label=18;break;}else{var $_lcssa_i_i13_i_i=$55;label=21;break;}
 case 20: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 HEAP32[(($59)>>2)]=15192;
 ___cxa_throw($58,26096,(782));
 throw "Reached an unreachable!";
 case 21: 
 var $_lcssa_i_i13_i_i;
 var $60=$_lcssa_i_i13_i_i;
 var $$etemp$12=(822);
 var $st$13$0=(($60)|0);
 HEAP32[(($st$13$0)>>2)]=$$etemp$12;
 var $st$14$1=(($60+4)|0);
 HEAP32[(($st$14$1)>>2)]=0;
 __embind_register_class_function(28528,3576,2,15040,15112,(682),$_lcssa_i_i13_i_i,0);
 var $61=_malloc(8);
 var $62=($61|0)==0;
 if($62){label=22;break;}else{var $_lcssa_i_i_i_i=$61;label=25;break;}
 case 22: 
 var $63=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $64=($63|0)==0;
 if($64){label=24;break;}else{label=23;break;}
 case 23: 
 var $66=$63;
 FUNCTION_TABLE[$66]();
 var $67=_malloc(8);
 var $68=($67|0)==0;
 if($68){label=22;break;}else{var $_lcssa_i_i_i_i=$67;label=25;break;}
 case 24: 
 var $70=___cxa_allocate_exception(4);
 var $71=$70;
 HEAP32[(($71)>>2)]=15192;
 ___cxa_throw($70,26096,(782));
 throw "Reached an unreachable!";
 case 25: 
 var $_lcssa_i_i_i_i;
 var $72=$_lcssa_i_i_i_i;
 var $$etemp$15=(1408);
 var $st$16$0=(($72)|0);
 HEAP32[(($st$16$0)>>2)]=$$etemp$15;
 var $st$17$1=(($72+4)|0);
 HEAP32[(($st$17$1)>>2)]=0;
 __embind_register_class_function(28528,2904,2,15040,15112,(682),$_lcssa_i_i_i_i,0);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __GLOBAL__I_a211(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 __embind_register_class(28536,26240,26208,0,15144,(590),2960,0,2960,0,6544,15104,(846));
 __embind_register_class_constructor(28536,2,15080,15160,(366),(210));
 var $1=_malloc(8);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_lcssa_i_i_i_i=$1;label=5;break;}
 case 2: 
 var $3=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$3;
 FUNCTION_TABLE[$6]();
 var $7=_malloc(8);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i_i_i_i=$7;label=5;break;}
 case 4: 
 var $10=___cxa_allocate_exception(4);
 var $11=$10;
 HEAP32[(($11)>>2)]=15192;
 ___cxa_throw($10,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i_i_i_i;
 var $12=$_lcssa_i_i_i_i;
 var $$etemp$0=(1128);
 var $st$1$0=(($12)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0;
 var $st$2$1=(($12+4)|0);
 HEAP32[(($st$2$1)>>2)]=0;
 __embind_register_class_function(28536,9216,2,15032,15088,(1420),$_lcssa_i_i_i_i,0);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal13getActualTypeI4TestEEPKvPT_($ptr){
 var label=0;


 return 28536;
}

//Func
function __ZN10emscripten8internal14raw_destructorI4TestEEvPT_($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$ptr;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal12operator_newI4TestJjEEEPT_DpOT0_($args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $mp_i_i=(sp)+(8);
 var $perm_i_i=(sp)+(24);
 var $2=_malloc(4);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_lcssa_i=$2;label=5;break;}
 case 2: 
 var $4=(tempValue=HEAP32[((29360)>>2)],HEAP32[((29360)>>2)]=tempValue+0,tempValue);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$4;
 FUNCTION_TABLE[$7]();
 var $8=_malloc(4);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{var $_lcssa_i=$8;label=5;break;}
 case 4: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=15192;
 ___cxa_throw($11,26096,(782));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i;
 var $13=$_lcssa_i;
 var $14=HEAP32[(($args)>>2)];
 var $15=$14;
 var $16=$_lcssa_i;
 HEAP32[(($16)>>2)]=$15;
 var $17=(($1)|0);
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;

 var $18=$mp_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $19=$perm_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $20=(($15+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($15)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($21|0)==($23|0);
 if($24){label=82;break;}else{label=6;break;}
 case 6: 
 var $26=(($15+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=82;break;}else{label=7;break;}
 case 7: 
 var $30=(($mp_i_i+4)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=(($mp_i_i+8)|0);
 HEAP32[(($31)>>2)]=0;
 var $32=(($mp_i_i+4)|0);
 var $33=$32;
 var $34=(($mp_i_i)|0);
 HEAP32[(($34)>>2)]=$33;
 var $35=HEAP32[(($20)>>2)];
 var $36=HEAP32[(($22)>>2)];
 var $37=$35;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=(((($39|0))/(28))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($perm_i_i,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $42=HEAP32[(($22)>>2)];
 var $43=(($perm_i_i)|0);
 var $k_i_i_0=0;var $vi_i_i_sroa_0_0=$42;label=9;break;
 case 9: 
 var $vi_i_i_sroa_0_0;
 var $k_i_i_0;
 var $45=HEAP32[(($20)>>2)];
 var $46=($vi_i_i_sroa_0_0|0)==($45|0);
 var $47=HEAP32[(($43)>>2)];
 if($46){label=20;break;}else{label=10;break;}
 case 10: 
 var $49=(($47+($k_i_i_0<<2))|0);
 HEAP32[(($49)>>2)]=$vi_i_i_sroa_0_0;
 var $50=(($vi_i_i_sroa_0_0+28)|0);
 var $51=((($k_i_i_0)+(1))|0);
 var $k_i_i_0=$51;var $vi_i_i_sroa_0_0=$50;label=9;break;
 case 11: 
 var $53$0 = ___cxa_find_matching_catch(); var $53$1 = tempRet0;
 var $54=$53$0;
 var $55=$53$1;
 var $_06=$55;var $_07=$54;label=83;break;
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit$1;var $eh_lpad_body_i_i$0=$lpad_loopexit$0;label=15;break;
 case 13: 
 var $lpad_loopexit9$0 = ___cxa_find_matching_catch(); var $lpad_loopexit9$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit9$1;var $eh_lpad_body_i_i$0=$lpad_loopexit9$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit10$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit10$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_nonloopexit10$1;var $eh_lpad_body_i_i$0=$lpad_nonloopexit10$0;label=15;break;
 case 15: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $56=$eh_lpad_body_i_i$0;
 var $57=$eh_lpad_body_i_i$1;
 var $58=HEAP32[(($43)>>2)];
 var $59=($58|0)==0;
 if($59){var $_06=$57;var $_07=$56;label=83;break;}else{label=16;break;}
 case 16: 
 var $_pre21=HEAP32[(($68)>>2)];
 var $62=$_pre21;label=17;break;
 case 17: 
 var $62;
 var $63=($58|0)==($62|0);
 if($63){label=19;break;}else{label=18;break;}
 case 18: 
 var $65=((($62)-(4))|0);
 HEAP32[(($68)>>2)]=$65;
 var $62=$65;label=17;break;
 case 19: 
 var $66=$58;
 _free($66);
 var $_06=$57;var $_07=$56;label=83;break;
 case 20: 
 var $68=(($perm_i_i+4)|0);
 var $69=HEAP32[(($68)>>2)];
 __ZNSt3__16__sortIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEvT0_SB_T_($47,$69,$1);
 var $70=HEAP32[(($47)>>2)];
 var $71=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIP8MyVertexS2_NS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S2_EEEEEixERS7_($mp_i_i,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=14;break; }
 case 21: 
 HEAP32[(($71)>>2)]=$70;
 var $i_i_i_0_ph=1;var $deleted_i_i_0_ph=0;var $j_i_i_0_ph=0;label=22;break;
 case 22: 
 var $j_i_i_0_ph;
 var $deleted_i_i_0_ph;
 var $i_i_i_0_ph;
 var $i_i_i_0=$i_i_i_0_ph;var $deleted_i_i_0=$deleted_i_i_0_ph;label=23;break;
 case 23: 
 var $deleted_i_i_0;
 var $i_i_i_0;
 var $74=($i_i_i_0|0)==($40|0);
 if($74){label=39;break;}else{label=24;break;}
 case 24: 
 var $76=HEAP32[(($43)>>2)];
 var $77=(($76+($i_i_i_0<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+24)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=$80&1;
 var $82=($81|0)==0;
 if($82){label=25;break;}else{label=38;break;}
 case 25: 
 var $84=(($76+($j_i_i_0_ph<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&1;
 var $89=($88|0)==0;
 if($89){label=26;break;}else{label=38;break;}
 case 26: 
 var $91=(($85)|0);
 var $92=HEAPF32[(($91)>>2)];
 var $93=(($85+8)|0);
 var $94=HEAPF32[(($93)>>2)];
 var $95=(($78)|0);
 var $96=HEAPF32[(($95)>>2)];
 var $97=$96==$92;
 if($97){label=27;break;}else{label=38;break;}
 case 27: 
 var $99=(($85+4)|0);
 var $100=HEAPF32[(($99)>>2)];
 var $101=(($78+4)|0);
 var $102=HEAPF32[(($101)>>2)];
 var $103=$102==$100;
 if($103){label=28;break;}else{label=38;break;}
 case 28: 
 var $104=(($78+8)|0);
 var $105=HEAPF32[(($104)>>2)];
 var $106=$105==$94;
 if($106){label=29;break;}else{label=38;break;}
 case 29: 
 var $108=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIP8MyVertexS2_NS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S2_EEEEEixERS7_($mp_i_i,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=13;break; }
 case 30: 
 HEAP32[(($108)>>2)]=$85;
 var $110=((($i_i_i_0)+(1))|0);
 var $111=HEAP32[(($22)>>2)];
 var $112=($111>>>0)>($78>>>0);
 if($112){label=32;break;}else{label=31;break;}
 case 31: 
 var $114=HEAP32[(($20)>>2)];
 var $115=((($114)-(28))|0);
 var $116=($78>>>0)>($115>>>0);
 if($116){label=32;break;}else{label=34;break;}
 case 32: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8448,3376,659,10432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=14;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $119=HEAP32[(($79)>>2)];
 var $120=$119&1;
 var $121=($120|0)==0;
 if($121){label=37;break;}else{label=35;break;}
 case 35: 
 (function() { try { __THREW__ = 0; return ___assert_fail(8008,3376,660,10432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=14;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $123=$119|1;
 HEAP32[(($79)>>2)]=$123;
 var $124=HEAP32[(($26)>>2)];
 var $125=((($124)-(1))|0);
 HEAP32[(($26)>>2)]=$125;
 var $126=((($deleted_i_i_0)+(1))|0);
 var $i_i_i_0=$110;var $deleted_i_i_0=$126;label=23;break;
 case 38: 
 var $127=((($i_i_i_0)+(1))|0);
 var $i_i_i_0_ph=$127;var $deleted_i_i_0_ph=$deleted_i_i_0;var $j_i_i_0_ph=$i_i_i_0;label=22;break;
 case 39: 
 var $129=(($15+32)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($15+36)|0);
 var $fi_i_i_sroa_0_0=$130;label=40;break;
 case 40: 
 var $fi_i_i_sroa_0_0;
 var $133=HEAP32[(($131)>>2)];
 var $134=($fi_i_i_sroa_0_0|0)==($133|0);
 if($134){label=56;break;}else{label=41;break;}
 case 41: 
 var $136=(($fi_i_i_sroa_0_0+28)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$137&1;
 var $139=($138|0)==0;
 if($139){var $storemerge1_i_i=0;label=42;break;}else{label=55;break;}
 case 42: 
 var $storemerge1_i_i;
 var $140=($storemerge1_i_i|0)<3;
 if($140){label=43;break;}else{label=55;break;}
 case 43: 
 var $142=($storemerge1_i_i|0)>-1;
 if($142){label=46;break;}else{label=44;break;}
 case 44: 
 (function() { try { __THREW__ = 0; return ___assert_fail(9184,8624,173,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=14;break; }
 case 45: 
 throw "Reached an unreachable!";
 case 46: 
 var $144=(($fi_i_i_sroa_0_0+16+($storemerge1_i_i<<2))|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=HEAP32[(($30)>>2)];
 var $_05=$33;var $storemerge_in_i_i_i_i_sink=$146;label=47;break;
 case 47: 
 var $storemerge_in_i_i_i_i_sink;
 var $_05;
 var $storemerge_i_i6_i_i=$storemerge_in_i_i_i_i_sink;
 var $148=($storemerge_i_i6_i_i|0)==0;
 if($148){label=49;break;}else{label=48;break;}
 case 48: 
 var $150=(($storemerge_i_i6_i_i+16)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=($151>>>0)<($145>>>0);
 var $153=(($storemerge_i_i6_i_i+4)|0);
 var $154=(($storemerge_i_i6_i_i)|0);
 var $_1=($152?$_05:$storemerge_i_i6_i_i);
 var $storemerge_in_in_i_i_i_i=($152?$153:$154);
 var $storemerge_in_i_i_i_i=HEAP32[(($storemerge_in_in_i_i_i_i)>>2)];
 var $_05=$_1;var $storemerge_in_i_i_i_i_sink=$storemerge_in_i_i_i_i;label=47;break;
 case 49: 
 var $155=($_05|0)==($33|0);
 if($155){label=54;break;}else{label=50;break;}
 case 50: 
 var $157=(($_05+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($145>>>0)<($158>>>0);
 if($159){label=54;break;}else{var $_sroa_04_0=$_05;label=51;break;}
 case 51: 
 var $_sroa_04_0;
 var $160=($_sroa_04_0|0)==($33|0);
 if($160){label=54;break;}else{label=52;break;}
 case 52: 
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIP8MyVertexS2_NS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S2_EEEEEixERS7_($mp_i_i,$144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=12;break; }
 case 53: 
 var $162=HEAP32[(($161)>>2)];
 HEAP32[(($144)>>2)]=$162;
 label=54;break;
 case 54: 
 var $163=((($storemerge1_i_i)+(1))|0);
 var $storemerge1_i_i=$163;label=42;break;
 case 55: 
 var $164=(($fi_i_i_sroa_0_0+32)|0);
 var $fi_i_i_sroa_0_0=$164;label=40;break;
 case 56: 
 var $166=(($15+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($15+20)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)==($169|0);
 if($170){label=59;break;}else{label=57;break;}
 case 57: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,1744,46,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=14;break; }
 case 58: 
 throw "Reached an unreachable!";
 case 59: 
 var $173=HEAP32[(($129)>>2)];
 var $174=(($15+44)|0);
 var $count_fd_i_i_i_0=0;var $fi_i_i_i_sroa_0_0=$173;var $176=$fi_i_i_sroa_0_0;label=60;break;
 case 60: 
 var $176;
 var $fi_i_i_i_sroa_0_0;
 var $count_fd_i_i_i_0;
 var $177=($fi_i_i_i_sroa_0_0|0)==($176|0);
 if($177){label=69;break;}else{label=61;break;}
 case 61: 
 var $179=(($fi_i_i_i_sroa_0_0+28)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=$180&1;
 var $182=($181|0)==0;
 if($182){label=62;break;}else{var $count_fd_i_i_i_1=$count_fd_i_i_i_0;var $_pre14=$176;label=68;break;}
 case 62: 
 var $183=(($fi_i_i_i_sroa_0_0+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($fi_i_i_i_sroa_0_0+20)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=64;break;}else{label=63;break;}
 case 63: 
 var $188=(($fi_i_i_i_sroa_0_0+24)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($184|0)==($189|0);
 var $191=($186|0)==($189|0);
 var $or_cond=$190|$191;
 if($or_cond){label=64;break;}else{var $count_fd_i_i_i_1=$count_fd_i_i_i_0;var $_pre14=$176;label=68;break;}
 case 64: 
 var $193=((($count_fd_i_i_i_0)+(1))|0);
 var $194=HEAP32[(($129)>>2)];
 var $195=($194>>>0)>($fi_i_i_i_sroa_0_0>>>0);
 var $196=((($176)-(32))|0);
 var $197=($fi_i_i_i_sroa_0_0>>>0)>($196>>>0);
 var $or_cond23=$195|$197;
 if($or_cond23){label=65;break;}else{label=67;break;}
 case 65: 
 (function() { try { __THREW__ = 0; return ___assert_fail(1336,3376,647,10448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=14;break; }
 case 66: 
 throw "Reached an unreachable!";
 case 67: 
 var $199=$180|1;
 HEAP32[(($179)>>2)]=$199;
 var $200=HEAP32[(($174)>>2)];
 var $201=((($200)-(1))|0);
 HEAP32[(($174)>>2)]=$201;
 var $_pre14_pre=HEAP32[(($131)>>2)];
 var $count_fd_i_i_i_1=$193;var $_pre14=$_pre14_pre;label=68;break;
 case 68: 
 var $_pre14;
 var $count_fd_i_i_i_1;
 var $203=(($fi_i_i_i_sroa_0_0+32)|0);
 var $count_fd_i_i_i_0=$count_fd_i_i_i_1;var $fi_i_i_i_sroa_0_0=$203;var $176=$_pre14;label=60;break;
 case 69: 
 var $204=(($15+28)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)>0;
 if($206){label=70;break;}else{label=76;break;}
 case 70: 
 var $208=HEAP32[(($166)>>2)];
 var $209=HEAP32[(($168)>>2)];
 var $210=($208|0)==($209|0);
 if($210){label=74;break;}else{label=71;break;}
 case 71: 
 (function() { try { __THREW__ = 0; return ___assert_fail(4208,1744,46,10320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=14;break; }
 case 72: 
 throw "Reached an unreachable!";
 case 73: 
 var $212$0 = ___cxa_find_matching_catch(); var $212$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$212$1;var $eh_lpad_body_i_i$0=$212$0;label=15;break;
 case 74: 
 var $214=($205|0)==0;
 (function() { try { __THREW__ = 0; return ___assert_fail(5848,4536,302,10480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=73;break; }
 case 75: 
 throw "Reached an unreachable!";
 case 76: 
 var $217=HEAP32[(($43)>>2)];
 var $218=($217|0)==0;
 if($218){label=81;break;}else{label=77;break;}
 case 77: 
 var $_pre=HEAP32[(($68)>>2)];
 var $221=$_pre;label=78;break;
 case 78: 
 var $221;
 var $222=($217|0)==($221|0);
 if($222){label=80;break;}else{label=79;break;}
 case 79: 
 var $224=((($221)-(4))|0);
 HEAP32[(($68)>>2)]=$224;
 var $221=$224;label=78;break;
 case 80: 
 var $225=$217;
 _free($225);
 label=81;break;
 case 81: 
 var $226=(($mp_i_i)|0);
 var $227=HEAP32[(($30)>>2)];
 var $228=$227;
 __ZNSt3__16__treeINS_12__value_typeIP8MyVertexS3_EENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($226,$228);
 label=82;break;
 case 82: 
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;

 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 STACKTOP=sp;return $13;
 case 83: 
 var $_07;
 var $_06;
 var $230=(($mp_i_i)|0);
 var $231=HEAP32[(($30)>>2)];
 var $232=$231;
 __ZNSt3__16__treeINS_12__value_typeIP8MyVertexS3_EENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($230,$232);
 var $233$0=$_07;
 var $233$1=0;
 var $234$0=$233$0;
 var $234$1=$_06;
 _free($_lcssa_i);
 ___resumeException($234$0)
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZN10emscripten8internal7InvokerIP4TestJOjEE6invokeEPFS3_S4_Ej($fn,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 HEAP32[(($1)>>2)]=$args;
 var $2=FUNCTION_TABLE[$fn]($1);
 STACKTOP=sp;return $2;
}

//Func
function __ZN4Test8testTestEv($this){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+44)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_printf(7728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}

//Func
function __ZN10emscripten8internal13MethodInvokerIM4TestFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=(($method)|0);
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$1$1;
 var $3=$2>>1;
 var $4=$wireThis;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$1$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $19=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 FUNCTION_TABLE[$19]($6);
 return;
  default: assert(0, "bad label: " + label);
 }

}

//Func
function __ZNSt3__16__sortIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEvT0_SB_T_($__first,$__last,$__comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__t_i6=sp;
 var $_0_ph=$__first;var $_07_ph=$__last;label=2;break;
 case 2: 
 var $_07_ph;
 var $_0_ph;
 var $1=$_07_ph;
 var $2=((($_07_ph)-(4))|0);
 var $_0=$_0_ph;label=3;break;
 case 3: 
 var $_0;
 var $3=$_0;
 var $4=((($1)-($3))|0);
 var $5=$4>>2;
 switch(($5|0)){case 2:{ label=4;break;}case 0:case 1:{ label=53;break;}case 3:{ label=6;break;}case 4:{ label=7;break;}case 5:{ label=8;break;}default:{label=9;break;}}break;
 case 4: 
 var $7=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($2,$_0);
 if($7){label=5;break;}else{label=53;break;}
 case 5: 
 var $9=HEAP32[(($_0)>>2)];
 var $10=HEAP32[(($2)>>2)];
 HEAP32[(($_0)>>2)]=$10;
 HEAP32[(($2)>>2)]=$9;
 label=53;break;
 case 6: 
 var $12=(($_0+4)|0);
 var $13=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($_0,$12,$2,$__comp);
 label=53;break;
 case 7: 
 var $15=(($_0+4)|0);
 var $16=(($_0+8)|0);
 var $17=__ZNSt3__17__sort4IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_T_($_0,$15,$16,$2,$__comp);
 label=53;break;
 case 8: 
 var $19=(($_0+4)|0);
 var $20=(($_0+8)|0);
 var $21=(($_0+12)|0);
 var $22=__ZNSt3__17__sort5IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_SB_T_($_0,$19,$20,$21,$2,$__comp);
 label=53;break;
 case 9: 
 var $24=($4|0)<124;
 if($24){label=10;break;}else{label=17;break;}
 case 10: 
 var $26=$__t_i6;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $27=(($_0+8)|0);
 var $28=(($_0+4)|0);
 var $29=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($_0,$28,$27,$__comp);
 var $__j_i_0=$27;label=11;break;
 case 11: 
 var $__j_i_0;
 var $storemerge_i=(($__j_i_0+4)|0);
 var $31=($storemerge_i|0)==($_07_ph|0);
 if($31){label=53;break;}else{label=12;break;}
 case 12: 
 var $33=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($storemerge_i,$__j_i_0);
 if($33){label=13;break;}else{var $__j_i_0=$storemerge_i;label=11;break;}
 case 13: 
 var $35=HEAP32[(($storemerge_i)>>2)];
 HEAP32[(($__t_i6)>>2)]=$35;
 var $__j_i_1=$storemerge_i;var $__k_i_0=$__j_i_0;label=14;break;
 case 14: 
 var $__k_i_0;
 var $__j_i_1;
 var $37=HEAP32[(($__k_i_0)>>2)];
 HEAP32[(($__j_i_1)>>2)]=$37;
 var $38=($__k_i_0|0)==($_0|0);
 if($38){label=16;break;}else{label=15;break;}
 case 15: 
 var $40=((($__k_i_0)-(4))|0);
 var $41=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__t_i6,$40);
 if($41){var $__j_i_1=$__k_i_0;var $__k_i_0=$40;label=14;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__t_i6)>>2)];
 HEAP32[(($__k_i_0)>>2)]=$42;
 var $__j_i_0=$storemerge_i;label=11;break;
 case 17: 
 var $44=($4|0)>3996;
 var $45=(((($5|0))/(2))&-1);
 var $46=(($_0+($45<<2))|0);
 if($44){label=18;break;}else{label=19;break;}
 case 18: 
 var $48=(((($5|0))/(4))&-1);
 var $49=(($_0+($48<<2))|0);
 var $_sum=((($45)+($48))|0);
 var $50=(($_0+($_sum<<2))|0);
 var $51=__ZNSt3__17__sort5IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_SB_SB_T_($_0,$49,$46,$50,$2,$__comp);
 var $storemerge=$51;label=20;break;
 case 19: 
 var $53=__ZNSt3__17__sort3IRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEjT0_SB_SB_T_($_0,$46,$2,$__comp);
 var $storemerge=$53;label=20;break;
 case 20: 
 var $storemerge;
 var $55=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($_0,$46);
 if($55){var $__j_3=$2;var $__n_swaps_2=$storemerge;label=36;break;}else{var $__j_0=$2;label=21;break;}
 case 21: 
 var $__j_0;
 var $56=((($__j_0)-(4))|0);
 var $57=($_0|0)==($56|0);
 if($57){label=22;break;}else{label=34;break;}
 case 22: 
 var $59=(($_0+4)|0);
 var $60=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($_0,$2);
 if($60){var $__i_1=$59;label=27;break;}else{var $__i_0=$59;label=23;break;}
 case 23: 
 var $__i_0;
 var $61=($__i_0|0)==($2|0);
 if($61){label=53;break;}else{label=24;break;}
 case 24: 
 var $63=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($_0,$__i_0);
 if($63){label=26;break;}else{label=25;break;}
 case 25: 
 var $65=(($__i_0+4)|0);
 var $__i_0=$65;label=23;break;
 case 26: 
 var $67=HEAP32[(($__i_0)>>2)];
 var $68=HEAP32[(($2)>>2)];
 HEAP32[(($__i_0)>>2)]=$68;
 HEAP32[(($2)>>2)]=$67;
 var $69=(($__i_0+4)|0);
 var $__i_1=$69;label=27;break;
 case 27: 
 var $__i_1;
 var $71=($__i_1|0)==($2|0);
 if($71){label=53;break;}else{var $__j_1_ph=$2;var $__i_2_ph=$__i_1;label=28;break;}
 case 28: 
 var $__i_2_ph;
 var $__j_1_ph;
 var $__i_2=$__i_2_ph;label=29;break;
 case 29: 
 var $__i_2;
 var $73=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($_0,$__i_2);
 if($73){var $__j_2=$__j_1_ph;label=31;break;}else{label=30;break;}
 case 30: 
 var $75=(($__i_2+4)|0);
 var $__i_2=$75;label=29;break;
 case 31: 
 var $__j_2;
 var $76=((($__j_2)-(4))|0);
 var $77=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($_0,$76);
 if($77){var $__j_2=$76;label=31;break;}else{label=32;break;}
 case 32: 
 var $79=($__i_2>>>0)<($76>>>0);
 if($79){label=33;break;}else{var $_0=$__i_2;label=3;break;}
 case 33: 
 var $81=HEAP32[(($__i_2)>>2)];
 var $82=HEAP32[(($76)>>2)];
 HEAP32[(($__i_2)>>2)]=$82;
 HEAP32[(($76)>>2)]=$81;
 var $83=(($__i_2+4)|0);
 var $__j_1_ph=$76;var $__i_2_ph=$83;label=28;break;
 case 34: 
 var $85=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($56,$46);
 if($85){label=35;break;}else{var $__j_0=$56;label=21;break;}
 case 35: 
 var $87=HEAP32[(($_0)>>2)];
 var $88=HEAP32[(($56)>>2)];
 HEAP32[(($_0)>>2)]=$88;
 HEAP32[(($56)>>2)]=$87;
 var $89=((($storemerge)+(1))|0);
 var $__j_3=$56;var $__n_swaps_2=$89;label=36;break;
 case 36: 
 var $__n_swaps_2;
 var $__j_3;
 var $91=(($_0+4)|0);
 var $92=($91>>>0)<($__j_3>>>0);
 if($92){var $__j_4_ph=$__j_3;var $__i_3_ph=$91;var $__n_swaps_3_ph=$__n_swaps_2;var $__m_1_ph=$46;label=37;break;}else{var $__i_4=$91;var $__n_swaps_4=$__n_swaps_2;var $__m_3=$46;label=43;break;}
 case 37: 
 var $__m_1_ph;
 var $__n_swaps_3_ph;
 var $__i_3_ph;
 var $__j_4_ph;
 var $__i_3=$__i_3_ph;label=38;break;
 case 38: 
 var $__i_3;
 var $94=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__i_3,$__m_1_ph);
 if($94){label=39;break;}else{var $__j_5=$__j_4_ph;label=40;break;}
 case 39: 
 var $96=(($__i_3+4)|0);
 var $__i_3=$96;label=38;break;
 case 40: 
 var $__j_5;
 var $97=((($__j_5)-(4))|0);
 var $98=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($97,$__m_1_ph);
 if($98){label=41;break;}else{var $__j_5=$97;label=40;break;}
 case 41: 
 var $100=($__i_3>>>0)>($97>>>0);
 if($100){var $__i_4=$__i_3;var $__n_swaps_4=$__n_swaps_3_ph;var $__m_3=$__m_1_ph;label=43;break;}else{label=42;break;}
 case 42: 
 var $102=HEAP32[(($__i_3)>>2)];
 var $103=HEAP32[(($97)>>2)];
 HEAP32[(($__i_3)>>2)]=$103;
 HEAP32[(($97)>>2)]=$102;
 var $104=((($__n_swaps_3_ph)+(1))|0);
 var $105=($__m_1_ph|0)==($__i_3|0);
 var $___m_1_ph=($105?$97:$__m_1_ph);
 var $106=(($__i_3+4)|0);
 var $__j_4_ph=$97;var $__i_3_ph=$106;var $__n_swaps_3_ph=$104;var $__m_1_ph=$___m_1_ph;label=37;break;
 case 43: 
 var $__m_3;
 var $__n_swaps_4;
 var $__i_4;
 var $107=($__i_4|0)==($__m_3|0);
 if($107){var $114=$__n_swaps_4;label=46;break;}else{label=44;break;}
 case 44: 
 var $109=__ZN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareclERKP8MyVertexS8_($__m_3,$__i_4);
 if($109){label=45;break;}else{var $114=$__n_swaps_4;label=46;break;}
 case 45: 
 var $111=HEAP32[(($__i_4)>>2)];
 var $112=HEAP32[(($__m_3)>>2)];
 HEAP32[(($__i_4)>>2)]=$112;
 HEAP32[(($__m_3)>>2)]=$111;
 var $113=((($__n_swaps_4)+(1))|0);
 var $114=$113;label=46;break;
 case 46: 
 var $114;
 var $115=($114|0)==0;
 if($115){label=47;break;}else{label=50;break;}
 case 47: 
 var $117=__ZNSt3__127__insertion_sort_incompleteIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEbT0_SB_T_($_0,$__i_4,$__comp);
 var $118=(($__i_4+4)|0);
 var $119=__ZNSt3__127__insertion_sort_incompleteIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEbT0_SB_T_($118,$_07_ph,$__comp);
 if($119){label=48;break;}else{label=49;break;}
 case 48: 
 if($117){label=53;break;}else{var $_0_ph=$_0;var $_07_ph=$__i_4;label=2;break;}
 case 49: 
 if($117){var $_0=$118;label=3;break;}else{label=50;break;}
 case 50: 
 var $123=$__i_4;
 var $124=((($123)-($3))|0);
 var $125=((($1)-($123))|0);
 var $126=($124|0)<($125|0);
 if($126){label=51;break;}else{label=52;break;}
 case 51: 
 __ZNSt3__16__sortIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEvT0_SB_T_($_0,$__i_4,$__comp);
 var $128=(($__i_4+4)|0);
 var $_0=$128;label=3;break;
 case 52: 
 var $130=(($__i_4+4)|0);
 __ZNSt3__16__sortIRN3vcg3tri5CleanI6MyMeshE27RemoveDuplicateVert_CompareEPP8MyVertexEEvT0_SB_T_($130,$_07_ph,$__comp);
 var $_0_ph=$_0;var $_07_ph=$__i_4;label=2;break;
 case 53: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}

