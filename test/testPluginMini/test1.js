// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 6720;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a8() } });
  

/* memory initializer */ allocate([84,101,115,116,49,0,0,0,103,101,110,101,114,97,116,101,0,0,0,0,0,0,0,0,105,105,105,0,0,0,0,0,144,20,0,0,72,0,0,0,80,53,84,101,115,116,49,0,53,84,101,115,116,49,0,0,112,19,0,0,56,0,0,0,152,19,0,0,48,0,0,0,0,0,0,0,64,0,0,0,105,105,0,0,0,0,0,0,72,0,0,0,0,0,0,0,118,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,53,84,101,115,116,49,0,0,0,0,0,0,0,0,152,19,0,0,128,0,0,0,1,0,0,0,64,0,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,108,111,110,103,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,112,19,0,0,152,3,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,112,19,0,0,192,3,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,112,19,0,0,232,3,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,112,19,0,0,16,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,112,19,0,0,56,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,112,19,0,0,96,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,112,19,0,0,136,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,112,19,0,0,176,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,112,19,0,0,216,4,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,112,19,0,0,0,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,112,19,0,0,40,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,112,19,0,0,80,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,112,19,0,0,120,5,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,112,19,0,0,216,5,0,0,72,21,0,0,152,5,0,0,0,0,0,0,1,0,0,0,0,6,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,72,21,0,0,32,6,0,0,0,0,0,0,1,0,0,0,0,6,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,72,21,0,0,120,6,0,0,0,0,0,0,1,0,0,0,0,6,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,47,85,115,101,114,115,47,99,105,103,110,111,110,105,47,68,111,99,117,109,101,110,116,115,47,100,101,118,101,108,47,115,97,110,100,98,111,120,47,99,105,103,110,111,110,105,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,50,57,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,0,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,32,99,111,110,115,116,0,0,32,118,111,108,97,116,105,108,101,0,0,0,0,0,0,0,32,114,101,115,116,114,105,99,116,0,0,0,0,0,0,0,32,99,111,109,112,108,101,120,0,0,0,0,0,0,0,0,32,105,109,97,103,105,110,97,114,121,0,0,0,0,0,0,32,91,0,0,0,0,0,0,32,40,0,0,0,0,0,0,41,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,38,38,0,0,0,0,0,0,111,98,106,99,95,111,98,106,101,99,116,60,0,0,0,0,42,0,0,0,0,0,0,0,105,100,0,0,0,0,0,0,38,0,0,0,0,0,0,0,111,98,106,99,112,114,111,116,111,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,32,118,101,99,116,111,114,91,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,0,0,126,0,0,0,0,0,0,0,58,58,0,0,0,0,0,0,100,101,108,101,116,101,91,93,32,0,0,0,0,0,0,0,100,101,108,101,116,101,32,0,41,91,0,0,0,0,0,0,60,60,61,0,0,0,0,0,41,45,45,0,0,0,0,0,45,62,42,0,0,0,0,0,41,43,43,0,0,0,0,0,41,32,63,32,40,0,0,0,41,32,58,32,40,0,0,0,62,62,61,0,0,0,0,0,116,104,114,111,119,0,0,0,116,104,114,111,119,32,0,0,116,121,112,101,105,100,40,0,115,105,122,101,111,102,46,46,46,40,0,0,0,0,0,0,44,32,0,0,0,0,0,0,115,105,122,101,111,102,32,40,0,0,0,0,0,0,0,0,115,116,97,116,105,99,95,99,97,115,116,60,0,0,0,0,62,40,0,0,0,0,0,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,0,0,0,0,0,0,45,62,0,0,0,0,0,0,110,111,101,120,99,101,112,116,32,40,0,0,0,0,0,0,91,93,32,0,0,0,0,0,41,32,0,0,0,0,0,0,46,42,0,0,0,0,0,0,115,116,100,58,58,0,0,0,111,112,101,114,97,116,111,114,38,38,0,0,0,0,0,0,111,112,101,114,97,116,111,114,38,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,38,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,61,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,40,41,0,0,0,0,0,0,111,112,101,114,97,116,111,114,44,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,126,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,42,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,111,112,101,114,97,116,111,114,47,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,47,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,94,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,94,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,61,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,62,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,62,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,111,112,101,114,97,116,111,114,60,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,34,34,32,0,0,0,0,0,111,112,101,114,97,116,111,114,60,60,0,0,0,0,0,0,111,112,101,114,97,116,111,114,60,60,61,0,0,0,0,0,111,112,101,114,97,116,111,114,60,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,45,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,45,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,42,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,45,45,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,0,111,112,101,114,97,116,111,114,33,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,33,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,110,101,119,0,0,0,0,111,112,101,114,97,116,111,114,124,124,0,0,0,0,0,0,111,112,101,114,97,116,111,114,124,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,124,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,45,62,42,0,0,0,0,0,111,112,101,114,97,116,111,114,43,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,43,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,43,43,0,0,0,0,0,0,111,112,101,114,97,116,111,114,45,62,0,0,0,0,0,0,111,112,101,114,97,116,111,114,63,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,37,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,37,61,0,0,0,0,0,0,111,112,101,114,97,116,111,114,62,62,0,0,0,0,0,0,111,112,101,114,97,116,111,114,62,62,61,0,0,0,0,0,39,108,97,109,98,100,97,39,40,0,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,115,116,100,58,58,105,115,116,114,101,97,109,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,0,0,0,0,0,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,0,0,115,116,100,58,58,111,115,116,114,101,97,109,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,0,0,0,0,0,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,0,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,0,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,0,0,0,0,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,0,0,41,40,0,0,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,47,85,115,101,114,115,47,99,105,103,110,111,110,105,47,68,111,99,117,109,101,110,116,115,47,100,101,118,101,108,47,115,97,110,100,98,111,120,47,99,105,103,110,111,110,105,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,50,57,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,0,0,0,99,111,110,115,116,95,99,97,115,116,60,0,0,0,0,0,97,108,105,103,110,111,102,32,40,0,0,0,0,0,0,0,102,112,0,0,0,0,0,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,108,0,0,0,0,0,0,0,117,108,108,0,0,0,0,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,0,0,0,0,0,0,37,76,97,76,0,0,0,0,37,97,0,0,0,0,0,0,37,97,102,0,0,0,0,0,100,101,99,108,116,121,112,101,40,0,0,0,0,0,0,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,0,0,0,0,0,0,0,115,116,100,0,0,0,0,0,95,71,76,79,66,65,76,95,95,78,0,0,0,0,0,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,0,0,32,62,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,0,0,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,58,58,42,0,0,0,0,0,32,38,0,0,0,0,0,0,32,38,38,0,0,0,0,0,32,91,93,0,0,0,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,108,111,110,103,32,108,111,110,103,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,0,0,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,108,111,110,103,32,100,111,117,98,108,101,0,0,0,0,0,95,95,102,108,111,97,116,49,50,56,0,0,0,0,0,0,46,46,46,0,0,0,0,0,100,101,99,105,109,97,108,54,52,0,0,0,0,0,0,0,100,101,99,105,109,97,108,49,50,56,0,0,0,0,0,0,100,101,99,105,109,97,108,51,50,0,0,0,0,0,0,0,100,101,99,105,109,97,108,49,54,0,0,0,0,0,0,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,0,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0,0,0,0,0,0,0,118,116,97,98,108,101,32,102,111,114,32,0,0,0,0,0,86,84,84,32,102,111,114,32,0,0,0,0,0,0,0,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,0,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,0,0,0,0,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,0,0,0,0,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,0,0,0,0,0,0,0,45,105,110,45,0,0,0,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,0,0,0,0,0,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,0,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,0,0,0,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0,0,0,0,0,0,0,0,0,0,0,0,64,18,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,232,20,0,0,48,18,0,0,104,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,112,19,0,0,88,18,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,112,19,0,0,112,18,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,232,20,0,0,136,18,0,0,128,18,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,20,0,0,192,18,0,0,176,18,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,20,0,0,32,19,0,0,176,18,0,0,0,0,0,0,232,20,0,0,248,18,0,0,72,19,0,0,0,0,0,0,0,0,0,0,232,18,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,88,19,0,0,4,0,0,0,12,0,0,0,6,0,0,0,7,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,248,19,0,0,4,0,0,0,14,0,0,0,6,0,0,0,7,0,0,0,15,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,232,20,0,0,208,19,0,0,176,18,0,0,0,0,0,0,118,0,0,0,0,0,0,0,184,19,0,0,8,20,0,0,68,110,0,0,0,0,0,0,184,19,0,0,24,20,0,0,98,0,0,0,0,0,0,0,184,19,0,0,40,20,0,0,99,0,0,0,0,0,0,0,184,19,0,0,56,20,0,0,104,0,0,0,0,0,0,0,184,19,0,0,72,20,0,0,97,0,0,0,0,0,0,0,184,19,0,0,88,20,0,0,115,0,0,0,0,0,0,0,184,19,0,0,104,20,0,0,116,0,0,0,0,0,0,0,184,19,0,0,120,20,0,0,105,0,0,0,0,0,0,0,184,19,0,0,136,20,0,0,106,0,0,0,0,0,0,0,184,19,0,0,152,20,0,0,184,19,0,0,224,14,0,0,109,0,0,0,0,0,0,0,184,19,0,0,176,20,0,0,102,0,0,0,0,0,0,0,184,19,0,0,192,20,0,0,100,0,0,0,0,0,0,0,184,19,0,0,208,20,0,0,0,0,0,0,48,21,0,0,4,0,0,0,16,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,232,20,0,0,8,21,0,0,232,18,0,0,0,0,0,0,0,0,0,0,144,21,0,0,4,0,0,0,20,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,232,20,0,0,104,21,0,0,232,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BItoD=true;

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var HEAP, shift;
      if (charSize === 2) {
          HEAP = HEAPU16;
          shift = 1;
      } else if (charSize === 4) {
          HEAP = HEAPU32;
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

   
  Module["_strlen"] = _strlen;

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___gxx_personality_v0() {
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  var _emscripten_resume=true;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
init_ClassHandle()
init_RegisteredPointer()
init_embind();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
init_emval();
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "_write": _write, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "init_ClassHandle": init_ClassHandle, "ClassHandle_clone": ClassHandle_clone, "_send": _send, "RegisteredClass": RegisteredClass, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_printf": _printf, "init_embind": init_embind, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "_mkport": _mkport, "RegisteredPointer_destructor": RegisteredPointer_destructor, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "_fprintf": _fprintf, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "_pwrite": _pwrite, "_embind_repr": _embind_repr, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "__reallyNegative": __reallyNegative, "upcastPointer": upcastPointer, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "genericPointerToWireType": genericPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "_fwrite": _fwrite, "__embind_register_void": __embind_register_void, "_fflush": _fflush, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "__embind_register_std_wstring": __embind_register_std_wstring, "_fileno": _fileno, "RegisteredPointer": RegisteredPointer, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "__embind_register_class_function": __embind_register_class_function, "registerType": registerType, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_strerror": _strerror, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var _write=env._write;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var init_ClassHandle=env.init_ClassHandle;
  var ClassHandle_clone=env.ClassHandle_clone;
  var _send=env._send;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _printf=env._printf;
  var init_embind=env.init_embind;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var _mkport=env._mkport;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _pwrite=env._pwrite;
  var _embind_repr=env._embind_repr;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var __reallyNegative=env.__reallyNegative;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var genericPointerToWireType=env.genericPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var _fwrite=env._fwrite;
  var __embind_register_void=env.__embind_register_void;
  var _fflush=env._fflush;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _fileno=env._fileno;
  var RegisteredPointer=env.RegisteredPointer;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var __embind_register_class_function=env.__embind_register_class_function;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN5Test18generateEv($this) {
 $this = $this|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_printf((16|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return 42;
}
function __ZN10emscripten8internal13MethodInvokerIM5Test1FivEiPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 31]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 31]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12operator_newI5Test1JEEEPT_DpOT0_() {
 var $$lcssa$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(1)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$lcssa$i = $0;
  STACKTOP = sp;return ($$lcssa$i|0);
 }
 while(1) {
  $2 = HEAP32[4688>>2]|0;HEAP32[4688>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
   break;
  }
  $4 = $2;
  FUNCTION_TABLE_v[$4 & 63]();
  $5 = (_malloc(1)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa$i = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((4616 + 8|0));
  ___cxa_throw(($7|0),(4672|0),(1|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa$i|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIP5Test1JEE6invokeEPFS3_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_i[$fn & 31]()|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI5Test1EEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (64|0);
}
function __ZN10emscripten8internal14raw_destructorI5Test1EEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var $$index1 = 0, $$lcssa$i$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((64|0),(72|0),(144|0),(0|0),(120|0),(25|0),(112|0),(0|0),(112|0),(0|0),(8|0),(104|0),(26|0));
 __embind_register_class_constructor((64|0),1,(96|0),(88|0),(27|0),(28|0));
 $0 = (_malloc(8)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[4688>>2]|0;HEAP32[4688>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 63]();
    $5 = (_malloc(8)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i$i$i$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((4616 + 8|0));
   ___cxa_throw(($7|0),(4672|0),(1|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i$i = $0;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i$i>>0]=(29)&255;HEAP8[$$lcssa$i$i$i$i+1>>0]=((29)>>8)&255;HEAP8[$$lcssa$i$i$i$i+2>>0]=((29)>>16)&255;HEAP8[$$lcssa$i$i$i$i+3>>0]=(29)>>24;
 $$index1 = (($$lcssa$i$i$i$i) + 4|0);
 HEAP8[$$index1>>0]=0&255;HEAP8[$$index1+1>>0]=(0>>8)&255;HEAP8[$$index1+2>>0]=(0>>16)&255;HEAP8[$$index1+3>>0]=0>>24;
 __embind_register_class_function((64|0),(16|0),2,(40|0),(32|0),(30|0),($$lcssa$i$i$i$i|0),0);
 STACKTOP = sp;return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ti) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 _memcpy(($4|0),($1|0),($3|0))|0;
 $$0$i = $4;
 STACKTOP = sp;return ($$0$i|0);
}
function __GLOBAL__I_a8() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((5136|0),(160|0));
 __embind_register_bool((5168|0),(168|0),1,1,0);
 __embind_register_integer((5184|0),(3744|0),1,-128,127);
 __embind_register_integer((5216|0),(3752|0),1,-128,127);
 __embind_register_integer((5200|0),(3768|0),1,0,255);
 __embind_register_integer((5232|0),(3784|0),2,-32768,32767);
 __embind_register_integer((5248|0),(3792|0),2,0,65535);
 __embind_register_integer((5264|0),(4096|0),4,-2147483648,2147483647);
 __embind_register_integer((5280|0),(4104|0),4,0,-1);
 __embind_register_integer((5288|0),(176|0),4,-2147483648,2147483647);
 __embind_register_integer((5304|0),(4120|0),4,0,-1);
 __embind_register_float((5320|0),(4176|0),4);
 __embind_register_float((5336|0),(4184|0),8);
 __embind_register_std_string((1720|0),(3160|0));
 __embind_register_std_string((1632|0),(184|0));
 __embind_register_std_wstring((1544|0),4,(224|0));
 __embind_register_emval((1424|0),(240|0));
 __embind_register_memory_view((1392|0),0,(256|0));
 __embind_register_memory_view((1352|0),0,(288|0));
 __embind_register_memory_view((1312|0),1,(328|0));
 __embind_register_memory_view((1272|0),2,(368|0));
 __embind_register_memory_view((1232|0),3,(400|0));
 __embind_register_memory_view((1192|0),4,(440|0));
 __embind_register_memory_view((1152|0),5,(472|0));
 __embind_register_memory_view((1112|0),4,(512|0));
 __embind_register_memory_view((1072|0),5,(544|0));
 __embind_register_memory_view((1352|0),0,(584|0));
 __embind_register_memory_view((1312|0),1,(616|0));
 __embind_register_memory_view((1272|0),2,(656|0));
 __embind_register_memory_view((1232|0),3,(696|0));
 __embind_register_memory_view((1192|0),4,(736|0));
 __embind_register_memory_view((1152|0),5,(776|0));
 __embind_register_memory_view((1032|0),6,(816|0));
 __embind_register_memory_view((992|0),7,(848|0));
 __embind_register_memory_view((952|0),7,(880|0));
 STACKTOP = sp;return;
}
function ___cxa_demangle($mangled_name,$buf,$n,$status) {
 $mangled_name = $mangled_name|0;
 $buf = $buf|0;
 $n = $n|0;
 $status = $status|0;
 var $$0 = 0, $$02 = 0, $$0210 = 0, $$1 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $a = 0, $db = 0, $internal_status = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i = sp + 4184|0;
 $a = sp;
 $db = sp + 4120|0;
 $internal_status = sp + 4112|0;
 $0 = ($mangled_name|0)==(0|0);
 if (!($0)) {
  $1 = ($buf|0)!=(0|0);
  $2 = ($n|0)==(0|0);
  $or$cond = $1 & $2;
  if (!($or$cond)) {
   if ($1) {
    $4 = HEAP32[$n>>2]|0;
    $89 = $4;
   } else {
    $89 = 0;
   }
   $5 = (($a) + 4096|0);
   HEAP32[$5>>2] = $a;
   HEAP32[$db>>2] = 0;
   $6 = (($db) + 4|0);
   HEAP32[$6>>2] = 0;
   $7 = (($db) + 8|0);
   HEAP32[$7>>2] = 0;
   $8 = (($db) + 12|0);
   HEAP32[$8>>2] = $a;
   $9 = (($db) + 16|0);
   HEAP32[$9>>2] = 0;
   $10 = (($db) + 20|0);
   HEAP32[$10>>2] = 0;
   $11 = (($db) + 24|0);
   HEAP32[$11>>2] = 0;
   $12 = (($db) + 28|0);
   HEAP32[$12>>2] = $a;
   $13 = (($db) + 32|0);
   HEAP32[$13>>2] = 0;
   $14 = (($db) + 36|0);
   HEAP32[$14>>2] = 0;
   $15 = (($db) + 40|0);
   HEAP32[$15>>2] = 0;
   $16 = (($db) + 44|0);
   HEAP32[$16>>2] = $a;
   $17 = (($db) + 48|0);
   $18 = (($db) + 61|0);
   ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP8[$17+12>>0]=0|0;
   HEAP8[$18>>0] = 1;
   $19 = (($db) + 32|0);
   $20 = (($db) + 44|0);
   $21 = (($__v$i$i) + 12|0);
   HEAP32[$21>>2] = 0;
   $22 = (($__v$i$i) + 16|0);
   HEAP32[$22>>2] = $20;
   $23 = (($a) + 16|0);
   HEAP32[$5>>2] = $23;
   HEAP32[$__v$i$i>>2] = $a;
   $24 = (($__v$i$i) + 8|0);
   HEAP32[$24>>2] = $a;
   $25 = (($__v$i$i) + 4|0);
   HEAP32[$25>>2] = $a;
   HEAP32[$21>>2] = $23;
   HEAP32[$a>>2] = 0;
   $26 = (($a) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = (($a) + 8|0);
   HEAP32[$27>>2] = 0;
   $28 = (($a) + 12|0);
   HEAP32[$28>>2] = $a;
   $29 = (($a) + 16|0);
   HEAP32[$24>>2] = $29;
   __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($19,$__v$i$i);
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
   $30 = (($db) + 62|0);
   HEAP8[$30>>0] = 0;
   $31 = (($db) + 63|0);
   HEAP8[$31>>0] = 1;
   HEAP32[$internal_status>>2] = 0;
   $32 = (_strlen(($mangled_name|0))|0);
   $33 = (($mangled_name) + ($32)|0);
   __THREW__ = 0;
   invoke_viiii(31,($mangled_name|0),($33|0),($db|0),($internal_status|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $122 = ___cxa_find_matching_catch()|0;
    $123 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
    ___resumeException($122|0);
    // unreachable;
   }
   $36 = HEAP32[$internal_status>>2]|0;
   $37 = ($36|0)!=(0);
   $38 = HEAP8[$30>>0]|0;
   $39 = ($38<<24>>24)==(0);
   $or$cond6 = $37 | $39;
   do {
    if ($or$cond6) {
     $66 = $36;
     label = 19;
    } else {
     $40 = HEAP32[$19>>2]|0;
     $41 = HEAP32[$14>>2]|0;
     $42 = ($40|0)==($41|0);
     if ($42) {
      label = 20;
     } else {
      $43 = HEAP32[$40>>2]|0;
      $44 = (($40) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       label = 20;
      } else {
       HEAP8[$30>>0] = 0;
       HEAP8[$18>>0] = 0;
       $47 = HEAP32[$db>>2]|0;
       $48 = HEAP32[$6>>2]|0;
       $49 = ($48|0)==($47|0);
       if (!($49)) {
        $51 = $48;
        while(1) {
         $50 = (($51) + -24|0);
         HEAP32[$6>>2] = $50;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
         $52 = HEAP32[$6>>2]|0;
         $53 = ($52|0)==($47|0);
         if ($53) {
          break;
         } else {
          $51 = $52;
         }
        }
       }
       $54 = HEAP32[$9>>2]|0;
       $55 = HEAP32[$10>>2]|0;
       $56 = ($55|0)==($54|0);
       if (!($56)) {
        $58 = $55;
        while(1) {
         $57 = (($58) + -16|0);
         HEAP32[$10>>2] = $57;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($57);
         $59 = HEAP32[$10>>2]|0;
         $60 = ($59|0)==($54|0);
         if ($60) {
          break;
         } else {
          $58 = $59;
         }
        }
       }
       __THREW__ = 0;
       invoke_viiii(31,($mangled_name|0),($33|0),($db|0),($internal_status|0));
       $61 = __THREW__; __THREW__ = 0;
       $62 = $61&1;
       if ($62) {
        $122 = ___cxa_find_matching_catch()|0;
        $123 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
        ___resumeException($122|0);
        // unreachable;
       }
       $63 = HEAP8[$30>>0]|0;
       $64 = ($63<<24>>24)==(0);
       if ($64) {
        $$pr$pre = HEAP32[$internal_status>>2]|0;
        $66 = $$pr$pre;
        label = 19;
        break;
       } else {
        HEAP32[$internal_status>>2] = -2;
        $$1 = 0;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $65 = ($66|0)==(0);
    if ($65) {
     label = 20;
    } else {
     $$1 = 0;
    }
   }
   do {
    if ((label|0) == 20) {
     $67 = HEAP32[$6>>2]|0;
     $68 = (($67) + -24|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $69&255;
      $75 = $74 >>> 1;
      $86 = $75;
     } else {
      $72 = (($67) + -20|0);
      $73 = HEAP32[$72>>2]|0;
      $86 = $73;
     }
     $76 = (($67) + -12|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     if ($79) {
      $82 = $77&255;
      $83 = $82 >>> 1;
      $85 = $83;
     } else {
      $80 = (($67) + -8|0);
      $81 = HEAP32[$80>>2]|0;
      $85 = $81;
     }
     $84 = (($85) + ($86))|0;
     $87 = (($84) + 1)|0;
     $88 = ($87>>>0)>($89>>>0);
     if ($88) {
      $90 = (_realloc($buf,$87)|0);
      $91 = ($90|0)==(0|0);
      if ($91) {
       HEAP32[$internal_status>>2] = -1;
       $$1 = 0;
       break;
      }
      if ($2) {
       $$0210 = $90;
      } else {
       HEAP32[$n>>2] = $87;
       $$02 = $90;
       label = 31;
      }
     } else {
      $$02 = $buf;
      label = 31;
     }
     if ((label|0) == 31) {
      $92 = ($$02|0)==(0|0);
      if ($92) {
       $$1 = 0;
       break;
      } else {
       $$0210 = $$02;
      }
     }
     $93 = HEAP32[$6>>2]|0;
     $94 = (($93) + -24|0);
     $95 = (($93) + -12|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 & 1;
     $98 = ($97<<24>>24)==(0);
     if ($98) {
      $103 = (($95) + 1|0);
      $104 = $96&255;
      $105 = $104 >>> 1;
      $106 = $103;$107 = $105;
     } else {
      $99 = (($93) + -4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($93) + -8|0);
      $102 = HEAP32[$101>>2]|0;
      $106 = $100;$107 = $102;
     }
     __THREW__ = 0;
     (invoke_iiii(32,($94|0),($106|0),($107|0))|0);
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      $122 = ___cxa_find_matching_catch()|0;
      $123 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
      ___resumeException($122|0);
      // unreachable;
     }
     $110 = HEAP32[$6>>2]|0;
     $111 = (($110) + -24|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112 & 1;
     $114 = ($113<<24>>24)==(0);
     if ($114) {
      $117 = (($111) + 1|0);
      $118 = $117;
     } else {
      $115 = (($110) + -16|0);
      $116 = HEAP32[$115>>2]|0;
      $118 = $116;
     }
     _memcpy(($$0210|0),($118|0),($84|0))|0;
     $119 = (($$0210) + ($84)|0);
     HEAP8[$119>>0] = 0;
     $$1 = $$0210;
    }
   } while(0);
   $120 = ($status|0)==(0|0);
   if (!($120)) {
    $121 = HEAP32[$internal_status>>2]|0;
    HEAP32[$status>>2] = $121;
   }
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
   $$0 = $$1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $3 = ($status|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$status>>2] = -3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (4640|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,4840)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below) {
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 63]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(5152|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,4952)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = (($5) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($this) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = (($this) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(5136|0);
     $or$cond = $18 | $19;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,4840)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,4840)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = (($info) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = (($info) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = (($info) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = (($30) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 63]($25,$info,$33,1);
          $34 = (($info) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = (($info) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$1 = 1;
          } else {
           $$1 = 0;
          }
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$dst_type) {
 $static_ptr = $static_ptr|0;
 $dst_type = $dst_type|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = 4784;
 $9 = (($info) + 12|0);
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$9+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+40>>1]=0|0;HEAP8[$9+42>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 31]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 31]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return (0)|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below) {
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 31]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 31]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 31]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 HEAP32[$0>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$01$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = ($2|0)==($0|0);
 $$pre1 = HEAP32[$3>>2]|0;
 if ($4) {
  $21 = $$pre1;$22 = $0;
 } else {
  $$01$i = $2;$7 = $$pre1;
  while(1) {
   $5 = (($$01$i) + -16|0);
   $6 = (($7) + -16|0);
   HEAP32[$6>>2] = 0;
   $8 = (($7) + -12|0);
   HEAP32[$8>>2] = 0;
   $9 = (($$01$i) + -4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($7) + -8|0);
   HEAP32[$11>>2] = 0;
   $12 = (($7) + -4|0);
   HEAP32[$12>>2] = $10;
   $13 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $13;
   $14 = (($$01$i) + -12|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$8>>2] = $15;
   $16 = (($$01$i) + -8|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$11>>2] = $17;
   HEAP32[$16>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[$5>>2] = 0;
   $18 = HEAP32[$3>>2]|0;
   $19 = (($18) + -16|0);
   HEAP32[$3>>2] = $19;
   $20 = ($5|0)==($0|0);
   if ($20) {
    break;
   } else {
    $$01$i = $5;$7 = $19;
   }
  }
  $$pre = HEAP32[$this>>2]|0;
  $21 = $19;$22 = $$pre;
 }
 HEAP32[$this>>2] = $21;
 HEAP32[$3>>2] = $22;
 $23 = (($__v) + 8|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 HEAP32[$1>>2] = $25;
 HEAP32[$23>>2] = $24;
 $26 = (($this) + 8|0);
 $27 = (($__v) + 12|0);
 $28 = HEAP32[$26>>2]|0;
 $29 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $29;
 HEAP32[$27>>2] = $28;
 $30 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 $16 = $9;
 $17 = (($15) - ($16))|0;
 $18 = HEAP32[$12>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first,$last,$db,$status) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 $status = $status|0;
 var $$0$i = 0, $$0$i2 = 0, $$01$i = 0, $$1$i = 0, $$12$i = 0, $$pr = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i3 = 0, $i$08$i = 0, $isdigit$i = 0, $isdigit3$i = 0, $isdigittmp$i = 0, $isdigittmp2$i = 0, $or$cond = 0, $or$cond1 = 0, $scevgep4$i$i$i = 0, $t$07$i = 0, $t$1$ph$i = 0, $t$14$i = 0, $t$2$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ($first>>>0)<($last>>>0);
 if (!($3)) {
  HEAP32[$status>>2] = -2;
  STACKTOP = sp;return;
 }
 $4 = HEAP8[$first>>0]|0;
 $5 = ($4<<24>>24)==(95);
 L5: do {
  if ($5) {
   $6 = $last;
   $7 = $first;
   $8 = (($6) - ($7))|0;
   $9 = ($8|0)>(3);
   if (!($9)) {
    HEAP32[$status>>2] = -2;
    STACKTOP = sp;return;
   }
   $10 = (($first) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   if ((($11<<24>>24) == 95)) {
    $92 = (($first) + 2|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = ($93<<24>>24)==(95);
    if ($94) {
     $95 = (($first) + 3|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = ($96<<24>>24)==(90);
     if ($97) {
      $98 = (($first) + 4|0);
      $99 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($98,$last,$db)|0);
      $100 = ($99|0)==($98|0);
      $101 = ($99|0)==($last|0);
      $or$cond1 = $100 | $101;
      if ($or$cond1) {
       HEAP32[$status>>2] = -2;
       STACKTOP = sp;return;
      }
      $102 = $99;
      $103 = (($6) - ($102))|0;
      $104 = ($103|0)>(12);
      L19: do {
       if ($104) {
        $i$08$i = 0;$t$07$i = $99;
        while(1) {
         $105 = HEAP8[$t$07$i>>0]|0;
         $106 = (4312 + ($i$08$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($105<<24>>24)==($107<<24>>24);
         if (!($108)) {
          $$0$i2 = $99;
          break L19;
         }
         $109 = (($i$08$i) + 1)|0;
         $110 = (($t$07$i) + 1|0);
         $111 = ($109|0)<(13);
         if ($111) {
          $i$08$i = $109;$t$07$i = $110;
         } else {
          break;
         }
        }
        $112 = ($110|0)==($last|0);
        L24: do {
         if ($112) {
          $t$2$i = $last;
         } else {
          $113 = HEAP8[$110>>0]|0;
          $114 = ($113<<24>>24)==(95);
          if ($114) {
           $115 = (($t$07$i) + 2|0);
           $116 = ($115|0)==($last|0);
           if ($116) {
            $$0$i2 = $99;
            break L19;
           }
           $117 = HEAP8[$115>>0]|0;
           $118 = $117 << 24 >> 24;
           $isdigittmp2$i = (($118) + -48)|0;
           $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
           if (!($isdigit3$i)) {
            $$0$i2 = $99;
            break L19;
           }
           $119 = (($t$07$i) + 3|0);
           $t$1$ph$i = $119;
          } else {
           $t$1$ph$i = $110;
          }
          $120 = ($t$1$ph$i|0)==($last|0);
          if ($120) {
           $t$2$i = $last;
          } else {
           $t$14$i = $t$1$ph$i;
           while(1) {
            $123 = HEAP8[$t$14$i>>0]|0;
            $124 = $123 << 24 >> 24;
            $isdigittmp$i = (($124) + -48)|0;
            $isdigit$i = ($isdigittmp$i>>>0)<(10);
            $122 = (($t$14$i) + 1|0);
            if (!($isdigit$i)) {
             $t$2$i = $t$14$i;
             break L24;
            }
            $121 = ($122|0)==($last|0);
            if ($121) {
             $t$2$i = $last;
             break;
            } else {
             $t$14$i = $122;
            }
           }
          }
         }
        } while(0);
        $125 = HEAP32[$db>>2]|0;
        $126 = (($db) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = ($125|0)==($127|0);
        if ($128) {
         $$0$i2 = $99;
        } else {
         $129 = (($127) + -24|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($129,0,4328,33)|0);
         $$0$i2 = $t$2$i;
        }
       } else {
        $$0$i2 = $99;
       }
      } while(0);
      $130 = ($$0$i2|0)==($last|0);
      if ($130) {
       break;
      }
      HEAP32[$status>>2] = -2;
      STACKTOP = sp;return;
     }
    }
   } else if ((($11<<24>>24) == 90)) {
    $12 = (($first) + 2|0);
    $13 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12,$last,$db)|0);
    $14 = ($13|0)==($12|0);
    $15 = ($13|0)==($last|0);
    $or$cond = $14 | $15;
    if (!($or$cond)) {
     $16 = HEAP8[$13>>0]|0;
     $17 = ($16<<24>>24)==(46);
     if ($17) {
      $18 = HEAP32[$db>>2]|0;
      $19 = (($db) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($18|0)==($20|0);
      if (!($21)) {
       $22 = (($20) + -24|0);
       $23 = $13;
       $24 = (($6) - ($23))|0;
       $25 = ($24>>>0)>(4294967279);
       if ($25) {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        // unreachable;
       }
       $26 = ($24>>>0)<(11);
       if ($26) {
        $27 = $24 << 1;
        $28 = $27&255;
        HEAP8[$2>>0] = $28;
        $29 = (($2) + 1|0);
        $__p$0$ph$i$i$i = $29;
       } else {
        $30 = (($24) + 16)|0;
        $31 = $30 & -16;
        $32 = (_malloc($31)|0);
        $33 = (($2) + 8|0);
        HEAP32[$33>>2] = $32;
        $34 = $31 | 1;
        HEAP32[$2>>2] = $34;
        $35 = (($2) + 4|0);
        HEAP32[$35>>2] = $24;
        $__p$0$ph$i$i$i = $32;
       }
       HEAP8[$__p$0$ph$i$i$i>>0] = 46;
       $36 = (($13) + 1|0);
       $37 = ($36|0)==($last|0);
       if (!($37)) {
        $39 = $36;$__p$01$i$i$i3 = $__p$0$ph$i$i$i;
        while(1) {
         $38 = (($__p$01$i$i$i3) + 1|0);
         $$pre$i = HEAP8[$39>>0]|0;
         HEAP8[$38>>0] = $$pre$i;
         $40 = (($39) + 1|0);
         $41 = ($40|0)==($last|0);
         if ($41) {
          break;
         } else {
          $39 = $40;$__p$01$i$i$i3 = $38;
         }
        }
       }
       $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($24)|0);
       HEAP8[$scevgep4$i$i$i>>0] = 0;
       __THREW__ = 0;
       $42 = (invoke_iiiii(33,($2|0),0,(1992|0),2)|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $74 = ___cxa_find_matching_catch()|0;
        $75 = tempRet0;
        $$1$i = $75;$$12$i = $74;
       } else {
        ;HEAP32[$1+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$42+8>>2]|0;
        ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;
        __THREW__ = 0;
        $45 = (invoke_iiii(32,($1|0),(2000|0),1)|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        do {
         if ($47) {
          $76 = ___cxa_find_matching_catch()|0;
          $77 = tempRet0;
          $$0$i = $77;$$01$i = $76;
         } else {
          ;HEAP32[$0+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$45+8>>2]|0;
          ;HEAP32[$45+0>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;
          $48 = HEAP8[$0>>0]|0;
          $49 = $48 & 1;
          $50 = ($49<<24>>24)==(0);
          if ($50) {
           $55 = (($0) + 1|0);
           $56 = $48&255;
           $57 = $56 >>> 1;
           $58 = $55;$59 = $57;
          } else {
           $51 = (($0) + 8|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = (($0) + 4|0);
           $54 = HEAP32[$53>>2]|0;
           $58 = $52;$59 = $54;
          }
          __THREW__ = 0;
          (invoke_iiii(32,($22|0),($58|0),($59|0))|0);
          $60 = __THREW__; __THREW__ = 0;
          $61 = $60&1;
          if ($61) {
           $78 = ___cxa_find_matching_catch()|0;
           $79 = tempRet0;
           if ($50) {
            $$0$i = $79;$$01$i = $78;
            break;
           }
           $80 = (($0) + 8|0);
           $81 = HEAP32[$80>>2]|0;
           _free($81);
           $$0$i = $79;$$01$i = $78;
           break;
          }
          if (!($50)) {
           $62 = (($0) + 8|0);
           $63 = HEAP32[$62>>2]|0;
           _free($63);
          }
          $64 = HEAP8[$1>>0]|0;
          $65 = $64 & 1;
          $66 = ($65<<24>>24)==(0);
          if (!($66)) {
           $67 = (($1) + 8|0);
           $68 = HEAP32[$67>>2]|0;
           _free($68);
          }
          $69 = HEAP8[$2>>0]|0;
          $70 = $69 & 1;
          $71 = ($70<<24>>24)==(0);
          if ($71) {
           break L5;
          }
          $72 = (($2) + 8|0);
          $73 = HEAP32[$72>>2]|0;
          _free($73);
          break L5;
         }
        } while(0);
        $82 = HEAP8[$1>>0]|0;
        $83 = $82 & 1;
        $84 = ($83<<24>>24)==(0);
        if ($84) {
         $$1$i = $$0$i;$$12$i = $$01$i;
        } else {
         $85 = (($1) + 8|0);
         $86 = HEAP32[$85>>2]|0;
         _free($86);
         $$1$i = $$0$i;$$12$i = $$01$i;
        }
       }
       $87 = HEAP8[$2>>0]|0;
       $88 = $87 & 1;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        ___resumeException($$12$i|0);
        // unreachable;
       }
       $90 = (($2) + 8|0);
       $91 = HEAP32[$90>>2]|0;
       _free($91);
       ___resumeException($$12$i|0);
       // unreachable;
      }
     }
    }
    if ($15) {
     break;
    }
    HEAP32[$status>>2] = -2;
    STACKTOP = sp;return;
   }
   HEAP32[$status>>2] = -2;
   STACKTOP = sp;return;
  } else {
   $131 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $132 = ($131|0)==($last|0);
   if (!($132)) {
    HEAP32[$status>>2] = -2;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $$pr = HEAP32[$status>>2]|0;
 $133 = ($$pr|0)==(0);
 if (!($133)) {
  STACKTOP = sp;return;
 }
 $134 = HEAP32[$db>>2]|0;
 $135 = (($db) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($134|0)==($136|0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 HEAP32[$status>>2] = -2;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
 }
 $6 = HEAP8[$this>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if ($4) {
  $13 = $0;
 } else {
  $6 = $3;
  while(1) {
   $5 = (($6) + -24|0);
   HEAP32[$2>>2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($0|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
  $$pre = HEAP32[$this>>2]|0;
  $13 = $$pre;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $13;
 $14 = (($11) - ($12))|0;
 $15 = (($this) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16,$13,$14);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $31 = (($__n) - ($14))|0;
  $32 = (($31) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$32,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 if ($8) {
  $20 = (($this) + 1|0);
  $22 = $20;
 } else {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $22 = $19;
 }
 $21 = (($22) + ($15)|0);
 _memcpy(($21|0),($__s|0),($__n|0))|0;
 $23 = (($15) + ($__n))|0;
 $24 = HEAP8[$this>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $28 = $23 << 1;
  $29 = $28&255;
  HEAP8[$this>>0] = $29;
 } else {
  $27 = (($this) + 4|0);
  HEAP32[$27>>2] = $23;
 }
 $30 = (($22) + ($23)|0);
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($1|0);
  if ($5) {
   $14 = $1;
  } else {
   $7 = $4;
   while(1) {
    $6 = (($7) + -16|0);
    HEAP32[$3>>2] = $6;
    __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
    $8 = HEAP32[$3>>2]|0;
    $9 = ($8|0)==($1|0);
    if ($9) {
     break;
    } else {
     $7 = $8;
    }
   }
   $$pre$i = HEAP32[$0>>2]|0;
   $14 = $$pre$i;
  }
  $10 = (($this) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = $14;
  $15 = (($12) - ($13))|0;
  $16 = (($this) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($17,$14,$15);
 }
 $18 = (($this) + 16|0);
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($18);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 15)|0;
 $1 = $0 & -16;
 $2 = (($this) + 4096|0);
 $3 = (($this) + 4096|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $10 = (_malloc($1)|0);
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = (($4) + ($1)|0);
  HEAP32[$3>>2] = $9;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if ($4) {
  $13 = $0;
 } else {
  $6 = $3;
  while(1) {
   $5 = (($6) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($0|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
  $$pre = HEAP32[$this>>2]|0;
  $13 = $$pre;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $13;
 $14 = (($11) - ($12))|0;
 $15 = (($this) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16,$13,$14);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this,$p,$n) {
 $this = $this|0;
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this>>>0)<=($p>>>0);
 $1 = (($this) + 4096|0);
 $2 = ($1>>>0)>=($p>>>0);
 $or$cond = $0 & $2;
 if (!($or$cond)) {
  _free($p);
  STACKTOP = sp;return;
 }
 $3 = (($n) + 15)|0;
 $4 = $3 & -16;
 $5 = (($p) + ($4)|0);
 $6 = (($this) + 4096|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$013 = 0, $$07 = 0, $$1$i = 0, $$114 = 0, $$13$i = 0, $$18 = 0, $$2$i = 0, $$215 = 0, $$24$i = 0, $$25$ph = 0, $$29 = 0, $$3$i = 0, $$35$i = 0, $$7 = 0, $$in = 0, $$in101 = 0, $$pre = 0, $$pre$i$i$i$i = 0, $$pre100 = 0, $$pre57 = 0;
 var $$pre92 = 0, $$pre93 = 0, $$pre94 = 0, $$pre95 = 0, $$pre97 = 0, $$pre98 = 0, $$pre99 = 0, $$sroa$5 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $exitcond = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$068 = 0, $k2$069 = 0, $left$i = 0, $lpad$phi$index = 0, $lpad$phi$index12 = 0, $lpad$phi75$index = 0, $lpad$phi75$index7 = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i$i = 0;
 var $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $ret1 = 0, $ret2 = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$2 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left$i = sp + 12|0;
 $$sroa$5 = sp + 96|0;
 $0 = sp + 60|0;
 $1 = sp + 72|0;
 $2 = sp + 84|0;
 $ret2 = sp;
 $ret1 = sp + 36|0;
 $tmp = sp + 24|0;
 $3 = sp + 48|0;
 $4 = ($first|0)==($last|0);
 if ($4) {
  $$7 = $first;
  STACKTOP = sp;return ($$7|0);
 }
 $5 = (($db) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = (($db) + 61|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($7>>>0)>(1);
 if ($10) {
  HEAP8[$8>>0] = 1;
 }
 $11 = HEAP8[$first>>0]|0;
 $12 = $11 << 24 >> 24;
 L7: do {
  if ((($12|0) == 84) | (($12|0) == 71)) {
   $13 = $last;
   $14 = $first;
   $15 = (($13) - ($14))|0;
   $16 = ($15|0)>(2);
   if ($16) {
    if ((($12|0) == 71)) {
     $253 = (($first) + 1|0);
     $254 = HEAP8[$253>>0]|0;
     $255 = $254 << 24 >> 24;
     if ((($255|0) == 86)) {
      $256 = (($first) + 2|0);
      __THREW__ = 0;
      $257 = (invoke_iiii(37,($256|0),($last|0),($db|0))|0);
      $258 = __THREW__; __THREW__ = 0;
      $259 = $258&1;
      if ($259) {
       label = 101;
       break;
      }
      $260 = ($257|0)==($256|0);
      if ($260) {
       $$25$ph = $first;
       label = 220;
       break;
      }
      $261 = HEAP32[$db>>2]|0;
      $262 = (($db) + 4|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ($261|0)==($263|0);
      if ($264) {
       $$25$ph = $first;
       label = 220;
       break;
      }
      $265 = (($263) + -24|0);
      __THREW__ = 0;
      (invoke_iiiii(33,($265|0),0,(4560|0),19)|0);
      $266 = __THREW__; __THREW__ = 0;
      $267 = $266&1;
      if ($267) {
       label = 101;
       break;
      } else {
       $$25$ph = $257;
       label = 220;
       break;
      }
     } else if ((($255|0) == 82)) {
      $268 = (($first) + 2|0);
      __THREW__ = 0;
      $269 = (invoke_iiii(37,($268|0),($last|0),($db|0))|0);
      $270 = __THREW__; __THREW__ = 0;
      $271 = $270&1;
      if ($271) {
       label = 101;
       break;
      }
      $272 = ($269|0)==($268|0);
      if ($272) {
       $$25$ph = $first;
       label = 220;
       break;
      }
      $273 = HEAP32[$db>>2]|0;
      $274 = (($db) + 4|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = ($273|0)==($275|0);
      if ($276) {
       $$25$ph = $first;
       label = 220;
       break;
      }
      $277 = (($275) + -24|0);
      __THREW__ = 0;
      (invoke_iiiii(33,($277|0),0,(4584|0),24)|0);
      $278 = __THREW__; __THREW__ = 0;
      $279 = $278&1;
      if ($279) {
       label = 101;
       break;
      } else {
       $$25$ph = $269;
       label = 220;
       break;
      }
     } else {
      $$25$ph = $first;
      label = 220;
      break;
     }
    } else if (!((($12|0) == 84))) {
     $$25$ph = $first;
     label = 220;
     break;
    }
    $17 = (($first) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    switch ($19|0) {
    case 73:  {
     $44 = (($first) + 2|0);
     __THREW__ = 0;
     $45 = (invoke_iiii(34,($44|0),($last|0),($db|0))|0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      label = 101;
      break L7;
     }
     $48 = ($45|0)==($44|0);
     if ($48) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $49 = HEAP32[$db>>2]|0;
     $50 = (($db) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($49|0)==($51|0);
     if ($52) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $53 = (($51) + -24|0);
     __THREW__ = 0;
     (invoke_iiiii(33,($53|0),0,(4400|0),13)|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      label = 101;
      break L7;
     } else {
      $$25$ph = $45;
      label = 220;
      break L7;
     }
     break;
    }
    case 86:  {
     $20 = (($first) + 2|0);
     __THREW__ = 0;
     $21 = (invoke_iiii(34,($20|0),($last|0),($db|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 101;
      break L7;
     }
     $24 = ($21|0)==($20|0);
     if ($24) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $25 = HEAP32[$db>>2]|0;
     $26 = (($db) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25|0)==($27|0);
     if ($28) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $29 = (($27) + -24|0);
     __THREW__ = 0;
     (invoke_iiiii(33,($29|0),0,(4368|0),11)|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 101;
      break L7;
     } else {
      $$25$ph = $21;
      label = 220;
      break L7;
     }
     break;
    }
    case 84:  {
     $32 = (($first) + 2|0);
     __THREW__ = 0;
     $33 = (invoke_iiii(34,($32|0),($last|0),($db|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      label = 101;
      break L7;
     }
     $36 = ($33|0)==($32|0);
     if ($36) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $37 = HEAP32[$db>>2]|0;
     $38 = (($db) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37|0)==($39|0);
     if ($40) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $41 = (($39) + -24|0);
     __THREW__ = 0;
     (invoke_iiiii(33,($41|0),0,(4384|0),8)|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 101;
      break L7;
     } else {
      $$25$ph = $33;
      label = 220;
      break L7;
     }
     break;
    }
    case 67:  {
     $84 = (($first) + 2|0);
     __THREW__ = 0;
     $85 = (invoke_iiii(34,($84|0),($last|0),($db|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 101;
      break L7;
     }
     $88 = ($85|0)==($84|0);
     if ($88) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $89 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($85,$last)|0);
     $90 = ($89|0)==($85|0);
     $91 = ($89|0)==($last|0);
     $or$cond$i = $90 | $91;
     if ($or$cond$i) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $92 = HEAP8[$89>>0]|0;
     $93 = ($92<<24>>24)==(95);
     if (!($93)) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $94 = (($89) + 1|0);
     __THREW__ = 0;
     $95 = (invoke_iiii(34,($94|0),($last|0),($db|0))|0);
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      label = 101;
      break L7;
     }
     $98 = ($95|0)==($94|0);
     if ($98) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $99 = (($db) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = HEAP32[$db>>2]|0;
     $102 = $100;
     $103 = $101;
     $104 = (($102) - ($103))|0;
     $105 = (($104|0) / 24)&-1;
     $106 = ($105>>>0)<(2);
     if ($106) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $107 = (($100) + -24|0);
     __THREW__ = 0;
     invoke_vii(36,($left$i|0),($107|0));
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      label = 101;
      break L7;
     }
     $110 = HEAP32[$99>>2]|0;
     $111 = (($110) + -24|0);
     $113 = $110;
     while(1) {
      $112 = (($113) + -24|0);
      HEAP32[$99>>2] = $112;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($112);
      $114 = HEAP32[$99>>2]|0;
      $115 = ($114|0)==($111|0);
      if ($115) {
       break;
      } else {
       $113 = $114;
      }
     }
     $116 = (($110) + -48|0);
     __THREW__ = 0;
     $117 = (invoke_iiiii(33,($left$i|0),0,(4472|0),24)|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      $210 = ___cxa_find_matching_catch()|0;
      $211 = tempRet0;
      $$3$i = $211;$$35$i = $210;
     } else {
      ;HEAP32[$1+0>>2]=HEAP32[$117+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$117+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$117+8>>2]|0;
      ;HEAP32[$117+0>>2]=0|0;HEAP32[$117+4>>2]=0|0;HEAP32[$117+8>>2]=0|0;
      __THREW__ = 0;
      $120 = (invoke_iiii(32,($1|0),(4504|0),4)|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if ($122) {
       $212 = ___cxa_find_matching_catch()|0;
       $213 = tempRet0;
       $$2$i = $213;$$24$i = $212;
      } else {
       ;HEAP32[$0+0>>2]=HEAP32[$120+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$120+8>>2]|0;
       ;HEAP32[$120+0>>2]=0|0;HEAP32[$120+4>>2]=0|0;HEAP32[$120+8>>2]=0|0;
       $123 = HEAP32[$99>>2]|0;
       $124 = (($123) + -24|0);
       __THREW__ = 0;
       invoke_vii(36,($2|0),($124|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       do {
        if ($126) {
         $214 = ___cxa_find_matching_catch()|0;
         $215 = tempRet0;
         $$1$i = $215;$$13$i = $214;
        } else {
         $127 = HEAP8[$2>>0]|0;
         $128 = $127 & 1;
         $129 = ($128<<24>>24)==(0);
         if ($129) {
          $134 = (($2) + 1|0);
          $135 = $127&255;
          $136 = $135 >>> 1;
          $137 = $134;$138 = $136;
         } else {
          $130 = (($2) + 8|0);
          $131 = HEAP32[$130>>2]|0;
          $132 = (($2) + 4|0);
          $133 = HEAP32[$132>>2]|0;
          $137 = $131;$138 = $133;
         }
         __THREW__ = 0;
         $139 = (invoke_iiii(32,($0|0),($137|0),($138|0))|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          $216 = ___cxa_find_matching_catch()|0;
          $217 = tempRet0;
          if ($129) {
           $$1$i = $217;$$13$i = $216;
           break;
          }
          $218 = (($2) + 8|0);
          $219 = HEAP32[$218>>2]|0;
          _free($219);
          $$1$i = $217;$$13$i = $216;
          break;
         }
         $142 = HEAP8[$139>>0]|0;
         $143 = (($139) + 1|0);
         ;HEAP8[$$sroa$5+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$143+6>>0]|0;
         $144 = (($139) + 8|0);
         $145 = HEAP32[$144>>2]|0;
         ;HEAP32[$139+0>>2]=0|0;HEAP32[$139+4>>2]=0|0;HEAP32[$139+8>>2]=0|0;
         $146 = HEAP8[$116>>0]|0;
         $147 = $146 & 1;
         $148 = ($147<<24>>24)==(0);
         do {
          if ($148) {
           $149 = (($116) + 1|0);
           HEAP8[$149>>0] = 0;
           HEAP8[$116>>0] = 0;
          } else {
           $150 = (($110) + -40|0);
           $151 = HEAP32[$150>>2]|0;
           HEAP8[$151>>0] = 0;
           $152 = (($110) + -44|0);
           HEAP32[$152>>2] = 0;
           $$pre$i$i$i$i = HEAP8[$116>>0]|0;
           $153 = $$pre$i$i$i$i & 1;
           $154 = ($153<<24>>24)==(0);
           if ($154) {
            $159 = $$pre$i$i$i$i;$168 = 10;
           } else {
            $155 = HEAP32[$116>>2]|0;
            $156 = $155 & -2;
            $phitmp$i$i$i$i$i$i$i = (($156) + -1)|0;
            $157 = $155&255;
            $159 = $157;$168 = $phitmp$i$i$i$i$i$i$i;
           }
           $158 = $159 & 1;
           $160 = ($158<<24>>24)==(0);
           do {
            if ($160) {
             $161 = $159&255;
             $162 = $161 >>> 1;
             $163 = ($159&255)<(22);
             if ($163) {
              $167 = 10;$187 = $162;$576 = 1;
              break;
             }
             $164 = (($162) + 16)|0;
             $165 = $164 & 240;
             $phitmp$i2$i$i$i$i$i$i = (($165) + -1)|0;
             $167 = $phitmp$i2$i$i$i$i$i$i;$187 = $162;$576 = 1;
            } else {
             $167 = 10;$187 = 0;$576 = 0;
            }
           } while(0);
           $166 = ($167|0)==($168|0);
           if ($166) {
            break;
           }
           $169 = ($167|0)==(10);
           if ($169) {
            $174 = (($116) + 1|0);
            $175 = HEAP32[$150>>2]|0;
            if ($576) {
             $176 = $159&255;
             $177 = $176 >>> 1;
             $178 = (($177) + 1)|0;
             _memcpy(($174|0),($175|0),($178|0))|0;
             _free($175);
            } else {
             $183 = HEAP8[$175>>0]|0;
             HEAP8[$174>>0] = $183;
             _free($175);
            }
            $188 = $187 << 1;
            $189 = $188&255;
            HEAP8[$116>>0] = $189;
            break;
           }
           $170 = ($167>>>0)<=($168>>>0);
           $171 = (($167) + 1)|0;
           $172 = (_malloc($171)|0);
           $173 = ($172|0)==(0|0);
           $or$cond$i$i$i$i$i$i = $170 & $173;
           if ($or$cond$i$i$i$i$i$i) {
            break;
           }
           if ($576) {
            $179 = (($116) + 1|0);
            $180 = $159&255;
            $181 = $180 >>> 1;
            $182 = (($181) + 1)|0;
            _memcpy(($172|0),($179|0),($182|0))|0;
           } else {
            $184 = HEAP32[$150>>2]|0;
            $185 = HEAP8[$184>>0]|0;
            HEAP8[$172>>0] = $185;
            _free($184);
           }
           $186 = $171 | 1;
           HEAP32[$116>>2] = $186;
           HEAP32[$152>>2] = $187;
           HEAP32[$150>>2] = $172;
          }
         } while(0);
         $190 = (($110) + -48|0);
         HEAP8[$190>>0] = $142;
         $191 = (($110) + -47|0);
         ;HEAP8[$191+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$191+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$191+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$191+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$191+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$191+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$191+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
         $192 = (($110) + -40|0);
         HEAP32[$192>>2] = $145;
         ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
         if (!($129)) {
          $193 = (($2) + 8|0);
          $194 = HEAP32[$193>>2]|0;
          _free($194);
         }
         $195 = HEAP8[$0>>0]|0;
         $196 = $195 & 1;
         $197 = ($196<<24>>24)==(0);
         if (!($197)) {
          $198 = (($0) + 8|0);
          $199 = HEAP32[$198>>2]|0;
          _free($199);
         }
         $200 = HEAP8[$1>>0]|0;
         $201 = $200 & 1;
         $202 = ($201<<24>>24)==(0);
         if (!($202)) {
          $203 = (($1) + 8|0);
          $204 = HEAP32[$203>>2]|0;
          _free($204);
         }
         $205 = HEAP8[$left$i>>0]|0;
         $206 = $205 & 1;
         $207 = ($206<<24>>24)==(0);
         if ($207) {
          $$25$ph = $95;
          label = 220;
          break L7;
         }
         $208 = (($left$i) + 8|0);
         $209 = HEAP32[$208>>2]|0;
         _free($209);
         $$25$ph = $95;
         label = 220;
         break L7;
        }
       } while(0);
       $220 = HEAP8[$0>>0]|0;
       $221 = $220 & 1;
       $222 = ($221<<24>>24)==(0);
       if ($222) {
        $$2$i = $$1$i;$$24$i = $$13$i;
       } else {
        $223 = (($0) + 8|0);
        $224 = HEAP32[$223>>2]|0;
        _free($224);
        $$2$i = $$1$i;$$24$i = $$13$i;
       }
      }
      $225 = HEAP8[$1>>0]|0;
      $226 = $225 & 1;
      $227 = ($226<<24>>24)==(0);
      if ($227) {
       $$3$i = $$2$i;$$35$i = $$24$i;
      } else {
       $228 = (($1) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       _free($229);
       $$3$i = $$2$i;$$35$i = $$24$i;
      }
     }
     $230 = HEAP8[$left$i>>0]|0;
     $231 = $230 & 1;
     $232 = ($231<<24>>24)==(0);
     if (!($232)) {
      $233 = (($left$i) + 8|0);
      $234 = HEAP32[$233>>2]|0;
      _free($234);
     }
     $eh$lpad$body$index2Z2D = $$3$i;$eh$lpad$body$indexZ2D = $$35$i;
     break L7;
     break;
    }
    case 83:  {
     $56 = (($first) + 2|0);
     __THREW__ = 0;
     $57 = (invoke_iiii(34,($56|0),($last|0),($db|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 101;
      break L7;
     }
     $60 = ($57|0)==($56|0);
     if ($60) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $61 = HEAP32[$db>>2]|0;
     $62 = (($db) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $65 = (($63) + -24|0);
     __THREW__ = 0;
     (invoke_iiiii(33,($65|0),0,(4416|0),18)|0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 101;
      break L7;
     } else {
      $$25$ph = $57;
      label = 220;
      break L7;
     }
     break;
    }
    case 99:  {
     $68 = (($first) + 2|0);
     $69 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($68,$last)|0);
     $70 = ($69|0)==($68|0);
     if ($70) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $71 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($69,$last)|0);
     $72 = ($71|0)==($69|0);
     if ($72) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     __THREW__ = 0;
     $73 = (invoke_iiii(35,($71|0),($last|0),($db|0))|0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 101;
      break L7;
     }
     $76 = ($73|0)==($71|0);
     if ($76) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $77 = HEAP32[$db>>2]|0;
     $78 = (($db) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($77|0)==($79|0);
     if ($80) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $81 = (($79) + -24|0);
     __THREW__ = 0;
     (invoke_iiiii(33,($81|0),0,(4440|0),26)|0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 101;
      break L7;
     } else {
      $$25$ph = $73;
      label = 220;
      break L7;
     }
     break;
    }
    default: {
     $235 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($17,$last)|0);
     $236 = ($235|0)==($17|0);
     if ($236) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     __THREW__ = 0;
     $237 = (invoke_iiii(35,($235|0),($last|0),($db|0))|0);
     $238 = __THREW__; __THREW__ = 0;
     $239 = $238&1;
     if ($239) {
      label = 101;
      break L7;
     }
     $240 = ($237|0)==($235|0);
     if ($240) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $241 = HEAP32[$db>>2]|0;
     $242 = (($db) + 4|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($241|0)==($243|0);
     if ($244) {
      $$25$ph = $first;
      label = 220;
      break L7;
     }
     $245 = (($first) + 2|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = ($246<<24>>24)==(118);
     $248 = (($243) + -24|0);
     if ($247) {
      __THREW__ = 0;
      (invoke_iiiii(33,($248|0),0,(4512|0),17)|0);
      $249 = __THREW__; __THREW__ = 0;
      $250 = $249&1;
      if ($250) {
       label = 101;
       break L7;
      } else {
       $$25$ph = $237;
       label = 220;
       break L7;
      }
     } else {
      __THREW__ = 0;
      (invoke_iiiii(33,($248|0),0,(4536|0),21)|0);
      $251 = __THREW__; __THREW__ = 0;
      $252 = $251&1;
      if ($252) {
       label = 101;
       break L7;
      } else {
       $$25$ph = $237;
       label = 220;
       break L7;
      }
     }
    }
    }
   } else {
    $$25$ph = $first;
    label = 220;
   }
  } else {
   __THREW__ = 0;
   $282 = (invoke_iiii(37,($first|0),($last|0),($db|0))|0);
   $283 = __THREW__; __THREW__ = 0;
   $284 = $283&1;
   if ($284) {
    label = 101;
   } else {
    $285 = (($db) + 48|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($db) + 52|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = ($282|0)==($first|0);
    if ($289) {
     $$25$ph = $first;
     label = 220;
    } else {
     $290 = ($282|0)==($last|0);
     if ($290) {
      $$25$ph = $last;
      label = 220;
     } else {
      $291 = HEAP8[$282>>0]|0;
      if ((($291<<24>>24) == 46) | (($291<<24>>24) == 69)) {
       $$25$ph = $282;
       label = 220;
      } else {
       $292 = HEAP8[$8>>0]|0;
       HEAP8[$8>>0] = 0;
       ;HEAP32[$ret2+0>>2]=0|0;HEAP32[$ret2+4>>2]=0|0;HEAP32[$ret2+8>>2]=0|0;
       $293 = HEAP32[$db>>2]|0;
       $294 = (($db) + 4|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($293|0)==($295|0);
       L129: do {
        if (!($296)) {
         $297 = (($295) + -24|0);
         $298 = HEAP8[$297>>0]|0;
         $299 = $298 & 1;
         $300 = ($299<<24>>24)==(0);
         if ($300) {
          $303 = $298&255;
          $304 = $303 >>> 1;
          $306 = $304;
         } else {
          $301 = (($295) + -20|0);
          $302 = HEAP32[$301>>2]|0;
          $306 = $302;
         }
         $305 = ($306|0)==(0);
         if (!($305)) {
          $311 = (($db) + 60|0);
          $312 = HEAP8[$311>>0]|0;
          $313 = ($312<<24>>24)==(0);
          L136: do {
           if ($313) {
            if ($300) {
             $318 = (($297) + 1|0);
             $319 = $298&255;
             $320 = $319 >>> 1;
             $321 = $320;$323 = $318;
            } else {
             $314 = (($295) + -16|0);
             $315 = HEAP32[$314>>2]|0;
             $316 = (($295) + -20|0);
             $317 = HEAP32[$316>>2]|0;
             $321 = $317;$323 = $315;
            }
            $$sum$i = (($321) + -1)|0;
            $322 = (($323) + ($$sum$i)|0);
            $324 = HEAP8[$322>>0]|0;
            $325 = ($324<<24>>24)==(62);
            if ($325) {
             if ($300) {
              $330 = $298&255;
              $331 = $330 >>> 1;
              $332 = (($297) + 1|0);
              $$in = $331;$335 = $332;
             } else {
              $326 = (($295) + -20|0);
              $327 = HEAP32[$326>>2]|0;
              $328 = (($295) + -16|0);
              $329 = HEAP32[$328>>2]|0;
              $$in = $327;$335 = $329;
             }
             $333 = (($$in) + -2)|0;
             $334 = (($335) + ($333)|0);
             $336 = HEAP8[$334>>0]|0;
             $337 = ($336<<24>>24)==(45);
             if ($337) {
              $409 = $295;$t$0 = $282;
              label = 147;
             } else {
              if ($300) {
               $342 = $298&255;
               $343 = $342 >>> 1;
               $344 = (($297) + 1|0);
               $$in101 = $343;$347 = $344;
              } else {
               $338 = (($295) + -20|0);
               $339 = HEAP32[$338>>2]|0;
               $340 = (($295) + -16|0);
               $341 = HEAP32[$340>>2]|0;
               $$in101 = $339;$347 = $341;
              }
              $345 = (($$in101) + -2)|0;
              $346 = (($347) + ($345)|0);
              $348 = HEAP8[$346>>0]|0;
              $349 = ($348<<24>>24)==(62);
              if ($349) {
               $409 = $295;$t$0 = $282;
               label = 147;
              } else {
               __THREW__ = 0;
               $350 = (invoke_iiii(34,($282|0),($last|0),($db|0))|0);
               $351 = __THREW__; __THREW__ = 0;
               $352 = $351&1;
               if ($352) {
                label = 113;
                break;
               }
               $353 = ($350|0)==($282|0);
               if ($353) {
                break L129;
               }
               $354 = HEAP32[$294>>2]|0;
               $355 = HEAP32[$db>>2]|0;
               $356 = $354;
               $357 = $355;
               $358 = (($356) - ($357))|0;
               $359 = (($358|0) / 24)&-1;
               $360 = ($359>>>0)<(2);
               if ($360) {
                break L129;
               }
               $361 = (($354) + -24|0);
               ;HEAP32[$ret1+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$ret1+4>>2]=HEAP32[$361+4>>2]|0;HEAP32[$ret1+8>>2]=HEAP32[$361+8>>2]|0;
               ;HEAP32[$361+0>>2]=0|0;HEAP32[$361+4>>2]=0|0;HEAP32[$361+8>>2]=0|0;
               $362 = HEAP32[$294>>2]|0;
               $363 = (($362) + -12|0);
               ;HEAP32[$ret2+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$ret2+4>>2]=HEAP32[$363+4>>2]|0;HEAP32[$ret2+8>>2]=HEAP32[$363+8>>2]|0;
               ;HEAP32[$363+0>>2]=0|0;HEAP32[$363+4>>2]=0|0;HEAP32[$363+8>>2]=0|0;
               $364 = HEAP8[$ret2>>0]|0;
               $365 = $364 & 1;
               $366 = ($365<<24>>24)==(0);
               if ($366) {
                $369 = $364&255;
                $370 = $369 >>> 1;
                $372 = $370;
               } else {
                $367 = (($ret2) + 4|0);
                $368 = HEAP32[$367>>2]|0;
                $372 = $368;
               }
               $371 = ($372|0)==(0);
               if ($371) {
                __THREW__ = 0;
                invoke_vii(38,($ret1|0),32);
                $373 = __THREW__; __THREW__ = 0;
                $374 = $373&1;
                if (!($374)) {
                 label = 138;
                }
               } else {
                label = 138;
               }
               do {
                if ((label|0) == 138) {
                 $382 = HEAP32[$294>>2]|0;
                 $383 = (($382) + -24|0);
                 $385 = $382;
                 while(1) {
                  $384 = (($385) + -24|0);
                  HEAP32[$294>>2] = $384;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($384);
                  $386 = HEAP32[$294>>2]|0;
                  $387 = ($386|0)==($383|0);
                  if ($387) {
                   break;
                  } else {
                   $385 = $386;
                  }
                 }
                 $388 = (($382) + -48|0);
                 $389 = HEAP8[$ret1>>0]|0;
                 $390 = $389 & 1;
                 $391 = ($390<<24>>24)==(0);
                 if ($391) {
                  $396 = (($ret1) + 1|0);
                  $397 = $389&255;
                  $398 = $397 >>> 1;
                  $399 = $396;$400 = $398;
                 } else {
                  $392 = (($ret1) + 8|0);
                  $393 = HEAP32[$392>>2]|0;
                  $394 = (($ret1) + 4|0);
                  $395 = HEAP32[$394>>2]|0;
                  $399 = $393;$400 = $395;
                 }
                 __THREW__ = 0;
                 (invoke_iiiii(33,($388|0),0,($399|0),($400|0))|0);
                 $401 = __THREW__; __THREW__ = 0;
                 $402 = $401&1;
                 if ($402) {
                  break;
                 }
                 $403 = HEAP8[$ret1>>0]|0;
                 $404 = $403 & 1;
                 $405 = ($404<<24>>24)==(0);
                 if (!($405)) {
                  $406 = (($ret1) + 8|0);
                  $407 = HEAP32[$406>>2]|0;
                  _free($407);
                 }
                 $$pre = HEAP32[$294>>2]|0;
                 $409 = $$pre;$t$0 = $350;
                 label = 147;
                 break L136;
                }
               } while(0);
               $375 = ___cxa_find_matching_catch()|0;
               $376 = tempRet0;
               $377 = HEAP8[$ret1>>0]|0;
               $378 = $377 & 1;
               $379 = ($378<<24>>24)==(0);
               if ($379) {
                $$114 = $376;$$18 = $375;
                break;
               }
               $380 = (($ret1) + 8|0);
               $381 = HEAP32[$380>>2]|0;
               _free($381);
               $$114 = $376;$$18 = $375;
              }
             }
            } else {
             $409 = $295;$t$0 = $282;
             label = 147;
            }
           } else {
            $409 = $295;$t$0 = $282;
            label = 147;
           }
          } while(0);
          L177: do {
           if ((label|0) == 147) {
            $408 = (($409) + -24|0);
            __THREW__ = 0;
            invoke_vii(38,($408|0),40);
            $410 = __THREW__; __THREW__ = 0;
            $411 = $410&1;
            if ($411) {
             label = 113;
            } else {
             $412 = ($t$0|0)==($last|0);
             if ($412) {
              label = 150;
             } else {
              $413 = HEAP8[$t$0>>0]|0;
              $414 = ($413<<24>>24)==(118);
              if ($414) {
               $421 = (($t$0) + 1|0);
               $$pre92 = HEAP32[$db>>2]|0;
               $$pre93 = HEAP32[$294>>2]|0;
               $517 = $$pre92;$518 = $$pre93;$t$2 = $421;
              } else {
               label = 150;
              }
             }
             L183: do {
              if ((label|0) == 150) {
               $415 = (($tmp) + 1|0);
               $416 = (($tmp) + 8|0);
               $417 = (($tmp) + 4|0);
               $418 = (($3) + 1|0);
               $419 = (($3) + 8|0);
               $420 = (($3) + 4|0);
               $first_arg$0$off0$ph = 1;$t$1$ph = $t$0;
               L185: while(1) {
                $$pre94 = HEAP32[$294>>2]|0;
                $$pre95 = HEAP32[$db>>2]|0;
                $423 = $$pre94;$425 = $$pre95;$t$1 = $t$1$ph;
                while(1) {
                 $422 = $423;
                 $424 = $425;
                 $426 = (($422) - ($424))|0;
                 $427 = (($426|0) / 24)&-1;
                 __THREW__ = 0;
                 $428 = (invoke_iiii(34,($t$1|0),($last|0),($db|0))|0);
                 $429 = __THREW__; __THREW__ = 0;
                 $430 = $429&1;
                 if ($430) {
                  label = 112;
                  break L185;
                 }
                 $431 = HEAP32[$294>>2]|0;
                 $432 = HEAP32[$db>>2]|0;
                 $433 = $431;
                 $434 = $432;
                 $435 = (($433) - ($434))|0;
                 $436 = (($435|0) / 24)&-1;
                 $437 = ($428|0)==($t$1|0);
                 if ($437) {
                  $517 = $432;$518 = $431;$t$2 = $t$1;
                  break L183;
                 }
                 $438 = ($436>>>0)>($427>>>0);
                 if ($438) {
                  break;
                 } else {
                  $423 = $431;$425 = $432;$t$1 = $428;
                 }
                }
                ;HEAP32[$tmp+0>>2]=0|0;HEAP32[$tmp+4>>2]=0|0;HEAP32[$tmp+8>>2]=0|0;
                $440 = 0;$k$068 = $427;
                while(1) {
                 $439 = $440 & 1;
                 $441 = ($439<<24>>24)==(0);
                 if ($441) {
                  $443 = $440&255;
                  $444 = $443 >>> 1;
                  $446 = $444;
                 } else {
                  $442 = HEAP32[$417>>2]|0;
                  $446 = $442;
                 }
                 $445 = ($446|0)==(0);
                 if (!($445)) {
                  __THREW__ = 0;
                  (invoke_iiii(32,($tmp|0),(2288|0),2)|0);
                  $447 = __THREW__; __THREW__ = 0;
                  $448 = $447&1;
                  if ($448) {
                   label = 161;
                   break L185;
                  }
                 }
                 $453 = HEAP32[$db>>2]|0;
                 $454 = (($453) + (($k$068*24)|0)|0);
                 __THREW__ = 0;
                 invoke_vii(36,($3|0),($454|0));
                 $455 = __THREW__; __THREW__ = 0;
                 $456 = $455&1;
                 if ($456) {
                  label = 161;
                  break L185;
                 }
                 $457 = HEAP8[$3>>0]|0;
                 $458 = $457 & 1;
                 $459 = ($458<<24>>24)==(0);
                 if ($459) {
                  $462 = $457&255;
                  $463 = $462 >>> 1;
                  $464 = $418;$465 = $463;
                 } else {
                  $460 = HEAP32[$419>>2]|0;
                  $461 = HEAP32[$420>>2]|0;
                  $464 = $460;$465 = $461;
                 }
                 __THREW__ = 0;
                 (invoke_iiii(32,($tmp|0),($464|0),($465|0))|0);
                 $466 = __THREW__; __THREW__ = 0;
                 $467 = $466&1;
                 if ($467) {
                  label = 173;
                  break L185;
                 }
                 if (!($459)) {
                  $468 = HEAP32[$419>>2]|0;
                  _free($468);
                 }
                 $469 = (($k$068) + 1)|0;
                 $470 = ($469>>>0)<($436>>>0);
                 if (!($470)) {
                  break;
                 }
                 $$pre100 = HEAP8[$tmp>>0]|0;
                 $440 = $$pre100;$k$068 = $469;
                }
                $$pre99 = HEAP32[$294>>2]|0;
                $475 = $$pre99;$k2$069 = $427;
                while(1) {
                 $474 = (($475) + -24|0);
                 $477 = $475;
                 while(1) {
                  $476 = (($477) + -24|0);
                  HEAP32[$294>>2] = $476;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($476);
                  $478 = HEAP32[$294>>2]|0;
                  $479 = ($478|0)==($474|0);
                  if ($479) {
                   break;
                  } else {
                   $477 = $478;
                  }
                 }
                 $480 = (($k2$069) + 1)|0;
                 $exitcond = ($480|0)==($436|0);
                 if ($exitcond) {
                  break;
                 } else {
                  $475 = $474;$k2$069 = $480;
                 }
                }
                $481 = HEAP8[$tmp>>0]|0;
                $482 = $481 & 1;
                $483 = ($482<<24>>24)==(0);
                if ($483) {
                 $485 = $481&255;
                 $486 = $485 >>> 1;
                 $488 = $486;
                } else {
                 $484 = HEAP32[$417>>2]|0;
                 $488 = $484;
                }
                $487 = ($488|0)==(0);
                if ($487) {
                 $509 = $481;$first_arg$3$off0$ph = $first_arg$0$off0$ph;
                } else {
                 $489 = HEAP32[$db>>2]|0;
                 $490 = ($489|0)==($474|0);
                 if ($490) {
                  label = 184;
                  break;
                 }
                 if ($first_arg$0$off0$ph) {
                  $496 = $474;$498 = $481;
                 } else {
                  $492 = (($475) + -48|0);
                  __THREW__ = 0;
                  (invoke_iiii(32,($492|0),(2288|0),2)|0);
                  $493 = __THREW__; __THREW__ = 0;
                  $494 = $493&1;
                  if ($494) {
                   label = 162;
                   break;
                  }
                  $$pre97 = HEAP32[$294>>2]|0;
                  $$pre98 = HEAP8[$tmp>>0]|0;
                  $496 = $$pre97;$498 = $$pre98;
                 }
                 $495 = (($496) + -24|0);
                 $497 = $498 & 1;
                 $499 = ($497<<24>>24)==(0);
                 if ($499) {
                  $502 = $498&255;
                  $503 = $502 >>> 1;
                  $504 = $415;$505 = $503;
                 } else {
                  $500 = HEAP32[$416>>2]|0;
                  $501 = HEAP32[$417>>2]|0;
                  $504 = $500;$505 = $501;
                 }
                 __THREW__ = 0;
                 (invoke_iiii(32,($495|0),($504|0),($505|0))|0);
                 $506 = __THREW__; __THREW__ = 0;
                 $507 = $506&1;
                 if ($507) {
                  label = 162;
                  break;
                 }
                 $$pre57 = HEAP8[$tmp>>0]|0;
                 $509 = $$pre57;$first_arg$3$off0$ph = 0;
                }
                $508 = $509 & 1;
                $510 = ($508<<24>>24)==(0);
                if ($510) {
                 $first_arg$0$off0$ph = $first_arg$3$off0$ph;$t$1$ph = $428;
                 continue;
                }
                $511 = HEAP32[$416>>2]|0;
                _free($511);
                $first_arg$0$off0$ph = $first_arg$3$off0$ph;$t$1$ph = $428;
               }
               if ((label|0) == 112) {
                $307 = ___cxa_find_matching_catch()|0;
                $308 = tempRet0;
                $lpad$phi75$index = $307;$lpad$phi75$index7 = $308;
                label = 114;
                break L177;
               }
               else if ((label|0) == 161) {
                $449 = ___cxa_find_matching_catch()|0;
                $450 = tempRet0;
                $lpad$phi$index = $449;$lpad$phi$index12 = $450;
                label = 163;
               }
               else if ((label|0) == 162) {
                $451 = ___cxa_find_matching_catch()|0;
                $452 = tempRet0;
                $lpad$phi$index = $451;$lpad$phi$index12 = $452;
                label = 163;
               }
               else if ((label|0) == 173) {
                $471 = ___cxa_find_matching_catch()|0;
                $472 = tempRet0;
                if ($459) {
                 $$013 = $472;$$07 = $471;
                } else {
                 $473 = HEAP32[$419>>2]|0;
                 _free($473);
                 $$013 = $472;$$07 = $471;
                }
               }
               else if ((label|0) == 184) {
                if ($483) {
                 break L129;
                }
                $491 = HEAP32[$416>>2]|0;
                _free($491);
                break L129;
               }
               if ((label|0) == 163) {
                $$013 = $lpad$phi$index12;$$07 = $lpad$phi$index;
               }
               $512 = HEAP8[$tmp>>0]|0;
               $513 = $512 & 1;
               $514 = ($513<<24>>24)==(0);
               if ($514) {
                $$114 = $$013;$$18 = $$07;
                break L177;
               }
               $515 = HEAP32[$416>>2]|0;
               _free($515);
               $$114 = $$013;$$18 = $$07;
               break L177;
              }
             } while(0);
             $516 = ($517|0)==($518|0);
             if ($516) {
              break L129;
             }
             $519 = (($518) + -24|0);
             __THREW__ = 0;
             invoke_vii(38,($519|0),41);
             $520 = __THREW__; __THREW__ = 0;
             $521 = $520&1;
             if ($521) {
              label = 113;
             } else {
              $522 = $286 & 1;
              $523 = ($522|0)==(0);
              if (!($523)) {
               $524 = HEAP32[$294>>2]|0;
               $525 = (($524) + -24|0);
               __THREW__ = 0;
               (invoke_iiii(32,($525|0),(1912|0),6)|0);
               $526 = __THREW__; __THREW__ = 0;
               $527 = $526&1;
               if ($527) {
                label = 113;
                break;
               }
              }
              $528 = $286 & 2;
              $529 = ($528|0)==(0);
              if (!($529)) {
               $530 = HEAP32[$294>>2]|0;
               $531 = (($530) + -24|0);
               __THREW__ = 0;
               (invoke_iiii(32,($531|0),(1920|0),9)|0);
               $532 = __THREW__; __THREW__ = 0;
               $533 = $532&1;
               if ($533) {
                label = 113;
                break;
               }
              }
              $534 = $286 & 4;
              $535 = ($534|0)==(0);
              if (!($535)) {
               $536 = HEAP32[$294>>2]|0;
               $537 = (($536) + -24|0);
               __THREW__ = 0;
               (invoke_iiii(32,($537|0),(1936|0),9)|0);
               $538 = __THREW__; __THREW__ = 0;
               $539 = $538&1;
               if ($539) {
                label = 113;
                break;
               }
              }
              if ((($288|0) == 1)) {
               $540 = HEAP32[$294>>2]|0;
               $541 = (($540) + -24|0);
               __THREW__ = 0;
               (invoke_iiii(32,($541|0),(4072|0),2)|0);
               $542 = __THREW__; __THREW__ = 0;
               $543 = $542&1;
               if ($543) {
                label = 113;
                break;
               }
              } else if ((($288|0) == 2)) {
               $544 = HEAP32[$294>>2]|0;
               $545 = (($544) + -24|0);
               __THREW__ = 0;
               (invoke_iiii(32,($545|0),(4080|0),3)|0);
               $546 = __THREW__; __THREW__ = 0;
               $547 = $546&1;
               if ($547) {
                label = 113;
                break;
               }
              }
              $548 = HEAP32[$294>>2]|0;
              $549 = (($548) + -24|0);
              $550 = HEAP8[$ret2>>0]|0;
              $551 = $550 & 1;
              $552 = ($551<<24>>24)==(0);
              if ($552) {
               $557 = (($ret2) + 1|0);
               $558 = $550&255;
               $559 = $558 >>> 1;
               $560 = $557;$561 = $559;
              } else {
               $553 = (($ret2) + 8|0);
               $554 = HEAP32[$553>>2]|0;
               $555 = (($ret2) + 4|0);
               $556 = HEAP32[$555>>2]|0;
               $560 = $554;$561 = $556;
              }
              __THREW__ = 0;
              (invoke_iiii(32,($549|0),($560|0),($561|0))|0);
              $562 = __THREW__; __THREW__ = 0;
              $563 = $562&1;
              if ($563) {
               label = 113;
               break;
              }
              if (!($552)) {
               $564 = (($ret2) + 8|0);
               $565 = HEAP32[$564>>2]|0;
               _free($565);
              }
              HEAP8[$8>>0] = $292;
              $$25$ph = $t$2;
              label = 220;
              break L7;
             }
            }
           }
          } while(0);
          if ((label|0) == 113) {
           $309 = ___cxa_find_matching_catch()|0;
           $310 = tempRet0;
           $lpad$phi75$index = $309;$lpad$phi75$index7 = $310;
           label = 114;
          }
          if ((label|0) == 114) {
           $$114 = $lpad$phi75$index7;$$18 = $lpad$phi75$index;
          }
          $566 = HEAP8[$ret2>>0]|0;
          $567 = $566 & 1;
          $568 = ($567<<24>>24)==(0);
          if (!($568)) {
           $569 = (($ret2) + 8|0);
           $570 = HEAP32[$569>>2]|0;
           _free($570);
          }
          HEAP8[$8>>0] = $292;
          $$215 = $$114;$$29 = $$18;
          HEAP8[$8>>0] = $9;
          HEAP32[$5>>2] = $6;
          ___resumeException($$29|0);
          // unreachable;
         }
        }
       } while(0);
       $571 = HEAP8[$ret2>>0]|0;
       $572 = $571 & 1;
       $573 = ($572<<24>>24)==(0);
       if (!($573)) {
        $574 = (($ret2) + 8|0);
        $575 = HEAP32[$574>>2]|0;
        _free($575);
       }
       HEAP8[$8>>0] = $9;
       HEAP32[$5>>2] = $6;
       $$7 = $first;
       STACKTOP = sp;return ($$7|0);
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 101) {
  $280 = ___cxa_find_matching_catch()|0;
  $281 = tempRet0;
  $eh$lpad$body$index2Z2D = $281;$eh$lpad$body$indexZ2D = $280;
 }
 else if ((label|0) == 220) {
  HEAP8[$8>>0] = $9;
  HEAP32[$5>>2] = $6;
  $$7 = $$25$ph;
  STACKTOP = sp;return ($$7|0);
 }
 $$215 = $eh$lpad$body$index2Z2D;$$29 = $eh$lpad$body$indexZ2D;
 HEAP8[$8>>0] = $9;
 HEAP32[$5>>2] = $6;
 ___resumeException($$29|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((1744|0),(1776|0),1164,(1888|0));
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$ = 0, $$$$i$i$i$i = 0, $$$$i$i$i$i233 = 0, $$$i$i$i$i = 0, $$$i$i$i$i233 = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i102 = 0, $$0$i$i$i110 = 0, $$0$i$i$i118 = 0, $$0$i$i$i127 = 0, $$0$i$i$i137 = 0, $$0$i$i$i154 = 0, $$0$i$i$i164 = 0, $$0$i$i$i180 = 0, $$0$i$i$i19 = 0, $$0$i$i$i190 = 0;
 var $$0$i$i$i198 = 0, $$0$i$i$i213 = 0, $$0$i$i$i221 = 0, $$0$i$i$i253 = 0, $$0$i$i$i27 = 0, $$0$i$i$i34 = 0, $$0$i$i$i37 = 0, $$0$i$i$i42 = 0, $$0$i$i$i52 = 0, $$0$i$i$i60 = 0, $$0$i$i$i70 = 0, $$0$i$i$i78 = 0, $$0$i$i$i86 = 0, $$0$i$i$i94 = 0, $$01$i$i = 0, $$01$i272 = 0, $$02 = 0, $$02$i = 0, $$02$i$i$i = 0, $$02$i111 = 0;
 var $$02$i120 = 0, $$02$i127 = 0, $$02$i135 = 0, $$02$i148 = 0, $$02$i32 = 0, $$02$i36 = 0, $$02$i52 = 0, $$03 = 0, $$03$i$i = 0, $$04$i = 0, $$04$i302 = 0, $$05$i = 0, $$07$i = 0, $$08$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$i273 = 0, $$1$i328 = 0, $$10 = 0, $$1013 = 0;
 var $$12$i = 0, $$12$i$i = 0, $$13$i = 0, $$13$i324$ph = 0, $$14$i$i = 0, $$15$i = 0, $$18$i = 0, $$2 = 0, $$2$i = 0, $$2$i$i = 0, $$23$i = 0, $$25 = 0, $$26$i = 0, $$29$i = 0, $$3$i = 0, $$3$i303 = 0, $$310$i = 0, $$35$i = 0, $$4 = 0, $$4$i = 0;
 var $$4$i294 = 0, $$4$i323 = 0, $$411$i = 0, $$45$i = 0, $$46$i = 0, $$47 = 0, $$5 = 0, $$5$i = 0, $$5$i295 = 0, $$5$i326 = 0, $$512$i = 0, $$56$i = 0, $$57$i = 0, $$58 = 0, $$6 = 0, $$6$i = 0, $$6$i296 = 0, $$6$i329 = 0, $$613$i = 0, $$67$i = 0;
 var $$68$i = 0, $$69 = 0, $$7 = 0, $$710 = 0, $$8 = 0, $$811 = 0, $$9 = 0, $$912 = 0, $$in = 0, $$off = 0, $$off343 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i277 = 0, $$pre$i$i$i12$i = 0, $$pre$i$i$i28$i = 0, $$pre$i$i$i32$i = 0, $$pre$i$i$i48$i = 0;
 var $$pre$i100 = 0, $$pre$i108 = 0, $$pre$i116 = 0, $$pre$i124 = 0, $$pre$i135 = 0, $$pre$i151 = 0, $$pre$i162 = 0, $$pre$i17 = 0, $$pre$i177 = 0, $$pre$i188 = 0, $$pre$i195 = 0, $$pre$i211 = 0, $$pre$i219 = 0, $$pre$i25 = 0, $$pre$i252 = 0, $$pre$i33 = 0, $$pre$i36 = 0, $$pre$i40 = 0, $$pre$i50 = 0, $$pre$i57 = 0;
 var $$pre$i68 = 0, $$pre$i76 = 0, $$pre$i84 = 0, $$pre$i92 = 0, $$pre204 = 0, $$pre205 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre211 = 0, $$pre212 = 0, $$pre517$pre = 0, $$sroa$4 = 0, $$sroa$4183 = 0, $$sroa$5 = 0, $$sroa$6 = 0, $$sroa$6188 = 0, $$sroa$6191 = 0, $$sroa$6194 = 0;
 var $$sroa$7 = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0;
 var $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0;
 var $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0;
 var $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0;
 var $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0;
 var $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0;
 var $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0;
 var $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0;
 var $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0;
 var $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0;
 var $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0;
 var $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0;
 var $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0;
 var $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0;
 var $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0;
 var $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0;
 var $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0;
 var $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0;
 var $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0;
 var $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0;
 var $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0;
 var $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0;
 var $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0;
 var $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0;
 var $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0;
 var $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0;
 var $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0;
 var $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0;
 var $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0;
 var $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0;
 var $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0;
 var $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0;
 var $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0;
 var $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0;
 var $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0;
 var $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0;
 var $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0;
 var $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0;
 var $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0;
 var $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0;
 var $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0;
 var $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0;
 var $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0;
 var $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0;
 var $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0;
 var $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0;
 var $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0;
 var $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0;
 var $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0;
 var $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0;
 var $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0;
 var $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0;
 var $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0;
 var $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0;
 var $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0;
 var $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0;
 var $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0;
 var $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0;
 var $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0;
 var $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0;
 var $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0;
 var $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0;
 var $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0;
 var $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0;
 var $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0;
 var $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0;
 var $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0;
 var $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0;
 var $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0;
 var $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0;
 var $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0;
 var $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0;
 var $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0;
 var $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0;
 var $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0;
 var $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0;
 var $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0;
 var $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0;
 var $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0;
 var $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0;
 var $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0;
 var $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0;
 var $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0;
 var $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0;
 var $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0;
 var $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0;
 var $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0;
 var $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0;
 var $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0;
 var $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0;
 var $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0;
 var $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0;
 var $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0;
 var $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0;
 var $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0;
 var $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0;
 var $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0;
 var $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0;
 var $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0;
 var $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0;
 var $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0;
 var $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0;
 var $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0;
 var $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0;
 var $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0;
 var $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0;
 var $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0;
 var $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0;
 var $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0;
 var $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0;
 var $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0;
 var $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0;
 var $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0;
 var $__v$i$i107 = 0, $__v$i$i115 = 0, $__v$i$i123 = 0, $__v$i$i134 = 0, $__v$i$i150 = 0, $__v$i$i16 = 0, $__v$i$i161 = 0, $__v$i$i176 = 0, $__v$i$i187 = 0, $__v$i$i194 = 0, $__v$i$i210 = 0, $__v$i$i218 = 0, $__v$i$i24 = 0, $__v$i$i251 = 0, $__v$i$i32 = 0, $__v$i$i35 = 0, $__v$i$i39 = 0, $__v$i$i49 = 0, $__v$i$i56 = 0, $__v$i$i67 = 0;
 var $__v$i$i75 = 0, $__v$i$i83 = 0, $__v$i$i91 = 0, $__v$i$i99 = 0, $args = 0, $brmerge = 0, $brmerge347 = 0, $brmerge348 = 0, $class_type$i = 0, $cv = 0, $eh$lpad$body$i$i$index45Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i130$index17Z2D = 0, $eh$lpad$body$i$i130$indexZ2D = 0, $eh$lpad$body$i$i157$index24Z2D = 0, $eh$lpad$body$i$i157$indexZ2D = 0, $eh$lpad$body$i$i183$index31Z2D = 0, $eh$lpad$body$i$i183$indexZ2D = 0, $eh$lpad$body$i$i201$index38Z2D = 0, $eh$lpad$body$i$i201$indexZ2D = 0;
 var $eh$lpad$body$i$i63$index3Z2D = 0, $eh$lpad$body$i$i63$indexZ2D = 0, $exitcond = 0, $expr$i = 0, $func$i = 0, $k$0$i352 = 0, $k$0439 = 0, $k11$0403 = 0, $k15$0415 = 0, $k2$0$i354 = 0, $k20$0428 = 0, $k5$0377 = 0, $k8$0389 = 0, $l$03$i = 0, $l$03$i110 = 0, $l$03$i119 = 0, $l$03$i126 = 0, $l$03$i134 = 0, $l$03$i147 = 0, $l$03$i35 = 0;
 var $l$03$i51 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $num1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i284 = 0, $or$cond$i$i$i$i$i19$i = 0, $or$cond$i$i$i$i$i35$i = 0, $or$cond$i$i$i$i$i39$i = 0, $or$cond$i$i$i$i$i55$i = 0, $or$cond10$i = 0, $or$cond344 = 0, $or$cond345 = 0, $or$cond346 = 0, $or$cond522 = 0, $or$cond523 = 0, $p$0 = 0;
 var $p$1 = 0, $p$2 = 0, $phitmp = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i279 = 0, $phitmp$i$i$i$i$i$i14$i = 0, $phitmp$i$i$i$i$i$i30$i = 0, $phitmp$i$i$i$i$i$i34$i = 0, $phitmp$i$i$i$i$i$i50$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i282 = 0, $phitmp$i2$i$i$i$i$i17$i = 0, $phitmp$i2$i$i$i$i$i33$i = 0, $phitmp$i2$i$i$i$i$i37$i = 0, $phitmp$i2$i$i$i$i$i53$i = 0, $phitmp214 = 0, $phitmp215 = 0, $phitmp216 = 0, $phitmp217 = 0;
 var $phitmp218 = 0, $phitmp219 = 0, $phitmp220 = 0, $phitmp221 = 0, $phitmp222 = 0, $phitmp223 = 0, $phitmp224 = 0, $phitmp225 = 0, $phitmp226 = 0, $proto = 0, $r$04$i = 0, $r$04$i109 = 0, $r$04$i118 = 0, $r$04$i125 = 0, $r$04$i133 = 0, $r$04$i146 = 0, $r$04$i34 = 0, $r$04$i50 = 0, $ref_qual$0$i$ph$ph = 0, $ref_qual$0$i$ph451 = 0;
 var $scevgep4$i$i$i = 0, $sig$i = 0, $t$0$i = 0, $t$1$i$be = 0, $t$1$i$ph$ph = 0, $t$1$i$ph450 = 0, $t$1$i366 = 0, $t12$0$i = 0, $template_args = 0, $type = 0, $type$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i$i = sp + 724|0;
 $0 = sp + 1404|0;
 $1 = sp + 1372|0;
 $2 = sp + 564|0;
 $3 = sp + 576|0;
 $$sroa$7 = sp + 1530|0;
 $4 = sp + 632|0;
 $5 = sp + 616|0;
 $num1$i = sp + 48|0;
 $6 = sp + 60|0;
 $7 = sp + 72|0;
 $8 = sp + 84|0;
 $9 = sp + 96|0;
 $10 = sp + 108|0;
 $11 = sp + 120|0;
 $12 = sp + 1228|0;
 $13 = sp + 132|0;
 $type$i = sp + 144|0;
 $expr$i = sp + 168|0;
 $14 = sp + 192|0;
 $$sroa$6194 = sp + 1509|0;
 $15 = sp + 224|0;
 $16 = sp + 236|0;
 $17 = sp + 248|0;
 $sig$i = sp + 260|0;
 $18 = sp + 272|0;
 $func$i = sp + 288|0;
 $class_type$i = sp + 312|0;
 $$sroa$6191 = sp + 1488|0;
 $19 = sp + 340|0;
 $20 = sp + 352|0;
 $21 = sp + 1216|0;
 $$sroa$6188 = sp + 1537|0;
 $$sroa$6 = sp + 1523|0;
 $22 = sp + 388|0;
 $23 = sp + 400|0;
 $24 = sp + 412|0;
 $__v$i$i251 = sp + 424|0;
 $__v$i$i218 = sp + 444|0;
 $__v$i$i210 = sp + 464|0;
 $__v$i$i194 = sp + 484|0;
 $__v$i$i187 = sp + 504|0;
 $__v$i$i176 = sp + 524|0;
 $__v$i$i161 = sp + 544|0;
 $__v$i$i150 = sp + 1304|0;
 $__v$i$i134 = sp + 1328|0;
 $__v$i$i123 = sp + 1352|0;
 $__v$i$i115 = sp + 1384|0;
 $__v$i$i107 = sp + 1416|0;
 $__v$i$i99 = sp + 1448|0;
 $__v$i$i91 = sp + 644|0;
 $__v$i$i83 = sp + 664|0;
 $__v$i$i75 = sp + 684|0;
 $__v$i$i67 = sp + 704|0;
 $__v$i$i56 = sp + 1468|0;
 $__v$i$i49 = sp + 744|0;
 $__v$i$i39 = sp + 764|0;
 $__v$i$i35 = sp + 784|0;
 $__v$i$i32 = sp + 804|0;
 $__v$i$i24 = sp + 824|0;
 $__v$i$i16 = sp + 844|0;
 $__v$i$i = sp + 864|0;
 $cv = sp + 884|0;
 $25 = sp + 1200|0;
 $26 = sp + 888|0;
 $27 = sp + 896|0;
 $28 = sp + 912|0;
 $29 = sp + 920|0;
 $30 = sp + 936|0;
 $31 = sp + 944|0;
 $32 = sp + 960|0;
 $33 = sp + 968|0;
 $34 = sp + 984|0;
 $35 = sp + 988|0;
 $36 = sp + 1000|0;
 $37 = sp + 1012|0;
 $38 = sp + 1024|0;
 $args = sp + 1036|0;
 $39 = sp + 1048|0;
 $40 = sp + 1064|0;
 $type = sp + 1068|0;
 $41 = sp + 1080|0;
 $42 = sp + 1096|0;
 $$sroa$4183 = sp + 1502|0;
 $43 = sp + 1136|0;
 $44 = sp + 1148|0;
 $proto = sp + 1160|0;
 $45 = sp + 1176|0;
 $$sroa$4 = sp + 1516|0;
 $46 = sp + 12|0;
 $47 = sp;
 $48 = sp + 24|0;
 $49 = sp + 1248|0;
 $$sroa$5 = sp + 1495|0;
 $50 = sp + 36|0;
 $51 = sp + 1288|0;
 $52 = sp + 1324|0;
 $53 = sp + 600|0;
 $54 = sp + 1348|0;
 $template_args = sp + 1436|0;
 $55 = sp + 1272|0;
 $56 = sp + 1240|0;
 $57 = sp + 1120|0;
 $58 = sp + 384|0;
 $59 = sp + 368|0;
 $60 = sp + 336|0;
 $61 = sp + 208|0;
 $62 = sp + 628|0;
 $63 = ($first|0)==($last|0);
 if ($63) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = HEAP8[$first>>0]|0;
 $65 = $64 << 24 >> 24;
 if ((($65|0) == 75) | (($65|0) == 86) | (($65|0) == 114)) {
  HEAP32[$cv>>2] = 0;
  $66 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv)|0);
  $67 = ($66|0)==($first|0);
  if ($67) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $68 = HEAP8[$66>>0]|0;
  $69 = (($db) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$db>>2]|0;
  $72 = $70;
  $73 = $71;
  $74 = (($72) - ($73))|0;
  $75 = (($74|0) / 24)&-1;
  $76 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($66,$last,$db)|0);
  $77 = HEAP32[$69>>2]|0;
  $78 = HEAP32[$db>>2]|0;
  $79 = $77;
  $80 = $78;
  $81 = (($79) - ($80))|0;
  $82 = (($81|0) / 24)&-1;
  $83 = ($76|0)==($66|0);
  if ($83) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $84 = ($68<<24>>24)==(70);
  $85 = (($db) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  if ($84) {
   $87 = (($86) + -16|0);
   $89 = $86;
   while(1) {
    $88 = (($89) + -16|0);
    HEAP32[$85>>2] = $88;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($88);
    $90 = HEAP32[$85>>2]|0;
    $91 = ($90|0)==($87|0);
    if ($91) {
     $98 = $87;
     break;
    } else {
     $89 = $90;
    }
   }
  } else {
   $98 = $86;
  }
  $92 = (($db) + 16|0);
  $93 = (($db) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($db) + 24|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($98>>>0)<($96>>>0);
  if ($97) {
   $99 = ($98|0)==(0|0);
   if ($99) {
    $104 = 0;
   } else {
    HEAP32[$98>>2] = 0;
    $100 = (($98) + 4|0);
    HEAP32[$100>>2] = 0;
    $101 = (($98) + 8|0);
    HEAP32[$101>>2] = 0;
    $102 = (($98) + 12|0);
    HEAP32[$102>>2] = $94;
    $$pre$i50 = HEAP32[$85>>2]|0;
    $104 = $$pre$i50;
   }
   $103 = (($104) + 16|0);
   HEAP32[$85>>2] = $103;
  } else {
   $105 = (($db) + 28|0);
   $106 = HEAP32[$92>>2]|0;
   $107 = $98;
   $108 = $106;
   $109 = (($107) - ($108))|0;
   $110 = $109 >> 4;
   $111 = (($110) + 1)|0;
   $112 = ($111|0)<(0);
   if ($112) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   $113 = $96;
   $114 = (($113) - ($108))|0;
   $115 = $114 >> 4;
   $116 = ($115>>>0)<(1073741823);
   if ($116) {
    $117 = $114 >> 3;
    $118 = ($117>>>0)<($111>>>0);
    $119 = $118 ? $111 : $117;
    $$0$i$i$i52 = $119;
   } else {
    $$0$i$i$i52 = 2147483647;
   }
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i49,$$0$i$i$i52,$110,$105);
   $120 = (($__v$i$i49) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(0|0);
   if (!($122)) {
    HEAP32[$121>>2] = 0;
    $123 = (($121) + 4|0);
    HEAP32[$123>>2] = 0;
    $124 = (($121) + 8|0);
    HEAP32[$124>>2] = 0;
    $125 = (($121) + 12|0);
    HEAP32[$125>>2] = $94;
   }
   $126 = (($121) + 16|0);
   HEAP32[$120>>2] = $126;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($92,$__v$i$i49);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i49);
  }
  $127 = ($75>>>0)<($82>>>0);
  if (!($127)) {
   $$0 = $76;
   STACKTOP = sp;return ($$0|0);
  }
  $128 = HEAP32[$cv>>2]|0;
  $129 = $128 & 1;
  $130 = ($129|0)==(0);
  $131 = $128 & 2;
  $132 = ($131|0)==(0);
  $133 = $128 & 4;
  $134 = ($133|0)==(0);
  $135 = (($__v$i$i56) + 8|0);
  $k$0439 = $75;
  while(1) {
   if ($84) {
    $136 = HEAP32[$db>>2]|0;
    $137 = ((($136) + (($k$0439*24)|0)|0) + 12|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138 & 1;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $145 = $138&255;
     $146 = $145 >>> 1;
     $147 = (($137) + 1|0);
     $$in = $146;$150 = $147;
    } else {
     $141 = ((($136) + (($k$0439*24)|0)|0) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($136) + (($k$0439*24)|0)|0) + 20|0);
     $144 = HEAP32[$143>>2]|0;
     $$in = $142;$150 = $144;
    }
    $148 = (($$in) + -2)|0;
    $149 = (($150) + ($148)|0);
    $151 = HEAP8[$149>>0]|0;
    $152 = ($151<<24>>24)==(38);
    if ($152) {
     $153 = (($$in) + -3)|0;
     $p$0 = $153;
    } else {
     if ($140) {
      $158 = (($137) + 1|0);
      $159 = $138&255;
      $160 = $159 >>> 1;
      $161 = $160;$163 = $158;
     } else {
      $154 = ((($136) + (($k$0439*24)|0)|0) + 20|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($136) + (($k$0439*24)|0)|0) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $161 = $157;$163 = $155;
     }
     $$sum$i = (($161) + -1)|0;
     $162 = (($163) + ($$sum$i)|0);
     $164 = HEAP8[$162>>0]|0;
     $165 = ($164<<24>>24)==(38);
     $$ = $165 ? $148 : $$in;
     $p$0 = $$;
    }
    if ($130) {
     $p$1 = $p$0;
    } else {
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($137,$p$0,1912,6)|0);
     $166 = (($p$0) + 6)|0;
     $p$1 = $166;
    }
    if ($132) {
     $p$2 = $p$1;
    } else {
     $167 = HEAP32[$db>>2]|0;
     $168 = ((($167) + (($k$0439*24)|0)|0) + 12|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($168,$p$1,1920,9)|0);
     $169 = (($p$1) + 9)|0;
     $p$2 = $169;
    }
    if (!($134)) {
     $170 = HEAP32[$db>>2]|0;
     $171 = ((($170) + (($k$0439*24)|0)|0) + 12|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($171,$p$2,1936,9)|0);
    }
   } else {
    if (!($130)) {
     $172 = HEAP32[$db>>2]|0;
     $173 = (($172) + (($k$0439*24)|0)|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($173,1912,6)|0);
    }
    if (!($132)) {
     $174 = HEAP32[$db>>2]|0;
     $175 = (($174) + (($k$0439*24)|0)|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($175,1920,9)|0);
    }
    if (!($134)) {
     $176 = HEAP32[$db>>2]|0;
     $177 = (($176) + (($k$0439*24)|0)|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($177,1936,9)|0);
    }
   }
   $178 = HEAP32[$85>>2]|0;
   $179 = (($178) + -16|0);
   $180 = HEAP32[$db>>2]|0;
   $181 = (($180) + (($k$0439*24)|0)|0);
   $182 = (($178) + -12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($178) + -8|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ($183|0)==($185|0);
   if ($186) {
    $201 = (($178) + -4|0);
    $202 = HEAP32[$179>>2]|0;
    $203 = $183;
    $204 = $202;
    $205 = (($203) - ($204))|0;
    $206 = (($205|0) / 24)&-1;
    $207 = (($206) + 1)|0;
    $208 = ($207|0)<(0);
    if ($208) {
     label = 52;
     break;
    }
    $209 = ($206>>>0)<(1073741823);
    if ($209) {
     $210 = $206 << 1;
     $211 = ($210>>>0)<($207>>>0);
     $212 = $211 ? $207 : $210;
     $$0$i$i$i60 = $212;
    } else {
     $$0$i$i$i60 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i56,$$0$i$i$i60,$206,$201);
    $213 = HEAP32[$135>>2]|0;
    $214 = ($213|0)==(0|0);
    if (!($214)) {
     __THREW__ = 0;
     invoke_vii(39,($213|0),($181|0));
     $215 = __THREW__; __THREW__ = 0;
     $216 = $215&1;
     if ($216) {
      label = 60;
      break;
     }
     $217 = (($213) + 12|0);
     $218 = ((($180) + (($k$0439*24)|0)|0) + 12|0);
     __THREW__ = 0;
     invoke_vii(39,($217|0),($218|0));
     $219 = __THREW__; __THREW__ = 0;
     $220 = $219&1;
     if ($220) {
      label = 58;
      break;
     }
    }
    $230 = (($213) + 24|0);
    HEAP32[$135>>2] = $230;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($179,$__v$i$i56);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i56);
   } else {
    $187 = ($183|0)==(0|0);
    if ($187) {
     $200 = 0;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($183,$181);
     $188 = (($183) + 12|0);
     $189 = ((($180) + (($k$0439*24)|0)|0) + 12|0);
     __THREW__ = 0;
     invoke_vii(39,($188|0),($189|0));
     $190 = __THREW__; __THREW__ = 0;
     $191 = $190&1;
     if ($191) {
      label = 47;
      break;
     }
     $$pre$i57 = HEAP32[$182>>2]|0;
     $200 = $$pre$i57;
    }
    $199 = (($200) + 24|0);
    HEAP32[$182>>2] = $199;
   }
   $231 = (($k$0439) + 1)|0;
   $232 = ($231>>>0)<($82>>>0);
   if ($232) {
    $k$0439 = $231;
   } else {
    $$0 = $76;
    label = 1090;
    break;
   }
  }
  if ((label|0) == 47) {
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $194 = HEAP8[$183>>0]|0;
   $195 = $194 & 1;
   $196 = ($195<<24>>24)==(0);
   if ($196) {
    ___resumeException($192|0);
    // unreachable;
   }
   $197 = (($183) + 8|0);
   $198 = HEAP32[$197>>2]|0;
   _free($198);
   ___resumeException($192|0);
   // unreachable;
  }
  else if ((label|0) == 52) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
   // unreachable;
  }
  else if ((label|0) == 58) {
   $221 = ___cxa_find_matching_catch()|0;
   $222 = tempRet0;
   $223 = HEAP8[$213>>0]|0;
   $224 = $223 & 1;
   $225 = ($224<<24>>24)==(0);
   if ($225) {
    $eh$lpad$body$i$i63$index3Z2D = $222;$eh$lpad$body$i$i63$indexZ2D = $221;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i56);
    ___resumeException($eh$lpad$body$i$i63$indexZ2D|0);
    // unreachable;
   }
   $226 = (($213) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   _free($227);
   $eh$lpad$body$i$i63$index3Z2D = $222;$eh$lpad$body$i$i63$indexZ2D = $221;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i56);
   ___resumeException($eh$lpad$body$i$i63$indexZ2D|0);
   // unreachable;
  }
  else if ((label|0) == 60) {
   $228 = ___cxa_find_matching_catch()|0;
   $229 = tempRet0;
   $eh$lpad$body$i$i63$index3Z2D = $229;$eh$lpad$body$i$i63$indexZ2D = $228;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i56);
   ___resumeException($eh$lpad$body$i$i63$indexZ2D|0);
   // unreachable;
  }
  else if ((label|0) == 1090) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $233 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $234 = ($233|0)==($first|0);
 if (!($234)) {
  $$0 = $233;
  STACKTOP = sp;return ($$0|0);
 }
 $235 = HEAP8[$first>>0]|0;
 $236 = $235 << 24 >> 24;
 L103: do {
  switch ($236|0) {
  case 65:  {
   $237 = ($235<<24>>24)==(65);
   L105: do {
    if ($237) {
     $238 = (($first) + 1|0);
     $239 = ($238|0)==($last|0);
     if ($239) {
      $$0$i = $first;
     } else {
      $240 = HEAP8[$238>>0]|0;
      $241 = ($240<<24>>24)==(95);
      if ($241) {
       $242 = (($first) + 2|0);
       $243 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($242,$last,$db)|0);
       $244 = ($243|0)==($242|0);
       if ($244) {
        $$0$i = $first;
        break;
       }
       $245 = HEAP32[$db>>2]|0;
       $246 = (($db) + 4|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ($245|0)==($247|0);
       if ($248) {
        $$0$i = $first;
        break;
       }
       $249 = (($247) + -12|0);
       $250 = HEAP8[$249>>0]|0;
       $251 = $250 & 1;
       $252 = ($251<<24>>24)==(0);
       if ($252) {
        $257 = $250&255;
        $258 = $257 >>> 1;
        $259 = (($249) + 1|0);
        $261 = $258;$263 = $259;
       } else {
        $253 = (($247) + -8|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = (($247) + -4|0);
        $256 = HEAP32[$255>>2]|0;
        $261 = $254;$263 = $256;
       }
       $260 = ($261>>>0)<(2);
       $262 = $260 ? $261 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9,$263,$262);
       $264 = HEAP8[$9>>0]|0;
       $265 = $264 & 1;
       $266 = ($265<<24>>24)==(0);
       if ($266) {
        $271 = $264&255;
        $272 = $271 >>> 1;
        $273 = (($9) + 1|0);
        $275 = $272;$3296 = $273;
       } else {
        $267 = (($9) + 4|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = (($9) + 8|0);
        $270 = HEAP32[$269>>2]|0;
        $275 = $268;$3296 = $270;
       }
       $274 = ($275>>>0)>(2);
       $276 = $274 ? 2 : $275;
       $277 = ($276|0)==(0);
       L120: do {
        if ($277) {
         $286 = 0;
        } else {
         $$02$i32 = $276;$l$03$i = $3296;$r$04$i = 1984;
         while(1) {
          $278 = HEAP8[$l$03$i>>0]|0;
          $279 = HEAP8[$r$04$i>>0]|0;
          $280 = ($278<<24>>24)==($279<<24>>24);
          if (!($280)) {
           $286 = 1;
           break L120;
          }
          $281 = (($$02$i32) + -1)|0;
          $282 = (($l$03$i) + 1|0);
          $283 = (($r$04$i) + 1|0);
          $284 = ($281|0)==(0);
          if ($284) {
           $286 = 0;
           break;
          } else {
           $$02$i32 = $281;$l$03$i = $282;$r$04$i = $283;
          }
         }
        }
       } while(0);
       $285 = ($275>>>0)<(2);
       $or$cond344 = $286 | $285;
       if (!($266)) {
        $287 = (($9) + 8|0);
        $288 = HEAP32[$287>>2]|0;
        _free($288);
       }
       $brmerge = $or$cond344 | $274;
       if (!($brmerge)) {
        $289 = HEAP32[$246>>2]|0;
        $290 = (($289) + -12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($290);
       }
       $291 = HEAP32[$246>>2]|0;
       $292 = (($291) + -12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($292,0,4088,3)|0);
       $$0$i = $243;
       break;
      }
      $$off343 = (($240) + -49)<<24>>24;
      $293 = ($$off343&255)<(9);
      if ($293) {
       $294 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($238,$last)|0);
       $295 = ($294|0)==($last|0);
       if ($295) {
        $$0$i = $first;
        break;
       }
       $296 = HEAP8[$294>>0]|0;
       $297 = ($296<<24>>24)==(95);
       if (!($297)) {
        $$0$i = $first;
        break;
       }
       $298 = (($294) + 1|0);
       $299 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($298,$last,$db)|0);
       $300 = ($299|0)==($298|0);
       if ($300) {
        $$0$i = $first;
        break;
       }
       $301 = HEAP32[$db>>2]|0;
       $302 = (($db) + 4|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = ($301|0)==($303|0);
       if ($304) {
        $$0$i = $first;
        break;
       }
       $305 = (($303) + -12|0);
       $306 = HEAP8[$305>>0]|0;
       $307 = $306 & 1;
       $308 = ($307<<24>>24)==(0);
       if ($308) {
        $313 = $306&255;
        $314 = $313 >>> 1;
        $315 = (($305) + 1|0);
        $317 = $314;$319 = $315;
       } else {
        $309 = (($303) + -8|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = (($303) + -4|0);
        $312 = HEAP32[$311>>2]|0;
        $317 = $310;$319 = $312;
       }
       $316 = ($317>>>0)<(2);
       $318 = $316 ? $317 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10,$319,$318);
       $320 = HEAP8[$10>>0]|0;
       $321 = $320 & 1;
       $322 = ($321<<24>>24)==(0);
       if ($322) {
        $327 = $320&255;
        $328 = $327 >>> 1;
        $329 = (($10) + 1|0);
        $3297 = $329;$331 = $328;
       } else {
        $323 = (($10) + 4|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = (($10) + 8|0);
        $326 = HEAP32[$325>>2]|0;
        $3297 = $326;$331 = $324;
       }
       $330 = ($331>>>0)>(2);
       $332 = $330 ? 2 : $331;
       $333 = ($332|0)==(0);
       L146: do {
        if ($333) {
         $342 = 0;
        } else {
         $$02$i36 = $332;$l$03$i35 = $3297;$r$04$i34 = 1984;
         while(1) {
          $334 = HEAP8[$l$03$i35>>0]|0;
          $335 = HEAP8[$r$04$i34>>0]|0;
          $336 = ($334<<24>>24)==($335<<24>>24);
          if (!($336)) {
           $342 = 1;
           break L146;
          }
          $337 = (($$02$i36) + -1)|0;
          $338 = (($l$03$i35) + 1|0);
          $339 = (($r$04$i34) + 1|0);
          $340 = ($337|0)==(0);
          if ($340) {
           $342 = 0;
           break;
          } else {
           $$02$i36 = $337;$l$03$i35 = $338;$r$04$i34 = $339;
          }
         }
        }
       } while(0);
       $341 = ($331>>>0)<(2);
       $or$cond345 = $342 | $341;
       if (!($322)) {
        $343 = (($10) + 8|0);
        $344 = HEAP32[$343>>2]|0;
        _free($344);
       }
       $brmerge347 = $or$cond345 | $330;
       if (!($brmerge347)) {
        $345 = HEAP32[$302>>2]|0;
        $346 = (($345) + -12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($346);
       }
       $347 = HEAP32[$302>>2]|0;
       $348 = (($347) + -12|0);
       $349 = $238;
       $350 = $294;
       $351 = (($350) - ($349))|0;
       $352 = ($351>>>0)>(4294967279);
       if ($352) {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
        // unreachable;
       }
       $353 = ($351>>>0)<(11);
       if ($353) {
        $354 = $351 << 1;
        $355 = $354&255;
        HEAP8[$13>>0] = $355;
        $356 = (($13) + 1|0);
        $__p$0$ph$i$i$i = $356;
       } else {
        $357 = (($351) + 16)|0;
        $358 = $357 & -16;
        $359 = (_malloc($358)|0);
        $360 = (($13) + 8|0);
        HEAP32[$360>>2] = $359;
        $361 = $358 | 1;
        HEAP32[$13>>2] = $361;
        $362 = (($13) + 4|0);
        HEAP32[$362>>2] = $351;
        $__p$0$ph$i$i$i = $359;
       }
       $363 = ($238|0)==($294|0);
       if ($363) {
        $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
       } else {
        $$02$i$i$i = $238;$__p$01$i$i$i = $__p$0$ph$i$i$i;
        while(1) {
         $364 = HEAP8[$$02$i$i$i>>0]|0;
         HEAP8[$__p$01$i$i$i>>0] = $364;
         $365 = (($$02$i$i$i) + 1|0);
         $366 = (($__p$01$i$i$i) + 1|0);
         $367 = ($365|0)==($294|0);
         if ($367) {
          break;
         } else {
          $$02$i$i$i = $365;$__p$01$i$i$i = $366;
         }
        }
        $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($351)|0);
        $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
       }
       HEAP8[$__p$0$lcssa$i$i$i>>0] = 0;
       __THREW__ = 0;
       $368 = (invoke_iiiii(33,($13|0),0,(1984|0),2)|0);
       $369 = __THREW__; __THREW__ = 0;
       $370 = $369&1;
       do {
        if ($370) {
         $403 = ___cxa_find_matching_catch()|0;
         $404 = tempRet0;
         $$1$i273 = $404;$$13$i = $403;
        } else {
         ;HEAP32[$12+0>>2]=HEAP32[$368+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$368+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$368+8>>2]|0;
         ;HEAP32[$368+0>>2]=0|0;HEAP32[$368+4>>2]=0|0;HEAP32[$368+8>>2]=0|0;
         __THREW__ = 0;
         $371 = (invoke_iiii(32,($12|0),(2120|0),1)|0);
         $372 = __THREW__; __THREW__ = 0;
         $373 = $372&1;
         do {
          if ($373) {
           $405 = ___cxa_find_matching_catch()|0;
           $406 = tempRet0;
           $$01$i272 = $406;$$02$i = $405;
          } else {
           ;HEAP32[$11+0>>2]=HEAP32[$371+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$371+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$371+8>>2]|0;
           ;HEAP32[$371+0>>2]=0|0;HEAP32[$371+4>>2]=0|0;HEAP32[$371+8>>2]=0|0;
           $374 = HEAP8[$11>>0]|0;
           $375 = $374 & 1;
           $376 = ($375<<24>>24)==(0);
           if ($376) {
            $381 = (($11) + 1|0);
            $382 = $374&255;
            $383 = $382 >>> 1;
            $384 = $381;$385 = $383;
           } else {
            $377 = (($11) + 8|0);
            $378 = HEAP32[$377>>2]|0;
            $379 = (($11) + 4|0);
            $380 = HEAP32[$379>>2]|0;
            $384 = $378;$385 = $380;
           }
           __THREW__ = 0;
           (invoke_iiiii(33,($348|0),0,($384|0),($385|0))|0);
           $386 = __THREW__; __THREW__ = 0;
           $387 = $386&1;
           if ($387) {
            $407 = ___cxa_find_matching_catch()|0;
            $408 = tempRet0;
            $409 = HEAP8[$11>>0]|0;
            $410 = $409 & 1;
            $411 = ($410<<24>>24)==(0);
            if ($411) {
             $$01$i272 = $408;$$02$i = $407;
             break;
            }
            $412 = (($11) + 8|0);
            $413 = HEAP32[$412>>2]|0;
            _free($413);
            $$01$i272 = $408;$$02$i = $407;
            break;
           }
           $388 = HEAP8[$11>>0]|0;
           $389 = $388 & 1;
           $390 = ($389<<24>>24)==(0);
           if (!($390)) {
            $391 = (($11) + 8|0);
            $392 = HEAP32[$391>>2]|0;
            _free($392);
           }
           $393 = HEAP8[$12>>0]|0;
           $394 = $393 & 1;
           $395 = ($394<<24>>24)==(0);
           if (!($395)) {
            $396 = (($12) + 8|0);
            $397 = HEAP32[$396>>2]|0;
            _free($397);
           }
           $398 = HEAP8[$13>>0]|0;
           $399 = $398 & 1;
           $400 = ($399<<24>>24)==(0);
           if ($400) {
            $$0$i = $299;
            break L105;
           }
           $401 = (($13) + 8|0);
           $402 = HEAP32[$401>>2]|0;
           _free($402);
           $$0$i = $299;
           break L105;
          }
         } while(0);
         $414 = HEAP8[$12>>0]|0;
         $415 = $414 & 1;
         $416 = ($415<<24>>24)==(0);
         if ($416) {
          $$1$i273 = $$01$i272;$$13$i = $$02$i;
          break;
         }
         $417 = (($12) + 8|0);
         $418 = HEAP32[$417>>2]|0;
         _free($418);
         $$1$i273 = $$01$i272;$$13$i = $$02$i;
        }
       } while(0);
       $419 = HEAP8[$13>>0]|0;
       $420 = $419 & 1;
       $421 = ($420<<24>>24)==(0);
       if ($421) {
        $$6$i296 = $$1$i273;$$68$i = $$13$i;
        ___resumeException($$68$i|0);
        // unreachable;
       }
       $422 = (($13) + 8|0);
       $423 = HEAP32[$422>>2]|0;
       _free($423);
       $$6$i296 = $$1$i273;$$68$i = $$13$i;
       ___resumeException($$68$i|0);
       // unreachable;
      }
      $424 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($238,$last,$db)|0);
      $425 = ($424|0)==($238|0);
      $426 = ($424|0)==($last|0);
      $or$cond10$i = $425 | $426;
      if ($or$cond10$i) {
       $$0$i = $first;
      } else {
       $427 = HEAP8[$424>>0]|0;
       $428 = ($427<<24>>24)==(95);
       if ($428) {
        $429 = (($424) + 1|0);
        $430 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($429,$last,$db)|0);
        $431 = ($430|0)==($429|0);
        if ($431) {
         $$0$i = $first;
        } else {
         $432 = (($db) + 4|0);
         $433 = HEAP32[$432>>2]|0;
         $434 = HEAP32[$db>>2]|0;
         $435 = $433;
         $436 = $434;
         $437 = (($435) - ($436))|0;
         $438 = (($437|0) / 24)&-1;
         $439 = ($438>>>0)<(2);
         if ($439) {
          $$0$i = $first;
         } else {
          $440 = (($433) + -24|0);
          ;HEAP32[$type$i+0>>2]=HEAP32[$440+0>>2]|0;HEAP32[$type$i+4>>2]=HEAP32[$440+4>>2]|0;HEAP32[$type$i+8>>2]=HEAP32[$440+8>>2]|0;
          ;HEAP32[$440+0>>2]=0|0;HEAP32[$440+4>>2]=0|0;HEAP32[$440+8>>2]=0|0;
          $441 = (($type$i) + 12|0);
          $442 = (($433) + -12|0);
          ;HEAP32[$441+0>>2]=HEAP32[$442+0>>2]|0;HEAP32[$441+4>>2]=HEAP32[$442+4>>2]|0;HEAP32[$441+8>>2]=HEAP32[$442+8>>2]|0;
          ;HEAP32[$442+0>>2]=0|0;HEAP32[$442+4>>2]=0|0;HEAP32[$442+8>>2]=0|0;
          $443 = HEAP32[$432>>2]|0;
          $444 = (($443) + -24|0);
          $446 = $443;
          while(1) {
           $445 = (($446) + -24|0);
           HEAP32[$432>>2] = $445;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($445);
           $447 = HEAP32[$432>>2]|0;
           $448 = ($447|0)==($444|0);
           if ($448) {
            break;
           } else {
            $446 = $447;
           }
          }
          $449 = (($443) + -48|0);
          ;HEAP32[$expr$i+0>>2]=HEAP32[$449+0>>2]|0;HEAP32[$expr$i+4>>2]=HEAP32[$449+4>>2]|0;HEAP32[$expr$i+8>>2]=HEAP32[$449+8>>2]|0;
          ;HEAP32[$449+0>>2]=0|0;HEAP32[$449+4>>2]=0|0;HEAP32[$449+8>>2]=0|0;
          $450 = (($expr$i) + 12|0);
          $451 = (($443) + -36|0);
          ;HEAP32[$450+0>>2]=HEAP32[$451+0>>2]|0;HEAP32[$450+4>>2]=HEAP32[$451+4>>2]|0;HEAP32[$450+8>>2]=HEAP32[$451+8>>2]|0;
          ;HEAP32[$451+0>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;
          $452 = HEAP32[$432>>2]|0;
          $453 = (($452) + -24|0);
          $454 = HEAP8[$453>>0]|0;
          $455 = $454 & 1;
          $456 = ($455<<24>>24)==(0);
          do {
           if ($456) {
            $457 = (($453) + 1|0);
            HEAP8[$457>>0] = 0;
            HEAP8[$453>>0] = 0;
           } else {
            $458 = (($452) + -16|0);
            $459 = HEAP32[$458>>2]|0;
            HEAP8[$459>>0] = 0;
            $460 = (($452) + -20|0);
            HEAP32[$460>>2] = 0;
            $$pre$i$i$i$i277 = HEAP8[$453>>0]|0;
            $461 = $$pre$i$i$i$i277 & 1;
            $462 = ($461<<24>>24)==(0);
            if ($462) {
             $467 = $$pre$i$i$i$i277;$476 = 10;
            } else {
             $463 = HEAP32[$453>>2]|0;
             $464 = $463 & -2;
             $phitmp$i$i$i$i$i$i$i279 = (($464) + -1)|0;
             $465 = $463&255;
             $467 = $465;$476 = $phitmp$i$i$i$i$i$i$i279;
            }
            $466 = $467 & 1;
            $468 = ($466<<24>>24)==(0);
            if ($468) {
             $469 = $467&255;
             $470 = $469 >>> 1;
             $471 = ($467&255)<(22);
             if ($471) {
              $3298 = 1;$475 = 10;$495 = $470;
             } else {
              $472 = (($470) + 16)|0;
              $473 = $472 & 240;
              $phitmp$i2$i$i$i$i$i$i282 = (($473) + -1)|0;
              $3298 = 1;$475 = $phitmp$i2$i$i$i$i$i$i282;$495 = $470;
             }
            } else {
             $3298 = 0;$475 = 10;$495 = 0;
            }
            $474 = ($475|0)==($476|0);
            if (!($474)) {
             $477 = ($475|0)==(10);
             if ($477) {
              $482 = (($453) + 1|0);
              $483 = HEAP32[$458>>2]|0;
              if ($3298) {
               $484 = $467&255;
               $485 = $484 >>> 1;
               $486 = (($485) + 1)|0;
               _memcpy(($482|0),($483|0),($486|0))|0;
               _free($483);
              } else {
               $491 = HEAP8[$483>>0]|0;
               HEAP8[$482>>0] = $491;
               _free($483);
              }
              $496 = $495 << 1;
              $497 = $496&255;
              HEAP8[$453>>0] = $497;
              break;
             }
             $478 = ($475>>>0)<=($476>>>0);
             $479 = (($475) + 1)|0;
             $480 = (_malloc($479)|0);
             $481 = ($480|0)==(0|0);
             $or$cond$i$i$i$i$i$i284 = $478 & $481;
             if (!($or$cond$i$i$i$i$i$i284)) {
              if ($3298) {
               $487 = (($453) + 1|0);
               $488 = $467&255;
               $489 = $488 >>> 1;
               $490 = (($489) + 1)|0;
               _memcpy(($480|0),($487|0),($490|0))|0;
              } else {
               $492 = HEAP32[$458>>2]|0;
               $493 = HEAP8[$492>>0]|0;
               HEAP8[$480>>0] = $493;
               _free($492);
              }
              $494 = $479 | 1;
              HEAP32[$453>>2] = $494;
              HEAP32[$460>>2] = $495;
              HEAP32[$458>>2] = $480;
             }
            }
           }
          } while(0);
          ;HEAP32[$453+0>>2]=HEAP32[$type$i+0>>2]|0;HEAP32[$453+4>>2]=HEAP32[$type$i+4>>2]|0;HEAP32[$453+8>>2]=HEAP32[$type$i+8>>2]|0;
          ;HEAP32[$type$i+0>>2]=0|0;HEAP32[$type$i+4>>2]=0|0;HEAP32[$type$i+8>>2]=0|0;
          $498 = HEAP8[$441>>0]|0;
          $499 = $498 & 1;
          $500 = ($499<<24>>24)==(0);
          if ($500) {
           $505 = $498&255;
           $506 = $505 >>> 1;
           $507 = (($441) + 1|0);
           $509 = $506;$511 = $507;
          } else {
           $501 = (($type$i) + 16|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (($type$i) + 20|0);
           $504 = HEAP32[$503>>2]|0;
           $509 = $502;$511 = $504;
          }
          $508 = ($509>>>0)<(2);
          $510 = $508 ? $509 : 2;
          __THREW__ = 0;
          invoke_viii(40,($14|0),($511|0),($510|0));
          $512 = __THREW__; __THREW__ = 0;
          $513 = $512&1;
          do {
           if ($513) {
            label = 169;
           } else {
            $514 = HEAP8[$14>>0]|0;
            $515 = $514 & 1;
            $516 = ($515<<24>>24)==(0);
            if ($516) {
             $521 = $514&255;
             $522 = $521 >>> 1;
             $523 = (($14) + 1|0);
             $3299 = $523;$525 = $522;
            } else {
             $517 = (($14) + 4|0);
             $518 = HEAP32[$517>>2]|0;
             $519 = (($14) + 8|0);
             $520 = HEAP32[$519>>2]|0;
             $3299 = $520;$525 = $518;
            }
            $524 = ($525>>>0)>(2);
            $526 = $524 ? 2 : $525;
            $527 = ($526|0)==(0);
            L239: do {
             if ($527) {
              $536 = 0;
             } else {
              $$02$i52 = $526;$l$03$i51 = $3299;$r$04$i50 = 1984;
              while(1) {
               $528 = HEAP8[$l$03$i51>>0]|0;
               $529 = HEAP8[$r$04$i50>>0]|0;
               $530 = ($528<<24>>24)==($529<<24>>24);
               if (!($530)) {
                $536 = 1;
                break L239;
               }
               $531 = (($$02$i52) + -1)|0;
               $532 = (($l$03$i51) + 1|0);
               $533 = (($r$04$i50) + 1|0);
               $534 = ($531|0)==(0);
               if ($534) {
                $536 = 0;
                break;
               } else {
                $$02$i52 = $531;$l$03$i51 = $532;$r$04$i50 = $533;
               }
              }
             }
            } while(0);
            $535 = ($525>>>0)<(2);
            $or$cond346 = $536 | $535;
            if (!($516)) {
             $537 = (($14) + 8|0);
             $538 = HEAP32[$537>>2]|0;
             _free($538);
            }
            $brmerge348 = $or$cond346 | $524;
            if (!($brmerge348)) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($441);
            }
            $541 = HEAP32[$432>>2]|0;
            $542 = (($541) + -12|0);
            __THREW__ = 0;
            invoke_vii(36,($17|0),($expr$i|0));
            $543 = __THREW__; __THREW__ = 0;
            $544 = $543&1;
            if ($544) {
             label = 169;
             break;
            }
            __THREW__ = 0;
            $545 = (invoke_iiiii(33,($17|0),0,(1984|0),2)|0);
            $546 = __THREW__; __THREW__ = 0;
            $547 = $546&1;
            do {
             if ($547) {
              $629 = ___cxa_find_matching_catch()|0;
              $630 = tempRet0;
              $$4$i294 = $630;$$46$i = $629;
             } else {
              ;HEAP32[$16+0>>2]=HEAP32[$545+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$545+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$545+8>>2]|0;
              ;HEAP32[$545+0>>2]=0|0;HEAP32[$545+4>>2]=0|0;HEAP32[$545+8>>2]=0|0;
              __THREW__ = 0;
              $548 = (invoke_iiii(32,($16|0),(2120|0),1)|0);
              $549 = __THREW__; __THREW__ = 0;
              $550 = $549&1;
              do {
               if ($550) {
                $631 = ___cxa_find_matching_catch()|0;
                $632 = tempRet0;
                $$3$i = $632;$$35$i = $631;
               } else {
                ;HEAP32[$15+0>>2]=HEAP32[$548+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$548+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$548+8>>2]|0;
                ;HEAP32[$548+0>>2]=0|0;HEAP32[$548+4>>2]=0|0;HEAP32[$548+8>>2]=0|0;
                $551 = HEAP8[$441>>0]|0;
                $552 = $551 & 1;
                $553 = ($552<<24>>24)==(0);
                if ($553) {
                 $558 = (($441) + 1|0);
                 $559 = $551&255;
                 $560 = $559 >>> 1;
                 $561 = $558;$562 = $560;
                } else {
                 $554 = (($type$i) + 20|0);
                 $555 = HEAP32[$554>>2]|0;
                 $556 = (($type$i) + 16|0);
                 $557 = HEAP32[$556>>2]|0;
                 $561 = $555;$562 = $557;
                }
                __THREW__ = 0;
                $563 = (invoke_iiii(32,($15|0),($561|0),($562|0))|0);
                $564 = __THREW__; __THREW__ = 0;
                $565 = $564&1;
                if ($565) {
                 $633 = ___cxa_find_matching_catch()|0;
                 $634 = tempRet0;
                 $635 = HEAP8[$15>>0]|0;
                 $636 = $635 & 1;
                 $637 = ($636<<24>>24)==(0);
                 if ($637) {
                  $$3$i = $634;$$35$i = $633;
                  break;
                 }
                 $638 = (($15) + 8|0);
                 $639 = HEAP32[$638>>2]|0;
                 _free($639);
                 $$3$i = $634;$$35$i = $633;
                 break;
                }
                $566 = HEAP8[$563>>0]|0;
                $567 = (($563) + 1|0);
                ;HEAP8[$$sroa$6194+0>>0]=HEAP8[$567+0>>0]|0;HEAP8[$$sroa$6194+1>>0]=HEAP8[$567+1>>0]|0;HEAP8[$$sroa$6194+2>>0]=HEAP8[$567+2>>0]|0;HEAP8[$$sroa$6194+3>>0]=HEAP8[$567+3>>0]|0;HEAP8[$$sroa$6194+4>>0]=HEAP8[$567+4>>0]|0;HEAP8[$$sroa$6194+5>>0]=HEAP8[$567+5>>0]|0;HEAP8[$$sroa$6194+6>>0]=HEAP8[$567+6>>0]|0;
                $568 = (($563) + 8|0);
                $569 = HEAP32[$568>>2]|0;
                ;HEAP32[$563+0>>2]=0|0;HEAP32[$563+4>>2]=0|0;HEAP32[$563+8>>2]=0|0;
                $570 = HEAP8[$542>>0]|0;
                $571 = $570 & 1;
                $572 = ($571<<24>>24)==(0);
                do {
                 if ($572) {
                  $573 = (($542) + 1|0);
                  HEAP8[$573>>0] = 0;
                  HEAP8[$542>>0] = 0;
                 } else {
                  $574 = (($541) + -4|0);
                  $575 = HEAP32[$574>>2]|0;
                  HEAP8[$575>>0] = 0;
                  $576 = (($541) + -8|0);
                  HEAP32[$576>>2] = 0;
                  $$pre$i$i$i28$i = HEAP8[$542>>0]|0;
                  $577 = $$pre$i$i$i28$i & 1;
                  $578 = ($577<<24>>24)==(0);
                  if ($578) {
                   $583 = $$pre$i$i$i28$i;$592 = 10;
                  } else {
                   $579 = HEAP32[$542>>2]|0;
                   $580 = $579 & -2;
                   $phitmp$i$i$i$i$i$i30$i = (($580) + -1)|0;
                   $581 = $579&255;
                   $583 = $581;$592 = $phitmp$i$i$i$i$i$i30$i;
                  }
                  $582 = $583 & 1;
                  $584 = ($582<<24>>24)==(0);
                  do {
                   if ($584) {
                    $585 = $583&255;
                    $586 = $585 >>> 1;
                    $587 = ($583&255)<(22);
                    if ($587) {
                     $3300 = 1;$591 = 10;$611 = $586;
                     break;
                    }
                    $588 = (($586) + 16)|0;
                    $589 = $588 & 240;
                    $phitmp$i2$i$i$i$i$i33$i = (($589) + -1)|0;
                    $3300 = 1;$591 = $phitmp$i2$i$i$i$i$i33$i;$611 = $586;
                   } else {
                    $3300 = 0;$591 = 10;$611 = 0;
                   }
                  } while(0);
                  $590 = ($591|0)==($592|0);
                  if ($590) {
                   break;
                  }
                  $593 = ($591|0)==(10);
                  if ($593) {
                   $598 = (($542) + 1|0);
                   $599 = HEAP32[$574>>2]|0;
                   if ($3300) {
                    $600 = $583&255;
                    $601 = $600 >>> 1;
                    $602 = (($601) + 1)|0;
                    _memcpy(($598|0),($599|0),($602|0))|0;
                    _free($599);
                   } else {
                    $607 = HEAP8[$599>>0]|0;
                    HEAP8[$598>>0] = $607;
                    _free($599);
                   }
                   $612 = $611 << 1;
                   $613 = $612&255;
                   HEAP8[$542>>0] = $613;
                   break;
                  }
                  $594 = ($591>>>0)<=($592>>>0);
                  $595 = (($591) + 1)|0;
                  $596 = (_malloc($595)|0);
                  $597 = ($596|0)==(0|0);
                  $or$cond$i$i$i$i$i35$i = $594 & $597;
                  if ($or$cond$i$i$i$i$i35$i) {
                   break;
                  }
                  if ($3300) {
                   $603 = (($542) + 1|0);
                   $604 = $583&255;
                   $605 = $604 >>> 1;
                   $606 = (($605) + 1)|0;
                   _memcpy(($596|0),($603|0),($606|0))|0;
                  } else {
                   $608 = HEAP32[$574>>2]|0;
                   $609 = HEAP8[$608>>0]|0;
                   HEAP8[$596>>0] = $609;
                   _free($608);
                  }
                  $610 = $595 | 1;
                  HEAP32[$542>>2] = $610;
                  HEAP32[$576>>2] = $611;
                  HEAP32[$574>>2] = $596;
                 }
                } while(0);
                $614 = (($541) + -12|0);
                HEAP8[$614>>0] = $566;
                $615 = (($541) + -11|0);
                ;HEAP8[$615+0>>0]=HEAP8[$$sroa$6194+0>>0]|0;HEAP8[$615+1>>0]=HEAP8[$$sroa$6194+1>>0]|0;HEAP8[$615+2>>0]=HEAP8[$$sroa$6194+2>>0]|0;HEAP8[$615+3>>0]=HEAP8[$$sroa$6194+3>>0]|0;HEAP8[$615+4>>0]=HEAP8[$$sroa$6194+4>>0]|0;HEAP8[$615+5>>0]=HEAP8[$$sroa$6194+5>>0]|0;HEAP8[$615+6>>0]=HEAP8[$$sroa$6194+6>>0]|0;
                $616 = (($541) + -4|0);
                HEAP32[$616>>2] = $569;
                ;HEAP8[$$sroa$6194+0>>0]=0|0;HEAP8[$$sroa$6194+1>>0]=0|0;HEAP8[$$sroa$6194+2>>0]=0|0;HEAP8[$$sroa$6194+3>>0]=0|0;HEAP8[$$sroa$6194+4>>0]=0|0;HEAP8[$$sroa$6194+5>>0]=0|0;HEAP8[$$sroa$6194+6>>0]=0|0;
                $$pre204 = HEAP8[$15>>0]|0;
                $phitmp225 = $$pre204 & 1;
                $phitmp226 = ($phitmp225<<24>>24)==(0);
                if (!($phitmp226)) {
                 $617 = (($15) + 8|0);
                 $618 = HEAP32[$617>>2]|0;
                 _free($618);
                }
                $619 = HEAP8[$16>>0]|0;
                $620 = $619 & 1;
                $621 = ($620<<24>>24)==(0);
                if (!($621)) {
                 $622 = (($16) + 8|0);
                 $623 = HEAP32[$622>>2]|0;
                 _free($623);
                }
                $624 = HEAP8[$17>>0]|0;
                $625 = $624 & 1;
                $626 = ($625<<24>>24)==(0);
                if (!($626)) {
                 $627 = (($17) + 8|0);
                 $628 = HEAP32[$627>>2]|0;
                 _free($628);
                }
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
                $$0$i = $430;
                break L105;
               }
              } while(0);
              $640 = HEAP8[$16>>0]|0;
              $641 = $640 & 1;
              $642 = ($641<<24>>24)==(0);
              if ($642) {
               $$4$i294 = $$3$i;$$46$i = $$35$i;
               break;
              }
              $643 = (($16) + 8|0);
              $644 = HEAP32[$643>>2]|0;
              _free($644);
              $$4$i294 = $$3$i;$$46$i = $$35$i;
             }
            } while(0);
            $645 = HEAP8[$17>>0]|0;
            $646 = $645 & 1;
            $647 = ($646<<24>>24)==(0);
            if ($647) {
             $$5$i295 = $$4$i294;$$57$i = $$46$i;
             break;
            }
            $648 = (($17) + 8|0);
            $649 = HEAP32[$648>>2]|0;
            _free($649);
            $$5$i295 = $$4$i294;$$57$i = $$46$i;
           }
          } while(0);
          if ((label|0) == 169) {
           $539 = ___cxa_find_matching_catch()|0;
           $540 = tempRet0;
           $$5$i295 = $540;$$57$i = $539;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
          $$6$i296 = $$5$i295;$$68$i = $$57$i;
          ___resumeException($$68$i|0);
          // unreachable;
         }
        }
       } else {
        $$0$i = $first;
       }
      }
     }
    } else {
     $$0$i = $first;
    }
   } while(0);
   $650 = ($$0$i|0)==($first|0);
   if ($650) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $651 = HEAP32[$db>>2]|0;
   $652 = (($db) + 4|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = ($651|0)==($653|0);
   if ($654) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $655 = (($db) + 16|0);
   $656 = (($653) + -24|0);
   $657 = (($db) + 12|0);
   $658 = HEAP32[$657>>2]|0;
   HEAP32[$26>>2] = $658;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($25,$656,$26);
   $659 = (($db) + 20|0);
   $660 = HEAP32[$659>>2]|0;
   $661 = (($db) + 24|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = ($660>>>0)<($662>>>0);
   if ($663) {
    $664 = ($660|0)==(0|0);
    if ($664) {
     $676 = 0;
    } else {
     $665 = (($660) + 4|0);
     $666 = (($25) + 12|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = (($660) + 8|0);
     $669 = (($660) + 12|0);
     HEAP32[$669>>2] = $667;
     $670 = HEAP32[$25>>2]|0;
     HEAP32[$660>>2] = $670;
     $671 = (($25) + 4|0);
     $672 = HEAP32[$671>>2]|0;
     HEAP32[$665>>2] = $672;
     $673 = (($25) + 8|0);
     $674 = HEAP32[$673>>2]|0;
     HEAP32[$668>>2] = $674;
     HEAP32[$673>>2] = 0;
     HEAP32[$671>>2] = 0;
     HEAP32[$25>>2] = 0;
     $$pre$i76 = HEAP32[$659>>2]|0;
     $676 = $$pre$i76;
    }
    $675 = (($676) + 16|0);
    HEAP32[$659>>2] = $675;
   } else {
    $677 = (($db) + 28|0);
    $678 = HEAP32[$655>>2]|0;
    $679 = $660;
    $680 = $678;
    $681 = (($679) - ($680))|0;
    $682 = $681 >> 4;
    $683 = (($682) + 1)|0;
    $684 = ($683|0)<(0);
    if ($684) {
     __THREW__ = 0;
     invoke_v(41);
     $685 = __THREW__; __THREW__ = 0;
     $686 = $685&1;
     if (!($686)) {
      // unreachable;
     }
     $708 = ___cxa_find_matching_catch()|0;
     $709 = tempRet0;
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($25);
     $$10 = $708;$$1013 = $709;
     ___resumeException($$10|0);
     // unreachable;
    }
    $687 = $662;
    $688 = (($687) - ($680))|0;
    $689 = $688 >> 4;
    $690 = ($689>>>0)<(1073741823);
    if ($690) {
     $691 = $688 >> 3;
     $692 = ($691>>>0)<($683>>>0);
     $693 = $692 ? $683 : $691;
     $$0$i$i$i78 = $693;
    } else {
     $$0$i$i$i78 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i75,$$0$i$i$i78,$682,$677);
    $694 = (($__v$i$i75) + 8|0);
    $695 = HEAP32[$694>>2]|0;
    $696 = ($695|0)==(0|0);
    if (!($696)) {
     $697 = (($695) + 4|0);
     $698 = (($25) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = (($695) + 8|0);
     $701 = (($695) + 12|0);
     HEAP32[$701>>2] = $699;
     $702 = HEAP32[$25>>2]|0;
     HEAP32[$695>>2] = $702;
     $703 = (($25) + 4|0);
     $704 = HEAP32[$703>>2]|0;
     HEAP32[$697>>2] = $704;
     $705 = (($25) + 8|0);
     $706 = HEAP32[$705>>2]|0;
     HEAP32[$700>>2] = $706;
     HEAP32[$705>>2] = 0;
     HEAP32[$703>>2] = 0;
     HEAP32[$25>>2] = 0;
    }
    $707 = (($695) + 16|0);
    HEAP32[$694>>2] = $707;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($655,$__v$i$i75);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i75);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($25);
   $$0 = $$0$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 71:  {
   $971 = (($first) + 1|0);
   $972 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($971,$last,$db)|0);
   $973 = ($972|0)==($971|0);
   if ($973) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $974 = HEAP32[$db>>2]|0;
   $975 = (($db) + 4|0);
   $976 = HEAP32[$975>>2]|0;
   $977 = ($974|0)==($976|0);
   if ($977) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $978 = (($976) + -24|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($978,1968,10)|0);
   $979 = (($db) + 16|0);
   $980 = HEAP32[$975>>2]|0;
   $981 = (($980) + -24|0);
   $982 = (($db) + 12|0);
   $983 = HEAP32[$982>>2]|0;
   HEAP32[$32>>2] = $983;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($31,$981,$32);
   $984 = (($db) + 20|0);
   $985 = HEAP32[$984>>2]|0;
   $986 = (($db) + 24|0);
   $987 = HEAP32[$986>>2]|0;
   $988 = ($985>>>0)<($987>>>0);
   if ($988) {
    $989 = ($985|0)==(0|0);
    if ($989) {
     $1001 = 0;
    } else {
     $990 = (($985) + 4|0);
     $991 = (($31) + 12|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = (($985) + 8|0);
     $994 = (($985) + 12|0);
     HEAP32[$994>>2] = $992;
     $995 = HEAP32[$31>>2]|0;
     HEAP32[$985>>2] = $995;
     $996 = (($31) + 4|0);
     $997 = HEAP32[$996>>2]|0;
     HEAP32[$990>>2] = $997;
     $998 = (($31) + 8|0);
     $999 = HEAP32[$998>>2]|0;
     HEAP32[$993>>2] = $999;
     HEAP32[$998>>2] = 0;
     HEAP32[$996>>2] = 0;
     HEAP32[$31>>2] = 0;
     $$pre$i100 = HEAP32[$984>>2]|0;
     $1001 = $$pre$i100;
    }
    $1000 = (($1001) + 16|0);
    HEAP32[$984>>2] = $1000;
   } else {
    $1002 = (($db) + 28|0);
    $1003 = HEAP32[$979>>2]|0;
    $1004 = $985;
    $1005 = $1003;
    $1006 = (($1004) - ($1005))|0;
    $1007 = $1006 >> 4;
    $1008 = (($1007) + 1)|0;
    $1009 = ($1008|0)<(0);
    if ($1009) {
     __THREW__ = 0;
     invoke_v(41);
     $1010 = __THREW__; __THREW__ = 0;
     $1011 = $1010&1;
     if (!($1011)) {
      // unreachable;
     }
     $1033 = ___cxa_find_matching_catch()|0;
     $1034 = tempRet0;
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($31);
     $$10 = $1033;$$1013 = $1034;
     ___resumeException($$10|0);
     // unreachable;
    }
    $1012 = $987;
    $1013 = (($1012) - ($1005))|0;
    $1014 = $1013 >> 4;
    $1015 = ($1014>>>0)<(1073741823);
    if ($1015) {
     $1016 = $1013 >> 3;
     $1017 = ($1016>>>0)<($1008>>>0);
     $1018 = $1017 ? $1008 : $1016;
     $$0$i$i$i102 = $1018;
    } else {
     $$0$i$i$i102 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i99,$$0$i$i$i102,$1007,$1002);
    $1019 = (($__v$i$i99) + 8|0);
    $1020 = HEAP32[$1019>>2]|0;
    $1021 = ($1020|0)==(0|0);
    if (!($1021)) {
     $1022 = (($1020) + 4|0);
     $1023 = (($31) + 12|0);
     $1024 = HEAP32[$1023>>2]|0;
     $1025 = (($1020) + 8|0);
     $1026 = (($1020) + 12|0);
     HEAP32[$1026>>2] = $1024;
     $1027 = HEAP32[$31>>2]|0;
     HEAP32[$1020>>2] = $1027;
     $1028 = (($31) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     HEAP32[$1022>>2] = $1029;
     $1030 = (($31) + 8|0);
     $1031 = HEAP32[$1030>>2]|0;
     HEAP32[$1025>>2] = $1031;
     HEAP32[$1030>>2] = 0;
     HEAP32[$1028>>2] = 0;
     HEAP32[$31>>2] = 0;
    }
    $1032 = (($1020) + 16|0);
    HEAP32[$1019>>2] = $1032;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($979,$__v$i$i99);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i99);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($31);
   $$0 = $972;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 67:  {
   $710 = (($first) + 1|0);
   $711 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($710,$last,$db)|0);
   $712 = ($711|0)==($710|0);
   if ($712) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $713 = HEAP32[$db>>2]|0;
   $714 = (($db) + 4|0);
   $715 = HEAP32[$714>>2]|0;
   $716 = ($713|0)==($715|0);
   if ($716) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $717 = (($715) + -24|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($717,1952,8)|0);
   $718 = (($db) + 16|0);
   $719 = HEAP32[$714>>2]|0;
   $720 = (($719) + -24|0);
   $721 = (($db) + 12|0);
   $722 = HEAP32[$721>>2]|0;
   HEAP32[$28>>2] = $722;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($27,$720,$28);
   $723 = (($db) + 20|0);
   $724 = HEAP32[$723>>2]|0;
   $725 = (($db) + 24|0);
   $726 = HEAP32[$725>>2]|0;
   $727 = ($724>>>0)<($726>>>0);
   if ($727) {
    $728 = ($724|0)==(0|0);
    if ($728) {
     $740 = 0;
    } else {
     $729 = (($724) + 4|0);
     $730 = (($27) + 12|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = (($724) + 8|0);
     $733 = (($724) + 12|0);
     HEAP32[$733>>2] = $731;
     $734 = HEAP32[$27>>2]|0;
     HEAP32[$724>>2] = $734;
     $735 = (($27) + 4|0);
     $736 = HEAP32[$735>>2]|0;
     HEAP32[$729>>2] = $736;
     $737 = (($27) + 8|0);
     $738 = HEAP32[$737>>2]|0;
     HEAP32[$732>>2] = $738;
     HEAP32[$737>>2] = 0;
     HEAP32[$735>>2] = 0;
     HEAP32[$27>>2] = 0;
     $$pre$i84 = HEAP32[$723>>2]|0;
     $740 = $$pre$i84;
    }
    $739 = (($740) + 16|0);
    HEAP32[$723>>2] = $739;
   } else {
    $741 = (($db) + 28|0);
    $742 = HEAP32[$718>>2]|0;
    $743 = $724;
    $744 = $742;
    $745 = (($743) - ($744))|0;
    $746 = $745 >> 4;
    $747 = (($746) + 1)|0;
    $748 = ($747|0)<(0);
    if ($748) {
     __THREW__ = 0;
     invoke_v(41);
     $749 = __THREW__; __THREW__ = 0;
     $750 = $749&1;
     if (!($750)) {
      // unreachable;
     }
     $772 = ___cxa_find_matching_catch()|0;
     $773 = tempRet0;
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($27);
     $$10 = $772;$$1013 = $773;
     ___resumeException($$10|0);
     // unreachable;
    }
    $751 = $726;
    $752 = (($751) - ($744))|0;
    $753 = $752 >> 4;
    $754 = ($753>>>0)<(1073741823);
    if ($754) {
     $755 = $752 >> 3;
     $756 = ($755>>>0)<($747>>>0);
     $757 = $756 ? $747 : $755;
     $$0$i$i$i86 = $757;
    } else {
     $$0$i$i$i86 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i83,$$0$i$i$i86,$746,$741);
    $758 = (($__v$i$i83) + 8|0);
    $759 = HEAP32[$758>>2]|0;
    $760 = ($759|0)==(0|0);
    if (!($760)) {
     $761 = (($759) + 4|0);
     $762 = (($27) + 12|0);
     $763 = HEAP32[$762>>2]|0;
     $764 = (($759) + 8|0);
     $765 = (($759) + 12|0);
     HEAP32[$765>>2] = $763;
     $766 = HEAP32[$27>>2]|0;
     HEAP32[$759>>2] = $766;
     $767 = (($27) + 4|0);
     $768 = HEAP32[$767>>2]|0;
     HEAP32[$761>>2] = $768;
     $769 = (($27) + 8|0);
     $770 = HEAP32[$769>>2]|0;
     HEAP32[$764>>2] = $770;
     HEAP32[$769>>2] = 0;
     HEAP32[$767>>2] = 0;
     HEAP32[$27>>2] = 0;
    }
    $771 = (($759) + 16|0);
    HEAP32[$758>>2] = $771;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($718,$__v$i$i83);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i83);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($27);
   $$0 = $711;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 70:  {
   $774 = ($235<<24>>24)==(70);
   if (!($774)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $775 = (($first) + 1|0);
   $776 = ($775|0)==($last|0);
   if ($776) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $777 = HEAP8[$775>>0]|0;
   $778 = ($777<<24>>24)==(89);
   if ($778) {
    $779 = (($first) + 2|0);
    $780 = ($779|0)==($last|0);
    if ($780) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    } else {
     $t$0$i = $779;
    }
   } else {
    $t$0$i = $775;
   }
   $781 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i,$last,$db)|0);
   $782 = ($781|0)==($t$0$i|0);
   if ($782) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$sig$i>>0] = 2;
   $783 = (($sig$i) + 1|0);
   HEAP8[$783>>0] = 40;
   $784 = (($sig$i) + 2|0);
   HEAP8[$784>>0] = 0;
   $785 = ($781|0)==($last|0);
   $$pre517$pre = (($db) + 4|0);
   L404: do {
    if ($785) {
     label = 253;
    } else {
     $786 = (($18) + 1|0);
     $787 = (($18) + 8|0);
     $788 = (($18) + 4|0);
     $789 = (($sig$i) + 4|0);
     $ref_qual$0$i$ph451 = 0;$t$1$i$ph450 = $781;
     L406: while(1) {
      $t$1$i366 = $t$1$i$ph450;
      while(1) {
       $803 = HEAP8[$t$1$i366>>0]|0;
       if ((($803<<24>>24) == 69)) {
        label = 260;
        break L406;
       } else if ((($803<<24>>24) == 118)) {
        $807 = (($t$1$i366) + 1|0);
        $t$1$i$be = $807;
       } else if ((($803<<24>>24) == 82)) {
        $809 = (($t$1$i366) + 1|0);
        $810 = ($809|0)==($last|0);
        if ($810) {
         label = 268;
        } else {
         $811 = HEAP8[$809>>0]|0;
         $812 = ($811<<24>>24)==(69);
         if ($812) {
          $ref_qual$0$i$ph$ph = 1;$t$1$i$ph$ph = $809;
          break;
         } else {
          label = 268;
         }
        }
       } else if ((($803<<24>>24) == 79)) {
        $813 = (($t$1$i366) + 1|0);
        $814 = ($813|0)==($last|0);
        if ($814) {
         label = 268;
        } else {
         $815 = HEAP8[$813>>0]|0;
         $816 = ($815<<24>>24)==(69);
         if ($816) {
          $ref_qual$0$i$ph$ph = 2;$t$1$i$ph$ph = $813;
          break;
         } else {
          label = 268;
         }
        }
       } else {
        label = 268;
       }
       if ((label|0) == 268) {
        label = 0;
        $817 = HEAP32[$$pre517$pre>>2]|0;
        $818 = HEAP32[$db>>2]|0;
        $819 = $817;
        $820 = $818;
        $821 = (($819) - ($820))|0;
        $822 = (($821|0) / 24)&-1;
        __THREW__ = 0;
        $823 = (invoke_iiii(34,($t$1$i366|0),($last|0),($db|0))|0);
        $824 = __THREW__; __THREW__ = 0;
        $825 = $824&1;
        if ($825) {
         label = 256;
         break L406;
        }
        $826 = HEAP32[$$pre517$pre>>2]|0;
        $827 = HEAP32[$db>>2]|0;
        $828 = $826;
        $829 = $827;
        $830 = (($828) - ($829))|0;
        $831 = (($830|0) / 24)&-1;
        $832 = ($823|0)==($t$1$i366|0);
        $833 = ($823|0)==($last|0);
        $or$cond$i = $832 | $833;
        if ($or$cond$i) {
         break L404;
        }
        $834 = ($822>>>0)<($831>>>0);
        if ($834) {
         $k$0$i352 = $822;
         while(1) {
          $835 = HEAP8[$sig$i>>0]|0;
          $836 = $835 & 1;
          $837 = ($836<<24>>24)==(0);
          if ($837) {
           $839 = $835&255;
           $840 = $839 >>> 1;
           $842 = $840;
          } else {
           $838 = HEAP32[$789>>2]|0;
           $842 = $838;
          }
          $841 = ($842>>>0)>(1);
          if ($841) {
           __THREW__ = 0;
           (invoke_iiii(32,($sig$i|0),(2288|0),2)|0);
           $843 = __THREW__; __THREW__ = 0;
           $844 = $843&1;
           if ($844) {
            label = 255;
            break L406;
           }
          }
          $845 = HEAP32[$db>>2]|0;
          $846 = (($845) + (($k$0$i352*24)|0)|0);
          __THREW__ = 0;
          invoke_vii(36,($18|0),($846|0));
          $847 = __THREW__; __THREW__ = 0;
          $848 = $847&1;
          if ($848) {
           label = 255;
           break L406;
          }
          $849 = HEAP8[$18>>0]|0;
          $850 = $849 & 1;
          $851 = ($850<<24>>24)==(0);
          if ($851) {
           $854 = $849&255;
           $855 = $854 >>> 1;
           $856 = $786;$857 = $855;
          } else {
           $852 = HEAP32[$787>>2]|0;
           $853 = HEAP32[$788>>2]|0;
           $856 = $852;$857 = $853;
          }
          __THREW__ = 0;
          (invoke_iiii(32,($sig$i|0),($856|0),($857|0))|0);
          $858 = __THREW__; __THREW__ = 0;
          $859 = $858&1;
          if ($859) {
           label = 284;
           break L406;
          }
          if (!($851)) {
           $860 = HEAP32[$787>>2]|0;
           _free($860);
          }
          $861 = (($k$0$i352) + 1)|0;
          $862 = ($861>>>0)<($831>>>0);
          if ($862) {
           $k$0$i352 = $861;
          } else {
           break;
          }
         }
         $$pre = HEAP32[$$pre517$pre>>2]|0;
         $867 = $$pre;$k2$0$i354 = $822;
         while(1) {
          $866 = (($867) + -24|0);
          $869 = $867;
          while(1) {
           $868 = (($869) + -24|0);
           HEAP32[$$pre517$pre>>2] = $868;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($868);
           $870 = HEAP32[$$pre517$pre>>2]|0;
           $871 = ($870|0)==($866|0);
           if ($871) {
            break;
           } else {
            $869 = $870;
           }
          }
          $872 = (($k2$0$i354) + 1)|0;
          $exitcond = ($872|0)==($831|0);
          if ($exitcond) {
           $t$1$i$be = $823;
           break;
          } else {
           $867 = $866;$k2$0$i354 = $872;
          }
         }
        } else {
         $t$1$i$be = $823;
        }
       }
       $808 = ($t$1$i$be|0)==($last|0);
       if ($808) {
        label = 253;
        break L404;
       } else {
        $t$1$i366 = $t$1$i$be;
       }
      }
      $790 = ($t$1$i$ph$ph|0)==($last|0);
      if ($790) {
       label = 253;
       break L404;
      } else {
       $ref_qual$0$i$ph451 = $ref_qual$0$i$ph$ph;$t$1$i$ph450 = $t$1$i$ph$ph;
      }
     }
     if ((label|0) == 255) {
      $797 = ___cxa_find_matching_catch()|0;
      $798 = tempRet0;
      $lpad$phi$index = $797;$lpad$phi$index10 = $798;
      label = 258;
     }
     else if ((label|0) == 256) {
      $799 = ___cxa_find_matching_catch()|0;
      $800 = tempRet0;
      $lpad$phi$index = $799;$lpad$phi$index10 = $800;
      label = 258;
     }
     else if ((label|0) == 260) {
      $804 = (($t$1$i366) + 1|0);
      __THREW__ = 0;
      (invoke_iiii(32,($sig$i|0),(2000|0),1)|0);
      $805 = __THREW__; __THREW__ = 0;
      $806 = $805&1;
      do {
       if (!($806)) {
        if ((($ref_qual$0$i$ph451|0) == 1)) {
         __THREW__ = 0;
         (invoke_iiii(32,($sig$i|0),(4072|0),2)|0);
         $873 = __THREW__; __THREW__ = 0;
         $874 = $873&1;
         if ($874) {
          break;
         }
        } else if ((($ref_qual$0$i$ph451|0) == 2)) {
         __THREW__ = 0;
         (invoke_iiii(32,($sig$i|0),(4080|0),3)|0);
         $875 = __THREW__; __THREW__ = 0;
         $876 = $875&1;
         if ($876) {
          break;
         }
        }
        $877 = HEAP32[$db>>2]|0;
        $878 = HEAP32[$$pre517$pre>>2]|0;
        $879 = ($877|0)==($878|0);
        if ($879) {
         break L404;
        }
        $880 = (($878) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(32,($880|0),(2080|0),1)|0);
        $881 = __THREW__; __THREW__ = 0;
        $882 = $881&1;
        if (!($882)) {
         $883 = HEAP32[$$pre517$pre>>2]|0;
         $884 = (($883) + -12|0);
         $885 = HEAP8[$sig$i>>0]|0;
         $886 = $885 & 1;
         $887 = ($886<<24>>24)==(0);
         if ($887) {
          $891 = $885&255;
          $892 = $891 >>> 1;
          $893 = $783;$894 = $892;
         } else {
          $888 = (($sig$i) + 8|0);
          $889 = HEAP32[$888>>2]|0;
          $890 = HEAP32[$789>>2]|0;
          $893 = $889;$894 = $890;
         }
         __THREW__ = 0;
         (invoke_iiiii(33,($884|0),0,($893|0),($894|0))|0);
         $895 = __THREW__; __THREW__ = 0;
         $896 = $895&1;
         if (!($896)) {
          $907 = HEAP8[$sig$i>>0]|0;
          $908 = $907 & 1;
          $909 = ($908<<24>>24)==(0);
          if (!($909)) {
           $910 = (($sig$i) + 8|0);
           $911 = HEAP32[$910>>2]|0;
           _free($911);
          }
          $912 = ($804|0)==($first|0);
          if ($912) {
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
          $913 = HEAP32[$db>>2]|0;
          $914 = HEAP32[$$pre517$pre>>2]|0;
          $915 = ($913|0)==($914|0);
          if ($915) {
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
          $916 = (($db) + 16|0);
          $917 = (($914) + -24|0);
          $918 = (($db) + 12|0);
          $919 = HEAP32[$918>>2]|0;
          HEAP32[$30>>2] = $919;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($29,$917,$30);
          $920 = (($db) + 20|0);
          $921 = HEAP32[$920>>2]|0;
          $922 = (($db) + 24|0);
          $923 = HEAP32[$922>>2]|0;
          $924 = ($921>>>0)<($923>>>0);
          if ($924) {
           $925 = ($921|0)==(0|0);
           if ($925) {
            $937 = 0;
           } else {
            $926 = (($921) + 4|0);
            $927 = (($29) + 12|0);
            $928 = HEAP32[$927>>2]|0;
            $929 = (($921) + 8|0);
            $930 = (($921) + 12|0);
            HEAP32[$930>>2] = $928;
            $931 = HEAP32[$29>>2]|0;
            HEAP32[$921>>2] = $931;
            $932 = (($29) + 4|0);
            $933 = HEAP32[$932>>2]|0;
            HEAP32[$926>>2] = $933;
            $934 = (($29) + 8|0);
            $935 = HEAP32[$934>>2]|0;
            HEAP32[$929>>2] = $935;
            HEAP32[$934>>2] = 0;
            HEAP32[$932>>2] = 0;
            HEAP32[$29>>2] = 0;
            $$pre$i92 = HEAP32[$920>>2]|0;
            $937 = $$pre$i92;
           }
           $936 = (($937) + 16|0);
           HEAP32[$920>>2] = $936;
          } else {
           $938 = (($db) + 28|0);
           $939 = HEAP32[$916>>2]|0;
           $940 = $921;
           $941 = $939;
           $942 = (($940) - ($941))|0;
           $943 = $942 >> 4;
           $944 = (($943) + 1)|0;
           $945 = ($944|0)<(0);
           if ($945) {
            __THREW__ = 0;
            invoke_v(41);
            $946 = __THREW__; __THREW__ = 0;
            $947 = $946&1;
            if (!($947)) {
             // unreachable;
            }
            $969 = ___cxa_find_matching_catch()|0;
            $970 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($29);
            $$10 = $969;$$1013 = $970;
            ___resumeException($$10|0);
            // unreachable;
           }
           $948 = $923;
           $949 = (($948) - ($941))|0;
           $950 = $949 >> 4;
           $951 = ($950>>>0)<(1073741823);
           if ($951) {
            $952 = $949 >> 3;
            $953 = ($952>>>0)<($944>>>0);
            $954 = $953 ? $944 : $952;
            $$0$i$i$i94 = $954;
           } else {
            $$0$i$i$i94 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i91,$$0$i$i$i94,$943,$938);
           $955 = (($__v$i$i91) + 8|0);
           $956 = HEAP32[$955>>2]|0;
           $957 = ($956|0)==(0|0);
           if (!($957)) {
            $958 = (($956) + 4|0);
            $959 = (($29) + 12|0);
            $960 = HEAP32[$959>>2]|0;
            $961 = (($956) + 8|0);
            $962 = (($956) + 12|0);
            HEAP32[$962>>2] = $960;
            $963 = HEAP32[$29>>2]|0;
            HEAP32[$956>>2] = $963;
            $964 = (($29) + 4|0);
            $965 = HEAP32[$964>>2]|0;
            HEAP32[$958>>2] = $965;
            $966 = (($29) + 8|0);
            $967 = HEAP32[$966>>2]|0;
            HEAP32[$961>>2] = $967;
            HEAP32[$966>>2] = 0;
            HEAP32[$964>>2] = 0;
            HEAP32[$29>>2] = 0;
           }
           $968 = (($956) + 16|0);
           HEAP32[$955>>2] = $968;
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($916,$__v$i$i91);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i91);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($29);
          $$0 = $804;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      } while(0);
      $801 = ___cxa_find_matching_catch()|0;
      $802 = tempRet0;
      $lpad$phi$index = $801;$lpad$phi$index10 = $802;
      label = 258;
     }
     else if ((label|0) == 284) {
      $863 = ___cxa_find_matching_catch()|0;
      $864 = tempRet0;
      if ($851) {
       $$04$i = $864;$$05$i = $863;
      } else {
       $865 = HEAP32[$787>>2]|0;
       _free($865);
       $$04$i = $864;$$05$i = $863;
      }
     }
     if ((label|0) == 258) {
      $$04$i = $lpad$phi$index10;$$05$i = $lpad$phi$index;
     }
     $902 = HEAP8[$sig$i>>0]|0;
     $903 = $902 & 1;
     $904 = ($903<<24>>24)==(0);
     if ($904) {
      ___resumeException($$05$i|0);
      // unreachable;
     }
     $905 = (($sig$i) + 8|0);
     $906 = HEAP32[$905>>2]|0;
     _free($906);
     ___resumeException($$05$i|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 253) {
    $791 = HEAP32[$$pre517$pre>>2]|0;
    $792 = (($791) + -24|0);
    $794 = $791;
    while(1) {
     $793 = (($794) + -24|0);
     HEAP32[$$pre517$pre>>2] = $793;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($793);
     $795 = HEAP32[$$pre517$pre>>2]|0;
     $796 = ($795|0)==($792|0);
     if ($796) {
      break;
     } else {
      $794 = $795;
     }
    }
   }
   $897 = HEAP8[$sig$i>>0]|0;
   $898 = $897 & 1;
   $899 = ($898<<24>>24)==(0);
   if ($899) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $900 = (($sig$i) + 8|0);
   $901 = HEAP32[$900>>2]|0;
   _free($901);
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 77:  {
   $1035 = ($235<<24>>24)==(77);
   do {
    if ($1035) {
     $1036 = (($first) + 1|0);
     $1037 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1036,$last,$db)|0);
     $1038 = ($1037|0)==($1036|0);
     if ($1038) {
      $$08$i = $first;
     } else {
      $1039 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1037,$last,$db)|0);
      $1040 = ($1039|0)==($1037|0);
      if ($1040) {
       $$08$i = $first;
      } else {
       $1041 = (($db) + 4|0);
       $1042 = HEAP32[$1041>>2]|0;
       $1043 = HEAP32[$db>>2]|0;
       $1044 = $1042;
       $1045 = $1043;
       $1046 = (($1044) - ($1045))|0;
       $1047 = (($1046|0) / 24)&-1;
       $1048 = ($1047>>>0)<(2);
       if ($1048) {
        $$08$i = $first;
       } else {
        $1049 = (($1042) + -24|0);
        ;HEAP32[$func$i+0>>2]=HEAP32[$1049+0>>2]|0;HEAP32[$func$i+4>>2]=HEAP32[$1049+4>>2]|0;HEAP32[$func$i+8>>2]=HEAP32[$1049+8>>2]|0;
        ;HEAP32[$1049+0>>2]=0|0;HEAP32[$1049+4>>2]=0|0;HEAP32[$1049+8>>2]=0|0;
        $1050 = (($func$i) + 12|0);
        $1051 = (($1042) + -12|0);
        ;HEAP32[$1050+0>>2]=HEAP32[$1051+0>>2]|0;HEAP32[$1050+4>>2]=HEAP32[$1051+4>>2]|0;HEAP32[$1050+8>>2]=HEAP32[$1051+8>>2]|0;
        ;HEAP32[$1051+0>>2]=0|0;HEAP32[$1051+4>>2]=0|0;HEAP32[$1051+8>>2]=0|0;
        $1052 = HEAP32[$1041>>2]|0;
        $1053 = (($1052) + -24|0);
        $1055 = $1052;
        while(1) {
         $1054 = (($1055) + -24|0);
         HEAP32[$1041>>2] = $1054;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1054);
         $1056 = HEAP32[$1041>>2]|0;
         $1057 = ($1056|0)==($1053|0);
         if ($1057) {
          break;
         } else {
          $1055 = $1056;
         }
        }
        $1058 = (($1052) + -48|0);
        ;HEAP32[$class_type$i+0>>2]=HEAP32[$1058+0>>2]|0;HEAP32[$class_type$i+4>>2]=HEAP32[$1058+4>>2]|0;HEAP32[$class_type$i+8>>2]=HEAP32[$1058+8>>2]|0;
        ;HEAP32[$1058+0>>2]=0|0;HEAP32[$1058+4>>2]=0|0;HEAP32[$1058+8>>2]=0|0;
        $1059 = (($class_type$i) + 12|0);
        $1060 = (($1052) + -36|0);
        ;HEAP32[$1059+0>>2]=HEAP32[$1060+0>>2]|0;HEAP32[$1059+4>>2]=HEAP32[$1060+4>>2]|0;HEAP32[$1059+8>>2]=HEAP32[$1060+8>>2]|0;
        ;HEAP32[$1060+0>>2]=0|0;HEAP32[$1060+4>>2]=0|0;HEAP32[$1060+8>>2]=0|0;
        $1061 = HEAP8[$1050>>0]|0;
        $1062 = $1061 & 1;
        $1063 = ($1062<<24>>24)==(0);
        if ($1063) {
         $1066 = (($1050) + 1|0);
         $1068 = $1066;
        } else {
         $1064 = (($func$i) + 20|0);
         $1065 = HEAP32[$1064>>2]|0;
         $1068 = $1065;
        }
        $1067 = HEAP8[$1068>>0]|0;
        $1069 = ($1067<<24>>24)==(40);
        $1070 = HEAP32[$1041>>2]|0;
        $1071 = (($1070) + -24|0);
        L525: do {
         if ($1069) {
          __THREW__ = 0;
          $1072 = (invoke_iiii(32,($func$i|0),(2008|0),1)|0);
          $1073 = __THREW__; __THREW__ = 0;
          $1074 = $1073&1;
          if (!($1074)) {
           ;HEAP32[$20+0>>2]=HEAP32[$1072+0>>2]|0;HEAP32[$20+4>>2]=HEAP32[$1072+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$1072+8>>2]|0;
           ;HEAP32[$1072+0>>2]=0|0;HEAP32[$1072+4>>2]=0|0;HEAP32[$1072+8>>2]=0|0;
           __THREW__ = 0;
           invoke_vii(36,($21|0),($class_type$i|0));
           $1075 = __THREW__; __THREW__ = 0;
           $1076 = $1075&1;
           if ($1076) {
            $1213 = ___cxa_find_matching_catch()|0;
            $1214 = tempRet0;
            $$2$i = $1214;$$23$i = $1213;
           } else {
            $1077 = HEAP8[$21>>0]|0;
            $1078 = $1077 & 1;
            $1079 = ($1078<<24>>24)==(0);
            if ($1079) {
             $1084 = (($21) + 1|0);
             $1085 = $1077&255;
             $1086 = $1085 >>> 1;
             $1087 = $1084;$1088 = $1086;
            } else {
             $1080 = (($21) + 8|0);
             $1081 = HEAP32[$1080>>2]|0;
             $1082 = (($21) + 4|0);
             $1083 = HEAP32[$1082>>2]|0;
             $1087 = $1081;$1088 = $1083;
            }
            __THREW__ = 0;
            $1089 = (invoke_iiii(32,($20|0),($1087|0),($1088|0))|0);
            $1090 = __THREW__; __THREW__ = 0;
            $1091 = $1090&1;
            do {
             if ($1091) {
              $1215 = ___cxa_find_matching_catch()|0;
              $1216 = tempRet0;
              $$1$i = $1216;$$12$i = $1215;
             } else {
              ;HEAP32[$19+0>>2]=HEAP32[$1089+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$1089+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$1089+8>>2]|0;
              ;HEAP32[$1089+0>>2]=0|0;HEAP32[$1089+4>>2]=0|0;HEAP32[$1089+8>>2]=0|0;
              __THREW__ = 0;
              $1092 = (invoke_iiii(32,($19|0),(4064|0),3)|0);
              $1093 = __THREW__; __THREW__ = 0;
              $1094 = $1093&1;
              if ($1094) {
               $1217 = ___cxa_find_matching_catch()|0;
               $1218 = tempRet0;
               $1219 = HEAP8[$19>>0]|0;
               $1220 = $1219 & 1;
               $1221 = ($1220<<24>>24)==(0);
               if ($1221) {
                $$1$i = $1218;$$12$i = $1217;
                break;
               }
               $1222 = (($19) + 8|0);
               $1223 = HEAP32[$1222>>2]|0;
               _free($1223);
               $$1$i = $1218;$$12$i = $1217;
               break;
              }
              $1095 = HEAP8[$1092>>0]|0;
              $1096 = (($1092) + 1|0);
              ;HEAP8[$$sroa$6191+0>>0]=HEAP8[$1096+0>>0]|0;HEAP8[$$sroa$6191+1>>0]=HEAP8[$1096+1>>0]|0;HEAP8[$$sroa$6191+2>>0]=HEAP8[$1096+2>>0]|0;HEAP8[$$sroa$6191+3>>0]=HEAP8[$1096+3>>0]|0;HEAP8[$$sroa$6191+4>>0]=HEAP8[$1096+4>>0]|0;HEAP8[$$sroa$6191+5>>0]=HEAP8[$1096+5>>0]|0;HEAP8[$$sroa$6191+6>>0]=HEAP8[$1096+6>>0]|0;
              $1097 = (($1092) + 8|0);
              $1098 = HEAP32[$1097>>2]|0;
              ;HEAP32[$1092+0>>2]=0|0;HEAP32[$1092+4>>2]=0|0;HEAP32[$1092+8>>2]=0|0;
              $1099 = HEAP8[$1071>>0]|0;
              $1100 = $1099 & 1;
              $1101 = ($1100<<24>>24)==(0);
              do {
               if ($1101) {
                $1102 = (($1071) + 1|0);
                HEAP8[$1102>>0] = 0;
                HEAP8[$1071>>0] = 0;
               } else {
                $1103 = (($1070) + -16|0);
                $1104 = HEAP32[$1103>>2]|0;
                HEAP8[$1104>>0] = 0;
                $1105 = (($1070) + -20|0);
                HEAP32[$1105>>2] = 0;
                $$pre$i$i$i$i = HEAP8[$1071>>0]|0;
                $1106 = $$pre$i$i$i$i & 1;
                $1107 = ($1106<<24>>24)==(0);
                if ($1107) {
                 $1112 = $$pre$i$i$i$i;$1121 = 10;
                } else {
                 $1108 = HEAP32[$1071>>2]|0;
                 $1109 = $1108 & -2;
                 $phitmp$i$i$i$i$i$i$i = (($1109) + -1)|0;
                 $1110 = $1108&255;
                 $1112 = $1110;$1121 = $phitmp$i$i$i$i$i$i$i;
                }
                $1111 = $1112 & 1;
                $1113 = ($1111<<24>>24)==(0);
                do {
                 if ($1113) {
                  $1114 = $1112&255;
                  $1115 = $1114 >>> 1;
                  $1116 = ($1112&255)<(22);
                  if ($1116) {
                   $1120 = 10;$1140 = $1115;$3301 = 1;
                   break;
                  }
                  $1117 = (($1115) + 16)|0;
                  $1118 = $1117 & 240;
                  $phitmp$i2$i$i$i$i$i$i = (($1118) + -1)|0;
                  $1120 = $phitmp$i2$i$i$i$i$i$i;$1140 = $1115;$3301 = 1;
                 } else {
                  $1120 = 10;$1140 = 0;$3301 = 0;
                 }
                } while(0);
                $1119 = ($1120|0)==($1121|0);
                if ($1119) {
                 break;
                }
                $1122 = ($1120|0)==(10);
                if ($1122) {
                 $1127 = (($1071) + 1|0);
                 $1128 = HEAP32[$1103>>2]|0;
                 if ($3301) {
                  $1129 = $1112&255;
                  $1130 = $1129 >>> 1;
                  $1131 = (($1130) + 1)|0;
                  _memcpy(($1127|0),($1128|0),($1131|0))|0;
                  _free($1128);
                 } else {
                  $1136 = HEAP8[$1128>>0]|0;
                  HEAP8[$1127>>0] = $1136;
                  _free($1128);
                 }
                 $1141 = $1140 << 1;
                 $1142 = $1141&255;
                 HEAP8[$1071>>0] = $1142;
                 break;
                }
                $1123 = ($1120>>>0)<=($1121>>>0);
                $1124 = (($1120) + 1)|0;
                $1125 = (_malloc($1124)|0);
                $1126 = ($1125|0)==(0|0);
                $or$cond$i$i$i$i$i$i = $1123 & $1126;
                if ($or$cond$i$i$i$i$i$i) {
                 break;
                }
                if ($3301) {
                 $1132 = (($1071) + 1|0);
                 $1133 = $1112&255;
                 $1134 = $1133 >>> 1;
                 $1135 = (($1134) + 1)|0;
                 _memcpy(($1125|0),($1132|0),($1135|0))|0;
                } else {
                 $1137 = HEAP32[$1103>>2]|0;
                 $1138 = HEAP8[$1137>>0]|0;
                 HEAP8[$1125>>0] = $1138;
                 _free($1137);
                }
                $1139 = $1124 | 1;
                HEAP32[$1071>>2] = $1139;
                HEAP32[$1105>>2] = $1140;
                HEAP32[$1103>>2] = $1125;
               }
              } while(0);
              $1143 = (($1070) + -24|0);
              HEAP8[$1143>>0] = $1095;
              $1144 = (($1070) + -23|0);
              ;HEAP8[$1144+0>>0]=HEAP8[$$sroa$6191+0>>0]|0;HEAP8[$1144+1>>0]=HEAP8[$$sroa$6191+1>>0]|0;HEAP8[$1144+2>>0]=HEAP8[$$sroa$6191+2>>0]|0;HEAP8[$1144+3>>0]=HEAP8[$$sroa$6191+3>>0]|0;HEAP8[$1144+4>>0]=HEAP8[$$sroa$6191+4>>0]|0;HEAP8[$1144+5>>0]=HEAP8[$$sroa$6191+5>>0]|0;HEAP8[$1144+6>>0]=HEAP8[$$sroa$6191+6>>0]|0;
              $1145 = (($1070) + -16|0);
              HEAP32[$1145>>2] = $1098;
              ;HEAP8[$$sroa$6191+0>>0]=0|0;HEAP8[$$sroa$6191+1>>0]=0|0;HEAP8[$$sroa$6191+2>>0]=0|0;HEAP8[$$sroa$6191+3>>0]=0|0;HEAP8[$$sroa$6191+4>>0]=0|0;HEAP8[$$sroa$6191+5>>0]=0|0;HEAP8[$$sroa$6191+6>>0]=0|0;
              $$pre205 = HEAP8[$19>>0]|0;
              $phitmp223 = $$pre205 & 1;
              $phitmp224 = ($phitmp223<<24>>24)==(0);
              if (!($phitmp224)) {
               $1146 = (($19) + 8|0);
               $1147 = HEAP32[$1146>>2]|0;
               _free($1147);
              }
              if (!($1079)) {
               $1148 = (($21) + 8|0);
               $1149 = HEAP32[$1148>>2]|0;
               _free($1149);
              }
              $1150 = HEAP8[$20>>0]|0;
              $1151 = $1150 & 1;
              $1152 = ($1151<<24>>24)==(0);
              if (!($1152)) {
               $1153 = (($20) + 8|0);
               $1154 = HEAP32[$1153>>2]|0;
               _free($1154);
              }
              $1155 = HEAP32[$1041>>2]|0;
              __THREW__ = 0;
              $1156 = (invoke_iiiii(33,($1050|0),0,(2000|0),1)|0);
              $1157 = __THREW__; __THREW__ = 0;
              $1158 = $1157&1;
              if ($1158) {
               break L525;
              }
              $1159 = HEAP8[$1156>>0]|0;
              $1160 = (($1156) + 1|0);
              ;HEAP8[$$sroa$6188+0>>0]=HEAP8[$1160+0>>0]|0;HEAP8[$$sroa$6188+1>>0]=HEAP8[$1160+1>>0]|0;HEAP8[$$sroa$6188+2>>0]=HEAP8[$1160+2>>0]|0;HEAP8[$$sroa$6188+3>>0]=HEAP8[$1160+3>>0]|0;HEAP8[$$sroa$6188+4>>0]=HEAP8[$1160+4>>0]|0;HEAP8[$$sroa$6188+5>>0]=HEAP8[$1160+5>>0]|0;HEAP8[$$sroa$6188+6>>0]=HEAP8[$1160+6>>0]|0;
              $1161 = (($1156) + 8|0);
              $1162 = HEAP32[$1161>>2]|0;
              ;HEAP32[$1156+0>>2]=0|0;HEAP32[$1156+4>>2]=0|0;HEAP32[$1156+8>>2]=0|0;
              $1163 = (($1155) + -12|0);
              $1164 = HEAP8[$1163>>0]|0;
              $1165 = $1164 & 1;
              $1166 = ($1165<<24>>24)==(0);
              do {
               if ($1166) {
                $1167 = (($1163) + 1|0);
                HEAP8[$1167>>0] = 0;
                HEAP8[$1163>>0] = 0;
               } else {
                $1168 = (($1155) + -4|0);
                $1169 = HEAP32[$1168>>2]|0;
                HEAP8[$1169>>0] = 0;
                $1170 = (($1155) + -8|0);
                HEAP32[$1170>>2] = 0;
                $$pre$i$i$i12$i = HEAP8[$1163>>0]|0;
                $1171 = $$pre$i$i$i12$i & 1;
                $1172 = ($1171<<24>>24)==(0);
                if ($1172) {
                 $1177 = $$pre$i$i$i12$i;$1186 = 10;
                } else {
                 $1173 = HEAP32[$1163>>2]|0;
                 $1174 = $1173 & -2;
                 $phitmp$i$i$i$i$i$i14$i = (($1174) + -1)|0;
                 $1175 = $1173&255;
                 $1177 = $1175;$1186 = $phitmp$i$i$i$i$i$i14$i;
                }
                $1176 = $1177 & 1;
                $1178 = ($1176<<24>>24)==(0);
                do {
                 if ($1178) {
                  $1179 = $1177&255;
                  $1180 = $1179 >>> 1;
                  $1181 = ($1177&255)<(22);
                  if ($1181) {
                   $1185 = 10;$1205 = $1180;$3302 = 1;
                   break;
                  }
                  $1182 = (($1180) + 16)|0;
                  $1183 = $1182 & 240;
                  $phitmp$i2$i$i$i$i$i17$i = (($1183) + -1)|0;
                  $1185 = $phitmp$i2$i$i$i$i$i17$i;$1205 = $1180;$3302 = 1;
                 } else {
                  $1185 = 10;$1205 = 0;$3302 = 0;
                 }
                } while(0);
                $1184 = ($1185|0)==($1186|0);
                if ($1184) {
                 break;
                }
                $1187 = ($1185|0)==(10);
                if ($1187) {
                 $1192 = (($1163) + 1|0);
                 $1193 = HEAP32[$1168>>2]|0;
                 if ($3302) {
                  $1194 = $1177&255;
                  $1195 = $1194 >>> 1;
                  $1196 = (($1195) + 1)|0;
                  _memcpy(($1192|0),($1193|0),($1196|0))|0;
                  _free($1193);
                 } else {
                  $1201 = HEAP8[$1193>>0]|0;
                  HEAP8[$1192>>0] = $1201;
                  _free($1193);
                 }
                 $1206 = $1205 << 1;
                 $1207 = $1206&255;
                 HEAP8[$1163>>0] = $1207;
                 break;
                }
                $1188 = ($1185>>>0)<=($1186>>>0);
                $1189 = (($1185) + 1)|0;
                $1190 = (_malloc($1189)|0);
                $1191 = ($1190|0)==(0|0);
                $or$cond$i$i$i$i$i19$i = $1188 & $1191;
                if ($or$cond$i$i$i$i$i19$i) {
                 break;
                }
                if ($3302) {
                 $1197 = (($1163) + 1|0);
                 $1198 = $1177&255;
                 $1199 = $1198 >>> 1;
                 $1200 = (($1199) + 1)|0;
                 _memcpy(($1190|0),($1197|0),($1200|0))|0;
                } else {
                 $1202 = HEAP32[$1168>>2]|0;
                 $1203 = HEAP8[$1202>>0]|0;
                 HEAP8[$1190>>0] = $1203;
                 _free($1202);
                }
                $1204 = $1189 | 1;
                HEAP32[$1163>>2] = $1204;
                HEAP32[$1170>>2] = $1205;
                HEAP32[$1168>>2] = $1190;
               }
              } while(0);
              $1208 = (($1155) + -12|0);
              HEAP8[$1208>>0] = $1159;
              $1209 = (($1155) + -11|0);
              ;HEAP8[$1209+0>>0]=HEAP8[$$sroa$6188+0>>0]|0;HEAP8[$1209+1>>0]=HEAP8[$$sroa$6188+1>>0]|0;HEAP8[$1209+2>>0]=HEAP8[$$sroa$6188+2>>0]|0;HEAP8[$1209+3>>0]=HEAP8[$$sroa$6188+3>>0]|0;HEAP8[$1209+4>>0]=HEAP8[$$sroa$6188+4>>0]|0;HEAP8[$1209+5>>0]=HEAP8[$$sroa$6188+5>>0]|0;HEAP8[$1209+6>>0]=HEAP8[$$sroa$6188+6>>0]|0;
              $1210 = (($1155) + -4|0);
              HEAP32[$1210>>2] = $1162;
              ;HEAP8[$$sroa$6188+0>>0]=0|0;HEAP8[$$sroa$6188+1>>0]=0|0;HEAP8[$$sroa$6188+2>>0]=0|0;HEAP8[$$sroa$6188+3>>0]=0|0;HEAP8[$$sroa$6188+4>>0]=0|0;HEAP8[$$sroa$6188+5>>0]=0|0;HEAP8[$$sroa$6188+6>>0]=0|0;
              label = 465;
              break L525;
             }
            } while(0);
            if ($1079) {
             $$2$i = $$1$i;$$23$i = $$12$i;
            } else {
             $1224 = (($21) + 8|0);
             $1225 = HEAP32[$1224>>2]|0;
             _free($1225);
             $$2$i = $$1$i;$$23$i = $$12$i;
            }
           }
           $1226 = HEAP8[$20>>0]|0;
           $1227 = $1226 & 1;
           $1228 = ($1227<<24>>24)==(0);
           if ($1228) {
            $$6$i = $$2$i;$$67$i = $$23$i;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
            ___resumeException($$67$i|0);
            // unreachable;
           }
           $1229 = (($20) + 8|0);
           $1230 = HEAP32[$1229>>2]|0;
           _free($1230);
           $$6$i = $$2$i;$$67$i = $$23$i;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
           ___resumeException($$67$i|0);
           // unreachable;
          }
         } else {
          __THREW__ = 0;
          $1231 = (invoke_iiii(32,($func$i|0),(2080|0),1)|0);
          $1232 = __THREW__; __THREW__ = 0;
          $1233 = $1232&1;
          if (!($1233)) {
           ;HEAP32[$23+0>>2]=HEAP32[$1231+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$1231+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$1231+8>>2]|0;
           ;HEAP32[$1231+0>>2]=0|0;HEAP32[$1231+4>>2]=0|0;HEAP32[$1231+8>>2]=0|0;
           __THREW__ = 0;
           invoke_vii(36,($24|0),($class_type$i|0));
           $1234 = __THREW__; __THREW__ = 0;
           $1235 = $1234&1;
           if ($1235) {
            $1360 = ___cxa_find_matching_catch()|0;
            $1361 = tempRet0;
            $$5$i = $1361;$$56$i = $1360;
           } else {
            $1236 = HEAP8[$24>>0]|0;
            $1237 = $1236 & 1;
            $1238 = ($1237<<24>>24)==(0);
            if ($1238) {
             $1243 = (($24) + 1|0);
             $1244 = $1236&255;
             $1245 = $1244 >>> 1;
             $1246 = $1243;$1247 = $1245;
            } else {
             $1239 = (($24) + 8|0);
             $1240 = HEAP32[$1239>>2]|0;
             $1241 = (($24) + 4|0);
             $1242 = HEAP32[$1241>>2]|0;
             $1246 = $1240;$1247 = $1242;
            }
            __THREW__ = 0;
            $1248 = (invoke_iiii(32,($23|0),($1246|0),($1247|0))|0);
            $1249 = __THREW__; __THREW__ = 0;
            $1250 = $1249&1;
            do {
             if ($1250) {
              $1362 = ___cxa_find_matching_catch()|0;
              $1363 = tempRet0;
              $$4$i = $1363;$$45$i = $1362;
             } else {
              ;HEAP32[$22+0>>2]=HEAP32[$1248+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$1248+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$1248+8>>2]|0;
              ;HEAP32[$1248+0>>2]=0|0;HEAP32[$1248+4>>2]=0|0;HEAP32[$1248+8>>2]=0|0;
              __THREW__ = 0;
              $1251 = (invoke_iiii(32,($22|0),(4064|0),3)|0);
              $1252 = __THREW__; __THREW__ = 0;
              $1253 = $1252&1;
              if ($1253) {
               $1364 = ___cxa_find_matching_catch()|0;
               $1365 = tempRet0;
               $1366 = HEAP8[$22>>0]|0;
               $1367 = $1366 & 1;
               $1368 = ($1367<<24>>24)==(0);
               if ($1368) {
                $$4$i = $1365;$$45$i = $1364;
                break;
               }
               $1369 = (($22) + 8|0);
               $1370 = HEAP32[$1369>>2]|0;
               _free($1370);
               $$4$i = $1365;$$45$i = $1364;
               break;
              }
              $1254 = HEAP8[$1251>>0]|0;
              $1255 = (($1251) + 1|0);
              ;HEAP8[$$sroa$6+0>>0]=HEAP8[$1255+0>>0]|0;HEAP8[$$sroa$6+1>>0]=HEAP8[$1255+1>>0]|0;HEAP8[$$sroa$6+2>>0]=HEAP8[$1255+2>>0]|0;HEAP8[$$sroa$6+3>>0]=HEAP8[$1255+3>>0]|0;HEAP8[$$sroa$6+4>>0]=HEAP8[$1255+4>>0]|0;HEAP8[$$sroa$6+5>>0]=HEAP8[$1255+5>>0]|0;HEAP8[$$sroa$6+6>>0]=HEAP8[$1255+6>>0]|0;
              $1256 = (($1251) + 8|0);
              $1257 = HEAP32[$1256>>2]|0;
              ;HEAP32[$1251+0>>2]=0|0;HEAP32[$1251+4>>2]=0|0;HEAP32[$1251+8>>2]=0|0;
              $1258 = HEAP8[$1071>>0]|0;
              $1259 = $1258 & 1;
              $1260 = ($1259<<24>>24)==(0);
              do {
               if ($1260) {
                $1261 = (($1071) + 1|0);
                HEAP8[$1261>>0] = 0;
                HEAP8[$1071>>0] = 0;
               } else {
                $1262 = (($1070) + -16|0);
                $1263 = HEAP32[$1262>>2]|0;
                HEAP8[$1263>>0] = 0;
                $1264 = (($1070) + -20|0);
                HEAP32[$1264>>2] = 0;
                $$pre$i$i$i32$i = HEAP8[$1071>>0]|0;
                $1265 = $$pre$i$i$i32$i & 1;
                $1266 = ($1265<<24>>24)==(0);
                if ($1266) {
                 $1271 = $$pre$i$i$i32$i;$1280 = 10;
                } else {
                 $1267 = HEAP32[$1071>>2]|0;
                 $1268 = $1267 & -2;
                 $phitmp$i$i$i$i$i$i34$i = (($1268) + -1)|0;
                 $1269 = $1267&255;
                 $1271 = $1269;$1280 = $phitmp$i$i$i$i$i$i34$i;
                }
                $1270 = $1271 & 1;
                $1272 = ($1270<<24>>24)==(0);
                do {
                 if ($1272) {
                  $1273 = $1271&255;
                  $1274 = $1273 >>> 1;
                  $1275 = ($1271&255)<(22);
                  if ($1275) {
                   $1279 = 10;$1299 = $1274;$3303 = 1;
                   break;
                  }
                  $1276 = (($1274) + 16)|0;
                  $1277 = $1276 & 240;
                  $phitmp$i2$i$i$i$i$i37$i = (($1277) + -1)|0;
                  $1279 = $phitmp$i2$i$i$i$i$i37$i;$1299 = $1274;$3303 = 1;
                 } else {
                  $1279 = 10;$1299 = 0;$3303 = 0;
                 }
                } while(0);
                $1278 = ($1279|0)==($1280|0);
                if ($1278) {
                 break;
                }
                $1281 = ($1279|0)==(10);
                if ($1281) {
                 $1286 = (($1071) + 1|0);
                 $1287 = HEAP32[$1262>>2]|0;
                 if ($3303) {
                  $1288 = $1271&255;
                  $1289 = $1288 >>> 1;
                  $1290 = (($1289) + 1)|0;
                  _memcpy(($1286|0),($1287|0),($1290|0))|0;
                  _free($1287);
                 } else {
                  $1295 = HEAP8[$1287>>0]|0;
                  HEAP8[$1286>>0] = $1295;
                  _free($1287);
                 }
                 $1300 = $1299 << 1;
                 $1301 = $1300&255;
                 HEAP8[$1071>>0] = $1301;
                 break;
                }
                $1282 = ($1279>>>0)<=($1280>>>0);
                $1283 = (($1279) + 1)|0;
                $1284 = (_malloc($1283)|0);
                $1285 = ($1284|0)==(0|0);
                $or$cond$i$i$i$i$i39$i = $1282 & $1285;
                if ($or$cond$i$i$i$i$i39$i) {
                 break;
                }
                if ($3303) {
                 $1291 = (($1071) + 1|0);
                 $1292 = $1271&255;
                 $1293 = $1292 >>> 1;
                 $1294 = (($1293) + 1)|0;
                 _memcpy(($1284|0),($1291|0),($1294|0))|0;
                } else {
                 $1296 = HEAP32[$1262>>2]|0;
                 $1297 = HEAP8[$1296>>0]|0;
                 HEAP8[$1284>>0] = $1297;
                 _free($1296);
                }
                $1298 = $1283 | 1;
                HEAP32[$1071>>2] = $1298;
                HEAP32[$1264>>2] = $1299;
                HEAP32[$1262>>2] = $1284;
               }
              } while(0);
              $1302 = (($1070) + -24|0);
              HEAP8[$1302>>0] = $1254;
              $1303 = (($1070) + -23|0);
              ;HEAP8[$1303+0>>0]=HEAP8[$$sroa$6+0>>0]|0;HEAP8[$1303+1>>0]=HEAP8[$$sroa$6+1>>0]|0;HEAP8[$1303+2>>0]=HEAP8[$$sroa$6+2>>0]|0;HEAP8[$1303+3>>0]=HEAP8[$$sroa$6+3>>0]|0;HEAP8[$1303+4>>0]=HEAP8[$$sroa$6+4>>0]|0;HEAP8[$1303+5>>0]=HEAP8[$$sroa$6+5>>0]|0;HEAP8[$1303+6>>0]=HEAP8[$$sroa$6+6>>0]|0;
              $1304 = (($1070) + -16|0);
              HEAP32[$1304>>2] = $1257;
              ;HEAP8[$$sroa$6+0>>0]=0|0;HEAP8[$$sroa$6+1>>0]=0|0;HEAP8[$$sroa$6+2>>0]=0|0;HEAP8[$$sroa$6+3>>0]=0|0;HEAP8[$$sroa$6+4>>0]=0|0;HEAP8[$$sroa$6+5>>0]=0|0;HEAP8[$$sroa$6+6>>0]=0|0;
              $$pre206 = HEAP8[$22>>0]|0;
              $phitmp221 = $$pre206 & 1;
              $phitmp222 = ($phitmp221<<24>>24)==(0);
              if (!($phitmp222)) {
               $1305 = (($22) + 8|0);
               $1306 = HEAP32[$1305>>2]|0;
               _free($1306);
              }
              if (!($1238)) {
               $1307 = (($24) + 8|0);
               $1308 = HEAP32[$1307>>2]|0;
               _free($1308);
              }
              $1309 = HEAP8[$23>>0]|0;
              $1310 = $1309 & 1;
              $1311 = ($1310<<24>>24)==(0);
              if (!($1311)) {
               $1312 = (($23) + 8|0);
               $1313 = HEAP32[$1312>>2]|0;
               _free($1313);
              }
              $1314 = HEAP32[$1041>>2]|0;
              $1315 = (($1314) + -12|0);
              $1316 = HEAP8[$1315>>0]|0;
              $1317 = $1316 & 1;
              $1318 = ($1317<<24>>24)==(0);
              do {
               if ($1318) {
                $1319 = (($1315) + 1|0);
                HEAP8[$1319>>0] = 0;
                HEAP8[$1315>>0] = 0;
               } else {
                $1320 = (($1314) + -4|0);
                $1321 = HEAP32[$1320>>2]|0;
                HEAP8[$1321>>0] = 0;
                $1322 = (($1314) + -8|0);
                HEAP32[$1322>>2] = 0;
                $$pre$i$i$i48$i = HEAP8[$1315>>0]|0;
                $1323 = $$pre$i$i$i48$i & 1;
                $1324 = ($1323<<24>>24)==(0);
                if ($1324) {
                 $1329 = $$pre$i$i$i48$i;$1338 = 10;
                } else {
                 $1325 = HEAP32[$1315>>2]|0;
                 $1326 = $1325 & -2;
                 $phitmp$i$i$i$i$i$i50$i = (($1326) + -1)|0;
                 $1327 = $1325&255;
                 $1329 = $1327;$1338 = $phitmp$i$i$i$i$i$i50$i;
                }
                $1328 = $1329 & 1;
                $1330 = ($1328<<24>>24)==(0);
                do {
                 if ($1330) {
                  $1331 = $1329&255;
                  $1332 = $1331 >>> 1;
                  $1333 = ($1329&255)<(22);
                  if ($1333) {
                   $1337 = 10;$1357 = $1332;$3304 = 1;
                   break;
                  }
                  $1334 = (($1332) + 16)|0;
                  $1335 = $1334 & 240;
                  $phitmp$i2$i$i$i$i$i53$i = (($1335) + -1)|0;
                  $1337 = $phitmp$i2$i$i$i$i$i53$i;$1357 = $1332;$3304 = 1;
                 } else {
                  $1337 = 10;$1357 = 0;$3304 = 0;
                 }
                } while(0);
                $1336 = ($1337|0)==($1338|0);
                if ($1336) {
                 break;
                }
                $1339 = ($1337|0)==(10);
                if ($1339) {
                 $1344 = (($1315) + 1|0);
                 $1345 = HEAP32[$1320>>2]|0;
                 if ($3304) {
                  $1346 = $1329&255;
                  $1347 = $1346 >>> 1;
                  $1348 = (($1347) + 1)|0;
                  _memcpy(($1344|0),($1345|0),($1348|0))|0;
                  _free($1345);
                 } else {
                  $1353 = HEAP8[$1345>>0]|0;
                  HEAP8[$1344>>0] = $1353;
                  _free($1345);
                 }
                 $1358 = $1357 << 1;
                 $1359 = $1358&255;
                 HEAP8[$1315>>0] = $1359;
                 break;
                }
                $1340 = ($1337>>>0)<=($1338>>>0);
                $1341 = (($1337) + 1)|0;
                $1342 = (_malloc($1341)|0);
                $1343 = ($1342|0)==(0|0);
                $or$cond$i$i$i$i$i55$i = $1340 & $1343;
                if ($or$cond$i$i$i$i$i55$i) {
                 break;
                }
                if ($3304) {
                 $1349 = (($1315) + 1|0);
                 $1350 = $1329&255;
                 $1351 = $1350 >>> 1;
                 $1352 = (($1351) + 1)|0;
                 _memcpy(($1342|0),($1349|0),($1352|0))|0;
                } else {
                 $1354 = HEAP32[$1320>>2]|0;
                 $1355 = HEAP8[$1354>>0]|0;
                 HEAP8[$1342>>0] = $1355;
                 _free($1354);
                }
                $1356 = $1341 | 1;
                HEAP32[$1315>>2] = $1356;
                HEAP32[$1322>>2] = $1357;
                HEAP32[$1320>>2] = $1342;
               }
              } while(0);
              ;HEAP32[$1315+0>>2]=HEAP32[$1050+0>>2]|0;HEAP32[$1315+4>>2]=HEAP32[$1050+4>>2]|0;HEAP32[$1315+8>>2]=HEAP32[$1050+8>>2]|0;
              ;HEAP32[$1050+0>>2]=0|0;HEAP32[$1050+4>>2]=0|0;HEAP32[$1050+8>>2]=0|0;
              label = 465;
              break L525;
             }
            } while(0);
            if ($1238) {
             $$5$i = $$4$i;$$56$i = $$45$i;
            } else {
             $1371 = (($24) + 8|0);
             $1372 = HEAP32[$1371>>2]|0;
             _free($1372);
             $$5$i = $$4$i;$$56$i = $$45$i;
            }
           }
           $1373 = HEAP8[$23>>0]|0;
           $1374 = $1373 & 1;
           $1375 = ($1374<<24>>24)==(0);
           if ($1375) {
            $$6$i = $$5$i;$$67$i = $$56$i;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
            ___resumeException($$67$i|0);
            // unreachable;
           }
           $1376 = (($23) + 8|0);
           $1377 = HEAP32[$1376>>2]|0;
           _free($1377);
           $$6$i = $$5$i;$$67$i = $$56$i;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
           ___resumeException($$67$i|0);
           // unreachable;
          }
         }
        } while(0);
        if ((label|0) == 465) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
         $$08$i = $1039;
         break;
        }
        $1211 = ___cxa_find_matching_catch()|0;
        $1212 = tempRet0;
        $$6$i = $1212;$$67$i = $1211;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
        ___resumeException($$67$i|0);
        // unreachable;
       }
      }
     }
    } else {
     $$08$i = $first;
    }
   } while(0);
   $1378 = ($$08$i|0)==($first|0);
   if ($1378) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1379 = HEAP32[$db>>2]|0;
   $1380 = (($db) + 4|0);
   $1381 = HEAP32[$1380>>2]|0;
   $1382 = ($1379|0)==($1381|0);
   if ($1382) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1383 = (($db) + 16|0);
   $1384 = (($1381) + -24|0);
   $1385 = (($db) + 12|0);
   $1386 = HEAP32[$1385>>2]|0;
   HEAP32[$34>>2] = $1386;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($33,$1384,$34);
   $1387 = (($db) + 20|0);
   $1388 = HEAP32[$1387>>2]|0;
   $1389 = (($db) + 24|0);
   $1390 = HEAP32[$1389>>2]|0;
   $1391 = ($1388>>>0)<($1390>>>0);
   if ($1391) {
    $1392 = ($1388|0)==(0|0);
    if ($1392) {
     $1404 = 0;
    } else {
     $1393 = (($1388) + 4|0);
     $1394 = (($33) + 12|0);
     $1395 = HEAP32[$1394>>2]|0;
     $1396 = (($1388) + 8|0);
     $1397 = (($1388) + 12|0);
     HEAP32[$1397>>2] = $1395;
     $1398 = HEAP32[$33>>2]|0;
     HEAP32[$1388>>2] = $1398;
     $1399 = (($33) + 4|0);
     $1400 = HEAP32[$1399>>2]|0;
     HEAP32[$1393>>2] = $1400;
     $1401 = (($33) + 8|0);
     $1402 = HEAP32[$1401>>2]|0;
     HEAP32[$1396>>2] = $1402;
     HEAP32[$1401>>2] = 0;
     HEAP32[$1399>>2] = 0;
     HEAP32[$33>>2] = 0;
     $$pre$i108 = HEAP32[$1387>>2]|0;
     $1404 = $$pre$i108;
    }
    $1403 = (($1404) + 16|0);
    HEAP32[$1387>>2] = $1403;
   } else {
    $1405 = (($db) + 28|0);
    $1406 = HEAP32[$1383>>2]|0;
    $1407 = $1388;
    $1408 = $1406;
    $1409 = (($1407) - ($1408))|0;
    $1410 = $1409 >> 4;
    $1411 = (($1410) + 1)|0;
    $1412 = ($1411|0)<(0);
    if ($1412) {
     __THREW__ = 0;
     invoke_v(41);
     $1413 = __THREW__; __THREW__ = 0;
     $1414 = $1413&1;
     if (!($1414)) {
      // unreachable;
     }
     $1436 = ___cxa_find_matching_catch()|0;
     $1437 = tempRet0;
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($33);
     $$10 = $1436;$$1013 = $1437;
     ___resumeException($$10|0);
     // unreachable;
    }
    $1415 = $1390;
    $1416 = (($1415) - ($1408))|0;
    $1417 = $1416 >> 4;
    $1418 = ($1417>>>0)<(1073741823);
    if ($1418) {
     $1419 = $1416 >> 3;
     $1420 = ($1419>>>0)<($1411>>>0);
     $1421 = $1420 ? $1411 : $1419;
     $$0$i$i$i110 = $1421;
    } else {
     $$0$i$i$i110 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i107,$$0$i$i$i110,$1410,$1405);
    $1422 = (($__v$i$i107) + 8|0);
    $1423 = HEAP32[$1422>>2]|0;
    $1424 = ($1423|0)==(0|0);
    if (!($1424)) {
     $1425 = (($1423) + 4|0);
     $1426 = (($33) + 12|0);
     $1427 = HEAP32[$1426>>2]|0;
     $1428 = (($1423) + 8|0);
     $1429 = (($1423) + 12|0);
     HEAP32[$1429>>2] = $1427;
     $1430 = HEAP32[$33>>2]|0;
     HEAP32[$1423>>2] = $1430;
     $1431 = (($33) + 4|0);
     $1432 = HEAP32[$1431>>2]|0;
     HEAP32[$1425>>2] = $1432;
     $1433 = (($33) + 8|0);
     $1434 = HEAP32[$1433>>2]|0;
     HEAP32[$1428>>2] = $1434;
     HEAP32[$1433>>2] = 0;
     HEAP32[$1431>>2] = 0;
     HEAP32[$33>>2] = 0;
    }
    $1435 = (($1423) + 16|0);
    HEAP32[$1422>>2] = $1435;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1383,$__v$i$i107);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i107);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($33);
   $$0 = $$08$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 79:  {
   $1438 = (($db) + 4|0);
   $1439 = HEAP32[$1438>>2]|0;
   $1440 = HEAP32[$db>>2]|0;
   $1441 = $1439;
   $1442 = $1440;
   $1443 = (($1441) - ($1442))|0;
   $1444 = (($1443|0) / 24)&-1;
   $1445 = (($first) + 1|0);
   $1446 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1445,$last,$db)|0);
   $1447 = HEAP32[$1438>>2]|0;
   $1448 = HEAP32[$db>>2]|0;
   $1449 = $1447;
   $1450 = $1448;
   $1451 = (($1449) - ($1450))|0;
   $1452 = (($1451|0) / 24)&-1;
   $1453 = ($1446|0)==($1445|0);
   if ($1453) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1454 = (($db) + 16|0);
   $1455 = (($db) + 12|0);
   $1456 = HEAP32[$1455>>2]|0;
   $1457 = (($db) + 20|0);
   $1458 = HEAP32[$1457>>2]|0;
   $1459 = (($db) + 24|0);
   $1460 = HEAP32[$1459>>2]|0;
   $1461 = ($1458>>>0)<($1460>>>0);
   if ($1461) {
    $1462 = ($1458|0)==(0|0);
    if ($1462) {
     $1467 = 0;
    } else {
     HEAP32[$1458>>2] = 0;
     $1463 = (($1458) + 4|0);
     HEAP32[$1463>>2] = 0;
     $1464 = (($1458) + 8|0);
     HEAP32[$1464>>2] = 0;
     $1465 = (($1458) + 12|0);
     HEAP32[$1465>>2] = $1456;
     $$pre$i116 = HEAP32[$1457>>2]|0;
     $1467 = $$pre$i116;
    }
    $1466 = (($1467) + 16|0);
    HEAP32[$1457>>2] = $1466;
   } else {
    $1468 = (($db) + 28|0);
    $1469 = HEAP32[$1454>>2]|0;
    $1470 = $1458;
    $1471 = $1469;
    $1472 = (($1470) - ($1471))|0;
    $1473 = $1472 >> 4;
    $1474 = (($1473) + 1)|0;
    $1475 = ($1474|0)<(0);
    if ($1475) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    $1476 = $1460;
    $1477 = (($1476) - ($1471))|0;
    $1478 = $1477 >> 4;
    $1479 = ($1478>>>0)<(1073741823);
    if ($1479) {
     $1480 = $1477 >> 3;
     $1481 = ($1480>>>0)<($1474>>>0);
     $1482 = $1481 ? $1474 : $1480;
     $$0$i$i$i118 = $1482;
    } else {
     $$0$i$i$i118 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i115,$$0$i$i$i118,$1473,$1468);
    $1483 = (($__v$i$i115) + 8|0);
    $1484 = HEAP32[$1483>>2]|0;
    $1485 = ($1484|0)==(0|0);
    if (!($1485)) {
     HEAP32[$1484>>2] = 0;
     $1486 = (($1484) + 4|0);
     HEAP32[$1486>>2] = 0;
     $1487 = (($1484) + 8|0);
     HEAP32[$1487>>2] = 0;
     $1488 = (($1484) + 12|0);
     HEAP32[$1488>>2] = $1456;
    }
    $1489 = (($1484) + 16|0);
    HEAP32[$1483>>2] = $1489;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1454,$__v$i$i115);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i115);
   }
   $1490 = ($1444>>>0)<($1452>>>0);
   if (!($1490)) {
    $$0 = $1446;
    STACKTOP = sp;return ($$0|0);
   }
   $1491 = (($35) + 1|0);
   $1492 = (($__v$i$i123) + 8|0);
   $1493 = (($35) + 8|0);
   $1494 = (($35) + 4|0);
   $k5$0377 = $1444;
   while(1) {
    $1495 = HEAP32[$db>>2]|0;
    $1496 = ((($1495) + (($k5$0377*24)|0)|0) + 12|0);
    $1497 = HEAP8[$1496>>0]|0;
    $1498 = $1497 & 1;
    $1499 = ($1498<<24>>24)==(0);
    if ($1499) {
     $1504 = $1497&255;
     $1505 = $1504 >>> 1;
     $1506 = (($1496) + 1|0);
     $1508 = $1505;$1510 = $1506;
    } else {
     $1500 = ((($1495) + (($k5$0377*24)|0)|0) + 16|0);
     $1501 = HEAP32[$1500>>2]|0;
     $1502 = ((($1495) + (($k5$0377*24)|0)|0) + 20|0);
     $1503 = HEAP32[$1502>>2]|0;
     $1508 = $1501;$1510 = $1503;
    }
    $1507 = ($1508>>>0)<(2);
    $1509 = $1507 ? $1508 : 2;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($35,$1510,$1509);
    $1511 = HEAP8[$35>>0]|0;
    $1512 = $1511 & 1;
    $1513 = ($1512<<24>>24)==(0);
    if ($1513) {
     $1516 = $1511&255;
     $1517 = $1516 >>> 1;
     $1519 = $1517;$3305 = $1491;
    } else {
     $1514 = HEAP32[$1494>>2]|0;
     $1515 = HEAP32[$1493>>2]|0;
     $1519 = $1514;$3305 = $1515;
    }
    $1518 = ($1519>>>0)>(2);
    $1520 = $1518 ? 2 : $1519;
    $1521 = ($1520|0)==(0);
    L752: do {
     if ($1521) {
      label = 506;
     } else {
      $$02$i111 = $1520;$l$03$i110 = $3305;$r$04$i109 = 1984;
      while(1) {
       $1522 = HEAP8[$l$03$i110>>0]|0;
       $1523 = HEAP8[$r$04$i109>>0]|0;
       $1524 = ($1522<<24>>24)==($1523<<24>>24);
       if (!($1524)) {
        label = 507;
        break L752;
       }
       $1525 = (($$02$i111) + -1)|0;
       $1526 = (($l$03$i110) + 1|0);
       $1527 = (($r$04$i109) + 1|0);
       $1528 = ($1525|0)==(0);
       if ($1528) {
        label = 506;
        break;
       } else {
        $$02$i111 = $1525;$l$03$i110 = $1526;$r$04$i109 = $1527;
       }
      }
     }
    } while(0);
    if ((label|0) == 506) {
     label = 0;
     $1529 = ($1519>>>0)<(2);
     if ($1529) {
      label = 507;
     } else {
      if (!($1513)) {
       $1532 = HEAP32[$1493>>2]|0;
       _free($1532);
      }
      $1533 = HEAP32[$db>>2]|0;
      if ($1518) {
       $1538 = $1533;
       label = 514;
      } else {
       $1534 = (($1533) + (($k5$0377*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1534,1992,2)|0);
       $1535 = HEAP32[$db>>2]|0;
       $1536 = ((($1535) + (($k5$0377*24)|0)|0) + 12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1536,0,2000,1)|0);
      }
     }
    }
    if ((label|0) == 507) {
     label = 0;
     if (!($1513)) {
      $1530 = HEAP32[$1493>>2]|0;
      _free($1530);
     }
     $1531 = HEAP32[$db>>2]|0;
     $1538 = $1531;
     label = 514;
    }
    if ((label|0) == 514) {
     label = 0;
     $1537 = ((($1538) + (($k5$0377*24)|0)|0) + 12|0);
     $1539 = HEAP8[$1537>>0]|0;
     $1540 = $1539 & 1;
     $1541 = ($1540<<24>>24)==(0);
     if ($1541) {
      $1544 = (($1537) + 1|0);
      $1546 = $1544;
     } else {
      $1542 = ((($1538) + (($k5$0377*24)|0)|0) + 20|0);
      $1543 = HEAP32[$1542>>2]|0;
      $1546 = $1543;
     }
     $1545 = HEAP8[$1546>>0]|0;
     $1547 = ($1545<<24>>24)==(40);
     if ($1547) {
      $1548 = (($1538) + (($k5$0377*24)|0)|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1548,2008,1)|0);
      $1549 = HEAP32[$db>>2]|0;
      $1550 = ((($1549) + (($k5$0377*24)|0)|0) + 12|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1550,0,2000,1)|0);
     }
    }
    $1551 = HEAP32[$db>>2]|0;
    $1552 = (($1551) + (($k5$0377*24)|0)|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1552,2016,2)|0);
    $1553 = HEAP32[$1457>>2]|0;
    $1554 = (($1553) + -16|0);
    $1555 = HEAP32[$db>>2]|0;
    $1556 = (($1555) + (($k5$0377*24)|0)|0);
    $1557 = (($1553) + -12|0);
    $1558 = HEAP32[$1557>>2]|0;
    $1559 = (($1553) + -8|0);
    $1560 = HEAP32[$1559>>2]|0;
    $1561 = ($1558|0)==($1560|0);
    if ($1561) {
     $1576 = (($1553) + -4|0);
     $1577 = HEAP32[$1554>>2]|0;
     $1578 = $1558;
     $1579 = $1577;
     $1580 = (($1578) - ($1579))|0;
     $1581 = (($1580|0) / 24)&-1;
     $1582 = (($1581) + 1)|0;
     $1583 = ($1582|0)<(0);
     if ($1583) {
      label = 528;
      break;
     }
     $1584 = ($1581>>>0)<(1073741823);
     if ($1584) {
      $1585 = $1581 << 1;
      $1586 = ($1585>>>0)<($1582>>>0);
      $1587 = $1586 ? $1582 : $1585;
      $$0$i$i$i127 = $1587;
     } else {
      $$0$i$i$i127 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i123,$$0$i$i$i127,$1581,$1576);
     $1588 = HEAP32[$1492>>2]|0;
     $1589 = ($1588|0)==(0|0);
     if (!($1589)) {
      __THREW__ = 0;
      invoke_vii(39,($1588|0),($1556|0));
      $1590 = __THREW__; __THREW__ = 0;
      $1591 = $1590&1;
      if ($1591) {
       label = 536;
       break;
      }
      $1592 = (($1588) + 12|0);
      $1593 = ((($1555) + (($k5$0377*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($1592|0),($1593|0));
      $1594 = __THREW__; __THREW__ = 0;
      $1595 = $1594&1;
      if ($1595) {
       label = 534;
       break;
      }
     }
     $1605 = (($1588) + 24|0);
     HEAP32[$1492>>2] = $1605;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1554,$__v$i$i123);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i123);
    } else {
     $1562 = ($1558|0)==(0|0);
     if ($1562) {
      $1575 = 0;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1558,$1556);
      $1563 = (($1558) + 12|0);
      $1564 = ((($1555) + (($k5$0377*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($1563|0),($1564|0));
      $1565 = __THREW__; __THREW__ = 0;
      $1566 = $1565&1;
      if ($1566) {
       label = 523;
       break;
      }
      $$pre$i124 = HEAP32[$1557>>2]|0;
      $1575 = $$pre$i124;
     }
     $1574 = (($1575) + 24|0);
     HEAP32[$1557>>2] = $1574;
    }
    $1606 = (($k5$0377) + 1)|0;
    $1607 = ($1606>>>0)<($1452>>>0);
    if ($1607) {
     $k5$0377 = $1606;
    } else {
     $$0 = $1446;
     label = 1090;
     break;
    }
   }
   if ((label|0) == 523) {
    $1567 = ___cxa_find_matching_catch()|0;
    $1568 = tempRet0;
    $1569 = HEAP8[$1558>>0]|0;
    $1570 = $1569 & 1;
    $1571 = ($1570<<24>>24)==(0);
    if ($1571) {
     ___resumeException($1567|0);
     // unreachable;
    }
    $1572 = (($1558) + 8|0);
    $1573 = HEAP32[$1572>>2]|0;
    _free($1573);
    ___resumeException($1567|0);
    // unreachable;
   }
   else if ((label|0) == 528) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   else if ((label|0) == 534) {
    $1596 = ___cxa_find_matching_catch()|0;
    $1597 = tempRet0;
    $1598 = HEAP8[$1588>>0]|0;
    $1599 = $1598 & 1;
    $1600 = ($1599<<24>>24)==(0);
    if ($1600) {
     $eh$lpad$body$i$i130$index17Z2D = $1597;$eh$lpad$body$i$i130$indexZ2D = $1596;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i123);
     ___resumeException($eh$lpad$body$i$i130$indexZ2D|0);
     // unreachable;
    }
    $1601 = (($1588) + 8|0);
    $1602 = HEAP32[$1601>>2]|0;
    _free($1602);
    $eh$lpad$body$i$i130$index17Z2D = $1597;$eh$lpad$body$i$i130$indexZ2D = $1596;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i123);
    ___resumeException($eh$lpad$body$i$i130$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 536) {
    $1603 = ___cxa_find_matching_catch()|0;
    $1604 = tempRet0;
    $eh$lpad$body$i$i130$index17Z2D = $1604;$eh$lpad$body$i$i130$indexZ2D = $1603;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i123);
    ___resumeException($eh$lpad$body$i$i130$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 1090) {
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 80:  {
   $1608 = (($db) + 4|0);
   $1609 = HEAP32[$1608>>2]|0;
   $1610 = HEAP32[$db>>2]|0;
   $1611 = $1609;
   $1612 = $1610;
   $1613 = (($1611) - ($1612))|0;
   $1614 = (($1613|0) / 24)&-1;
   $1615 = (($first) + 1|0);
   $1616 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1615,$last,$db)|0);
   $1617 = HEAP32[$1608>>2]|0;
   $1618 = HEAP32[$db>>2]|0;
   $1619 = $1617;
   $1620 = $1618;
   $1621 = (($1619) - ($1620))|0;
   $1622 = (($1621|0) / 24)&-1;
   $1623 = ($1616|0)==($1615|0);
   if ($1623) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1624 = (($db) + 16|0);
   $1625 = (($db) + 12|0);
   $1626 = HEAP32[$1625>>2]|0;
   $1627 = (($db) + 20|0);
   $1628 = HEAP32[$1627>>2]|0;
   $1629 = (($db) + 24|0);
   $1630 = HEAP32[$1629>>2]|0;
   $1631 = ($1628>>>0)<($1630>>>0);
   if ($1631) {
    $1632 = ($1628|0)==(0|0);
    if ($1632) {
     $1637 = 0;
    } else {
     HEAP32[$1628>>2] = 0;
     $1633 = (($1628) + 4|0);
     HEAP32[$1633>>2] = 0;
     $1634 = (($1628) + 8|0);
     HEAP32[$1634>>2] = 0;
     $1635 = (($1628) + 12|0);
     HEAP32[$1635>>2] = $1626;
     $$pre$i135 = HEAP32[$1627>>2]|0;
     $1637 = $$pre$i135;
    }
    $1636 = (($1637) + 16|0);
    HEAP32[$1627>>2] = $1636;
   } else {
    $1638 = (($db) + 28|0);
    $1639 = HEAP32[$1624>>2]|0;
    $1640 = $1628;
    $1641 = $1639;
    $1642 = (($1640) - ($1641))|0;
    $1643 = $1642 >> 4;
    $1644 = (($1643) + 1)|0;
    $1645 = ($1644|0)<(0);
    if ($1645) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    $1646 = $1630;
    $1647 = (($1646) - ($1641))|0;
    $1648 = $1647 >> 4;
    $1649 = ($1648>>>0)<(1073741823);
    if ($1649) {
     $1650 = $1647 >> 3;
     $1651 = ($1650>>>0)<($1644>>>0);
     $1652 = $1651 ? $1644 : $1650;
     $$0$i$i$i137 = $1652;
    } else {
     $$0$i$i$i137 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i134,$$0$i$i$i137,$1643,$1638);
    $1653 = (($__v$i$i134) + 8|0);
    $1654 = HEAP32[$1653>>2]|0;
    $1655 = ($1654|0)==(0|0);
    if (!($1655)) {
     HEAP32[$1654>>2] = 0;
     $1656 = (($1654) + 4|0);
     HEAP32[$1656>>2] = 0;
     $1657 = (($1654) + 8|0);
     HEAP32[$1657>>2] = 0;
     $1658 = (($1654) + 12|0);
     HEAP32[$1658>>2] = $1626;
    }
    $1659 = (($1654) + 16|0);
    HEAP32[$1653>>2] = $1659;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1624,$__v$i$i134);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i134);
   }
   $1660 = ($1614>>>0)<($1622>>>0);
   if (!($1660)) {
    $$0 = $1616;
    STACKTOP = sp;return ($$0|0);
   }
   $1661 = (($36) + 1|0);
   $1662 = (($37) + 1|0);
   $1663 = (($37) + 8|0);
   $1664 = (($37) + 4|0);
   $1665 = (($__v$i$i150) + 8|0);
   $1666 = (($36) + 8|0);
   $1667 = (($36) + 4|0);
   $k8$0389 = $1614;
   while(1) {
    $1668 = HEAP32[$db>>2]|0;
    $1669 = ((($1668) + (($k8$0389*24)|0)|0) + 12|0);
    $1670 = HEAP8[$1669>>0]|0;
    $1671 = $1670 & 1;
    $1672 = ($1671<<24>>24)==(0);
    if ($1672) {
     $1677 = $1670&255;
     $1678 = $1677 >>> 1;
     $1679 = (($1669) + 1|0);
     $1681 = $1678;$1683 = $1679;
    } else {
     $1673 = ((($1668) + (($k8$0389*24)|0)|0) + 16|0);
     $1674 = HEAP32[$1673>>2]|0;
     $1675 = ((($1668) + (($k8$0389*24)|0)|0) + 20|0);
     $1676 = HEAP32[$1675>>2]|0;
     $1681 = $1674;$1683 = $1676;
    }
    $1680 = ($1681>>>0)<(2);
    $1682 = $1680 ? $1681 : 2;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($36,$1683,$1682);
    $1684 = HEAP8[$36>>0]|0;
    $1685 = $1684 & 1;
    $1686 = ($1685<<24>>24)==(0);
    if ($1686) {
     $1689 = $1684&255;
     $1690 = $1689 >>> 1;
     $1692 = $1690;$3306 = $1661;
    } else {
     $1687 = HEAP32[$1667>>2]|0;
     $1688 = HEAP32[$1666>>2]|0;
     $1692 = $1687;$3306 = $1688;
    }
    $1691 = ($1692>>>0)>(2);
    $1693 = $1691 ? 2 : $1692;
    $1694 = ($1693|0)==(0);
    L840: do {
     if ($1694) {
      label = 563;
     } else {
      $$02$i120 = $1693;$l$03$i119 = $3306;$r$04$i118 = 1984;
      while(1) {
       $1695 = HEAP8[$l$03$i119>>0]|0;
       $1696 = HEAP8[$r$04$i118>>0]|0;
       $1697 = ($1695<<24>>24)==($1696<<24>>24);
       if (!($1697)) {
        label = 564;
        break L840;
       }
       $1698 = (($$02$i120) + -1)|0;
       $1699 = (($l$03$i119) + 1|0);
       $1700 = (($r$04$i118) + 1|0);
       $1701 = ($1698|0)==(0);
       if ($1701) {
        label = 563;
        break;
       } else {
        $$02$i120 = $1698;$l$03$i119 = $1699;$r$04$i118 = $1700;
       }
      }
     }
    } while(0);
    if ((label|0) == 563) {
     label = 0;
     $1702 = ($1692>>>0)<(2);
     if ($1702) {
      label = 564;
     } else {
      if (!($1686)) {
       $1705 = HEAP32[$1666>>2]|0;
       _free($1705);
      }
      $1706 = HEAP32[$db>>2]|0;
      if ($1691) {
       $1711 = $1706;
       label = 571;
      } else {
       $1707 = (($1706) + (($k8$0389*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1707,1992,2)|0);
       $1708 = HEAP32[$db>>2]|0;
       $1709 = ((($1708) + (($k8$0389*24)|0)|0) + 12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1709,0,2000,1)|0);
      }
     }
    }
    if ((label|0) == 564) {
     label = 0;
     if (!($1686)) {
      $1703 = HEAP32[$1666>>2]|0;
      _free($1703);
     }
     $1704 = HEAP32[$db>>2]|0;
     $1711 = $1704;
     label = 571;
    }
    if ((label|0) == 571) {
     label = 0;
     $1710 = ((($1711) + (($k8$0389*24)|0)|0) + 12|0);
     $1712 = HEAP8[$1710>>0]|0;
     $1713 = $1712 & 1;
     $1714 = ($1713<<24>>24)==(0);
     if ($1714) {
      $1717 = (($1710) + 1|0);
      $1719 = $1717;
     } else {
      $1715 = ((($1711) + (($k8$0389*24)|0)|0) + 20|0);
      $1716 = HEAP32[$1715>>2]|0;
      $1719 = $1716;
     }
     $1718 = HEAP8[$1719>>0]|0;
     $1720 = ($1718<<24>>24)==(40);
     if ($1720) {
      $1721 = (($1711) + (($k8$0389*24)|0)|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1721,2008,1)|0);
      $1722 = HEAP32[$db>>2]|0;
      $1723 = ((($1722) + (($k8$0389*24)|0)|0) + 12|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1723,0,2000,1)|0);
     }
    }
    $1724 = HEAP8[$1615>>0]|0;
    $1725 = ($1724<<24>>24)==(85);
    $1726 = HEAP32[$db>>2]|0;
    $1727 = (($1726) + (($k8$0389*24)|0)|0);
    do {
     if ($1725) {
      $1728 = HEAP8[$1727>>0]|0;
      $1729 = $1728 & 1;
      $1730 = ($1729<<24>>24)==(0);
      if ($1730) {
       $1735 = $1728&255;
       $1736 = $1735 >>> 1;
       $1737 = (($1727) + 1|0);
       $1739 = $1736;$1741 = $1737;
      } else {
       $1731 = ((($1726) + (($k8$0389*24)|0)|0) + 4|0);
       $1732 = HEAP32[$1731>>2]|0;
       $1733 = ((($1726) + (($k8$0389*24)|0)|0) + 8|0);
       $1734 = HEAP32[$1733>>2]|0;
       $1739 = $1732;$1741 = $1734;
      }
      $1738 = ($1739>>>0)<(12);
      $1740 = $1738 ? $1739 : 12;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($37,$1741,$1740);
      $1742 = HEAP8[$37>>0]|0;
      $1743 = $1742 & 1;
      $1744 = ($1743<<24>>24)==(0);
      if ($1744) {
       $1747 = $1742&255;
       $1748 = $1747 >>> 1;
       $1750 = $1748;$3307 = $1662;
      } else {
       $1745 = HEAP32[$1664>>2]|0;
       $1746 = HEAP32[$1663>>2]|0;
       $1750 = $1745;$3307 = $1746;
      }
      $1749 = ($1750>>>0)>(12);
      $1751 = $1749 ? 12 : $1750;
      $1752 = ($1751|0)==(0);
      L874: do {
       if ($1752) {
        label = 587;
       } else {
        $$02$i127 = $1751;$l$03$i126 = $3307;$r$04$i125 = 2024;
        while(1) {
         $1753 = HEAP8[$l$03$i126>>0]|0;
         $1754 = HEAP8[$r$04$i125>>0]|0;
         $1755 = ($1753<<24>>24)==($1754<<24>>24);
         if (!($1755)) {
          break;
         }
         $1756 = (($$02$i127) + -1)|0;
         $1757 = (($l$03$i126) + 1|0);
         $1758 = (($r$04$i125) + 1|0);
         $1759 = ($1756|0)==(0);
         if ($1759) {
          label = 587;
          break L874;
         } else {
          $$02$i127 = $1756;$l$03$i126 = $1757;$r$04$i125 = $1758;
         }
        }
        $1760 = $1753&255;
        $1761 = $1754&255;
        $1762 = (($1760) - ($1761))|0;
        $1763 = ($1753<<24>>24)==($1754<<24>>24);
        if ($1763) {
         label = 587;
        } else {
         $1766 = $1762;
        }
       }
      } while(0);
      if ((label|0) == 587) {
       label = 0;
       $1764 = ($1750>>>0)<(12);
       $$$i$i$i$i = $1749&1;
       $$$$i$i$i$i = $1764 ? -1 : $$$i$i$i$i;
       $1766 = $$$$i$i$i$i;
      }
      $1765 = ($1766|0)==(0);
      if (!($1744)) {
       $1767 = HEAP32[$1663>>2]|0;
       _free($1767);
      }
      $1768 = HEAP32[$db>>2]|0;
      $1769 = (($1768) + (($k8$0389*24)|0)|0);
      if ($1765) {
       $1771 = HEAP8[$1769>>0]|0;
       $1772 = $1771 & 1;
       $1773 = ($1772<<24>>24)==(0);
       if ($1773) {
        $1774 = $1771&255;
        $1775 = $1774 >>> 1;
        $1776 = ($1775>>>0)<(11);
        $1777 = $1776 ? $1775 : 11;
        $1786 = $1777;$1787 = $1775;$1789 = 10;$1792 = $1771;
       } else {
        $1778 = ((($1768) + (($k8$0389*24)|0)|0) + 4|0);
        $1779 = HEAP32[$1778>>2]|0;
        $1780 = ($1779>>>0)<(11);
        $1781 = $1780 ? $1779 : 11;
        $1782 = HEAP32[$1769>>2]|0;
        $1783 = $1782 & -2;
        $phitmp$i$i$i = (($1783) + -1)|0;
        $1784 = $1782&255;
        $1786 = $1781;$1787 = $1779;$1789 = $phitmp$i$i$i;$1792 = $1784;
       }
       $1785 = (($1786) - ($1787))|0;
       $1788 = (($1785) + ($1789))|0;
       $1790 = ($1788>>>0)<(2);
       if ($1790) {
        $1826 = (2 - ($1786))|0;
        $1827 = (($1826) + ($1787))|0;
        $1828 = (($1827) - ($1789))|0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1769,$1789,$1828,$1787,0,$1786,2,2048);
        break;
       }
       $1791 = $1792 & 1;
       $1793 = ($1791<<24>>24)==(0);
       if ($1793) {
        $1796 = (($1769) + 1|0);
        $1801 = $1796;
       } else {
        $1794 = ((($1768) + (($k8$0389*24)|0)|0) + 8|0);
        $1795 = HEAP32[$1794>>2]|0;
        $1801 = $1795;
       }
       $1797 = ($1786|0)==(2);
       do {
        if ($1797) {
         $$1$i$i = 0;$$12$i$i = 2048;$$14$i$i = 2;$3308 = 2;
         label = 608;
        } else {
         $1798 = (($1787) - ($1786))|0;
         $1799 = ($1787|0)==($1786|0);
         if ($1799) {
          $$1$i$i = 0;$$12$i$i = 2048;$$14$i$i = 2;$3308 = $1786;
          label = 608;
          break;
         }
         $1800 = ($1786>>>0)>(2);
         if ($1800) {
          HEAP8[$1801>>0]=25705&255;HEAP8[$1801+1>>0]=25705>>8;
          $1802 = (($1801) + 2|0);
          $1803 = (($1801) + ($1786)|0);
          _memmove(($1802|0),($1803|0),($1798|0))|0;
          $$2$i$i = 2;$1817 = $1786;
          break;
         }
         $1804 = ($1801>>>0)<(2048>>>0);
         $1805 = (($1801) + ($1787)|0);
         $1806 = ($1805>>>0)>(2048>>>0);
         $or$cond$i$i = $1804 & $1806;
         do {
          if ($or$cond$i$i) {
           $1807 = (($1801) + ($1786)|0);
           $1808 = ($1807>>>0)>(2048>>>0);
           if ($1808) {
            _memcpy(($1801|0),(2048|0),($1786|0))|0;
            $1811 = (2 - ($1786))|0;
            $$0$i$i = $1786;$$01$i$i = ((2048 + 2|0));$$03$i$i = $1811;$1813 = 0;
            break;
           } else {
            $1809 = (2 - ($1786))|0;
            $1810 = (2048 + ($1809)|0);
            $$0$i$i = 0;$$01$i$i = $1810;$$03$i$i = 2;$1813 = $1786;
            break;
           }
          } else {
           $$0$i$i = 0;$$01$i$i = 2048;$$03$i$i = 2;$1813 = $1786;
          }
         } while(0);
         $$sum$i$i = (($$0$i$i) + ($$03$i$i))|0;
         $1812 = (($1801) + ($$sum$i$i)|0);
         $$sum1$i$i = (($$0$i$i) + ($1813))|0;
         $1814 = (($1801) + ($$sum1$i$i)|0);
         _memmove(($1812|0),($1814|0),($1798|0))|0;
         $$1$i$i = $$0$i$i;$$12$i$i = $$01$i$i;$$14$i$i = $$03$i$i;$3308 = $1813;
         label = 608;
        }
       } while(0);
       if ((label|0) == 608) {
        label = 0;
        $1815 = (($1801) + ($$1$i$i)|0);
        _memmove(($1815|0),($$12$i$i|0),($$14$i$i|0))|0;
        $$2$i$i = $$14$i$i;$1817 = $3308;
       }
       $1816 = (($$2$i$i) - ($1817))|0;
       $1818 = (($1816) + ($1787))|0;
       $1819 = HEAP8[$1769>>0]|0;
       $1820 = $1819 & 1;
       $1821 = ($1820<<24>>24)==(0);
       if ($1821) {
        $1823 = $1818 << 1;
        $1824 = $1823&255;
        HEAP8[$1769>>0] = $1824;
       } else {
        $1822 = ((($1768) + (($k8$0389*24)|0)|0) + 4|0);
        HEAP32[$1822>>2] = $1818;
       }
       $1825 = (($1801) + ($1818)|0);
       HEAP8[$1825>>0] = 0;
      } else {
       $1770 = $1769;
       label = 591;
      }
     } else {
      $1770 = $1727;
      label = 591;
     }
    } while(0);
    if ((label|0) == 591) {
     label = 0;
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1770,2040,1)|0);
    }
    $1829 = HEAP32[$1627>>2]|0;
    $1830 = (($1829) + -16|0);
    $1831 = HEAP32[$db>>2]|0;
    $1832 = (($1831) + (($k8$0389*24)|0)|0);
    $1833 = (($1829) + -12|0);
    $1834 = HEAP32[$1833>>2]|0;
    $1835 = (($1829) + -8|0);
    $1836 = HEAP32[$1835>>2]|0;
    $1837 = ($1834|0)==($1836|0);
    if ($1837) {
     $1852 = (($1829) + -4|0);
     $1853 = HEAP32[$1830>>2]|0;
     $1854 = $1834;
     $1855 = $1853;
     $1856 = (($1854) - ($1855))|0;
     $1857 = (($1856|0) / 24)&-1;
     $1858 = (($1857) + 1)|0;
     $1859 = ($1858|0)<(0);
     if ($1859) {
      label = 623;
      break;
     }
     $1860 = ($1857>>>0)<(1073741823);
     if ($1860) {
      $1861 = $1857 << 1;
      $1862 = ($1861>>>0)<($1858>>>0);
      $1863 = $1862 ? $1858 : $1861;
      $$0$i$i$i154 = $1863;
     } else {
      $$0$i$i$i154 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i150,$$0$i$i$i154,$1857,$1852);
     $1864 = HEAP32[$1665>>2]|0;
     $1865 = ($1864|0)==(0|0);
     if (!($1865)) {
      __THREW__ = 0;
      invoke_vii(39,($1864|0),($1832|0));
      $1866 = __THREW__; __THREW__ = 0;
      $1867 = $1866&1;
      if ($1867) {
       label = 631;
       break;
      }
      $1868 = (($1864) + 12|0);
      $1869 = ((($1831) + (($k8$0389*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($1868|0),($1869|0));
      $1870 = __THREW__; __THREW__ = 0;
      $1871 = $1870&1;
      if ($1871) {
       label = 629;
       break;
      }
     }
     $1881 = (($1864) + 24|0);
     HEAP32[$1665>>2] = $1881;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1830,$__v$i$i150);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i150);
    } else {
     $1838 = ($1834|0)==(0|0);
     if ($1838) {
      $1851 = 0;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1834,$1832);
      $1839 = (($1834) + 12|0);
      $1840 = ((($1831) + (($k8$0389*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($1839|0),($1840|0));
      $1841 = __THREW__; __THREW__ = 0;
      $1842 = $1841&1;
      if ($1842) {
       label = 618;
       break;
      }
      $$pre$i151 = HEAP32[$1833>>2]|0;
      $1851 = $$pre$i151;
     }
     $1850 = (($1851) + 24|0);
     HEAP32[$1833>>2] = $1850;
    }
    $1882 = (($k8$0389) + 1)|0;
    $1883 = ($1882>>>0)<($1622>>>0);
    if ($1883) {
     $k8$0389 = $1882;
    } else {
     $$0 = $1616;
     label = 1090;
     break;
    }
   }
   if ((label|0) == 618) {
    $1843 = ___cxa_find_matching_catch()|0;
    $1844 = tempRet0;
    $1845 = HEAP8[$1834>>0]|0;
    $1846 = $1845 & 1;
    $1847 = ($1846<<24>>24)==(0);
    if ($1847) {
     ___resumeException($1843|0);
     // unreachable;
    }
    $1848 = (($1834) + 8|0);
    $1849 = HEAP32[$1848>>2]|0;
    _free($1849);
    ___resumeException($1843|0);
    // unreachable;
   }
   else if ((label|0) == 623) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   else if ((label|0) == 629) {
    $1872 = ___cxa_find_matching_catch()|0;
    $1873 = tempRet0;
    $1874 = HEAP8[$1864>>0]|0;
    $1875 = $1874 & 1;
    $1876 = ($1875<<24>>24)==(0);
    if ($1876) {
     $eh$lpad$body$i$i157$index24Z2D = $1873;$eh$lpad$body$i$i157$indexZ2D = $1872;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i150);
     ___resumeException($eh$lpad$body$i$i157$indexZ2D|0);
     // unreachable;
    }
    $1877 = (($1864) + 8|0);
    $1878 = HEAP32[$1877>>2]|0;
    _free($1878);
    $eh$lpad$body$i$i157$index24Z2D = $1873;$eh$lpad$body$i$i157$indexZ2D = $1872;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i150);
    ___resumeException($eh$lpad$body$i$i157$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 631) {
    $1879 = ___cxa_find_matching_catch()|0;
    $1880 = tempRet0;
    $eh$lpad$body$i$i157$index24Z2D = $1880;$eh$lpad$body$i$i157$indexZ2D = $1879;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i150);
    ___resumeException($eh$lpad$body$i$i157$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 1090) {
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 82:  {
   $1884 = (($db) + 4|0);
   $1885 = HEAP32[$1884>>2]|0;
   $1886 = HEAP32[$db>>2]|0;
   $1887 = $1885;
   $1888 = $1886;
   $1889 = (($1887) - ($1888))|0;
   $1890 = (($1889|0) / 24)&-1;
   $1891 = (($first) + 1|0);
   $1892 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1891,$last,$db)|0);
   $1893 = HEAP32[$1884>>2]|0;
   $1894 = HEAP32[$db>>2]|0;
   $1895 = $1893;
   $1896 = $1894;
   $1897 = (($1895) - ($1896))|0;
   $1898 = (($1897|0) / 24)&-1;
   $1899 = ($1892|0)==($1891|0);
   if ($1899) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1900 = (($db) + 16|0);
   $1901 = (($db) + 12|0);
   $1902 = HEAP32[$1901>>2]|0;
   $1903 = (($db) + 20|0);
   $1904 = HEAP32[$1903>>2]|0;
   $1905 = (($db) + 24|0);
   $1906 = HEAP32[$1905>>2]|0;
   $1907 = ($1904>>>0)<($1906>>>0);
   if ($1907) {
    $1908 = ($1904|0)==(0|0);
    if ($1908) {
     $1913 = 0;
    } else {
     HEAP32[$1904>>2] = 0;
     $1909 = (($1904) + 4|0);
     HEAP32[$1909>>2] = 0;
     $1910 = (($1904) + 8|0);
     HEAP32[$1910>>2] = 0;
     $1911 = (($1904) + 12|0);
     HEAP32[$1911>>2] = $1902;
     $$pre$i162 = HEAP32[$1903>>2]|0;
     $1913 = $$pre$i162;
    }
    $1912 = (($1913) + 16|0);
    HEAP32[$1903>>2] = $1912;
   } else {
    $1914 = (($db) + 28|0);
    $1915 = HEAP32[$1900>>2]|0;
    $1916 = $1904;
    $1917 = $1915;
    $1918 = (($1916) - ($1917))|0;
    $1919 = $1918 >> 4;
    $1920 = (($1919) + 1)|0;
    $1921 = ($1920|0)<(0);
    if ($1921) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    $1922 = $1906;
    $1923 = (($1922) - ($1917))|0;
    $1924 = $1923 >> 4;
    $1925 = ($1924>>>0)<(1073741823);
    if ($1925) {
     $1926 = $1923 >> 3;
     $1927 = ($1926>>>0)<($1920>>>0);
     $1928 = $1927 ? $1920 : $1926;
     $$0$i$i$i164 = $1928;
    } else {
     $$0$i$i$i164 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i161,$$0$i$i$i164,$1919,$1914);
    $1929 = (($__v$i$i161) + 8|0);
    $1930 = HEAP32[$1929>>2]|0;
    $1931 = ($1930|0)==(0|0);
    if (!($1931)) {
     HEAP32[$1930>>2] = 0;
     $1932 = (($1930) + 4|0);
     HEAP32[$1932>>2] = 0;
     $1933 = (($1930) + 8|0);
     HEAP32[$1933>>2] = 0;
     $1934 = (($1930) + 12|0);
     HEAP32[$1934>>2] = $1902;
    }
    $1935 = (($1930) + 16|0);
    HEAP32[$1929>>2] = $1935;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1900,$__v$i$i161);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i161);
   }
   $1936 = ($1890>>>0)<($1898>>>0);
   if (!($1936)) {
    $$0 = $1892;
    STACKTOP = sp;return ($$0|0);
   }
   $1937 = (($38) + 1|0);
   $1938 = (($__v$i$i176) + 8|0);
   $1939 = (($38) + 8|0);
   $1940 = (($38) + 4|0);
   $k11$0403 = $1890;
   while(1) {
    $1941 = HEAP32[$db>>2]|0;
    $1942 = ((($1941) + (($k11$0403*24)|0)|0) + 12|0);
    $1943 = HEAP8[$1942>>0]|0;
    $1944 = $1943 & 1;
    $1945 = ($1944<<24>>24)==(0);
    if ($1945) {
     $1950 = $1943&255;
     $1951 = $1950 >>> 1;
     $1952 = (($1942) + 1|0);
     $1954 = $1951;$1956 = $1952;
    } else {
     $1946 = ((($1941) + (($k11$0403*24)|0)|0) + 16|0);
     $1947 = HEAP32[$1946>>2]|0;
     $1948 = ((($1941) + (($k11$0403*24)|0)|0) + 20|0);
     $1949 = HEAP32[$1948>>2]|0;
     $1954 = $1947;$1956 = $1949;
    }
    $1953 = ($1954>>>0)<(2);
    $1955 = $1953 ? $1954 : 2;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($38,$1956,$1955);
    $1957 = HEAP8[$38>>0]|0;
    $1958 = $1957 & 1;
    $1959 = ($1958<<24>>24)==(0);
    if ($1959) {
     $1962 = $1957&255;
     $1963 = $1962 >>> 1;
     $1965 = $1963;$3309 = $1937;
    } else {
     $1960 = HEAP32[$1940>>2]|0;
     $1961 = HEAP32[$1939>>2]|0;
     $1965 = $1960;$3309 = $1961;
    }
    $1964 = ($1965>>>0)>(2);
    $1966 = $1964 ? 2 : $1965;
    $1967 = ($1966|0)==(0);
    L983: do {
     if ($1967) {
      label = 658;
     } else {
      $$02$i135 = $1966;$l$03$i134 = $3309;$r$04$i133 = 1984;
      while(1) {
       $1968 = HEAP8[$l$03$i134>>0]|0;
       $1969 = HEAP8[$r$04$i133>>0]|0;
       $1970 = ($1968<<24>>24)==($1969<<24>>24);
       if (!($1970)) {
        label = 659;
        break L983;
       }
       $1971 = (($$02$i135) + -1)|0;
       $1972 = (($l$03$i134) + 1|0);
       $1973 = (($r$04$i133) + 1|0);
       $1974 = ($1971|0)==(0);
       if ($1974) {
        label = 658;
        break;
       } else {
        $$02$i135 = $1971;$l$03$i134 = $1972;$r$04$i133 = $1973;
       }
      }
     }
    } while(0);
    if ((label|0) == 658) {
     label = 0;
     $1975 = ($1965>>>0)<(2);
     if ($1975) {
      label = 659;
     } else {
      if (!($1959)) {
       $1978 = HEAP32[$1939>>2]|0;
       _free($1978);
      }
      $1979 = HEAP32[$db>>2]|0;
      if ($1964) {
       $1984 = $1979;
       label = 666;
      } else {
       $1980 = (($1979) + (($k11$0403*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1980,1992,2)|0);
       $1981 = HEAP32[$db>>2]|0;
       $1982 = ((($1981) + (($k11$0403*24)|0)|0) + 12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1982,0,2000,1)|0);
      }
     }
    }
    if ((label|0) == 659) {
     label = 0;
     if (!($1959)) {
      $1976 = HEAP32[$1939>>2]|0;
      _free($1976);
     }
     $1977 = HEAP32[$db>>2]|0;
     $1984 = $1977;
     label = 666;
    }
    if ((label|0) == 666) {
     label = 0;
     $1983 = ((($1984) + (($k11$0403*24)|0)|0) + 12|0);
     $1985 = HEAP8[$1983>>0]|0;
     $1986 = $1985 & 1;
     $1987 = ($1986<<24>>24)==(0);
     if ($1987) {
      $1990 = (($1983) + 1|0);
      $1992 = $1990;
     } else {
      $1988 = ((($1984) + (($k11$0403*24)|0)|0) + 20|0);
      $1989 = HEAP32[$1988>>2]|0;
      $1992 = $1989;
     }
     $1991 = HEAP8[$1992>>0]|0;
     $1993 = ($1991<<24>>24)==(40);
     if ($1993) {
      $1994 = (($1984) + (($k11$0403*24)|0)|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1994,2008,1)|0);
      $1995 = HEAP32[$db>>2]|0;
      $1996 = ((($1995) + (($k11$0403*24)|0)|0) + 12|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1996,0,2000,1)|0);
     }
    }
    $1997 = HEAP32[$db>>2]|0;
    $1998 = (($1997) + (($k11$0403*24)|0)|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1998,2056,1)|0);
    $1999 = HEAP32[$1903>>2]|0;
    $2000 = (($1999) + -16|0);
    $2001 = HEAP32[$db>>2]|0;
    $2002 = (($2001) + (($k11$0403*24)|0)|0);
    $2003 = (($1999) + -12|0);
    $2004 = HEAP32[$2003>>2]|0;
    $2005 = (($1999) + -8|0);
    $2006 = HEAP32[$2005>>2]|0;
    $2007 = ($2004|0)==($2006|0);
    if ($2007) {
     $2022 = (($1999) + -4|0);
     $2023 = HEAP32[$2000>>2]|0;
     $2024 = $2004;
     $2025 = $2023;
     $2026 = (($2024) - ($2025))|0;
     $2027 = (($2026|0) / 24)&-1;
     $2028 = (($2027) + 1)|0;
     $2029 = ($2028|0)<(0);
     if ($2029) {
      label = 680;
      break;
     }
     $2030 = ($2027>>>0)<(1073741823);
     if ($2030) {
      $2031 = $2027 << 1;
      $2032 = ($2031>>>0)<($2028>>>0);
      $2033 = $2032 ? $2028 : $2031;
      $$0$i$i$i180 = $2033;
     } else {
      $$0$i$i$i180 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i176,$$0$i$i$i180,$2027,$2022);
     $2034 = HEAP32[$1938>>2]|0;
     $2035 = ($2034|0)==(0|0);
     if (!($2035)) {
      __THREW__ = 0;
      invoke_vii(39,($2034|0),($2002|0));
      $2036 = __THREW__; __THREW__ = 0;
      $2037 = $2036&1;
      if ($2037) {
       label = 688;
       break;
      }
      $2038 = (($2034) + 12|0);
      $2039 = ((($2001) + (($k11$0403*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($2038|0),($2039|0));
      $2040 = __THREW__; __THREW__ = 0;
      $2041 = $2040&1;
      if ($2041) {
       label = 686;
       break;
      }
     }
     $2051 = (($2034) + 24|0);
     HEAP32[$1938>>2] = $2051;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2000,$__v$i$i176);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i176);
    } else {
     $2008 = ($2004|0)==(0|0);
     if ($2008) {
      $2021 = 0;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2004,$2002);
      $2009 = (($2004) + 12|0);
      $2010 = ((($2001) + (($k11$0403*24)|0)|0) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($2009|0),($2010|0));
      $2011 = __THREW__; __THREW__ = 0;
      $2012 = $2011&1;
      if ($2012) {
       label = 675;
       break;
      }
      $$pre$i177 = HEAP32[$2003>>2]|0;
      $2021 = $$pre$i177;
     }
     $2020 = (($2021) + 24|0);
     HEAP32[$2003>>2] = $2020;
    }
    $2052 = (($k11$0403) + 1)|0;
    $2053 = ($2052>>>0)<($1898>>>0);
    if ($2053) {
     $k11$0403 = $2052;
    } else {
     $$0 = $1892;
     label = 1090;
     break;
    }
   }
   if ((label|0) == 675) {
    $2013 = ___cxa_find_matching_catch()|0;
    $2014 = tempRet0;
    $2015 = HEAP8[$2004>>0]|0;
    $2016 = $2015 & 1;
    $2017 = ($2016<<24>>24)==(0);
    if ($2017) {
     ___resumeException($2013|0);
     // unreachable;
    }
    $2018 = (($2004) + 8|0);
    $2019 = HEAP32[$2018>>2]|0;
    _free($2019);
    ___resumeException($2013|0);
    // unreachable;
   }
   else if ((label|0) == 680) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   else if ((label|0) == 686) {
    $2042 = ___cxa_find_matching_catch()|0;
    $2043 = tempRet0;
    $2044 = HEAP8[$2034>>0]|0;
    $2045 = $2044 & 1;
    $2046 = ($2045<<24>>24)==(0);
    if ($2046) {
     $eh$lpad$body$i$i183$index31Z2D = $2043;$eh$lpad$body$i$i183$indexZ2D = $2042;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i176);
     ___resumeException($eh$lpad$body$i$i183$indexZ2D|0);
     // unreachable;
    }
    $2047 = (($2034) + 8|0);
    $2048 = HEAP32[$2047>>2]|0;
    _free($2048);
    $eh$lpad$body$i$i183$index31Z2D = $2043;$eh$lpad$body$i$i183$indexZ2D = $2042;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i176);
    ___resumeException($eh$lpad$body$i$i183$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 688) {
    $2049 = ___cxa_find_matching_catch()|0;
    $2050 = tempRet0;
    $eh$lpad$body$i$i183$index31Z2D = $2050;$eh$lpad$body$i$i183$indexZ2D = $2049;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i176);
    ___resumeException($eh$lpad$body$i$i183$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 1090) {
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 84:  {
   $2054 = (($db) + 4|0);
   $2055 = HEAP32[$2054>>2]|0;
   $2056 = HEAP32[$db>>2]|0;
   $2057 = $2055;
   $2058 = $2056;
   $2059 = (($2057) - ($2058))|0;
   $2060 = (($2059|0) / 24)&-1;
   $2061 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $2062 = HEAP32[$2054>>2]|0;
   $2063 = HEAP32[$db>>2]|0;
   $2064 = $2062;
   $2065 = $2063;
   $2066 = (($2064) - ($2065))|0;
   $2067 = (($2066|0) / 24)&-1;
   $2068 = ($2061|0)==($first|0);
   if ($2068) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2069 = (($db) + 16|0);
   $2070 = (($db) + 12|0);
   $2071 = HEAP32[$2070>>2]|0;
   $2072 = (($db) + 20|0);
   $2073 = HEAP32[$2072>>2]|0;
   $2074 = (($db) + 24|0);
   $2075 = HEAP32[$2074>>2]|0;
   $2076 = ($2073>>>0)<($2075>>>0);
   if ($2076) {
    $2077 = ($2073|0)==(0|0);
    if ($2077) {
     $2082 = 0;
    } else {
     HEAP32[$2073>>2] = 0;
     $2078 = (($2073) + 4|0);
     HEAP32[$2078>>2] = 0;
     $2079 = (($2073) + 8|0);
     HEAP32[$2079>>2] = 0;
     $2080 = (($2073) + 12|0);
     HEAP32[$2080>>2] = $2071;
     $$pre$i188 = HEAP32[$2072>>2]|0;
     $2082 = $$pre$i188;
    }
    $2081 = (($2082) + 16|0);
    HEAP32[$2072>>2] = $2081;
   } else {
    $2083 = (($db) + 28|0);
    $2084 = HEAP32[$2069>>2]|0;
    $2085 = $2073;
    $2086 = $2084;
    $2087 = (($2085) - ($2086))|0;
    $2088 = $2087 >> 4;
    $2089 = (($2088) + 1)|0;
    $2090 = ($2089|0)<(0);
    if ($2090) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    $2091 = $2075;
    $2092 = (($2091) - ($2086))|0;
    $2093 = $2092 >> 4;
    $2094 = ($2093>>>0)<(1073741823);
    if ($2094) {
     $2095 = $2092 >> 3;
     $2096 = ($2095>>>0)<($2089>>>0);
     $2097 = $2096 ? $2089 : $2095;
     $$0$i$i$i190 = $2097;
    } else {
     $$0$i$i$i190 = 2147483647;
    }
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i187,$$0$i$i$i190,$2088,$2083);
    $2098 = (($__v$i$i187) + 8|0);
    $2099 = HEAP32[$2098>>2]|0;
    $2100 = ($2099|0)==(0|0);
    if (!($2100)) {
     HEAP32[$2099>>2] = 0;
     $2101 = (($2099) + 4|0);
     HEAP32[$2101>>2] = 0;
     $2102 = (($2099) + 8|0);
     HEAP32[$2102>>2] = 0;
     $2103 = (($2099) + 12|0);
     HEAP32[$2103>>2] = $2071;
    }
    $2104 = (($2099) + 16|0);
    HEAP32[$2098>>2] = $2104;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2069,$__v$i$i187);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i187);
   }
   $2105 = ($2060>>>0)<($2067>>>0);
   L1058: do {
    if ($2105) {
     $2106 = (($__v$i$i194) + 8|0);
     $k15$0415 = $2060;
     while(1) {
      $2107 = HEAP32[$2072>>2]|0;
      $2108 = (($2107) + -16|0);
      $2109 = HEAP32[$db>>2]|0;
      $2110 = (($2109) + (($k15$0415*24)|0)|0);
      $2111 = (($2107) + -12|0);
      $2112 = HEAP32[$2111>>2]|0;
      $2113 = (($2107) + -8|0);
      $2114 = HEAP32[$2113>>2]|0;
      $2115 = ($2112|0)==($2114|0);
      if ($2115) {
       $2130 = (($2107) + -4|0);
       $2131 = HEAP32[$2108>>2]|0;
       $2132 = $2112;
       $2133 = $2131;
       $2134 = (($2132) - ($2133))|0;
       $2135 = (($2134|0) / 24)&-1;
       $2136 = (($2135) + 1)|0;
       $2137 = ($2136|0)<(0);
       if ($2137) {
        label = 715;
        break;
       }
       $2138 = ($2135>>>0)<(1073741823);
       if ($2138) {
        $2139 = $2135 << 1;
        $2140 = ($2139>>>0)<($2136>>>0);
        $2141 = $2140 ? $2136 : $2139;
        $$0$i$i$i198 = $2141;
       } else {
        $$0$i$i$i198 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i194,$$0$i$i$i198,$2135,$2130);
       $2142 = HEAP32[$2106>>2]|0;
       $2143 = ($2142|0)==(0|0);
       if (!($2143)) {
        __THREW__ = 0;
        invoke_vii(39,($2142|0),($2110|0));
        $2144 = __THREW__; __THREW__ = 0;
        $2145 = $2144&1;
        if ($2145) {
         label = 723;
         break;
        }
        $2146 = (($2142) + 12|0);
        $2147 = ((($2109) + (($k15$0415*24)|0)|0) + 12|0);
        __THREW__ = 0;
        invoke_vii(39,($2146|0),($2147|0));
        $2148 = __THREW__; __THREW__ = 0;
        $2149 = $2148&1;
        if ($2149) {
         label = 721;
         break;
        }
       }
       $2159 = (($2142) + 24|0);
       HEAP32[$2106>>2] = $2159;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2108,$__v$i$i194);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i194);
      } else {
       $2116 = ($2112|0)==(0|0);
       if ($2116) {
        $2129 = 0;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2112,$2110);
        $2117 = (($2112) + 12|0);
        $2118 = ((($2109) + (($k15$0415*24)|0)|0) + 12|0);
        __THREW__ = 0;
        invoke_vii(39,($2117|0),($2118|0));
        $2119 = __THREW__; __THREW__ = 0;
        $2120 = $2119&1;
        if ($2120) {
         label = 710;
         break;
        }
        $$pre$i195 = HEAP32[$2111>>2]|0;
        $2129 = $$pre$i195;
       }
       $2128 = (($2129) + 24|0);
       HEAP32[$2111>>2] = $2128;
      }
      $2160 = (($k15$0415) + 1)|0;
      $2161 = ($2160>>>0)<($2067>>>0);
      if ($2161) {
       $k15$0415 = $2160;
      } else {
       break L1058;
      }
     }
     if ((label|0) == 710) {
      $2121 = ___cxa_find_matching_catch()|0;
      $2122 = tempRet0;
      $2123 = HEAP8[$2112>>0]|0;
      $2124 = $2123 & 1;
      $2125 = ($2124<<24>>24)==(0);
      if ($2125) {
       ___resumeException($2121|0);
       // unreachable;
      }
      $2126 = (($2112) + 8|0);
      $2127 = HEAP32[$2126>>2]|0;
      _free($2127);
      ___resumeException($2121|0);
      // unreachable;
     }
     else if ((label|0) == 715) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      // unreachable;
     }
     else if ((label|0) == 721) {
      $2150 = ___cxa_find_matching_catch()|0;
      $2151 = tempRet0;
      $2152 = HEAP8[$2142>>0]|0;
      $2153 = $2152 & 1;
      $2154 = ($2153<<24>>24)==(0);
      if ($2154) {
       $eh$lpad$body$i$i201$index38Z2D = $2151;$eh$lpad$body$i$i201$indexZ2D = $2150;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i194);
       ___resumeException($eh$lpad$body$i$i201$indexZ2D|0);
       // unreachable;
      }
      $2155 = (($2142) + 8|0);
      $2156 = HEAP32[$2155>>2]|0;
      _free($2156);
      $eh$lpad$body$i$i201$index38Z2D = $2151;$eh$lpad$body$i$i201$indexZ2D = $2150;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i194);
      ___resumeException($eh$lpad$body$i$i201$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 723) {
      $2157 = ___cxa_find_matching_catch()|0;
      $2158 = tempRet0;
      $eh$lpad$body$i$i201$index38Z2D = $2158;$eh$lpad$body$i$i201$indexZ2D = $2157;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i194);
      ___resumeException($eh$lpad$body$i$i201$indexZ2D|0);
      // unreachable;
     }
    }
   } while(0);
   $2162 = (($db) + 63|0);
   $2163 = HEAP8[$2162>>0]|0;
   $2164 = ($2163<<24>>24)!=(0);
   $2165 = (($2060) + 1)|0;
   $2166 = ($2067|0)==($2165|0);
   $or$cond = $2164 & $2166;
   if (!($or$cond)) {
    $$0 = $2061;
    STACKTOP = sp;return ($$0|0);
   }
   $2167 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2061,$last,$db)|0);
   $2168 = ($2167|0)==($2061|0);
   if ($2168) {
    $$0 = $2061;
    STACKTOP = sp;return ($$0|0);
   }
   $2169 = HEAP32[$2054>>2]|0;
   $2170 = (($2169) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$2170);
   $2171 = HEAP32[$2054>>2]|0;
   $2172 = (($2171) + -24|0);
   $2174 = $2171;
   while(1) {
    $2173 = (($2174) + -24|0);
    HEAP32[$2054>>2] = $2173;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2173);
    $2175 = HEAP32[$2054>>2]|0;
    $2176 = ($2175|0)==($2172|0);
    if ($2176) {
     break;
    } else {
     $2174 = $2175;
    }
   }
   $2177 = (($2171) + -48|0);
   $2178 = HEAP8[$args>>0]|0;
   $2179 = $2178 & 1;
   $2180 = ($2179<<24>>24)==(0);
   if ($2180) {
    $2185 = (($args) + 1|0);
    $2186 = $2178&255;
    $2187 = $2186 >>> 1;
    $2188 = $2185;$2189 = $2187;
   } else {
    $2181 = (($args) + 8|0);
    $2182 = HEAP32[$2181>>2]|0;
    $2183 = (($args) + 4|0);
    $2184 = HEAP32[$2183>>2]|0;
    $2188 = $2182;$2189 = $2184;
   }
   __THREW__ = 0;
   (invoke_iiii(32,($2177|0),($2188|0),($2189|0))|0);
   $2190 = __THREW__; __THREW__ = 0;
   $2191 = $2190&1;
   do {
    if ($2191) {
     label = 750;
    } else {
     $2192 = HEAP32[$2054>>2]|0;
     $2193 = (($2192) + -24|0);
     $2194 = HEAP32[$2070>>2]|0;
     HEAP32[$40>>2] = $2194;
     __THREW__ = 0;
     invoke_viii(42,($39|0),($2193|0),($40|0));
     $2195 = __THREW__; __THREW__ = 0;
     $2196 = $2195&1;
     if ($2196) {
      label = 750;
     } else {
      $2197 = HEAP32[$2072>>2]|0;
      $2198 = HEAP32[$2074>>2]|0;
      $2199 = ($2197>>>0)<($2198>>>0);
      if ($2199) {
       $2200 = ($2197|0)==(0|0);
       if ($2200) {
        $2212 = 0;
       } else {
        $2201 = (($2197) + 4|0);
        $2202 = (($39) + 12|0);
        $2203 = HEAP32[$2202>>2]|0;
        $2204 = (($2197) + 8|0);
        $2205 = (($2197) + 12|0);
        HEAP32[$2205>>2] = $2203;
        $2206 = HEAP32[$39>>2]|0;
        HEAP32[$2197>>2] = $2206;
        $2207 = (($39) + 4|0);
        $2208 = HEAP32[$2207>>2]|0;
        HEAP32[$2201>>2] = $2208;
        $2209 = (($39) + 8|0);
        $2210 = HEAP32[$2209>>2]|0;
        HEAP32[$2204>>2] = $2210;
        HEAP32[$2209>>2] = 0;
        HEAP32[$2207>>2] = 0;
        HEAP32[$39>>2] = 0;
        $$pre$i211 = HEAP32[$2072>>2]|0;
        $2212 = $$pre$i211;
       }
       $2211 = (($2212) + 16|0);
       HEAP32[$2072>>2] = $2211;
      } else {
       $2213 = (($db) + 28|0);
       $2214 = HEAP32[$2069>>2]|0;
       $2215 = $2197;
       $2216 = $2214;
       $2217 = (($2215) - ($2216))|0;
       $2218 = $2217 >> 4;
       $2219 = (($2218) + 1)|0;
       $2220 = ($2219|0)<(0);
       if ($2220) {
        __THREW__ = 0;
        invoke_v(41);
        $2221 = __THREW__; __THREW__ = 0;
        $2222 = $2221&1;
        if ($2222) {
         $2248 = ___cxa_find_matching_catch()|0;
         $2249 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($39);
         $$02 = $2248;$$03 = $2249;
         break;
        } else {
         // unreachable;
        }
       }
       $2223 = $2198;
       $2224 = (($2223) - ($2216))|0;
       $2225 = $2224 >> 4;
       $2226 = ($2225>>>0)<(1073741823);
       if ($2226) {
        $2227 = $2224 >> 3;
        $2228 = ($2227>>>0)<($2219>>>0);
        $2229 = $2228 ? $2219 : $2227;
        $$0$i$i$i213 = $2229;
       } else {
        $$0$i$i$i213 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i210,$$0$i$i$i213,$2218,$2213);
       $2230 = (($__v$i$i210) + 8|0);
       $2231 = HEAP32[$2230>>2]|0;
       $2232 = ($2231|0)==(0|0);
       if (!($2232)) {
        $2233 = (($2231) + 4|0);
        $2234 = (($39) + 12|0);
        $2235 = HEAP32[$2234>>2]|0;
        $2236 = (($2231) + 8|0);
        $2237 = (($2231) + 12|0);
        HEAP32[$2237>>2] = $2235;
        $2238 = HEAP32[$39>>2]|0;
        HEAP32[$2231>>2] = $2238;
        $2239 = (($39) + 4|0);
        $2240 = HEAP32[$2239>>2]|0;
        HEAP32[$2233>>2] = $2240;
        $2241 = (($39) + 8|0);
        $2242 = HEAP32[$2241>>2]|0;
        HEAP32[$2236>>2] = $2242;
        HEAP32[$2241>>2] = 0;
        HEAP32[$2239>>2] = 0;
        HEAP32[$39>>2] = 0;
       }
       $2243 = (($2231) + 16|0);
       HEAP32[$2230>>2] = $2243;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2069,$__v$i$i210);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i210);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($39);
      if ($2180) {
       $$0 = $2167;
       STACKTOP = sp;return ($$0|0);
      }
      $2244 = (($args) + 8|0);
      $2245 = HEAP32[$2244>>2]|0;
      _free($2245);
      $$0 = $2167;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 750) {
    $2246 = ___cxa_find_matching_catch()|0;
    $2247 = tempRet0;
    $$02 = $2246;$$03 = $2247;
   }
   if ($2180) {
    $$10 = $$02;$$1013 = $$03;
    ___resumeException($$10|0);
    // unreachable;
   }
   $2250 = (($args) + 8|0);
   $2251 = HEAP32[$2250>>2]|0;
   _free($2251);
   $$10 = $$02;$$1013 = $$03;
   ___resumeException($$10|0);
   // unreachable;
   break;
  }
  case 85:  {
   $2252 = (($first) + 1|0);
   $2253 = ($2252|0)==($last|0);
   if ($2253) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2254 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($2252,$last,$db)|0);
   $2255 = ($2254|0)==($2252|0);
   if ($2255) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2256 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2254,$last,$db)|0);
   $2257 = ($2256|0)==($2254|0);
   if ($2257) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2258 = (($db) + 4|0);
   $2259 = HEAP32[$2258>>2]|0;
   $2260 = HEAP32[$db>>2]|0;
   $2261 = $2259;
   $2262 = $2260;
   $2263 = (($2261) - ($2262))|0;
   $2264 = (($2263|0) / 24)&-1;
   $2265 = ($2264>>>0)<(2);
   if ($2265) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2266 = (($2259) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type,$2266);
   $2267 = HEAP32[$2258>>2]|0;
   $2268 = (($2267) + -24|0);
   $2270 = $2267;
   while(1) {
    $2269 = (($2270) + -24|0);
    HEAP32[$2258>>2] = $2269;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2269);
    $2271 = HEAP32[$2258>>2]|0;
    $2272 = ($2271|0)==($2268|0);
    if ($2272) {
     break;
    } else {
     $2270 = $2271;
    }
   }
   $2273 = (($2267) + -48|0);
   $2274 = HEAP8[$2273>>0]|0;
   $2275 = $2274 & 1;
   $2276 = ($2275<<24>>24)==(0);
   if ($2276) {
    $2281 = $2274&255;
    $2282 = $2281 >>> 1;
    $2283 = (($2273) + 1|0);
    $2285 = $2282;$2287 = $2283;
   } else {
    $2277 = (($2267) + -44|0);
    $2278 = HEAP32[$2277>>2]|0;
    $2279 = (($2267) + -40|0);
    $2280 = HEAP32[$2279>>2]|0;
    $2285 = $2278;$2287 = $2280;
   }
   $2284 = ($2285>>>0)<(9);
   $2286 = $2284 ? $2285 : 9;
   __THREW__ = 0;
   invoke_viii(40,($41|0),($2287|0),($2286|0));
   $2288 = __THREW__; __THREW__ = 0;
   $2289 = $2288&1;
   L1159: do {
    if ($2289) {
     label = 785;
    } else {
     $2290 = HEAP8[$41>>0]|0;
     $2291 = $2290 & 1;
     $2292 = ($2291<<24>>24)==(0);
     if ($2292) {
      $2297 = $2290&255;
      $2298 = $2297 >>> 1;
      $2299 = (($41) + 1|0);
      $2301 = $2298;$3310 = $2299;
     } else {
      $2293 = (($41) + 4|0);
      $2294 = HEAP32[$2293>>2]|0;
      $2295 = (($41) + 8|0);
      $2296 = HEAP32[$2295>>2]|0;
      $2301 = $2294;$3310 = $2296;
     }
     $2300 = ($2301>>>0)>(9);
     $2302 = $2300 ? 9 : $2301;
     $2303 = ($2302|0)==(0);
     L1165: do {
      if ($2303) {
       label = 771;
      } else {
       $$02$i148 = $2302;$l$03$i147 = $3310;$r$04$i146 = 2064;
       while(1) {
        $2304 = HEAP8[$l$03$i147>>0]|0;
        $2305 = HEAP8[$r$04$i146>>0]|0;
        $2306 = ($2304<<24>>24)==($2305<<24>>24);
        if (!($2306)) {
         break;
        }
        $2307 = (($$02$i148) + -1)|0;
        $2308 = (($l$03$i147) + 1|0);
        $2309 = (($r$04$i146) + 1|0);
        $2310 = ($2307|0)==(0);
        if ($2310) {
         label = 771;
         break L1165;
        } else {
         $$02$i148 = $2307;$l$03$i147 = $2308;$r$04$i146 = $2309;
        }
       }
       $2311 = $2304&255;
       $2312 = $2305&255;
       $2313 = (($2311) - ($2312))|0;
       $2314 = ($2304<<24>>24)==($2305<<24>>24);
       if ($2314) {
        label = 771;
       } else {
        $2317 = $2313;
       }
      }
     } while(0);
     if ((label|0) == 771) {
      $2315 = ($2301>>>0)<(9);
      $$$i$i$i$i233 = $2300&1;
      $$$$i$i$i$i233 = $2315 ? -1 : $$$i$i$i$i233;
      $2317 = $$$$i$i$i$i233;
     }
     $2316 = ($2317|0)==(0);
     if (!($2292)) {
      $2318 = (($41) + 8|0);
      $2319 = HEAP32[$2318>>2]|0;
      _free($2319);
     }
     $2320 = HEAP32[$2258>>2]|0;
     $2321 = (($2320) + -24|0);
     L1176: do {
      if ($2316) {
       __THREW__ = 0;
       invoke_vii(36,($proto|0),($2321|0));
       $2370 = __THREW__; __THREW__ = 0;
       $2371 = $2370&1;
       if ($2371) {
        label = 785;
        break L1159;
       }
       $2372 = HEAP32[$2258>>2]|0;
       $2373 = (($2372) + -24|0);
       $2375 = $2372;
       while(1) {
        $2374 = (($2375) + -24|0);
        HEAP32[$2258>>2] = $2374;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2374);
        $2376 = HEAP32[$2258>>2]|0;
        $2377 = ($2376|0)==($2373|0);
        if ($2377) {
         break;
        } else {
         $2375 = $2376;
        }
       }
       $2378 = HEAP8[$proto>>0]|0;
       $2379 = $2378 & 1;
       $2380 = ($2379<<24>>24)==(0);
       if ($2380) {
        $2385 = (($proto) + 1|0);
        $2386 = $2378&255;
        $2387 = $2386 >>> 1;
        $2389 = $2385;$2391 = $2387;
       } else {
        $2381 = (($proto) + 8|0);
        $2382 = HEAP32[$2381>>2]|0;
        $2383 = (($proto) + 4|0);
        $2384 = HEAP32[$2383>>2]|0;
        $2389 = $2382;$2391 = $2384;
       }
       $2388 = (($2389) + 9|0);
       $2390 = (($2389) + ($2391)|0);
       __THREW__ = 0;
       $2392 = (invoke_iiii(44,($2388|0),($2390|0),($db|0))|0);
       $2393 = __THREW__; __THREW__ = 0;
       $2394 = $2393&1;
       L1205: do {
        if ($2394) {
         label = 815;
        } else {
         $2395 = HEAP8[$proto>>0]|0;
         $2396 = $2395 & 1;
         $2397 = ($2396<<24>>24)==(0);
         if ($2397) {
          $2400 = (($proto) + 1|0);
          $2402 = $2400;
         } else {
          $2398 = (($proto) + 8|0);
          $2399 = HEAP32[$2398>>2]|0;
          $2402 = $2399;
         }
         $2401 = (($2402) + 9|0);
         $2403 = ($2392|0)==($2401|0);
         L1211: do {
          if ($2403) {
           __THREW__ = 0;
           invoke_viii(43,($50|0),($type|0),(2080|0));
           $2466 = __THREW__; __THREW__ = 0;
           $2467 = $2466&1;
           if ($2467) {
            label = 815;
            break L1205;
           }
           $2468 = HEAP8[$proto>>0]|0;
           $2469 = $2468 & 1;
           $2470 = ($2469<<24>>24)==(0);
           if ($2470) {
            $2475 = (($proto) + 1|0);
            $2476 = $2468&255;
            $2477 = $2476 >>> 1;
            $2478 = $2475;$2479 = $2477;
           } else {
            $2471 = (($proto) + 8|0);
            $2472 = HEAP32[$2471>>2]|0;
            $2473 = (($proto) + 4|0);
            $2474 = HEAP32[$2473>>2]|0;
            $2478 = $2472;$2479 = $2474;
           }
           __THREW__ = 0;
           $2480 = (invoke_iiii(32,($50|0),($2478|0),($2479|0))|0);
           $2481 = __THREW__; __THREW__ = 0;
           $2482 = $2481&1;
           do {
            if ($2482) {
             $2522 = ___cxa_find_matching_catch()|0;
             $2523 = tempRet0;
             $$6 = $2522;$$69 = $2523;
            } else {
             $2483 = HEAP8[$2480>>0]|0;
             $2484 = (($2480) + 1|0);
             ;HEAP8[$$sroa$5+0>>0]=HEAP8[$2484+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$2484+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$2484+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$2484+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$2484+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$2484+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$2484+6>>0]|0;
             $2485 = (($2480) + 8|0);
             $2486 = HEAP32[$2485>>2]|0;
             ;HEAP32[$2480+0>>2]=0|0;HEAP32[$2480+4>>2]=0|0;HEAP32[$2480+8>>2]=0|0;
             HEAP8[$49>>0] = $2483;
             $2487 = (($49) + 1|0);
             ;HEAP8[$2487+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$2487+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$2487+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$2487+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$2487+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$2487+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$2487+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
             $2488 = (($49) + 8|0);
             HEAP32[$2488>>2] = $2486;
             ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
             $2489 = (($49) + 12|0);
             ;HEAP32[$2489+0>>2]=0|0;HEAP32[$2489+4>>2]=0|0;HEAP32[$2489+8>>2]=0|0;
             $2490 = HEAP32[$2258>>2]|0;
             $2491 = (($db) + 8|0);
             $2492 = HEAP32[$2491>>2]|0;
             $2493 = ($2490>>>0)<($2492>>>0);
             if ($2493) {
              $2494 = ($2490|0)==(0|0);
              if ($2494) {
               $2497 = 0;
              } else {
               ;HEAP32[$2490+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$2490+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$2490+8>>2]=HEAP32[$49+8>>2]|0;
               ;HEAP32[$49+0>>2]=0|0;HEAP32[$49+4>>2]=0|0;HEAP32[$49+8>>2]=0|0;
               $2495 = (($2490) + 12|0);
               ;HEAP32[$2495+0>>2]=HEAP32[$2489+0>>2]|0;HEAP32[$2495+4>>2]=HEAP32[$2489+4>>2]|0;HEAP32[$2495+8>>2]=HEAP32[$2489+8>>2]|0;
               ;HEAP32[$2489+0>>2]=0|0;HEAP32[$2489+4>>2]=0|0;HEAP32[$2489+8>>2]=0|0;
               $$pre$i252 = HEAP32[$2258>>2]|0;
               $2497 = $$pre$i252;
              }
              $2496 = (($2497) + 24|0);
              HEAP32[$2258>>2] = $2496;
             } else {
              $2498 = (($db) + 12|0);
              $2499 = HEAP32[$db>>2]|0;
              $2500 = $2490;
              $2501 = $2499;
              $2502 = (($2500) - ($2501))|0;
              $2503 = (($2502|0) / 24)&-1;
              $2504 = (($2503) + 1)|0;
              $2505 = ($2504|0)<(0);
              if ($2505) {
               __THREW__ = 0;
               invoke_v(41);
               $2506 = __THREW__; __THREW__ = 0;
               $2507 = $2506&1;
               if ($2507) {
                $2524 = ___cxa_find_matching_catch()|0;
                $2525 = tempRet0;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
                $$6 = $2524;$$69 = $2525;
                break;
               } else {
                // unreachable;
               }
              }
              $2508 = $2492;
              $2509 = (($2508) - ($2501))|0;
              $2510 = (($2509|0) / 24)&-1;
              $2511 = ($2510>>>0)<(1073741823);
              if ($2511) {
               $2512 = $2510 << 1;
               $2513 = ($2512>>>0)<($2504>>>0);
               $2514 = $2513 ? $2504 : $2512;
               $$0$i$i$i253 = $2514;
              } else {
               $$0$i$i$i253 = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i251,$$0$i$i$i253,$2503,$2498);
              $2515 = (($__v$i$i251) + 8|0);
              $2516 = HEAP32[$2515>>2]|0;
              $2517 = ($2516|0)==(0|0);
              if (!($2517)) {
               ;HEAP32[$2516+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$2516+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$2516+8>>2]=HEAP32[$49+8>>2]|0;
               ;HEAP32[$49+0>>2]=0|0;HEAP32[$49+4>>2]=0|0;HEAP32[$49+8>>2]=0|0;
               $2518 = (($2516) + 12|0);
               ;HEAP32[$2518+0>>2]=HEAP32[$2489+0>>2]|0;HEAP32[$2518+4>>2]=HEAP32[$2489+4>>2]|0;HEAP32[$2518+8>>2]=HEAP32[$2489+8>>2]|0;
               ;HEAP32[$2489+0>>2]=0|0;HEAP32[$2489+4>>2]=0|0;HEAP32[$2489+8>>2]=0|0;
              }
              $2519 = (($2516) + 24|0);
              HEAP32[$2515>>2] = $2519;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i251);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i251);
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
             $$pre207 = HEAP8[$50>>0]|0;
             $phitmp219 = $$pre207 & 1;
             $phitmp220 = ($phitmp219<<24>>24)==(0);
             if ($phitmp220) {
              break L1211;
             }
             $2520 = (($50) + 8|0);
             $2521 = HEAP32[$2520>>2]|0;
             _free($2521);
             break L1211;
            }
           } while(0);
           $2526 = HEAP8[$50>>0]|0;
           $2527 = $2526 & 1;
           $2528 = ($2527<<24>>24)==(0);
           if ($2528) {
            $$7 = $$6;$$710 = $$69;
            break L1205;
           }
           $2529 = (($50) + 8|0);
           $2530 = HEAP32[$2529>>2]|0;
           _free($2530);
           $$7 = $$6;$$710 = $$69;
           break L1205;
          } else {
           $2404 = HEAP32[$2258>>2]|0;
           $2405 = (($2404) + -24|0);
           __THREW__ = 0;
           invoke_viii(43,($47|0),($type|0),(2088|0));
           $2406 = __THREW__; __THREW__ = 0;
           $2407 = $2406&1;
           if ($2407) {
            label = 815;
            break L1205;
           }
           $2408 = HEAP32[$2258>>2]|0;
           $2409 = (($2408) + -24|0);
           __THREW__ = 0;
           invoke_vii(36,($48|0),($2409|0));
           $2410 = __THREW__; __THREW__ = 0;
           $2411 = $2410&1;
           do {
            if ($2411) {
             $2448 = ___cxa_find_matching_catch()|0;
             $2449 = tempRet0;
             $$5 = $2448;$$58 = $2449;
            } else {
             $2412 = HEAP8[$48>>0]|0;
             $2413 = $2412 & 1;
             $2414 = ($2413<<24>>24)==(0);
             if ($2414) {
              $2419 = (($48) + 1|0);
              $2420 = $2412&255;
              $2421 = $2420 >>> 1;
              $2422 = $2419;$2423 = $2421;
             } else {
              $2415 = (($48) + 8|0);
              $2416 = HEAP32[$2415>>2]|0;
              $2417 = (($48) + 4|0);
              $2418 = HEAP32[$2417>>2]|0;
              $2422 = $2416;$2423 = $2418;
             }
             __THREW__ = 0;
             $2424 = (invoke_iiii(32,($47|0),($2422|0),($2423|0))|0);
             $2425 = __THREW__; __THREW__ = 0;
             $2426 = $2425&1;
             do {
              if ($2426) {
               $2450 = ___cxa_find_matching_catch()|0;
               $2451 = tempRet0;
               $$4 = $2450;$$47 = $2451;
              } else {
               ;HEAP32[$46+0>>2]=HEAP32[$2424+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$2424+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$2424+8>>2]|0;
               ;HEAP32[$2424+0>>2]=0|0;HEAP32[$2424+4>>2]=0|0;HEAP32[$2424+8>>2]=0|0;
               __THREW__ = 0;
               $2427 = (invoke_iiii(32,($46|0),(2096|0),1)|0);
               $2428 = __THREW__; __THREW__ = 0;
               $2429 = $2428&1;
               if ($2429) {
                $2452 = ___cxa_find_matching_catch()|0;
                $2453 = tempRet0;
                $2454 = HEAP8[$46>>0]|0;
                $2455 = $2454 & 1;
                $2456 = ($2455<<24>>24)==(0);
                if ($2456) {
                 $$4 = $2452;$$47 = $2453;
                 break;
                }
                $2457 = (($46) + 8|0);
                $2458 = HEAP32[$2457>>2]|0;
                _free($2458);
                $$4 = $2452;$$47 = $2453;
                break;
               }
               $2430 = HEAP8[$2427>>0]|0;
               $2431 = (($2427) + 1|0);
               ;HEAP8[$$sroa$4+0>>0]=HEAP8[$2431+0>>0]|0;HEAP8[$$sroa$4+1>>0]=HEAP8[$2431+1>>0]|0;HEAP8[$$sroa$4+2>>0]=HEAP8[$2431+2>>0]|0;HEAP8[$$sroa$4+3>>0]=HEAP8[$2431+3>>0]|0;HEAP8[$$sroa$4+4>>0]=HEAP8[$2431+4>>0]|0;HEAP8[$$sroa$4+5>>0]=HEAP8[$2431+5>>0]|0;HEAP8[$$sroa$4+6>>0]=HEAP8[$2431+6>>0]|0;
               $2432 = (($2427) + 8|0);
               $2433 = HEAP32[$2432>>2]|0;
               ;HEAP32[$2427+0>>2]=0|0;HEAP32[$2427+4>>2]=0|0;HEAP32[$2427+8>>2]=0|0;
               HEAP8[$45>>0] = $2430;
               $2434 = (($45) + 1|0);
               ;HEAP8[$2434+0>>0]=HEAP8[$$sroa$4+0>>0]|0;HEAP8[$2434+1>>0]=HEAP8[$$sroa$4+1>>0]|0;HEAP8[$2434+2>>0]=HEAP8[$$sroa$4+2>>0]|0;HEAP8[$2434+3>>0]=HEAP8[$$sroa$4+3>>0]|0;HEAP8[$2434+4>>0]=HEAP8[$$sroa$4+4>>0]|0;HEAP8[$2434+5>>0]=HEAP8[$$sroa$4+5>>0]|0;HEAP8[$2434+6>>0]=HEAP8[$$sroa$4+6>>0]|0;
               $2435 = (($45) + 8|0);
               HEAP32[$2435>>2] = $2433;
               ;HEAP8[$$sroa$4+0>>0]=0|0;HEAP8[$$sroa$4+1>>0]=0|0;HEAP8[$$sroa$4+2>>0]=0|0;HEAP8[$$sroa$4+3>>0]=0|0;HEAP8[$$sroa$4+4>>0]=0|0;HEAP8[$$sroa$4+5>>0]=0|0;HEAP8[$$sroa$4+6>>0]=0|0;
               $2436 = (($45) + 12|0);
               ;HEAP32[$2436+0>>2]=0|0;HEAP32[$2436+4>>2]=0|0;HEAP32[$2436+8>>2]=0|0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2405,$45);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
               $$pre208 = HEAP8[$46>>0]|0;
               $phitmp217 = $$pre208 & 1;
               $phitmp218 = ($phitmp217<<24>>24)==(0);
               if (!($phitmp218)) {
                $2437 = (($46) + 8|0);
                $2438 = HEAP32[$2437>>2]|0;
                _free($2438);
               }
               if (!($2414)) {
                $2439 = (($48) + 8|0);
                $2440 = HEAP32[$2439>>2]|0;
                _free($2440);
               }
               $2441 = HEAP8[$47>>0]|0;
               $2442 = $2441 & 1;
               $2443 = ($2442<<24>>24)==(0);
               if ($2443) {
                break L1211;
               }
               $2444 = (($47) + 8|0);
               $2445 = HEAP32[$2444>>2]|0;
               _free($2445);
               break L1211;
              }
             } while(0);
             if ($2414) {
              $$5 = $$4;$$58 = $$47;
              break;
             }
             $2459 = (($48) + 8|0);
             $2460 = HEAP32[$2459>>2]|0;
             _free($2460);
             $$5 = $$4;$$58 = $$47;
            }
           } while(0);
           $2461 = HEAP8[$47>>0]|0;
           $2462 = $2461 & 1;
           $2463 = ($2462<<24>>24)==(0);
           if ($2463) {
            $$7 = $$5;$$710 = $$58;
            break L1205;
           }
           $2464 = (($47) + 8|0);
           $2465 = HEAP32[$2464>>2]|0;
           _free($2465);
           $$7 = $$5;$$710 = $$58;
           break L1205;
          }
         } while(0);
         $2531 = HEAP8[$proto>>0]|0;
         $2532 = $2531 & 1;
         $2533 = ($2532<<24>>24)==(0);
         if ($2533) {
          break L1176;
         }
         $2534 = (($proto) + 8|0);
         $2535 = HEAP32[$2534>>2]|0;
         _free($2535);
         break L1176;
        }
       } while(0);
       if ((label|0) == 815) {
        $2446 = ___cxa_find_matching_catch()|0;
        $2447 = tempRet0;
        $$7 = $2446;$$710 = $2447;
       }
       $2536 = HEAP8[$proto>>0]|0;
       $2537 = $2536 & 1;
       $2538 = ($2537<<24>>24)==(0);
       if ($2538) {
        $$8 = $$7;$$811 = $$710;
        break L1159;
       }
       $2539 = (($proto) + 8|0);
       $2540 = HEAP32[$2539>>2]|0;
       _free($2540);
       $$8 = $$7;$$811 = $$710;
       break L1159;
      } else {
       __THREW__ = 0;
       invoke_viii(43,($43|0),($type|0),(2080|0));
       $2322 = __THREW__; __THREW__ = 0;
       $2323 = $2322&1;
       if ($2323) {
        label = 785;
        break L1159;
       }
       $2324 = HEAP32[$2258>>2]|0;
       $2325 = (($2324) + -24|0);
       __THREW__ = 0;
       invoke_vii(36,($44|0),($2325|0));
       $2326 = __THREW__; __THREW__ = 0;
       $2327 = $2326&1;
       do {
        if ($2327) {
         $2359 = ___cxa_find_matching_catch()|0;
         $2360 = tempRet0;
         $$2 = $2359;$$25 = $2360;
        } else {
         $2328 = HEAP8[$44>>0]|0;
         $2329 = $2328 & 1;
         $2330 = ($2329<<24>>24)==(0);
         if ($2330) {
          $2335 = (($44) + 1|0);
          $2336 = $2328&255;
          $2337 = $2336 >>> 1;
          $2338 = $2335;$2339 = $2337;
         } else {
          $2331 = (($44) + 8|0);
          $2332 = HEAP32[$2331>>2]|0;
          $2333 = (($44) + 4|0);
          $2334 = HEAP32[$2333>>2]|0;
          $2338 = $2332;$2339 = $2334;
         }
         __THREW__ = 0;
         $2340 = (invoke_iiii(32,($43|0),($2338|0),($2339|0))|0);
         $2341 = __THREW__; __THREW__ = 0;
         $2342 = $2341&1;
         if ($2342) {
          $2361 = ___cxa_find_matching_catch()|0;
          $2362 = tempRet0;
          if ($2330) {
           $$2 = $2361;$$25 = $2362;
           break;
          }
          $2363 = (($44) + 8|0);
          $2364 = HEAP32[$2363>>2]|0;
          _free($2364);
          $$2 = $2361;$$25 = $2362;
          break;
         }
         $2343 = HEAP8[$2340>>0]|0;
         $2344 = (($2340) + 1|0);
         ;HEAP8[$$sroa$4183+0>>0]=HEAP8[$2344+0>>0]|0;HEAP8[$$sroa$4183+1>>0]=HEAP8[$2344+1>>0]|0;HEAP8[$$sroa$4183+2>>0]=HEAP8[$2344+2>>0]|0;HEAP8[$$sroa$4183+3>>0]=HEAP8[$2344+3>>0]|0;HEAP8[$$sroa$4183+4>>0]=HEAP8[$2344+4>>0]|0;HEAP8[$$sroa$4183+5>>0]=HEAP8[$2344+5>>0]|0;HEAP8[$$sroa$4183+6>>0]=HEAP8[$2344+6>>0]|0;
         $2345 = (($2340) + 8|0);
         $2346 = HEAP32[$2345>>2]|0;
         ;HEAP32[$2340+0>>2]=0|0;HEAP32[$2340+4>>2]=0|0;HEAP32[$2340+8>>2]=0|0;
         HEAP8[$42>>0] = $2343;
         $2347 = (($42) + 1|0);
         ;HEAP8[$2347+0>>0]=HEAP8[$$sroa$4183+0>>0]|0;HEAP8[$2347+1>>0]=HEAP8[$$sroa$4183+1>>0]|0;HEAP8[$2347+2>>0]=HEAP8[$$sroa$4183+2>>0]|0;HEAP8[$2347+3>>0]=HEAP8[$$sroa$4183+3>>0]|0;HEAP8[$2347+4>>0]=HEAP8[$$sroa$4183+4>>0]|0;HEAP8[$2347+5>>0]=HEAP8[$$sroa$4183+5>>0]|0;HEAP8[$2347+6>>0]=HEAP8[$$sroa$4183+6>>0]|0;
         $2348 = (($42) + 8|0);
         HEAP32[$2348>>2] = $2346;
         ;HEAP8[$$sroa$4183+0>>0]=0|0;HEAP8[$$sroa$4183+1>>0]=0|0;HEAP8[$$sroa$4183+2>>0]=0|0;HEAP8[$$sroa$4183+3>>0]=0|0;HEAP8[$$sroa$4183+4>>0]=0|0;HEAP8[$$sroa$4183+5>>0]=0|0;HEAP8[$$sroa$4183+6>>0]=0|0;
         $2349 = (($42) + 12|0);
         ;HEAP32[$2349+0>>2]=0|0;HEAP32[$2349+4>>2]=0|0;HEAP32[$2349+8>>2]=0|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2321,$42);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
         if (!($2330)) {
          $2350 = (($44) + 8|0);
          $2351 = HEAP32[$2350>>2]|0;
          _free($2351);
         }
         $2352 = HEAP8[$43>>0]|0;
         $2353 = $2352 & 1;
         $2354 = ($2353<<24>>24)==(0);
         if ($2354) {
          break L1176;
         }
         $2355 = (($43) + 8|0);
         $2356 = HEAP32[$2355>>2]|0;
         _free($2356);
         break L1176;
        }
       } while(0);
       $2365 = HEAP8[$43>>0]|0;
       $2366 = $2365 & 1;
       $2367 = ($2366<<24>>24)==(0);
       if ($2367) {
        $$8 = $$2;$$811 = $$25;
        break L1159;
       }
       $2368 = (($43) + 8|0);
       $2369 = HEAP32[$2368>>2]|0;
       _free($2369);
       $$8 = $$2;$$811 = $$25;
       break L1159;
      }
     } while(0);
     $2541 = HEAP32[$2258>>2]|0;
     $2542 = (($2541) + -24|0);
     $2543 = (($db) + 12|0);
     $2544 = HEAP32[$2543>>2]|0;
     HEAP32[$52>>2] = $2544;
     __THREW__ = 0;
     invoke_viii(42,($51|0),($2542|0),($52|0));
     $2545 = __THREW__; __THREW__ = 0;
     $2546 = $2545&1;
     if ($2546) {
      label = 785;
     } else {
      $2547 = (($db) + 16|0);
      $2548 = (($db) + 20|0);
      $2549 = HEAP32[$2548>>2]|0;
      $2550 = (($db) + 24|0);
      $2551 = HEAP32[$2550>>2]|0;
      $2552 = ($2549>>>0)<($2551>>>0);
      if ($2552) {
       $2553 = ($2549|0)==(0|0);
       if ($2553) {
        $2565 = 0;
       } else {
        $2554 = (($2549) + 4|0);
        $2555 = (($51) + 12|0);
        $2556 = HEAP32[$2555>>2]|0;
        $2557 = (($2549) + 8|0);
        $2558 = (($2549) + 12|0);
        HEAP32[$2558>>2] = $2556;
        $2559 = HEAP32[$51>>2]|0;
        HEAP32[$2549>>2] = $2559;
        $2560 = (($51) + 4|0);
        $2561 = HEAP32[$2560>>2]|0;
        HEAP32[$2554>>2] = $2561;
        $2562 = (($51) + 8|0);
        $2563 = HEAP32[$2562>>2]|0;
        HEAP32[$2557>>2] = $2563;
        HEAP32[$2562>>2] = 0;
        HEAP32[$2560>>2] = 0;
        HEAP32[$51>>2] = 0;
        $$pre$i219 = HEAP32[$2548>>2]|0;
        $2565 = $$pre$i219;
       }
       $2564 = (($2565) + 16|0);
       HEAP32[$2548>>2] = $2564;
      } else {
       $2566 = (($db) + 28|0);
       $2567 = HEAP32[$2547>>2]|0;
       $2568 = $2549;
       $2569 = $2567;
       $2570 = (($2568) - ($2569))|0;
       $2571 = $2570 >> 4;
       $2572 = (($2571) + 1)|0;
       $2573 = ($2572|0)<(0);
       if ($2573) {
        __THREW__ = 0;
        invoke_v(41);
        $2574 = __THREW__; __THREW__ = 0;
        $2575 = $2574&1;
        if ($2575) {
         $2602 = ___cxa_find_matching_catch()|0;
         $2603 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
         $$8 = $2602;$$811 = $2603;
         break;
        } else {
         // unreachable;
        }
       }
       $2576 = $2551;
       $2577 = (($2576) - ($2569))|0;
       $2578 = $2577 >> 4;
       $2579 = ($2578>>>0)<(1073741823);
       if ($2579) {
        $2580 = $2577 >> 3;
        $2581 = ($2580>>>0)<($2572>>>0);
        $2582 = $2581 ? $2572 : $2580;
        $$0$i$i$i221 = $2582;
       } else {
        $$0$i$i$i221 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i218,$$0$i$i$i221,$2571,$2566);
       $2583 = (($__v$i$i218) + 8|0);
       $2584 = HEAP32[$2583>>2]|0;
       $2585 = ($2584|0)==(0|0);
       if (!($2585)) {
        $2586 = (($2584) + 4|0);
        $2587 = (($51) + 12|0);
        $2588 = HEAP32[$2587>>2]|0;
        $2589 = (($2584) + 8|0);
        $2590 = (($2584) + 12|0);
        HEAP32[$2590>>2] = $2588;
        $2591 = HEAP32[$51>>2]|0;
        HEAP32[$2584>>2] = $2591;
        $2592 = (($51) + 4|0);
        $2593 = HEAP32[$2592>>2]|0;
        HEAP32[$2586>>2] = $2593;
        $2594 = (($51) + 8|0);
        $2595 = HEAP32[$2594>>2]|0;
        HEAP32[$2589>>2] = $2595;
        HEAP32[$2594>>2] = 0;
        HEAP32[$2592>>2] = 0;
        HEAP32[$51>>2] = 0;
       }
       $2596 = (($2584) + 16|0);
       HEAP32[$2583>>2] = $2596;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2547,$__v$i$i218);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i218);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
      $2597 = HEAP8[$type>>0]|0;
      $2598 = $2597 & 1;
      $2599 = ($2598<<24>>24)==(0);
      if ($2599) {
       $$0 = $2256;
       STACKTOP = sp;return ($$0|0);
      }
      $2600 = (($type) + 8|0);
      $2601 = HEAP32[$2600>>2]|0;
      _free($2601);
      $$0 = $2256;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 785) {
    $2357 = ___cxa_find_matching_catch()|0;
    $2358 = tempRet0;
    $$8 = $2357;$$811 = $2358;
   }
   $2604 = HEAP8[$type>>0]|0;
   $2605 = $2604 & 1;
   $2606 = ($2605<<24>>24)==(0);
   if ($2606) {
    $$10 = $$8;$$1013 = $$811;
    ___resumeException($$10|0);
    // unreachable;
   }
   $2607 = (($type) + 8|0);
   $2608 = HEAP32[$2607>>2]|0;
   _free($2608);
   $$10 = $$8;$$1013 = $$811;
   ___resumeException($$10|0);
   // unreachable;
   break;
  }
  case 83:  {
   $2609 = (($first) + 1|0);
   $2610 = ($2609|0)==($last|0);
   if (!($2610)) {
    $2611 = HEAP8[$2609>>0]|0;
    $2612 = ($2611<<24>>24)==(116);
    if ($2612) {
     $2613 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $2614 = ($2613|0)==($first|0);
     if ($2614) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2615 = HEAP32[$db>>2]|0;
     $2616 = (($db) + 4|0);
     $2617 = HEAP32[$2616>>2]|0;
     $2618 = ($2615|0)==($2617|0);
     if ($2618) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2619 = (($db) + 16|0);
     $2620 = (($2617) + -24|0);
     $2621 = (($db) + 12|0);
     $2622 = HEAP32[$2621>>2]|0;
     HEAP32[$54>>2] = $2622;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($53,$2620,$54);
     $2623 = (($db) + 20|0);
     $2624 = HEAP32[$2623>>2]|0;
     $2625 = (($db) + 24|0);
     $2626 = HEAP32[$2625>>2]|0;
     $2627 = ($2624>>>0)<($2626>>>0);
     if ($2627) {
      $2628 = ($2624|0)==(0|0);
      if ($2628) {
       $2640 = 0;
      } else {
       $2629 = (($2624) + 4|0);
       $2630 = (($53) + 12|0);
       $2631 = HEAP32[$2630>>2]|0;
       $2632 = (($2624) + 8|0);
       $2633 = (($2624) + 12|0);
       HEAP32[$2633>>2] = $2631;
       $2634 = HEAP32[$53>>2]|0;
       HEAP32[$2624>>2] = $2634;
       $2635 = (($53) + 4|0);
       $2636 = HEAP32[$2635>>2]|0;
       HEAP32[$2629>>2] = $2636;
       $2637 = (($53) + 8|0);
       $2638 = HEAP32[$2637>>2]|0;
       HEAP32[$2632>>2] = $2638;
       HEAP32[$2637>>2] = 0;
       HEAP32[$2635>>2] = 0;
       HEAP32[$53>>2] = 0;
       $$pre$i68 = HEAP32[$2623>>2]|0;
       $2640 = $$pre$i68;
      }
      $2639 = (($2640) + 16|0);
      HEAP32[$2623>>2] = $2639;
     } else {
      $2641 = (($db) + 28|0);
      $2642 = HEAP32[$2619>>2]|0;
      $2643 = $2624;
      $2644 = $2642;
      $2645 = (($2643) - ($2644))|0;
      $2646 = $2645 >> 4;
      $2647 = (($2646) + 1)|0;
      $2648 = ($2647|0)<(0);
      if ($2648) {
       __THREW__ = 0;
       invoke_v(41);
       $2649 = __THREW__; __THREW__ = 0;
       $2650 = $2649&1;
       if (!($2650)) {
        // unreachable;
       }
       $2672 = ___cxa_find_matching_catch()|0;
       $2673 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($53);
       $$10 = $2672;$$1013 = $2673;
       ___resumeException($$10|0);
       // unreachable;
      }
      $2651 = $2626;
      $2652 = (($2651) - ($2644))|0;
      $2653 = $2652 >> 4;
      $2654 = ($2653>>>0)<(1073741823);
      if ($2654) {
       $2655 = $2652 >> 3;
       $2656 = ($2655>>>0)<($2647>>>0);
       $2657 = $2656 ? $2647 : $2655;
       $$0$i$i$i70 = $2657;
      } else {
       $$0$i$i$i70 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i67,$$0$i$i$i70,$2646,$2641);
      $2658 = (($__v$i$i67) + 8|0);
      $2659 = HEAP32[$2658>>2]|0;
      $2660 = ($2659|0)==(0|0);
      if (!($2660)) {
       $2661 = (($2659) + 4|0);
       $2662 = (($53) + 12|0);
       $2663 = HEAP32[$2662>>2]|0;
       $2664 = (($2659) + 8|0);
       $2665 = (($2659) + 12|0);
       HEAP32[$2665>>2] = $2663;
       $2666 = HEAP32[$53>>2]|0;
       HEAP32[$2659>>2] = $2666;
       $2667 = (($53) + 4|0);
       $2668 = HEAP32[$2667>>2]|0;
       HEAP32[$2661>>2] = $2668;
       $2669 = (($53) + 8|0);
       $2670 = HEAP32[$2669>>2]|0;
       HEAP32[$2664>>2] = $2670;
       HEAP32[$2669>>2] = 0;
       HEAP32[$2667>>2] = 0;
       HEAP32[$53>>2] = 0;
      }
      $2671 = (($2659) + 16|0);
      HEAP32[$2658>>2] = $2671;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2619,$__v$i$i67);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i67);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($53);
     $$0 = $2613;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $2674 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $2675 = ($2674|0)==($first|0);
   if ($2675) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2676 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2674,$last,$db)|0);
   $2677 = ($2676|0)==($2674|0);
   if ($2677) {
    $$0 = $2674;
    STACKTOP = sp;return ($$0|0);
   }
   $2678 = (($db) + 4|0);
   $2679 = HEAP32[$2678>>2]|0;
   $2680 = HEAP32[$db>>2]|0;
   $2681 = $2679;
   $2682 = $2680;
   $2683 = (($2681) - ($2682))|0;
   $2684 = (($2683|0) / 24)&-1;
   $2685 = ($2684>>>0)<(2);
   if ($2685) {
    $$0 = $2674;
    STACKTOP = sp;return ($$0|0);
   }
   $2686 = (($2679) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($template_args,$2686);
   $2687 = HEAP32[$2678>>2]|0;
   $2688 = (($2687) + -24|0);
   $2690 = $2687;
   while(1) {
    $2689 = (($2690) + -24|0);
    HEAP32[$2678>>2] = $2689;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2689);
    $2691 = HEAP32[$2678>>2]|0;
    $2692 = ($2691|0)==($2688|0);
    if ($2692) {
     break;
    } else {
     $2690 = $2691;
    }
   }
   $2693 = (($2687) + -48|0);
   $2694 = HEAP8[$template_args>>0]|0;
   $2695 = $2694 & 1;
   $2696 = ($2695<<24>>24)==(0);
   if ($2696) {
    $2701 = (($template_args) + 1|0);
    $2702 = $2694&255;
    $2703 = $2702 >>> 1;
    $2704 = $2701;$2705 = $2703;
   } else {
    $2697 = (($template_args) + 8|0);
    $2698 = HEAP32[$2697>>2]|0;
    $2699 = (($template_args) + 4|0);
    $2700 = HEAP32[$2699>>2]|0;
    $2704 = $2698;$2705 = $2700;
   }
   __THREW__ = 0;
   (invoke_iiii(32,($2693|0),($2704|0),($2705|0))|0);
   $2706 = __THREW__; __THREW__ = 0;
   $2707 = $2706&1;
   do {
    if ($2707) {
     label = 911;
    } else {
     $2708 = HEAP32[$2678>>2]|0;
     $2709 = (($2708) + -24|0);
     $2710 = (($db) + 12|0);
     $2711 = HEAP32[$2710>>2]|0;
     HEAP32[$56>>2] = $2711;
     __THREW__ = 0;
     invoke_viii(42,($55|0),($2709|0),($56|0));
     $2712 = __THREW__; __THREW__ = 0;
     $2713 = $2712&1;
     if ($2713) {
      label = 911;
     } else {
      $2714 = (($db) + 16|0);
      $2715 = (($db) + 20|0);
      $2716 = HEAP32[$2715>>2]|0;
      $2717 = (($db) + 24|0);
      $2718 = HEAP32[$2717>>2]|0;
      $2719 = ($2716>>>0)<($2718>>>0);
      if ($2719) {
       $2720 = ($2716|0)==(0|0);
       if ($2720) {
        $2732 = 0;
       } else {
        $2721 = (($2716) + 4|0);
        $2722 = (($55) + 12|0);
        $2723 = HEAP32[$2722>>2]|0;
        $2724 = (($2716) + 8|0);
        $2725 = (($2716) + 12|0);
        HEAP32[$2725>>2] = $2723;
        $2726 = HEAP32[$55>>2]|0;
        HEAP32[$2716>>2] = $2726;
        $2727 = (($55) + 4|0);
        $2728 = HEAP32[$2727>>2]|0;
        HEAP32[$2721>>2] = $2728;
        $2729 = (($55) + 8|0);
        $2730 = HEAP32[$2729>>2]|0;
        HEAP32[$2724>>2] = $2730;
        HEAP32[$2729>>2] = 0;
        HEAP32[$2727>>2] = 0;
        HEAP32[$55>>2] = 0;
        $$pre$i40 = HEAP32[$2715>>2]|0;
        $2732 = $$pre$i40;
       }
       $2731 = (($2732) + 16|0);
       HEAP32[$2715>>2] = $2731;
      } else {
       $2733 = (($db) + 28|0);
       $2734 = HEAP32[$2714>>2]|0;
       $2735 = $2716;
       $2736 = $2734;
       $2737 = (($2735) - ($2736))|0;
       $2738 = $2737 >> 4;
       $2739 = (($2738) + 1)|0;
       $2740 = ($2739|0)<(0);
       if ($2740) {
        __THREW__ = 0;
        invoke_v(41);
        $2741 = __THREW__; __THREW__ = 0;
        $2742 = $2741&1;
        if ($2742) {
         $2768 = ___cxa_find_matching_catch()|0;
         $2769 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($55);
         $$9 = $2768;$$912 = $2769;
         break;
        } else {
         // unreachable;
        }
       }
       $2743 = $2718;
       $2744 = (($2743) - ($2736))|0;
       $2745 = $2744 >> 4;
       $2746 = ($2745>>>0)<(1073741823);
       if ($2746) {
        $2747 = $2744 >> 3;
        $2748 = ($2747>>>0)<($2739>>>0);
        $2749 = $2748 ? $2739 : $2747;
        $$0$i$i$i42 = $2749;
       } else {
        $$0$i$i$i42 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i39,$$0$i$i$i42,$2738,$2733);
       $2750 = (($__v$i$i39) + 8|0);
       $2751 = HEAP32[$2750>>2]|0;
       $2752 = ($2751|0)==(0|0);
       if (!($2752)) {
        $2753 = (($2751) + 4|0);
        $2754 = (($55) + 12|0);
        $2755 = HEAP32[$2754>>2]|0;
        $2756 = (($2751) + 8|0);
        $2757 = (($2751) + 12|0);
        HEAP32[$2757>>2] = $2755;
        $2758 = HEAP32[$55>>2]|0;
        HEAP32[$2751>>2] = $2758;
        $2759 = (($55) + 4|0);
        $2760 = HEAP32[$2759>>2]|0;
        HEAP32[$2753>>2] = $2760;
        $2761 = (($55) + 8|0);
        $2762 = HEAP32[$2761>>2]|0;
        HEAP32[$2756>>2] = $2762;
        HEAP32[$2761>>2] = 0;
        HEAP32[$2759>>2] = 0;
        HEAP32[$55>>2] = 0;
       }
       $2763 = (($2751) + 16|0);
       HEAP32[$2750>>2] = $2763;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2714,$__v$i$i39);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i39);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($55);
      if ($2696) {
       $$0 = $2676;
       STACKTOP = sp;return ($$0|0);
      }
      $2764 = (($template_args) + 8|0);
      $2765 = HEAP32[$2764>>2]|0;
      _free($2765);
      $$0 = $2676;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 911) {
    $2766 = ___cxa_find_matching_catch()|0;
    $2767 = tempRet0;
    $$9 = $2766;$$912 = $2767;
   }
   if ($2696) {
    $$10 = $$9;$$1013 = $$912;
    ___resumeException($$10|0);
    // unreachable;
   }
   $2770 = (($template_args) + 8|0);
   $2771 = HEAP32[$2770>>2]|0;
   _free($2771);
   $$10 = $$9;$$1013 = $$912;
   ___resumeException($$10|0);
   // unreachable;
   break;
  }
  case 68:  {
   $2772 = (($first) + 1|0);
   $2773 = ($2772|0)==($last|0);
   if (!($2773)) {
    $2774 = HEAP8[$2772>>0]|0;
    $2775 = $2774 << 24 >> 24;
    if ((($2775|0) == 112)) {
     $2776 = (($db) + 4|0);
     $2777 = HEAP32[$2776>>2]|0;
     $2778 = HEAP32[$db>>2]|0;
     $2779 = $2777;
     $2780 = $2778;
     $2781 = (($2779) - ($2780))|0;
     $2782 = (($2781|0) / 24)&-1;
     $2783 = (($first) + 2|0);
     $2784 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2783,$last,$db)|0);
     $2785 = HEAP32[$2776>>2]|0;
     $2786 = HEAP32[$db>>2]|0;
     $2787 = $2785;
     $2788 = $2786;
     $2789 = (($2787) - ($2788))|0;
     $2790 = (($2789|0) / 24)&-1;
     $2791 = ($2784|0)==($2783|0);
     if ($2791) {
      break L103;
     }
     $2792 = (($db) + 16|0);
     $2793 = (($db) + 12|0);
     $2794 = HEAP32[$2793>>2]|0;
     $2795 = (($db) + 20|0);
     $2796 = HEAP32[$2795>>2]|0;
     $2797 = (($db) + 24|0);
     $2798 = HEAP32[$2797>>2]|0;
     $2799 = ($2796>>>0)<($2798>>>0);
     if ($2799) {
      $2800 = ($2796|0)==(0|0);
      if ($2800) {
       $2805 = 0;
      } else {
       HEAP32[$2796>>2] = 0;
       $2801 = (($2796) + 4|0);
       HEAP32[$2801>>2] = 0;
       $2802 = (($2796) + 8|0);
       HEAP32[$2802>>2] = 0;
       $2803 = (($2796) + 12|0);
       HEAP32[$2803>>2] = $2794;
       $$pre$i36 = HEAP32[$2795>>2]|0;
       $2805 = $$pre$i36;
      }
      $2804 = (($2805) + 16|0);
      HEAP32[$2795>>2] = $2804;
     } else {
      $2806 = (($db) + 28|0);
      $2807 = HEAP32[$2792>>2]|0;
      $2808 = $2796;
      $2809 = $2807;
      $2810 = (($2808) - ($2809))|0;
      $2811 = $2810 >> 4;
      $2812 = (($2811) + 1)|0;
      $2813 = ($2812|0)<(0);
      if ($2813) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
       // unreachable;
      }
      $2814 = $2798;
      $2815 = (($2814) - ($2809))|0;
      $2816 = $2815 >> 4;
      $2817 = ($2816>>>0)<(1073741823);
      if ($2817) {
       $2818 = $2815 >> 3;
       $2819 = ($2818>>>0)<($2812>>>0);
       $2820 = $2819 ? $2812 : $2818;
       $$0$i$i$i37 = $2820;
      } else {
       $$0$i$i$i37 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i35,$$0$i$i$i37,$2811,$2806);
      $2821 = (($__v$i$i35) + 8|0);
      $2822 = HEAP32[$2821>>2]|0;
      $2823 = ($2822|0)==(0|0);
      if (!($2823)) {
       HEAP32[$2822>>2] = 0;
       $2824 = (($2822) + 4|0);
       HEAP32[$2824>>2] = 0;
       $2825 = (($2822) + 8|0);
       HEAP32[$2825>>2] = 0;
       $2826 = (($2822) + 12|0);
       HEAP32[$2826>>2] = $2794;
      }
      $2827 = (($2822) + 16|0);
      HEAP32[$2821>>2] = $2827;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2792,$__v$i$i35);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i35);
     }
     $2828 = ($2782>>>0)<($2790>>>0);
     if (!($2828)) {
      $$0 = $2784;
      STACKTOP = sp;return ($$0|0);
     }
     $2829 = (($__v$i$i32) + 8|0);
     $k20$0428 = $2782;
     while(1) {
      $2830 = HEAP32[$2795>>2]|0;
      $2831 = (($2830) + -16|0);
      $2832 = HEAP32[$db>>2]|0;
      $2833 = (($2832) + (($k20$0428*24)|0)|0);
      $2834 = (($2830) + -12|0);
      $2835 = HEAP32[$2834>>2]|0;
      $2836 = (($2830) + -8|0);
      $2837 = HEAP32[$2836>>2]|0;
      $2838 = ($2835|0)==($2837|0);
      if ($2838) {
       $2853 = (($2830) + -4|0);
       $2854 = HEAP32[$2831>>2]|0;
       $2855 = $2835;
       $2856 = $2854;
       $2857 = (($2855) - ($2856))|0;
       $2858 = (($2857|0) / 24)&-1;
       $2859 = (($2858) + 1)|0;
       $2860 = ($2859|0)<(0);
       if ($2860) {
        label = 940;
        break;
       }
       $2861 = ($2858>>>0)<(1073741823);
       if ($2861) {
        $2862 = $2858 << 1;
        $2863 = ($2862>>>0)<($2859>>>0);
        $2864 = $2863 ? $2859 : $2862;
        $$0$i$i$i34 = $2864;
       } else {
        $$0$i$i$i34 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i32,$$0$i$i$i34,$2858,$2853);
       $2865 = HEAP32[$2829>>2]|0;
       $2866 = ($2865|0)==(0|0);
       if (!($2866)) {
        __THREW__ = 0;
        invoke_vii(39,($2865|0),($2833|0));
        $2867 = __THREW__; __THREW__ = 0;
        $2868 = $2867&1;
        if ($2868) {
         label = 948;
         break;
        }
        $2869 = (($2865) + 12|0);
        $2870 = ((($2832) + (($k20$0428*24)|0)|0) + 12|0);
        __THREW__ = 0;
        invoke_vii(39,($2869|0),($2870|0));
        $2871 = __THREW__; __THREW__ = 0;
        $2872 = $2871&1;
        if ($2872) {
         label = 946;
         break;
        }
       }
       $2882 = (($2865) + 24|0);
       HEAP32[$2829>>2] = $2882;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2831,$__v$i$i32);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
      } else {
       $2839 = ($2835|0)==(0|0);
       if ($2839) {
        $2852 = 0;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2835,$2833);
        $2840 = (($2835) + 12|0);
        $2841 = ((($2832) + (($k20$0428*24)|0)|0) + 12|0);
        __THREW__ = 0;
        invoke_vii(39,($2840|0),($2841|0));
        $2842 = __THREW__; __THREW__ = 0;
        $2843 = $2842&1;
        if ($2843) {
         label = 935;
         break;
        }
        $$pre$i33 = HEAP32[$2834>>2]|0;
        $2852 = $$pre$i33;
       }
       $2851 = (($2852) + 24|0);
       HEAP32[$2834>>2] = $2851;
      }
      $2883 = (($k20$0428) + 1)|0;
      $2884 = ($2883>>>0)<($2790>>>0);
      if ($2884) {
       $k20$0428 = $2883;
      } else {
       $$0 = $2784;
       label = 1090;
       break;
      }
     }
     if ((label|0) == 935) {
      $2844 = ___cxa_find_matching_catch()|0;
      $2845 = tempRet0;
      $2846 = HEAP8[$2835>>0]|0;
      $2847 = $2846 & 1;
      $2848 = ($2847<<24>>24)==(0);
      if ($2848) {
       ___resumeException($2844|0);
       // unreachable;
      }
      $2849 = (($2835) + 8|0);
      $2850 = HEAP32[$2849>>2]|0;
      _free($2850);
      ___resumeException($2844|0);
      // unreachable;
     }
     else if ((label|0) == 940) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
      // unreachable;
     }
     else if ((label|0) == 946) {
      $2873 = ___cxa_find_matching_catch()|0;
      $2874 = tempRet0;
      $2875 = HEAP8[$2865>>0]|0;
      $2876 = $2875 & 1;
      $2877 = ($2876<<24>>24)==(0);
      if ($2877) {
       $eh$lpad$body$i$i$index45Z2D = $2874;$eh$lpad$body$i$i$indexZ2D = $2873;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
       ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
       // unreachable;
      }
      $2878 = (($2865) + 8|0);
      $2879 = HEAP32[$2878>>2]|0;
      _free($2879);
      $eh$lpad$body$i$i$index45Z2D = $2874;$eh$lpad$body$i$i$indexZ2D = $2873;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 948) {
      $2880 = ___cxa_find_matching_catch()|0;
      $2881 = tempRet0;
      $eh$lpad$body$i$i$index45Z2D = $2881;$eh$lpad$body$i$i$indexZ2D = $2880;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 1090) {
      STACKTOP = sp;return ($$0|0);
     }
    } else if ((($2775|0) == 84) | (($2775|0) == 116)) {
     $2885 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $2886 = ($2885|0)==($first|0);
     if ($2886) {
      break L103;
     }
     $2887 = HEAP32[$db>>2]|0;
     $2888 = (($db) + 4|0);
     $2889 = HEAP32[$2888>>2]|0;
     $2890 = ($2887|0)==($2889|0);
     if ($2890) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2891 = (($db) + 16|0);
     $2892 = (($2889) + -24|0);
     $2893 = (($db) + 12|0);
     $2894 = HEAP32[$2893>>2]|0;
     HEAP32[$58>>2] = $2894;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($57,$2892,$58);
     $2895 = (($db) + 20|0);
     $2896 = HEAP32[$2895>>2]|0;
     $2897 = (($db) + 24|0);
     $2898 = HEAP32[$2897>>2]|0;
     $2899 = ($2896>>>0)<($2898>>>0);
     if ($2899) {
      $2900 = ($2896|0)==(0|0);
      if ($2900) {
       $2912 = 0;
      } else {
       $2901 = (($2896) + 4|0);
       $2902 = (($57) + 12|0);
       $2903 = HEAP32[$2902>>2]|0;
       $2904 = (($2896) + 8|0);
       $2905 = (($2896) + 12|0);
       HEAP32[$2905>>2] = $2903;
       $2906 = HEAP32[$57>>2]|0;
       HEAP32[$2896>>2] = $2906;
       $2907 = (($57) + 4|0);
       $2908 = HEAP32[$2907>>2]|0;
       HEAP32[$2901>>2] = $2908;
       $2909 = (($57) + 8|0);
       $2910 = HEAP32[$2909>>2]|0;
       HEAP32[$2904>>2] = $2910;
       HEAP32[$2909>>2] = 0;
       HEAP32[$2907>>2] = 0;
       HEAP32[$57>>2] = 0;
       $$pre$i25 = HEAP32[$2895>>2]|0;
       $2912 = $$pre$i25;
      }
      $2911 = (($2912) + 16|0);
      HEAP32[$2895>>2] = $2911;
     } else {
      $2913 = (($db) + 28|0);
      $2914 = HEAP32[$2891>>2]|0;
      $2915 = $2896;
      $2916 = $2914;
      $2917 = (($2915) - ($2916))|0;
      $2918 = $2917 >> 4;
      $2919 = (($2918) + 1)|0;
      $2920 = ($2919|0)<(0);
      if ($2920) {
       __THREW__ = 0;
       invoke_v(41);
       $2921 = __THREW__; __THREW__ = 0;
       $2922 = $2921&1;
       if (!($2922)) {
        // unreachable;
       }
       $2944 = ___cxa_find_matching_catch()|0;
       $2945 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($57);
       $$10 = $2944;$$1013 = $2945;
       ___resumeException($$10|0);
       // unreachable;
      }
      $2923 = $2898;
      $2924 = (($2923) - ($2916))|0;
      $2925 = $2924 >> 4;
      $2926 = ($2925>>>0)<(1073741823);
      if ($2926) {
       $2927 = $2924 >> 3;
       $2928 = ($2927>>>0)<($2919>>>0);
       $2929 = $2928 ? $2919 : $2927;
       $$0$i$i$i27 = $2929;
      } else {
       $$0$i$i$i27 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i24,$$0$i$i$i27,$2918,$2913);
      $2930 = (($__v$i$i24) + 8|0);
      $2931 = HEAP32[$2930>>2]|0;
      $2932 = ($2931|0)==(0|0);
      if (!($2932)) {
       $2933 = (($2931) + 4|0);
       $2934 = (($57) + 12|0);
       $2935 = HEAP32[$2934>>2]|0;
       $2936 = (($2931) + 8|0);
       $2937 = (($2931) + 12|0);
       HEAP32[$2937>>2] = $2935;
       $2938 = HEAP32[$57>>2]|0;
       HEAP32[$2931>>2] = $2938;
       $2939 = (($57) + 4|0);
       $2940 = HEAP32[$2939>>2]|0;
       HEAP32[$2933>>2] = $2940;
       $2941 = (($57) + 8|0);
       $2942 = HEAP32[$2941>>2]|0;
       HEAP32[$2936>>2] = $2942;
       HEAP32[$2941>>2] = 0;
       HEAP32[$2939>>2] = 0;
       HEAP32[$57>>2] = 0;
      }
      $2943 = (($2931) + 16|0);
      HEAP32[$2930>>2] = $2943;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2891,$__v$i$i24);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i24);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($57);
     $$0 = $2885;
     STACKTOP = sp;return ($$0|0);
    } else if ((($2775|0) == 118)) {
     $2946 = $last;
     $2947 = $first;
     $2948 = (($2946) - ($2947))|0;
     $2949 = ($2948|0)>(3);
     $2950 = ($235<<24>>24)==(68);
     $or$cond522 = $2949 & $2950;
     $2951 = ($2774<<24>>24)==(118);
     $or$cond523 = $or$cond522 & $2951;
     L1473: do {
      if ($or$cond523) {
       $2952 = (($first) + 2|0);
       $2953 = HEAP8[$2952>>0]|0;
       $$off = (($2953) + -49)<<24>>24;
       $2954 = ($$off&255)<(9);
       if (!($2954)) {
        ;HEAP32[$num1$i+0>>2]=0|0;HEAP32[$num1$i+4>>2]=0|0;HEAP32[$num1$i+8>>2]=0|0;
        $3091 = ($2953<<24>>24)==(95);
        if ($3091) {
         $t12$0$i = $2952;
         label = 1029;
        } else {
         __THREW__ = 0;
         $3092 = (invoke_iiii(45,($2952|0),($last|0),($db|0))|0);
         $3093 = __THREW__; __THREW__ = 0;
         $3094 = $3093&1;
         if ($3094) {
          label = 1025;
         } else {
          $3095 = ($3092|0)==($2952|0);
          if ($3095) {
           $t12$0$i = $2952;
           label = 1029;
          } else {
           $3096 = HEAP32[$db>>2]|0;
           $3097 = (($db) + 4|0);
           $3098 = HEAP32[$3097>>2]|0;
           $3099 = ($3096|0)==($3098|0);
           if ($3099) {
            $$1$i328 = $first;
            break;
           }
           $3102 = (($3098) + -24|0);
           __THREW__ = 0;
           invoke_vii(36,($6|0),($3102|0));
           $3103 = __THREW__; __THREW__ = 0;
           $3104 = $3103&1;
           if ($3104) {
            label = 1025;
           } else {
            ;HEAP32[$num1$i+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$num1$i+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$num1$i+8>>2]=HEAP32[$6+8>>2]|0;
            ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
            $$pre212 = HEAP32[$3097>>2]|0;
            $3105 = (($$pre212) + -24|0);
            $3107 = $$pre212;
            while(1) {
             $3106 = (($3107) + -24|0);
             HEAP32[$3097>>2] = $3106;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3106);
             $3108 = HEAP32[$3097>>2]|0;
             $3109 = ($3108|0)==($3105|0);
             if ($3109) {
              $t12$0$i = $3092;
              label = 1029;
              break;
             } else {
              $3107 = $3108;
             }
            }
           }
          }
         }
        }
        L1485: do {
         if ((label|0) == 1029) {
          $3110 = ($t12$0$i|0)==($last|0);
          L1487: do {
           if ($3110) {
            $$13$i324$ph = $first;
           } else {
            $3111 = HEAP8[$t12$0$i>>0]|0;
            $3112 = ($3111<<24>>24)==(95);
            if ($3112) {
             $3113 = (($t12$0$i) + 1|0);
             $3114 = ($3113|0)==($last|0);
             if ($3114) {
              $$13$i324$ph = $first;
             } else {
              __THREW__ = 0;
              $3115 = (invoke_iiii(34,($3113|0),($last|0),($db|0))|0);
              $3116 = __THREW__; __THREW__ = 0;
              $3117 = $3116&1;
              if ($3117) {
               label = 1025;
               break L1485;
              }
              $3118 = ($3115|0)==($3113|0);
              if ($3118) {
               $$13$i324$ph = $first;
              } else {
               $3119 = HEAP32[$db>>2]|0;
               $3120 = (($db) + 4|0);
               $3121 = HEAP32[$3120>>2]|0;
               $3122 = ($3119|0)==($3121|0);
               if ($3122) {
                $$pre211 = HEAP8[$num1$i>>0]|0;
                $phitmp = $$pre211 & 1;
                $phitmp214 = ($phitmp<<24>>24)==(0);
                if ($phitmp214) {
                 $$1$i328 = $first;
                 break L1473;
                }
                $3166 = (($num1$i) + 8|0);
                $3167 = HEAP32[$3166>>2]|0;
                _free($3167);
                $$1$i328 = $first;
                break L1473;
               }
               $3123 = (($3121) + -24|0);
               __THREW__ = 0;
               invoke_viii(46,($8|0),(2104|0),($num1$i|0));
               $3124 = __THREW__; __THREW__ = 0;
               $3125 = $3124&1;
               if ($3125) {
                label = 1025;
                break L1485;
               }
               __THREW__ = 0;
               $3126 = (invoke_iiii(32,($8|0),(2120|0),1)|0);
               $3127 = __THREW__; __THREW__ = 0;
               $3128 = $3127&1;
               do {
                if ($3128) {
                 $3150 = ___cxa_find_matching_catch()|0;
                 $3151 = tempRet0;
                 $$4$i323 = $3151;$$411$i = $3150;
                } else {
                 ;HEAP32[$7+0>>2]=HEAP32[$3126+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$3126+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$3126+8>>2]|0;
                 ;HEAP32[$3126+0>>2]=0|0;HEAP32[$3126+4>>2]=0|0;HEAP32[$3126+8>>2]=0|0;
                 $3129 = HEAP8[$7>>0]|0;
                 $3130 = $3129 & 1;
                 $3131 = ($3130<<24>>24)==(0);
                 if ($3131) {
                  $3136 = (($7) + 1|0);
                  $3137 = $3129&255;
                  $3138 = $3137 >>> 1;
                  $3139 = $3136;$3140 = $3138;
                 } else {
                  $3132 = (($7) + 8|0);
                  $3133 = HEAP32[$3132>>2]|0;
                  $3134 = (($7) + 4|0);
                  $3135 = HEAP32[$3134>>2]|0;
                  $3139 = $3133;$3140 = $3135;
                 }
                 __THREW__ = 0;
                 (invoke_iiii(32,($3123|0),($3139|0),($3140|0))|0);
                 $3141 = __THREW__; __THREW__ = 0;
                 $3142 = $3141&1;
                 if ($3142) {
                  $3152 = ___cxa_find_matching_catch()|0;
                  $3153 = tempRet0;
                  if ($3131) {
                   $$4$i323 = $3153;$$411$i = $3152;
                   break;
                  }
                  $3154 = (($7) + 8|0);
                  $3155 = HEAP32[$3154>>2]|0;
                  _free($3155);
                  $$4$i323 = $3153;$$411$i = $3152;
                  break;
                 }
                 if (!($3131)) {
                  $3143 = (($7) + 8|0);
                  $3144 = HEAP32[$3143>>2]|0;
                  _free($3144);
                 }
                 $3145 = HEAP8[$8>>0]|0;
                 $3146 = $3145 & 1;
                 $3147 = ($3146<<24>>24)==(0);
                 if ($3147) {
                  $$13$i324$ph = $3115;
                  break L1487;
                 }
                 $3148 = (($8) + 8|0);
                 $3149 = HEAP32[$3148>>2]|0;
                 _free($3149);
                 $$13$i324$ph = $3115;
                 break L1487;
                }
               } while(0);
               $3156 = HEAP8[$8>>0]|0;
               $3157 = $3156 & 1;
               $3158 = ($3157<<24>>24)==(0);
               if ($3158) {
                $$5$i326 = $$4$i323;$$512$i = $$411$i;
                break L1485;
               }
               $3159 = (($8) + 8|0);
               $3160 = HEAP32[$3159>>2]|0;
               _free($3160);
               $$5$i326 = $$4$i323;$$512$i = $$411$i;
               break L1485;
              }
             }
            } else {
             $$13$i324$ph = $first;
            }
           }
          } while(0);
          $3161 = HEAP8[$num1$i>>0]|0;
          $3162 = $3161 & 1;
          $3163 = ($3162<<24>>24)==(0);
          if ($3163) {
           $$1$i328 = $$13$i324$ph;
           break L1473;
          }
          $3164 = (($num1$i) + 8|0);
          $3165 = HEAP32[$3164>>2]|0;
          _free($3165);
          $$1$i328 = $$13$i324$ph;
          break L1473;
         }
        } while(0);
        if ((label|0) == 1025) {
         $3100 = ___cxa_find_matching_catch()|0;
         $3101 = tempRet0;
         $$5$i326 = $3101;$$512$i = $3100;
        }
        $3168 = HEAP8[$num1$i>>0]|0;
        $3169 = $3168 & 1;
        $3170 = ($3169<<24>>24)==(0);
        if ($3170) {
         $$6$i329 = $$5$i326;$$613$i = $$512$i;
         ___resumeException($$613$i|0);
         // unreachable;
        }
        $3171 = (($num1$i) + 8|0);
        $3172 = HEAP32[$3171>>2]|0;
        _free($3172);
        $$6$i329 = $$5$i326;$$613$i = $$512$i;
        ___resumeException($$613$i|0);
        // unreachable;
       }
       $2955 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2952,$last)|0);
       $2956 = ($2955|0)==($last|0);
       if ($2956) {
        $$1$i328 = $first;
       } else {
        $2957 = HEAP8[$2955>>0]|0;
        $2958 = ($2957<<24>>24)==(95);
        if ($2958) {
         $2959 = $2955;
         $2960 = $2952;
         $2961 = (($2959) - ($2960))|0;
         $2962 = (($2955) + 1|0);
         $2963 = ($2962|0)==($last|0);
         if ($2963) {
          $$1$i328 = $first;
         } else {
          $2964 = HEAP8[$2962>>0]|0;
          $2965 = ($2964<<24>>24)==(112);
          if (!($2965)) {
           $2966 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2962,$last,$db)|0);
           $2967 = ($2966|0)==($2962|0);
           if ($2967) {
            $$1$i328 = $first;
            break;
           }
           $2968 = HEAP32[$db>>2]|0;
           $2969 = (($db) + 4|0);
           $2970 = HEAP32[$2969>>2]|0;
           $2971 = ($2968|0)==($2970|0);
           if ($2971) {
            $$1$i328 = $first;
            break;
           }
           $2972 = (($2970) + -24|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$2952,$2961);
           __THREW__ = 0;
           $2973 = (invoke_iiiii(33,($2|0),0,(2104|0),8)|0);
           $2974 = __THREW__; __THREW__ = 0;
           $2975 = $2974&1;
           if ($2975) {
            $3005 = ___cxa_find_matching_catch()|0;
            $3006 = tempRet0;
            $$15$i = $3006;$$18$i = $3005;
           } else {
            ;HEAP32[$1+0>>2]=HEAP32[$2973+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2973+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2973+8>>2]|0;
            ;HEAP32[$2973+0>>2]=0|0;HEAP32[$2973+4>>2]=0|0;HEAP32[$2973+8>>2]=0|0;
            __THREW__ = 0;
            $2976 = (invoke_iiii(32,($1|0),(2120|0),1)|0);
            $2977 = __THREW__; __THREW__ = 0;
            $2978 = $2977&1;
            do {
             if ($2978) {
              $3007 = ___cxa_find_matching_catch()|0;
              $3008 = tempRet0;
              $$04$i302 = $3008;$$07$i = $3007;
             } else {
              ;HEAP32[$0+0>>2]=HEAP32[$2976+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2976+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2976+8>>2]|0;
              ;HEAP32[$2976+0>>2]=0|0;HEAP32[$2976+4>>2]=0|0;HEAP32[$2976+8>>2]=0|0;
              $2979 = HEAP8[$0>>0]|0;
              $2980 = $2979 & 1;
              $2981 = ($2980<<24>>24)==(0);
              if ($2981) {
               $2986 = (($0) + 1|0);
               $2987 = $2979&255;
               $2988 = $2987 >>> 1;
               $2989 = $2986;$2990 = $2988;
              } else {
               $2982 = (($0) + 8|0);
               $2983 = HEAP32[$2982>>2]|0;
               $2984 = (($0) + 4|0);
               $2985 = HEAP32[$2984>>2]|0;
               $2989 = $2983;$2990 = $2985;
              }
              __THREW__ = 0;
              (invoke_iiii(32,($2972|0),($2989|0),($2990|0))|0);
              $2991 = __THREW__; __THREW__ = 0;
              $2992 = $2991&1;
              if ($2992) {
               $3009 = ___cxa_find_matching_catch()|0;
               $3010 = tempRet0;
               if ($2981) {
                $$04$i302 = $3010;$$07$i = $3009;
                break;
               }
               $3011 = (($0) + 8|0);
               $3012 = HEAP32[$3011>>2]|0;
               _free($3012);
               $$04$i302 = $3010;$$07$i = $3009;
               break;
              }
              if (!($2981)) {
               $2993 = (($0) + 8|0);
               $2994 = HEAP32[$2993>>2]|0;
               _free($2994);
              }
              $2995 = HEAP8[$1>>0]|0;
              $2996 = $2995 & 1;
              $2997 = ($2996<<24>>24)==(0);
              if (!($2997)) {
               $2998 = (($1) + 8|0);
               $2999 = HEAP32[$2998>>2]|0;
               _free($2999);
              }
              $3000 = HEAP8[$2>>0]|0;
              $3001 = $3000 & 1;
              $3002 = ($3001<<24>>24)==(0);
              if ($3002) {
               $$1$i328 = $2966;
               break L1473;
              }
              $3003 = (($2) + 8|0);
              $3004 = HEAP32[$3003>>2]|0;
              _free($3004);
              $$1$i328 = $2966;
              break L1473;
             }
            } while(0);
            $3013 = HEAP8[$1>>0]|0;
            $3014 = $3013 & 1;
            $3015 = ($3014<<24>>24)==(0);
            if ($3015) {
             $$15$i = $$04$i302;$$18$i = $$07$i;
            } else {
             $3016 = (($1) + 8|0);
             $3017 = HEAP32[$3016>>2]|0;
             _free($3017);
             $$15$i = $$04$i302;$$18$i = $$07$i;
            }
           }
           $3018 = HEAP8[$2>>0]|0;
           $3019 = $3018 & 1;
           $3020 = ($3019<<24>>24)==(0);
           if ($3020) {
            $$6$i329 = $$15$i;$$613$i = $$18$i;
            ___resumeException($$613$i|0);
            // unreachable;
           }
           $3021 = (($2) + 8|0);
           $3022 = HEAP32[$3021>>2]|0;
           _free($3022);
           $$6$i329 = $$15$i;$$613$i = $$18$i;
           ___resumeException($$613$i|0);
           // unreachable;
          }
          $3023 = (($2955) + 2|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5,$2952,$2961);
          __THREW__ = 0;
          $3024 = (invoke_iiiii(33,($5|0),0,(2128|0),13)|0);
          $3025 = __THREW__; __THREW__ = 0;
          $3026 = $3025&1;
          if ($3026) {
           $3075 = ___cxa_find_matching_catch()|0;
           $3076 = tempRet0;
           $$3$i303 = $3076;$$310$i = $3075;
          } else {
           ;HEAP32[$4+0>>2]=HEAP32[$3024+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3024+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3024+8>>2]|0;
           ;HEAP32[$3024+0>>2]=0|0;HEAP32[$3024+4>>2]=0|0;HEAP32[$3024+8>>2]=0|0;
           __THREW__ = 0;
           $3027 = (invoke_iiii(32,($4|0),(2120|0),1)|0);
           $3028 = __THREW__; __THREW__ = 0;
           $3029 = $3028&1;
           do {
            if ($3029) {
             $3077 = ___cxa_find_matching_catch()|0;
             $3078 = tempRet0;
             $$26$i = $3078;$$29$i = $3077;
            } else {
             $3030 = HEAP8[$3027>>0]|0;
             $3031 = (($3027) + 1|0);
             ;HEAP8[$$sroa$7+0>>0]=HEAP8[$3031+0>>0]|0;HEAP8[$$sroa$7+1>>0]=HEAP8[$3031+1>>0]|0;HEAP8[$$sroa$7+2>>0]=HEAP8[$3031+2>>0]|0;HEAP8[$$sroa$7+3>>0]=HEAP8[$3031+3>>0]|0;HEAP8[$$sroa$7+4>>0]=HEAP8[$3031+4>>0]|0;HEAP8[$$sroa$7+5>>0]=HEAP8[$3031+5>>0]|0;HEAP8[$$sroa$7+6>>0]=HEAP8[$3031+6>>0]|0;
             $3032 = (($3027) + 8|0);
             $3033 = HEAP32[$3032>>2]|0;
             ;HEAP32[$3027+0>>2]=0|0;HEAP32[$3027+4>>2]=0|0;HEAP32[$3027+8>>2]=0|0;
             HEAP8[$3>>0] = $3030;
             $3034 = (($3) + 1|0);
             ;HEAP8[$3034+0>>0]=HEAP8[$$sroa$7+0>>0]|0;HEAP8[$3034+1>>0]=HEAP8[$$sroa$7+1>>0]|0;HEAP8[$3034+2>>0]=HEAP8[$$sroa$7+2>>0]|0;HEAP8[$3034+3>>0]=HEAP8[$$sroa$7+3>>0]|0;HEAP8[$3034+4>>0]=HEAP8[$$sroa$7+4>>0]|0;HEAP8[$3034+5>>0]=HEAP8[$$sroa$7+5>>0]|0;HEAP8[$3034+6>>0]=HEAP8[$$sroa$7+6>>0]|0;
             $3035 = (($3) + 8|0);
             HEAP32[$3035>>2] = $3033;
             ;HEAP8[$$sroa$7+0>>0]=0|0;HEAP8[$$sroa$7+1>>0]=0|0;HEAP8[$$sroa$7+2>>0]=0|0;HEAP8[$$sroa$7+3>>0]=0|0;HEAP8[$$sroa$7+4>>0]=0|0;HEAP8[$$sroa$7+5>>0]=0|0;HEAP8[$$sroa$7+6>>0]=0|0;
             $3036 = (($3) + 12|0);
             ;HEAP32[$3036+0>>2]=0|0;HEAP32[$3036+4>>2]=0|0;HEAP32[$3036+8>>2]=0|0;
             $3037 = (($db) + 4|0);
             $3038 = HEAP32[$3037>>2]|0;
             $3039 = (($db) + 8|0);
             $3040 = HEAP32[$3039>>2]|0;
             $3041 = ($3038>>>0)<($3040>>>0);
             if ($3041) {
              $3042 = ($3038|0)==(0|0);
              if ($3042) {
               $3045 = 0;
              } else {
               ;HEAP32[$3038+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$3038+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$3038+8>>2]=HEAP32[$3+8>>2]|0;
               ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
               $3043 = (($3038) + 12|0);
               ;HEAP32[$3043+0>>2]=HEAP32[$3036+0>>2]|0;HEAP32[$3043+4>>2]=HEAP32[$3036+4>>2]|0;HEAP32[$3043+8>>2]=HEAP32[$3036+8>>2]|0;
               ;HEAP32[$3036+0>>2]=0|0;HEAP32[$3036+4>>2]=0|0;HEAP32[$3036+8>>2]=0|0;
               $$pre$i$i = HEAP32[$3037>>2]|0;
               $3045 = $$pre$i$i;
              }
              $3044 = (($3045) + 24|0);
              HEAP32[$3037>>2] = $3044;
             } else {
              $3046 = (($db) + 12|0);
              $3047 = HEAP32[$db>>2]|0;
              $3048 = $3038;
              $3049 = $3047;
              $3050 = (($3048) - ($3049))|0;
              $3051 = (($3050|0) / 24)&-1;
              $3052 = (($3051) + 1)|0;
              $3053 = ($3052|0)<(0);
              if ($3053) {
               __THREW__ = 0;
               invoke_v(41);
               $3054 = __THREW__; __THREW__ = 0;
               $3055 = $3054&1;
               if ($3055) {
                $3079 = ___cxa_find_matching_catch()|0;
                $3080 = tempRet0;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
                $$26$i = $3080;$$29$i = $3079;
                break;
               } else {
                // unreachable;
               }
              }
              $3056 = $3040;
              $3057 = (($3056) - ($3049))|0;
              $3058 = (($3057|0) / 24)&-1;
              $3059 = ($3058>>>0)<(1073741823);
              if ($3059) {
               $3060 = $3058 << 1;
               $3061 = ($3060>>>0)<($3052>>>0);
               $3062 = $3061 ? $3052 : $3060;
               $$0$i$i$i$i = $3062;
              } else {
               $$0$i$i$i$i = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$3051,$3046);
              $3063 = (($__v$i$i$i) + 8|0);
              $3064 = HEAP32[$3063>>2]|0;
              $3065 = ($3064|0)==(0|0);
              if (!($3065)) {
               ;HEAP32[$3064+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$3064+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$3064+8>>2]=HEAP32[$3+8>>2]|0;
               ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
               $3066 = (($3064) + 12|0);
               ;HEAP32[$3066+0>>2]=HEAP32[$3036+0>>2]|0;HEAP32[$3066+4>>2]=HEAP32[$3036+4>>2]|0;HEAP32[$3066+8>>2]=HEAP32[$3036+8>>2]|0;
               ;HEAP32[$3036+0>>2]=0|0;HEAP32[$3036+4>>2]=0|0;HEAP32[$3036+8>>2]=0|0;
              }
              $3067 = (($3064) + 24|0);
              HEAP32[$3063>>2] = $3067;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
             $$pre209 = HEAP8[$4>>0]|0;
             $phitmp215 = $$pre209 & 1;
             $phitmp216 = ($phitmp215<<24>>24)==(0);
             if (!($phitmp216)) {
              $3068 = (($4) + 8|0);
              $3069 = HEAP32[$3068>>2]|0;
              _free($3069);
             }
             $3070 = HEAP8[$5>>0]|0;
             $3071 = $3070 & 1;
             $3072 = ($3071<<24>>24)==(0);
             if ($3072) {
              $$1$i328 = $3023;
              break L1473;
             }
             $3073 = (($5) + 8|0);
             $3074 = HEAP32[$3073>>2]|0;
             _free($3074);
             $$1$i328 = $3023;
             break L1473;
            }
           } while(0);
           $3081 = HEAP8[$4>>0]|0;
           $3082 = $3081 & 1;
           $3083 = ($3082<<24>>24)==(0);
           if ($3083) {
            $$3$i303 = $$26$i;$$310$i = $$29$i;
           } else {
            $3084 = (($4) + 8|0);
            $3085 = HEAP32[$3084>>2]|0;
            _free($3085);
            $$3$i303 = $$26$i;$$310$i = $$29$i;
           }
          }
          $3086 = HEAP8[$5>>0]|0;
          $3087 = $3086 & 1;
          $3088 = ($3087<<24>>24)==(0);
          if ($3088) {
           $$6$i329 = $$3$i303;$$613$i = $$310$i;
           ___resumeException($$613$i|0);
           // unreachable;
          }
          $3089 = (($5) + 8|0);
          $3090 = HEAP32[$3089>>2]|0;
          _free($3090);
          $$6$i329 = $$3$i303;$$613$i = $$310$i;
          ___resumeException($$613$i|0);
          // unreachable;
         }
        } else {
         $$1$i328 = $first;
        }
       }
      } else {
       $$1$i328 = $first;
      }
     } while(0);
     $3173 = ($$1$i328|0)==($first|0);
     if ($3173) {
      break L103;
     }
     $3174 = HEAP32[$db>>2]|0;
     $3175 = (($db) + 4|0);
     $3176 = HEAP32[$3175>>2]|0;
     $3177 = ($3174|0)==($3176|0);
     if ($3177) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $3178 = (($db) + 16|0);
     $3179 = (($3176) + -24|0);
     $3180 = (($db) + 12|0);
     $3181 = HEAP32[$3180>>2]|0;
     HEAP32[$60>>2] = $3181;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($59,$3179,$60);
     $3182 = (($db) + 20|0);
     $3183 = HEAP32[$3182>>2]|0;
     $3184 = (($db) + 24|0);
     $3185 = HEAP32[$3184>>2]|0;
     $3186 = ($3183>>>0)<($3185>>>0);
     if ($3186) {
      $3187 = ($3183|0)==(0|0);
      if ($3187) {
       $3199 = 0;
      } else {
       $3188 = (($3183) + 4|0);
       $3189 = (($59) + 12|0);
       $3190 = HEAP32[$3189>>2]|0;
       $3191 = (($3183) + 8|0);
       $3192 = (($3183) + 12|0);
       HEAP32[$3192>>2] = $3190;
       $3193 = HEAP32[$59>>2]|0;
       HEAP32[$3183>>2] = $3193;
       $3194 = (($59) + 4|0);
       $3195 = HEAP32[$3194>>2]|0;
       HEAP32[$3188>>2] = $3195;
       $3196 = (($59) + 8|0);
       $3197 = HEAP32[$3196>>2]|0;
       HEAP32[$3191>>2] = $3197;
       HEAP32[$3196>>2] = 0;
       HEAP32[$3194>>2] = 0;
       HEAP32[$59>>2] = 0;
       $$pre$i17 = HEAP32[$3182>>2]|0;
       $3199 = $$pre$i17;
      }
      $3198 = (($3199) + 16|0);
      HEAP32[$3182>>2] = $3198;
     } else {
      $3200 = (($db) + 28|0);
      $3201 = HEAP32[$3178>>2]|0;
      $3202 = $3183;
      $3203 = $3201;
      $3204 = (($3202) - ($3203))|0;
      $3205 = $3204 >> 4;
      $3206 = (($3205) + 1)|0;
      $3207 = ($3206|0)<(0);
      if ($3207) {
       __THREW__ = 0;
       invoke_v(41);
       $3208 = __THREW__; __THREW__ = 0;
       $3209 = $3208&1;
       if (!($3209)) {
        // unreachable;
       }
       $3231 = ___cxa_find_matching_catch()|0;
       $3232 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
       $$10 = $3231;$$1013 = $3232;
       ___resumeException($$10|0);
       // unreachable;
      }
      $3210 = $3185;
      $3211 = (($3210) - ($3203))|0;
      $3212 = $3211 >> 4;
      $3213 = ($3212>>>0)<(1073741823);
      if ($3213) {
       $3214 = $3211 >> 3;
       $3215 = ($3214>>>0)<($3206>>>0);
       $3216 = $3215 ? $3206 : $3214;
       $$0$i$i$i19 = $3216;
      } else {
       $$0$i$i$i19 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i16,$$0$i$i$i19,$3205,$3200);
      $3217 = (($__v$i$i16) + 8|0);
      $3218 = HEAP32[$3217>>2]|0;
      $3219 = ($3218|0)==(0|0);
      if (!($3219)) {
       $3220 = (($3218) + 4|0);
       $3221 = (($59) + 12|0);
       $3222 = HEAP32[$3221>>2]|0;
       $3223 = (($3218) + 8|0);
       $3224 = (($3218) + 12|0);
       HEAP32[$3224>>2] = $3222;
       $3225 = HEAP32[$59>>2]|0;
       HEAP32[$3218>>2] = $3225;
       $3226 = (($59) + 4|0);
       $3227 = HEAP32[$3226>>2]|0;
       HEAP32[$3220>>2] = $3227;
       $3228 = (($59) + 8|0);
       $3229 = HEAP32[$3228>>2]|0;
       HEAP32[$3223>>2] = $3229;
       HEAP32[$3228>>2] = 0;
       HEAP32[$3226>>2] = 0;
       HEAP32[$59>>2] = 0;
      }
      $3230 = (($3218) + 16|0);
      HEAP32[$3217>>2] = $3230;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($3178,$__v$i$i16);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i16);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
     $$0 = $$1$i328;
     STACKTOP = sp;return ($$0|0);
    } else {
     break L103;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $3233 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $3234 = ($3233|0)==($first|0);
 if (!($3234)) {
  $$0 = $3233;
  STACKTOP = sp;return ($$0|0);
 }
 $3235 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $3236 = ($3235|0)==($first|0);
 if ($3236) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $3237 = HEAP32[$db>>2]|0;
 $3238 = (($db) + 4|0);
 $3239 = HEAP32[$3238>>2]|0;
 $3240 = ($3237|0)==($3239|0);
 if ($3240) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $3241 = (($db) + 16|0);
 $3242 = (($3239) + -24|0);
 $3243 = (($db) + 12|0);
 $3244 = HEAP32[$3243>>2]|0;
 HEAP32[$62>>2] = $3244;
 __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($61,$3242,$62);
 $3245 = (($db) + 20|0);
 $3246 = HEAP32[$3245>>2]|0;
 $3247 = (($db) + 24|0);
 $3248 = HEAP32[$3247>>2]|0;
 $3249 = ($3246>>>0)<($3248>>>0);
 if ($3249) {
  $3250 = ($3246|0)==(0|0);
  if ($3250) {
   $3262 = 0;
  } else {
   $3251 = (($3246) + 4|0);
   $3252 = (($61) + 12|0);
   $3253 = HEAP32[$3252>>2]|0;
   $3254 = (($3246) + 8|0);
   $3255 = (($3246) + 12|0);
   HEAP32[$3255>>2] = $3253;
   $3256 = HEAP32[$61>>2]|0;
   HEAP32[$3246>>2] = $3256;
   $3257 = (($61) + 4|0);
   $3258 = HEAP32[$3257>>2]|0;
   HEAP32[$3251>>2] = $3258;
   $3259 = (($61) + 8|0);
   $3260 = HEAP32[$3259>>2]|0;
   HEAP32[$3254>>2] = $3260;
   HEAP32[$3259>>2] = 0;
   HEAP32[$3257>>2] = 0;
   HEAP32[$61>>2] = 0;
   $$pre$i = HEAP32[$3245>>2]|0;
   $3262 = $$pre$i;
  }
  $3261 = (($3262) + 16|0);
  HEAP32[$3245>>2] = $3261;
 } else {
  $3263 = (($db) + 28|0);
  $3264 = HEAP32[$3241>>2]|0;
  $3265 = $3246;
  $3266 = $3264;
  $3267 = (($3265) - ($3266))|0;
  $3268 = $3267 >> 4;
  $3269 = (($3268) + 1)|0;
  $3270 = ($3269|0)<(0);
  if ($3270) {
   __THREW__ = 0;
   invoke_v(41);
   $3271 = __THREW__; __THREW__ = 0;
   $3272 = $3271&1;
   if (!($3272)) {
    // unreachable;
   }
   $3294 = ___cxa_find_matching_catch()|0;
   $3295 = tempRet0;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
   $$10 = $3294;$$1013 = $3295;
   ___resumeException($$10|0);
   // unreachable;
  }
  $3273 = $3248;
  $3274 = (($3273) - ($3266))|0;
  $3275 = $3274 >> 4;
  $3276 = ($3275>>>0)<(1073741823);
  if ($3276) {
   $3277 = $3274 >> 3;
   $3278 = ($3277>>>0)<($3269>>>0);
   $3279 = $3278 ? $3269 : $3277;
   $$0$i$i$i = $3279;
  } else {
   $$0$i$i$i = 2147483647;
  }
  __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$3268,$3263);
  $3280 = (($__v$i$i) + 8|0);
  $3281 = HEAP32[$3280>>2]|0;
  $3282 = ($3281|0)==(0|0);
  if (!($3282)) {
   $3283 = (($3281) + 4|0);
   $3284 = (($61) + 12|0);
   $3285 = HEAP32[$3284>>2]|0;
   $3286 = (($3281) + 8|0);
   $3287 = (($3281) + 12|0);
   HEAP32[$3287>>2] = $3285;
   $3288 = HEAP32[$61>>2]|0;
   HEAP32[$3281>>2] = $3288;
   $3289 = (($61) + 4|0);
   $3290 = HEAP32[$3289>>2]|0;
   HEAP32[$3283>>2] = $3290;
   $3291 = (($61) + 8|0);
   $3292 = HEAP32[$3291>>2]|0;
   HEAP32[$3286>>2] = $3292;
   HEAP32[$3291>>2] = 0;
   HEAP32[$3289>>2] = 0;
   HEAP32[$61>>2] = 0;
  }
  $3293 = (($3281) + 16|0);
  HEAP32[$3280>>2] = $3293;
  __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($3241,$__v$i$i);
  __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
 }
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
 $$0 = $3235;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (_malloc($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 _free($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = $1 << 24 >> 24;
   if ((($2|0) == 104)) {
    $3 = (($first) + 1|0);
    $4 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3,$last)|0);
    $5 = ($4|0)==($3|0);
    $6 = ($4|0)==($last|0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $$0 = $first;
     break;
    }
    $7 = HEAP8[$4>>0]|0;
    $8 = ($7<<24>>24)==(95);
    $9 = (($4) + 1|0);
    $$first = $8 ? $9 : $first;
    $$0 = $$first;
    break;
   } else if (!((($2|0) == 118))) {
    $$0 = $first;
    break;
   }
   $10 = (($first) + 1|0);
   $11 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10,$last)|0);
   $12 = ($11|0)==($10|0);
   $13 = ($11|0)==($last|0);
   $or$cond1 = $12 | $13;
   if ($or$cond1) {
    $$0 = $first;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(95);
    if ($15) {
     $16 = (($11) + 1|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16,$last)|0);
     $18 = ($17|0)==($16|0);
     $19 = ($17|0)==($last|0);
     $or$cond2 = $18 | $19;
     if ($or$cond2) {
      $$0 = $first;
     } else {
      $20 = HEAP8[$17>>0]|0;
      $21 = ($20<<24>>24)==(95);
      $22 = (($17) + 1|0);
      $$first3 = $21 ? $22 : $first;
      STACKTOP = sp;return ($$first3|0);
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$1 = 0, $$first = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $t$0$pn = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$1 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(110);
   $3 = (($first) + 1|0);
   $$first = $2 ? $3 : $first;
   $4 = ($$first|0)==($last|0);
   if ($4) {
    $$1 = $first;
   } else {
    $5 = HEAP8[$$first>>0]|0;
    $6 = ($5<<24>>24)==(48);
    if ($6) {
     $7 = (($$first) + 1|0);
     $$1 = $7;
     break;
    }
    $$off = (($5) + -49)<<24>>24;
    $8 = ($$off&255)<(9);
    if ($8) {
     $t$0$pn = $$first;
     while(1) {
      $$0 = (($t$0$pn) + 1|0);
      $9 = ($$0|0)==($last|0);
      if ($9) {
       $$1 = $last;
       break L1;
      }
      $10 = HEAP8[$$0>>0]|0;
      $11 = $10 << 24 >> 24;
      $isdigittmp = (($11) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $t$0$pn = $$0;
      } else {
       $$1 = $$0;
       break;
      }
     }
    } else {
     $$1 = $first;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($0) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($this) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($this) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 $13 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$11,$12)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$13+8>>2]|0;
 ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i17$i = 0, $$0$i$i$i27$i = 0, $$0$i$i$i41$i = 0, $$0$i$i$i54$i = 0, $$0$i$i$i68$i = 0, $$0$i12 = 0, $$0$i20 = 0, $$01 = 0, $$01$i = 0, $$01$i19 = 0, $$02 = 0, $$02$i = 0, $$07$i = 0, $$1$i = 0, $$12$i = 0;
 var $$2$i = 0, $$23$i = 0, $$3$i = 0, $$34$i = 0, $$4$i = 0, $$45$i = 0, $$5$i = 0, $$56$i = 0, $$first = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i16$i = 0, $$pre$i25$i = 0, $$pre$i39$i = 0, $$pre$i52$i = 0, $$pre$i66$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i15$i = 0, $__v$i$i24$i = 0, $__v$i$i38$i = 0, $__v$i$i51$i = 0, $__v$i$i65$i = 0, $brmerge$i = 0, $cv$i = 0;
 var $first$ = 0, $first$4 = 0, $first$mux$i = 0, $name$i = 0, $name$i13 = 0, $name1$i = 0, $name2$i = 0, $name2$i14 = 0, $name3$i = 0, $name4$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i18 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond9$i = 0, $pop_subs$0$off0$i$ph84 = 0, $t0$0$i = 0, $t0$0$i15 = 0;
 var $t0$1$i = 0, $t0$2$i$be = 0, $t0$2$i$ph$be = 0, $t0$2$i$ph83 = 0, $t0$2$i38 = 0, $tmp = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i65$i = sp + 392|0;
 $__v$i$i51$i = sp + 344|0;
 $__v$i$i38$i = sp + 96|0;
 $__v$i$i24$i = sp + 232|0;
 $__v$i$i15$i = sp + 148|0;
 $__v$i$i$i = sp + 28|0;
 $cv$i = sp + 48|0;
 $name$i13 = sp + 252|0;
 $0 = sp + 52|0;
 $1 = sp + 64|0;
 $2 = sp + 80|0;
 $name1$i = sp + 84|0;
 $3 = sp + 312|0;
 $4 = sp + 328|0;
 $5 = sp + 364|0;
 $name2$i14 = sp + 380|0;
 $6 = sp + 412|0;
 $7 = sp + 168|0;
 $8 = sp + 184|0;
 $name3$i = sp + 188|0;
 $9 = sp + 200|0;
 $10 = sp + 216|0;
 $name4$i = sp + 220|0;
 $11 = sp + 16|0;
 $12 = sp;
 $13 = sp + 276|0;
 $name$i = sp + 264|0;
 $name2$i = sp + 280|0;
 $__v$i$i = sp + 292|0;
 $14 = sp + 120|0;
 $15 = sp + 324|0;
 $tmp = sp + 136|0;
 $tmp3 = sp + 368|0;
 $16 = $last;
 $17 = $first;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(1);
 if (!($19)) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 $20 = HEAP8[$first>>0]|0;
 $21 = ($20<<24>>24)==(76);
 $22 = (($first) + 1|0);
 $$first = $21 ? $22 : $first;
 $23 = HEAP8[$$first>>0]|0;
 $24 = $23 << 24 >> 24;
 if ((($24|0) == 78)) {
  $25 = ($$first|0)==($last|0);
  L6: do {
   if ($25) {
    $$07$i = $last;
   } else {
    $26 = ($23<<24>>24)==(78);
    if ($26) {
     $27 = (($$first) + 1|0);
     $28 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($27,$last,$cv$i)|0);
     $29 = ($28|0)==($last|0);
     if ($29) {
      $$07$i = $$first;
     } else {
      $30 = (($db) + 52|0);
      HEAP32[$30>>2] = 0;
      $31 = HEAP8[$28>>0]|0;
      if ((($31<<24>>24) == 79)) {
       HEAP32[$30>>2] = 2;
       $33 = (($28) + 1|0);
       $t0$0$i15 = $33;
      } else if ((($31<<24>>24) == 82)) {
       HEAP32[$30>>2] = 1;
       $32 = (($28) + 1|0);
       $t0$0$i15 = $32;
      } else {
       $t0$0$i15 = $28;
      }
      $34 = (($db) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($db) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       $39 = ($35|0)==(0|0);
       if ($39) {
        $41 = 0;
       } else {
        ;HEAP32[$35+0>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;
        $$pre$i$i = HEAP32[$34>>2]|0;
        $41 = $$pre$i$i;
       }
       $40 = (($41) + 24|0);
       HEAP32[$34>>2] = $40;
      } else {
       $42 = (($db) + 12|0);
       $43 = HEAP32[$db>>2]|0;
       $44 = $35;
       $45 = $43;
       $46 = (($44) - ($45))|0;
       $47 = (($46|0) / 24)&-1;
       $48 = (($47) + 1)|0;
       $49 = ($48|0)<(0);
       if ($49) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
        // unreachable;
       }
       $50 = $37;
       $51 = (($50) - ($45))|0;
       $52 = (($51|0) / 24)&-1;
       $53 = ($52>>>0)<(1073741823);
       if ($53) {
        $54 = $52 << 1;
        $55 = ($54>>>0)<($48>>>0);
        $56 = $55 ? $48 : $54;
        $$0$i$i$i$i = $56;
       } else {
        $$0$i$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$47,$42);
       $57 = (($__v$i$i$i) + 8|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if (!($59)) {
        ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;HEAP32[$58+12>>2]=0|0;HEAP32[$58+16>>2]=0|0;HEAP32[$58+20>>2]=0|0;
       }
       $60 = (($58) + 24|0);
       HEAP32[$57>>2] = $60;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $61 = $t0$0$i15;
      $62 = (($16) - ($61))|0;
      $63 = ($62|0)>(1);
      if ($63) {
       $64 = HEAP8[$t0$0$i15>>0]|0;
       $65 = ($64<<24>>24)==(83);
       if ($65) {
        $66 = (($t0$0$i15) + 1|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = ($67<<24>>24)==(116);
        if ($68) {
         $69 = (($t0$0$i15) + 2|0);
         $70 = HEAP32[$34>>2]|0;
         $71 = (($70) + -24|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($71,3952,3);
         $t0$1$i = $69;
        } else {
         $t0$1$i = $t0$0$i15;
        }
       } else {
        $t0$1$i = $t0$0$i15;
       }
      } else {
       $t0$1$i = $t0$0$i15;
      }
      $72 = ($t0$1$i|0)==($last|0);
      if ($72) {
       $122 = HEAP32[$34>>2]|0;
       $123 = (($122) + -24|0);
       $125 = $122;
       while(1) {
        $124 = (($125) + -24|0);
        HEAP32[$34>>2] = $124;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
        $126 = HEAP32[$34>>2]|0;
        $127 = ($126|0)==($123|0);
        if ($127) {
         $$07$i = $$first;
         break L6;
        } else {
         $125 = $126;
        }
       }
      }
      $73 = HEAP8[$t0$1$i>>0]|0;
      $74 = ($73<<24>>24)==(69);
      if ($74) {
       $75 = (($t0$1$i) + 1|0);
       $76 = HEAP32[$cv$i>>2]|0;
       $77 = (($db) + 48|0);
       HEAP32[$77>>2] = $76;
       $$07$i = $75;
       break;
      }
      $78 = (($name3$i) + 1|0);
      $79 = (($db) + 12|0);
      $80 = (($db) + 16|0);
      $81 = (($db) + 20|0);
      $82 = (($db) + 24|0);
      $83 = (($9) + 12|0);
      $84 = (($9) + 4|0);
      $85 = (($9) + 8|0);
      $86 = (($db) + 28|0);
      $87 = (($__v$i$i51$i) + 8|0);
      $88 = (($name3$i) + 8|0);
      $89 = (($name3$i) + 4|0);
      $90 = (($12) + 12|0);
      $91 = (($12) + 4|0);
      $92 = (($12) + 8|0);
      $93 = (($__v$i$i65$i) + 8|0);
      $94 = (($11) + 1|0);
      $95 = (($11) + 8|0);
      $96 = (($11) + 4|0);
      $97 = (($0) + 1|0);
      $98 = (($1) + 12|0);
      $99 = (($1) + 4|0);
      $100 = (($1) + 8|0);
      $101 = (($__v$i$i15$i) + 8|0);
      $102 = (($0) + 8|0);
      $103 = (($0) + 4|0);
      $104 = (($4) + 12|0);
      $105 = (($4) + 4|0);
      $106 = (($4) + 8|0);
      $107 = (($__v$i$i24$i) + 8|0);
      $108 = (($3) + 1|0);
      $109 = (($3) + 8|0);
      $110 = (($3) + 4|0);
      $111 = (($7) + 12|0);
      $112 = (($7) + 4|0);
      $113 = (($7) + 8|0);
      $114 = (($__v$i$i38$i) + 8|0);
      $115 = (($6) + 1|0);
      $116 = (($6) + 8|0);
      $117 = (($6) + 4|0);
      $118 = (($name4$i) + 8|0);
      $119 = (($name$i13) + 8|0);
      $120 = (($name1$i) + 8|0);
      $121 = (($name2$i14) + 8|0);
      $932 = $73;$pop_subs$0$off0$i$ph84 = 0;$t0$2$i$ph83 = $t0$1$i;
      L43: while(1) {
       $129 = $932;$t0$2$i38 = $t0$2$i$ph83;
       L45: while(1) {
        $128 = $129 << 24 >> 24;
        switch ($128|0) {
        case 83:  {
         label = 31;
         break L45;
         break;
        }
        case 84:  {
         label = 70;
         break L45;
         break;
        }
        case 76:  {
         $518 = (($t0$2$i38) + 1|0);
         $519 = ($518|0)==($last|0);
         if ($519) {
          $$07$i = $$first;
          break L6;
         } else {
          $t0$2$i$be = $518;
         }
         break;
        }
        case 68:  {
         label = 106;
         break L45;
         break;
        }
        case 73:  {
         $443 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i38,$last,$db)|0);
         $444 = ($443|0)==($t0$2$i38|0);
         $445 = ($443|0)==($last|0);
         $or$cond11$i = $444 | $445;
         if ($or$cond11$i) {
          $$07$i = $$first;
          break L6;
         }
         $446 = HEAP32[$34>>2]|0;
         $447 = (($446) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name3$i,$447);
         $448 = HEAP32[$34>>2]|0;
         $449 = (($448) + -24|0);
         $451 = $448;
         while(1) {
          $450 = (($451) + -24|0);
          HEAP32[$34>>2] = $450;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($450);
          $452 = HEAP32[$34>>2]|0;
          $453 = ($452|0)==($449|0);
          if ($453) {
           break;
          } else {
           $451 = $452;
          }
         }
         $454 = (($448) + -48|0);
         $455 = HEAP8[$name3$i>>0]|0;
         $456 = $455 & 1;
         $457 = ($456<<24>>24)==(0);
         if ($457) {
          $460 = $455&255;
          $461 = $460 >>> 1;
          $462 = $78;$463 = $461;
         } else {
          $458 = HEAP32[$88>>2]|0;
          $459 = HEAP32[$89>>2]|0;
          $462 = $458;$463 = $459;
         }
         __THREW__ = 0;
         (invoke_iiii(32,($454|0),($462|0),($463|0))|0);
         $464 = __THREW__; __THREW__ = 0;
         $465 = $464&1;
         if ($465) {
          label = 167;
          break L43;
         }
         $466 = HEAP32[$34>>2]|0;
         $467 = (($466) + -24|0);
         $468 = HEAP32[$79>>2]|0;
         HEAP32[$10>>2] = $468;
         __THREW__ = 0;
         invoke_viii(42,($9|0),($467|0),($10|0));
         $469 = __THREW__; __THREW__ = 0;
         $470 = $469&1;
         if ($470) {
          label = 167;
          break L43;
         }
         $471 = HEAP32[$81>>2]|0;
         $472 = HEAP32[$82>>2]|0;
         $473 = ($471>>>0)<($472>>>0);
         if ($473) {
          $474 = ($471|0)==(0|0);
          if ($474) {
           $483 = 0;
          } else {
           $475 = (($471) + 4|0);
           $476 = HEAP32[$83>>2]|0;
           $477 = (($471) + 8|0);
           $478 = (($471) + 12|0);
           HEAP32[$478>>2] = $476;
           $479 = HEAP32[$9>>2]|0;
           HEAP32[$471>>2] = $479;
           $480 = HEAP32[$84>>2]|0;
           HEAP32[$475>>2] = $480;
           $481 = HEAP32[$85>>2]|0;
           HEAP32[$477>>2] = $481;
           HEAP32[$85>>2] = 0;
           HEAP32[$84>>2] = 0;
           HEAP32[$9>>2] = 0;
           $$pre$i52$i = HEAP32[$81>>2]|0;
           $483 = $$pre$i52$i;
          }
          $482 = (($483) + 16|0);
          HEAP32[$81>>2] = $482;
         } else {
          $484 = HEAP32[$80>>2]|0;
          $485 = $471;
          $486 = $484;
          $487 = (($485) - ($486))|0;
          $488 = $487 >> 4;
          $489 = (($488) + 1)|0;
          $490 = ($489|0)<(0);
          if ($490) {
           label = 157;
           break L43;
          }
          $493 = $472;
          $494 = (($493) - ($486))|0;
          $495 = $494 >> 4;
          $496 = ($495>>>0)<(1073741823);
          if ($496) {
           $497 = $494 >> 3;
           $498 = ($497>>>0)<($489>>>0);
           $499 = $498 ? $489 : $497;
           $$0$i$i$i54$i = $499;
          } else {
           $$0$i$i$i54$i = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i54$i,$488,$86);
          $500 = HEAP32[$87>>2]|0;
          $501 = ($500|0)==(0|0);
          if (!($501)) {
           $502 = (($500) + 4|0);
           $503 = HEAP32[$83>>2]|0;
           $504 = (($500) + 8|0);
           $505 = (($500) + 12|0);
           HEAP32[$505>>2] = $503;
           $506 = HEAP32[$9>>2]|0;
           HEAP32[$500>>2] = $506;
           $507 = HEAP32[$84>>2]|0;
           HEAP32[$502>>2] = $507;
           $508 = HEAP32[$85>>2]|0;
           HEAP32[$504>>2] = $508;
           HEAP32[$85>>2] = 0;
           HEAP32[$84>>2] = 0;
           HEAP32[$9>>2] = 0;
          }
          $509 = (($500) + 16|0);
          HEAP32[$87>>2] = $509;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($80,$__v$i$i51$i);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
         if ($457) {
          $t0$2$i$be = $443;
         } else {
          $510 = HEAP32[$88>>2]|0;
          _free($510);
          $t0$2$i$be = $443;
         }
         break;
        }
        default: {
         label = 172;
         break L45;
        }
        }
        $511 = HEAP8[$t0$2$i$be>>0]|0;
        $512 = ($511<<24>>24)==(69);
        if ($512) {
         label = 211;
         break L43;
        } else {
         $129 = $511;$t0$2$i38 = $t0$2$i$be;
        }
       }
       do {
        if ((label|0) == 31) {
         label = 0;
         $130 = (($t0$2$i38) + 1|0);
         $131 = ($130|0)==($last|0);
         if (!($131)) {
          $132 = HEAP8[$130>>0]|0;
          $133 = ($132<<24>>24)==(116);
          if ($133) {
           label = 172;
           break;
          }
         }
         $134 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i38,$last,$db)|0);
         $135 = ($134|0)==($t0$2$i38|0);
         $136 = ($134|0)==($last|0);
         $or$cond$i18 = $135 | $136;
         if ($or$cond$i18) {
          $$07$i = $$first;
          break L6;
         }
         $137 = HEAP32[$34>>2]|0;
         $138 = (($137) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i13,$138);
         $139 = HEAP32[$34>>2]|0;
         $140 = (($139) + -24|0);
         $142 = $139;
         while(1) {
          $141 = (($142) + -24|0);
          HEAP32[$34>>2] = $141;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
          $143 = HEAP32[$34>>2]|0;
          $144 = ($143|0)==($140|0);
          if ($144) {
           break;
          } else {
           $142 = $143;
          }
         }
         $145 = (($139) + -48|0);
         $146 = HEAP8[$145>>0]|0;
         $147 = $146 & 1;
         $148 = ($147<<24>>24)==(0);
         if ($148) {
          $151 = $146&255;
          $152 = $151 >>> 1;
          $154 = $152;
         } else {
          $149 = (($139) + -44|0);
          $150 = HEAP32[$149>>2]|0;
          $154 = $150;
         }
         $153 = ($154|0)==(0);
         if ($153) {
          __THREW__ = 0;
          invoke_vii(47,($145|0),($name$i13|0));
          $226 = __THREW__; __THREW__ = 0;
          $227 = $226&1;
          if ($227) {
           label = 61;
           break L43;
          }
         } else {
          __THREW__ = 0;
          invoke_viii(46,($0|0),(2152|0),($name$i13|0));
          $155 = __THREW__; __THREW__ = 0;
          $156 = $155&1;
          if ($156) {
           label = 61;
           break L43;
          }
          $157 = HEAP8[$0>>0]|0;
          $158 = $157 & 1;
          $159 = ($158<<24>>24)==(0);
          if ($159) {
           $162 = $157&255;
           $163 = $162 >>> 1;
           $164 = $97;$165 = $163;
          } else {
           $160 = HEAP32[$102>>2]|0;
           $161 = HEAP32[$103>>2]|0;
           $164 = $160;$165 = $161;
          }
          __THREW__ = 0;
          (invoke_iiii(32,($145|0),($164|0),($165|0))|0);
          $166 = __THREW__; __THREW__ = 0;
          $167 = $166&1;
          if ($167) {
           label = 62;
           break L43;
          }
          $168 = HEAP8[$0>>0]|0;
          $169 = $168 & 1;
          $170 = ($169<<24>>24)==(0);
          if (!($170)) {
           $171 = HEAP32[$102>>2]|0;
           _free($171);
          }
          $172 = HEAP32[$34>>2]|0;
          $173 = (($172) + -24|0);
          $174 = HEAP32[$79>>2]|0;
          HEAP32[$2>>2] = $174;
          __THREW__ = 0;
          invoke_viii(42,($1|0),($173|0),($2|0));
          $175 = __THREW__; __THREW__ = 0;
          $176 = $175&1;
          if ($176) {
           label = 61;
           break L43;
          }
          $177 = HEAP32[$81>>2]|0;
          $178 = HEAP32[$82>>2]|0;
          $179 = ($177>>>0)<($178>>>0);
          if ($179) {
           $180 = ($177|0)==(0|0);
           if ($180) {
            $189 = 0;
           } else {
            $181 = (($177) + 4|0);
            $182 = HEAP32[$98>>2]|0;
            $183 = (($177) + 8|0);
            $184 = (($177) + 12|0);
            HEAP32[$184>>2] = $182;
            $185 = HEAP32[$1>>2]|0;
            HEAP32[$177>>2] = $185;
            $186 = HEAP32[$99>>2]|0;
            HEAP32[$181>>2] = $186;
            $187 = HEAP32[$100>>2]|0;
            HEAP32[$183>>2] = $187;
            HEAP32[$100>>2] = 0;
            HEAP32[$99>>2] = 0;
            HEAP32[$1>>2] = 0;
            $$pre$i16$i = HEAP32[$81>>2]|0;
            $189 = $$pre$i16$i;
           }
           $188 = (($189) + 16|0);
           HEAP32[$81>>2] = $188;
          } else {
           $190 = HEAP32[$80>>2]|0;
           $191 = $177;
           $192 = $190;
           $193 = (($191) - ($192))|0;
           $194 = $193 >> 4;
           $195 = (($194) + 1)|0;
           $196 = ($195|0)<(0);
           if ($196) {
            label = 53;
            break L43;
           }
           $199 = $178;
           $200 = (($199) - ($192))|0;
           $201 = $200 >> 4;
           $202 = ($201>>>0)<(1073741823);
           if ($202) {
            $203 = $200 >> 3;
            $204 = ($203>>>0)<($195>>>0);
            $205 = $204 ? $195 : $203;
            $$0$i$i$i17$i = $205;
           } else {
            $$0$i$i$i17$i = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i15$i,$$0$i$i$i17$i,$194,$86);
           $206 = HEAP32[$101>>2]|0;
           $207 = ($206|0)==(0|0);
           if (!($207)) {
            $208 = (($206) + 4|0);
            $209 = HEAP32[$98>>2]|0;
            $210 = (($206) + 8|0);
            $211 = (($206) + 12|0);
            HEAP32[$211>>2] = $209;
            $212 = HEAP32[$1>>2]|0;
            HEAP32[$206>>2] = $212;
            $213 = HEAP32[$99>>2]|0;
            HEAP32[$208>>2] = $213;
            $214 = HEAP32[$100>>2]|0;
            HEAP32[$210>>2] = $214;
            HEAP32[$100>>2] = 0;
            HEAP32[$99>>2] = 0;
            HEAP32[$1>>2] = 0;
           }
           $215 = (($206) + 16|0);
           HEAP32[$101>>2] = $215;
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($80,$__v$i$i15$i);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i15$i);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
         }
         $228 = HEAP8[$name$i13>>0]|0;
         $229 = $228 & 1;
         $230 = ($229<<24>>24)==(0);
         if ($230) {
          $t0$2$i$ph$be = $134;
         } else {
          $231 = HEAP32[$119>>2]|0;
          _free($231);
          $t0$2$i$ph$be = $134;
         }
        }
        else if ((label|0) == 70) {
         label = 0;
         $236 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i38,$last,$db)|0);
         $237 = ($236|0)==($t0$2$i38|0);
         $238 = ($236|0)==($last|0);
         $or$cond9$i = $237 | $238;
         if ($or$cond9$i) {
          $$07$i = $$first;
          break L6;
         }
         $239 = HEAP32[$34>>2]|0;
         $240 = (($239) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name1$i,$240);
         $241 = HEAP32[$34>>2]|0;
         $242 = (($241) + -24|0);
         $244 = $241;
         while(1) {
          $243 = (($244) + -24|0);
          HEAP32[$34>>2] = $243;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($243);
          $245 = HEAP32[$34>>2]|0;
          $246 = ($245|0)==($242|0);
          if ($246) {
           break;
          } else {
           $244 = $245;
          }
         }
         $247 = (($241) + -48|0);
         $248 = HEAP8[$247>>0]|0;
         $249 = $248 & 1;
         $250 = ($249<<24>>24)==(0);
         if ($250) {
          $253 = $248&255;
          $254 = $253 >>> 1;
          $256 = $254;
         } else {
          $251 = (($241) + -44|0);
          $252 = HEAP32[$251>>2]|0;
          $256 = $252;
         }
         $255 = ($256|0)==(0);
         if ($255) {
          __THREW__ = 0;
          invoke_vii(47,($247|0),($name1$i|0));
          $282 = __THREW__; __THREW__ = 0;
          $283 = $282&1;
          if ($283) {
           label = 84;
           break L43;
          }
         } else {
          __THREW__ = 0;
          invoke_viii(46,($3|0),(2152|0),($name1$i|0));
          $257 = __THREW__; __THREW__ = 0;
          $258 = $257&1;
          if ($258) {
           label = 84;
           break L43;
          }
          $259 = HEAP8[$3>>0]|0;
          $260 = $259 & 1;
          $261 = ($260<<24>>24)==(0);
          if ($261) {
           $264 = $259&255;
           $265 = $264 >>> 1;
           $266 = $108;$267 = $265;
          } else {
           $262 = HEAP32[$109>>2]|0;
           $263 = HEAP32[$110>>2]|0;
           $266 = $262;$267 = $263;
          }
          __THREW__ = 0;
          (invoke_iiii(32,($247|0),($266|0),($267|0))|0);
          $268 = __THREW__; __THREW__ = 0;
          $269 = $268&1;
          if ($269) {
           label = 85;
           break L43;
          }
          $270 = HEAP8[$3>>0]|0;
          $271 = $270 & 1;
          $272 = ($271<<24>>24)==(0);
          if (!($272)) {
           $273 = HEAP32[$109>>2]|0;
           _free($273);
          }
         }
         $284 = HEAP32[$34>>2]|0;
         $285 = (($284) + -24|0);
         $286 = HEAP32[$79>>2]|0;
         HEAP32[$5>>2] = $286;
         __THREW__ = 0;
         invoke_viii(42,($4|0),($285|0),($5|0));
         $287 = __THREW__; __THREW__ = 0;
         $288 = $287&1;
         if ($288) {
          label = 84;
          break L43;
         }
         $289 = HEAP32[$81>>2]|0;
         $290 = HEAP32[$82>>2]|0;
         $291 = ($289>>>0)<($290>>>0);
         if ($291) {
          $292 = ($289|0)==(0|0);
          if ($292) {
           $301 = 0;
          } else {
           $293 = (($289) + 4|0);
           $294 = HEAP32[$104>>2]|0;
           $295 = (($289) + 8|0);
           $296 = (($289) + 12|0);
           HEAP32[$296>>2] = $294;
           $297 = HEAP32[$4>>2]|0;
           HEAP32[$289>>2] = $297;
           $298 = HEAP32[$105>>2]|0;
           HEAP32[$293>>2] = $298;
           $299 = HEAP32[$106>>2]|0;
           HEAP32[$295>>2] = $299;
           HEAP32[$106>>2] = 0;
           HEAP32[$105>>2] = 0;
           HEAP32[$4>>2] = 0;
           $$pre$i25$i = HEAP32[$81>>2]|0;
           $301 = $$pre$i25$i;
          }
          $300 = (($301) + 16|0);
          HEAP32[$81>>2] = $300;
         } else {
          $302 = HEAP32[$80>>2]|0;
          $303 = $289;
          $304 = $302;
          $305 = (($303) - ($304))|0;
          $306 = $305 >> 4;
          $307 = (($306) + 1)|0;
          $308 = ($307|0)<(0);
          if ($308) {
           label = 94;
           break L43;
          }
          $311 = $290;
          $312 = (($311) - ($304))|0;
          $313 = $312 >> 4;
          $314 = ($313>>>0)<(1073741823);
          if ($314) {
           $315 = $312 >> 3;
           $316 = ($315>>>0)<($307>>>0);
           $317 = $316 ? $307 : $315;
           $$0$i$i$i27$i = $317;
          } else {
           $$0$i$i$i27$i = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i24$i,$$0$i$i$i27$i,$306,$86);
          $318 = HEAP32[$107>>2]|0;
          $319 = ($318|0)==(0|0);
          if (!($319)) {
           $320 = (($318) + 4|0);
           $321 = HEAP32[$104>>2]|0;
           $322 = (($318) + 8|0);
           $323 = (($318) + 12|0);
           HEAP32[$323>>2] = $321;
           $324 = HEAP32[$4>>2]|0;
           HEAP32[$318>>2] = $324;
           $325 = HEAP32[$105>>2]|0;
           HEAP32[$320>>2] = $325;
           $326 = HEAP32[$106>>2]|0;
           HEAP32[$322>>2] = $326;
           HEAP32[$106>>2] = 0;
           HEAP32[$105>>2] = 0;
           HEAP32[$4>>2] = 0;
          }
          $327 = (($318) + 16|0);
          HEAP32[$107>>2] = $327;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($80,$__v$i$i24$i);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i24$i);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
         $328 = HEAP8[$name1$i>>0]|0;
         $329 = $328 & 1;
         $330 = ($329<<24>>24)==(0);
         if ($330) {
          $t0$2$i$ph$be = $236;
         } else {
          $331 = HEAP32[$120>>2]|0;
          _free($331);
          $t0$2$i$ph$be = $236;
         }
        }
        else if ((label|0) == 106) {
         label = 0;
         $338 = (($t0$2$i38) + 1|0);
         $339 = ($338|0)==($last|0);
         if (!($339)) {
          $340 = HEAP8[$338>>0]|0;
          if (!((($340<<24>>24) == 84) | (($340<<24>>24) == 116))) {
           label = 172;
           break;
          }
         }
         $341 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i38,$last,$db)|0);
         $342 = ($341|0)==($t0$2$i38|0);
         $343 = ($341|0)==($last|0);
         $or$cond10$i = $342 | $343;
         if ($or$cond10$i) {
          $$07$i = $$first;
          break L6;
         }
         $344 = HEAP32[$34>>2]|0;
         $345 = (($344) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i14,$345);
         $346 = HEAP32[$34>>2]|0;
         $347 = (($346) + -24|0);
         $349 = $346;
         while(1) {
          $348 = (($349) + -24|0);
          HEAP32[$34>>2] = $348;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($348);
          $350 = HEAP32[$34>>2]|0;
          $351 = ($350|0)==($347|0);
          if ($351) {
           break;
          } else {
           $349 = $350;
          }
         }
         $352 = (($346) + -48|0);
         $353 = HEAP8[$352>>0]|0;
         $354 = $353 & 1;
         $355 = ($354<<24>>24)==(0);
         if ($355) {
          $358 = $353&255;
          $359 = $358 >>> 1;
          $361 = $359;
         } else {
          $356 = (($346) + -44|0);
          $357 = HEAP32[$356>>2]|0;
          $361 = $357;
         }
         $360 = ($361|0)==(0);
         do {
          if ($360) {
           __THREW__ = 0;
           invoke_vii(47,($352|0),($name2$i14|0));
           $387 = __THREW__; __THREW__ = 0;
           $388 = $387&1;
           if ($388) {
            label = 122;
            break L43;
           }
          } else {
           __THREW__ = 0;
           invoke_viii(46,($6|0),(2152|0),($name2$i14|0));
           $362 = __THREW__; __THREW__ = 0;
           $363 = $362&1;
           if ($363) {
            label = 122;
            break L43;
           }
           $364 = HEAP8[$6>>0]|0;
           $365 = $364 & 1;
           $366 = ($365<<24>>24)==(0);
           if ($366) {
            $369 = $364&255;
            $370 = $369 >>> 1;
            $371 = $115;$372 = $370;
           } else {
            $367 = HEAP32[$116>>2]|0;
            $368 = HEAP32[$117>>2]|0;
            $371 = $367;$372 = $368;
           }
           __THREW__ = 0;
           (invoke_iiii(32,($352|0),($371|0),($372|0))|0);
           $373 = __THREW__; __THREW__ = 0;
           $374 = $373&1;
           if ($374) {
            label = 123;
            break L43;
           }
           $375 = HEAP8[$6>>0]|0;
           $376 = $375 & 1;
           $377 = ($376<<24>>24)==(0);
           if ($377) {
            break;
           }
           $378 = HEAP32[$116>>2]|0;
           _free($378);
          }
         } while(0);
         $389 = HEAP32[$34>>2]|0;
         $390 = (($389) + -24|0);
         $391 = HEAP32[$79>>2]|0;
         HEAP32[$8>>2] = $391;
         __THREW__ = 0;
         invoke_viii(42,($7|0),($390|0),($8|0));
         $392 = __THREW__; __THREW__ = 0;
         $393 = $392&1;
         if ($393) {
          label = 122;
          break L43;
         }
         $394 = HEAP32[$81>>2]|0;
         $395 = HEAP32[$82>>2]|0;
         $396 = ($394>>>0)<($395>>>0);
         if ($396) {
          $397 = ($394|0)==(0|0);
          if ($397) {
           $406 = 0;
          } else {
           $398 = (($394) + 4|0);
           $399 = HEAP32[$111>>2]|0;
           $400 = (($394) + 8|0);
           $401 = (($394) + 12|0);
           HEAP32[$401>>2] = $399;
           $402 = HEAP32[$7>>2]|0;
           HEAP32[$394>>2] = $402;
           $403 = HEAP32[$112>>2]|0;
           HEAP32[$398>>2] = $403;
           $404 = HEAP32[$113>>2]|0;
           HEAP32[$400>>2] = $404;
           HEAP32[$113>>2] = 0;
           HEAP32[$112>>2] = 0;
           HEAP32[$7>>2] = 0;
           $$pre$i39$i = HEAP32[$81>>2]|0;
           $406 = $$pre$i39$i;
          }
          $405 = (($406) + 16|0);
          HEAP32[$81>>2] = $405;
         } else {
          $407 = HEAP32[$80>>2]|0;
          $408 = $394;
          $409 = $407;
          $410 = (($408) - ($409))|0;
          $411 = $410 >> 4;
          $412 = (($411) + 1)|0;
          $413 = ($412|0)<(0);
          if ($413) {
           label = 132;
           break L43;
          }
          $416 = $395;
          $417 = (($416) - ($409))|0;
          $418 = $417 >> 4;
          $419 = ($418>>>0)<(1073741823);
          if ($419) {
           $420 = $417 >> 3;
           $421 = ($420>>>0)<($412>>>0);
           $422 = $421 ? $412 : $420;
           $$0$i$i$i41$i = $422;
          } else {
           $$0$i$i$i41$i = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i38$i,$$0$i$i$i41$i,$411,$86);
          $423 = HEAP32[$114>>2]|0;
          $424 = ($423|0)==(0|0);
          if (!($424)) {
           $425 = (($423) + 4|0);
           $426 = HEAP32[$111>>2]|0;
           $427 = (($423) + 8|0);
           $428 = (($423) + 12|0);
           HEAP32[$428>>2] = $426;
           $429 = HEAP32[$7>>2]|0;
           HEAP32[$423>>2] = $429;
           $430 = HEAP32[$112>>2]|0;
           HEAP32[$425>>2] = $430;
           $431 = HEAP32[$113>>2]|0;
           HEAP32[$427>>2] = $431;
           HEAP32[$113>>2] = 0;
           HEAP32[$112>>2] = 0;
           HEAP32[$7>>2] = 0;
          }
          $432 = (($423) + 16|0);
          HEAP32[$114>>2] = $432;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($80,$__v$i$i38$i);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i38$i);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
         $433 = HEAP8[$name2$i14>>0]|0;
         $434 = $433 & 1;
         $435 = ($434<<24>>24)==(0);
         if ($435) {
          $t0$2$i$ph$be = $341;
         } else {
          $436 = HEAP32[$121>>2]|0;
          _free($436);
          $t0$2$i$ph$be = $341;
         }
        }
       } while(0);
       if ((label|0) == 172) {
        label = 0;
        $520 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i38,$last,$db)|0);
        $521 = ($520|0)==($t0$2$i38|0);
        $522 = ($520|0)==($last|0);
        $or$cond12$i = $521 | $522;
        if ($or$cond12$i) {
         $$07$i = $$first;
         break L6;
        }
        $523 = HEAP32[$34>>2]|0;
        $524 = (($523) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name4$i,$524);
        $525 = HEAP32[$34>>2]|0;
        $526 = (($525) + -24|0);
        $528 = $525;
        while(1) {
         $527 = (($528) + -24|0);
         HEAP32[$34>>2] = $527;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($527);
         $529 = HEAP32[$34>>2]|0;
         $530 = ($529|0)==($526|0);
         if ($530) {
          break;
         } else {
          $528 = $529;
         }
        }
        $531 = (($525) + -48|0);
        $532 = HEAP8[$531>>0]|0;
        $533 = $532 & 1;
        $534 = ($533<<24>>24)==(0);
        if ($534) {
         $537 = $532&255;
         $538 = $537 >>> 1;
         $540 = $538;
        } else {
         $535 = (($525) + -44|0);
         $536 = HEAP32[$535>>2]|0;
         $540 = $536;
        }
        $539 = ($540|0)==(0);
        if ($539) {
         __THREW__ = 0;
         invoke_vii(47,($531|0),($name4$i|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          label = 186;
          break;
         }
        } else {
         __THREW__ = 0;
         invoke_viii(46,($11|0),(2152|0),($name4$i|0));
         $541 = __THREW__; __THREW__ = 0;
         $542 = $541&1;
         if ($542) {
          label = 186;
          break;
         }
         $543 = HEAP8[$11>>0]|0;
         $544 = $543 & 1;
         $545 = ($544<<24>>24)==(0);
         if ($545) {
          $548 = $543&255;
          $549 = $548 >>> 1;
          $550 = $94;$551 = $549;
         } else {
          $546 = HEAP32[$95>>2]|0;
          $547 = HEAP32[$96>>2]|0;
          $550 = $546;$551 = $547;
         }
         __THREW__ = 0;
         (invoke_iiii(32,($531|0),($550|0),($551|0))|0);
         $552 = __THREW__; __THREW__ = 0;
         $553 = $552&1;
         if ($553) {
          label = 187;
          break;
         }
         $554 = HEAP8[$11>>0]|0;
         $555 = $554 & 1;
         $556 = ($555<<24>>24)==(0);
         if (!($556)) {
          $557 = HEAP32[$95>>2]|0;
          _free($557);
         }
        }
        $568 = HEAP32[$34>>2]|0;
        $569 = (($568) + -24|0);
        $570 = HEAP32[$79>>2]|0;
        HEAP32[$13>>2] = $570;
        __THREW__ = 0;
        invoke_viii(42,($12|0),($569|0),($13|0));
        $571 = __THREW__; __THREW__ = 0;
        $572 = $571&1;
        if ($572) {
         label = 186;
         break;
        }
        $573 = HEAP32[$81>>2]|0;
        $574 = HEAP32[$82>>2]|0;
        $575 = ($573>>>0)<($574>>>0);
        if ($575) {
         $576 = ($573|0)==(0|0);
         if ($576) {
          $585 = 0;
         } else {
          $577 = (($573) + 4|0);
          $578 = HEAP32[$90>>2]|0;
          $579 = (($573) + 8|0);
          $580 = (($573) + 12|0);
          HEAP32[$580>>2] = $578;
          $581 = HEAP32[$12>>2]|0;
          HEAP32[$573>>2] = $581;
          $582 = HEAP32[$91>>2]|0;
          HEAP32[$577>>2] = $582;
          $583 = HEAP32[$92>>2]|0;
          HEAP32[$579>>2] = $583;
          HEAP32[$92>>2] = 0;
          HEAP32[$91>>2] = 0;
          HEAP32[$12>>2] = 0;
          $$pre$i66$i = HEAP32[$81>>2]|0;
          $585 = $$pre$i66$i;
         }
         $584 = (($585) + 16|0);
         HEAP32[$81>>2] = $584;
        } else {
         $586 = HEAP32[$80>>2]|0;
         $587 = $573;
         $588 = $586;
         $589 = (($587) - ($588))|0;
         $590 = $589 >> 4;
         $591 = (($590) + 1)|0;
         $592 = ($591|0)<(0);
         if ($592) {
          label = 196;
          break;
         }
         $595 = $574;
         $596 = (($595) - ($588))|0;
         $597 = $596 >> 4;
         $598 = ($597>>>0)<(1073741823);
         if ($598) {
          $599 = $596 >> 3;
          $600 = ($599>>>0)<($591>>>0);
          $601 = $600 ? $591 : $599;
          $$0$i$i$i68$i = $601;
         } else {
          $$0$i$i$i68$i = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65$i,$$0$i$i$i68$i,$590,$86);
         $602 = HEAP32[$93>>2]|0;
         $603 = ($602|0)==(0|0);
         if (!($603)) {
          $604 = (($602) + 4|0);
          $605 = HEAP32[$90>>2]|0;
          $606 = (($602) + 8|0);
          $607 = (($602) + 12|0);
          HEAP32[$607>>2] = $605;
          $608 = HEAP32[$12>>2]|0;
          HEAP32[$602>>2] = $608;
          $609 = HEAP32[$91>>2]|0;
          HEAP32[$604>>2] = $609;
          $610 = HEAP32[$92>>2]|0;
          HEAP32[$606>>2] = $610;
          HEAP32[$92>>2] = 0;
          HEAP32[$91>>2] = 0;
          HEAP32[$12>>2] = 0;
         }
         $611 = (($602) + 16|0);
         HEAP32[$93>>2] = $611;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($80,$__v$i$i65$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
        $612 = HEAP8[$name4$i>>0]|0;
        $613 = $612 & 1;
        $614 = ($613<<24>>24)==(0);
        if ($614) {
         $t0$2$i$ph$be = $520;
        } else {
         $615 = HEAP32[$118>>2]|0;
         _free($615);
         $t0$2$i$ph$be = $520;
        }
       }
       $616 = HEAP8[$t0$2$i$ph$be>>0]|0;
       $617 = ($616<<24>>24)==(69);
       if ($617) {
        label = 206;
        break;
       } else {
        $932 = $616;$pop_subs$0$off0$i$ph84 = 1;$t0$2$i$ph83 = $t0$2$i$ph$be;
       }
      }
      switch (label|0) {
       case 53: {
        __THREW__ = 0;
        invoke_v(41);
        $197 = __THREW__; __THREW__ = 0;
        $198 = $197&1;
        if ($198) {
         $224 = ___cxa_find_matching_catch()|0;
         $225 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
         $$0$i20 = $225;$$01$i19 = $224;
         label = 68;
         break;
        } else {
         // unreachable;
        }
        break;
       }
       case 61: {
        $216 = ___cxa_find_matching_catch()|0;
        $217 = tempRet0;
        $$0$i20 = $217;$$01$i19 = $216;
        label = 68;
        break;
       }
       case 62: {
        $218 = ___cxa_find_matching_catch()|0;
        $219 = tempRet0;
        $220 = HEAP8[$0>>0]|0;
        $221 = $220 & 1;
        $222 = ($221<<24>>24)==(0);
        if ($222) {
         $$0$i20 = $219;$$01$i19 = $218;
         label = 68;
        } else {
         $223 = HEAP32[$102>>2]|0;
         _free($223);
         $$0$i20 = $219;$$01$i19 = $218;
         label = 68;
        }
        break;
       }
       case 84: {
        $274 = ___cxa_find_matching_catch()|0;
        $275 = tempRet0;
        $$1$i = $275;$$12$i = $274;
        label = 104;
        break;
       }
       case 85: {
        $276 = ___cxa_find_matching_catch()|0;
        $277 = tempRet0;
        $278 = HEAP8[$3>>0]|0;
        $279 = $278 & 1;
        $280 = ($279<<24>>24)==(0);
        if ($280) {
         $$1$i = $277;$$12$i = $276;
         label = 104;
        } else {
         $281 = HEAP32[$109>>2]|0;
         _free($281);
         $$1$i = $277;$$12$i = $276;
         label = 104;
        }
        break;
       }
       case 94: {
        __THREW__ = 0;
        invoke_v(41);
        $309 = __THREW__; __THREW__ = 0;
        $310 = $309&1;
        if ($310) {
         $332 = ___cxa_find_matching_catch()|0;
         $333 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
         $$1$i = $333;$$12$i = $332;
         label = 104;
         break;
        } else {
         // unreachable;
        }
        break;
       }
       case 122: {
        $379 = ___cxa_find_matching_catch()|0;
        $380 = tempRet0;
        $$2$i = $380;$$23$i = $379;
        label = 142;
        break;
       }
       case 123: {
        $381 = ___cxa_find_matching_catch()|0;
        $382 = tempRet0;
        $383 = HEAP8[$6>>0]|0;
        $384 = $383 & 1;
        $385 = ($384<<24>>24)==(0);
        if ($385) {
         $$2$i = $382;$$23$i = $381;
         label = 142;
        } else {
         $386 = HEAP32[$116>>2]|0;
         _free($386);
         $$2$i = $382;$$23$i = $381;
         label = 142;
        }
        break;
       }
       case 132: {
        __THREW__ = 0;
        invoke_v(41);
        $414 = __THREW__; __THREW__ = 0;
        $415 = $414&1;
        if ($415) {
         $437 = ___cxa_find_matching_catch()|0;
         $438 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
         $$2$i = $438;$$23$i = $437;
         label = 142;
         break;
        } else {
         // unreachable;
        }
        break;
       }
       case 157: {
        __THREW__ = 0;
        invoke_v(41);
        $491 = __THREW__; __THREW__ = 0;
        $492 = $491&1;
        if ($492) {
         $515 = ___cxa_find_matching_catch()|0;
         $516 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
         $$3$i = $516;$$34$i = $515;
         label = 169;
         break;
        } else {
         // unreachable;
        }
        break;
       }
       case 167: {
        $513 = ___cxa_find_matching_catch()|0;
        $514 = tempRet0;
        $$3$i = $514;$$34$i = $513;
        label = 169;
        break;
       }
       case 186: {
        $558 = ___cxa_find_matching_catch()|0;
        $559 = tempRet0;
        $$4$i = $559;$$45$i = $558;
        label = 209;
        break;
       }
       case 187: {
        $560 = ___cxa_find_matching_catch()|0;
        $561 = tempRet0;
        $562 = HEAP8[$11>>0]|0;
        $563 = $562 & 1;
        $564 = ($563<<24>>24)==(0);
        if ($564) {
         $$4$i = $561;$$45$i = $560;
         label = 209;
        } else {
         $565 = HEAP32[$95>>2]|0;
         _free($565);
         $$4$i = $561;$$45$i = $560;
         label = 209;
        }
        break;
       }
       case 196: {
        __THREW__ = 0;
        invoke_v(41);
        $593 = __THREW__; __THREW__ = 0;
        $594 = $593&1;
        if ($594) {
         $621 = ___cxa_find_matching_catch()|0;
         $622 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
         $$4$i = $622;$$45$i = $621;
         label = 209;
         break;
        } else {
         // unreachable;
        }
        break;
       }
       case 206: {
        $618 = (($t0$2$i$ph$be) + 1|0);
        $619 = HEAP32[$cv$i>>2]|0;
        $620 = (($db) + 48|0);
        HEAP32[$620>>2] = $619;
        $933 = $618;
        label = 212;
        break;
       }
       case 211: {
        $627 = (($t0$2$i$be) + 1|0);
        $628 = HEAP32[$cv$i>>2]|0;
        $629 = (($db) + 48|0);
        HEAP32[$629>>2] = $628;
        if ($pop_subs$0$off0$i$ph84) {
         $933 = $627;
         label = 212;
        } else {
         $$07$i = $627;
         break L6;
        }
        break;
       }
      }
      if ((label|0) == 68) {
       $232 = HEAP8[$name$i13>>0]|0;
       $233 = $232 & 1;
       $234 = ($233<<24>>24)==(0);
       if ($234) {
        $$5$i = $$0$i20;$$56$i = $$01$i19;
        ___resumeException($$56$i|0);
        // unreachable;
       }
       $235 = HEAP32[$119>>2]|0;
       _free($235);
       $$5$i = $$0$i20;$$56$i = $$01$i19;
       ___resumeException($$56$i|0);
       // unreachable;
      }
      else if ((label|0) == 104) {
       $334 = HEAP8[$name1$i>>0]|0;
       $335 = $334 & 1;
       $336 = ($335<<24>>24)==(0);
       if ($336) {
        $$5$i = $$1$i;$$56$i = $$12$i;
        ___resumeException($$56$i|0);
        // unreachable;
       }
       $337 = HEAP32[$120>>2]|0;
       _free($337);
       $$5$i = $$1$i;$$56$i = $$12$i;
       ___resumeException($$56$i|0);
       // unreachable;
      }
      else if ((label|0) == 142) {
       $439 = HEAP8[$name2$i14>>0]|0;
       $440 = $439 & 1;
       $441 = ($440<<24>>24)==(0);
       if ($441) {
        $$5$i = $$2$i;$$56$i = $$23$i;
        ___resumeException($$56$i|0);
        // unreachable;
       }
       $442 = HEAP32[$121>>2]|0;
       _free($442);
       $$5$i = $$2$i;$$56$i = $$23$i;
       ___resumeException($$56$i|0);
       // unreachable;
      }
      else if ((label|0) == 169) {
       if ($457) {
        $$5$i = $$3$i;$$56$i = $$34$i;
        ___resumeException($$56$i|0);
        // unreachable;
       }
       $517 = HEAP32[$88>>2]|0;
       _free($517);
       $$5$i = $$3$i;$$56$i = $$34$i;
       ___resumeException($$56$i|0);
       // unreachable;
      }
      else if ((label|0) == 209) {
       $623 = HEAP8[$name4$i>>0]|0;
       $624 = $623 & 1;
       $625 = ($624<<24>>24)==(0);
       if ($625) {
        $$5$i = $$4$i;$$56$i = $$45$i;
        ___resumeException($$56$i|0);
        // unreachable;
       }
       $626 = HEAP32[$118>>2]|0;
       _free($626);
       $$5$i = $$4$i;$$56$i = $$45$i;
       ___resumeException($$56$i|0);
       // unreachable;
      }
      else if ((label|0) == 212) {
       $630 = (($db) + 16|0);
       $631 = HEAP32[$630>>2]|0;
       $632 = HEAP32[$81>>2]|0;
       $633 = ($631|0)==($632|0);
       if ($633) {
        $$07$i = $933;
        break;
       }
       $634 = (($632) + -16|0);
       $636 = $632;
       while(1) {
        $635 = (($636) + -16|0);
        HEAP32[$81>>2] = $635;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($635);
        $637 = HEAP32[$81>>2]|0;
        $638 = ($637|0)==($634|0);
        if ($638) {
         $$07$i = $933;
         break;
        } else {
         $636 = $637;
        }
       }
      }
     }
    } else {
     $$07$i = $$first;
    }
   }
  } while(0);
  $639 = ($$07$i|0)==($$first|0);
  $first$ = $639 ? $first : $$07$i;
  $$02 = $first$;
  STACKTOP = sp;return ($$02|0);
 } else if ((($24|0) == 90)) {
  $640 = ($$first|0)==($last|0);
  if ($640) {
   $$0$i12 = $last;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  }
  $641 = ($23<<24>>24)==(90);
  if (!($641)) {
   $$0$i12 = $$first;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  }
  $642 = (($$first) + 1|0);
  $643 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($642,$last,$db)|0);
  $644 = ($643|0)==($642|0);
  $645 = ($643|0)==($last|0);
  $or$cond$i = $644 | $645;
  if ($or$cond$i) {
   $$0$i12 = $$first;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  }
  $646 = HEAP8[$643>>0]|0;
  $647 = ($646<<24>>24)==(69);
  if (!($647)) {
   $$0$i12 = $$first;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  }
  $648 = (($643) + 1|0);
  $649 = ($648|0)==($last|0);
  if ($649) {
   $$0$i12 = $$first;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  }
  $650 = HEAP8[$648>>0]|0;
  $651 = $650 << 24 >> 24;
  if ((($651|0) == 115)) {
   $652 = (($643) + 2|0);
   $653 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($652,$last)|0);
   $654 = HEAP32[$db>>2]|0;
   $655 = (($db) + 4|0);
   $656 = HEAP32[$655>>2]|0;
   $657 = ($654|0)==($656|0);
   if ($657) {
    $$0$i12 = $653;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $658 = (($656) + -24|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($658,3928,16)|0);
   $$0$i12 = $653;
   $769 = ($$0$i12|0)==($$first|0);
   $first$4 = $769 ? $first : $$0$i12;
   STACKTOP = sp;return ($first$4|0);
  } else if ((($651|0) == 100)) {
   $659 = (($643) + 2|0);
   $660 = ($659|0)==($last|0);
   if ($660) {
    $$0$i12 = $$first;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $661 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($659,$last)|0);
   $662 = ($661|0)==($last|0);
   if ($662) {
    $$0$i12 = $$first;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $663 = HEAP8[$661>>0]|0;
   $664 = ($663<<24>>24)==(95);
   if (!($664)) {
    $$0$i12 = $$first;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $665 = (($661) + 1|0);
   $666 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($665,$last,$db)|0);
   $667 = ($666|0)==($665|0);
   $668 = (($db) + 4|0);
   $669 = HEAP32[$668>>2]|0;
   if ($667) {
    $711 = (($669) + -24|0);
    $713 = $669;
    while(1) {
     $712 = (($713) + -24|0);
     HEAP32[$668>>2] = $712;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($712);
     $714 = HEAP32[$668>>2]|0;
     $715 = ($714|0)==($711|0);
     if ($715) {
      $$0$i12 = $$first;
      break;
     } else {
      $713 = $714;
     }
    }
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $670 = HEAP32[$db>>2]|0;
   $671 = $669;
   $672 = $670;
   $673 = (($671) - ($672))|0;
   $674 = (($673|0) / 24)&-1;
   $675 = ($674>>>0)<(2);
   if ($675) {
    $$0$i12 = $$first;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $676 = (($669) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i,$676);
   $677 = HEAP32[$668>>2]|0;
   $678 = (($677) + -24|0);
   $680 = $677;
   while(1) {
    $679 = (($680) + -24|0);
    HEAP32[$668>>2] = $679;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($679);
    $681 = HEAP32[$668>>2]|0;
    $682 = ($681|0)==($678|0);
    if ($682) {
     break;
    } else {
     $680 = $681;
    }
   }
   $683 = (($677) + -48|0);
   __THREW__ = 0;
   (invoke_iiii(32,($683|0),(2152|0),2)|0);
   $684 = __THREW__; __THREW__ = 0;
   $685 = $684&1;
   if (!($685)) {
    $686 = HEAP32[$668>>2]|0;
    $687 = (($686) + -24|0);
    $688 = HEAP8[$name$i>>0]|0;
    $689 = $688 & 1;
    $690 = ($689<<24>>24)==(0);
    if ($690) {
     $695 = (($name$i) + 1|0);
     $696 = $688&255;
     $697 = $696 >>> 1;
     $698 = $695;$699 = $697;
    } else {
     $691 = (($name$i) + 8|0);
     $692 = HEAP32[$691>>2]|0;
     $693 = (($name$i) + 4|0);
     $694 = HEAP32[$693>>2]|0;
     $698 = $692;$699 = $694;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($687|0),($698|0),($699|0))|0);
    $700 = __THREW__; __THREW__ = 0;
    $701 = $700&1;
    if (!($701)) {
     if ($690) {
      $$0$i12 = $666;
      $769 = ($$0$i12|0)==($$first|0);
      $first$4 = $769 ? $first : $$0$i12;
      STACKTOP = sp;return ($first$4|0);
     }
     $702 = (($name$i) + 8|0);
     $703 = HEAP32[$702>>2]|0;
     _free($703);
     $$0$i12 = $666;
     $769 = ($$0$i12|0)==($$first|0);
     $first$4 = $769 ? $first : $$0$i12;
     STACKTOP = sp;return ($first$4|0);
    }
   }
   $704 = ___cxa_find_matching_catch()|0;
   $705 = tempRet0;
   $706 = HEAP8[$name$i>>0]|0;
   $707 = $706 & 1;
   $708 = ($707<<24>>24)==(0);
   if ($708) {
    $$01$i = $705;$$02$i = $704;
    ___resumeException($$02$i|0);
    // unreachable;
   }
   $709 = (($name$i) + 8|0);
   $710 = HEAP32[$709>>2]|0;
   _free($710);
   $$01$i = $705;$$02$i = $704;
   ___resumeException($$02$i|0);
   // unreachable;
  } else {
   $716 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($648,$last,$db)|0);
   $717 = ($716|0)==($648|0);
   if ($717) {
    $762 = (($db) + 4|0);
    $763 = HEAP32[$762>>2]|0;
    $764 = (($763) + -24|0);
    $766 = $763;
    while(1) {
     $765 = (($766) + -24|0);
     HEAP32[$762>>2] = $765;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($765);
     $767 = HEAP32[$762>>2]|0;
     $768 = ($767|0)==($764|0);
     if ($768) {
      $$0$i12 = $$first;
      break;
     } else {
      $766 = $767;
     }
    }
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $718 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($716,$last)|0);
   $719 = (($db) + 4|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = HEAP32[$db>>2]|0;
   $722 = $720;
   $723 = $721;
   $724 = (($722) - ($723))|0;
   $725 = (($724|0) / 24)&-1;
   $726 = ($725>>>0)<(2);
   if ($726) {
    $$0$i12 = $718;
    $769 = ($$0$i12|0)==($$first|0);
    $first$4 = $769 ? $first : $$0$i12;
    STACKTOP = sp;return ($first$4|0);
   }
   $727 = (($720) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i,$727);
   $728 = HEAP32[$719>>2]|0;
   $729 = (($728) + -24|0);
   $731 = $728;
   while(1) {
    $730 = (($731) + -24|0);
    HEAP32[$719>>2] = $730;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($730);
    $732 = HEAP32[$719>>2]|0;
    $733 = ($732|0)==($729|0);
    if ($733) {
     break;
    } else {
     $731 = $732;
    }
   }
   $734 = (($728) + -48|0);
   __THREW__ = 0;
   (invoke_iiii(32,($734|0),(2152|0),2)|0);
   $735 = __THREW__; __THREW__ = 0;
   $736 = $735&1;
   if (!($736)) {
    $737 = HEAP32[$719>>2]|0;
    $738 = (($737) + -24|0);
    $739 = HEAP8[$name2$i>>0]|0;
    $740 = $739 & 1;
    $741 = ($740<<24>>24)==(0);
    if ($741) {
     $746 = (($name2$i) + 1|0);
     $747 = $739&255;
     $748 = $747 >>> 1;
     $749 = $746;$750 = $748;
    } else {
     $742 = (($name2$i) + 8|0);
     $743 = HEAP32[$742>>2]|0;
     $744 = (($name2$i) + 4|0);
     $745 = HEAP32[$744>>2]|0;
     $749 = $743;$750 = $745;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($738|0),($749|0),($750|0))|0);
    $751 = __THREW__; __THREW__ = 0;
    $752 = $751&1;
    if (!($752)) {
     if ($741) {
      $$0$i12 = $718;
      $769 = ($$0$i12|0)==($$first|0);
      $first$4 = $769 ? $first : $$0$i12;
      STACKTOP = sp;return ($first$4|0);
     }
     $753 = (($name2$i) + 8|0);
     $754 = HEAP32[$753>>2]|0;
     _free($754);
     $$0$i12 = $718;
     $769 = ($$0$i12|0)==($$first|0);
     $first$4 = $769 ? $first : $$0$i12;
     STACKTOP = sp;return ($first$4|0);
    }
   }
   $755 = ___cxa_find_matching_catch()|0;
   $756 = tempRet0;
   $757 = HEAP8[$name2$i>>0]|0;
   $758 = $757 & 1;
   $759 = ($758<<24>>24)==(0);
   if ($759) {
    $$01$i = $756;$$02$i = $755;
    ___resumeException($$02$i|0);
    // unreachable;
   }
   $760 = (($name2$i) + 8|0);
   $761 = HEAP32[$760>>2]|0;
   _free($761);
   $$01$i = $756;$$02$i = $755;
   ___resumeException($$02$i|0);
   // unreachable;
  }
 } else {
  $770 = $$first;
  $771 = (($16) - ($770))|0;
  $772 = ($771|0)>(1);
  do {
   if ($772) {
    $773 = ($23<<24>>24)==(83);
    if ($773) {
     $774 = (($$first) + 1|0);
     $775 = HEAP8[$774>>0]|0;
     $776 = ($775<<24>>24)==(116);
     if ($776) {
      $777 = (($$first) + 2|0);
      $778 = ($777|0)==($last|0);
      if ($778) {
       $St$0$off0$i = 0;$t0$0$i = $last;
      } else {
       $779 = HEAP8[$777>>0]|0;
       $780 = ($779<<24>>24)==(76);
       $781 = (($$first) + 3|0);
       $$$i = $780 ? $781 : $777;
       $St$0$off0$i = 0;$t0$0$i = $$$i;
      }
     } else {
      $St$0$off0$i = 1;$t0$0$i = $$first;
     }
    } else {
     $St$0$off0$i = 1;$t0$0$i = $$first;
    }
    $782 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i,$last,$db)|0);
    $783 = ($782|0)==($t0$0$i|0);
    $brmerge$i = $783 | $St$0$off0$i;
    $first$mux$i = $783 ? $$first : $782;
    if ($brmerge$i) {
     $$0$i = $first$mux$i;
    } else {
     $784 = HEAP32[$db>>2]|0;
     $785 = (($db) + 4|0);
     $786 = HEAP32[$785>>2]|0;
     $787 = ($784|0)==($786|0);
     if ($787) {
      break;
     }
     $788 = (($786) + -24|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($788,0,2408,5)|0);
     $$0$i = $782;
    }
    $789 = ($$0$i|0)==($$first|0);
    if (!($789)) {
     $790 = ($$0$i|0)==($last|0);
     if ($790) {
      $$02 = $last;
      STACKTOP = sp;return ($$02|0);
     }
     $791 = HEAP8[$$0$i>>0]|0;
     $792 = ($791<<24>>24)==(73);
     if (!($792)) {
      $$02 = $$0$i;
      STACKTOP = sp;return ($$02|0);
     }
     $793 = HEAP32[$db>>2]|0;
     $794 = (($db) + 4|0);
     $795 = HEAP32[$794>>2]|0;
     $796 = ($793|0)==($795|0);
     if ($796) {
      $$02 = $first;
      STACKTOP = sp;return ($$02|0);
     }
     $797 = (($db) + 16|0);
     $798 = (($795) + -24|0);
     $799 = (($db) + 12|0);
     $800 = HEAP32[$799>>2]|0;
     HEAP32[$15>>2] = $800;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14,$798,$15);
     $801 = (($db) + 20|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = (($db) + 24|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = ($802>>>0)<($804>>>0);
     if ($805) {
      $806 = ($802|0)==(0|0);
      if ($806) {
       $818 = 0;
      } else {
       $807 = (($802) + 4|0);
       $808 = (($14) + 12|0);
       $809 = HEAP32[$808>>2]|0;
       $810 = (($802) + 8|0);
       $811 = (($802) + 12|0);
       HEAP32[$811>>2] = $809;
       $812 = HEAP32[$14>>2]|0;
       HEAP32[$802>>2] = $812;
       $813 = (($14) + 4|0);
       $814 = HEAP32[$813>>2]|0;
       HEAP32[$807>>2] = $814;
       $815 = (($14) + 8|0);
       $816 = HEAP32[$815>>2]|0;
       HEAP32[$810>>2] = $816;
       HEAP32[$815>>2] = 0;
       HEAP32[$813>>2] = 0;
       HEAP32[$14>>2] = 0;
       $$pre$i = HEAP32[$801>>2]|0;
       $818 = $$pre$i;
      }
      $817 = (($818) + 16|0);
      HEAP32[$801>>2] = $817;
     } else {
      $819 = (($db) + 28|0);
      $820 = HEAP32[$797>>2]|0;
      $821 = $802;
      $822 = $820;
      $823 = (($821) - ($822))|0;
      $824 = $823 >> 4;
      $825 = (($824) + 1)|0;
      $826 = ($825|0)<(0);
      if ($826) {
       __THREW__ = 0;
       invoke_v(41);
       $827 = __THREW__; __THREW__ = 0;
       $828 = $827&1;
       if (!($828)) {
        // unreachable;
       }
       $859 = ___cxa_find_matching_catch()|0;
       $860 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
       $$0 = $860;$$01 = $859;
       ___resumeException($$01|0);
       // unreachable;
      }
      $829 = $804;
      $830 = (($829) - ($822))|0;
      $831 = $830 >> 4;
      $832 = ($831>>>0)<(1073741823);
      if ($832) {
       $833 = $830 >> 3;
       $834 = ($833>>>0)<($825>>>0);
       $835 = $834 ? $825 : $833;
       $$0$i$i$i = $835;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$824,$819);
      $836 = (($__v$i$i) + 8|0);
      $837 = HEAP32[$836>>2]|0;
      $838 = ($837|0)==(0|0);
      if (!($838)) {
       $839 = (($837) + 4|0);
       $840 = (($14) + 12|0);
       $841 = HEAP32[$840>>2]|0;
       $842 = (($837) + 8|0);
       $843 = (($837) + 12|0);
       HEAP32[$843>>2] = $841;
       $844 = HEAP32[$14>>2]|0;
       HEAP32[$837>>2] = $844;
       $845 = (($14) + 4|0);
       $846 = HEAP32[$845>>2]|0;
       HEAP32[$839>>2] = $846;
       $847 = (($14) + 8|0);
       $848 = HEAP32[$847>>2]|0;
       HEAP32[$842>>2] = $848;
       HEAP32[$847>>2] = 0;
       HEAP32[$845>>2] = 0;
       HEAP32[$14>>2] = 0;
      }
      $849 = (($837) + 16|0);
      HEAP32[$836>>2] = $849;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($797,$__v$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
     $850 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$0$i,$last,$db)|0);
     $851 = ($850|0)==($$0$i|0);
     if ($851) {
      $$02 = $first;
      STACKTOP = sp;return ($$02|0);
     }
     $852 = HEAP32[$794>>2]|0;
     $853 = HEAP32[$db>>2]|0;
     $854 = $852;
     $855 = $853;
     $856 = (($854) - ($855))|0;
     $857 = (($856|0) / 24)&-1;
     $858 = ($857>>>0)<(2);
     if ($858) {
      $$02 = $first;
      STACKTOP = sp;return ($$02|0);
     }
     $861 = (($852) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp,$861);
     $862 = HEAP32[$794>>2]|0;
     $863 = (($862) + -24|0);
     $865 = $862;
     while(1) {
      $864 = (($865) + -24|0);
      HEAP32[$794>>2] = $864;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($864);
      $866 = HEAP32[$794>>2]|0;
      $867 = ($866|0)==($863|0);
      if ($867) {
       break;
      } else {
       $865 = $866;
      }
     }
     $868 = (($862) + -48|0);
     $869 = HEAP8[$tmp>>0]|0;
     $870 = $869 & 1;
     $871 = ($870<<24>>24)==(0);
     if ($871) {
      $876 = (($tmp) + 1|0);
      $877 = $869&255;
      $878 = $877 >>> 1;
      $879 = $876;$880 = $878;
     } else {
      $872 = (($tmp) + 8|0);
      $873 = HEAP32[$872>>2]|0;
      $874 = (($tmp) + 4|0);
      $875 = HEAP32[$874>>2]|0;
      $879 = $873;$880 = $875;
     }
     __THREW__ = 0;
     (invoke_iiii(32,($868|0),($879|0),($880|0))|0);
     $881 = __THREW__; __THREW__ = 0;
     $882 = $881&1;
     if ($882) {
      $885 = ___cxa_find_matching_catch()|0;
      $886 = tempRet0;
      if ($871) {
       $$0 = $886;$$01 = $885;
       ___resumeException($$01|0);
       // unreachable;
      }
      $887 = (($tmp) + 8|0);
      $888 = HEAP32[$887>>2]|0;
      _free($888);
      $$0 = $886;$$01 = $885;
      ___resumeException($$01|0);
      // unreachable;
     } else {
      if ($871) {
       $$02 = $850;
       STACKTOP = sp;return ($$02|0);
      }
      $883 = (($tmp) + 8|0);
      $884 = HEAP32[$883>>2]|0;
      _free($884);
      $$02 = $850;
      STACKTOP = sp;return ($$02|0);
     }
    }
   }
  } while(0);
  $889 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first,$last,$db)|0);
  $890 = ($889|0)==($$first|0);
  $891 = ($889|0)==($last|0);
  $or$cond = $890 | $891;
  if ($or$cond) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $892 = HEAP8[$889>>0]|0;
  $893 = ($892<<24>>24)==(73);
  if (!($893)) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $894 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($889,$last,$db)|0);
  $895 = ($894|0)==($889|0);
  if ($895) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $896 = (($db) + 4|0);
  $897 = HEAP32[$896>>2]|0;
  $898 = HEAP32[$db>>2]|0;
  $899 = $897;
  $900 = $898;
  $901 = (($899) - ($900))|0;
  $902 = (($901|0) / 24)&-1;
  $903 = ($902>>>0)<(2);
  if ($903) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $904 = (($897) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp3,$904);
  $905 = HEAP32[$896>>2]|0;
  $906 = (($905) + -24|0);
  $908 = $905;
  while(1) {
   $907 = (($908) + -24|0);
   HEAP32[$896>>2] = $907;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($907);
   $909 = HEAP32[$896>>2]|0;
   $910 = ($909|0)==($906|0);
   if ($910) {
    break;
   } else {
    $908 = $909;
   }
  }
  $911 = (($905) + -48|0);
  $912 = HEAP8[$tmp3>>0]|0;
  $913 = $912 & 1;
  $914 = ($913<<24>>24)==(0);
  if ($914) {
   $919 = (($tmp3) + 1|0);
   $920 = $912&255;
   $921 = $920 >>> 1;
   $922 = $919;$923 = $921;
  } else {
   $915 = (($tmp3) + 8|0);
   $916 = HEAP32[$915>>2]|0;
   $917 = (($tmp3) + 4|0);
   $918 = HEAP32[$917>>2]|0;
   $922 = $916;$923 = $918;
  }
  __THREW__ = 0;
  (invoke_iiii(32,($911|0),($922|0),($923|0))|0);
  $924 = __THREW__; __THREW__ = 0;
  $925 = $924&1;
  if ($925) {
   $928 = ___cxa_find_matching_catch()|0;
   $929 = tempRet0;
   if ($914) {
    $$0 = $929;$$01 = $928;
    ___resumeException($$01|0);
    // unreachable;
   }
   $930 = (($tmp3) + 8|0);
   $931 = HEAP32[$930>>2]|0;
   _free($931);
   $$0 = $929;$$01 = $928;
   ___resumeException($$01|0);
   // unreachable;
  } else {
   if ($914) {
    $$02 = $894;
    STACKTOP = sp;return ($$02|0);
   }
   $926 = (($tmp3) + 8|0);
   $927 = HEAP32[$926>>2]|0;
   _free($927);
   $$02 = $894;
   STACKTOP = sp;return ($$02|0);
  }
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this,$__pos,$__s,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  ___assert_fail((4008|0),(1776|0),1175,(4040|0));
  // unreachable;
 }
 if ($2) {
  $13 = 10;$17 = $0;
 } else {
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & -2;
  $phitmp$i = (($10) + -1)|0;
  $11 = $9&255;
  $13 = $phitmp$i;$17 = $11;
 }
 $12 = (($13) - ($8))|0;
 $14 = ($12>>>0)<($__n>>>0);
 if ($14) {
  $38 = (($8) + ($__n))|0;
  $39 = (($38) - ($13))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$39,$8,$__pos,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $15 = ($__n|0)==(0);
 if ($15) {
  STACKTOP = sp;return ($this|0);
 }
 $16 = $17 & 1;
 $18 = ($16<<24>>24)==(0);
 if ($18) {
  $21 = (($this) + 1|0);
  $24 = $21;
 } else {
  $19 = (($this) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $24 = $20;
 }
 $22 = (($8) - ($__pos))|0;
 $23 = ($8|0)==($__pos|0);
 $$pre = (($24) + ($__pos)|0);
 if ($23) {
  $$1 = $__s;
 } else {
  $25 = ($$pre>>>0)<=($__s>>>0);
  $26 = (($24) + ($8)|0);
  $27 = ($26>>>0)>($__s>>>0);
  $or$cond = $25 & $27;
  if ($or$cond) {
   $28 = (($__s) + ($__n)|0);
   $$0 = $28;
  } else {
   $$0 = $__s;
  }
  $$sum = (($__n) + ($__pos))|0;
  $29 = (($24) + ($$sum)|0);
  _memmove(($29|0),($$pre|0),($22|0))|0;
  $$1 = $$0;
 }
 _memmove(($$pre|0),($$1|0),($__n|0))|0;
 $30 = (($8) + ($__n))|0;
 $31 = HEAP8[$this>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  $35 = $30 << 1;
  $36 = $35&255;
  HEAP8[$this>>0] = $36;
 } else {
  $34 = (($this) + 4|0);
  HEAP32[$34>>2] = $30;
 }
 $37 = (($24) + ($30)|0);
 HEAP8[$37>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv) {
 $first = $first|0;
 $last = $last|0;
 $cv = $cv|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$cv>>2] = 0;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$2 = $first;
  STACKTOP = sp;return ($$2|0);
 }
 $1 = HEAP8[$first>>0]|0;
 $2 = ($1<<24>>24)==(114);
 if ($2) {
  HEAP32[$cv>>2] = 4;
  $3 = (($first) + 1|0);
  $$pre = HEAP8[$3>>0]|0;
  $$0 = $3;$5 = $$pre;$7 = 4;
 } else {
  $$0 = $first;$5 = $1;$7 = 0;
 }
 $4 = ($5<<24>>24)==(86);
 if ($4) {
  $6 = $7 | 2;
  HEAP32[$cv>>2] = $6;
  $8 = (($$0) + 1|0);
  $$pre1 = HEAP8[$8>>0]|0;
  $$1 = $8;$10 = $$pre1;$12 = $6;
 } else {
  $$1 = $$0;$10 = $5;$12 = $7;
 }
 $9 = ($10<<24>>24)==(75);
 if (!($9)) {
  $$2 = $$1;
  STACKTOP = sp;return ($$2|0);
 }
 $11 = $12 | 1;
 HEAP32[$cv>>2] = $11;
 $13 = (($$1) + 1|0);
 $$2 = $13;
 STACKTOP = sp;return ($$2|0);
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((3552|0),(3576|0),303,(1888|0));
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 HEAP32[$0>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$01$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = ($2|0)==($0|0);
 $$pre1 = HEAP32[$3>>2]|0;
 if ($4) {
  $21 = $$pre1;$22 = $0;
 } else {
  $$01$i = $2;$7 = $$pre1;
  while(1) {
   $5 = (($$01$i) + -16|0);
   $6 = (($7) + -16|0);
   HEAP32[$6>>2] = 0;
   $8 = (($7) + -12|0);
   HEAP32[$8>>2] = 0;
   $9 = (($$01$i) + -4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($7) + -8|0);
   HEAP32[$11>>2] = 0;
   $12 = (($7) + -4|0);
   HEAP32[$12>>2] = $10;
   $13 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $13;
   $14 = (($$01$i) + -12|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$8>>2] = $15;
   $16 = (($$01$i) + -8|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$11>>2] = $17;
   HEAP32[$16>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[$5>>2] = 0;
   $18 = HEAP32[$3>>2]|0;
   $19 = (($18) + -16|0);
   HEAP32[$3>>2] = $19;
   $20 = ($5|0)==($0|0);
   if ($20) {
    break;
   } else {
    $$01$i = $5;$7 = $19;
   }
  }
  $$pre = HEAP32[$this>>2]|0;
  $21 = $19;$22 = $$pre;
 }
 HEAP32[$this>>2] = $21;
 HEAP32[$3>>2] = $22;
 $23 = (($__v) + 8|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 HEAP32[$1>>2] = $25;
 HEAP32[$23>>2] = $24;
 $26 = (($this) + 8|0);
 $27 = (($__v) + 12|0);
 $28 = HEAP32[$26>>2]|0;
 $29 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $29;
 HEAP32[$27>>2] = $28;
 $30 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 $16 = $9;
 $17 = (($15) - ($16))|0;
 $18 = HEAP32[$12>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = ($__cap*24)|0;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + (($__start*24)|0)|0);
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + (($__cap*24)|0)|0);
 HEAP32[$0>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -24|0);
   HEAP32[$2>>2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 $16 = $9;
 $17 = (($15) - ($16))|0;
 $18 = HEAP32[$12>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$01$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = ($2|0)==($0|0);
 $$pre1 = HEAP32[$3>>2]|0;
 if ($4) {
  $13 = $$pre1;$14 = $0;
 } else {
  $$01$i = $2;$6 = $$pre1;
  while(1) {
   $5 = (($6) + -24|0);
   $7 = (($$01$i) + -24|0);
   ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   $8 = (($6) + -12|0);
   $9 = (($$01$i) + -12|0);
   ;HEAP32[$8+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   $10 = HEAP32[$3>>2]|0;
   $11 = (($10) + -24|0);
   HEAP32[$3>>2] = $11;
   $12 = ($7|0)==($0|0);
   if ($12) {
    break;
   } else {
    $$01$i = $7;$6 = $11;
   }
  }
  $$pre = HEAP32[$this>>2]|0;
  $13 = $11;$14 = $$pre;
 }
 HEAP32[$this>>2] = $13;
 HEAP32[$3>>2] = $14;
 $15 = (($__v) + 8|0);
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$1>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = (($this) + 8|0);
 $19 = (($__v) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i101 = 0, $$0$i$i$i110 = 0, $$0$i$i$i119 = 0, $$0$i$i$i127 = 0, $$0$i$i$i136 = 0, $$0$i$i$i145 = 0, $$0$i$i$i153 = 0, $$0$i$i$i16 = 0, $$0$i$i$i162 = 0, $$0$i$i$i171 = 0, $$0$i$i$i180 = 0, $$0$i$i$i189 = 0, $$0$i$i$i198 = 0, $$0$i$i$i207 = 0, $$0$i$i$i216 = 0, $$0$i$i$i225 = 0, $$0$i$i$i234 = 0, $$0$i$i$i242 = 0;
 var $$0$i$i$i25 = 0, $$0$i$i$i33 = 0, $$0$i$i$i41 = 0, $$0$i$i$i50 = 0, $$0$i$i$i58 = 0, $$0$i$i$i67 = 0, $$0$i$i$i7 = 0, $$0$i$i$i75 = 0, $$0$i$i$i84 = 0, $$0$i$i$i92 = 0, $$01 = 0, $$02 = 0, $$pre$i = 0, $$pre$i108 = 0, $$pre$i117 = 0, $$pre$i125 = 0, $$pre$i134 = 0, $$pre$i14 = 0, $$pre$i143 = 0, $$pre$i151 = 0;
 var $$pre$i160 = 0, $$pre$i169 = 0, $$pre$i178 = 0, $$pre$i187 = 0, $$pre$i196 = 0, $$pre$i205 = 0, $$pre$i214 = 0, $$pre$i223 = 0, $$pre$i23 = 0, $$pre$i232 = 0, $$pre$i240 = 0, $$pre$i31 = 0, $$pre$i39 = 0, $$pre$i48 = 0, $$pre$i5 = 0, $$pre$i56 = 0, $$pre$i65 = 0, $$pre$i73 = 0, $$pre$i82 = 0, $$pre$i90 = 0;
 var $$pre$i99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $__v$i$i = 0, $__v$i$i107 = 0, $__v$i$i116 = 0, $__v$i$i124 = 0, $__v$i$i13 = 0, $__v$i$i133 = 0, $__v$i$i142 = 0, $__v$i$i150 = 0, $__v$i$i159 = 0, $__v$i$i168 = 0, $__v$i$i177 = 0, $__v$i$i186 = 0, $__v$i$i195 = 0, $__v$i$i204 = 0, $__v$i$i213 = 0, $__v$i$i22 = 0, $__v$i$i222 = 0;
 var $__v$i$i231 = 0, $__v$i$i239 = 0, $__v$i$i30 = 0, $__v$i$i38 = 0, $__v$i$i4 = 0, $__v$i$i47 = 0, $__v$i$i55 = 0, $__v$i$i64 = 0, $__v$i$i72 = 0, $__v$i$i81 = 0, $__v$i$i89 = 0, $__v$i$i98 = 0, $first$ = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i239 = sp + 508|0;
 $__v$i$i231 = sp + 416|0;
 $__v$i$i222 = sp;
 $__v$i$i213 = sp + 1000|0;
 $__v$i$i204 = sp + 396|0;
 $__v$i$i195 = sp + 1236|0;
 $__v$i$i186 = sp + 488|0;
 $__v$i$i177 = sp + 980|0;
 $__v$i$i168 = sp + 96|0;
 $__v$i$i159 = sp + 116|0;
 $__v$i$i150 = sp + 136|0;
 $__v$i$i142 = sp + 156|0;
 $__v$i$i133 = sp + 176|0;
 $__v$i$i124 = sp + 196|0;
 $__v$i$i116 = sp + 216|0;
 $__v$i$i107 = sp + 960|0;
 $__v$i$i98 = sp + 236|0;
 $__v$i$i89 = sp + 256|0;
 $__v$i$i81 = sp + 276|0;
 $__v$i$i72 = sp + 296|0;
 $__v$i$i64 = sp + 316|0;
 $__v$i$i55 = sp + 336|0;
 $__v$i$i47 = sp + 356|0;
 $__v$i$i38 = sp + 376|0;
 $__v$i$i30 = sp + 1072|0;
 $__v$i$i22 = sp + 1120|0;
 $__v$i$i13 = sp + 1168|0;
 $__v$i$i4 = sp + 1216|0;
 $__v$i$i = sp + 1256|0;
 $0 = sp + 1280|0;
 $1 = sp + 528|0;
 $2 = sp + 936|0;
 $3 = sp + 552|0;
 $4 = sp + 576|0;
 $5 = sp + 600|0;
 $6 = sp + 624|0;
 $7 = sp + 648|0;
 $8 = sp + 672|0;
 $9 = sp + 696|0;
 $10 = sp + 720|0;
 $11 = sp + 744|0;
 $12 = sp + 768|0;
 $13 = sp + 792|0;
 $14 = sp + 816|0;
 $15 = sp + 840|0;
 $16 = sp + 864|0;
 $17 = sp + 888|0;
 $18 = sp + 912|0;
 $19 = sp + 48|0;
 $20 = sp + 1024|0;
 $21 = sp + 24|0;
 $22 = sp + 1048|0;
 $23 = sp + 1096|0;
 $24 = sp + 440|0;
 $25 = sp + 1144|0;
 $26 = sp + 72|0;
 $27 = sp + 464|0;
 $28 = sp + 1192|0;
 $29 = ($first|0)==($last|0);
 if ($29) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$first>>0]|0;
 $31 = $30 << 24 >> 24;
 do {
  switch ($31|0) {
  case 119:  {
   HEAP8[$1>>0] = 14;
   $69 = (($1) + 1|0);
   ;HEAP8[$69+0>>0]=HEAP8[3728+0>>0]|0;HEAP8[$69+1>>0]=HEAP8[3728+1>>0]|0;HEAP8[$69+2>>0]=HEAP8[3728+2>>0]|0;HEAP8[$69+3>>0]=HEAP8[3728+3>>0]|0;HEAP8[$69+4>>0]=HEAP8[3728+4>>0]|0;HEAP8[$69+5>>0]=HEAP8[3728+5>>0]|0;HEAP8[$69+6>>0]=HEAP8[3728+6>>0]|0;
   $70 = (($1) + 8|0);
   HEAP8[$70>>0] = 0;
   $71 = (($1) + 12|0);
   ;HEAP32[$71+0>>2]=0|0;HEAP32[$71+4>>2]=0|0;HEAP32[$71+8>>2]=0|0;
   $72 = (($db) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($db) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($73>>>0)<($75>>>0);
   if ($76) {
    $77 = ($73|0)==(0|0);
    if ($77) {
     $80 = 0;
    } else {
     ;HEAP32[$73+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $78 = (($73) + 12|0);
     ;HEAP32[$78+0>>2]=HEAP32[$71+0>>2]|0;HEAP32[$78+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$71+8>>2]|0;
     ;HEAP32[$71+0>>2]=0|0;HEAP32[$71+4>>2]=0|0;HEAP32[$71+8>>2]=0|0;
     $$pre$i5 = HEAP32[$72>>2]|0;
     $80 = $$pre$i5;
    }
    $79 = (($80) + 24|0);
    HEAP32[$72>>2] = $79;
   } else {
    $81 = (($db) + 12|0);
    $82 = HEAP32[$db>>2]|0;
    $83 = $73;
    $84 = $82;
    $85 = (($83) - ($84))|0;
    $86 = (($85|0) / 24)&-1;
    $87 = (($86) + 1)|0;
    $88 = ($87|0)<(0);
    if ($88) {
     __THREW__ = 0;
     invoke_v(41);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if (!($90)) {
      // unreachable;
     }
     $104 = ___cxa_find_matching_catch()|0;
     $105 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $$01 = $105;$$02 = $104;
     ___resumeException($$02|0);
     // unreachable;
    }
    $91 = $75;
    $92 = (($91) - ($84))|0;
    $93 = (($92|0) / 24)&-1;
    $94 = ($93>>>0)<(1073741823);
    if ($94) {
     $95 = $93 << 1;
     $96 = ($95>>>0)<($87>>>0);
     $97 = $96 ? $87 : $95;
     $$0$i$i$i7 = $97;
    } else {
     $$0$i$i$i7 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4,$$0$i$i$i7,$86,$81);
    $98 = (($__v$i$i4) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if (!($100)) {
     ;HEAP32[$99+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $101 = (($99) + 12|0);
     ;HEAP32[$101+0>>2]=HEAP32[$71+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$71+8>>2]|0;
     ;HEAP32[$71+0>>2]=0|0;HEAP32[$71+4>>2]=0|0;HEAP32[$71+8>>2]=0|0;
    }
    $102 = (($99) + 24|0);
    HEAP32[$98>>2] = $102;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i4);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $103 = (($first) + 1|0);
   $$0 = $103;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 111:  {
   $603 = (_malloc(32)|0);
   $604 = (($15) + 8|0);
   HEAP32[$604>>2] = $603;
   HEAP32[$15>>2] = 33;
   $605 = (($15) + 4|0);
   HEAP32[$605>>2] = 17;
   dest=$603+0|0; src=3824+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $606 = (($603) + 17|0);
   HEAP8[$606>>0] = 0;
   $607 = (($15) + 12|0);
   ;HEAP32[$607+0>>2]=0|0;HEAP32[$607+4>>2]=0|0;HEAP32[$607+8>>2]=0|0;
   $608 = (($db) + 4|0);
   $609 = HEAP32[$608>>2]|0;
   $610 = (($db) + 8|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = ($609>>>0)<($611>>>0);
   if ($612) {
    $613 = ($609|0)==(0|0);
    if ($613) {
     $616 = 0;
    } else {
     ;HEAP32[$609+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$609+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$609+8>>2]=HEAP32[$15+8>>2]|0;
     ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $614 = (($609) + 12|0);
     ;HEAP32[$614+0>>2]=HEAP32[$607+0>>2]|0;HEAP32[$614+4>>2]=HEAP32[$607+4>>2]|0;HEAP32[$614+8>>2]=HEAP32[$607+8>>2]|0;
     ;HEAP32[$607+0>>2]=0|0;HEAP32[$607+4>>2]=0|0;HEAP32[$607+8>>2]=0|0;
     $$pre$i125 = HEAP32[$608>>2]|0;
     $616 = $$pre$i125;
    }
    $615 = (($616) + 24|0);
    HEAP32[$608>>2] = $615;
   } else {
    $617 = (($db) + 12|0);
    $618 = HEAP32[$db>>2]|0;
    $619 = $609;
    $620 = $618;
    $621 = (($619) - ($620))|0;
    $622 = (($621|0) / 24)&-1;
    $623 = (($622) + 1)|0;
    $624 = ($623|0)<(0);
    if ($624) {
     __THREW__ = 0;
     invoke_v(41);
     $625 = __THREW__; __THREW__ = 0;
     $626 = $625&1;
     if (!($626)) {
      // unreachable;
     }
     $640 = ___cxa_find_matching_catch()|0;
     $641 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $$01 = $641;$$02 = $640;
     ___resumeException($$02|0);
     // unreachable;
    }
    $627 = $611;
    $628 = (($627) - ($620))|0;
    $629 = (($628|0) / 24)&-1;
    $630 = ($629>>>0)<(1073741823);
    if ($630) {
     $631 = $629 << 1;
     $632 = ($631>>>0)<($623>>>0);
     $633 = $632 ? $623 : $631;
     $$0$i$i$i127 = $633;
    } else {
     $$0$i$i$i127 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i124,$$0$i$i$i127,$622,$617);
    $634 = (($__v$i$i124) + 8|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = ($635|0)==(0|0);
    if (!($636)) {
     ;HEAP32[$635+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$635+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$635+8>>2]=HEAP32[$15+8>>2]|0;
     ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $637 = (($635) + 12|0);
     ;HEAP32[$637+0>>2]=HEAP32[$607+0>>2]|0;HEAP32[$637+4>>2]=HEAP32[$607+4>>2]|0;HEAP32[$637+8>>2]=HEAP32[$607+8>>2]|0;
     ;HEAP32[$607+0>>2]=0|0;HEAP32[$607+4>>2]=0|0;HEAP32[$607+8>>2]=0|0;
    }
    $638 = (($635) + 24|0);
    HEAP32[$634>>2] = $638;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i124);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i124);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
   $639 = (($first) + 1|0);
   $$0 = $639;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 120:  {
   HEAP8[$12>>0] = 18;
   $486 = (($12) + 1|0);
   dest=$486+0|0; src=4136+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $487 = (($12) + 10|0);
   HEAP8[$487>>0] = 0;
   $488 = (($12) + 12|0);
   ;HEAP32[$488+0>>2]=0|0;HEAP32[$488+4>>2]=0|0;HEAP32[$488+8>>2]=0|0;
   $489 = (($db) + 4|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = (($db) + 8|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = ($490>>>0)<($492>>>0);
   if ($493) {
    $494 = ($490|0)==(0|0);
    if ($494) {
     $497 = 0;
    } else {
     ;HEAP32[$490+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$490+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$490+8>>2]=HEAP32[$12+8>>2]|0;
     ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
     $495 = (($490) + 12|0);
     ;HEAP32[$495+0>>2]=HEAP32[$488+0>>2]|0;HEAP32[$495+4>>2]=HEAP32[$488+4>>2]|0;HEAP32[$495+8>>2]=HEAP32[$488+8>>2]|0;
     ;HEAP32[$488+0>>2]=0|0;HEAP32[$488+4>>2]=0|0;HEAP32[$488+8>>2]=0|0;
     $$pre$i99 = HEAP32[$489>>2]|0;
     $497 = $$pre$i99;
    }
    $496 = (($497) + 24|0);
    HEAP32[$489>>2] = $496;
   } else {
    $498 = (($db) + 12|0);
    $499 = HEAP32[$db>>2]|0;
    $500 = $490;
    $501 = $499;
    $502 = (($500) - ($501))|0;
    $503 = (($502|0) / 24)&-1;
    $504 = (($503) + 1)|0;
    $505 = ($504|0)<(0);
    if ($505) {
     __THREW__ = 0;
     invoke_v(41);
     $506 = __THREW__; __THREW__ = 0;
     $507 = $506&1;
     if (!($507)) {
      // unreachable;
     }
     $521 = ___cxa_find_matching_catch()|0;
     $522 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $$01 = $522;$$02 = $521;
     ___resumeException($$02|0);
     // unreachable;
    }
    $508 = $492;
    $509 = (($508) - ($501))|0;
    $510 = (($509|0) / 24)&-1;
    $511 = ($510>>>0)<(1073741823);
    if ($511) {
     $512 = $510 << 1;
     $513 = ($512>>>0)<($504>>>0);
     $514 = $513 ? $504 : $512;
     $$0$i$i$i101 = $514;
    } else {
     $$0$i$i$i101 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i98,$$0$i$i$i101,$503,$498);
    $515 = (($__v$i$i98) + 8|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = ($516|0)==(0|0);
    if (!($517)) {
     ;HEAP32[$516+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$516+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$516+8>>2]=HEAP32[$12+8>>2]|0;
     ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
     $518 = (($516) + 12|0);
     ;HEAP32[$518+0>>2]=HEAP32[$488+0>>2]|0;HEAP32[$518+4>>2]=HEAP32[$488+4>>2]|0;HEAP32[$518+8>>2]=HEAP32[$488+8>>2]|0;
     ;HEAP32[$488+0>>2]=0|0;HEAP32[$488+4>>2]=0|0;HEAP32[$488+8>>2]=0|0;
    }
    $519 = (($516) + 24|0);
    HEAP32[$515>>2] = $519;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i98);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i98);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
   $520 = (($first) + 1|0);
   $$0 = $520;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 115:  {
   HEAP8[$6>>0] = 10;
   $258 = (($6) + 1|0);
   ;HEAP8[$258+0>>0]=HEAP8[3784+0>>0]|0;HEAP8[$258+1>>0]=HEAP8[3784+1>>0]|0;HEAP8[$258+2>>0]=HEAP8[3784+2>>0]|0;HEAP8[$258+3>>0]=HEAP8[3784+3>>0]|0;HEAP8[$258+4>>0]=HEAP8[3784+4>>0]|0;
   $259 = (($6) + 6|0);
   HEAP8[$259>>0] = 0;
   $260 = (($6) + 12|0);
   ;HEAP32[$260+0>>2]=0|0;HEAP32[$260+4>>2]=0|0;HEAP32[$260+8>>2]=0|0;
   $261 = (($db) + 4|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($db) + 8|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = ($262>>>0)<($264>>>0);
   if ($265) {
    $266 = ($262|0)==(0|0);
    if ($266) {
     $269 = 0;
    } else {
     ;HEAP32[$262+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$262+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$262+8>>2]=HEAP32[$6+8>>2]|0;
     ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     $267 = (($262) + 12|0);
     ;HEAP32[$267+0>>2]=HEAP32[$260+0>>2]|0;HEAP32[$267+4>>2]=HEAP32[$260+4>>2]|0;HEAP32[$267+8>>2]=HEAP32[$260+8>>2]|0;
     ;HEAP32[$260+0>>2]=0|0;HEAP32[$260+4>>2]=0|0;HEAP32[$260+8>>2]=0|0;
     $$pre$i48 = HEAP32[$261>>2]|0;
     $269 = $$pre$i48;
    }
    $268 = (($269) + 24|0);
    HEAP32[$261>>2] = $268;
   } else {
    $270 = (($db) + 12|0);
    $271 = HEAP32[$db>>2]|0;
    $272 = $262;
    $273 = $271;
    $274 = (($272) - ($273))|0;
    $275 = (($274|0) / 24)&-1;
    $276 = (($275) + 1)|0;
    $277 = ($276|0)<(0);
    if ($277) {
     __THREW__ = 0;
     invoke_v(41);
     $278 = __THREW__; __THREW__ = 0;
     $279 = $278&1;
     if (!($279)) {
      // unreachable;
     }
     $293 = ___cxa_find_matching_catch()|0;
     $294 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $$01 = $294;$$02 = $293;
     ___resumeException($$02|0);
     // unreachable;
    }
    $280 = $264;
    $281 = (($280) - ($273))|0;
    $282 = (($281|0) / 24)&-1;
    $283 = ($282>>>0)<(1073741823);
    if ($283) {
     $284 = $282 << 1;
     $285 = ($284>>>0)<($276>>>0);
     $286 = $285 ? $276 : $284;
     $$0$i$i$i50 = $286;
    } else {
     $$0$i$i$i50 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i47,$$0$i$i$i50,$275,$270);
    $287 = (($__v$i$i47) + 8|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)==(0|0);
    if (!($289)) {
     ;HEAP32[$288+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$288+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$288+8>>2]=HEAP32[$6+8>>2]|0;
     ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     $290 = (($288) + 12|0);
     ;HEAP32[$290+0>>2]=HEAP32[$260+0>>2]|0;HEAP32[$290+4>>2]=HEAP32[$260+4>>2]|0;HEAP32[$290+8>>2]=HEAP32[$260+8>>2]|0;
     ;HEAP32[$260+0>>2]=0|0;HEAP32[$260+4>>2]=0|0;HEAP32[$260+8>>2]=0|0;
    }
    $291 = (($288) + 24|0);
    HEAP32[$287>>2] = $291;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i47);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i47);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $292 = (($first) + 1|0);
   $$0 = $292;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 121:  {
   $523 = (_malloc(32)|0);
   $524 = (($13) + 8|0);
   HEAP32[$524>>2] = $523;
   HEAP32[$13>>2] = 33;
   $525 = (($13) + 4|0);
   HEAP32[$525>>2] = 18;
   dest=$523+0|0; src=4152+0|0; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $526 = (($523) + 18|0);
   HEAP8[$526>>0] = 0;
   $527 = (($13) + 12|0);
   ;HEAP32[$527+0>>2]=0|0;HEAP32[$527+4>>2]=0|0;HEAP32[$527+8>>2]=0|0;
   $528 = (($db) + 4|0);
   $529 = HEAP32[$528>>2]|0;
   $530 = (($db) + 8|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = ($529>>>0)<($531>>>0);
   if ($532) {
    $533 = ($529|0)==(0|0);
    if ($533) {
     $536 = 0;
    } else {
     ;HEAP32[$529+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$529+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$529+8>>2]=HEAP32[$13+8>>2]|0;
     ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $534 = (($529) + 12|0);
     ;HEAP32[$534+0>>2]=HEAP32[$527+0>>2]|0;HEAP32[$534+4>>2]=HEAP32[$527+4>>2]|0;HEAP32[$534+8>>2]=HEAP32[$527+8>>2]|0;
     ;HEAP32[$527+0>>2]=0|0;HEAP32[$527+4>>2]=0|0;HEAP32[$527+8>>2]=0|0;
     $$pre$i108 = HEAP32[$528>>2]|0;
     $536 = $$pre$i108;
    }
    $535 = (($536) + 24|0);
    HEAP32[$528>>2] = $535;
   } else {
    $537 = (($db) + 12|0);
    $538 = HEAP32[$db>>2]|0;
    $539 = $529;
    $540 = $538;
    $541 = (($539) - ($540))|0;
    $542 = (($541|0) / 24)&-1;
    $543 = (($542) + 1)|0;
    $544 = ($543|0)<(0);
    if ($544) {
     __THREW__ = 0;
     invoke_v(41);
     $545 = __THREW__; __THREW__ = 0;
     $546 = $545&1;
     if (!($546)) {
      // unreachable;
     }
     $560 = ___cxa_find_matching_catch()|0;
     $561 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $$01 = $561;$$02 = $560;
     ___resumeException($$02|0);
     // unreachable;
    }
    $547 = $531;
    $548 = (($547) - ($540))|0;
    $549 = (($548|0) / 24)&-1;
    $550 = ($549>>>0)<(1073741823);
    if ($550) {
     $551 = $549 << 1;
     $552 = ($551>>>0)<($543>>>0);
     $553 = $552 ? $543 : $551;
     $$0$i$i$i110 = $553;
    } else {
     $$0$i$i$i110 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i107,$$0$i$i$i110,$542,$537);
    $554 = (($__v$i$i107) + 8|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = ($555|0)==(0|0);
    if (!($556)) {
     ;HEAP32[$555+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$555+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$555+8>>2]=HEAP32[$13+8>>2]|0;
     ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $557 = (($555) + 12|0);
     ;HEAP32[$557+0>>2]=HEAP32[$527+0>>2]|0;HEAP32[$557+4>>2]=HEAP32[$527+4>>2]|0;HEAP32[$557+8>>2]=HEAP32[$527+8>>2]|0;
     ;HEAP32[$527+0>>2]=0|0;HEAP32[$527+4>>2]=0|0;HEAP32[$527+8>>2]=0|0;
    }
    $558 = (($555) + 24|0);
    HEAP32[$554>>2] = $558;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i107);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i107);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
   $559 = (($first) + 1|0);
   $$0 = $559;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 109:  {
   $447 = (_malloc(16)|0);
   $448 = (($11) + 8|0);
   HEAP32[$448>>2] = $447;
   HEAP32[$11>>2] = 17;
   $449 = (($11) + 4|0);
   HEAP32[$449>>2] = 13;
   dest=$447+0|0; src=4120+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $450 = (($447) + 13|0);
   HEAP8[$450>>0] = 0;
   $451 = (($11) + 12|0);
   ;HEAP32[$451+0>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;
   $452 = (($db) + 4|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = (($db) + 8|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = ($453>>>0)<($455>>>0);
   if ($456) {
    $457 = ($453|0)==(0|0);
    if ($457) {
     $460 = 0;
    } else {
     ;HEAP32[$453+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$453+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$453+8>>2]=HEAP32[$11+8>>2]|0;
     ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
     $458 = (($453) + 12|0);
     ;HEAP32[$458+0>>2]=HEAP32[$451+0>>2]|0;HEAP32[$458+4>>2]=HEAP32[$451+4>>2]|0;HEAP32[$458+8>>2]=HEAP32[$451+8>>2]|0;
     ;HEAP32[$451+0>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;
     $$pre$i90 = HEAP32[$452>>2]|0;
     $460 = $$pre$i90;
    }
    $459 = (($460) + 24|0);
    HEAP32[$452>>2] = $459;
   } else {
    $461 = (($db) + 12|0);
    $462 = HEAP32[$db>>2]|0;
    $463 = $453;
    $464 = $462;
    $465 = (($463) - ($464))|0;
    $466 = (($465|0) / 24)&-1;
    $467 = (($466) + 1)|0;
    $468 = ($467|0)<(0);
    if ($468) {
     __THREW__ = 0;
     invoke_v(41);
     $469 = __THREW__; __THREW__ = 0;
     $470 = $469&1;
     if (!($470)) {
      // unreachable;
     }
     $484 = ___cxa_find_matching_catch()|0;
     $485 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $$01 = $485;$$02 = $484;
     ___resumeException($$02|0);
     // unreachable;
    }
    $471 = $455;
    $472 = (($471) - ($464))|0;
    $473 = (($472|0) / 24)&-1;
    $474 = ($473>>>0)<(1073741823);
    if ($474) {
     $475 = $473 << 1;
     $476 = ($475>>>0)<($467>>>0);
     $477 = $476 ? $467 : $475;
     $$0$i$i$i92 = $477;
    } else {
     $$0$i$i$i92 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i89,$$0$i$i$i92,$466,$461);
    $478 = (($__v$i$i89) + 8|0);
    $479 = HEAP32[$478>>2]|0;
    $480 = ($479|0)==(0|0);
    if (!($480)) {
     ;HEAP32[$479+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$479+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$479+8>>2]=HEAP32[$11+8>>2]|0;
     ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
     $481 = (($479) + 12|0);
     ;HEAP32[$481+0>>2]=HEAP32[$451+0>>2]|0;HEAP32[$481+4>>2]=HEAP32[$451+4>>2]|0;HEAP32[$481+8>>2]=HEAP32[$451+8>>2]|0;
     ;HEAP32[$451+0>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;
    }
    $482 = (($479) + 24|0);
    HEAP32[$478>>2] = $482;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i89);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i89);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
   $483 = (($first) + 1|0);
   $$0 = $483;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 99:  {
   HEAP8[$3>>0] = 8;
   $143 = (($3) + 1|0);
   HEAP8[$143>>0]=1918986339&255;HEAP8[$143+1>>0]=(1918986339>>8)&255;HEAP8[$143+2>>0]=(1918986339>>16)&255;HEAP8[$143+3>>0]=1918986339>>24;
   $144 = (($3) + 5|0);
   HEAP8[$144>>0] = 0;
   $145 = (($3) + 12|0);
   ;HEAP32[$145+0>>2]=0|0;HEAP32[$145+4>>2]=0|0;HEAP32[$145+8>>2]=0|0;
   $146 = (($db) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($db) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($147>>>0)<($149>>>0);
   if ($150) {
    $151 = ($147|0)==(0|0);
    if ($151) {
     $154 = 0;
    } else {
     ;HEAP32[$147+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$147+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $152 = (($147) + 12|0);
     ;HEAP32[$152+0>>2]=HEAP32[$145+0>>2]|0;HEAP32[$152+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$152+8>>2]=HEAP32[$145+8>>2]|0;
     ;HEAP32[$145+0>>2]=0|0;HEAP32[$145+4>>2]=0|0;HEAP32[$145+8>>2]=0|0;
     $$pre$i23 = HEAP32[$146>>2]|0;
     $154 = $$pre$i23;
    }
    $153 = (($154) + 24|0);
    HEAP32[$146>>2] = $153;
   } else {
    $155 = (($db) + 12|0);
    $156 = HEAP32[$db>>2]|0;
    $157 = $147;
    $158 = $156;
    $159 = (($157) - ($158))|0;
    $160 = (($159|0) / 24)&-1;
    $161 = (($160) + 1)|0;
    $162 = ($161|0)<(0);
    if ($162) {
     __THREW__ = 0;
     invoke_v(41);
     $163 = __THREW__; __THREW__ = 0;
     $164 = $163&1;
     if (!($164)) {
      // unreachable;
     }
     $178 = ___cxa_find_matching_catch()|0;
     $179 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$01 = $179;$$02 = $178;
     ___resumeException($$02|0);
     // unreachable;
    }
    $165 = $149;
    $166 = (($165) - ($158))|0;
    $167 = (($166|0) / 24)&-1;
    $168 = ($167>>>0)<(1073741823);
    if ($168) {
     $169 = $167 << 1;
     $170 = ($169>>>0)<($161>>>0);
     $171 = $170 ? $161 : $169;
     $$0$i$i$i25 = $171;
    } else {
     $$0$i$i$i25 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i22,$$0$i$i$i25,$160,$155);
    $172 = (($__v$i$i22) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    if (!($174)) {
     ;HEAP32[$173+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$173+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$173+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $175 = (($173) + 12|0);
     ;HEAP32[$175+0>>2]=HEAP32[$145+0>>2]|0;HEAP32[$175+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$175+8>>2]=HEAP32[$145+8>>2]|0;
     ;HEAP32[$145+0>>2]=0|0;HEAP32[$145+4>>2]=0|0;HEAP32[$145+8>>2]=0|0;
    }
    $176 = (($173) + 24|0);
    HEAP32[$172>>2] = $176;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i22);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i22);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $177 = (($first) + 1|0);
   $$0 = $177;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 106:  {
   $371 = (_malloc(16)|0);
   $372 = (($9) + 8|0);
   HEAP32[$372>>2] = $371;
   HEAP32[$9>>2] = 17;
   $373 = (($9) + 4|0);
   HEAP32[$373>>2] = 12;
   dest=$371+0|0; src=4104+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $374 = (($371) + 12|0);
   HEAP8[$374>>0] = 0;
   $375 = (($9) + 12|0);
   ;HEAP32[$375+0>>2]=0|0;HEAP32[$375+4>>2]=0|0;HEAP32[$375+8>>2]=0|0;
   $376 = (($db) + 4|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = (($db) + 8|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ($377>>>0)<($379>>>0);
   if ($380) {
    $381 = ($377|0)==(0|0);
    if ($381) {
     $384 = 0;
    } else {
     ;HEAP32[$377+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$377+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$377+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $382 = (($377) + 12|0);
     ;HEAP32[$382+0>>2]=HEAP32[$375+0>>2]|0;HEAP32[$382+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$382+8>>2]=HEAP32[$375+8>>2]|0;
     ;HEAP32[$375+0>>2]=0|0;HEAP32[$375+4>>2]=0|0;HEAP32[$375+8>>2]=0|0;
     $$pre$i73 = HEAP32[$376>>2]|0;
     $384 = $$pre$i73;
    }
    $383 = (($384) + 24|0);
    HEAP32[$376>>2] = $383;
   } else {
    $385 = (($db) + 12|0);
    $386 = HEAP32[$db>>2]|0;
    $387 = $377;
    $388 = $386;
    $389 = (($387) - ($388))|0;
    $390 = (($389|0) / 24)&-1;
    $391 = (($390) + 1)|0;
    $392 = ($391|0)<(0);
    if ($392) {
     __THREW__ = 0;
     invoke_v(41);
     $393 = __THREW__; __THREW__ = 0;
     $394 = $393&1;
     if (!($394)) {
      // unreachable;
     }
     $408 = ___cxa_find_matching_catch()|0;
     $409 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $$01 = $409;$$02 = $408;
     ___resumeException($$02|0);
     // unreachable;
    }
    $395 = $379;
    $396 = (($395) - ($388))|0;
    $397 = (($396|0) / 24)&-1;
    $398 = ($397>>>0)<(1073741823);
    if ($398) {
     $399 = $397 << 1;
     $400 = ($399>>>0)<($391>>>0);
     $401 = $400 ? $391 : $399;
     $$0$i$i$i75 = $401;
    } else {
     $$0$i$i$i75 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i72,$$0$i$i$i75,$390,$385);
    $402 = (($__v$i$i72) + 8|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = ($403|0)==(0|0);
    if (!($404)) {
     ;HEAP32[$403+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$403+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$403+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $405 = (($403) + 12|0);
     ;HEAP32[$405+0>>2]=HEAP32[$375+0>>2]|0;HEAP32[$405+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$405+8>>2]=HEAP32[$375+8>>2]|0;
     ;HEAP32[$375+0>>2]=0|0;HEAP32[$375+4>>2]=0|0;HEAP32[$375+8>>2]=0|0;
    }
    $406 = (($403) + 24|0);
    HEAP32[$402>>2] = $406;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i72);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i72);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
   $407 = (($first) + 1|0);
   $$0 = $407;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 108:  {
   HEAP8[$10>>0] = 8;
   $410 = (($10) + 1|0);
   HEAP8[$410>>0]=1735290732&255;HEAP8[$410+1>>0]=(1735290732>>8)&255;HEAP8[$410+2>>0]=(1735290732>>16)&255;HEAP8[$410+3>>0]=1735290732>>24;
   $411 = (($10) + 5|0);
   HEAP8[$411>>0] = 0;
   $412 = (($10) + 12|0);
   ;HEAP32[$412+0>>2]=0|0;HEAP32[$412+4>>2]=0|0;HEAP32[$412+8>>2]=0|0;
   $413 = (($db) + 4|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = (($db) + 8|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = ($414>>>0)<($416>>>0);
   if ($417) {
    $418 = ($414|0)==(0|0);
    if ($418) {
     $421 = 0;
    } else {
     ;HEAP32[$414+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$414+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$414+8>>2]=HEAP32[$10+8>>2]|0;
     ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
     $419 = (($414) + 12|0);
     ;HEAP32[$419+0>>2]=HEAP32[$412+0>>2]|0;HEAP32[$419+4>>2]=HEAP32[$412+4>>2]|0;HEAP32[$419+8>>2]=HEAP32[$412+8>>2]|0;
     ;HEAP32[$412+0>>2]=0|0;HEAP32[$412+4>>2]=0|0;HEAP32[$412+8>>2]=0|0;
     $$pre$i82 = HEAP32[$413>>2]|0;
     $421 = $$pre$i82;
    }
    $420 = (($421) + 24|0);
    HEAP32[$413>>2] = $420;
   } else {
    $422 = (($db) + 12|0);
    $423 = HEAP32[$db>>2]|0;
    $424 = $414;
    $425 = $423;
    $426 = (($424) - ($425))|0;
    $427 = (($426|0) / 24)&-1;
    $428 = (($427) + 1)|0;
    $429 = ($428|0)<(0);
    if ($429) {
     __THREW__ = 0;
     invoke_v(41);
     $430 = __THREW__; __THREW__ = 0;
     $431 = $430&1;
     if (!($431)) {
      // unreachable;
     }
     $445 = ___cxa_find_matching_catch()|0;
     $446 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $$01 = $446;$$02 = $445;
     ___resumeException($$02|0);
     // unreachable;
    }
    $432 = $416;
    $433 = (($432) - ($425))|0;
    $434 = (($433|0) / 24)&-1;
    $435 = ($434>>>0)<(1073741823);
    if ($435) {
     $436 = $434 << 1;
     $437 = ($436>>>0)<($428>>>0);
     $438 = $437 ? $428 : $436;
     $$0$i$i$i84 = $438;
    } else {
     $$0$i$i$i84 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i81,$$0$i$i$i84,$427,$422);
    $439 = (($__v$i$i81) + 8|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = ($440|0)==(0|0);
    if (!($441)) {
     ;HEAP32[$440+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$440+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$440+8>>2]=HEAP32[$10+8>>2]|0;
     ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
     $442 = (($440) + 12|0);
     ;HEAP32[$442+0>>2]=HEAP32[$412+0>>2]|0;HEAP32[$442+4>>2]=HEAP32[$412+4>>2]|0;HEAP32[$442+8>>2]=HEAP32[$412+8>>2]|0;
     ;HEAP32[$412+0>>2]=0|0;HEAP32[$412+4>>2]=0|0;HEAP32[$412+8>>2]=0|0;
    }
    $443 = (($440) + 24|0);
    HEAP32[$439>>2] = $443;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i81);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i81);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
   $444 = (($first) + 1|0);
   $$0 = $444;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 104:  {
   $219 = (_malloc(16)|0);
   $220 = (($5) + 8|0);
   HEAP32[$220>>2] = $219;
   HEAP32[$5>>2] = 17;
   $221 = (($5) + 4|0);
   HEAP32[$221>>2] = 13;
   dest=$219+0|0; src=3768+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $222 = (($219) + 13|0);
   HEAP8[$222>>0] = 0;
   $223 = (($5) + 12|0);
   ;HEAP32[$223+0>>2]=0|0;HEAP32[$223+4>>2]=0|0;HEAP32[$223+8>>2]=0|0;
   $224 = (($db) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (($db) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($225>>>0)<($227>>>0);
   if ($228) {
    $229 = ($225|0)==(0|0);
    if ($229) {
     $232 = 0;
    } else {
     ;HEAP32[$225+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$225+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$225+8>>2]=HEAP32[$5+8>>2]|0;
     ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
     $230 = (($225) + 12|0);
     ;HEAP32[$230+0>>2]=HEAP32[$223+0>>2]|0;HEAP32[$230+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$230+8>>2]=HEAP32[$223+8>>2]|0;
     ;HEAP32[$223+0>>2]=0|0;HEAP32[$223+4>>2]=0|0;HEAP32[$223+8>>2]=0|0;
     $$pre$i39 = HEAP32[$224>>2]|0;
     $232 = $$pre$i39;
    }
    $231 = (($232) + 24|0);
    HEAP32[$224>>2] = $231;
   } else {
    $233 = (($db) + 12|0);
    $234 = HEAP32[$db>>2]|0;
    $235 = $225;
    $236 = $234;
    $237 = (($235) - ($236))|0;
    $238 = (($237|0) / 24)&-1;
    $239 = (($238) + 1)|0;
    $240 = ($239|0)<(0);
    if ($240) {
     __THREW__ = 0;
     invoke_v(41);
     $241 = __THREW__; __THREW__ = 0;
     $242 = $241&1;
     if (!($242)) {
      // unreachable;
     }
     $256 = ___cxa_find_matching_catch()|0;
     $257 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $$01 = $257;$$02 = $256;
     ___resumeException($$02|0);
     // unreachable;
    }
    $243 = $227;
    $244 = (($243) - ($236))|0;
    $245 = (($244|0) / 24)&-1;
    $246 = ($245>>>0)<(1073741823);
    if ($246) {
     $247 = $245 << 1;
     $248 = ($247>>>0)<($239>>>0);
     $249 = $248 ? $239 : $247;
     $$0$i$i$i41 = $249;
    } else {
     $$0$i$i$i41 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i41,$238,$233);
    $250 = (($__v$i$i38) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(0|0);
    if (!($252)) {
     ;HEAP32[$251+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$251+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$251+8>>2]=HEAP32[$5+8>>2]|0;
     ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
     $253 = (($251) + 12|0);
     ;HEAP32[$253+0>>2]=HEAP32[$223+0>>2]|0;HEAP32[$253+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$253+8>>2]=HEAP32[$223+8>>2]|0;
     ;HEAP32[$223+0>>2]=0|0;HEAP32[$223+4>>2]=0|0;HEAP32[$223+8>>2]=0|0;
    }
    $254 = (($251) + 24|0);
    HEAP32[$250>>2] = $254;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $255 = (($first) + 1|0);
   $$0 = $255;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 117:  {
   $829 = (($first) + 1|0);
   $830 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($829,$last,$db)|0);
   $831 = ($830|0)==($829|0);
   $first$ = $831 ? $first : $830;
   STACKTOP = sp;return ($first$|0);
   break;
  }
  case 68:  {
   $832 = (($first) + 1|0);
   $833 = ($832|0)==($last|0);
   if ($833) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $834 = HEAP8[$832>>0]|0;
   $835 = $834 << 24 >> 24;
   switch ($835|0) {
   case 104:  {
    HEAP8[$24>>0] = 18;
    $947 = (($24) + 1|0);
    dest=$947+0|0; src=4280+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $948 = (($24) + 10|0);
    HEAP8[$948>>0] = 0;
    $949 = (($24) + 12|0);
    ;HEAP32[$949+0>>2]=0|0;HEAP32[$949+4>>2]=0|0;HEAP32[$949+8>>2]=0|0;
    $950 = (($db) + 4|0);
    $951 = HEAP32[$950>>2]|0;
    $952 = (($db) + 8|0);
    $953 = HEAP32[$952>>2]|0;
    $954 = ($951>>>0)<($953>>>0);
    if ($954) {
     $955 = ($951|0)==(0|0);
     if ($955) {
      $958 = 0;
     } else {
      ;HEAP32[$951+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$951+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$951+8>>2]=HEAP32[$24+8>>2]|0;
      ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $956 = (($951) + 12|0);
      ;HEAP32[$956+0>>2]=HEAP32[$949+0>>2]|0;HEAP32[$956+4>>2]=HEAP32[$949+4>>2]|0;HEAP32[$956+8>>2]=HEAP32[$949+8>>2]|0;
      ;HEAP32[$949+0>>2]=0|0;HEAP32[$949+4>>2]=0|0;HEAP32[$949+8>>2]=0|0;
      $$pre$i205 = HEAP32[$950>>2]|0;
      $958 = $$pre$i205;
     }
     $957 = (($958) + 24|0);
     HEAP32[$950>>2] = $957;
    } else {
     $959 = (($db) + 12|0);
     $960 = HEAP32[$db>>2]|0;
     $961 = $951;
     $962 = $960;
     $963 = (($961) - ($962))|0;
     $964 = (($963|0) / 24)&-1;
     $965 = (($964) + 1)|0;
     $966 = ($965|0)<(0);
     if ($966) {
      __THREW__ = 0;
      invoke_v(41);
      $967 = __THREW__; __THREW__ = 0;
      $968 = $967&1;
      if (!($968)) {
       // unreachable;
      }
      $982 = ___cxa_find_matching_catch()|0;
      $983 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $$01 = $983;$$02 = $982;
      ___resumeException($$02|0);
      // unreachable;
     }
     $969 = $953;
     $970 = (($969) - ($962))|0;
     $971 = (($970|0) / 24)&-1;
     $972 = ($971>>>0)<(1073741823);
     if ($972) {
      $973 = $971 << 1;
      $974 = ($973>>>0)<($965>>>0);
      $975 = $974 ? $965 : $973;
      $$0$i$i$i207 = $975;
     } else {
      $$0$i$i$i207 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i204,$$0$i$i$i207,$964,$959);
     $976 = (($__v$i$i204) + 8|0);
     $977 = HEAP32[$976>>2]|0;
     $978 = ($977|0)==(0|0);
     if (!($978)) {
      ;HEAP32[$977+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$977+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$977+8>>2]=HEAP32[$24+8>>2]|0;
      ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $979 = (($977) + 12|0);
      ;HEAP32[$979+0>>2]=HEAP32[$949+0>>2]|0;HEAP32[$979+4>>2]=HEAP32[$949+4>>2]|0;HEAP32[$979+8>>2]=HEAP32[$949+8>>2]|0;
      ;HEAP32[$949+0>>2]=0|0;HEAP32[$949+4>>2]=0|0;HEAP32[$949+8>>2]=0|0;
     }
     $980 = (($977) + 24|0);
     HEAP32[$976>>2] = $980;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i204);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i204);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
    $981 = (($first) + 2|0);
    $$0 = $981;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 102:  {
    HEAP8[$23>>0] = 18;
    $910 = (($23) + 1|0);
    dest=$910+0|0; src=4264+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $911 = (($23) + 10|0);
    HEAP8[$911>>0] = 0;
    $912 = (($23) + 12|0);
    ;HEAP32[$912+0>>2]=0|0;HEAP32[$912+4>>2]=0|0;HEAP32[$912+8>>2]=0|0;
    $913 = (($db) + 4|0);
    $914 = HEAP32[$913>>2]|0;
    $915 = (($db) + 8|0);
    $916 = HEAP32[$915>>2]|0;
    $917 = ($914>>>0)<($916>>>0);
    if ($917) {
     $918 = ($914|0)==(0|0);
     if ($918) {
      $921 = 0;
     } else {
      ;HEAP32[$914+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$914+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$914+8>>2]=HEAP32[$23+8>>2]|0;
      ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $919 = (($914) + 12|0);
      ;HEAP32[$919+0>>2]=HEAP32[$912+0>>2]|0;HEAP32[$919+4>>2]=HEAP32[$912+4>>2]|0;HEAP32[$919+8>>2]=HEAP32[$912+8>>2]|0;
      ;HEAP32[$912+0>>2]=0|0;HEAP32[$912+4>>2]=0|0;HEAP32[$912+8>>2]=0|0;
      $$pre$i196 = HEAP32[$913>>2]|0;
      $921 = $$pre$i196;
     }
     $920 = (($921) + 24|0);
     HEAP32[$913>>2] = $920;
    } else {
     $922 = (($db) + 12|0);
     $923 = HEAP32[$db>>2]|0;
     $924 = $914;
     $925 = $923;
     $926 = (($924) - ($925))|0;
     $927 = (($926|0) / 24)&-1;
     $928 = (($927) + 1)|0;
     $929 = ($928|0)<(0);
     if ($929) {
      __THREW__ = 0;
      invoke_v(41);
      $930 = __THREW__; __THREW__ = 0;
      $931 = $930&1;
      if (!($931)) {
       // unreachable;
      }
      $945 = ___cxa_find_matching_catch()|0;
      $946 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $$01 = $946;$$02 = $945;
      ___resumeException($$02|0);
      // unreachable;
     }
     $932 = $916;
     $933 = (($932) - ($925))|0;
     $934 = (($933|0) / 24)&-1;
     $935 = ($934>>>0)<(1073741823);
     if ($935) {
      $936 = $934 << 1;
      $937 = ($936>>>0)<($928>>>0);
      $938 = $937 ? $928 : $936;
      $$0$i$i$i198 = $938;
     } else {
      $$0$i$i$i198 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i195,$$0$i$i$i198,$927,$922);
     $939 = (($__v$i$i195) + 8|0);
     $940 = HEAP32[$939>>2]|0;
     $941 = ($940|0)==(0|0);
     if (!($941)) {
      ;HEAP32[$940+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$940+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$940+8>>2]=HEAP32[$23+8>>2]|0;
      ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $942 = (($940) + 12|0);
      ;HEAP32[$942+0>>2]=HEAP32[$912+0>>2]|0;HEAP32[$942+4>>2]=HEAP32[$912+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[$912+8>>2]|0;
      ;HEAP32[$912+0>>2]=0|0;HEAP32[$912+4>>2]=0|0;HEAP32[$912+8>>2]=0|0;
     }
     $943 = (($940) + 24|0);
     HEAP32[$939>>2] = $943;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i195);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i195);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
    $944 = (($first) + 2|0);
    $$0 = $944;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 101:  {
    HEAP8[$22>>0] = 20;
    $873 = (($22) + 1|0);
    dest=$873+0|0; src=4248+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $874 = (($22) + 11|0);
    HEAP8[$874>>0] = 0;
    $875 = (($22) + 12|0);
    ;HEAP32[$875+0>>2]=0|0;HEAP32[$875+4>>2]=0|0;HEAP32[$875+8>>2]=0|0;
    $876 = (($db) + 4|0);
    $877 = HEAP32[$876>>2]|0;
    $878 = (($db) + 8|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = ($877>>>0)<($879>>>0);
    if ($880) {
     $881 = ($877|0)==(0|0);
     if ($881) {
      $884 = 0;
     } else {
      ;HEAP32[$877+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$877+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$877+8>>2]=HEAP32[$22+8>>2]|0;
      ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
      $882 = (($877) + 12|0);
      ;HEAP32[$882+0>>2]=HEAP32[$875+0>>2]|0;HEAP32[$882+4>>2]=HEAP32[$875+4>>2]|0;HEAP32[$882+8>>2]=HEAP32[$875+8>>2]|0;
      ;HEAP32[$875+0>>2]=0|0;HEAP32[$875+4>>2]=0|0;HEAP32[$875+8>>2]=0|0;
      $$pre$i187 = HEAP32[$876>>2]|0;
      $884 = $$pre$i187;
     }
     $883 = (($884) + 24|0);
     HEAP32[$876>>2] = $883;
    } else {
     $885 = (($db) + 12|0);
     $886 = HEAP32[$db>>2]|0;
     $887 = $877;
     $888 = $886;
     $889 = (($887) - ($888))|0;
     $890 = (($889|0) / 24)&-1;
     $891 = (($890) + 1)|0;
     $892 = ($891|0)<(0);
     if ($892) {
      __THREW__ = 0;
      invoke_v(41);
      $893 = __THREW__; __THREW__ = 0;
      $894 = $893&1;
      if (!($894)) {
       // unreachable;
      }
      $908 = ___cxa_find_matching_catch()|0;
      $909 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $$01 = $909;$$02 = $908;
      ___resumeException($$02|0);
      // unreachable;
     }
     $895 = $879;
     $896 = (($895) - ($888))|0;
     $897 = (($896|0) / 24)&-1;
     $898 = ($897>>>0)<(1073741823);
     if ($898) {
      $899 = $897 << 1;
      $900 = ($899>>>0)<($891>>>0);
      $901 = $900 ? $891 : $899;
      $$0$i$i$i189 = $901;
     } else {
      $$0$i$i$i189 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i186,$$0$i$i$i189,$890,$885);
     $902 = (($__v$i$i186) + 8|0);
     $903 = HEAP32[$902>>2]|0;
     $904 = ($903|0)==(0|0);
     if (!($904)) {
      ;HEAP32[$903+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$903+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$903+8>>2]=HEAP32[$22+8>>2]|0;
      ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
      $905 = (($903) + 12|0);
      ;HEAP32[$905+0>>2]=HEAP32[$875+0>>2]|0;HEAP32[$905+4>>2]=HEAP32[$875+4>>2]|0;HEAP32[$905+8>>2]=HEAP32[$875+8>>2]|0;
      ;HEAP32[$875+0>>2]=0|0;HEAP32[$875+4>>2]=0|0;HEAP32[$875+8>>2]=0|0;
     }
     $906 = (($903) + 24|0);
     HEAP32[$902>>2] = $906;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i186);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i186);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
    $907 = (($first) + 2|0);
    $$0 = $907;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 100:  {
    HEAP8[$21>>0] = 18;
    $836 = (($21) + 1|0);
    dest=$836+0|0; src=4232+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $837 = (($21) + 10|0);
    HEAP8[$837>>0] = 0;
    $838 = (($21) + 12|0);
    ;HEAP32[$838+0>>2]=0|0;HEAP32[$838+4>>2]=0|0;HEAP32[$838+8>>2]=0|0;
    $839 = (($db) + 4|0);
    $840 = HEAP32[$839>>2]|0;
    $841 = (($db) + 8|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = ($840>>>0)<($842>>>0);
    if ($843) {
     $844 = ($840|0)==(0|0);
     if ($844) {
      $847 = 0;
     } else {
      ;HEAP32[$840+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$840+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$840+8>>2]=HEAP32[$21+8>>2]|0;
      ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      $845 = (($840) + 12|0);
      ;HEAP32[$845+0>>2]=HEAP32[$838+0>>2]|0;HEAP32[$845+4>>2]=HEAP32[$838+4>>2]|0;HEAP32[$845+8>>2]=HEAP32[$838+8>>2]|0;
      ;HEAP32[$838+0>>2]=0|0;HEAP32[$838+4>>2]=0|0;HEAP32[$838+8>>2]=0|0;
      $$pre$i178 = HEAP32[$839>>2]|0;
      $847 = $$pre$i178;
     }
     $846 = (($847) + 24|0);
     HEAP32[$839>>2] = $846;
    } else {
     $848 = (($db) + 12|0);
     $849 = HEAP32[$db>>2]|0;
     $850 = $840;
     $851 = $849;
     $852 = (($850) - ($851))|0;
     $853 = (($852|0) / 24)&-1;
     $854 = (($853) + 1)|0;
     $855 = ($854|0)<(0);
     if ($855) {
      __THREW__ = 0;
      invoke_v(41);
      $856 = __THREW__; __THREW__ = 0;
      $857 = $856&1;
      if (!($857)) {
       // unreachable;
      }
      $871 = ___cxa_find_matching_catch()|0;
      $872 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $$01 = $872;$$02 = $871;
      ___resumeException($$02|0);
      // unreachable;
     }
     $858 = $842;
     $859 = (($858) - ($851))|0;
     $860 = (($859|0) / 24)&-1;
     $861 = ($860>>>0)<(1073741823);
     if ($861) {
      $862 = $860 << 1;
      $863 = ($862>>>0)<($854>>>0);
      $864 = $863 ? $854 : $862;
      $$0$i$i$i180 = $864;
     } else {
      $$0$i$i$i180 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i177,$$0$i$i$i180,$853,$848);
     $865 = (($__v$i$i177) + 8|0);
     $866 = HEAP32[$865>>2]|0;
     $867 = ($866|0)==(0|0);
     if (!($867)) {
      ;HEAP32[$866+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$866+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$866+8>>2]=HEAP32[$21+8>>2]|0;
      ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      $868 = (($866) + 12|0);
      ;HEAP32[$868+0>>2]=HEAP32[$838+0>>2]|0;HEAP32[$868+4>>2]=HEAP32[$838+4>>2]|0;HEAP32[$868+8>>2]=HEAP32[$838+8>>2]|0;
      ;HEAP32[$838+0>>2]=0|0;HEAP32[$838+4>>2]=0|0;HEAP32[$838+8>>2]=0|0;
     }
     $869 = (($866) + 24|0);
     HEAP32[$865>>2] = $869;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i177);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i177);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
    $870 = (($first) + 2|0);
    $$0 = $870;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 105:  {
    HEAP8[$25>>0] = 16;
    $984 = (($25) + 1|0);
    $985 = $984;
    $986 = $985;
    HEAP8[$986>>0]=1918986339&255;HEAP8[$986+1>>0]=(1918986339>>8)&255;HEAP8[$986+2>>0]=(1918986339>>16)&255;HEAP8[$986+3>>0]=1918986339>>24;
    $987 = (($985) + 4)|0;
    $988 = $987;
    HEAP8[$988>>0]=1952395827&255;HEAP8[$988+1>>0]=(1952395827>>8)&255;HEAP8[$988+2>>0]=(1952395827>>16)&255;HEAP8[$988+3>>0]=1952395827>>24;
    $989 = (($25) + 9|0);
    HEAP8[$989>>0] = 0;
    $990 = (($25) + 12|0);
    ;HEAP32[$990+0>>2]=0|0;HEAP32[$990+4>>2]=0|0;HEAP32[$990+8>>2]=0|0;
    $991 = (($db) + 4|0);
    $992 = HEAP32[$991>>2]|0;
    $993 = (($db) + 8|0);
    $994 = HEAP32[$993>>2]|0;
    $995 = ($992>>>0)<($994>>>0);
    if ($995) {
     $996 = ($992|0)==(0|0);
     if ($996) {
      $999 = 0;
     } else {
      ;HEAP32[$992+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$992+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$992+8>>2]=HEAP32[$25+8>>2]|0;
      ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $997 = (($992) + 12|0);
      ;HEAP32[$997+0>>2]=HEAP32[$990+0>>2]|0;HEAP32[$997+4>>2]=HEAP32[$990+4>>2]|0;HEAP32[$997+8>>2]=HEAP32[$990+8>>2]|0;
      ;HEAP32[$990+0>>2]=0|0;HEAP32[$990+4>>2]=0|0;HEAP32[$990+8>>2]=0|0;
      $$pre$i214 = HEAP32[$991>>2]|0;
      $999 = $$pre$i214;
     }
     $998 = (($999) + 24|0);
     HEAP32[$991>>2] = $998;
    } else {
     $1000 = (($db) + 12|0);
     $1001 = HEAP32[$db>>2]|0;
     $1002 = $992;
     $1003 = $1001;
     $1004 = (($1002) - ($1003))|0;
     $1005 = (($1004|0) / 24)&-1;
     $1006 = (($1005) + 1)|0;
     $1007 = ($1006|0)<(0);
     if ($1007) {
      __THREW__ = 0;
      invoke_v(41);
      $1008 = __THREW__; __THREW__ = 0;
      $1009 = $1008&1;
      if (!($1009)) {
       // unreachable;
      }
      $1023 = ___cxa_find_matching_catch()|0;
      $1024 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $$01 = $1024;$$02 = $1023;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1010 = $994;
     $1011 = (($1010) - ($1003))|0;
     $1012 = (($1011|0) / 24)&-1;
     $1013 = ($1012>>>0)<(1073741823);
     if ($1013) {
      $1014 = $1012 << 1;
      $1015 = ($1014>>>0)<($1006>>>0);
      $1016 = $1015 ? $1006 : $1014;
      $$0$i$i$i216 = $1016;
     } else {
      $$0$i$i$i216 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i213,$$0$i$i$i216,$1005,$1000);
     $1017 = (($__v$i$i213) + 8|0);
     $1018 = HEAP32[$1017>>2]|0;
     $1019 = ($1018|0)==(0|0);
     if (!($1019)) {
      ;HEAP32[$1018+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$1018+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1018+8>>2]=HEAP32[$25+8>>2]|0;
      ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $1020 = (($1018) + 12|0);
      ;HEAP32[$1020+0>>2]=HEAP32[$990+0>>2]|0;HEAP32[$1020+4>>2]=HEAP32[$990+4>>2]|0;HEAP32[$1020+8>>2]=HEAP32[$990+8>>2]|0;
      ;HEAP32[$990+0>>2]=0|0;HEAP32[$990+4>>2]=0|0;HEAP32[$990+8>>2]=0|0;
     }
     $1021 = (($1018) + 24|0);
     HEAP32[$1017>>2] = $1021;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i213);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i213);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
    $1022 = (($first) + 2|0);
    $$0 = $1022;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 115:  {
    HEAP8[$26>>0] = 16;
    $1025 = (($26) + 1|0);
    $1026 = $1025;
    $1027 = $1026;
    HEAP8[$1027>>0]=1918986339&255;HEAP8[$1027+1>>0]=(1918986339>>8)&255;HEAP8[$1027+2>>0]=(1918986339>>16)&255;HEAP8[$1027+3>>0]=1918986339>>24;
    $1028 = (($1026) + 4)|0;
    $1029 = $1028;
    HEAP8[$1029>>0]=1952396849&255;HEAP8[$1029+1>>0]=(1952396849>>8)&255;HEAP8[$1029+2>>0]=(1952396849>>16)&255;HEAP8[$1029+3>>0]=1952396849>>24;
    $1030 = (($26) + 9|0);
    HEAP8[$1030>>0] = 0;
    $1031 = (($26) + 12|0);
    ;HEAP32[$1031+0>>2]=0|0;HEAP32[$1031+4>>2]=0|0;HEAP32[$1031+8>>2]=0|0;
    $1032 = (($db) + 4|0);
    $1033 = HEAP32[$1032>>2]|0;
    $1034 = (($db) + 8|0);
    $1035 = HEAP32[$1034>>2]|0;
    $1036 = ($1033>>>0)<($1035>>>0);
    if ($1036) {
     $1037 = ($1033|0)==(0|0);
     if ($1037) {
      $1040 = 0;
     } else {
      ;HEAP32[$1033+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$1033+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$1033+8>>2]=HEAP32[$26+8>>2]|0;
      ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $1038 = (($1033) + 12|0);
      ;HEAP32[$1038+0>>2]=HEAP32[$1031+0>>2]|0;HEAP32[$1038+4>>2]=HEAP32[$1031+4>>2]|0;HEAP32[$1038+8>>2]=HEAP32[$1031+8>>2]|0;
      ;HEAP32[$1031+0>>2]=0|0;HEAP32[$1031+4>>2]=0|0;HEAP32[$1031+8>>2]=0|0;
      $$pre$i223 = HEAP32[$1032>>2]|0;
      $1040 = $$pre$i223;
     }
     $1039 = (($1040) + 24|0);
     HEAP32[$1032>>2] = $1039;
    } else {
     $1041 = (($db) + 12|0);
     $1042 = HEAP32[$db>>2]|0;
     $1043 = $1033;
     $1044 = $1042;
     $1045 = (($1043) - ($1044))|0;
     $1046 = (($1045|0) / 24)&-1;
     $1047 = (($1046) + 1)|0;
     $1048 = ($1047|0)<(0);
     if ($1048) {
      __THREW__ = 0;
      invoke_v(41);
      $1049 = __THREW__; __THREW__ = 0;
      $1050 = $1049&1;
      if (!($1050)) {
       // unreachable;
      }
      $1064 = ___cxa_find_matching_catch()|0;
      $1065 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $$01 = $1065;$$02 = $1064;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1051 = $1035;
     $1052 = (($1051) - ($1044))|0;
     $1053 = (($1052|0) / 24)&-1;
     $1054 = ($1053>>>0)<(1073741823);
     if ($1054) {
      $1055 = $1053 << 1;
      $1056 = ($1055>>>0)<($1047>>>0);
      $1057 = $1056 ? $1047 : $1055;
      $$0$i$i$i225 = $1057;
     } else {
      $$0$i$i$i225 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i222,$$0$i$i$i225,$1046,$1041);
     $1058 = (($__v$i$i222) + 8|0);
     $1059 = HEAP32[$1058>>2]|0;
     $1060 = ($1059|0)==(0|0);
     if (!($1060)) {
      ;HEAP32[$1059+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$1059+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$1059+8>>2]=HEAP32[$26+8>>2]|0;
      ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $1061 = (($1059) + 12|0);
      ;HEAP32[$1061+0>>2]=HEAP32[$1031+0>>2]|0;HEAP32[$1061+4>>2]=HEAP32[$1031+4>>2]|0;HEAP32[$1061+8>>2]=HEAP32[$1031+8>>2]|0;
      ;HEAP32[$1031+0>>2]=0|0;HEAP32[$1031+4>>2]=0|0;HEAP32[$1031+8>>2]=0|0;
     }
     $1062 = (($1059) + 24|0);
     HEAP32[$1058>>2] = $1062;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i222);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i222);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
    $1063 = (($first) + 2|0);
    $$0 = $1063;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 97:  {
    HEAP8[$27>>0] = 8;
    $1066 = (($27) + 1|0);
    HEAP8[$1066>>0]=1869903201&255;HEAP8[$1066+1>>0]=(1869903201>>8)&255;HEAP8[$1066+2>>0]=(1869903201>>16)&255;HEAP8[$1066+3>>0]=1869903201>>24;
    $1067 = (($27) + 5|0);
    HEAP8[$1067>>0] = 0;
    $1068 = (($27) + 12|0);
    ;HEAP32[$1068+0>>2]=0|0;HEAP32[$1068+4>>2]=0|0;HEAP32[$1068+8>>2]=0|0;
    $1069 = (($db) + 4|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = (($db) + 8|0);
    $1072 = HEAP32[$1071>>2]|0;
    $1073 = ($1070>>>0)<($1072>>>0);
    if ($1073) {
     $1074 = ($1070|0)==(0|0);
     if ($1074) {
      $1077 = 0;
     } else {
      ;HEAP32[$1070+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1070+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1070+8>>2]=HEAP32[$27+8>>2]|0;
      ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $1075 = (($1070) + 12|0);
      ;HEAP32[$1075+0>>2]=HEAP32[$1068+0>>2]|0;HEAP32[$1075+4>>2]=HEAP32[$1068+4>>2]|0;HEAP32[$1075+8>>2]=HEAP32[$1068+8>>2]|0;
      ;HEAP32[$1068+0>>2]=0|0;HEAP32[$1068+4>>2]=0|0;HEAP32[$1068+8>>2]=0|0;
      $$pre$i232 = HEAP32[$1069>>2]|0;
      $1077 = $$pre$i232;
     }
     $1076 = (($1077) + 24|0);
     HEAP32[$1069>>2] = $1076;
    } else {
     $1078 = (($db) + 12|0);
     $1079 = HEAP32[$db>>2]|0;
     $1080 = $1070;
     $1081 = $1079;
     $1082 = (($1080) - ($1081))|0;
     $1083 = (($1082|0) / 24)&-1;
     $1084 = (($1083) + 1)|0;
     $1085 = ($1084|0)<(0);
     if ($1085) {
      __THREW__ = 0;
      invoke_v(41);
      $1086 = __THREW__; __THREW__ = 0;
      $1087 = $1086&1;
      if (!($1087)) {
       // unreachable;
      }
      $1101 = ___cxa_find_matching_catch()|0;
      $1102 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $$01 = $1102;$$02 = $1101;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1088 = $1072;
     $1089 = (($1088) - ($1081))|0;
     $1090 = (($1089|0) / 24)&-1;
     $1091 = ($1090>>>0)<(1073741823);
     if ($1091) {
      $1092 = $1090 << 1;
      $1093 = ($1092>>>0)<($1084>>>0);
      $1094 = $1093 ? $1084 : $1092;
      $$0$i$i$i234 = $1094;
     } else {
      $$0$i$i$i234 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i231,$$0$i$i$i234,$1083,$1078);
     $1095 = (($__v$i$i231) + 8|0);
     $1096 = HEAP32[$1095>>2]|0;
     $1097 = ($1096|0)==(0|0);
     if (!($1097)) {
      ;HEAP32[$1096+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1096+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1096+8>>2]=HEAP32[$27+8>>2]|0;
      ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $1098 = (($1096) + 12|0);
      ;HEAP32[$1098+0>>2]=HEAP32[$1068+0>>2]|0;HEAP32[$1098+4>>2]=HEAP32[$1068+4>>2]|0;HEAP32[$1098+8>>2]=HEAP32[$1068+8>>2]|0;
      ;HEAP32[$1068+0>>2]=0|0;HEAP32[$1068+4>>2]=0|0;HEAP32[$1068+8>>2]=0|0;
     }
     $1099 = (($1096) + 24|0);
     HEAP32[$1095>>2] = $1099;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i231);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i231);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
    $1100 = (($first) + 2|0);
    $$0 = $1100;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 110:  {
    $1103 = (_malloc(16)|0);
    $1104 = (($28) + 8|0);
    HEAP32[$1104>>2] = $1103;
    HEAP32[$28>>2] = 17;
    $1105 = (($28) + 4|0);
    HEAP32[$1105>>2] = 14;
    dest=$1103+0|0; src=4296+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1106 = (($1103) + 14|0);
    HEAP8[$1106>>0] = 0;
    $1107 = (($28) + 12|0);
    ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
    $1108 = (($db) + 4|0);
    $1109 = HEAP32[$1108>>2]|0;
    $1110 = (($db) + 8|0);
    $1111 = HEAP32[$1110>>2]|0;
    $1112 = ($1109>>>0)<($1111>>>0);
    if ($1112) {
     $1113 = ($1109|0)==(0|0);
     if ($1113) {
      $1116 = 0;
     } else {
      ;HEAP32[$1109+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$1109+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$1109+8>>2]=HEAP32[$28+8>>2]|0;
      ;HEAP32[$28+0>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $1114 = (($1109) + 12|0);
      ;HEAP32[$1114+0>>2]=HEAP32[$1107+0>>2]|0;HEAP32[$1114+4>>2]=HEAP32[$1107+4>>2]|0;HEAP32[$1114+8>>2]=HEAP32[$1107+8>>2]|0;
      ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
      $$pre$i240 = HEAP32[$1108>>2]|0;
      $1116 = $$pre$i240;
     }
     $1115 = (($1116) + 24|0);
     HEAP32[$1108>>2] = $1115;
    } else {
     $1117 = (($db) + 12|0);
     $1118 = HEAP32[$db>>2]|0;
     $1119 = $1109;
     $1120 = $1118;
     $1121 = (($1119) - ($1120))|0;
     $1122 = (($1121|0) / 24)&-1;
     $1123 = (($1122) + 1)|0;
     $1124 = ($1123|0)<(0);
     if ($1124) {
      __THREW__ = 0;
      invoke_v(41);
      $1125 = __THREW__; __THREW__ = 0;
      $1126 = $1125&1;
      if (!($1126)) {
       // unreachable;
      }
      $1140 = ___cxa_find_matching_catch()|0;
      $1141 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $$01 = $1141;$$02 = $1140;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1127 = $1111;
     $1128 = (($1127) - ($1120))|0;
     $1129 = (($1128|0) / 24)&-1;
     $1130 = ($1129>>>0)<(1073741823);
     if ($1130) {
      $1131 = $1129 << 1;
      $1132 = ($1131>>>0)<($1123>>>0);
      $1133 = $1132 ? $1123 : $1131;
      $$0$i$i$i242 = $1133;
     } else {
      $$0$i$i$i242 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i239,$$0$i$i$i242,$1122,$1117);
     $1134 = (($__v$i$i239) + 8|0);
     $1135 = HEAP32[$1134>>2]|0;
     $1136 = ($1135|0)==(0|0);
     if (!($1136)) {
      ;HEAP32[$1135+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$1135+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$1135+8>>2]=HEAP32[$28+8>>2]|0;
      ;HEAP32[$28+0>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $1137 = (($1135) + 12|0);
      ;HEAP32[$1137+0>>2]=HEAP32[$1107+0>>2]|0;HEAP32[$1137+4>>2]=HEAP32[$1107+4>>2]|0;HEAP32[$1137+8>>2]=HEAP32[$1107+8>>2]|0;
      ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
     }
     $1138 = (($1135) + 24|0);
     HEAP32[$1134>>2] = $1138;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i239);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i239);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
    $1139 = (($first) + 2|0);
    $$0 = $1139;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 122:  {
   HEAP8[$20>>0] = 6;
   $792 = (($20) + 1|0);
   ;HEAP8[$792+0>>0]=HEAP8[4224+0>>0]|0;HEAP8[$792+1>>0]=HEAP8[4224+1>>0]|0;HEAP8[$792+2>>0]=HEAP8[4224+2>>0]|0;
   $793 = (($20) + 4|0);
   HEAP8[$793>>0] = 0;
   $794 = (($20) + 12|0);
   ;HEAP32[$794+0>>2]=0|0;HEAP32[$794+4>>2]=0|0;HEAP32[$794+8>>2]=0|0;
   $795 = (($db) + 4|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = (($db) + 8|0);
   $798 = HEAP32[$797>>2]|0;
   $799 = ($796>>>0)<($798>>>0);
   if ($799) {
    $800 = ($796|0)==(0|0);
    if ($800) {
     $803 = 0;
    } else {
     ;HEAP32[$796+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$796+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$796+8>>2]=HEAP32[$20+8>>2]|0;
     ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
     $801 = (($796) + 12|0);
     ;HEAP32[$801+0>>2]=HEAP32[$794+0>>2]|0;HEAP32[$801+4>>2]=HEAP32[$794+4>>2]|0;HEAP32[$801+8>>2]=HEAP32[$794+8>>2]|0;
     ;HEAP32[$794+0>>2]=0|0;HEAP32[$794+4>>2]=0|0;HEAP32[$794+8>>2]=0|0;
     $$pre$i169 = HEAP32[$795>>2]|0;
     $803 = $$pre$i169;
    }
    $802 = (($803) + 24|0);
    HEAP32[$795>>2] = $802;
   } else {
    $804 = (($db) + 12|0);
    $805 = HEAP32[$db>>2]|0;
    $806 = $796;
    $807 = $805;
    $808 = (($806) - ($807))|0;
    $809 = (($808|0) / 24)&-1;
    $810 = (($809) + 1)|0;
    $811 = ($810|0)<(0);
    if ($811) {
     __THREW__ = 0;
     invoke_v(41);
     $812 = __THREW__; __THREW__ = 0;
     $813 = $812&1;
     if (!($813)) {
      // unreachable;
     }
     $827 = ___cxa_find_matching_catch()|0;
     $828 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $$01 = $828;$$02 = $827;
     ___resumeException($$02|0);
     // unreachable;
    }
    $814 = $798;
    $815 = (($814) - ($807))|0;
    $816 = (($815|0) / 24)&-1;
    $817 = ($816>>>0)<(1073741823);
    if ($817) {
     $818 = $816 << 1;
     $819 = ($818>>>0)<($810>>>0);
     $820 = $819 ? $810 : $818;
     $$0$i$i$i171 = $820;
    } else {
     $$0$i$i$i171 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i168,$$0$i$i$i171,$809,$804);
    $821 = (($__v$i$i168) + 8|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = ($822|0)==(0|0);
    if (!($823)) {
     ;HEAP32[$822+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$822+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$822+8>>2]=HEAP32[$20+8>>2]|0;
     ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
     $824 = (($822) + 12|0);
     ;HEAP32[$824+0>>2]=HEAP32[$794+0>>2]|0;HEAP32[$824+4>>2]=HEAP32[$794+4>>2]|0;HEAP32[$824+8>>2]=HEAP32[$794+8>>2]|0;
     ;HEAP32[$794+0>>2]=0|0;HEAP32[$794+4>>2]=0|0;HEAP32[$794+8>>2]=0|0;
    }
    $825 = (($822) + 24|0);
    HEAP32[$821>>2] = $825;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i168);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i168);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
   $826 = (($first) + 1|0);
   $$0 = $826;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 116:  {
   $295 = (_malloc(16)|0);
   $296 = (($7) + 8|0);
   HEAP32[$296>>2] = $295;
   HEAP32[$7>>2] = 17;
   $297 = (($7) + 4|0);
   HEAP32[$297>>2] = 14;
   dest=$295+0|0; src=3792+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $298 = (($295) + 14|0);
   HEAP8[$298>>0] = 0;
   $299 = (($7) + 12|0);
   ;HEAP32[$299+0>>2]=0|0;HEAP32[$299+4>>2]=0|0;HEAP32[$299+8>>2]=0|0;
   $300 = (($db) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (($db) + 8|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ($301>>>0)<($303>>>0);
   if ($304) {
    $305 = ($301|0)==(0|0);
    if ($305) {
     $308 = 0;
    } else {
     ;HEAP32[$301+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$301+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$301+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     $306 = (($301) + 12|0);
     ;HEAP32[$306+0>>2]=HEAP32[$299+0>>2]|0;HEAP32[$306+4>>2]=HEAP32[$299+4>>2]|0;HEAP32[$306+8>>2]=HEAP32[$299+8>>2]|0;
     ;HEAP32[$299+0>>2]=0|0;HEAP32[$299+4>>2]=0|0;HEAP32[$299+8>>2]=0|0;
     $$pre$i56 = HEAP32[$300>>2]|0;
     $308 = $$pre$i56;
    }
    $307 = (($308) + 24|0);
    HEAP32[$300>>2] = $307;
   } else {
    $309 = (($db) + 12|0);
    $310 = HEAP32[$db>>2]|0;
    $311 = $301;
    $312 = $310;
    $313 = (($311) - ($312))|0;
    $314 = (($313|0) / 24)&-1;
    $315 = (($314) + 1)|0;
    $316 = ($315|0)<(0);
    if ($316) {
     __THREW__ = 0;
     invoke_v(41);
     $317 = __THREW__; __THREW__ = 0;
     $318 = $317&1;
     if (!($318)) {
      // unreachable;
     }
     $332 = ___cxa_find_matching_catch()|0;
     $333 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $$01 = $333;$$02 = $332;
     ___resumeException($$02|0);
     // unreachable;
    }
    $319 = $303;
    $320 = (($319) - ($312))|0;
    $321 = (($320|0) / 24)&-1;
    $322 = ($321>>>0)<(1073741823);
    if ($322) {
     $323 = $321 << 1;
     $324 = ($323>>>0)<($315>>>0);
     $325 = $324 ? $315 : $323;
     $$0$i$i$i58 = $325;
    } else {
     $$0$i$i$i58 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i55,$$0$i$i$i58,$314,$309);
    $326 = (($__v$i$i55) + 8|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ($327|0)==(0|0);
    if (!($328)) {
     ;HEAP32[$327+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$327+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$327+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     $329 = (($327) + 12|0);
     ;HEAP32[$329+0>>2]=HEAP32[$299+0>>2]|0;HEAP32[$329+4>>2]=HEAP32[$299+4>>2]|0;HEAP32[$329+8>>2]=HEAP32[$299+8>>2]|0;
     ;HEAP32[$299+0>>2]=0|0;HEAP32[$299+4>>2]=0|0;HEAP32[$299+8>>2]=0|0;
    }
    $330 = (($327) + 24|0);
    HEAP32[$326>>2] = $330;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i55);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i55);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
   $331 = (($first) + 1|0);
   $$0 = $331;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 105:  {
   HEAP8[$8>>0] = 6;
   $334 = (($8) + 1|0);
   ;HEAP8[$334+0>>0]=HEAP8[4096+0>>0]|0;HEAP8[$334+1>>0]=HEAP8[4096+1>>0]|0;HEAP8[$334+2>>0]=HEAP8[4096+2>>0]|0;
   $335 = (($8) + 4|0);
   HEAP8[$335>>0] = 0;
   $336 = (($8) + 12|0);
   ;HEAP32[$336+0>>2]=0|0;HEAP32[$336+4>>2]=0|0;HEAP32[$336+8>>2]=0|0;
   $337 = (($db) + 4|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = (($db) + 8|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($338>>>0)<($340>>>0);
   if ($341) {
    $342 = ($338|0)==(0|0);
    if ($342) {
     $345 = 0;
    } else {
     ;HEAP32[$338+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$338+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$338+8>>2]=HEAP32[$8+8>>2]|0;
     ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
     $343 = (($338) + 12|0);
     ;HEAP32[$343+0>>2]=HEAP32[$336+0>>2]|0;HEAP32[$343+4>>2]=HEAP32[$336+4>>2]|0;HEAP32[$343+8>>2]=HEAP32[$336+8>>2]|0;
     ;HEAP32[$336+0>>2]=0|0;HEAP32[$336+4>>2]=0|0;HEAP32[$336+8>>2]=0|0;
     $$pre$i65 = HEAP32[$337>>2]|0;
     $345 = $$pre$i65;
    }
    $344 = (($345) + 24|0);
    HEAP32[$337>>2] = $344;
   } else {
    $346 = (($db) + 12|0);
    $347 = HEAP32[$db>>2]|0;
    $348 = $338;
    $349 = $347;
    $350 = (($348) - ($349))|0;
    $351 = (($350|0) / 24)&-1;
    $352 = (($351) + 1)|0;
    $353 = ($352|0)<(0);
    if ($353) {
     __THREW__ = 0;
     invoke_v(41);
     $354 = __THREW__; __THREW__ = 0;
     $355 = $354&1;
     if (!($355)) {
      // unreachable;
     }
     $369 = ___cxa_find_matching_catch()|0;
     $370 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $$01 = $370;$$02 = $369;
     ___resumeException($$02|0);
     // unreachable;
    }
    $356 = $340;
    $357 = (($356) - ($349))|0;
    $358 = (($357|0) / 24)&-1;
    $359 = ($358>>>0)<(1073741823);
    if ($359) {
     $360 = $358 << 1;
     $361 = ($360>>>0)<($352>>>0);
     $362 = $361 ? $352 : $360;
     $$0$i$i$i67 = $362;
    } else {
     $$0$i$i$i67 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i64,$$0$i$i$i67,$351,$346);
    $363 = (($__v$i$i64) + 8|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = ($364|0)==(0|0);
    if (!($365)) {
     ;HEAP32[$364+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$364+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$364+8>>2]=HEAP32[$8+8>>2]|0;
     ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
     $366 = (($364) + 12|0);
     ;HEAP32[$366+0>>2]=HEAP32[$336+0>>2]|0;HEAP32[$366+4>>2]=HEAP32[$336+4>>2]|0;HEAP32[$366+8>>2]=HEAP32[$336+8>>2]|0;
     ;HEAP32[$336+0>>2]=0|0;HEAP32[$336+4>>2]=0|0;HEAP32[$336+8>>2]=0|0;
    }
    $367 = (($364) + 24|0);
    HEAP32[$363>>2] = $367;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i64);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i64);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
   $368 = (($first) + 1|0);
   $$0 = $368;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 110:  {
   HEAP8[$14>>0] = 16;
   $562 = (($14) + 1|0);
   $563 = $562;
   $564 = $563;
   HEAP8[$564>>0]=1852399455&255;HEAP8[$564+1>>0]=(1852399455>>8)&255;HEAP8[$564+2>>0]=(1852399455>>16)&255;HEAP8[$564+3>>0]=1852399455>>24;
   $565 = (($563) + 4)|0;
   $566 = $565;
   HEAP8[$566>>0]=942813556&255;HEAP8[$566+1>>0]=(942813556>>8)&255;HEAP8[$566+2>>0]=(942813556>>16)&255;HEAP8[$566+3>>0]=942813556>>24;
   $567 = (($14) + 9|0);
   HEAP8[$567>>0] = 0;
   $568 = (($14) + 12|0);
   ;HEAP32[$568+0>>2]=0|0;HEAP32[$568+4>>2]=0|0;HEAP32[$568+8>>2]=0|0;
   $569 = (($db) + 4|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = (($db) + 8|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = ($570>>>0)<($572>>>0);
   if ($573) {
    $574 = ($570|0)==(0|0);
    if ($574) {
     $577 = 0;
    } else {
     ;HEAP32[$570+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$570+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$570+8>>2]=HEAP32[$14+8>>2]|0;
     ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $575 = (($570) + 12|0);
     ;HEAP32[$575+0>>2]=HEAP32[$568+0>>2]|0;HEAP32[$575+4>>2]=HEAP32[$568+4>>2]|0;HEAP32[$575+8>>2]=HEAP32[$568+8>>2]|0;
     ;HEAP32[$568+0>>2]=0|0;HEAP32[$568+4>>2]=0|0;HEAP32[$568+8>>2]=0|0;
     $$pre$i117 = HEAP32[$569>>2]|0;
     $577 = $$pre$i117;
    }
    $576 = (($577) + 24|0);
    HEAP32[$569>>2] = $576;
   } else {
    $578 = (($db) + 12|0);
    $579 = HEAP32[$db>>2]|0;
    $580 = $570;
    $581 = $579;
    $582 = (($580) - ($581))|0;
    $583 = (($582|0) / 24)&-1;
    $584 = (($583) + 1)|0;
    $585 = ($584|0)<(0);
    if ($585) {
     __THREW__ = 0;
     invoke_v(41);
     $586 = __THREW__; __THREW__ = 0;
     $587 = $586&1;
     if (!($587)) {
      // unreachable;
     }
     $601 = ___cxa_find_matching_catch()|0;
     $602 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $$01 = $602;$$02 = $601;
     ___resumeException($$02|0);
     // unreachable;
    }
    $588 = $572;
    $589 = (($588) - ($581))|0;
    $590 = (($589|0) / 24)&-1;
    $591 = ($590>>>0)<(1073741823);
    if ($591) {
     $592 = $590 << 1;
     $593 = ($592>>>0)<($584>>>0);
     $594 = $593 ? $584 : $592;
     $$0$i$i$i119 = $594;
    } else {
     $$0$i$i$i119 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i116,$$0$i$i$i119,$583,$578);
    $595 = (($__v$i$i116) + 8|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = ($596|0)==(0|0);
    if (!($597)) {
     ;HEAP32[$596+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$596+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$596+8>>2]=HEAP32[$14+8>>2]|0;
     ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $598 = (($596) + 12|0);
     ;HEAP32[$598+0>>2]=HEAP32[$568+0>>2]|0;HEAP32[$598+4>>2]=HEAP32[$568+4>>2]|0;HEAP32[$598+8>>2]=HEAP32[$568+8>>2]|0;
     ;HEAP32[$568+0>>2]=0|0;HEAP32[$568+4>>2]=0|0;HEAP32[$568+8>>2]=0|0;
    }
    $599 = (($596) + 24|0);
    HEAP32[$595>>2] = $599;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i116);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i116);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
   $600 = (($first) + 1|0);
   $$0 = $600;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 102:  {
   HEAP8[$16>>0] = 10;
   $642 = (($16) + 1|0);
   ;HEAP8[$642+0>>0]=HEAP8[4176+0>>0]|0;HEAP8[$642+1>>0]=HEAP8[4176+1>>0]|0;HEAP8[$642+2>>0]=HEAP8[4176+2>>0]|0;HEAP8[$642+3>>0]=HEAP8[4176+3>>0]|0;HEAP8[$642+4>>0]=HEAP8[4176+4>>0]|0;
   $643 = (($16) + 6|0);
   HEAP8[$643>>0] = 0;
   $644 = (($16) + 12|0);
   ;HEAP32[$644+0>>2]=0|0;HEAP32[$644+4>>2]=0|0;HEAP32[$644+8>>2]=0|0;
   $645 = (($db) + 4|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = (($db) + 8|0);
   $648 = HEAP32[$647>>2]|0;
   $649 = ($646>>>0)<($648>>>0);
   if ($649) {
    $650 = ($646|0)==(0|0);
    if ($650) {
     $653 = 0;
    } else {
     ;HEAP32[$646+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$646+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$646+8>>2]=HEAP32[$16+8>>2]|0;
     ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
     $651 = (($646) + 12|0);
     ;HEAP32[$651+0>>2]=HEAP32[$644+0>>2]|0;HEAP32[$651+4>>2]=HEAP32[$644+4>>2]|0;HEAP32[$651+8>>2]=HEAP32[$644+8>>2]|0;
     ;HEAP32[$644+0>>2]=0|0;HEAP32[$644+4>>2]=0|0;HEAP32[$644+8>>2]=0|0;
     $$pre$i134 = HEAP32[$645>>2]|0;
     $653 = $$pre$i134;
    }
    $652 = (($653) + 24|0);
    HEAP32[$645>>2] = $652;
   } else {
    $654 = (($db) + 12|0);
    $655 = HEAP32[$db>>2]|0;
    $656 = $646;
    $657 = $655;
    $658 = (($656) - ($657))|0;
    $659 = (($658|0) / 24)&-1;
    $660 = (($659) + 1)|0;
    $661 = ($660|0)<(0);
    if ($661) {
     __THREW__ = 0;
     invoke_v(41);
     $662 = __THREW__; __THREW__ = 0;
     $663 = $662&1;
     if (!($663)) {
      // unreachable;
     }
     $677 = ___cxa_find_matching_catch()|0;
     $678 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $$01 = $678;$$02 = $677;
     ___resumeException($$02|0);
     // unreachable;
    }
    $664 = $648;
    $665 = (($664) - ($657))|0;
    $666 = (($665|0) / 24)&-1;
    $667 = ($666>>>0)<(1073741823);
    if ($667) {
     $668 = $666 << 1;
     $669 = ($668>>>0)<($660>>>0);
     $670 = $669 ? $660 : $668;
     $$0$i$i$i136 = $670;
    } else {
     $$0$i$i$i136 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i133,$$0$i$i$i136,$659,$654);
    $671 = (($__v$i$i133) + 8|0);
    $672 = HEAP32[$671>>2]|0;
    $673 = ($672|0)==(0|0);
    if (!($673)) {
     ;HEAP32[$672+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$672+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$672+8>>2]=HEAP32[$16+8>>2]|0;
     ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
     $674 = (($672) + 12|0);
     ;HEAP32[$674+0>>2]=HEAP32[$644+0>>2]|0;HEAP32[$674+4>>2]=HEAP32[$644+4>>2]|0;HEAP32[$674+8>>2]=HEAP32[$644+8>>2]|0;
     ;HEAP32[$644+0>>2]=0|0;HEAP32[$644+4>>2]=0|0;HEAP32[$644+8>>2]=0|0;
    }
    $675 = (($672) + 24|0);
    HEAP32[$671>>2] = $675;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i133);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i133);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
   $676 = (($first) + 1|0);
   $$0 = $676;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 100:  {
   HEAP8[$17>>0] = 12;
   $679 = (($17) + 1|0);
   ;HEAP8[$679+0>>0]=HEAP8[4184+0>>0]|0;HEAP8[$679+1>>0]=HEAP8[4184+1>>0]|0;HEAP8[$679+2>>0]=HEAP8[4184+2>>0]|0;HEAP8[$679+3>>0]=HEAP8[4184+3>>0]|0;HEAP8[$679+4>>0]=HEAP8[4184+4>>0]|0;HEAP8[$679+5>>0]=HEAP8[4184+5>>0]|0;
   $680 = (($17) + 7|0);
   HEAP8[$680>>0] = 0;
   $681 = (($17) + 12|0);
   ;HEAP32[$681+0>>2]=0|0;HEAP32[$681+4>>2]=0|0;HEAP32[$681+8>>2]=0|0;
   $682 = (($db) + 4|0);
   $683 = HEAP32[$682>>2]|0;
   $684 = (($db) + 8|0);
   $685 = HEAP32[$684>>2]|0;
   $686 = ($683>>>0)<($685>>>0);
   if ($686) {
    $687 = ($683|0)==(0|0);
    if ($687) {
     $690 = 0;
    } else {
     ;HEAP32[$683+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$683+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$683+8>>2]=HEAP32[$17+8>>2]|0;
     ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $688 = (($683) + 12|0);
     ;HEAP32[$688+0>>2]=HEAP32[$681+0>>2]|0;HEAP32[$688+4>>2]=HEAP32[$681+4>>2]|0;HEAP32[$688+8>>2]=HEAP32[$681+8>>2]|0;
     ;HEAP32[$681+0>>2]=0|0;HEAP32[$681+4>>2]=0|0;HEAP32[$681+8>>2]=0|0;
     $$pre$i143 = HEAP32[$682>>2]|0;
     $690 = $$pre$i143;
    }
    $689 = (($690) + 24|0);
    HEAP32[$682>>2] = $689;
   } else {
    $691 = (($db) + 12|0);
    $692 = HEAP32[$db>>2]|0;
    $693 = $683;
    $694 = $692;
    $695 = (($693) - ($694))|0;
    $696 = (($695|0) / 24)&-1;
    $697 = (($696) + 1)|0;
    $698 = ($697|0)<(0);
    if ($698) {
     __THREW__ = 0;
     invoke_v(41);
     $699 = __THREW__; __THREW__ = 0;
     $700 = $699&1;
     if (!($700)) {
      // unreachable;
     }
     $714 = ___cxa_find_matching_catch()|0;
     $715 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $$01 = $715;$$02 = $714;
     ___resumeException($$02|0);
     // unreachable;
    }
    $701 = $685;
    $702 = (($701) - ($694))|0;
    $703 = (($702|0) / 24)&-1;
    $704 = ($703>>>0)<(1073741823);
    if ($704) {
     $705 = $703 << 1;
     $706 = ($705>>>0)<($697>>>0);
     $707 = $706 ? $697 : $705;
     $$0$i$i$i145 = $707;
    } else {
     $$0$i$i$i145 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i145,$696,$691);
    $708 = (($__v$i$i142) + 8|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = ($709|0)==(0|0);
    if (!($710)) {
     ;HEAP32[$709+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$709+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$709+8>>2]=HEAP32[$17+8>>2]|0;
     ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $711 = (($709) + 12|0);
     ;HEAP32[$711+0>>2]=HEAP32[$681+0>>2]|0;HEAP32[$711+4>>2]=HEAP32[$681+4>>2]|0;HEAP32[$711+8>>2]=HEAP32[$681+8>>2]|0;
     ;HEAP32[$681+0>>2]=0|0;HEAP32[$681+4>>2]=0|0;HEAP32[$681+8>>2]=0|0;
    }
    $712 = (($709) + 24|0);
    HEAP32[$708>>2] = $712;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $713 = (($first) + 1|0);
   $$0 = $713;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 101:  {
   $716 = (_malloc(16)|0);
   $717 = (($18) + 8|0);
   HEAP32[$717>>2] = $716;
   HEAP32[$18>>2] = 17;
   $718 = (($18) + 4|0);
   HEAP32[$718>>2] = 11;
   dest=$716+0|0; src=4192+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $719 = (($716) + 11|0);
   HEAP8[$719>>0] = 0;
   $720 = (($18) + 12|0);
   ;HEAP32[$720+0>>2]=0|0;HEAP32[$720+4>>2]=0|0;HEAP32[$720+8>>2]=0|0;
   $721 = (($db) + 4|0);
   $722 = HEAP32[$721>>2]|0;
   $723 = (($db) + 8|0);
   $724 = HEAP32[$723>>2]|0;
   $725 = ($722>>>0)<($724>>>0);
   if ($725) {
    $726 = ($722|0)==(0|0);
    if ($726) {
     $729 = 0;
    } else {
     ;HEAP32[$722+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$722+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$722+8>>2]=HEAP32[$18+8>>2]|0;
     ;HEAP32[$18+0>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
     $727 = (($722) + 12|0);
     ;HEAP32[$727+0>>2]=HEAP32[$720+0>>2]|0;HEAP32[$727+4>>2]=HEAP32[$720+4>>2]|0;HEAP32[$727+8>>2]=HEAP32[$720+8>>2]|0;
     ;HEAP32[$720+0>>2]=0|0;HEAP32[$720+4>>2]=0|0;HEAP32[$720+8>>2]=0|0;
     $$pre$i151 = HEAP32[$721>>2]|0;
     $729 = $$pre$i151;
    }
    $728 = (($729) + 24|0);
    HEAP32[$721>>2] = $728;
   } else {
    $730 = (($db) + 12|0);
    $731 = HEAP32[$db>>2]|0;
    $732 = $722;
    $733 = $731;
    $734 = (($732) - ($733))|0;
    $735 = (($734|0) / 24)&-1;
    $736 = (($735) + 1)|0;
    $737 = ($736|0)<(0);
    if ($737) {
     __THREW__ = 0;
     invoke_v(41);
     $738 = __THREW__; __THREW__ = 0;
     $739 = $738&1;
     if (!($739)) {
      // unreachable;
     }
     $753 = ___cxa_find_matching_catch()|0;
     $754 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $$01 = $754;$$02 = $753;
     ___resumeException($$02|0);
     // unreachable;
    }
    $740 = $724;
    $741 = (($740) - ($733))|0;
    $742 = (($741|0) / 24)&-1;
    $743 = ($742>>>0)<(1073741823);
    if ($743) {
     $744 = $742 << 1;
     $745 = ($744>>>0)<($736>>>0);
     $746 = $745 ? $736 : $744;
     $$0$i$i$i153 = $746;
    } else {
     $$0$i$i$i153 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i150,$$0$i$i$i153,$735,$730);
    $747 = (($__v$i$i150) + 8|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = ($748|0)==(0|0);
    if (!($749)) {
     ;HEAP32[$748+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$748+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$748+8>>2]=HEAP32[$18+8>>2]|0;
     ;HEAP32[$18+0>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
     $750 = (($748) + 12|0);
     ;HEAP32[$750+0>>2]=HEAP32[$720+0>>2]|0;HEAP32[$750+4>>2]=HEAP32[$720+4>>2]|0;HEAP32[$750+8>>2]=HEAP32[$720+8>>2]|0;
     ;HEAP32[$720+0>>2]=0|0;HEAP32[$720+4>>2]=0|0;HEAP32[$720+8>>2]=0|0;
    }
    $751 = (($748) + 24|0);
    HEAP32[$747>>2] = $751;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i150);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i150);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
   $752 = (($first) + 1|0);
   $$0 = $752;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 103:  {
   HEAP8[$19>>0] = 20;
   $755 = (($19) + 1|0);
   dest=$755+0|0; src=4208+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $756 = (($19) + 11|0);
   HEAP8[$756>>0] = 0;
   $757 = (($19) + 12|0);
   ;HEAP32[$757+0>>2]=0|0;HEAP32[$757+4>>2]=0|0;HEAP32[$757+8>>2]=0|0;
   $758 = (($db) + 4|0);
   $759 = HEAP32[$758>>2]|0;
   $760 = (($db) + 8|0);
   $761 = HEAP32[$760>>2]|0;
   $762 = ($759>>>0)<($761>>>0);
   if ($762) {
    $763 = ($759|0)==(0|0);
    if ($763) {
     $766 = 0;
    } else {
     ;HEAP32[$759+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$759+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$759+8>>2]=HEAP32[$19+8>>2]|0;
     ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
     $764 = (($759) + 12|0);
     ;HEAP32[$764+0>>2]=HEAP32[$757+0>>2]|0;HEAP32[$764+4>>2]=HEAP32[$757+4>>2]|0;HEAP32[$764+8>>2]=HEAP32[$757+8>>2]|0;
     ;HEAP32[$757+0>>2]=0|0;HEAP32[$757+4>>2]=0|0;HEAP32[$757+8>>2]=0|0;
     $$pre$i160 = HEAP32[$758>>2]|0;
     $766 = $$pre$i160;
    }
    $765 = (($766) + 24|0);
    HEAP32[$758>>2] = $765;
   } else {
    $767 = (($db) + 12|0);
    $768 = HEAP32[$db>>2]|0;
    $769 = $759;
    $770 = $768;
    $771 = (($769) - ($770))|0;
    $772 = (($771|0) / 24)&-1;
    $773 = (($772) + 1)|0;
    $774 = ($773|0)<(0);
    if ($774) {
     __THREW__ = 0;
     invoke_v(41);
     $775 = __THREW__; __THREW__ = 0;
     $776 = $775&1;
     if (!($776)) {
      // unreachable;
     }
     $790 = ___cxa_find_matching_catch()|0;
     $791 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $$01 = $791;$$02 = $790;
     ___resumeException($$02|0);
     // unreachable;
    }
    $777 = $761;
    $778 = (($777) - ($770))|0;
    $779 = (($778|0) / 24)&-1;
    $780 = ($779>>>0)<(1073741823);
    if ($780) {
     $781 = $779 << 1;
     $782 = ($781>>>0)<($773>>>0);
     $783 = $782 ? $773 : $781;
     $$0$i$i$i162 = $783;
    } else {
     $$0$i$i$i162 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i159,$$0$i$i$i162,$772,$767);
    $784 = (($__v$i$i159) + 8|0);
    $785 = HEAP32[$784>>2]|0;
    $786 = ($785|0)==(0|0);
    if (!($786)) {
     ;HEAP32[$785+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$785+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$785+8>>2]=HEAP32[$19+8>>2]|0;
     ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
     $787 = (($785) + 12|0);
     ;HEAP32[$787+0>>2]=HEAP32[$757+0>>2]|0;HEAP32[$787+4>>2]=HEAP32[$757+4>>2]|0;HEAP32[$787+8>>2]=HEAP32[$757+8>>2]|0;
     ;HEAP32[$757+0>>2]=0|0;HEAP32[$757+4>>2]=0|0;HEAP32[$757+8>>2]=0|0;
    }
    $788 = (($785) + 24|0);
    HEAP32[$784>>2] = $788;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i159);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i159);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
   $789 = (($first) + 1|0);
   $$0 = $789;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 98:  {
   HEAP8[$2>>0] = 8;
   $106 = (($2) + 1|0);
   HEAP8[$106>>0]=1819242338&255;HEAP8[$106+1>>0]=(1819242338>>8)&255;HEAP8[$106+2>>0]=(1819242338>>16)&255;HEAP8[$106+3>>0]=1819242338>>24;
   $107 = (($2) + 5|0);
   HEAP8[$107>>0] = 0;
   $108 = (($2) + 12|0);
   ;HEAP32[$108+0>>2]=0|0;HEAP32[$108+4>>2]=0|0;HEAP32[$108+8>>2]=0|0;
   $109 = (($db) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($db) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($110>>>0)<($112>>>0);
   if ($113) {
    $114 = ($110|0)==(0|0);
    if ($114) {
     $117 = 0;
    } else {
     ;HEAP32[$110+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$110+8>>2]=HEAP32[$2+8>>2]|0;
     ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     $115 = (($110) + 12|0);
     ;HEAP32[$115+0>>2]=HEAP32[$108+0>>2]|0;HEAP32[$115+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$115+8>>2]=HEAP32[$108+8>>2]|0;
     ;HEAP32[$108+0>>2]=0|0;HEAP32[$108+4>>2]=0|0;HEAP32[$108+8>>2]=0|0;
     $$pre$i14 = HEAP32[$109>>2]|0;
     $117 = $$pre$i14;
    }
    $116 = (($117) + 24|0);
    HEAP32[$109>>2] = $116;
   } else {
    $118 = (($db) + 12|0);
    $119 = HEAP32[$db>>2]|0;
    $120 = $110;
    $121 = $119;
    $122 = (($120) - ($121))|0;
    $123 = (($122|0) / 24)&-1;
    $124 = (($123) + 1)|0;
    $125 = ($124|0)<(0);
    if ($125) {
     __THREW__ = 0;
     invoke_v(41);
     $126 = __THREW__; __THREW__ = 0;
     $127 = $126&1;
     if (!($127)) {
      // unreachable;
     }
     $141 = ___cxa_find_matching_catch()|0;
     $142 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $$01 = $142;$$02 = $141;
     ___resumeException($$02|0);
     // unreachable;
    }
    $128 = $112;
    $129 = (($128) - ($121))|0;
    $130 = (($129|0) / 24)&-1;
    $131 = ($130>>>0)<(1073741823);
    if ($131) {
     $132 = $130 << 1;
     $133 = ($132>>>0)<($124>>>0);
     $134 = $133 ? $124 : $132;
     $$0$i$i$i16 = $134;
    } else {
     $$0$i$i$i16 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i16,$123,$118);
    $135 = (($__v$i$i13) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(0|0);
    if (!($137)) {
     ;HEAP32[$136+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$136+8>>2]=HEAP32[$2+8>>2]|0;
     ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     $138 = (($136) + 12|0);
     ;HEAP32[$138+0>>2]=HEAP32[$108+0>>2]|0;HEAP32[$138+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$108+8>>2]|0;
     ;HEAP32[$108+0>>2]=0|0;HEAP32[$108+4>>2]=0|0;HEAP32[$108+8>>2]=0|0;
    }
    $139 = (($136) + 24|0);
    HEAP32[$135>>2] = $139;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
   $140 = (($first) + 1|0);
   $$0 = $140;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 97:  {
   $180 = (_malloc(16)|0);
   $181 = (($4) + 8|0);
   HEAP32[$181>>2] = $180;
   HEAP32[$4>>2] = 17;
   $182 = (($4) + 4|0);
   HEAP32[$182>>2] = 11;
   dest=$180+0|0; src=3752+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $183 = (($180) + 11|0);
   HEAP8[$183>>0] = 0;
   $184 = (($4) + 12|0);
   ;HEAP32[$184+0>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
   $185 = (($db) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($db) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($186>>>0)<($188>>>0);
   if ($189) {
    $190 = ($186|0)==(0|0);
    if ($190) {
     $193 = 0;
    } else {
     ;HEAP32[$186+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$186+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$186+8>>2]=HEAP32[$4+8>>2]|0;
     ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
     $191 = (($186) + 12|0);
     ;HEAP32[$191+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$191+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$191+8>>2]=HEAP32[$184+8>>2]|0;
     ;HEAP32[$184+0>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
     $$pre$i31 = HEAP32[$185>>2]|0;
     $193 = $$pre$i31;
    }
    $192 = (($193) + 24|0);
    HEAP32[$185>>2] = $192;
   } else {
    $194 = (($db) + 12|0);
    $195 = HEAP32[$db>>2]|0;
    $196 = $186;
    $197 = $195;
    $198 = (($196) - ($197))|0;
    $199 = (($198|0) / 24)&-1;
    $200 = (($199) + 1)|0;
    $201 = ($200|0)<(0);
    if ($201) {
     __THREW__ = 0;
     invoke_v(41);
     $202 = __THREW__; __THREW__ = 0;
     $203 = $202&1;
     if (!($203)) {
      // unreachable;
     }
     $217 = ___cxa_find_matching_catch()|0;
     $218 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$01 = $218;$$02 = $217;
     ___resumeException($$02|0);
     // unreachable;
    }
    $204 = $188;
    $205 = (($204) - ($197))|0;
    $206 = (($205|0) / 24)&-1;
    $207 = ($206>>>0)<(1073741823);
    if ($207) {
     $208 = $206 << 1;
     $209 = ($208>>>0)<($200>>>0);
     $210 = $209 ? $200 : $208;
     $$0$i$i$i33 = $210;
    } else {
     $$0$i$i$i33 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i30,$$0$i$i$i33,$199,$194);
    $211 = (($__v$i$i30) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($212|0)==(0|0);
    if (!($213)) {
     ;HEAP32[$212+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$212+8>>2]=HEAP32[$4+8>>2]|0;
     ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
     $214 = (($212) + 12|0);
     ;HEAP32[$214+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$214+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$214+8>>2]=HEAP32[$184+8>>2]|0;
     ;HEAP32[$184+0>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
    }
    $215 = (($212) + 24|0);
    HEAP32[$211>>2] = $215;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i30);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i30);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   $216 = (($first) + 1|0);
   $$0 = $216;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 118:  {
   HEAP8[$0>>0] = 8;
   $32 = (($0) + 1|0);
   HEAP8[$32>>0]=1684631414&255;HEAP8[$32+1>>0]=(1684631414>>8)&255;HEAP8[$32+2>>0]=(1684631414>>16)&255;HEAP8[$32+3>>0]=1684631414>>24;
   $33 = (($0) + 5|0);
   HEAP8[$33>>0] = 0;
   $34 = (($0) + 12|0);
   ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
   $35 = (($db) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($db) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36>>>0)<($38>>>0);
   if ($39) {
    $40 = ($36|0)==(0|0);
    if ($40) {
     $43 = 0;
    } else {
     ;HEAP32[$36+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$36+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $41 = (($36) + 12|0);
     ;HEAP32[$41+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$34+8>>2]|0;
     ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
     $$pre$i = HEAP32[$35>>2]|0;
     $43 = $$pre$i;
    }
    $42 = (($43) + 24|0);
    HEAP32[$35>>2] = $42;
   } else {
    $44 = (($db) + 12|0);
    $45 = HEAP32[$db>>2]|0;
    $46 = $36;
    $47 = $45;
    $48 = (($46) - ($47))|0;
    $49 = (($48|0) / 24)&-1;
    $50 = (($49) + 1)|0;
    $51 = ($50|0)<(0);
    if ($51) {
     __THREW__ = 0;
     invoke_v(41);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if (!($53)) {
      // unreachable;
     }
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$01 = $68;$$02 = $67;
     ___resumeException($$02|0);
     // unreachable;
    }
    $54 = $38;
    $55 = (($54) - ($47))|0;
    $56 = (($55|0) / 24)&-1;
    $57 = ($56>>>0)<(1073741823);
    if ($57) {
     $58 = $56 << 1;
     $59 = ($58>>>0)<($50>>>0);
     $60 = $59 ? $50 : $58;
     $$0$i$i$i = $60;
    } else {
     $$0$i$i$i = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$49,$44);
    $61 = (($__v$i$i) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    if (!($63)) {
     ;HEAP32[$62+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $64 = (($62) + 12|0);
     ;HEAP32[$64+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$34+8>>2]|0;
     ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
    }
    $65 = (($62) + 24|0);
    HEAP32[$61>>2] = $65;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $66 = (($first) + 1|0);
   $$0 = $66;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = $0&255;
  $8 = $7 >>> 1;
  $9 = (($this) + 1|0);
  $10 = $8;$14 = $9;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $10 = $4;$14 = $6;
 }
 $not$ = ($10|0)!=(0);
 $11 = $not$&1;
 $12 = ($10|0)==($11|0);
 $$pre1 = (($10) - ($11))|0;
 if ($12) {
  $16 = $0;
 } else {
  $13 = (($14) + ($11)|0);
  _memmove(($14|0),($13|0),($$pre1|0))|0;
  $$pre = HEAP8[$this>>0]|0;
  $16 = $$pre;
 }
 $15 = $16 & 1;
 $17 = ($15<<24>>24)==(0);
 if ($17) {
  $19 = $$pre1 << 1;
  $20 = $19&255;
  HEAP8[$this>>0] = $20;
  $21 = (($14) + ($$pre1)|0);
  HEAP8[$21>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $18 = (($this) + 4|0);
  HEAP32[$18>>2] = $$pre1;
  $21 = (($14) + ($$pre1)|0);
  HEAP8[$21>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i211 = 0, $$0$i$i$i$i254 = 0, $$0$i223 = 0, $$0$i231 = 0, $$01$i = 0, $$01$i222 = 0, $$01$i230 = 0, $$019$i = 0, $$03$i180 = 0, $$03$i206 = 0, $$07$i = 0, $$1 = 0, $$1$i = 0, $$1$i122 = 0, $$1$i130 = 0, $$1$i136 = 0;
 var $$1$i142 = 0, $$1$i151 = 0, $$1$i162 = 0, $$1$i179 = 0, $$1$i243 = 0, $$1$i266 = 0, $$1$i309 = 0, $$1$i336 = 0, $$1$i357 = 0, $$10 = 0, $$1019 = 0, $$110 = 0, $$12 = 0, $$12$i = 0, $$12$i121 = 0, $$12$i129 = 0, $$12$i135 = 0, $$12$i141 = 0, $$12$i150 = 0, $$12$i161 = 0;
 var $$12$i178 = 0, $$12$i242 = 0, $$12$i308 = 0, $$12$i335 = 0, $$12$i356 = 0, $$1221 = 0, $$13$i = 0, $$14 = 0, $$14$i = 0, $$1423 = 0, $$16 = 0, $$1625 = 0, $$17 = 0, $$1726 = 0, $$18 = 0, $$18$i = 0, $$1827 = 0, $$19 = 0, $$1928 = 0, $$2 = 0;
 var $$2$i = 0, $$2$i164 = 0, $$2$i215 = 0, $$2$i245 = 0, $$2$i267 = 0, $$2$i311 = 0, $$20 = 0, $$2029 = 0, $$21 = 0, $$211 = 0, $$2130 = 0, $$22 = 0, $$221$i = 0, $$2231 = 0, $$23 = 0, $$23$i = 0, $$23$i163 = 0, $$23$i244 = 0, $$23$i310 = 0, $$2332 = 0;
 var $$24$i = 0, $$25$i = 0, $$29$i = 0, $$3$i = 0, $$3$i166 = 0, $$3$i247 = 0, $$3$i268 = 0, $$3$i313 = 0, $$310$i = 0, $$34$i = 0, $$34$i165 = 0, $$34$i246 = 0, $$34$i312 = 0, $$35$i = 0, $$36$i = 0, $$4 = 0, $$4$i = 0, $$4$i168 = 0, $$4$i217 = 0, $$4$i249 = 0;
 var $$4$i269 = 0, $$4$i315 = 0, $$411$i = 0, $$413 = 0, $$45$i = 0, $$45$i167 = 0, $$45$i248 = 0, $$45$i314 = 0, $$46$i = 0, $$5 = 0, $$514 = 0, $$7 = 0, $$716 = 0, $$8 = 0, $$817 = 0, $$9 = 0, $$918 = 0, $$first = 0, $$first$i = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i274 = 0, $$pre$i$i$i$i320 = 0, $$pre$i$i$i$i341 = 0, $$pre$i$i$i77 = 0, $$pre$i$i208 = 0, $$pre$i$i253 = 0, $$pre$i125 = 0, $$pre$phiZ2D = 0, $$pre408 = 0, $$pre411 = 0, $$pre430 = 0, $$pre431 = 0, $$pre432 = 0, $$pre433 = 0, $$pre434 = 0;
 var $$pre435 = 0, $$pre436 = 0, $$pre437 = 0, $$pre438 = 0, $$pre439 = 0, $$pre440 = 0, $$pre441 = 0, $$pre442 = 0, $$pre443 = 0, $$pre444 = 0, $$pre445 = 0, $$pre446 = 0, $$pre447 = 0, $$pre448 = 0, $$pre449 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$sroa$4 = 0, $$sroa$4364 = 0;
 var $$sroa$4367 = 0, $$sroa$4370 = 0, $$sroa$4373 = 0, $$sroa$4376 = 0, $$sroa$5 = 0, $$sroa$5383 = 0, $$sroa$5386 = 0, $$sroa$5389 = 0, $$sroa$5392 = 0, $$sroa$5395 = 0, $$sroa$5398 = 0, $$sroa$5407 = 0, $$sroa$5410 = 0, $$sroa$5413 = 0, $$sroa$5416 = 0, $$sroa$5419 = 0, $$sroa$5422 = 0, $$sroa$6 = 0, $$sroa$6401 = 0, $$sroa$6404 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0;
 var $3031 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i181 = 0, $__v$i$i$i251 = 0, $expr$i = 0, $expr$i152 = 0, $expr$i225 = 0, $expr$i233 = 0;
 var $expr$i299 = 0, $expr_list$i = 0, $first$ = 0, $first$$i = 0, $first$33 = 0, $first$34 = 0, $first$35 = 0, $first$36 = 0, $first$37 = 0, $first$38 = 0, $first$39 = 0, $first$40 = 0, $first$41 = 0, $first$42 = 0, $first$43 = 0, $first$44 = 0, $first$45 = 0, $first$46 = 0, $first$47 = 0, $first$48 = 0;
 var $first$49 = 0, $first$50 = 0, $first$51 = 0, $first$52 = 0, $first$53 = 0, $first$54 = 0, $first$55 = 0, $first$56 = 0, $first$57 = 0, $first$58 = 0, $first$59 = 0, $first$60 = 0, $first$61 = 0, $first$62 = 0, $first$63 = 0, $first$64 = 0, $first$65 = 0, $first$66 = 0, $first$67 = 0, $first$68 = 0;
 var $first$69 = 0, $first$70 = 0, $first$71 = 0, $has_expr_list$0$off0$i = 0, $has_init$0$off0$i414417 = 0, $init_list$i = 0, $k$0$i = 0, $k$08$i = 0, $k$09$i = 0, $k1$06$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $name$i = 0, $op1 = 0, $op18 = 0, $op2 = 0, $op27 = 0, $op3 = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i281 = 0, $or$cond$i$i$i$i$i$i327 = 0, $or$cond$i$i$i$i$i$i348 = 0, $or$cond$i$i$i$i$i84 = 0, $or$cond$i252 = 0, $or$cond$i291 = 0, $or$cond13$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond5$i = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $phitmp = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i276 = 0, $phitmp$i$i$i$i$i$i$i322 = 0, $phitmp$i$i$i$i$i$i$i343 = 0;
 var $phitmp$i$i$i$i$i$i79 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i279 = 0, $phitmp$i2$i$i$i$i$i$i325 = 0, $phitmp$i2$i$i$i$i$i$i346 = 0, $phitmp$i2$i$i$i$i$i82 = 0, $phitmp453 = 0, $phitmp454 = 0, $phitmp455 = 0, $phitmp456 = 0, $phitmp457 = 0, $phitmp458 = 0, $phitmp459 = 0, $phitmp460 = 0, $phitmp461 = 0, $phitmp462 = 0, $phitmp463 = 0, $phitmp464 = 0, $phitmp465 = 0;
 var $phitmp466 = 0, $phitmp467 = 0, $phitmp468 = 0, $phitmp469 = 0, $phitmp470 = 0, $phitmp471 = 0, $phitmp472 = 0, $phitmp473 = 0, $phitmp474 = 0, $phitmp475 = 0, $phitmp476 = 0, $phitmp477 = 0, $phitmp478 = 0, $phitmp479 = 0, $phitmp480 = 0, $phitmp481 = 0, $phitmp482 = 0, $phitmp483 = 0, $phitmp484 = 0, $phitmp485 = 0;
 var $phitmp486 = 0, $phitmp487 = 0, $phitmp488 = 0, $phitmp489 = 0, $phitmp490 = 0, $phitmp491 = 0, $r$i = 0, $scevgep = 0, $t$0 = 0, $t$0$i = 0, $t$0$i182 = 0, $t$0$i256 = 0, $t$0$i289$lcssa = 0, $t$0$i289363 = 0, $t$1$i = 0, $t$1$i257 = 0, $t$2$i = 0, $t$2$i258 = 0, $t$3$i413419 = 0, $tmp$i = 0;
 var $tmp$i170 = 0, $tmp$i270 = 0, $tmp2$i = 0, $type$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$sroa$5422 = sp + 2025|0;
 $0 = sp + 816|0;
 $1 = sp + 1704|0;
 $$sroa$5419 = sp + 2095|0;
 $2 = sp + 12|0;
 $3 = sp + 1716|0;
 $expr$i299 = sp + 1728|0;
 $4 = sp + 1792|0;
 $$sroa$5416 = sp + 2018|0;
 $5 = sp + 852|0;
 $6 = sp + 96|0;
 $7 = sp + 108|0;
 $8 = sp + 120|0;
 $$sroa$5413 = sp + 1983|0;
 $tmp$i270 = sp + 144|0;
 $__v$i$i$i251 = sp + 1684|0;
 $tmp2$i = sp + 156|0;
 $9 = sp + 168|0;
 $$sroa$5410 = sp + 2081|0;
 $10 = sp + 204|0;
 $11 = sp + 216|0;
 $12 = sp + 228|0;
 $13 = sp + 240|0;
 $expr$i233 = sp + 252|0;
 $14 = sp + 264|0;
 $$sroa$5407 = sp + 2004|0;
 $15 = sp + 300|0;
 $16 = sp + 312|0;
 $17 = sp + 324|0;
 $18 = sp + 336|0;
 $expr$i225 = sp + 348|0;
 $19 = sp + 1672|0;
 $name$i = sp + 360|0;
 $20 = sp + 372|0;
 $__v$i$i$i181 = sp + 384|0;
 $init_list$i = sp + 404|0;
 $21 = sp + 416|0;
 $type$i = sp + 428|0;
 $expr_list$i = sp + 440|0;
 $22 = sp + 452|0;
 $r$i = sp + 464|0;
 $23 = sp + 476|0;
 $24 = sp + 488|0;
 $25 = sp + 500|0;
 $26 = sp + 512|0;
 $27 = sp + 528|0;
 $$sroa$6404 = sp + 2067|0;
 $$sroa$6401 = sp + 1997|0;
 $28 = sp + 576|0;
 $29 = sp + 588|0;
 $tmp$i170 = sp + 600|0;
 $expr$i152 = sp + 612|0;
 $30 = sp + 624|0;
 $$sroa$5398 = sp + 2039|0;
 $31 = sp + 660|0;
 $32 = sp + 672|0;
 $33 = sp + 684|0;
 $34 = sp + 696|0;
 $expr$i = sp + 708|0;
 $35 = sp + 720|0;
 $$sroa$5395 = sp + 1990|0;
 $36 = sp + 756|0;
 $37 = sp + 1964|0;
 $38 = sp + 1660|0;
 $39 = sp + 780|0;
 $40 = sp + 1768|0;
 $$sroa$5392 = sp + 2116|0;
 $41 = sp + 1852|0;
 $42 = sp + 1876|0;
 $43 = sp + 1904|0;
 $$sroa$5389 = sp + 2102|0;
 $44 = sp + 1952|0;
 $45 = sp + 876|0;
 $46 = sp + 888|0;
 $$sroa$5386 = sp + 2088|0;
 $47 = sp + 924|0;
 $48 = sp + 936|0;
 $49 = sp + 952|0;
 $$sroa$5383 = sp + 2074|0;
 $50 = sp + 988|0;
 $__v$i$i = sp + 1000|0;
 $51 = sp + 1024|0;
 $$sroa$5 = sp + 2060|0;
 $52 = sp + 1060|0;
 $53 = sp + 1072|0;
 $__v$i$i$i = sp + 1084|0;
 $tmp$i = sp + 1104|0;
 $54 = sp + 1116|0;
 $55 = sp + 1128|0;
 $56 = sp + 1140|0;
 $57 = sp + 1152|0;
 $$sroa$6 = sp + 2046|0;
 $58 = sp + 1188|0;
 $59 = sp + 1200|0;
 $60 = sp + 1212|0;
 $61 = sp + 1224|0;
 $62 = sp + 1236|0;
 $63 = sp + 1248|0;
 $64 = sp + 1260|0;
 $$sroa$4376 = sp + 1976|0;
 $65 = sp + 1284|0;
 $66 = sp + 1296|0;
 $67 = sp + 1308|0;
 $68 = sp + 1320|0;
 $$sroa$4373 = sp + 2053|0;
 $69 = sp + 1360|0;
 $70 = sp + 1372|0;
 $71 = sp + 1384|0;
 $72 = sp + 1396|0;
 $73 = sp + 1408|0;
 $74 = sp + 1420|0;
 $75 = sp + 1432|0;
 $76 = sp + 1444|0;
 $77 = sp + 1456|0;
 $78 = sp + 1468|0;
 $op2 = sp + 1480|0;
 $op1 = sp + 1492|0;
 $79 = sp + 1504|0;
 $$sroa$4370 = sp + 2011|0;
 $80 = sp + 1540|0;
 $81 = sp + 1552|0;
 $82 = sp + 1564|0;
 $83 = sp + 1576|0;
 $84 = sp + 1588|0;
 $85 = sp + 1600|0;
 $86 = sp + 1612|0;
 $87 = sp + 1624|0;
 $88 = sp + 1648|0;
 $89 = sp + 1636|0;
 $90 = sp + 72|0;
 $91 = sp;
 $92 = sp + 48|0;
 $$sroa$4367 = sp + 2032|0;
 $93 = sp + 792|0;
 $94 = sp + 1752|0;
 $95 = sp + 804|0;
 $96 = sp + 1840|0;
 $97 = sp + 828|0;
 $98 = sp + 1864|0;
 $99 = sp + 84|0;
 $100 = sp + 840|0;
 $101 = sp + 1888|0;
 $102 = sp + 864|0;
 $103 = sp + 1740|0;
 $104 = sp + 1528|0;
 $105 = sp + 1336|0;
 $$sroa$4364 = sp + 2109|0;
 $106 = sp + 1272|0;
 $107 = sp + 1176|0;
 $108 = sp + 1048|0;
 $op3 = sp + 976|0;
 $op27 = sp + 912|0;
 $op18 = sp + 1940|0;
 $109 = sp + 1816|0;
 $$sroa$4 = sp + 2123|0;
 $110 = sp + 768|0;
 $111 = sp + 744|0;
 $112 = sp + 648|0;
 $113 = sp + 564|0;
 $114 = sp + 552|0;
 $115 = sp + 288|0;
 $116 = sp + 192|0;
 $117 = sp + 132|0;
 $118 = sp + 1928|0;
 $119 = sp + 24|0;
 $120 = $last;
 $121 = $first;
 $122 = (($120) - ($121))|0;
 $123 = ($122|0)>(1);
 if (!($123)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $124 = ($122|0)>(3);
 if ($124) {
  $125 = HEAP8[$first>>0]|0;
  $126 = ($125<<24>>24)==(103);
  if ($126) {
   $127 = (($first) + 1|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)==(115);
   $130 = (($first) + 2|0);
   $$first = $129 ? $130 : $first;
   $parsed_gs$0$off0 = $129;$t$0 = $$first;
  } else {
   $parsed_gs$0$off0 = 0;$t$0 = $first;
  }
 } else {
  $parsed_gs$0$off0 = 0;$t$0 = $first;
 }
 $131 = HEAP8[$t$0>>0]|0;
 $132 = $131 << 24 >> 24;
 do {
  switch ($132|0) {
  case 116:  {
   $2903 = (($t$0) + 1|0);
   $2904 = HEAP8[$2903>>0]|0;
   $2905 = $2904 << 24 >> 24;
   if ((($2905|0) == 105) | (($2905|0) == 101)) {
    $2906 = ($122|0)>(2);
    if (!($2906)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2907 = HEAP8[$first>>0]|0;
    $2908 = ($2907<<24>>24)==(116);
    if (!($2908)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2909 = (($first) + 1|0);
    $2910 = HEAP8[$2909>>0]|0;
    if (!((($2910<<24>>24) == 105) | (($2910<<24>>24) == 101))) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2911 = ($2910<<24>>24)==(101);
    $2912 = (($first) + 2|0);
    if ($2911) {
     $2913 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2912,$last,$db)|0);
     $t$0$i = $2913;
    } else {
     $2914 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2912,$last,$db)|0);
     $t$0$i = $2914;
    }
    $2915 = ($t$0$i|0)==($2912|0);
    if ($2915) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2916 = HEAP32[$db>>2]|0;
    $2917 = (($db) + 4|0);
    $2918 = HEAP32[$2917>>2]|0;
    $2919 = ($2916|0)==($2918|0);
    if ($2919) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2920 = (($2918) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($48,$2920);
    __THREW__ = 0;
    $2921 = (invoke_iiiii(33,($48|0),0,(2264|0),7)|0);
    $2922 = __THREW__; __THREW__ = 0;
    $2923 = $2922&1;
    do {
     if ($2923) {
      $2941 = ___cxa_find_matching_catch()|0;
      $2942 = tempRet0;
      $$1$i130 = $2942;$$12$i129 = $2941;
     } else {
      ;HEAP32[$47+0>>2]=HEAP32[$2921+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$2921+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$2921+8>>2]|0;
      ;HEAP32[$2921+0>>2]=0|0;HEAP32[$2921+4>>2]=0|0;HEAP32[$2921+8>>2]=0|0;
      __THREW__ = 0;
      $2924 = (invoke_iiii(32,($47|0),(2000|0),1)|0);
      $2925 = __THREW__; __THREW__ = 0;
      $2926 = $2925&1;
      if ($2926) {
       $2943 = ___cxa_find_matching_catch()|0;
       $2944 = tempRet0;
       $2945 = HEAP8[$47>>0]|0;
       $2946 = $2945 & 1;
       $2947 = ($2946<<24>>24)==(0);
       if ($2947) {
        $$1$i130 = $2944;$$12$i129 = $2943;
        break;
       }
       $2948 = (($47) + 8|0);
       $2949 = HEAP32[$2948>>2]|0;
       _free($2949);
       $$1$i130 = $2944;$$12$i129 = $2943;
       break;
      }
      $2927 = HEAP8[$2924>>0]|0;
      $2928 = (($2924) + 1|0);
      ;HEAP8[$$sroa$5386+0>>0]=HEAP8[$2928+0>>0]|0;HEAP8[$$sroa$5386+1>>0]=HEAP8[$2928+1>>0]|0;HEAP8[$$sroa$5386+2>>0]=HEAP8[$2928+2>>0]|0;HEAP8[$$sroa$5386+3>>0]=HEAP8[$2928+3>>0]|0;HEAP8[$$sroa$5386+4>>0]=HEAP8[$2928+4>>0]|0;HEAP8[$$sroa$5386+5>>0]=HEAP8[$2928+5>>0]|0;HEAP8[$$sroa$5386+6>>0]=HEAP8[$2928+6>>0]|0;
      $2929 = (($2924) + 8|0);
      $2930 = HEAP32[$2929>>2]|0;
      ;HEAP32[$2924+0>>2]=0|0;HEAP32[$2924+4>>2]=0|0;HEAP32[$2924+8>>2]=0|0;
      HEAP8[$46>>0] = $2927;
      $2931 = (($46) + 1|0);
      ;HEAP8[$2931+0>>0]=HEAP8[$$sroa$5386+0>>0]|0;HEAP8[$2931+1>>0]=HEAP8[$$sroa$5386+1>>0]|0;HEAP8[$2931+2>>0]=HEAP8[$$sroa$5386+2>>0]|0;HEAP8[$2931+3>>0]=HEAP8[$$sroa$5386+3>>0]|0;HEAP8[$2931+4>>0]=HEAP8[$$sroa$5386+4>>0]|0;HEAP8[$2931+5>>0]=HEAP8[$$sroa$5386+5>>0]|0;HEAP8[$2931+6>>0]=HEAP8[$$sroa$5386+6>>0]|0;
      $2932 = (($46) + 8|0);
      HEAP32[$2932>>2] = $2930;
      ;HEAP8[$$sroa$5386+0>>0]=0|0;HEAP8[$$sroa$5386+1>>0]=0|0;HEAP8[$$sroa$5386+2>>0]=0|0;HEAP8[$$sroa$5386+3>>0]=0|0;HEAP8[$$sroa$5386+4>>0]=0|0;HEAP8[$$sroa$5386+5>>0]=0|0;HEAP8[$$sroa$5386+6>>0]=0|0;
      $2933 = (($46) + 12|0);
      ;HEAP32[$2933+0>>2]=0|0;HEAP32[$2933+4>>2]=0|0;HEAP32[$2933+8>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2920,$46);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
      $$pre451 = HEAP8[$47>>0]|0;
      $phitmp454 = $$pre451 & 1;
      $phitmp455 = ($phitmp454<<24>>24)==(0);
      if (!($phitmp455)) {
       $2934 = (($47) + 8|0);
       $2935 = HEAP32[$2934>>2]|0;
       _free($2935);
      }
      $2936 = HEAP8[$48>>0]|0;
      $2937 = $2936 & 1;
      $2938 = ($2937<<24>>24)==(0);
      if ($2938) {
       $$0 = $t$0$i;
       STACKTOP = sp;return ($$0|0);
      }
      $2939 = (($48) + 8|0);
      $2940 = HEAP32[$2939>>2]|0;
      _free($2940);
      $$0 = $t$0$i;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $2950 = HEAP8[$48>>0]|0;
    $2951 = $2950 & 1;
    $2952 = ($2951<<24>>24)==(0);
    if ($2952) {
     ___resumeException($$12$i129|0);
     // unreachable;
    }
    $2953 = (($48) + 8|0);
    $2954 = HEAP32[$2953>>2]|0;
    _free($2954);
    ___resumeException($$12$i129|0);
    // unreachable;
   } else if ((($2905|0) == 114)) {
    HEAP8[$119>>0] = 10;
    $2955 = (($119) + 1|0);
    ;HEAP8[$2955+0>>0]=HEAP8[2248+0>>0]|0;HEAP8[$2955+1>>0]=HEAP8[2248+1>>0]|0;HEAP8[$2955+2>>0]=HEAP8[2248+2>>0]|0;HEAP8[$2955+3>>0]=HEAP8[2248+3>>0]|0;HEAP8[$2955+4>>0]=HEAP8[2248+4>>0]|0;
    $2956 = (($119) + 6|0);
    HEAP8[$2956>>0] = 0;
    $2957 = (($119) + 12|0);
    ;HEAP32[$2957+0>>2]=0|0;HEAP32[$2957+4>>2]=0|0;HEAP32[$2957+8>>2]=0|0;
    $2958 = (($db) + 4|0);
    $2959 = HEAP32[$2958>>2]|0;
    $2960 = (($db) + 8|0);
    $2961 = HEAP32[$2960>>2]|0;
    $2962 = ($2959>>>0)<($2961>>>0);
    if ($2962) {
     $2963 = ($2959|0)==(0|0);
     if ($2963) {
      $2966 = 0;
     } else {
      ;HEAP32[$2959+0>>2]=HEAP32[$119+0>>2]|0;HEAP32[$2959+4>>2]=HEAP32[$119+4>>2]|0;HEAP32[$2959+8>>2]=HEAP32[$119+8>>2]|0;
      ;HEAP32[$119+0>>2]=0|0;HEAP32[$119+4>>2]=0|0;HEAP32[$119+8>>2]=0|0;
      $2964 = (($2959) + 12|0);
      ;HEAP32[$2964+0>>2]=HEAP32[$2957+0>>2]|0;HEAP32[$2964+4>>2]=HEAP32[$2957+4>>2]|0;HEAP32[$2964+8>>2]=HEAP32[$2957+8>>2]|0;
      ;HEAP32[$2957+0>>2]=0|0;HEAP32[$2957+4>>2]=0|0;HEAP32[$2957+8>>2]=0|0;
      $$pre$i125 = HEAP32[$2958>>2]|0;
      $2966 = $$pre$i125;
     }
     $2965 = (($2966) + 24|0);
     HEAP32[$2958>>2] = $2965;
    } else {
     $2967 = (($db) + 12|0);
     $2968 = HEAP32[$db>>2]|0;
     $2969 = $2959;
     $2970 = $2968;
     $2971 = (($2969) - ($2970))|0;
     $2972 = (($2971|0) / 24)&-1;
     $2973 = (($2972) + 1)|0;
     $2974 = ($2973|0)<(0);
     if ($2974) {
      __THREW__ = 0;
      invoke_v(41);
      $2975 = __THREW__; __THREW__ = 0;
      $2976 = $2975&1;
      if (!($2976)) {
       // unreachable;
      }
      $2990 = ___cxa_find_matching_catch()|0;
      $2991 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119);
      $$23 = $2990;$$2332 = $2991;
      ___resumeException($$23|0);
      // unreachable;
     }
     $2977 = $2961;
     $2978 = (($2977) - ($2970))|0;
     $2979 = (($2978|0) / 24)&-1;
     $2980 = ($2979>>>0)<(1073741823);
     if ($2980) {
      $2981 = $2979 << 1;
      $2982 = ($2981>>>0)<($2973>>>0);
      $2983 = $2982 ? $2973 : $2981;
      $$0$i$i$i = $2983;
     } else {
      $$0$i$i$i = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$2972,$2967);
     $2984 = (($__v$i$i) + 8|0);
     $2985 = HEAP32[$2984>>2]|0;
     $2986 = ($2985|0)==(0|0);
     if (!($2986)) {
      ;HEAP32[$2985+0>>2]=HEAP32[$119+0>>2]|0;HEAP32[$2985+4>>2]=HEAP32[$119+4>>2]|0;HEAP32[$2985+8>>2]=HEAP32[$119+8>>2]|0;
      ;HEAP32[$119+0>>2]=0|0;HEAP32[$119+4>>2]=0|0;HEAP32[$119+8>>2]=0|0;
      $2987 = (($2985) + 12|0);
      ;HEAP32[$2987+0>>2]=HEAP32[$2957+0>>2]|0;HEAP32[$2987+4>>2]=HEAP32[$2957+4>>2]|0;HEAP32[$2987+8>>2]=HEAP32[$2957+8>>2]|0;
      ;HEAP32[$2957+0>>2]=0|0;HEAP32[$2957+4>>2]=0|0;HEAP32[$2957+8>>2]=0|0;
     }
     $2988 = (($2985) + 24|0);
     HEAP32[$2984>>2] = $2988;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119);
    $2989 = (($first) + 2|0);
    $$0 = $2989;
    STACKTOP = sp;return ($$0|0);
   } else if ((($2905|0) == 119)) {
    $2992 = ($122|0)>(2);
    if (!($2992)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2993 = HEAP8[$first>>0]|0;
    $2994 = ($2993<<24>>24)==(116);
    if (!($2994)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2995 = (($first) + 1|0);
    $2996 = HEAP8[$2995>>0]|0;
    $2997 = ($2996<<24>>24)==(119);
    if (!($2997)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2998 = (($first) + 2|0);
    $2999 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2998,$last,$db)|0);
    $3000 = ($2999|0)==($2998|0);
    if ($3000) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $3001 = HEAP32[$db>>2]|0;
    $3002 = (($db) + 4|0);
    $3003 = HEAP32[$3002>>2]|0;
    $3004 = ($3001|0)==($3003|0);
    if ($3004) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $3005 = (($3003) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($50,$3005);
    __THREW__ = 0;
    $3006 = (invoke_iiiii(33,($50|0),0,(2256|0),6)|0);
    $3007 = __THREW__; __THREW__ = 0;
    $3008 = $3007&1;
    if ($3008) {
     $3018 = ___cxa_find_matching_catch()|0;
     $3019 = tempRet0;
     $3020 = HEAP8[$50>>0]|0;
     $3021 = $3020 & 1;
     $3022 = ($3021<<24>>24)==(0);
     if ($3022) {
      ___resumeException($3018|0);
      // unreachable;
     }
     $3023 = (($50) + 8|0);
     $3024 = HEAP32[$3023>>2]|0;
     _free($3024);
     ___resumeException($3018|0);
     // unreachable;
    } else {
     $3009 = HEAP8[$3006>>0]|0;
     $3010 = (($3006) + 1|0);
     ;HEAP8[$$sroa$5383+0>>0]=HEAP8[$3010+0>>0]|0;HEAP8[$$sroa$5383+1>>0]=HEAP8[$3010+1>>0]|0;HEAP8[$$sroa$5383+2>>0]=HEAP8[$3010+2>>0]|0;HEAP8[$$sroa$5383+3>>0]=HEAP8[$3010+3>>0]|0;HEAP8[$$sroa$5383+4>>0]=HEAP8[$3010+4>>0]|0;HEAP8[$$sroa$5383+5>>0]=HEAP8[$3010+5>>0]|0;HEAP8[$$sroa$5383+6>>0]=HEAP8[$3010+6>>0]|0;
     $3011 = (($3006) + 8|0);
     $3012 = HEAP32[$3011>>2]|0;
     ;HEAP32[$3006+0>>2]=0|0;HEAP32[$3006+4>>2]=0|0;HEAP32[$3006+8>>2]=0|0;
     HEAP8[$49>>0] = $3009;
     $3013 = (($49) + 1|0);
     ;HEAP8[$3013+0>>0]=HEAP8[$$sroa$5383+0>>0]|0;HEAP8[$3013+1>>0]=HEAP8[$$sroa$5383+1>>0]|0;HEAP8[$3013+2>>0]=HEAP8[$$sroa$5383+2>>0]|0;HEAP8[$3013+3>>0]=HEAP8[$$sroa$5383+3>>0]|0;HEAP8[$3013+4>>0]=HEAP8[$$sroa$5383+4>>0]|0;HEAP8[$3013+5>>0]=HEAP8[$$sroa$5383+5>>0]|0;HEAP8[$3013+6>>0]=HEAP8[$$sroa$5383+6>>0]|0;
     $3014 = (($49) + 8|0);
     HEAP32[$3014>>2] = $3012;
     ;HEAP8[$$sroa$5383+0>>0]=0|0;HEAP8[$$sroa$5383+1>>0]=0|0;HEAP8[$$sroa$5383+2>>0]=0|0;HEAP8[$$sroa$5383+3>>0]=0|0;HEAP8[$$sroa$5383+4>>0]=0|0;HEAP8[$$sroa$5383+5>>0]=0|0;HEAP8[$$sroa$5383+6>>0]=0|0;
     $3015 = (($49) + 12|0);
     ;HEAP32[$3015+0>>2]=0|0;HEAP32[$3015+4>>2]=0|0;HEAP32[$3015+8>>2]=0|0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($3005,$49);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
     $$pre452 = HEAP8[$50>>0]|0;
     $phitmp = $$pre452 & 1;
     $phitmp453 = ($phitmp<<24>>24)==(0);
     if ($phitmp453) {
      $$0 = $2999;
      STACKTOP = sp;return ($$0|0);
     }
     $3016 = (($50) + 8|0);
     $3017 = HEAP32[$3016>>2]|0;
     _free($3017);
     $$0 = $2999;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
   $3025 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $$0 = $3025;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 97:  {
   $136 = (($t$0) + 1|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137 << 24 >> 24;
   switch ($138|0) {
   case 100:  {
    $148 = (($first) + 2|0);
    HEAP8[$59>>0] = 2;
    $149 = (($59) + 1|0);
    HEAP8[$149>>0] = 38;
    $150 = (($59) + 2|0);
    HEAP8[$150>>0] = 0;
    __THREW__ = 0;
    $151 = (invoke_iiiii(49,($148|0),($last|0),($59|0),($db|0))|0);
    $152 = __THREW__; __THREW__ = 0;
    $153 = $152&1;
    if ($153) {
     $155 = ___cxa_find_matching_catch()|0;
     $156 = tempRet0;
     $$23 = $155;$$2332 = $156;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $154 = ($151|0)==($148|0);
     $first$33 = $154 ? $first : $151;
     $$0 = $first$33;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 122:  {
    $275 = ($122|0)>(2);
    if (!($275)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $276 = HEAP8[$first>>0]|0;
    $277 = ($276<<24>>24)==(97);
    if (!($277)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $278 = (($first) + 1|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = ($279<<24>>24)==(122);
    if (!($280)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $281 = (($first) + 2|0);
    $282 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($281,$last,$db)|0);
    $283 = ($282|0)==($281|0);
    if ($283) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $284 = HEAP32[$db>>2]|0;
    $285 = (($db) + 4|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($284|0)==($286|0);
    if ($287) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $288 = (($286) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$288);
    __THREW__ = 0;
    $289 = (invoke_iiiii(33,($3|0),0,(3704|0),9)|0);
    $290 = __THREW__; __THREW__ = 0;
    $291 = $290&1;
    do {
     if ($291) {
      $352 = ___cxa_find_matching_catch()|0;
      $353 = tempRet0;
      $$1$i336 = $353;$$12$i335 = $352;
     } else {
      ;HEAP32[$2+0>>2]=HEAP32[$289+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$289+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$289+8>>2]|0;
      ;HEAP32[$289+0>>2]=0|0;HEAP32[$289+4>>2]=0|0;HEAP32[$289+8>>2]=0|0;
      __THREW__ = 0;
      $292 = (invoke_iiii(32,($2|0),(2000|0),1)|0);
      $293 = __THREW__; __THREW__ = 0;
      $294 = $293&1;
      if ($294) {
       $354 = ___cxa_find_matching_catch()|0;
       $355 = tempRet0;
       $356 = HEAP8[$2>>0]|0;
       $357 = $356 & 1;
       $358 = ($357<<24>>24)==(0);
       if ($358) {
        $$1$i336 = $355;$$12$i335 = $354;
        break;
       }
       $359 = (($2) + 8|0);
       $360 = HEAP32[$359>>2]|0;
       _free($360);
       $$1$i336 = $355;$$12$i335 = $354;
       break;
      }
      $295 = HEAP8[$292>>0]|0;
      $296 = (($292) + 1|0);
      ;HEAP8[$$sroa$5419+0>>0]=HEAP8[$296+0>>0]|0;HEAP8[$$sroa$5419+1>>0]=HEAP8[$296+1>>0]|0;HEAP8[$$sroa$5419+2>>0]=HEAP8[$296+2>>0]|0;HEAP8[$$sroa$5419+3>>0]=HEAP8[$296+3>>0]|0;HEAP8[$$sroa$5419+4>>0]=HEAP8[$296+4>>0]|0;HEAP8[$$sroa$5419+5>>0]=HEAP8[$296+5>>0]|0;HEAP8[$$sroa$5419+6>>0]=HEAP8[$296+6>>0]|0;
      $297 = (($292) + 8|0);
      $298 = HEAP32[$297>>2]|0;
      ;HEAP32[$292+0>>2]=0|0;HEAP32[$292+4>>2]=0|0;HEAP32[$292+8>>2]=0|0;
      $299 = HEAP8[$288>>0]|0;
      $300 = $299 & 1;
      $301 = ($300<<24>>24)==(0);
      do {
       if ($301) {
        $302 = (($288) + 1|0);
        HEAP8[$302>>0] = 0;
        HEAP8[$288>>0] = 0;
       } else {
        $303 = (($286) + -16|0);
        $304 = HEAP32[$303>>2]|0;
        HEAP8[$304>>0] = 0;
        $305 = (($286) + -20|0);
        HEAP32[$305>>2] = 0;
        $$pre$i$i$i$i320 = HEAP8[$288>>0]|0;
        $306 = $$pre$i$i$i$i320 & 1;
        $307 = ($306<<24>>24)==(0);
        if ($307) {
         $312 = $$pre$i$i$i$i320;$321 = 10;
        } else {
         $308 = HEAP32[$288>>2]|0;
         $309 = $308 & -2;
         $phitmp$i$i$i$i$i$i$i322 = (($309) + -1)|0;
         $310 = $308&255;
         $312 = $310;$321 = $phitmp$i$i$i$i$i$i$i322;
        }
        $311 = $312 & 1;
        $313 = ($311<<24>>24)==(0);
        if ($313) {
         $314 = $312&255;
         $315 = $314 >>> 1;
         $316 = ($312&255)<(22);
         if ($316) {
          $3027 = 1;$320 = 10;$340 = $315;
         } else {
          $317 = (($315) + 16)|0;
          $318 = $317 & 240;
          $phitmp$i2$i$i$i$i$i$i325 = (($318) + -1)|0;
          $3027 = 1;$320 = $phitmp$i2$i$i$i$i$i$i325;$340 = $315;
         }
        } else {
         $3027 = 0;$320 = 10;$340 = 0;
        }
        $319 = ($320|0)==($321|0);
        if (!($319)) {
         $322 = ($320|0)==(10);
         if ($322) {
          $327 = (($288) + 1|0);
          $328 = HEAP32[$303>>2]|0;
          if ($3027) {
           $329 = $312&255;
           $330 = $329 >>> 1;
           $331 = (($330) + 1)|0;
           _memcpy(($327|0),($328|0),($331|0))|0;
           _free($328);
          } else {
           $336 = HEAP8[$328>>0]|0;
           HEAP8[$327>>0] = $336;
           _free($328);
          }
          $341 = $340 << 1;
          $342 = $341&255;
          HEAP8[$288>>0] = $342;
          break;
         }
         $323 = ($320>>>0)<=($321>>>0);
         $324 = (($320) + 1)|0;
         $325 = (_malloc($324)|0);
         $326 = ($325|0)==(0|0);
         $or$cond$i$i$i$i$i$i327 = $323 & $326;
         if (!($or$cond$i$i$i$i$i$i327)) {
          if ($3027) {
           $332 = (($288) + 1|0);
           $333 = $312&255;
           $334 = $333 >>> 1;
           $335 = (($334) + 1)|0;
           _memcpy(($325|0),($332|0),($335|0))|0;
          } else {
           $337 = HEAP32[$303>>2]|0;
           $338 = HEAP8[$337>>0]|0;
           HEAP8[$325>>0] = $338;
           _free($337);
          }
          $339 = $324 | 1;
          HEAP32[$288>>2] = $339;
          HEAP32[$305>>2] = $340;
          HEAP32[$303>>2] = $325;
         }
        }
       }
      } while(0);
      HEAP8[$288>>0] = $295;
      $343 = (($286) + -23|0);
      ;HEAP8[$343+0>>0]=HEAP8[$$sroa$5419+0>>0]|0;HEAP8[$343+1>>0]=HEAP8[$$sroa$5419+1>>0]|0;HEAP8[$343+2>>0]=HEAP8[$$sroa$5419+2>>0]|0;HEAP8[$343+3>>0]=HEAP8[$$sroa$5419+3>>0]|0;HEAP8[$343+4>>0]=HEAP8[$$sroa$5419+4>>0]|0;HEAP8[$343+5>>0]=HEAP8[$$sroa$5419+5>>0]|0;HEAP8[$343+6>>0]=HEAP8[$$sroa$5419+6>>0]|0;
      $344 = (($286) + -16|0);
      HEAP32[$344>>2] = $298;
      ;HEAP8[$$sroa$5419+0>>0]=0|0;HEAP8[$$sroa$5419+1>>0]=0|0;HEAP8[$$sroa$5419+2>>0]=0|0;HEAP8[$$sroa$5419+3>>0]=0|0;HEAP8[$$sroa$5419+4>>0]=0|0;HEAP8[$$sroa$5419+5>>0]=0|0;HEAP8[$$sroa$5419+6>>0]=0|0;
      $$pre431 = HEAP8[$2>>0]|0;
      $phitmp488 = $$pre431 & 1;
      $phitmp489 = ($phitmp488<<24>>24)==(0);
      if (!($phitmp489)) {
       $345 = (($2) + 8|0);
       $346 = HEAP32[$345>>2]|0;
       _free($346);
      }
      $347 = HEAP8[$3>>0]|0;
      $348 = $347 & 1;
      $349 = ($348<<24>>24)==(0);
      if ($349) {
       $$0 = $282;
       STACKTOP = sp;return ($$0|0);
      }
      $350 = (($3) + 8|0);
      $351 = HEAP32[$350>>2]|0;
      _free($351);
      $$0 = $282;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $361 = HEAP8[$3>>0]|0;
    $362 = $361 & 1;
    $363 = ($362<<24>>24)==(0);
    if ($363) {
     ___resumeException($$12$i335|0);
     // unreachable;
    }
    $364 = (($3) + 8|0);
    $365 = HEAP32[$364>>2]|0;
    _free($365);
    ___resumeException($$12$i335|0);
    // unreachable;
    break;
   }
   case 110:  {
    $157 = (($first) + 2|0);
    HEAP8[$60>>0] = 2;
    $158 = (($60) + 1|0);
    HEAP8[$158>>0] = 38;
    $159 = (($60) + 2|0);
    HEAP8[$159>>0] = 0;
    __THREW__ = 0;
    $160 = (invoke_iiiii(48,($157|0),($last|0),($60|0),($db|0))|0);
    $161 = __THREW__; __THREW__ = 0;
    $162 = $161&1;
    if ($162) {
     $164 = ___cxa_find_matching_catch()|0;
     $165 = tempRet0;
     $$23 = $164;$$2332 = $165;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $163 = ($160|0)==($157|0);
     $first$34 = $163 ? $first : $160;
     $$0 = $first$34;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 78:  {
    $166 = (($first) + 2|0);
    HEAP8[$61>>0] = 4;
    $167 = (($61) + 1|0);
    HEAP8[$167>>0]=15654&255;HEAP8[$167+1>>0]=15654>>8;
    $168 = (($61) + 3|0);
    HEAP8[$168>>0] = 0;
    __THREW__ = 0;
    $169 = (invoke_iiiii(48,($166|0),($last|0),($61|0),($db|0))|0);
    $170 = __THREW__; __THREW__ = 0;
    $171 = $170&1;
    if ($171) {
     $173 = ___cxa_find_matching_catch()|0;
     $174 = tempRet0;
     $$23 = $173;$$2332 = $174;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $172 = ($169|0)==($166|0);
     $first$35 = $172 ? $first : $169;
     $$0 = $first$35;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 83:  {
    $175 = (($first) + 2|0);
    HEAP8[$62>>0] = 2;
    $176 = (($62) + 1|0);
    HEAP8[$176>>0] = 61;
    $177 = (($62) + 2|0);
    HEAP8[$177>>0] = 0;
    __THREW__ = 0;
    $178 = (invoke_iiiii(48,($175|0),($last|0),($62|0),($db|0))|0);
    $179 = __THREW__; __THREW__ = 0;
    $180 = $179&1;
    if ($180) {
     $182 = ___cxa_find_matching_catch()|0;
     $183 = tempRet0;
     $$23 = $182;$$2332 = $183;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $181 = ($178|0)==($175|0);
     $first$36 = $181 ? $first : $178;
     $$0 = $first$36;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 116:  {
    $184 = ($122|0)>(2);
    if (!($184)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $185 = HEAP8[$first>>0]|0;
    $186 = ($185<<24>>24)==(97);
    if (!($186)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $187 = (($first) + 1|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = ($188<<24>>24)==(116);
    if (!($189)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $190 = (($first) + 2|0);
    $191 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($190,$last,$db)|0);
    $192 = ($191|0)==($190|0);
    if ($192) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $193 = HEAP32[$db>>2]|0;
    $194 = (($db) + 4|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($193|0)==($195|0);
    if ($196) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $197 = (($195) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1,$197);
    __THREW__ = 0;
    $198 = (invoke_iiiii(33,($1|0),0,(3704|0),9)|0);
    $199 = __THREW__; __THREW__ = 0;
    $200 = $199&1;
    do {
     if ($200) {
      $261 = ___cxa_find_matching_catch()|0;
      $262 = tempRet0;
      $$1$i357 = $262;$$12$i356 = $261;
     } else {
      ;HEAP32[$0+0>>2]=HEAP32[$198+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$198+8>>2]|0;
      ;HEAP32[$198+0>>2]=0|0;HEAP32[$198+4>>2]=0|0;HEAP32[$198+8>>2]=0|0;
      __THREW__ = 0;
      $201 = (invoke_iiii(32,($0|0),(2000|0),1)|0);
      $202 = __THREW__; __THREW__ = 0;
      $203 = $202&1;
      if ($203) {
       $263 = ___cxa_find_matching_catch()|0;
       $264 = tempRet0;
       $265 = HEAP8[$0>>0]|0;
       $266 = $265 & 1;
       $267 = ($266<<24>>24)==(0);
       if ($267) {
        $$1$i357 = $264;$$12$i356 = $263;
        break;
       }
       $268 = (($0) + 8|0);
       $269 = HEAP32[$268>>2]|0;
       _free($269);
       $$1$i357 = $264;$$12$i356 = $263;
       break;
      }
      $204 = HEAP8[$201>>0]|0;
      $205 = (($201) + 1|0);
      ;HEAP8[$$sroa$5422+0>>0]=HEAP8[$205+0>>0]|0;HEAP8[$$sroa$5422+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$$sroa$5422+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$$sroa$5422+3>>0]=HEAP8[$205+3>>0]|0;HEAP8[$$sroa$5422+4>>0]=HEAP8[$205+4>>0]|0;HEAP8[$$sroa$5422+5>>0]=HEAP8[$205+5>>0]|0;HEAP8[$$sroa$5422+6>>0]=HEAP8[$205+6>>0]|0;
      $206 = (($201) + 8|0);
      $207 = HEAP32[$206>>2]|0;
      ;HEAP32[$201+0>>2]=0|0;HEAP32[$201+4>>2]=0|0;HEAP32[$201+8>>2]=0|0;
      $208 = HEAP8[$197>>0]|0;
      $209 = $208 & 1;
      $210 = ($209<<24>>24)==(0);
      do {
       if ($210) {
        $211 = (($197) + 1|0);
        HEAP8[$211>>0] = 0;
        HEAP8[$197>>0] = 0;
       } else {
        $212 = (($195) + -16|0);
        $213 = HEAP32[$212>>2]|0;
        HEAP8[$213>>0] = 0;
        $214 = (($195) + -20|0);
        HEAP32[$214>>2] = 0;
        $$pre$i$i$i$i341 = HEAP8[$197>>0]|0;
        $215 = $$pre$i$i$i$i341 & 1;
        $216 = ($215<<24>>24)==(0);
        if ($216) {
         $221 = $$pre$i$i$i$i341;$230 = 10;
        } else {
         $217 = HEAP32[$197>>2]|0;
         $218 = $217 & -2;
         $phitmp$i$i$i$i$i$i$i343 = (($218) + -1)|0;
         $219 = $217&255;
         $221 = $219;$230 = $phitmp$i$i$i$i$i$i$i343;
        }
        $220 = $221 & 1;
        $222 = ($220<<24>>24)==(0);
        if ($222) {
         $223 = $221&255;
         $224 = $223 >>> 1;
         $225 = ($221&255)<(22);
         if ($225) {
          $229 = 10;$249 = $224;$3026 = 1;
         } else {
          $226 = (($224) + 16)|0;
          $227 = $226 & 240;
          $phitmp$i2$i$i$i$i$i$i346 = (($227) + -1)|0;
          $229 = $phitmp$i2$i$i$i$i$i$i346;$249 = $224;$3026 = 1;
         }
        } else {
         $229 = 10;$249 = 0;$3026 = 0;
        }
        $228 = ($229|0)==($230|0);
        if (!($228)) {
         $231 = ($229|0)==(10);
         if ($231) {
          $236 = (($197) + 1|0);
          $237 = HEAP32[$212>>2]|0;
          if ($3026) {
           $238 = $221&255;
           $239 = $238 >>> 1;
           $240 = (($239) + 1)|0;
           _memcpy(($236|0),($237|0),($240|0))|0;
           _free($237);
          } else {
           $245 = HEAP8[$237>>0]|0;
           HEAP8[$236>>0] = $245;
           _free($237);
          }
          $250 = $249 << 1;
          $251 = $250&255;
          HEAP8[$197>>0] = $251;
          break;
         }
         $232 = ($229>>>0)<=($230>>>0);
         $233 = (($229) + 1)|0;
         $234 = (_malloc($233)|0);
         $235 = ($234|0)==(0|0);
         $or$cond$i$i$i$i$i$i348 = $232 & $235;
         if (!($or$cond$i$i$i$i$i$i348)) {
          if ($3026) {
           $241 = (($197) + 1|0);
           $242 = $221&255;
           $243 = $242 >>> 1;
           $244 = (($243) + 1)|0;
           _memcpy(($234|0),($241|0),($244|0))|0;
          } else {
           $246 = HEAP32[$212>>2]|0;
           $247 = HEAP8[$246>>0]|0;
           HEAP8[$234>>0] = $247;
           _free($246);
          }
          $248 = $233 | 1;
          HEAP32[$197>>2] = $248;
          HEAP32[$214>>2] = $249;
          HEAP32[$212>>2] = $234;
         }
        }
       }
      } while(0);
      HEAP8[$197>>0] = $204;
      $252 = (($195) + -23|0);
      ;HEAP8[$252+0>>0]=HEAP8[$$sroa$5422+0>>0]|0;HEAP8[$252+1>>0]=HEAP8[$$sroa$5422+1>>0]|0;HEAP8[$252+2>>0]=HEAP8[$$sroa$5422+2>>0]|0;HEAP8[$252+3>>0]=HEAP8[$$sroa$5422+3>>0]|0;HEAP8[$252+4>>0]=HEAP8[$$sroa$5422+4>>0]|0;HEAP8[$252+5>>0]=HEAP8[$$sroa$5422+5>>0]|0;HEAP8[$252+6>>0]=HEAP8[$$sroa$5422+6>>0]|0;
      $253 = (($195) + -16|0);
      HEAP32[$253>>2] = $207;
      ;HEAP8[$$sroa$5422+0>>0]=0|0;HEAP8[$$sroa$5422+1>>0]=0|0;HEAP8[$$sroa$5422+2>>0]=0|0;HEAP8[$$sroa$5422+3>>0]=0|0;HEAP8[$$sroa$5422+4>>0]=0|0;HEAP8[$$sroa$5422+5>>0]=0|0;HEAP8[$$sroa$5422+6>>0]=0|0;
      $$pre430 = HEAP8[$0>>0]|0;
      $phitmp490 = $$pre430 & 1;
      $phitmp491 = ($phitmp490<<24>>24)==(0);
      if (!($phitmp491)) {
       $254 = (($0) + 8|0);
       $255 = HEAP32[$254>>2]|0;
       _free($255);
      }
      $256 = HEAP8[$1>>0]|0;
      $257 = $256 & 1;
      $258 = ($257<<24>>24)==(0);
      if ($258) {
       $$0 = $191;
       STACKTOP = sp;return ($$0|0);
      }
      $259 = (($1) + 8|0);
      $260 = HEAP32[$259>>2]|0;
      _free($260);
      $$0 = $191;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $270 = HEAP8[$1>>0]|0;
    $271 = $270 & 1;
    $272 = ($271<<24>>24)==(0);
    if ($272) {
     ___resumeException($$12$i356|0);
     // unreachable;
    }
    $273 = (($1) + 8|0);
    $274 = HEAP32[$273>>2]|0;
    _free($274);
    ___resumeException($$12$i356|0);
    // unreachable;
    break;
   }
   case 97:  {
    $139 = (($first) + 2|0);
    HEAP8[$58>>0] = 4;
    $140 = (($58) + 1|0);
    HEAP8[$140>>0]=9766&255;HEAP8[$140+1>>0]=9766>>8;
    $141 = (($58) + 3|0);
    HEAP8[$141>>0] = 0;
    __THREW__ = 0;
    $142 = (invoke_iiiii(48,($139|0),($last|0),($58|0),($db|0))|0);
    $143 = __THREW__; __THREW__ = 0;
    $144 = $143&1;
    if ($144) {
     $146 = ___cxa_find_matching_catch()|0;
     $147 = tempRet0;
     $$23 = $146;$$2332 = $147;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $145 = ($142|0)==($139|0);
     $first$ = $145 ? $first : $142;
     $$0 = $first$;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 100:  {
   $783 = (($t$0) + 1|0);
   $784 = HEAP8[$783>>0]|0;
   $785 = $784 << 24 >> 24;
   do {
    switch ($785|0) {
    case 97:  {
     $786 = (($t$0) + 2|0);
     $787 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($786,$last,$db)|0);
     $788 = ($787|0)==($786|0);
     if ($788) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $789 = HEAP32[$db>>2]|0;
     $790 = (($db) + 4|0);
     $791 = HEAP32[$790>>2]|0;
     $792 = ($789|0)==($791|0);
     if ($792) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $793 = (($791) + -24|0);
     if ($parsed_gs$0$off0) {
      HEAP8[$66>>0] = 4;
      $794 = (($66) + 1|0);
      HEAP8[$794>>0]=14906&255;HEAP8[$794+1>>0]=14906>>8;
      $795 = (($66) + 3|0);
      HEAP8[$795>>0] = 0;
     } else {
      ;HEAP32[$66+0>>2]=0|0;HEAP32[$66+4>>2]=0|0;HEAP32[$66+8>>2]=0|0;
     }
     __THREW__ = 0;
     $796 = (invoke_iiii(32,($66|0),(2160|0),9)|0);
     $797 = __THREW__; __THREW__ = 0;
     $798 = $797&1;
     if ($798) {
      $881 = ___cxa_find_matching_catch()|0;
      $882 = tempRet0;
      $$2 = $881;$$211 = $882;
     } else {
      ;HEAP32[$65+0>>2]=HEAP32[$796+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$796+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$796+8>>2]|0;
      ;HEAP32[$796+0>>2]=0|0;HEAP32[$796+4>>2]=0|0;HEAP32[$796+8>>2]=0|0;
      $799 = HEAP32[$790>>2]|0;
      $800 = (($799) + -24|0);
      __THREW__ = 0;
      invoke_vii(36,($67|0),($800|0));
      $801 = __THREW__; __THREW__ = 0;
      $802 = $801&1;
      do {
       if ($802) {
        $883 = ___cxa_find_matching_catch()|0;
        $884 = tempRet0;
        $$1 = $883;$$110 = $884;
       } else {
        $803 = HEAP8[$67>>0]|0;
        $804 = $803 & 1;
        $805 = ($804<<24>>24)==(0);
        if ($805) {
         $810 = (($67) + 1|0);
         $811 = $803&255;
         $812 = $811 >>> 1;
         $813 = $810;$814 = $812;
        } else {
         $806 = (($67) + 8|0);
         $807 = HEAP32[$806>>2]|0;
         $808 = (($67) + 4|0);
         $809 = HEAP32[$808>>2]|0;
         $813 = $807;$814 = $809;
        }
        __THREW__ = 0;
        $815 = (invoke_iiii(32,($65|0),($813|0),($814|0))|0);
        $816 = __THREW__; __THREW__ = 0;
        $817 = $816&1;
        if ($817) {
         $885 = ___cxa_find_matching_catch()|0;
         $886 = tempRet0;
         if ($805) {
          $$1 = $885;$$110 = $886;
          break;
         }
         $887 = (($67) + 8|0);
         $888 = HEAP32[$887>>2]|0;
         _free($888);
         $$1 = $885;$$110 = $886;
         break;
        }
        $818 = HEAP8[$815>>0]|0;
        $819 = (($815) + 1|0);
        ;HEAP8[$$sroa$4376+0>>0]=HEAP8[$819+0>>0]|0;HEAP8[$$sroa$4376+1>>0]=HEAP8[$819+1>>0]|0;HEAP8[$$sroa$4376+2>>0]=HEAP8[$819+2>>0]|0;HEAP8[$$sroa$4376+3>>0]=HEAP8[$819+3>>0]|0;HEAP8[$$sroa$4376+4>>0]=HEAP8[$819+4>>0]|0;HEAP8[$$sroa$4376+5>>0]=HEAP8[$819+5>>0]|0;HEAP8[$$sroa$4376+6>>0]=HEAP8[$819+6>>0]|0;
        $820 = (($815) + 8|0);
        $821 = HEAP32[$820>>2]|0;
        ;HEAP32[$815+0>>2]=0|0;HEAP32[$815+4>>2]=0|0;HEAP32[$815+8>>2]=0|0;
        $822 = HEAP8[$793>>0]|0;
        $823 = $822 & 1;
        $824 = ($823<<24>>24)==(0);
        do {
         if ($824) {
          $825 = (($793) + 1|0);
          HEAP8[$825>>0] = 0;
          HEAP8[$793>>0] = 0;
         } else {
          $826 = (($791) + -16|0);
          $827 = HEAP32[$826>>2]|0;
          HEAP8[$827>>0] = 0;
          $828 = (($791) + -20|0);
          HEAP32[$828>>2] = 0;
          $$pre$i$i$i = HEAP8[$793>>0]|0;
          $829 = $$pre$i$i$i & 1;
          $830 = ($829<<24>>24)==(0);
          if ($830) {
           $835 = $$pre$i$i$i;$844 = 10;
          } else {
           $831 = HEAP32[$793>>2]|0;
           $832 = $831 & -2;
           $phitmp$i$i$i$i$i$i = (($832) + -1)|0;
           $833 = $831&255;
           $835 = $833;$844 = $phitmp$i$i$i$i$i$i;
          }
          $834 = $835 & 1;
          $836 = ($834<<24>>24)==(0);
          if ($836) {
           $837 = $835&255;
           $838 = $837 >>> 1;
           $839 = ($835&255)<(22);
           if ($839) {
            $3029 = 1;$843 = 10;$863 = $838;
           } else {
            $840 = (($838) + 16)|0;
            $841 = $840 & 240;
            $phitmp$i2$i$i$i$i$i = (($841) + -1)|0;
            $3029 = 1;$843 = $phitmp$i2$i$i$i$i$i;$863 = $838;
           }
          } else {
           $3029 = 0;$843 = 10;$863 = 0;
          }
          $842 = ($843|0)==($844|0);
          if (!($842)) {
           $845 = ($843|0)==(10);
           if ($845) {
            $850 = (($793) + 1|0);
            $851 = HEAP32[$826>>2]|0;
            if ($3029) {
             $852 = $835&255;
             $853 = $852 >>> 1;
             $854 = (($853) + 1)|0;
             _memcpy(($850|0),($851|0),($854|0))|0;
             _free($851);
            } else {
             $859 = HEAP8[$851>>0]|0;
             HEAP8[$850>>0] = $859;
             _free($851);
            }
            $864 = $863 << 1;
            $865 = $864&255;
            HEAP8[$793>>0] = $865;
            break;
           }
           $846 = ($843>>>0)<=($844>>>0);
           $847 = (($843) + 1)|0;
           $848 = (_malloc($847)|0);
           $849 = ($848|0)==(0|0);
           $or$cond$i$i$i$i$i = $846 & $849;
           if (!($or$cond$i$i$i$i$i)) {
            if ($3029) {
             $855 = (($793) + 1|0);
             $856 = $835&255;
             $857 = $856 >>> 1;
             $858 = (($857) + 1)|0;
             _memcpy(($848|0),($855|0),($858|0))|0;
            } else {
             $860 = HEAP32[$826>>2]|0;
             $861 = HEAP8[$860>>0]|0;
             HEAP8[$848>>0] = $861;
             _free($860);
            }
            $862 = $847 | 1;
            HEAP32[$793>>2] = $862;
            HEAP32[$828>>2] = $863;
            HEAP32[$826>>2] = $848;
           }
          }
         }
        } while(0);
        $866 = (($791) + -24|0);
        HEAP8[$866>>0] = $818;
        $867 = (($791) + -23|0);
        ;HEAP8[$867+0>>0]=HEAP8[$$sroa$4376+0>>0]|0;HEAP8[$867+1>>0]=HEAP8[$$sroa$4376+1>>0]|0;HEAP8[$867+2>>0]=HEAP8[$$sroa$4376+2>>0]|0;HEAP8[$867+3>>0]=HEAP8[$$sroa$4376+3>>0]|0;HEAP8[$867+4>>0]=HEAP8[$$sroa$4376+4>>0]|0;HEAP8[$867+5>>0]=HEAP8[$$sroa$4376+5>>0]|0;HEAP8[$867+6>>0]=HEAP8[$$sroa$4376+6>>0]|0;
        $868 = (($791) + -16|0);
        HEAP32[$868>>2] = $821;
        ;HEAP8[$$sroa$4376+0>>0]=0|0;HEAP8[$$sroa$4376+1>>0]=0|0;HEAP8[$$sroa$4376+2>>0]=0|0;HEAP8[$$sroa$4376+3>>0]=0|0;HEAP8[$$sroa$4376+4>>0]=0|0;HEAP8[$$sroa$4376+5>>0]=0|0;HEAP8[$$sroa$4376+6>>0]=0|0;
        if (!($805)) {
         $869 = (($67) + 8|0);
         $870 = HEAP32[$869>>2]|0;
         _free($870);
        }
        $871 = HEAP8[$65>>0]|0;
        $872 = $871 & 1;
        $873 = ($872<<24>>24)==(0);
        if (!($873)) {
         $874 = (($65) + 8|0);
         $875 = HEAP32[$874>>2]|0;
         _free($875);
        }
        $876 = HEAP8[$66>>0]|0;
        $877 = $876 & 1;
        $878 = ($877<<24>>24)==(0);
        if ($878) {
         $$0 = $787;
         STACKTOP = sp;return ($$0|0);
        }
        $879 = (($66) + 8|0);
        $880 = HEAP32[$879>>2]|0;
        _free($880);
        $$0 = $787;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $889 = HEAP8[$65>>0]|0;
      $890 = $889 & 1;
      $891 = ($890<<24>>24)==(0);
      if ($891) {
       $$2 = $$1;$$211 = $$110;
      } else {
       $892 = (($65) + 8|0);
       $893 = HEAP32[$892>>2]|0;
       _free($893);
       $$2 = $$1;$$211 = $$110;
      }
     }
     $894 = HEAP8[$66>>0]|0;
     $895 = $894 & 1;
     $896 = ($895<<24>>24)==(0);
     if ($896) {
      $$23 = $$2;$$2332 = $$211;
      ___resumeException($$23|0);
      // unreachable;
     }
     $897 = (($66) + 8|0);
     $898 = HEAP32[$897>>2]|0;
     _free($898);
     $$23 = $$2;$$2332 = $$211;
     ___resumeException($$23|0);
     // unreachable;
     break;
    }
    case 99:  {
     $899 = ($122|0)>(2);
     if (!($899)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $900 = HEAP8[$first>>0]|0;
     $901 = ($900<<24>>24)==(100);
     if (!($901)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $902 = (($first) + 1|0);
     $903 = HEAP8[$902>>0]|0;
     $904 = ($903<<24>>24)==(99);
     if (!($904)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $905 = (($first) + 2|0);
     $906 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($905,$last,$db)|0);
     $907 = ($906|0)==($905|0);
     if ($907) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $908 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($906,$last,$db)|0);
     $909 = ($908|0)==($906|0);
     if ($909) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $910 = (($db) + 4|0);
     $911 = HEAP32[$910>>2]|0;
     $912 = HEAP32[$db>>2]|0;
     $913 = $911;
     $914 = $912;
     $915 = (($913) - ($914))|0;
     $916 = (($915|0) / 24)&-1;
     $917 = ($916>>>0)<(2);
     if ($917) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $918 = (($911) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i233,$918);
     $919 = HEAP32[$910>>2]|0;
     $920 = (($919) + -24|0);
     $922 = $919;
     while(1) {
      $921 = (($922) + -24|0);
      HEAP32[$910>>2] = $921;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($921);
      $923 = HEAP32[$910>>2]|0;
      $924 = ($923|0)==($920|0);
      if ($924) {
       break;
      } else {
       $922 = $923;
      }
     }
     $925 = (($919) + -48|0);
     __THREW__ = 0;
     invoke_vii(36,($18|0),($925|0));
     $926 = __THREW__; __THREW__ = 0;
     $927 = $926&1;
     if ($927) {
      $978 = ___cxa_find_matching_catch()|0;
      $979 = tempRet0;
      $$4$i249 = $979;$$45$i248 = $978;
     } else {
      __THREW__ = 0;
      $928 = (invoke_iiiii(33,($18|0),0,(3528|0),13)|0);
      $929 = __THREW__; __THREW__ = 0;
      $930 = $929&1;
      if ($930) {
       $980 = ___cxa_find_matching_catch()|0;
       $981 = tempRet0;
       $$3$i247 = $981;$$34$i246 = $980;
      } else {
       ;HEAP32[$17+0>>2]=HEAP32[$928+0>>2]|0;HEAP32[$17+4>>2]=HEAP32[$928+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$928+8>>2]|0;
       ;HEAP32[$928+0>>2]=0|0;HEAP32[$928+4>>2]=0|0;HEAP32[$928+8>>2]=0|0;
       __THREW__ = 0;
       $931 = (invoke_iiii(32,($17|0),(2328|0),2)|0);
       $932 = __THREW__; __THREW__ = 0;
       $933 = $932&1;
       if ($933) {
        $982 = ___cxa_find_matching_catch()|0;
        $983 = tempRet0;
        $$2$i245 = $983;$$23$i244 = $982;
       } else {
        ;HEAP32[$16+0>>2]=HEAP32[$931+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$931+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$931+8>>2]|0;
        ;HEAP32[$931+0>>2]=0|0;HEAP32[$931+4>>2]=0|0;HEAP32[$931+8>>2]=0|0;
        $934 = HEAP8[$expr$i233>>0]|0;
        $935 = $934 & 1;
        $936 = ($935<<24>>24)==(0);
        if ($936) {
         $941 = (($expr$i233) + 1|0);
         $942 = $934&255;
         $943 = $942 >>> 1;
         $944 = $941;$945 = $943;
        } else {
         $937 = (($expr$i233) + 8|0);
         $938 = HEAP32[$937>>2]|0;
         $939 = (($expr$i233) + 4|0);
         $940 = HEAP32[$939>>2]|0;
         $944 = $938;$945 = $940;
        }
        __THREW__ = 0;
        $946 = (invoke_iiii(32,($16|0),($944|0),($945|0))|0);
        $947 = __THREW__; __THREW__ = 0;
        $948 = $947&1;
        do {
         if ($948) {
          $984 = ___cxa_find_matching_catch()|0;
          $985 = tempRet0;
          $$1$i243 = $985;$$12$i242 = $984;
         } else {
          ;HEAP32[$15+0>>2]=HEAP32[$946+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$946+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$946+8>>2]|0;
          ;HEAP32[$946+0>>2]=0|0;HEAP32[$946+4>>2]=0|0;HEAP32[$946+8>>2]=0|0;
          __THREW__ = 0;
          $949 = (invoke_iiii(32,($15|0),(2000|0),1)|0);
          $950 = __THREW__; __THREW__ = 0;
          $951 = $950&1;
          if ($951) {
           $986 = ___cxa_find_matching_catch()|0;
           $987 = tempRet0;
           $988 = HEAP8[$15>>0]|0;
           $989 = $988 & 1;
           $990 = ($989<<24>>24)==(0);
           if ($990) {
            $$1$i243 = $987;$$12$i242 = $986;
            break;
           }
           $991 = (($15) + 8|0);
           $992 = HEAP32[$991>>2]|0;
           _free($992);
           $$1$i243 = $987;$$12$i242 = $986;
           break;
          }
          $952 = HEAP8[$949>>0]|0;
          $953 = (($949) + 1|0);
          ;HEAP8[$$sroa$5407+0>>0]=HEAP8[$953+0>>0]|0;HEAP8[$$sroa$5407+1>>0]=HEAP8[$953+1>>0]|0;HEAP8[$$sroa$5407+2>>0]=HEAP8[$953+2>>0]|0;HEAP8[$$sroa$5407+3>>0]=HEAP8[$953+3>>0]|0;HEAP8[$$sroa$5407+4>>0]=HEAP8[$953+4>>0]|0;HEAP8[$$sroa$5407+5>>0]=HEAP8[$953+5>>0]|0;HEAP8[$$sroa$5407+6>>0]=HEAP8[$953+6>>0]|0;
          $954 = (($949) + 8|0);
          $955 = HEAP32[$954>>2]|0;
          ;HEAP32[$949+0>>2]=0|0;HEAP32[$949+4>>2]=0|0;HEAP32[$949+8>>2]=0|0;
          HEAP8[$14>>0] = $952;
          $956 = (($14) + 1|0);
          ;HEAP8[$956+0>>0]=HEAP8[$$sroa$5407+0>>0]|0;HEAP8[$956+1>>0]=HEAP8[$$sroa$5407+1>>0]|0;HEAP8[$956+2>>0]=HEAP8[$$sroa$5407+2>>0]|0;HEAP8[$956+3>>0]=HEAP8[$$sroa$5407+3>>0]|0;HEAP8[$956+4>>0]=HEAP8[$$sroa$5407+4>>0]|0;HEAP8[$956+5>>0]=HEAP8[$$sroa$5407+5>>0]|0;HEAP8[$956+6>>0]=HEAP8[$$sroa$5407+6>>0]|0;
          $957 = (($14) + 8|0);
          HEAP32[$957>>2] = $955;
          ;HEAP8[$$sroa$5407+0>>0]=0|0;HEAP8[$$sroa$5407+1>>0]=0|0;HEAP8[$$sroa$5407+2>>0]=0|0;HEAP8[$$sroa$5407+3>>0]=0|0;HEAP8[$$sroa$5407+4>>0]=0|0;HEAP8[$$sroa$5407+5>>0]=0|0;HEAP8[$$sroa$5407+6>>0]=0|0;
          $958 = (($14) + 12|0);
          ;HEAP32[$958+0>>2]=0|0;HEAP32[$958+4>>2]=0|0;HEAP32[$958+8>>2]=0|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($925,$14);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
          $$pre435 = HEAP8[$15>>0]|0;
          $phitmp482 = $$pre435 & 1;
          $phitmp483 = ($phitmp482<<24>>24)==(0);
          if (!($phitmp483)) {
           $959 = (($15) + 8|0);
           $960 = HEAP32[$959>>2]|0;
           _free($960);
          }
          $961 = HEAP8[$16>>0]|0;
          $962 = $961 & 1;
          $963 = ($962<<24>>24)==(0);
          if (!($963)) {
           $964 = (($16) + 8|0);
           $965 = HEAP32[$964>>2]|0;
           _free($965);
          }
          $966 = HEAP8[$17>>0]|0;
          $967 = $966 & 1;
          $968 = ($967<<24>>24)==(0);
          if (!($968)) {
           $969 = (($17) + 8|0);
           $970 = HEAP32[$969>>2]|0;
           _free($970);
          }
          $971 = HEAP8[$18>>0]|0;
          $972 = $971 & 1;
          $973 = ($972<<24>>24)==(0);
          if (!($973)) {
           $974 = (($18) + 8|0);
           $975 = HEAP32[$974>>2]|0;
           _free($975);
          }
          if ($936) {
           $$0 = $908;
           STACKTOP = sp;return ($$0|0);
          }
          $976 = (($expr$i233) + 8|0);
          $977 = HEAP32[$976>>2]|0;
          _free($977);
          $$0 = $908;
          STACKTOP = sp;return ($$0|0);
         }
        } while(0);
        $993 = HEAP8[$16>>0]|0;
        $994 = $993 & 1;
        $995 = ($994<<24>>24)==(0);
        if ($995) {
         $$2$i245 = $$1$i243;$$23$i244 = $$12$i242;
        } else {
         $996 = (($16) + 8|0);
         $997 = HEAP32[$996>>2]|0;
         _free($997);
         $$2$i245 = $$1$i243;$$23$i244 = $$12$i242;
        }
       }
       $998 = HEAP8[$17>>0]|0;
       $999 = $998 & 1;
       $1000 = ($999<<24>>24)==(0);
       if ($1000) {
        $$3$i247 = $$2$i245;$$34$i246 = $$23$i244;
       } else {
        $1001 = (($17) + 8|0);
        $1002 = HEAP32[$1001>>2]|0;
        _free($1002);
        $$3$i247 = $$2$i245;$$34$i246 = $$23$i244;
       }
      }
      $1003 = HEAP8[$18>>0]|0;
      $1004 = $1003 & 1;
      $1005 = ($1004<<24>>24)==(0);
      if ($1005) {
       $$4$i249 = $$3$i247;$$45$i248 = $$34$i246;
      } else {
       $1006 = (($18) + 8|0);
       $1007 = HEAP32[$1006>>2]|0;
       _free($1007);
       $$4$i249 = $$3$i247;$$45$i248 = $$34$i246;
      }
     }
     $1008 = HEAP8[$expr$i233>>0]|0;
     $1009 = $1008 & 1;
     $1010 = ($1009<<24>>24)==(0);
     if ($1010) {
      ___resumeException($$45$i248|0);
      // unreachable;
     }
     $1011 = (($expr$i233) + 8|0);
     $1012 = HEAP32[$1011>>2]|0;
     _free($1012);
     ___resumeException($$45$i248|0);
     // unreachable;
     break;
    }
    case 101:  {
     $1013 = (($first) + 2|0);
     HEAP8[$68>>0] = 2;
     $1014 = (($68) + 1|0);
     HEAP8[$1014>>0] = 42;
     $1015 = (($68) + 2|0);
     HEAP8[$1015>>0] = 0;
     __THREW__ = 0;
     $1016 = (invoke_iiiii(49,($1013|0),($last|0),($68|0),($db|0))|0);
     $1017 = __THREW__; __THREW__ = 0;
     $1018 = $1017&1;
     if ($1018) {
      $1020 = ___cxa_find_matching_catch()|0;
      $1021 = tempRet0;
      $$23 = $1020;$$2332 = $1021;
      ___resumeException($$23|0);
      // unreachable;
     } else {
      $1019 = ($1016|0)==($1013|0);
      $first$39 = $1019 ? $first : $1016;
      $$0 = $first$39;
      STACKTOP = sp;return ($$0|0);
     }
     break;
    }
    case 108:  {
     $1022 = (($t$0) + 2|0);
     $1023 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1022,$last,$db)|0);
     $1024 = ($1023|0)==($1022|0);
     if ($1024) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1025 = HEAP32[$db>>2]|0;
     $1026 = (($db) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = ($1025|0)==($1027|0);
     if ($1028) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1029 = (($1027) + -24|0);
     if ($parsed_gs$0$off0) {
      HEAP8[$70>>0] = 4;
      $1030 = (($70) + 1|0);
      HEAP8[$1030>>0]=14906&255;HEAP8[$1030+1>>0]=14906>>8;
      $1031 = (($70) + 3|0);
      HEAP8[$1031>>0] = 0;
     } else {
      ;HEAP32[$70+0>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;
     }
     __THREW__ = 0;
     $1032 = (invoke_iiii(32,($70|0),(2176|0),7)|0);
     $1033 = __THREW__; __THREW__ = 0;
     $1034 = $1033&1;
     if ($1034) {
      $1117 = ___cxa_find_matching_catch()|0;
      $1118 = tempRet0;
      $$5 = $1117;$$514 = $1118;
     } else {
      ;HEAP32[$69+0>>2]=HEAP32[$1032+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$1032+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$1032+8>>2]|0;
      ;HEAP32[$1032+0>>2]=0|0;HEAP32[$1032+4>>2]=0|0;HEAP32[$1032+8>>2]=0|0;
      $1035 = HEAP32[$1026>>2]|0;
      $1036 = (($1035) + -24|0);
      __THREW__ = 0;
      invoke_vii(36,($71|0),($1036|0));
      $1037 = __THREW__; __THREW__ = 0;
      $1038 = $1037&1;
      do {
       if ($1038) {
        $1119 = ___cxa_find_matching_catch()|0;
        $1120 = tempRet0;
        $$4 = $1119;$$413 = $1120;
       } else {
        $1039 = HEAP8[$71>>0]|0;
        $1040 = $1039 & 1;
        $1041 = ($1040<<24>>24)==(0);
        if ($1041) {
         $1046 = (($71) + 1|0);
         $1047 = $1039&255;
         $1048 = $1047 >>> 1;
         $1049 = $1046;$1050 = $1048;
        } else {
         $1042 = (($71) + 8|0);
         $1043 = HEAP32[$1042>>2]|0;
         $1044 = (($71) + 4|0);
         $1045 = HEAP32[$1044>>2]|0;
         $1049 = $1043;$1050 = $1045;
        }
        __THREW__ = 0;
        $1051 = (invoke_iiii(32,($69|0),($1049|0),($1050|0))|0);
        $1052 = __THREW__; __THREW__ = 0;
        $1053 = $1052&1;
        if ($1053) {
         $1121 = ___cxa_find_matching_catch()|0;
         $1122 = tempRet0;
         if ($1041) {
          $$4 = $1121;$$413 = $1122;
          break;
         }
         $1123 = (($71) + 8|0);
         $1124 = HEAP32[$1123>>2]|0;
         _free($1124);
         $$4 = $1121;$$413 = $1122;
         break;
        }
        $1054 = HEAP8[$1051>>0]|0;
        $1055 = (($1051) + 1|0);
        ;HEAP8[$$sroa$4373+0>>0]=HEAP8[$1055+0>>0]|0;HEAP8[$$sroa$4373+1>>0]=HEAP8[$1055+1>>0]|0;HEAP8[$$sroa$4373+2>>0]=HEAP8[$1055+2>>0]|0;HEAP8[$$sroa$4373+3>>0]=HEAP8[$1055+3>>0]|0;HEAP8[$$sroa$4373+4>>0]=HEAP8[$1055+4>>0]|0;HEAP8[$$sroa$4373+5>>0]=HEAP8[$1055+5>>0]|0;HEAP8[$$sroa$4373+6>>0]=HEAP8[$1055+6>>0]|0;
        $1056 = (($1051) + 8|0);
        $1057 = HEAP32[$1056>>2]|0;
        ;HEAP32[$1051+0>>2]=0|0;HEAP32[$1051+4>>2]=0|0;HEAP32[$1051+8>>2]=0|0;
        $1058 = HEAP8[$1029>>0]|0;
        $1059 = $1058 & 1;
        $1060 = ($1059<<24>>24)==(0);
        do {
         if ($1060) {
          $1061 = (($1029) + 1|0);
          HEAP8[$1061>>0] = 0;
          HEAP8[$1029>>0] = 0;
         } else {
          $1062 = (($1027) + -16|0);
          $1063 = HEAP32[$1062>>2]|0;
          HEAP8[$1063>>0] = 0;
          $1064 = (($1027) + -20|0);
          HEAP32[$1064>>2] = 0;
          $$pre$i$i$i77 = HEAP8[$1029>>0]|0;
          $1065 = $$pre$i$i$i77 & 1;
          $1066 = ($1065<<24>>24)==(0);
          if ($1066) {
           $1071 = $$pre$i$i$i77;$1080 = 10;
          } else {
           $1067 = HEAP32[$1029>>2]|0;
           $1068 = $1067 & -2;
           $phitmp$i$i$i$i$i$i79 = (($1068) + -1)|0;
           $1069 = $1067&255;
           $1071 = $1069;$1080 = $phitmp$i$i$i$i$i$i79;
          }
          $1070 = $1071 & 1;
          $1072 = ($1070<<24>>24)==(0);
          if ($1072) {
           $1073 = $1071&255;
           $1074 = $1073 >>> 1;
           $1075 = ($1071&255)<(22);
           if ($1075) {
            $1079 = 10;$1099 = $1074;$3030 = 1;
           } else {
            $1076 = (($1074) + 16)|0;
            $1077 = $1076 & 240;
            $phitmp$i2$i$i$i$i$i82 = (($1077) + -1)|0;
            $1079 = $phitmp$i2$i$i$i$i$i82;$1099 = $1074;$3030 = 1;
           }
          } else {
           $1079 = 10;$1099 = 0;$3030 = 0;
          }
          $1078 = ($1079|0)==($1080|0);
          if (!($1078)) {
           $1081 = ($1079|0)==(10);
           if ($1081) {
            $1086 = (($1029) + 1|0);
            $1087 = HEAP32[$1062>>2]|0;
            if ($3030) {
             $1088 = $1071&255;
             $1089 = $1088 >>> 1;
             $1090 = (($1089) + 1)|0;
             _memcpy(($1086|0),($1087|0),($1090|0))|0;
             _free($1087);
            } else {
             $1095 = HEAP8[$1087>>0]|0;
             HEAP8[$1086>>0] = $1095;
             _free($1087);
            }
            $1100 = $1099 << 1;
            $1101 = $1100&255;
            HEAP8[$1029>>0] = $1101;
            break;
           }
           $1082 = ($1079>>>0)<=($1080>>>0);
           $1083 = (($1079) + 1)|0;
           $1084 = (_malloc($1083)|0);
           $1085 = ($1084|0)==(0|0);
           $or$cond$i$i$i$i$i84 = $1082 & $1085;
           if (!($or$cond$i$i$i$i$i84)) {
            if ($3030) {
             $1091 = (($1029) + 1|0);
             $1092 = $1071&255;
             $1093 = $1092 >>> 1;
             $1094 = (($1093) + 1)|0;
             _memcpy(($1084|0),($1091|0),($1094|0))|0;
            } else {
             $1096 = HEAP32[$1062>>2]|0;
             $1097 = HEAP8[$1096>>0]|0;
             HEAP8[$1084>>0] = $1097;
             _free($1096);
            }
            $1098 = $1083 | 1;
            HEAP32[$1029>>2] = $1098;
            HEAP32[$1064>>2] = $1099;
            HEAP32[$1062>>2] = $1084;
           }
          }
         }
        } while(0);
        $1102 = (($1027) + -24|0);
        HEAP8[$1102>>0] = $1054;
        $1103 = (($1027) + -23|0);
        ;HEAP8[$1103+0>>0]=HEAP8[$$sroa$4373+0>>0]|0;HEAP8[$1103+1>>0]=HEAP8[$$sroa$4373+1>>0]|0;HEAP8[$1103+2>>0]=HEAP8[$$sroa$4373+2>>0]|0;HEAP8[$1103+3>>0]=HEAP8[$$sroa$4373+3>>0]|0;HEAP8[$1103+4>>0]=HEAP8[$$sroa$4373+4>>0]|0;HEAP8[$1103+5>>0]=HEAP8[$$sroa$4373+5>>0]|0;HEAP8[$1103+6>>0]=HEAP8[$$sroa$4373+6>>0]|0;
        $1104 = (($1027) + -16|0);
        HEAP32[$1104>>2] = $1057;
        ;HEAP8[$$sroa$4373+0>>0]=0|0;HEAP8[$$sroa$4373+1>>0]=0|0;HEAP8[$$sroa$4373+2>>0]=0|0;HEAP8[$$sroa$4373+3>>0]=0|0;HEAP8[$$sroa$4373+4>>0]=0|0;HEAP8[$$sroa$4373+5>>0]=0|0;HEAP8[$$sroa$4373+6>>0]=0|0;
        if (!($1041)) {
         $1105 = (($71) + 8|0);
         $1106 = HEAP32[$1105>>2]|0;
         _free($1106);
        }
        $1107 = HEAP8[$69>>0]|0;
        $1108 = $1107 & 1;
        $1109 = ($1108<<24>>24)==(0);
        if (!($1109)) {
         $1110 = (($69) + 8|0);
         $1111 = HEAP32[$1110>>2]|0;
         _free($1111);
        }
        $1112 = HEAP8[$70>>0]|0;
        $1113 = $1112 & 1;
        $1114 = ($1113<<24>>24)==(0);
        if ($1114) {
         $$0 = $1023;
         STACKTOP = sp;return ($$0|0);
        }
        $1115 = (($70) + 8|0);
        $1116 = HEAP32[$1115>>2]|0;
        _free($1116);
        $$0 = $1023;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $1125 = HEAP8[$69>>0]|0;
      $1126 = $1125 & 1;
      $1127 = ($1126<<24>>24)==(0);
      if ($1127) {
       $$5 = $$4;$$514 = $$413;
      } else {
       $1128 = (($69) + 8|0);
       $1129 = HEAP32[$1128>>2]|0;
       _free($1129);
       $$5 = $$4;$$514 = $$413;
      }
     }
     $1130 = HEAP8[$70>>0]|0;
     $1131 = $1130 & 1;
     $1132 = ($1131<<24>>24)==(0);
     if ($1132) {
      $$23 = $$5;$$2332 = $$514;
      ___resumeException($$23|0);
      // unreachable;
     }
     $1133 = (($70) + 8|0);
     $1134 = HEAP32[$1133>>2]|0;
     _free($1134);
     $$23 = $$5;$$2332 = $$514;
     ___resumeException($$23|0);
     // unreachable;
     break;
    }
    case 110:  {
     $1135 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$0 = $1135;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 115:  {
     $1136 = ($122|0)>(2);
     if (!($1136)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1137 = HEAP8[$first>>0]|0;
     $1138 = ($1137<<24>>24)==(100);
     if (!($1138)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1139 = (($first) + 1|0);
     $1140 = HEAP8[$1139>>0]|0;
     $1141 = ($1140<<24>>24)==(115);
     if (!($1141)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1142 = (($first) + 2|0);
     $1143 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1142,$last,$db)|0);
     $1144 = ($1143|0)==($1142|0);
     if ($1144) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1145 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1143,$last,$db)|0);
     $1146 = ($1145|0)==($1143|0);
     if ($1146) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1147 = (($db) + 4|0);
     $1148 = HEAP32[$1147>>2]|0;
     $1149 = HEAP32[$db>>2]|0;
     $1150 = $1148;
     $1151 = $1149;
     $1152 = (($1150) - ($1151))|0;
     $1153 = (($1152|0) / 24)&-1;
     $1154 = ($1153>>>0)<(2);
     if ($1154) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1155 = (($1148) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i225,$1155);
     $1156 = HEAP32[$1147>>2]|0;
     $1157 = (($1156) + -24|0);
     $1159 = $1156;
     while(1) {
      $1158 = (($1159) + -24|0);
      HEAP32[$1147>>2] = $1158;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1158);
      $1160 = HEAP32[$1147>>2]|0;
      $1161 = ($1160|0)==($1157|0);
      if ($1161) {
       break;
      } else {
       $1159 = $1160;
      }
     }
     __THREW__ = 0;
     invoke_viii(46,($19|0),(2400|0),($expr$i225|0));
     $1162 = __THREW__; __THREW__ = 0;
     $1163 = $1162&1;
     do {
      if ($1163) {
       $1189 = ___cxa_find_matching_catch()|0;
       $1190 = tempRet0;
       $$0$i231 = $1190;$$01$i230 = $1189;
      } else {
       $1164 = (($1156) + -48|0);
       $1165 = HEAP8[$19>>0]|0;
       $1166 = $1165 & 1;
       $1167 = ($1166<<24>>24)==(0);
       if ($1167) {
        $1172 = (($19) + 1|0);
        $1173 = $1165&255;
        $1174 = $1173 >>> 1;
        $1175 = $1172;$1176 = $1174;
       } else {
        $1168 = (($19) + 8|0);
        $1169 = HEAP32[$1168>>2]|0;
        $1170 = (($19) + 4|0);
        $1171 = HEAP32[$1170>>2]|0;
        $1175 = $1169;$1176 = $1171;
       }
       __THREW__ = 0;
       (invoke_iiii(32,($1164|0),($1175|0),($1176|0))|0);
       $1177 = __THREW__; __THREW__ = 0;
       $1178 = $1177&1;
       if ($1178) {
        $1191 = ___cxa_find_matching_catch()|0;
        $1192 = tempRet0;
        $1193 = HEAP8[$19>>0]|0;
        $1194 = $1193 & 1;
        $1195 = ($1194<<24>>24)==(0);
        if ($1195) {
         $$0$i231 = $1192;$$01$i230 = $1191;
         break;
        }
        $1196 = (($19) + 8|0);
        $1197 = HEAP32[$1196>>2]|0;
        _free($1197);
        $$0$i231 = $1192;$$01$i230 = $1191;
        break;
       }
       $1179 = HEAP8[$19>>0]|0;
       $1180 = $1179 & 1;
       $1181 = ($1180<<24>>24)==(0);
       if (!($1181)) {
        $1182 = (($19) + 8|0);
        $1183 = HEAP32[$1182>>2]|0;
        _free($1183);
       }
       $1184 = HEAP8[$expr$i225>>0]|0;
       $1185 = $1184 & 1;
       $1186 = ($1185<<24>>24)==(0);
       if ($1186) {
        $$0 = $1145;
        STACKTOP = sp;return ($$0|0);
       }
       $1187 = (($expr$i225) + 8|0);
       $1188 = HEAP32[$1187>>2]|0;
       _free($1188);
       $$0 = $1145;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $1198 = HEAP8[$expr$i225>>0]|0;
     $1199 = $1198 & 1;
     $1200 = ($1199<<24>>24)==(0);
     if ($1200) {
      ___resumeException($$01$i230|0);
      // unreachable;
     }
     $1201 = (($expr$i225) + 8|0);
     $1202 = HEAP32[$1201>>2]|0;
     _free($1202);
     ___resumeException($$01$i230|0);
     // unreachable;
     break;
    }
    case 116:  {
     $1203 = ($122|0)>(2);
     if (!($1203)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1204 = HEAP8[$first>>0]|0;
     $1205 = ($1204<<24>>24)==(100);
     if (!($1205)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1206 = (($first) + 1|0);
     $1207 = HEAP8[$1206>>0]|0;
     $1208 = ($1207<<24>>24)==(116);
     if (!($1208)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1209 = (($first) + 2|0);
     $1210 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1209,$last,$db)|0);
     $1211 = ($1210|0)==($1209|0);
     if ($1211) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1212 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($1210,$last,$db)|0);
     $1213 = ($1212|0)==($1210|0);
     if ($1213) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1214 = (($db) + 4|0);
     $1215 = HEAP32[$1214>>2]|0;
     $1216 = HEAP32[$db>>2]|0;
     $1217 = $1215;
     $1218 = $1216;
     $1219 = (($1217) - ($1218))|0;
     $1220 = (($1219|0) / 24)&-1;
     $1221 = ($1220>>>0)<(2);
     if ($1221) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $1222 = (($1215) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i,$1222);
     $1223 = HEAP32[$1214>>2]|0;
     $1224 = (($1223) + -24|0);
     $1226 = $1223;
     while(1) {
      $1225 = (($1226) + -24|0);
      HEAP32[$1214>>2] = $1225;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1225);
      $1227 = HEAP32[$1214>>2]|0;
      $1228 = ($1227|0)==($1224|0);
      if ($1228) {
       break;
      } else {
       $1226 = $1227;
      }
     }
     __THREW__ = 0;
     invoke_viii(46,($20|0),(6592|0),($name$i|0));
     $1229 = __THREW__; __THREW__ = 0;
     $1230 = $1229&1;
     do {
      if ($1230) {
       $1256 = ___cxa_find_matching_catch()|0;
       $1257 = tempRet0;
       $$0$i223 = $1257;$$01$i222 = $1256;
      } else {
       $1231 = (($1223) + -48|0);
       $1232 = HEAP8[$20>>0]|0;
       $1233 = $1232 & 1;
       $1234 = ($1233<<24>>24)==(0);
       if ($1234) {
        $1239 = (($20) + 1|0);
        $1240 = $1232&255;
        $1241 = $1240 >>> 1;
        $1242 = $1239;$1243 = $1241;
       } else {
        $1235 = (($20) + 8|0);
        $1236 = HEAP32[$1235>>2]|0;
        $1237 = (($20) + 4|0);
        $1238 = HEAP32[$1237>>2]|0;
        $1242 = $1236;$1243 = $1238;
       }
       __THREW__ = 0;
       (invoke_iiii(32,($1231|0),($1242|0),($1243|0))|0);
       $1244 = __THREW__; __THREW__ = 0;
       $1245 = $1244&1;
       if ($1245) {
        $1258 = ___cxa_find_matching_catch()|0;
        $1259 = tempRet0;
        $1260 = HEAP8[$20>>0]|0;
        $1261 = $1260 & 1;
        $1262 = ($1261<<24>>24)==(0);
        if ($1262) {
         $$0$i223 = $1259;$$01$i222 = $1258;
         break;
        }
        $1263 = (($20) + 8|0);
        $1264 = HEAP32[$1263>>2]|0;
        _free($1264);
        $$0$i223 = $1259;$$01$i222 = $1258;
        break;
       }
       $1246 = HEAP8[$20>>0]|0;
       $1247 = $1246 & 1;
       $1248 = ($1247<<24>>24)==(0);
       if (!($1248)) {
        $1249 = (($20) + 8|0);
        $1250 = HEAP32[$1249>>2]|0;
        _free($1250);
       }
       $1251 = HEAP8[$name$i>>0]|0;
       $1252 = $1251 & 1;
       $1253 = ($1252<<24>>24)==(0);
       if ($1253) {
        $$0 = $1212;
        STACKTOP = sp;return ($$0|0);
       }
       $1254 = (($name$i) + 8|0);
       $1255 = HEAP32[$1254>>2]|0;
       _free($1255);
       $$0 = $1212;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $1265 = HEAP8[$name$i>>0]|0;
     $1266 = $1265 & 1;
     $1267 = ($1266<<24>>24)==(0);
     if ($1267) {
      ___resumeException($$01$i222|0);
      // unreachable;
     }
     $1268 = (($name$i) + 8|0);
     $1269 = HEAP32[$1268>>2]|0;
     _free($1269);
     ___resumeException($$01$i222|0);
     // unreachable;
     break;
    }
    case 118:  {
     $1270 = (($first) + 2|0);
     HEAP8[$72>>0] = 2;
     $1271 = (($72) + 1|0);
     HEAP8[$1271>>0] = 47;
     $1272 = (($72) + 2|0);
     HEAP8[$1272>>0] = 0;
     __THREW__ = 0;
     $1273 = (invoke_iiiii(48,($1270|0),($last|0),($72|0),($db|0))|0);
     $1274 = __THREW__; __THREW__ = 0;
     $1275 = $1274&1;
     if ($1275) {
      $1277 = ___cxa_find_matching_catch()|0;
      $1278 = tempRet0;
      $$23 = $1277;$$2332 = $1278;
      ___resumeException($$23|0);
      // unreachable;
     } else {
      $1276 = ($1273|0)==($1270|0);
      $first$40 = $1276 ? $first : $1273;
      $$0 = $first$40;
      STACKTOP = sp;return ($$0|0);
     }
     break;
    }
    case 86:  {
     $1279 = (($first) + 2|0);
     HEAP8[$73>>0] = 4;
     $1280 = (($73) + 1|0);
     HEAP8[$1280>>0]=15663&255;HEAP8[$1280+1>>0]=15663>>8;
     $1281 = (($73) + 3|0);
     HEAP8[$1281>>0] = 0;
     __THREW__ = 0;
     $1282 = (invoke_iiiii(48,($1279|0),($last|0),($73|0),($db|0))|0);
     $1283 = __THREW__; __THREW__ = 0;
     $1284 = $1283&1;
     if ($1284) {
      $1286 = ___cxa_find_matching_catch()|0;
      $1287 = tempRet0;
      $$23 = $1286;$$2332 = $1287;
      ___resumeException($$23|0);
      // unreachable;
     } else {
      $1285 = ($1282|0)==($1279|0);
      $first$41 = $1285 ? $first : $1282;
      $$0 = $first$41;
      STACKTOP = sp;return ($$0|0);
     }
     break;
    }
    default: {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    }
   } while(0);
   break;
  }
  case 102:  {
   $135 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $$0 = $135;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 99:  {
   $366 = (($t$0) + 1|0);
   $367 = HEAP8[$366>>0]|0;
   $368 = $367 << 24 >> 24;
   switch ($368|0) {
   case 99:  {
    $369 = ($122|0)>(2);
    if (!($369)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $370 = HEAP8[$first>>0]|0;
    $371 = ($370<<24>>24)==(99);
    if (!($371)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $372 = (($first) + 1|0);
    $373 = HEAP8[$372>>0]|0;
    $374 = ($373<<24>>24)==(99);
    if (!($374)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $375 = (($first) + 2|0);
    $376 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($375,$last,$db)|0);
    $377 = ($376|0)==($375|0);
    if ($377) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $378 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($376,$last,$db)|0);
    $379 = ($378|0)==($376|0);
    if ($379) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $380 = (($db) + 4|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = HEAP32[$db>>2]|0;
    $383 = $381;
    $384 = $382;
    $385 = (($383) - ($384))|0;
    $386 = (($385|0) / 24)&-1;
    $387 = ($386>>>0)<(2);
    if ($387) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $388 = (($381) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i299,$388);
    $389 = HEAP32[$380>>2]|0;
    $390 = (($389) + -24|0);
    $392 = $389;
    while(1) {
     $391 = (($392) + -24|0);
     HEAP32[$380>>2] = $391;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($391);
     $393 = HEAP32[$380>>2]|0;
     $394 = ($393|0)==($390|0);
     if ($394) {
      break;
     } else {
      $392 = $393;
     }
    }
    $395 = (($389) + -48|0);
    __THREW__ = 0;
    invoke_vii(36,($8|0),($395|0));
    $396 = __THREW__; __THREW__ = 0;
    $397 = $396&1;
    if ($397) {
     $448 = ___cxa_find_matching_catch()|0;
     $449 = tempRet0;
     $$4$i315 = $449;$$45$i314 = $448;
    } else {
     __THREW__ = 0;
     $398 = (invoke_iiiii(33,($8|0),0,(3688|0),11)|0);
     $399 = __THREW__; __THREW__ = 0;
     $400 = $399&1;
     if ($400) {
      $450 = ___cxa_find_matching_catch()|0;
      $451 = tempRet0;
      $$3$i313 = $451;$$34$i312 = $450;
     } else {
      ;HEAP32[$7+0>>2]=HEAP32[$398+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$398+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$398+8>>2]|0;
      ;HEAP32[$398+0>>2]=0|0;HEAP32[$398+4>>2]=0|0;HEAP32[$398+8>>2]=0|0;
      __THREW__ = 0;
      $401 = (invoke_iiii(32,($7|0),(2328|0),2)|0);
      $402 = __THREW__; __THREW__ = 0;
      $403 = $402&1;
      if ($403) {
       $452 = ___cxa_find_matching_catch()|0;
       $453 = tempRet0;
       $$2$i311 = $453;$$23$i310 = $452;
      } else {
       ;HEAP32[$6+0>>2]=HEAP32[$401+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$401+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$401+8>>2]|0;
       ;HEAP32[$401+0>>2]=0|0;HEAP32[$401+4>>2]=0|0;HEAP32[$401+8>>2]=0|0;
       $404 = HEAP8[$expr$i299>>0]|0;
       $405 = $404 & 1;
       $406 = ($405<<24>>24)==(0);
       if ($406) {
        $411 = (($expr$i299) + 1|0);
        $412 = $404&255;
        $413 = $412 >>> 1;
        $414 = $411;$415 = $413;
       } else {
        $407 = (($expr$i299) + 8|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = (($expr$i299) + 4|0);
        $410 = HEAP32[$409>>2]|0;
        $414 = $408;$415 = $410;
       }
       __THREW__ = 0;
       $416 = (invoke_iiii(32,($6|0),($414|0),($415|0))|0);
       $417 = __THREW__; __THREW__ = 0;
       $418 = $417&1;
       do {
        if ($418) {
         $454 = ___cxa_find_matching_catch()|0;
         $455 = tempRet0;
         $$1$i309 = $455;$$12$i308 = $454;
        } else {
         ;HEAP32[$5+0>>2]=HEAP32[$416+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$416+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$416+8>>2]|0;
         ;HEAP32[$416+0>>2]=0|0;HEAP32[$416+4>>2]=0|0;HEAP32[$416+8>>2]=0|0;
         __THREW__ = 0;
         $419 = (invoke_iiii(32,($5|0),(2000|0),1)|0);
         $420 = __THREW__; __THREW__ = 0;
         $421 = $420&1;
         if ($421) {
          $456 = ___cxa_find_matching_catch()|0;
          $457 = tempRet0;
          $458 = HEAP8[$5>>0]|0;
          $459 = $458 & 1;
          $460 = ($459<<24>>24)==(0);
          if ($460) {
           $$1$i309 = $457;$$12$i308 = $456;
           break;
          }
          $461 = (($5) + 8|0);
          $462 = HEAP32[$461>>2]|0;
          _free($462);
          $$1$i309 = $457;$$12$i308 = $456;
          break;
         }
         $422 = HEAP8[$419>>0]|0;
         $423 = (($419) + 1|0);
         ;HEAP8[$$sroa$5416+0>>0]=HEAP8[$423+0>>0]|0;HEAP8[$$sroa$5416+1>>0]=HEAP8[$423+1>>0]|0;HEAP8[$$sroa$5416+2>>0]=HEAP8[$423+2>>0]|0;HEAP8[$$sroa$5416+3>>0]=HEAP8[$423+3>>0]|0;HEAP8[$$sroa$5416+4>>0]=HEAP8[$423+4>>0]|0;HEAP8[$$sroa$5416+5>>0]=HEAP8[$423+5>>0]|0;HEAP8[$$sroa$5416+6>>0]=HEAP8[$423+6>>0]|0;
         $424 = (($419) + 8|0);
         $425 = HEAP32[$424>>2]|0;
         ;HEAP32[$419+0>>2]=0|0;HEAP32[$419+4>>2]=0|0;HEAP32[$419+8>>2]=0|0;
         HEAP8[$4>>0] = $422;
         $426 = (($4) + 1|0);
         ;HEAP8[$426+0>>0]=HEAP8[$$sroa$5416+0>>0]|0;HEAP8[$426+1>>0]=HEAP8[$$sroa$5416+1>>0]|0;HEAP8[$426+2>>0]=HEAP8[$$sroa$5416+2>>0]|0;HEAP8[$426+3>>0]=HEAP8[$$sroa$5416+3>>0]|0;HEAP8[$426+4>>0]=HEAP8[$$sroa$5416+4>>0]|0;HEAP8[$426+5>>0]=HEAP8[$$sroa$5416+5>>0]|0;HEAP8[$426+6>>0]=HEAP8[$$sroa$5416+6>>0]|0;
         $427 = (($4) + 8|0);
         HEAP32[$427>>2] = $425;
         ;HEAP8[$$sroa$5416+0>>0]=0|0;HEAP8[$$sroa$5416+1>>0]=0|0;HEAP8[$$sroa$5416+2>>0]=0|0;HEAP8[$$sroa$5416+3>>0]=0|0;HEAP8[$$sroa$5416+4>>0]=0|0;HEAP8[$$sroa$5416+5>>0]=0|0;HEAP8[$$sroa$5416+6>>0]=0|0;
         $428 = (($4) + 12|0);
         ;HEAP32[$428+0>>2]=0|0;HEAP32[$428+4>>2]=0|0;HEAP32[$428+8>>2]=0|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($395,$4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         $$pre432 = HEAP8[$5>>0]|0;
         $phitmp486 = $$pre432 & 1;
         $phitmp487 = ($phitmp486<<24>>24)==(0);
         if (!($phitmp487)) {
          $429 = (($5) + 8|0);
          $430 = HEAP32[$429>>2]|0;
          _free($430);
         }
         $431 = HEAP8[$6>>0]|0;
         $432 = $431 & 1;
         $433 = ($432<<24>>24)==(0);
         if (!($433)) {
          $434 = (($6) + 8|0);
          $435 = HEAP32[$434>>2]|0;
          _free($435);
         }
         $436 = HEAP8[$7>>0]|0;
         $437 = $436 & 1;
         $438 = ($437<<24>>24)==(0);
         if (!($438)) {
          $439 = (($7) + 8|0);
          $440 = HEAP32[$439>>2]|0;
          _free($440);
         }
         $441 = HEAP8[$8>>0]|0;
         $442 = $441 & 1;
         $443 = ($442<<24>>24)==(0);
         if (!($443)) {
          $444 = (($8) + 8|0);
          $445 = HEAP32[$444>>2]|0;
          _free($445);
         }
         if ($406) {
          $$0 = $378;
          STACKTOP = sp;return ($$0|0);
         }
         $446 = (($expr$i299) + 8|0);
         $447 = HEAP32[$446>>2]|0;
         _free($447);
         $$0 = $378;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $463 = HEAP8[$6>>0]|0;
       $464 = $463 & 1;
       $465 = ($464<<24>>24)==(0);
       if ($465) {
        $$2$i311 = $$1$i309;$$23$i310 = $$12$i308;
       } else {
        $466 = (($6) + 8|0);
        $467 = HEAP32[$466>>2]|0;
        _free($467);
        $$2$i311 = $$1$i309;$$23$i310 = $$12$i308;
       }
      }
      $468 = HEAP8[$7>>0]|0;
      $469 = $468 & 1;
      $470 = ($469<<24>>24)==(0);
      if ($470) {
       $$3$i313 = $$2$i311;$$34$i312 = $$23$i310;
      } else {
       $471 = (($7) + 8|0);
       $472 = HEAP32[$471>>2]|0;
       _free($472);
       $$3$i313 = $$2$i311;$$34$i312 = $$23$i310;
      }
     }
     $473 = HEAP8[$8>>0]|0;
     $474 = $473 & 1;
     $475 = ($474<<24>>24)==(0);
     if ($475) {
      $$4$i315 = $$3$i313;$$45$i314 = $$34$i312;
     } else {
      $476 = (($8) + 8|0);
      $477 = HEAP32[$476>>2]|0;
      _free($477);
      $$4$i315 = $$3$i313;$$45$i314 = $$34$i312;
     }
    }
    $478 = HEAP8[$expr$i299>>0]|0;
    $479 = $478 & 1;
    $480 = ($479<<24>>24)==(0);
    if ($480) {
     ___resumeException($$45$i314|0);
     // unreachable;
    }
    $481 = (($expr$i299) + 8|0);
    $482 = HEAP32[$481>>2]|0;
    _free($482);
    ___resumeException($$45$i314|0);
    // unreachable;
    break;
   }
   case 111:  {
    $618 = (($first) + 2|0);
    HEAP8[$64>>0] = 2;
    $619 = (($64) + 1|0);
    HEAP8[$619>>0] = 126;
    $620 = (($64) + 2|0);
    HEAP8[$620>>0] = 0;
    __THREW__ = 0;
    $621 = (invoke_iiiii(49,($618|0),($last|0),($64|0),($db|0))|0);
    $622 = __THREW__; __THREW__ = 0;
    $623 = $622&1;
    if ($623) {
     $625 = ___cxa_find_matching_catch()|0;
     $626 = tempRet0;
     $$23 = $625;$$2332 = $626;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $624 = ($621|0)==($618|0);
     $first$38 = $624 ? $first : $621;
     $$0 = $first$38;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 109:  {
    $609 = (($first) + 2|0);
    HEAP8[$63>>0] = 2;
    $610 = (($63) + 1|0);
    HEAP8[$610>>0] = 44;
    $611 = (($63) + 2|0);
    HEAP8[$611>>0] = 0;
    __THREW__ = 0;
    $612 = (invoke_iiiii(48,($609|0),($last|0),($63|0),($db|0))|0);
    $613 = __THREW__; __THREW__ = 0;
    $614 = $613&1;
    if ($614) {
     $616 = ___cxa_find_matching_catch()|0;
     $617 = tempRet0;
     $$23 = $616;$$2332 = $617;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $615 = ($612|0)==($609|0);
     $first$37 = $615 ? $first : $612;
     $$0 = $first$37;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 118:  {
    $627 = ($122|0)>(2);
    if (!($627)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $628 = HEAP8[$first>>0]|0;
    $629 = ($628<<24>>24)==(99);
    if (!($629)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $630 = (($first) + 1|0);
    $631 = HEAP8[$630>>0]|0;
    $632 = ($631<<24>>24)==(118);
    if (!($632)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $633 = (($db) + 63|0);
    $634 = HEAP8[$633>>0]|0;
    HEAP8[$633>>0] = 0;
    $635 = (($first) + 2|0);
    $636 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($635,$last,$db)|0);
    HEAP8[$633>>0] = $634;
    $637 = ($636|0)==($635|0);
    $638 = ($636|0)==($last|0);
    $or$cond$i252 = $637 | $638;
    if ($or$cond$i252) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $639 = HEAP8[$636>>0]|0;
    $640 = ($639<<24>>24)==(95);
    if ($640) {
     $643 = (($636) + 1|0);
     $644 = ($643|0)==($last|0);
     if ($644) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $645 = HEAP8[$643>>0]|0;
     $646 = ($645<<24>>24)==(69);
     L674: do {
      if ($646) {
       $647 = (($db) + 4|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = (($db) + 8|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = ($648>>>0)<($650>>>0);
       if ($651) {
        $652 = ($648|0)==(0|0);
        if ($652) {
         $654 = 0;
        } else {
         ;HEAP32[$648+0>>2]=0|0;HEAP32[$648+4>>2]=0|0;HEAP32[$648+8>>2]=0|0;HEAP32[$648+12>>2]=0|0;HEAP32[$648+16>>2]=0|0;HEAP32[$648+20>>2]=0|0;
         $$pre$i$i253 = HEAP32[$647>>2]|0;
         $654 = $$pre$i$i253;
        }
        $653 = (($654) + 24|0);
        HEAP32[$647>>2] = $653;
        $t$1$i257 = $643;
        break;
       }
       $655 = (($db) + 12|0);
       $656 = HEAP32[$db>>2]|0;
       $657 = $648;
       $658 = $656;
       $659 = (($657) - ($658))|0;
       $660 = (($659|0) / 24)&-1;
       $661 = (($660) + 1)|0;
       $662 = ($661|0)<(0);
       if ($662) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
        // unreachable;
       }
       $663 = $650;
       $664 = (($663) - ($658))|0;
       $665 = (($664|0) / 24)&-1;
       $666 = ($665>>>0)<(1073741823);
       if ($666) {
        $667 = $665 << 1;
        $668 = ($667>>>0)<($661>>>0);
        $669 = $668 ? $661 : $667;
        $$0$i$i$i$i254 = $669;
       } else {
        $$0$i$i$i$i254 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i251,$$0$i$i$i$i254,$660,$655);
       $670 = (($__v$i$i$i251) + 8|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = ($671|0)==(0|0);
       if (!($672)) {
        ;HEAP32[$671+0>>2]=0|0;HEAP32[$671+4>>2]=0|0;HEAP32[$671+8>>2]=0|0;HEAP32[$671+12>>2]=0|0;HEAP32[$671+16>>2]=0|0;HEAP32[$671+20>>2]=0|0;
       }
       $673 = (($671) + 24|0);
       HEAP32[$670>>2] = $673;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i251);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i251);
       $t$1$i257 = $643;
      } else {
       $675 = $645;$t$0$i256 = $643;
       while(1) {
        $674 = ($675<<24>>24)==(69);
        if ($674) {
         $t$1$i257 = $t$0$i256;
         break L674;
        }
        $676 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i256,$last,$db)|0);
        $677 = ($676|0)==($t$0$i256|0);
        $678 = ($676|0)==($last|0);
        $or$cond13$i = $677 | $678;
        if ($or$cond13$i) {
         $$0 = $first;
         break;
        }
        $$pre = HEAP8[$676>>0]|0;
        $675 = $$pre;$t$0$i256 = $676;
       }
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $679 = (($t$1$i257) + 1|0);
     $t$2$i258 = $679;
    } else {
     $641 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($636,$last,$db)|0);
     $642 = ($641|0)==($636|0);
     if ($642) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     } else {
      $t$2$i258 = $641;
     }
    }
    $680 = (($db) + 4|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = HEAP32[$db>>2]|0;
    $683 = $681;
    $684 = $682;
    $685 = (($683) - ($684))|0;
    $686 = (($685|0) / 24)&-1;
    $687 = ($686>>>0)<(2);
    if ($687) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $688 = (($681) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp2$i,$688);
    $689 = HEAP32[$680>>2]|0;
    $690 = (($689) + -24|0);
    $692 = $689;
    while(1) {
     $691 = (($692) + -24|0);
     HEAP32[$680>>2] = $691;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($691);
     $693 = HEAP32[$680>>2]|0;
     $694 = ($693|0)==($690|0);
     if ($694) {
      break;
     } else {
      $692 = $693;
     }
    }
    $695 = (($689) + -48|0);
    __THREW__ = 0;
    invoke_vii(36,($13|0),($695|0));
    $696 = __THREW__; __THREW__ = 0;
    $697 = $696&1;
    if ($697) {
     $748 = ___cxa_find_matching_catch()|0;
     $749 = tempRet0;
     $$4$i269 = $749;$$46$i = $748;
    } else {
     __THREW__ = 0;
     $698 = (invoke_iiiii(33,($13|0),0,(2008|0),1)|0);
     $699 = __THREW__; __THREW__ = 0;
     $700 = $699&1;
     if ($700) {
      $750 = ___cxa_find_matching_catch()|0;
      $751 = tempRet0;
      $$3$i268 = $751;$$35$i = $750;
     } else {
      ;HEAP32[$12+0>>2]=HEAP32[$698+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$698+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$698+8>>2]|0;
      ;HEAP32[$698+0>>2]=0|0;HEAP32[$698+4>>2]=0|0;HEAP32[$698+8>>2]=0|0;
      __THREW__ = 0;
      $701 = (invoke_iiii(32,($12|0),(3544|0),2)|0);
      $702 = __THREW__; __THREW__ = 0;
      $703 = $702&1;
      if ($703) {
       $752 = ___cxa_find_matching_catch()|0;
       $753 = tempRet0;
       $$2$i267 = $753;$$24$i = $752;
      } else {
       ;HEAP32[$11+0>>2]=HEAP32[$701+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$701+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$701+8>>2]|0;
       ;HEAP32[$701+0>>2]=0|0;HEAP32[$701+4>>2]=0|0;HEAP32[$701+8>>2]=0|0;
       $704 = HEAP8[$tmp2$i>>0]|0;
       $705 = $704 & 1;
       $706 = ($705<<24>>24)==(0);
       if ($706) {
        $711 = (($tmp2$i) + 1|0);
        $712 = $704&255;
        $713 = $712 >>> 1;
        $714 = $711;$715 = $713;
       } else {
        $707 = (($tmp2$i) + 8|0);
        $708 = HEAP32[$707>>2]|0;
        $709 = (($tmp2$i) + 4|0);
        $710 = HEAP32[$709>>2]|0;
        $714 = $708;$715 = $710;
       }
       __THREW__ = 0;
       $716 = (invoke_iiii(32,($11|0),($714|0),($715|0))|0);
       $717 = __THREW__; __THREW__ = 0;
       $718 = $717&1;
       do {
        if ($718) {
         $754 = ___cxa_find_matching_catch()|0;
         $755 = tempRet0;
         $$1$i266 = $755;$$13$i = $754;
        } else {
         ;HEAP32[$10+0>>2]=HEAP32[$716+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$716+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$716+8>>2]|0;
         ;HEAP32[$716+0>>2]=0|0;HEAP32[$716+4>>2]=0|0;HEAP32[$716+8>>2]=0|0;
         __THREW__ = 0;
         $719 = (invoke_iiii(32,($10|0),(2000|0),1)|0);
         $720 = __THREW__; __THREW__ = 0;
         $721 = $720&1;
         if ($721) {
          $756 = ___cxa_find_matching_catch()|0;
          $757 = tempRet0;
          $758 = HEAP8[$10>>0]|0;
          $759 = $758 & 1;
          $760 = ($759<<24>>24)==(0);
          if ($760) {
           $$1$i266 = $757;$$13$i = $756;
           break;
          }
          $761 = (($10) + 8|0);
          $762 = HEAP32[$761>>2]|0;
          _free($762);
          $$1$i266 = $757;$$13$i = $756;
          break;
         }
         $722 = HEAP8[$719>>0]|0;
         $723 = (($719) + 1|0);
         ;HEAP8[$$sroa$5410+0>>0]=HEAP8[$723+0>>0]|0;HEAP8[$$sroa$5410+1>>0]=HEAP8[$723+1>>0]|0;HEAP8[$$sroa$5410+2>>0]=HEAP8[$723+2>>0]|0;HEAP8[$$sroa$5410+3>>0]=HEAP8[$723+3>>0]|0;HEAP8[$$sroa$5410+4>>0]=HEAP8[$723+4>>0]|0;HEAP8[$$sroa$5410+5>>0]=HEAP8[$723+5>>0]|0;HEAP8[$$sroa$5410+6>>0]=HEAP8[$723+6>>0]|0;
         $724 = (($719) + 8|0);
         $725 = HEAP32[$724>>2]|0;
         ;HEAP32[$719+0>>2]=0|0;HEAP32[$719+4>>2]=0|0;HEAP32[$719+8>>2]=0|0;
         HEAP8[$9>>0] = $722;
         $726 = (($9) + 1|0);
         ;HEAP8[$726+0>>0]=HEAP8[$$sroa$5410+0>>0]|0;HEAP8[$726+1>>0]=HEAP8[$$sroa$5410+1>>0]|0;HEAP8[$726+2>>0]=HEAP8[$$sroa$5410+2>>0]|0;HEAP8[$726+3>>0]=HEAP8[$$sroa$5410+3>>0]|0;HEAP8[$726+4>>0]=HEAP8[$$sroa$5410+4>>0]|0;HEAP8[$726+5>>0]=HEAP8[$$sroa$5410+5>>0]|0;HEAP8[$726+6>>0]=HEAP8[$$sroa$5410+6>>0]|0;
         $727 = (($9) + 8|0);
         HEAP32[$727>>2] = $725;
         ;HEAP8[$$sroa$5410+0>>0]=0|0;HEAP8[$$sroa$5410+1>>0]=0|0;HEAP8[$$sroa$5410+2>>0]=0|0;HEAP8[$$sroa$5410+3>>0]=0|0;HEAP8[$$sroa$5410+4>>0]=0|0;HEAP8[$$sroa$5410+5>>0]=0|0;HEAP8[$$sroa$5410+6>>0]=0|0;
         $728 = (($9) + 12|0);
         ;HEAP32[$728+0>>2]=0|0;HEAP32[$728+4>>2]=0|0;HEAP32[$728+8>>2]=0|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($695,$9);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
         $$pre434 = HEAP8[$10>>0]|0;
         $phitmp484 = $$pre434 & 1;
         $phitmp485 = ($phitmp484<<24>>24)==(0);
         if (!($phitmp485)) {
          $729 = (($10) + 8|0);
          $730 = HEAP32[$729>>2]|0;
          _free($730);
         }
         $731 = HEAP8[$11>>0]|0;
         $732 = $731 & 1;
         $733 = ($732<<24>>24)==(0);
         if (!($733)) {
          $734 = (($11) + 8|0);
          $735 = HEAP32[$734>>2]|0;
          _free($735);
         }
         $736 = HEAP8[$12>>0]|0;
         $737 = $736 & 1;
         $738 = ($737<<24>>24)==(0);
         if (!($738)) {
          $739 = (($12) + 8|0);
          $740 = HEAP32[$739>>2]|0;
          _free($740);
         }
         $741 = HEAP8[$13>>0]|0;
         $742 = $741 & 1;
         $743 = ($742<<24>>24)==(0);
         if (!($743)) {
          $744 = (($13) + 8|0);
          $745 = HEAP32[$744>>2]|0;
          _free($745);
         }
         if ($706) {
          $$0 = $t$2$i258;
          STACKTOP = sp;return ($$0|0);
         }
         $746 = (($tmp2$i) + 8|0);
         $747 = HEAP32[$746>>2]|0;
         _free($747);
         $$0 = $t$2$i258;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $763 = HEAP8[$11>>0]|0;
       $764 = $763 & 1;
       $765 = ($764<<24>>24)==(0);
       if ($765) {
        $$2$i267 = $$1$i266;$$24$i = $$13$i;
       } else {
        $766 = (($11) + 8|0);
        $767 = HEAP32[$766>>2]|0;
        _free($767);
        $$2$i267 = $$1$i266;$$24$i = $$13$i;
       }
      }
      $768 = HEAP8[$12>>0]|0;
      $769 = $768 & 1;
      $770 = ($769<<24>>24)==(0);
      if ($770) {
       $$3$i268 = $$2$i267;$$35$i = $$24$i;
      } else {
       $771 = (($12) + 8|0);
       $772 = HEAP32[$771>>2]|0;
       _free($772);
       $$3$i268 = $$2$i267;$$35$i = $$24$i;
      }
     }
     $773 = HEAP8[$13>>0]|0;
     $774 = $773 & 1;
     $775 = ($774<<24>>24)==(0);
     if ($775) {
      $$4$i269 = $$3$i268;$$46$i = $$35$i;
     } else {
      $776 = (($13) + 8|0);
      $777 = HEAP32[$776>>2]|0;
      _free($777);
      $$4$i269 = $$3$i268;$$46$i = $$35$i;
     }
    }
    $778 = HEAP8[$tmp2$i>>0]|0;
    $779 = $778 & 1;
    $780 = ($779<<24>>24)==(0);
    if ($780) {
     ___resumeException($$46$i|0);
     // unreachable;
    }
    $781 = (($tmp2$i) + 8|0);
    $782 = HEAP32[$781>>2]|0;
    _free($782);
    ___resumeException($$46$i|0);
    // unreachable;
    break;
   }
   case 108:  {
    if (!($124)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $483 = HEAP8[$first>>0]|0;
    $484 = ($483<<24>>24)==(99);
    if (!($484)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $485 = (($first) + 1|0);
    $486 = HEAP8[$485>>0]|0;
    $487 = ($486<<24>>24)==(108);
    if (!($487)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $488 = (($first) + 2|0);
    $489 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($488,$last,$db)|0);
    $490 = ($489|0)==($488|0);
    $491 = ($489|0)==($last|0);
    $or$cond5$i = $490 | $491;
    if ($or$cond5$i) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $492 = HEAP32[$db>>2]|0;
    $493 = (($db) + 4|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($492|0)==($494|0);
    if ($495) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $496 = (($494) + -24|0);
    $497 = (($494) + -12|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $498 & 1;
    $500 = ($499<<24>>24)==(0);
    if ($500) {
     $505 = (($497) + 1|0);
     $506 = $498&255;
     $507 = $506 >>> 1;
     $508 = $505;$509 = $507;
    } else {
     $501 = (($494) + -4|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = (($494) + -8|0);
     $504 = HEAP32[$503>>2]|0;
     $508 = $502;$509 = $504;
    }
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($496,$508,$509)|0);
    $510 = HEAP32[$493>>2]|0;
    $511 = (($510) + -12|0);
    ;HEAP8[$$sroa$5413+0>>0]=0|0;HEAP8[$$sroa$5413+1>>0]=0|0;HEAP8[$$sroa$5413+2>>0]=0|0;HEAP8[$$sroa$5413+3>>0]=0|0;HEAP8[$$sroa$5413+4>>0]=0|0;HEAP8[$$sroa$5413+5>>0]=0|0;HEAP8[$$sroa$5413+6>>0]=0|0;
    $512 = HEAP8[$511>>0]|0;
    $513 = $512 & 1;
    $514 = ($513<<24>>24)==(0);
    do {
     if ($514) {
      $515 = (($511) + 1|0);
      HEAP8[$515>>0] = 0;
      HEAP8[$511>>0] = 0;
     } else {
      $516 = (($510) + -4|0);
      $517 = HEAP32[$516>>2]|0;
      HEAP8[$517>>0] = 0;
      $518 = (($510) + -8|0);
      HEAP32[$518>>2] = 0;
      $$pre$i$i$i$i274 = HEAP8[$511>>0]|0;
      $519 = $$pre$i$i$i$i274 & 1;
      $520 = ($519<<24>>24)==(0);
      if ($520) {
       $525 = $$pre$i$i$i$i274;$534 = 10;
      } else {
       $521 = HEAP32[$511>>2]|0;
       $522 = $521 & -2;
       $phitmp$i$i$i$i$i$i$i276 = (($522) + -1)|0;
       $523 = $521&255;
       $525 = $523;$534 = $phitmp$i$i$i$i$i$i$i276;
      }
      $524 = $525 & 1;
      $526 = ($524<<24>>24)==(0);
      if ($526) {
       $527 = $525&255;
       $528 = $527 >>> 1;
       $529 = ($525&255)<(22);
       if ($529) {
        $3028 = 1;$533 = 10;$553 = $528;
       } else {
        $530 = (($528) + 16)|0;
        $531 = $530 & 240;
        $phitmp$i2$i$i$i$i$i$i279 = (($531) + -1)|0;
        $3028 = 1;$533 = $phitmp$i2$i$i$i$i$i$i279;$553 = $528;
       }
      } else {
       $3028 = 0;$533 = 10;$553 = 0;
      }
      $532 = ($533|0)==($534|0);
      if (!($532)) {
       $535 = ($533|0)==(10);
       if ($535) {
        $540 = (($511) + 1|0);
        $541 = HEAP32[$516>>2]|0;
        if ($3028) {
         $542 = $525&255;
         $543 = $542 >>> 1;
         $544 = (($543) + 1)|0;
         _memcpy(($540|0),($541|0),($544|0))|0;
         _free($541);
        } else {
         $549 = HEAP8[$541>>0]|0;
         HEAP8[$540>>0] = $549;
         _free($541);
        }
        $554 = $553 << 1;
        $555 = $554&255;
        HEAP8[$511>>0] = $555;
        break;
       }
       $536 = ($533>>>0)<=($534>>>0);
       $537 = (($533) + 1)|0;
       $538 = (_malloc($537)|0);
       $539 = ($538|0)==(0|0);
       $or$cond$i$i$i$i$i$i281 = $536 & $539;
       if (!($or$cond$i$i$i$i$i$i281)) {
        if ($3028) {
         $545 = (($511) + 1|0);
         $546 = $525&255;
         $547 = $546 >>> 1;
         $548 = (($547) + 1)|0;
         _memcpy(($538|0),($545|0),($548|0))|0;
        } else {
         $550 = HEAP32[$516>>2]|0;
         $551 = HEAP8[$550>>0]|0;
         HEAP8[$538>>0] = $551;
         _free($550);
        }
        $552 = $537 | 1;
        HEAP32[$511>>2] = $552;
        HEAP32[$518>>2] = $553;
        HEAP32[$516>>2] = $538;
       }
      }
     }
    } while(0);
    $556 = (($510) + -12|0);
    HEAP8[$556>>0] = 0;
    $557 = (($510) + -11|0);
    ;HEAP8[$557+0>>0]=HEAP8[$$sroa$5413+0>>0]|0;HEAP8[$557+1>>0]=HEAP8[$$sroa$5413+1>>0]|0;HEAP8[$557+2>>0]=HEAP8[$$sroa$5413+2>>0]|0;HEAP8[$557+3>>0]=HEAP8[$$sroa$5413+3>>0]|0;HEAP8[$557+4>>0]=HEAP8[$$sroa$5413+4>>0]|0;HEAP8[$557+5>>0]=HEAP8[$$sroa$5413+5>>0]|0;HEAP8[$557+6>>0]=HEAP8[$$sroa$5413+6>>0]|0;
    $558 = (($510) + -4|0);
    HEAP32[$558>>2] = 0;
    ;HEAP8[$$sroa$5413+0>>0]=0|0;HEAP8[$$sroa$5413+1>>0]=0|0;HEAP8[$$sroa$5413+2>>0]=0|0;HEAP8[$$sroa$5413+3>>0]=0|0;HEAP8[$$sroa$5413+4>>0]=0|0;HEAP8[$$sroa$5413+5>>0]=0|0;HEAP8[$$sroa$5413+6>>0]=0|0;
    $$pre433 = HEAP32[$493>>2]|0;
    $559 = (($$pre433) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($559,2008,1)|0);
    $560 = HEAP8[$489>>0]|0;
    $561 = ($560<<24>>24)==(69);
    L795: do {
     if ($561) {
      $t$0$i289$lcssa = $489;
     } else {
      $562 = (($tmp$i270) + 1|0);
      $563 = (($tmp$i270) + 8|0);
      $564 = (($tmp$i270) + 4|0);
      $t$0$i289363 = $489;
      while(1) {
       $565 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i289363,$last,$db)|0);
       $566 = ($565|0)==($t$0$i289363|0);
       $567 = ($565|0)==($last|0);
       $or$cond$i291 = $566 | $567;
       if ($or$cond$i291) {
        $$0 = $first;
        label = 1079;
        break;
       }
       $568 = HEAP32[$db>>2]|0;
       $569 = HEAP32[$493>>2]|0;
       $570 = ($568|0)==($569|0);
       if ($570) {
        $$0 = $first;
        label = 1079;
        break;
       }
       $571 = (($569) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i270,$571);
       $572 = HEAP32[$493>>2]|0;
       $573 = (($572) + -24|0);
       $575 = $572;
       while(1) {
        $574 = (($575) + -24|0);
        HEAP32[$493>>2] = $574;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($574);
        $576 = HEAP32[$493>>2]|0;
        $577 = ($576|0)==($573|0);
        if ($577) {
         break;
        } else {
         $575 = $576;
        }
       }
       $578 = HEAP8[$tmp$i270>>0]|0;
       $579 = $578 & 1;
       $580 = ($579<<24>>24)==(0);
       if ($580) {
        $582 = $578&255;
        $583 = $582 >>> 1;
        $585 = $583;
       } else {
        $581 = HEAP32[$564>>2]|0;
        $585 = $581;
       }
       $584 = ($585|0)==(0);
       if (!($584)) {
        $586 = HEAP32[$db>>2]|0;
        $587 = ($586|0)==($573|0);
        if ($587) {
         label = 184;
         break;
        }
        $591 = (($572) + -48|0);
        if ($580) {
         $594 = $578&255;
         $595 = $594 >>> 1;
         $596 = $562;$597 = $595;
        } else {
         $592 = HEAP32[$563>>2]|0;
         $593 = HEAP32[$564>>2]|0;
         $596 = $592;$597 = $593;
        }
        __THREW__ = 0;
        (invoke_iiii(32,($591|0),($596|0),($597|0))|0);
        $598 = __THREW__; __THREW__ = 0;
        $599 = $598&1;
        if ($599) {
         label = 174;
         break;
        }
       }
       if (!($580)) {
        $600 = HEAP32[$563>>2]|0;
        _free($600);
       }
       $601 = HEAP8[$565>>0]|0;
       $602 = ($601<<24>>24)==(69);
       if ($602) {
        $t$0$i289$lcssa = $565;
        break L795;
       } else {
        $t$0$i289363 = $565;
       }
      }
      if ((label|0) == 174) {
       $588 = ___cxa_find_matching_catch()|0;
       $589 = tempRet0;
       if ($580) {
        ___resumeException($588|0);
        // unreachable;
       }
       $590 = HEAP32[$563>>2]|0;
       _free($590);
       ___resumeException($588|0);
       // unreachable;
      }
      else if ((label|0) == 184) {
       if ($580) {
        $$0 = $first;
        STACKTOP = sp;return ($$0|0);
       }
       $603 = HEAP32[$563>>2]|0;
       _free($603);
       $$0 = $first;
       STACKTOP = sp;return ($$0|0);
      }
      else if ((label|0) == 1079) {
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    $604 = HEAP32[$db>>2]|0;
    $605 = HEAP32[$493>>2]|0;
    $606 = ($604|0)==($605|0);
    if ($606) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $607 = (($t$0$i289$lcssa) + 1|0);
    $608 = (($605) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($608,2000,1)|0);
    $$0 = $607;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 84:  {
   $134 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $$0 = $134;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 76:  {
   $133 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $$0 = $133;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 101:  {
   $1288 = (($t$0) + 1|0);
   $1289 = HEAP8[$1288>>0]|0;
   $1290 = $1289 << 24 >> 24;
   if ((($1290|0) == 111)) {
    $1291 = (($first) + 2|0);
    HEAP8[$74>>0] = 2;
    $1292 = (($74) + 1|0);
    HEAP8[$1292>>0] = 94;
    $1293 = (($74) + 2|0);
    HEAP8[$1293>>0] = 0;
    __THREW__ = 0;
    $1294 = (invoke_iiiii(48,($1291|0),($last|0),($74|0),($db|0))|0);
    $1295 = __THREW__; __THREW__ = 0;
    $1296 = $1295&1;
    if ($1296) {
     $1298 = ___cxa_find_matching_catch()|0;
     $1299 = tempRet0;
     $$23 = $1298;$$2332 = $1299;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1297 = ($1294|0)==($1291|0);
     $first$42 = $1297 ? $first : $1294;
     $$0 = $first$42;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1290|0) == 79)) {
    $1300 = (($first) + 2|0);
    HEAP8[$75>>0] = 4;
    $1301 = (($75) + 1|0);
    HEAP8[$1301>>0]=15710&255;HEAP8[$1301+1>>0]=15710>>8;
    $1302 = (($75) + 3|0);
    HEAP8[$1302>>0] = 0;
    __THREW__ = 0;
    $1303 = (invoke_iiiii(48,($1300|0),($last|0),($75|0),($db|0))|0);
    $1304 = __THREW__; __THREW__ = 0;
    $1305 = $1304&1;
    if ($1305) {
     $1307 = ___cxa_find_matching_catch()|0;
     $1308 = tempRet0;
     $$23 = $1307;$$2332 = $1308;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1306 = ($1303|0)==($1300|0);
     $first$43 = $1306 ? $first : $1303;
     $$0 = $first$43;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1290|0) == 113)) {
    $1309 = (($first) + 2|0);
    HEAP8[$76>>0] = 4;
    $1310 = (($76) + 1|0);
    HEAP8[$1310>>0]=15677&255;HEAP8[$1310+1>>0]=15677>>8;
    $1311 = (($76) + 3|0);
    HEAP8[$1311>>0] = 0;
    __THREW__ = 0;
    $1312 = (invoke_iiiii(48,($1309|0),($last|0),($76|0),($db|0))|0);
    $1313 = __THREW__; __THREW__ = 0;
    $1314 = $1313&1;
    if ($1314) {
     $1316 = ___cxa_find_matching_catch()|0;
     $1317 = tempRet0;
     $$23 = $1316;$$2332 = $1317;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1315 = ($1312|0)==($1309|0);
     $first$44 = $1315 ? $first : $1312;
     $$0 = $first$44;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 105:  {
   $1339 = (($t$0) + 1|0);
   $1340 = HEAP8[$1339>>0]|0;
   $1341 = ($1340<<24>>24)==(120);
   if (!($1341)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1342 = (($first) + 2|0);
   $1343 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1342,$last,$db)|0);
   $1344 = ($1343|0)==($1342|0);
   if ($1344) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1345 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1343,$last,$db)|0);
   $1346 = ($1345|0)==($1343|0);
   $1347 = (($db) + 4|0);
   $1348 = HEAP32[$1347>>2]|0;
   if ($1346) {
    $1451 = (($1348) + -24|0);
    $1453 = $1348;
    while(1) {
     $1452 = (($1453) + -24|0);
     HEAP32[$1347>>2] = $1452;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1452);
     $1454 = HEAP32[$1347>>2]|0;
     $1455 = ($1454|0)==($1451|0);
     if ($1455) {
      $$0 = $first;
      break;
     } else {
      $1453 = $1454;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   $1349 = HEAP32[$db>>2]|0;
   $1350 = $1348;
   $1351 = $1349;
   $1352 = (($1350) - ($1351))|0;
   $1353 = (($1352|0) / 24)&-1;
   $1354 = ($1353>>>0)<(2);
   if ($1354) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1355 = (($1348) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$1355);
   $1356 = HEAP32[$1347>>2]|0;
   $1357 = (($1356) + -24|0);
   $1359 = $1356;
   while(1) {
    $1358 = (($1359) + -24|0);
    HEAP32[$1347>>2] = $1358;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1358);
    $1360 = HEAP32[$1347>>2]|0;
    $1361 = ($1360|0)==($1357|0);
    if ($1361) {
     break;
    } else {
     $1359 = $1360;
    }
   }
   $1362 = (($1356) + -48|0);
   __THREW__ = 0;
   invoke_vii(36,($op1|0),($1362|0));
   $1363 = __THREW__; __THREW__ = 0;
   $1364 = $1363&1;
   if ($1364) {
    $1416 = ___cxa_find_matching_catch()|0;
    $1417 = tempRet0;
    $$10 = $1416;$$1019 = $1417;
   } else {
    $1365 = HEAP32[$1347>>2]|0;
    $1366 = (($1365) + -24|0);
    __THREW__ = 0;
    invoke_viii(46,($82|0),(2008|0),($op1|0));
    $1367 = __THREW__; __THREW__ = 0;
    $1368 = $1367&1;
    if ($1368) {
     $1418 = ___cxa_find_matching_catch()|0;
     $1419 = tempRet0;
     $$9 = $1418;$$918 = $1419;
    } else {
     __THREW__ = 0;
     $1369 = (invoke_iiii(32,($82|0),(2184|0),2)|0);
     $1370 = __THREW__; __THREW__ = 0;
     $1371 = $1370&1;
     if ($1371) {
      $1420 = ___cxa_find_matching_catch()|0;
      $1421 = tempRet0;
      $$8 = $1420;$$817 = $1421;
     } else {
      ;HEAP32[$81+0>>2]=HEAP32[$1369+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$1369+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$1369+8>>2]|0;
      ;HEAP32[$1369+0>>2]=0|0;HEAP32[$1369+4>>2]=0|0;HEAP32[$1369+8>>2]=0|0;
      $1372 = HEAP8[$op2>>0]|0;
      $1373 = $1372 & 1;
      $1374 = ($1373<<24>>24)==(0);
      if ($1374) {
       $1379 = (($op2) + 1|0);
       $1380 = $1372&255;
       $1381 = $1380 >>> 1;
       $1382 = $1379;$1383 = $1381;
      } else {
       $1375 = (($op2) + 8|0);
       $1376 = HEAP32[$1375>>2]|0;
       $1377 = (($op2) + 4|0);
       $1378 = HEAP32[$1377>>2]|0;
       $1382 = $1376;$1383 = $1378;
      }
      __THREW__ = 0;
      $1384 = (invoke_iiii(32,($81|0),($1382|0),($1383|0))|0);
      $1385 = __THREW__; __THREW__ = 0;
      $1386 = $1385&1;
      do {
       if ($1386) {
        $1422 = ___cxa_find_matching_catch()|0;
        $1423 = tempRet0;
        $$7 = $1422;$$716 = $1423;
       } else {
        ;HEAP32[$80+0>>2]=HEAP32[$1384+0>>2]|0;HEAP32[$80+4>>2]=HEAP32[$1384+4>>2]|0;HEAP32[$80+8>>2]=HEAP32[$1384+8>>2]|0;
        ;HEAP32[$1384+0>>2]=0|0;HEAP32[$1384+4>>2]=0|0;HEAP32[$1384+8>>2]=0|0;
        __THREW__ = 0;
        $1387 = (invoke_iiii(32,($80|0),(2120|0),1)|0);
        $1388 = __THREW__; __THREW__ = 0;
        $1389 = $1388&1;
        if ($1389) {
         $1424 = ___cxa_find_matching_catch()|0;
         $1425 = tempRet0;
         $1426 = HEAP8[$80>>0]|0;
         $1427 = $1426 & 1;
         $1428 = ($1427<<24>>24)==(0);
         if ($1428) {
          $$7 = $1424;$$716 = $1425;
          break;
         }
         $1429 = (($80) + 8|0);
         $1430 = HEAP32[$1429>>2]|0;
         _free($1430);
         $$7 = $1424;$$716 = $1425;
         break;
        }
        $1390 = HEAP8[$1387>>0]|0;
        $1391 = (($1387) + 1|0);
        ;HEAP8[$$sroa$4370+0>>0]=HEAP8[$1391+0>>0]|0;HEAP8[$$sroa$4370+1>>0]=HEAP8[$1391+1>>0]|0;HEAP8[$$sroa$4370+2>>0]=HEAP8[$1391+2>>0]|0;HEAP8[$$sroa$4370+3>>0]=HEAP8[$1391+3>>0]|0;HEAP8[$$sroa$4370+4>>0]=HEAP8[$1391+4>>0]|0;HEAP8[$$sroa$4370+5>>0]=HEAP8[$1391+5>>0]|0;HEAP8[$$sroa$4370+6>>0]=HEAP8[$1391+6>>0]|0;
        $1392 = (($1387) + 8|0);
        $1393 = HEAP32[$1392>>2]|0;
        ;HEAP32[$1387+0>>2]=0|0;HEAP32[$1387+4>>2]=0|0;HEAP32[$1387+8>>2]=0|0;
        HEAP8[$79>>0] = $1390;
        $1394 = (($79) + 1|0);
        ;HEAP8[$1394+0>>0]=HEAP8[$$sroa$4370+0>>0]|0;HEAP8[$1394+1>>0]=HEAP8[$$sroa$4370+1>>0]|0;HEAP8[$1394+2>>0]=HEAP8[$$sroa$4370+2>>0]|0;HEAP8[$1394+3>>0]=HEAP8[$$sroa$4370+3>>0]|0;HEAP8[$1394+4>>0]=HEAP8[$$sroa$4370+4>>0]|0;HEAP8[$1394+5>>0]=HEAP8[$$sroa$4370+5>>0]|0;HEAP8[$1394+6>>0]=HEAP8[$$sroa$4370+6>>0]|0;
        $1395 = (($79) + 8|0);
        HEAP32[$1395>>2] = $1393;
        ;HEAP8[$$sroa$4370+0>>0]=0|0;HEAP8[$$sroa$4370+1>>0]=0|0;HEAP8[$$sroa$4370+2>>0]=0|0;HEAP8[$$sroa$4370+3>>0]=0|0;HEAP8[$$sroa$4370+4>>0]=0|0;HEAP8[$$sroa$4370+5>>0]=0|0;HEAP8[$$sroa$4370+6>>0]=0|0;
        $1396 = (($79) + 12|0);
        ;HEAP32[$1396+0>>2]=0|0;HEAP32[$1396+4>>2]=0|0;HEAP32[$1396+8>>2]=0|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1366,$79);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79);
        $$pre436 = HEAP8[$80>>0]|0;
        $phitmp480 = $$pre436 & 1;
        $phitmp481 = ($phitmp480<<24>>24)==(0);
        if (!($phitmp481)) {
         $1397 = (($80) + 8|0);
         $1398 = HEAP32[$1397>>2]|0;
         _free($1398);
        }
        $1399 = HEAP8[$81>>0]|0;
        $1400 = $1399 & 1;
        $1401 = ($1400<<24>>24)==(0);
        if (!($1401)) {
         $1402 = (($81) + 8|0);
         $1403 = HEAP32[$1402>>2]|0;
         _free($1403);
        }
        $1404 = HEAP8[$82>>0]|0;
        $1405 = $1404 & 1;
        $1406 = ($1405<<24>>24)==(0);
        if (!($1406)) {
         $1407 = (($82) + 8|0);
         $1408 = HEAP32[$1407>>2]|0;
         _free($1408);
        }
        $1409 = HEAP8[$op1>>0]|0;
        $1410 = $1409 & 1;
        $1411 = ($1410<<24>>24)==(0);
        if (!($1411)) {
         $1412 = (($op1) + 8|0);
         $1413 = HEAP32[$1412>>2]|0;
         _free($1413);
        }
        if ($1374) {
         $$0 = $1345;
         STACKTOP = sp;return ($$0|0);
        }
        $1414 = (($op2) + 8|0);
        $1415 = HEAP32[$1414>>2]|0;
        _free($1415);
        $$0 = $1345;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $1431 = HEAP8[$81>>0]|0;
      $1432 = $1431 & 1;
      $1433 = ($1432<<24>>24)==(0);
      if ($1433) {
       $$8 = $$7;$$817 = $$716;
      } else {
       $1434 = (($81) + 8|0);
       $1435 = HEAP32[$1434>>2]|0;
       _free($1435);
       $$8 = $$7;$$817 = $$716;
      }
     }
     $1436 = HEAP8[$82>>0]|0;
     $1437 = $1436 & 1;
     $1438 = ($1437<<24>>24)==(0);
     if ($1438) {
      $$9 = $$8;$$918 = $$817;
     } else {
      $1439 = (($82) + 8|0);
      $1440 = HEAP32[$1439>>2]|0;
      _free($1440);
      $$9 = $$8;$$918 = $$817;
     }
    }
    $1441 = HEAP8[$op1>>0]|0;
    $1442 = $1441 & 1;
    $1443 = ($1442<<24>>24)==(0);
    if ($1443) {
     $$10 = $$9;$$1019 = $$918;
    } else {
     $1444 = (($op1) + 8|0);
     $1445 = HEAP32[$1444>>2]|0;
     _free($1445);
     $$10 = $$9;$$1019 = $$918;
    }
   }
   $1446 = HEAP8[$op2>>0]|0;
   $1447 = $1446 & 1;
   $1448 = ($1447<<24>>24)==(0);
   if ($1448) {
    $$23 = $$10;$$2332 = $$1019;
    ___resumeException($$23|0);
    // unreachable;
   }
   $1449 = (($op2) + 8|0);
   $1450 = HEAP32[$1449>>2]|0;
   _free($1450);
   $$23 = $$10;$$2332 = $$1019;
   ___resumeException($$23|0);
   // unreachable;
   break;
  }
  case 103:  {
   $1318 = (($t$0) + 1|0);
   $1319 = HEAP8[$1318>>0]|0;
   $1320 = $1319 << 24 >> 24;
   if ((($1320|0) == 101)) {
    $1321 = (($first) + 2|0);
    HEAP8[$77>>0] = 4;
    $1322 = (($77) + 1|0);
    HEAP8[$1322>>0]=15678&255;HEAP8[$1322+1>>0]=15678>>8;
    $1323 = (($77) + 3|0);
    HEAP8[$1323>>0] = 0;
    __THREW__ = 0;
    $1324 = (invoke_iiiii(48,($1321|0),($last|0),($77|0),($db|0))|0);
    $1325 = __THREW__; __THREW__ = 0;
    $1326 = $1325&1;
    if ($1326) {
     $1328 = ___cxa_find_matching_catch()|0;
     $1329 = tempRet0;
     $$23 = $1328;$$2332 = $1329;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1327 = ($1324|0)==($1321|0);
     $first$45 = $1327 ? $first : $1324;
     $$0 = $first$45;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1320|0) == 116)) {
    $1330 = (($first) + 2|0);
    HEAP8[$78>>0] = 2;
    $1331 = (($78) + 1|0);
    HEAP8[$1331>>0] = 62;
    $1332 = (($78) + 2|0);
    HEAP8[$1332>>0] = 0;
    __THREW__ = 0;
    $1333 = (invoke_iiiii(48,($1330|0),($last|0),($78|0),($db|0))|0);
    $1334 = __THREW__; __THREW__ = 0;
    $1335 = $1334&1;
    if ($1335) {
     $1337 = ___cxa_find_matching_catch()|0;
     $1338 = tempRet0;
     $$23 = $1337;$$2332 = $1338;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1336 = ($1333|0)==($1330|0);
     $first$46 = $1336 ? $first : $1333;
     $$0 = $first$46;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 108:  {
   $1456 = (($t$0) + 1|0);
   $1457 = HEAP8[$1456>>0]|0;
   $1458 = $1457 << 24 >> 24;
   if ((($1458|0) == 115)) {
    $1468 = (($first) + 2|0);
    HEAP8[$84>>0] = 4;
    $1469 = (($84) + 1|0);
    HEAP8[$1469>>0]=15420&255;HEAP8[$1469+1>>0]=15420>>8;
    $1470 = (($84) + 3|0);
    HEAP8[$1470>>0] = 0;
    __THREW__ = 0;
    $1471 = (invoke_iiiii(48,($1468|0),($last|0),($84|0),($db|0))|0);
    $1472 = __THREW__; __THREW__ = 0;
    $1473 = $1472&1;
    if ($1473) {
     $1475 = ___cxa_find_matching_catch()|0;
     $1476 = tempRet0;
     $$23 = $1475;$$2332 = $1476;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1474 = ($1471|0)==($1468|0);
     $first$48 = $1474 ? $first : $1471;
     $$0 = $first$48;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1458|0) == 83)) {
    $1477 = (($first) + 2|0);
    HEAP8[$85>>0] = 6;
    $1478 = (($85) + 1|0);
    ;HEAP8[$1478+0>>0]=HEAP8[2192+0>>0]|0;HEAP8[$1478+1>>0]=HEAP8[2192+1>>0]|0;HEAP8[$1478+2>>0]=HEAP8[2192+2>>0]|0;
    $1479 = (($85) + 4|0);
    HEAP8[$1479>>0] = 0;
    __THREW__ = 0;
    $1480 = (invoke_iiiii(48,($1477|0),($last|0),($85|0),($db|0))|0);
    $1481 = __THREW__; __THREW__ = 0;
    $1482 = $1481&1;
    if ($1482) {
     $1484 = ___cxa_find_matching_catch()|0;
     $1485 = tempRet0;
     $$23 = $1484;$$2332 = $1485;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1483 = ($1480|0)==($1477|0);
     $first$49 = $1483 ? $first : $1480;
     $$0 = $first$49;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1458|0) == 101)) {
    $1459 = (($first) + 2|0);
    HEAP8[$83>>0] = 4;
    $1460 = (($83) + 1|0);
    HEAP8[$1460>>0]=15676&255;HEAP8[$1460+1>>0]=15676>>8;
    $1461 = (($83) + 3|0);
    HEAP8[$1461>>0] = 0;
    __THREW__ = 0;
    $1462 = (invoke_iiiii(48,($1459|0),($last|0),($83|0),($db|0))|0);
    $1463 = __THREW__; __THREW__ = 0;
    $1464 = $1463&1;
    if ($1464) {
     $1466 = ___cxa_find_matching_catch()|0;
     $1467 = tempRet0;
     $$23 = $1466;$$2332 = $1467;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1465 = ($1462|0)==($1459|0);
     $first$47 = $1465 ? $first : $1462;
     $$0 = $first$47;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1458|0) == 116)) {
    $1486 = (($first) + 2|0);
    HEAP8[$86>>0] = 2;
    $1487 = (($86) + 1|0);
    HEAP8[$1487>>0] = 60;
    $1488 = (($86) + 2|0);
    HEAP8[$1488>>0] = 0;
    __THREW__ = 0;
    $1489 = (invoke_iiiii(48,($1486|0),($last|0),($86|0),($db|0))|0);
    $1490 = __THREW__; __THREW__ = 0;
    $1491 = $1490&1;
    if ($1491) {
     $1493 = ___cxa_find_matching_catch()|0;
     $1494 = tempRet0;
     $$23 = $1493;$$2332 = $1494;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1492 = ($1489|0)==($1486|0);
     $first$50 = $1492 ? $first : $1489;
     $$0 = $first$50;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 109:  {
   $1495 = (($t$0) + 1|0);
   $1496 = HEAP8[$1495>>0]|0;
   $1497 = $1496 << 24 >> 24;
   switch ($1497|0) {
   case 105:  {
    $1498 = (($first) + 2|0);
    HEAP8[$87>>0] = 2;
    $1499 = (($87) + 1|0);
    HEAP8[$1499>>0] = 45;
    $1500 = (($87) + 2|0);
    HEAP8[$1500>>0] = 0;
    __THREW__ = 0;
    $1501 = (invoke_iiiii(48,($1498|0),($last|0),($87|0),($db|0))|0);
    $1502 = __THREW__; __THREW__ = 0;
    $1503 = $1502&1;
    if ($1503) {
     $1505 = ___cxa_find_matching_catch()|0;
     $1506 = tempRet0;
     $$23 = $1505;$$2332 = $1506;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1504 = ($1501|0)==($1498|0);
     $first$51 = $1504 ? $first : $1501;
     $$0 = $first$51;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 73:  {
    $1507 = (($first) + 2|0);
    HEAP8[$88>>0] = 4;
    $1508 = (($88) + 1|0);
    HEAP8[$1508>>0]=15661&255;HEAP8[$1508+1>>0]=15661>>8;
    $1509 = (($88) + 3|0);
    HEAP8[$1509>>0] = 0;
    __THREW__ = 0;
    $1510 = (invoke_iiiii(48,($1507|0),($last|0),($88|0),($db|0))|0);
    $1511 = __THREW__; __THREW__ = 0;
    $1512 = $1511&1;
    if ($1512) {
     $1514 = ___cxa_find_matching_catch()|0;
     $1515 = tempRet0;
     $$23 = $1514;$$2332 = $1515;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1513 = ($1510|0)==($1507|0);
     $first$52 = $1513 ? $first : $1510;
     $$0 = $first$52;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 108:  {
    $1516 = (($first) + 2|0);
    HEAP8[$89>>0] = 2;
    $1517 = (($89) + 1|0);
    HEAP8[$1517>>0] = 42;
    $1518 = (($89) + 2|0);
    HEAP8[$1518>>0] = 0;
    __THREW__ = 0;
    $1519 = (invoke_iiiii(48,($1516|0),($last|0),($89|0),($db|0))|0);
    $1520 = __THREW__; __THREW__ = 0;
    $1521 = $1520&1;
    if ($1521) {
     $1523 = ___cxa_find_matching_catch()|0;
     $1524 = tempRet0;
     $$23 = $1523;$$2332 = $1524;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1522 = ($1519|0)==($1516|0);
     $first$53 = $1522 ? $first : $1519;
     $$0 = $first$53;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 76:  {
    $1525 = (($first) + 2|0);
    HEAP8[$90>>0] = 4;
    $1526 = (($90) + 1|0);
    HEAP8[$1526>>0]=15658&255;HEAP8[$1526+1>>0]=15658>>8;
    $1527 = (($90) + 3|0);
    HEAP8[$1527>>0] = 0;
    __THREW__ = 0;
    $1528 = (invoke_iiiii(48,($1525|0),($last|0),($90|0),($db|0))|0);
    $1529 = __THREW__; __THREW__ = 0;
    $1530 = $1529&1;
    if ($1530) {
     $1532 = ___cxa_find_matching_catch()|0;
     $1533 = tempRet0;
     $$23 = $1532;$$2332 = $1533;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1531 = ($1528|0)==($1525|0);
     $first$54 = $1531 ? $first : $1528;
     $$0 = $first$54;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 109:  {
    $1534 = (($first) + 2|0);
    $1535 = ($1534|0)==($last|0);
    if (!($1535)) {
     $1536 = HEAP8[$1534>>0]|0;
     $1537 = ($1536<<24>>24)==(95);
     if ($1537) {
      $1538 = (($first) + 3|0);
      HEAP8[$91>>0] = 4;
      $1539 = (($91) + 1|0);
      HEAP8[$1539>>0]=11565&255;HEAP8[$1539+1>>0]=11565>>8;
      $1540 = (($91) + 3|0);
      HEAP8[$1540>>0] = 0;
      __THREW__ = 0;
      $1541 = (invoke_iiiii(49,($1538|0),($last|0),($91|0),($db|0))|0);
      $1542 = __THREW__; __THREW__ = 0;
      $1543 = $1542&1;
      if ($1543) {
       $1545 = ___cxa_find_matching_catch()|0;
       $1546 = tempRet0;
       $$23 = $1545;$$2332 = $1546;
       ___resumeException($$23|0);
       // unreachable;
      } else {
       $1544 = ($1541|0)==($1538|0);
       $first$55 = $1544 ? $first : $1541;
       $$0 = $first$55;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    $1547 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1534,$last,$db)|0);
    $1548 = ($1547|0)==($1534|0);
    if ($1548) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $1549 = HEAP32[$db>>2]|0;
    $1550 = (($db) + 4|0);
    $1551 = HEAP32[$1550>>2]|0;
    $1552 = ($1549|0)==($1551|0);
    if ($1552) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $1553 = (($1551) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($94,$1553);
    __THREW__ = 0;
    $1554 = (invoke_iiiii(33,($94|0),0,(2008|0),1)|0);
    $1555 = __THREW__; __THREW__ = 0;
    $1556 = $1555&1;
    do {
     if ($1556) {
      $1574 = ___cxa_find_matching_catch()|0;
      $1575 = tempRet0;
      $$12 = $1574;$$1221 = $1575;
     } else {
      ;HEAP32[$93+0>>2]=HEAP32[$1554+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$1554+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$1554+8>>2]|0;
      ;HEAP32[$1554+0>>2]=0|0;HEAP32[$1554+4>>2]=0|0;HEAP32[$1554+8>>2]=0|0;
      __THREW__ = 0;
      $1557 = (invoke_iiii(32,($93|0),(2200|0),3)|0);
      $1558 = __THREW__; __THREW__ = 0;
      $1559 = $1558&1;
      if ($1559) {
       $1576 = ___cxa_find_matching_catch()|0;
       $1577 = tempRet0;
       $1578 = HEAP8[$93>>0]|0;
       $1579 = $1578 & 1;
       $1580 = ($1579<<24>>24)==(0);
       if ($1580) {
        $$12 = $1576;$$1221 = $1577;
        break;
       }
       $1581 = (($93) + 8|0);
       $1582 = HEAP32[$1581>>2]|0;
       _free($1582);
       $$12 = $1576;$$1221 = $1577;
       break;
      }
      $1560 = HEAP8[$1557>>0]|0;
      $1561 = (($1557) + 1|0);
      ;HEAP8[$$sroa$4367+0>>0]=HEAP8[$1561+0>>0]|0;HEAP8[$$sroa$4367+1>>0]=HEAP8[$1561+1>>0]|0;HEAP8[$$sroa$4367+2>>0]=HEAP8[$1561+2>>0]|0;HEAP8[$$sroa$4367+3>>0]=HEAP8[$1561+3>>0]|0;HEAP8[$$sroa$4367+4>>0]=HEAP8[$1561+4>>0]|0;HEAP8[$$sroa$4367+5>>0]=HEAP8[$1561+5>>0]|0;HEAP8[$$sroa$4367+6>>0]=HEAP8[$1561+6>>0]|0;
      $1562 = (($1557) + 8|0);
      $1563 = HEAP32[$1562>>2]|0;
      ;HEAP32[$1557+0>>2]=0|0;HEAP32[$1557+4>>2]=0|0;HEAP32[$1557+8>>2]=0|0;
      HEAP8[$92>>0] = $1560;
      $1564 = (($92) + 1|0);
      ;HEAP8[$1564+0>>0]=HEAP8[$$sroa$4367+0>>0]|0;HEAP8[$1564+1>>0]=HEAP8[$$sroa$4367+1>>0]|0;HEAP8[$1564+2>>0]=HEAP8[$$sroa$4367+2>>0]|0;HEAP8[$1564+3>>0]=HEAP8[$$sroa$4367+3>>0]|0;HEAP8[$1564+4>>0]=HEAP8[$$sroa$4367+4>>0]|0;HEAP8[$1564+5>>0]=HEAP8[$$sroa$4367+5>>0]|0;HEAP8[$1564+6>>0]=HEAP8[$$sroa$4367+6>>0]|0;
      $1565 = (($92) + 8|0);
      HEAP32[$1565>>2] = $1563;
      ;HEAP8[$$sroa$4367+0>>0]=0|0;HEAP8[$$sroa$4367+1>>0]=0|0;HEAP8[$$sroa$4367+2>>0]=0|0;HEAP8[$$sroa$4367+3>>0]=0|0;HEAP8[$$sroa$4367+4>>0]=0|0;HEAP8[$$sroa$4367+5>>0]=0|0;HEAP8[$$sroa$4367+6>>0]=0|0;
      $1566 = (($92) + 12|0);
      ;HEAP32[$1566+0>>2]=0|0;HEAP32[$1566+4>>2]=0|0;HEAP32[$1566+8>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1553,$92);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($92);
      $$pre437 = HEAP8[$93>>0]|0;
      $phitmp478 = $$pre437 & 1;
      $phitmp479 = ($phitmp478<<24>>24)==(0);
      if (!($phitmp479)) {
       $1567 = (($93) + 8|0);
       $1568 = HEAP32[$1567>>2]|0;
       _free($1568);
      }
      $1569 = HEAP8[$94>>0]|0;
      $1570 = $1569 & 1;
      $1571 = ($1570<<24>>24)==(0);
      if ($1571) {
       $$0 = $1547;
       STACKTOP = sp;return ($$0|0);
      }
      $1572 = (($94) + 8|0);
      $1573 = HEAP32[$1572>>2]|0;
      _free($1573);
      $$0 = $1547;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $1583 = HEAP8[$94>>0]|0;
    $1584 = $1583 & 1;
    $1585 = ($1584<<24>>24)==(0);
    if ($1585) {
     $$23 = $$12;$$2332 = $$1221;
     ___resumeException($$23|0);
     // unreachable;
    }
    $1586 = (($94) + 8|0);
    $1587 = HEAP32[$1586>>2]|0;
    _free($1587);
    $$23 = $$12;$$2332 = $$1221;
    ___resumeException($$23|0);
    // unreachable;
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 110:  {
   $1588 = (($t$0) + 1|0);
   $1589 = HEAP8[$1588>>0]|0;
   $1590 = $1589 << 24 >> 24;
   switch ($1590|0) {
   case 119: case 97:  {
    L1036: do {
     if ($124) {
      $1591 = HEAP8[$first>>0]|0;
      $1592 = ($1591<<24>>24)==(103);
      if ($1592) {
       $1593 = (($first) + 1|0);
       $1594 = HEAP8[$1593>>0]|0;
       $1595 = ($1594<<24>>24)==(115);
       $1596 = (($first) + 2|0);
       $$first$i = $1595 ? $1596 : $first;
       $$pre408 = HEAP8[$$first$i>>0]|0;
       $1598 = $$pre408;$parsed_gs$0$off0$i = $1595;$t$0$i182 = $$first$i;
      } else {
       $1598 = $1591;$parsed_gs$0$off0$i = 0;$t$0$i182 = $first;
      }
      $1597 = ($1598<<24>>24)==(110);
      if ($1597) {
       $1599 = (($t$0$i182) + 1|0);
       $1600 = HEAP8[$1599>>0]|0;
       if ((($1600<<24>>24) == 97) | (($1600<<24>>24) == 119)) {
        $1601 = ($1600<<24>>24)==(97);
        $1602 = (($t$0$i182) + 2|0);
        $1603 = ($1602|0)==($last|0);
        if ($1603) {
         $$0 = $first;
         STACKTOP = sp;return ($$0|0);
        } else {
         $has_expr_list$0$off0$i = 0;$t$1$i = $1602;
        }
        while(1) {
         $1604 = HEAP8[$t$1$i>>0]|0;
         $1605 = ($1604<<24>>24)==(95);
         if ($1605) {
          break;
         }
         $1606 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i,$last,$db)|0);
         $1607 = ($1606|0)==($t$1$i|0);
         $1608 = ($1606|0)==($last|0);
         $or$cond$i = $1607 | $1608;
         if ($or$cond$i) {
          $$0 = $first;
          label = 1079;
          break;
         } else {
          $has_expr_list$0$off0$i = 1;$t$1$i = $1606;
         }
        }
        if ((label|0) == 1079) {
         STACKTOP = sp;return ($$0|0);
        }
        $1609 = (($t$1$i) + 1|0);
        $1610 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1609,$last,$db)|0);
        $1611 = ($1610|0)==($1609|0);
        $1612 = ($1610|0)==($last|0);
        $or$cond22$i = $1611 | $1612;
        if ($or$cond22$i) {
         $$0 = $first;
         STACKTOP = sp;return ($$0|0);
        }
        $1613 = $1610;
        $1614 = (($120) - ($1613))|0;
        $1615 = ($1614|0)>(2);
        $1616 = HEAP8[$1610>>0]|0;
        $1617 = ($1616<<24>>24)==(112);
        $or$cond = $1615 & $1617;
        do {
         if ($or$cond) {
          $1618 = (($1610) + 1|0);
          $1619 = HEAP8[$1618>>0]|0;
          $1620 = ($1619<<24>>24)==(105);
          if (!($1620)) {
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
          $1621 = (($1610) + 2|0);
          $t$2$i = $1621;
          while(1) {
           $1622 = HEAP8[$t$2$i>>0]|0;
           $1623 = ($1622<<24>>24)==(69);
           if ($1623) {
            break;
           }
           $1624 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$2$i,$last,$db)|0);
           $1625 = ($1624|0)==($t$2$i|0);
           $1626 = ($1624|0)==($last|0);
           $or$cond23$i = $1625 | $1626;
           if ($or$cond23$i) {
            $$0 = $first;
            label = 1079;
            break;
           } else {
            $t$2$i = $1624;
           }
          }
          if ((label|0) == 1079) {
           STACKTOP = sp;return ($$0|0);
          }
          ;HEAP32[$init_list$i+0>>2]=0|0;HEAP32[$init_list$i+4>>2]=0|0;HEAP32[$init_list$i+8>>2]=0|0;
          $1628 = HEAP32[$db>>2]|0;
          $1629 = (($db) + 4|0);
          $1630 = HEAP32[$1629>>2]|0;
          $1631 = ($1628|0)==($1630|0);
          if ($1631) {
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
          $1632 = (($1630) + -24|0);
          __THREW__ = 0;
          invoke_vii(36,($21|0),($1632|0));
          $1633 = __THREW__; __THREW__ = 0;
          $1634 = $1633&1;
          if ($1634) {
           label = 559;
          } else {
           ;HEAP32[$init_list$i+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$init_list$i+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$init_list$i+8>>2]=HEAP32[$21+8>>2]|0;
           ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
           $$pre438 = HEAP32[$1629>>2]|0;
           $1635 = (($$pre438) + -24|0);
           $1637 = $$pre438;
           while(1) {
            $1636 = (($1637) + -24|0);
            HEAP32[$1629>>2] = $1636;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1636);
            $1638 = HEAP32[$1629>>2]|0;
            $1639 = ($1638|0)==($1635|0);
            if ($1639) {
             $$pre$phiZ2D = $db;$1645 = $1635;$has_init$0$off0$i414417 = 1;$t$3$i413419 = $t$2$i;
             label = 560;
             break;
            } else {
             $1637 = $1638;
            }
           }
          }
         } else {
          $1627 = ($1616<<24>>24)==(69);
          if ($1627) {
           ;HEAP32[$init_list$i+0>>2]=0|0;HEAP32[$init_list$i+4>>2]=0|0;HEAP32[$init_list$i+8>>2]=0|0;
           $$phi$trans$insert = (($db) + 4|0);
           $$pre411 = HEAP32[$$phi$trans$insert>>2]|0;
           $$pre$phiZ2D = $db;$1645 = $$pre411;$has_init$0$off0$i414417 = 0;$t$3$i413419 = $1610;
           label = 560;
           break;
          } else {
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
         }
        } while(0);
        do {
         if ((label|0) == 560) {
          $1642 = HEAP32[$$pre$phiZ2D>>2]|0;
          $1643 = (($db) + 4|0);
          $1644 = ($1642|0)==($1645|0);
          if ($1644) {
           $$pre439 = HEAP8[$init_list$i>>0]|0;
           $phitmp476 = $$pre439 & 1;
           $phitmp477 = ($phitmp476<<24>>24)==(0);
           if ($phitmp477) {
            $$0 = $first;
            STACKTOP = sp;return ($$0|0);
           }
           $1802 = (($init_list$i) + 8|0);
           $1803 = HEAP32[$1802>>2]|0;
           _free($1803);
           $$0 = $first;
           STACKTOP = sp;return ($$0|0);
          }
          $1646 = (($1645) + -24|0);
          __THREW__ = 0;
          invoke_vii(36,($type$i|0),($1646|0));
          $1647 = __THREW__; __THREW__ = 0;
          $1648 = $1647&1;
          if ($1648) {
           label = 559;
          } else {
           $1649 = HEAP32[$1643>>2]|0;
           $1650 = (($1649) + -24|0);
           $1652 = $1649;
           while(1) {
            $1651 = (($1652) + -24|0);
            HEAP32[$1643>>2] = $1651;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1651);
            $1653 = HEAP32[$1643>>2]|0;
            $1654 = ($1653|0)==($1650|0);
            if ($1654) {
             break;
            } else {
             $1652 = $1653;
            }
           }
           ;HEAP32[$expr_list$i+0>>2]=0|0;HEAP32[$expr_list$i+4>>2]=0|0;HEAP32[$expr_list$i+8>>2]=0|0;
           do {
            if ($has_expr_list$0$off0$i) {
             $1655 = HEAP32[$$pre$phiZ2D>>2]|0;
             $1656 = ($1655|0)==($1650|0);
             if ($1656) {
              $$019$i = $first;$$2$i215 = 1;
             } else {
              $1657 = (($1649) + -48|0);
              __THREW__ = 0;
              invoke_vii(36,($22|0),($1657|0));
              $1658 = __THREW__; __THREW__ = 0;
              $1659 = $1658&1;
              if ($1659) {
               $1665 = ___cxa_find_matching_catch()|0;
               $1666 = tempRet0;
               $$310$i = $1665;$$36$i = $1666;
               label = 638;
               break;
              }
              ;HEAP32[$expr_list$i+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$expr_list$i+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$expr_list$i+8>>2]=HEAP32[$22+8>>2]|0;
              ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
              $$pre440 = HEAP32[$1643>>2]|0;
              $1660 = (($$pre440) + -24|0);
              $1662 = $$pre440;
              while(1) {
               $1661 = (($1662) + -24|0);
               HEAP32[$1643>>2] = $1661;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1661);
               $1663 = HEAP32[$1643>>2]|0;
               $1664 = ($1663|0)==($1660|0);
               if ($1664) {
                label = 570;
                break;
               } else {
                $1662 = $1663;
               }
              }
             }
            } else {
             label = 570;
            }
           } while(0);
           L1096: do {
            if ((label|0) == 570) {
             ;HEAP32[$r$i+0>>2]=0|0;HEAP32[$r$i+4>>2]=0|0;HEAP32[$r$i+8>>2]=0|0;
             if ($parsed_gs$0$off0$i) {
              __THREW__ = 0;
              invoke_viii(50,($r$i|0),(2152|0),2);
              $1667 = __THREW__; __THREW__ = 0;
              $1668 = $1667&1;
              if ($1668) {
               label = 572;
              } else {
               label = 573;
              }
             } else {
              label = 573;
             }
             L1100: do {
              if ((label|0) == 573) {
               if ($1601) {
                __THREW__ = 0;
                (invoke_iiii(32,($r$i|0),(2384|0),3)|0);
                $1671 = __THREW__; __THREW__ = 0;
                $1672 = $1671&1;
                if ($1672) {
                 label = 572;
                 break;
                }
               } else {
                __THREW__ = 0;
                (invoke_iiii(32,($r$i|0),(2080|0),1)|0);
                $1673 = __THREW__; __THREW__ = 0;
                $1674 = $1673&1;
                if ($1674) {
                 label = 572;
                 break;
                }
               }
               L1106: do {
                if ($has_expr_list$0$off0$i) {
                 __THREW__ = 0;
                 invoke_viii(46,($24|0),(2008|0),($expr_list$i|0));
                 $1675 = __THREW__; __THREW__ = 0;
                 $1676 = $1675&1;
                 if ($1676) {
                  label = 572;
                  break L1100;
                 }
                 __THREW__ = 0;
                 $1677 = (invoke_iiii(32,($24|0),(2392|0),2)|0);
                 $1678 = __THREW__; __THREW__ = 0;
                 $1679 = $1678&1;
                 do {
                  if ($1679) {
                   $1701 = ___cxa_find_matching_catch()|0;
                   $1702 = tempRet0;
                   $$03$i206 = $1702;$$07$i = $1701;
                  } else {
                   ;HEAP32[$23+0>>2]=HEAP32[$1677+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$1677+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$1677+8>>2]|0;
                   ;HEAP32[$1677+0>>2]=0|0;HEAP32[$1677+4>>2]=0|0;HEAP32[$1677+8>>2]=0|0;
                   $1680 = HEAP8[$23>>0]|0;
                   $1681 = $1680 & 1;
                   $1682 = ($1681<<24>>24)==(0);
                   if ($1682) {
                    $1687 = (($23) + 1|0);
                    $1688 = $1680&255;
                    $1689 = $1688 >>> 1;
                    $1690 = $1687;$1691 = $1689;
                   } else {
                    $1683 = (($23) + 8|0);
                    $1684 = HEAP32[$1683>>2]|0;
                    $1685 = (($23) + 4|0);
                    $1686 = HEAP32[$1685>>2]|0;
                    $1690 = $1684;$1691 = $1686;
                   }
                   __THREW__ = 0;
                   (invoke_iiii(32,($r$i|0),($1690|0),($1691|0))|0);
                   $1692 = __THREW__; __THREW__ = 0;
                   $1693 = $1692&1;
                   if ($1693) {
                    $1703 = ___cxa_find_matching_catch()|0;
                    $1704 = tempRet0;
                    if ($1682) {
                     $$03$i206 = $1704;$$07$i = $1703;
                     break;
                    }
                    $1705 = (($23) + 8|0);
                    $1706 = HEAP32[$1705>>2]|0;
                    _free($1706);
                    $$03$i206 = $1704;$$07$i = $1703;
                    break;
                   }
                   if (!($1682)) {
                    $1694 = (($23) + 8|0);
                    $1695 = HEAP32[$1694>>2]|0;
                    _free($1695);
                   }
                   $1696 = HEAP8[$24>>0]|0;
                   $1697 = $1696 & 1;
                   $1698 = ($1697<<24>>24)==(0);
                   if ($1698) {
                    break L1106;
                   }
                   $1699 = (($24) + 8|0);
                   $1700 = HEAP32[$1699>>2]|0;
                   _free($1700);
                   break L1106;
                  }
                 } while(0);
                 $1707 = HEAP8[$24>>0]|0;
                 $1708 = $1707 & 1;
                 $1709 = ($1708<<24>>24)==(0);
                 if ($1709) {
                  $$25$i = $$03$i206;$$29$i = $$07$i;
                  break L1100;
                 }
                 $1710 = (($24) + 8|0);
                 $1711 = HEAP32[$1710>>2]|0;
                 _free($1711);
                 $$25$i = $$03$i206;$$29$i = $$07$i;
                 break L1100;
                }
               } while(0);
               $1712 = HEAP8[$type$i>>0]|0;
               $1713 = $1712 & 1;
               $1714 = ($1713<<24>>24)==(0);
               if ($1714) {
                $1719 = (($type$i) + 1|0);
                $1720 = $1712&255;
                $1721 = $1720 >>> 1;
                $1722 = $1719;$1723 = $1721;
               } else {
                $1715 = (($type$i) + 8|0);
                $1716 = HEAP32[$1715>>2]|0;
                $1717 = (($type$i) + 4|0);
                $1718 = HEAP32[$1717>>2]|0;
                $1722 = $1716;$1723 = $1718;
               }
               __THREW__ = 0;
               (invoke_iiii(32,($r$i|0),($1722|0),($1723|0))|0);
               $1724 = __THREW__; __THREW__ = 0;
               $1725 = $1724&1;
               if ($1725) {
                label = 572;
                break;
               }
               L1132: do {
                if ($has_init$0$off0$i414417) {
                 __THREW__ = 0;
                 invoke_viii(46,($26|0),(1992|0),($init_list$i|0));
                 $1726 = __THREW__; __THREW__ = 0;
                 $1727 = $1726&1;
                 if ($1727) {
                  label = 572;
                  break L1100;
                 }
                 __THREW__ = 0;
                 $1728 = (invoke_iiii(32,($26|0),(2000|0),1)|0);
                 $1729 = __THREW__; __THREW__ = 0;
                 $1730 = $1729&1;
                 do {
                  if ($1730) {
                   $1752 = ___cxa_find_matching_catch()|0;
                   $1753 = tempRet0;
                   $$14$i = $1753;$$18$i = $1752;
                  } else {
                   ;HEAP32[$25+0>>2]=HEAP32[$1728+0>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1728+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1728+8>>2]|0;
                   ;HEAP32[$1728+0>>2]=0|0;HEAP32[$1728+4>>2]=0|0;HEAP32[$1728+8>>2]=0|0;
                   $1731 = HEAP8[$25>>0]|0;
                   $1732 = $1731 & 1;
                   $1733 = ($1732<<24>>24)==(0);
                   if ($1733) {
                    $1738 = (($25) + 1|0);
                    $1739 = $1731&255;
                    $1740 = $1739 >>> 1;
                    $1741 = $1738;$1742 = $1740;
                   } else {
                    $1734 = (($25) + 8|0);
                    $1735 = HEAP32[$1734>>2]|0;
                    $1736 = (($25) + 4|0);
                    $1737 = HEAP32[$1736>>2]|0;
                    $1741 = $1735;$1742 = $1737;
                   }
                   __THREW__ = 0;
                   (invoke_iiii(32,($r$i|0),($1741|0),($1742|0))|0);
                   $1743 = __THREW__; __THREW__ = 0;
                   $1744 = $1743&1;
                   if ($1744) {
                    $1754 = ___cxa_find_matching_catch()|0;
                    $1755 = tempRet0;
                    if ($1733) {
                     $$14$i = $1755;$$18$i = $1754;
                     break;
                    }
                    $1756 = (($25) + 8|0);
                    $1757 = HEAP32[$1756>>2]|0;
                    _free($1757);
                    $$14$i = $1755;$$18$i = $1754;
                    break;
                   }
                   if (!($1733)) {
                    $1745 = (($25) + 8|0);
                    $1746 = HEAP32[$1745>>2]|0;
                    _free($1746);
                   }
                   $1747 = HEAP8[$26>>0]|0;
                   $1748 = $1747 & 1;
                   $1749 = ($1748<<24>>24)==(0);
                   if ($1749) {
                    break L1132;
                   }
                   $1750 = (($26) + 8|0);
                   $1751 = HEAP32[$1750>>2]|0;
                   _free($1751);
                   break L1132;
                  }
                 } while(0);
                 $1758 = HEAP8[$26>>0]|0;
                 $1759 = $1758 & 1;
                 $1760 = ($1759<<24>>24)==(0);
                 if ($1760) {
                  $$25$i = $$14$i;$$29$i = $$18$i;
                  break L1100;
                 }
                 $1761 = (($26) + 8|0);
                 $1762 = HEAP32[$1761>>2]|0;
                 _free($1762);
                 $$25$i = $$14$i;$$29$i = $$18$i;
                 break L1100;
                }
               } while(0);
               $1763 = HEAP8[$r$i>>0]|0;
               $1764 = (($r$i) + 1|0);
               ;HEAP8[$$sroa$6404+0>>0]=HEAP8[$1764+0>>0]|0;HEAP8[$$sroa$6404+1>>0]=HEAP8[$1764+1>>0]|0;HEAP8[$$sroa$6404+2>>0]=HEAP8[$1764+2>>0]|0;HEAP8[$$sroa$6404+3>>0]=HEAP8[$1764+3>>0]|0;HEAP8[$$sroa$6404+4>>0]=HEAP8[$1764+4>>0]|0;HEAP8[$$sroa$6404+5>>0]=HEAP8[$1764+5>>0]|0;HEAP8[$$sroa$6404+6>>0]=HEAP8[$1764+6>>0]|0;
               $1765 = (($r$i) + 8|0);
               $1766 = HEAP32[$1765>>2]|0;
               ;HEAP32[$r$i+0>>2]=0|0;HEAP32[$r$i+4>>2]=0|0;HEAP32[$r$i+8>>2]=0|0;
               HEAP8[$27>>0] = $1763;
               $1767 = (($27) + 1|0);
               ;HEAP8[$1767+0>>0]=HEAP8[$$sroa$6404+0>>0]|0;HEAP8[$1767+1>>0]=HEAP8[$$sroa$6404+1>>0]|0;HEAP8[$1767+2>>0]=HEAP8[$$sroa$6404+2>>0]|0;HEAP8[$1767+3>>0]=HEAP8[$$sroa$6404+3>>0]|0;HEAP8[$1767+4>>0]=HEAP8[$$sroa$6404+4>>0]|0;HEAP8[$1767+5>>0]=HEAP8[$$sroa$6404+5>>0]|0;HEAP8[$1767+6>>0]=HEAP8[$$sroa$6404+6>>0]|0;
               $1768 = (($27) + 8|0);
               HEAP32[$1768>>2] = $1766;
               ;HEAP8[$$sroa$6404+0>>0]=0|0;HEAP8[$$sroa$6404+1>>0]=0|0;HEAP8[$$sroa$6404+2>>0]=0|0;HEAP8[$$sroa$6404+3>>0]=0|0;HEAP8[$$sroa$6404+4>>0]=0|0;HEAP8[$$sroa$6404+5>>0]=0|0;HEAP8[$$sroa$6404+6>>0]=0|0;
               $1769 = (($27) + 12|0);
               ;HEAP32[$1769+0>>2]=0|0;HEAP32[$1769+4>>2]=0|0;HEAP32[$1769+8>>2]=0|0;
               $1770 = HEAP32[$1643>>2]|0;
               $1771 = (($db) + 8|0);
               $1772 = HEAP32[$1771>>2]|0;
               $1773 = ($1770>>>0)<($1772>>>0);
               if ($1773) {
                $1774 = ($1770|0)==(0|0);
                if ($1774) {
                 $1777 = 0;
                } else {
                 ;HEAP32[$1770+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1770+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1770+8>>2]=HEAP32[$27+8>>2]|0;
                 ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
                 $1775 = (($1770) + 12|0);
                 ;HEAP32[$1775+0>>2]=HEAP32[$1769+0>>2]|0;HEAP32[$1775+4>>2]=HEAP32[$1769+4>>2]|0;HEAP32[$1775+8>>2]=HEAP32[$1769+8>>2]|0;
                 ;HEAP32[$1769+0>>2]=0|0;HEAP32[$1769+4>>2]=0|0;HEAP32[$1769+8>>2]=0|0;
                 $$pre$i$i208 = HEAP32[$1643>>2]|0;
                 $1777 = $$pre$i$i208;
                }
                $1776 = (($1777) + 24|0);
                HEAP32[$1643>>2] = $1776;
               } else {
                $1778 = (($db) + 12|0);
                $1779 = HEAP32[$$pre$phiZ2D>>2]|0;
                $1780 = $1770;
                $1781 = $1779;
                $1782 = (($1780) - ($1781))|0;
                $1783 = (($1782|0) / 24)&-1;
                $1784 = (($1783) + 1)|0;
                $1785 = ($1784|0)<(0);
                if ($1785) {
                 __THREW__ = 0;
                 invoke_v(41);
                 $1786 = __THREW__; __THREW__ = 0;
                 $1787 = $1786&1;
                 if ($1787) {
                  $1819 = ___cxa_find_matching_catch()|0;
                  $1820 = tempRet0;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
                  $$25$i = $1820;$$29$i = $1819;
                  break;
                 } else {
                  // unreachable;
                 }
                }
                $1788 = $1772;
                $1789 = (($1788) - ($1781))|0;
                $1790 = (($1789|0) / 24)&-1;
                $1791 = ($1790>>>0)<(1073741823);
                if ($1791) {
                 $1792 = $1790 << 1;
                 $1793 = ($1792>>>0)<($1784>>>0);
                 $1794 = $1793 ? $1784 : $1792;
                 $$0$i$i$i$i211 = $1794;
                } else {
                 $$0$i$i$i$i211 = 2147483647;
                }
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i181,$$0$i$i$i$i211,$1783,$1778);
                $1795 = (($__v$i$i$i181) + 8|0);
                $1796 = HEAP32[$1795>>2]|0;
                $1797 = ($1796|0)==(0|0);
                if (!($1797)) {
                 ;HEAP32[$1796+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1796+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1796+8>>2]=HEAP32[$27+8>>2]|0;
                 ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
                 $1798 = (($1796) + 12|0);
                 ;HEAP32[$1798+0>>2]=HEAP32[$1769+0>>2]|0;HEAP32[$1798+4>>2]=HEAP32[$1769+4>>2]|0;HEAP32[$1798+8>>2]=HEAP32[$1769+8>>2]|0;
                 ;HEAP32[$1769+0>>2]=0|0;HEAP32[$1769+4>>2]=0|0;HEAP32[$1769+8>>2]=0|0;
                }
                $1799 = (($1796) + 24|0);
                HEAP32[$1795>>2] = $1799;
                __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i181);
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i181);
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
               $$pre441 = HEAP8[$r$i>>0]|0;
               $phitmp474 = $$pre441 & 1;
               $phitmp475 = ($phitmp474<<24>>24)==(0);
               $1800 = (($t$3$i413419) + 1|0);
               if ($phitmp475) {
                $$019$i = $1800;$$2$i215 = 0;
                break L1096;
               }
               $1801 = HEAP32[$1765>>2]|0;
               _free($1801);
               $$019$i = $1800;$$2$i215 = 0;
               break L1096;
              }
             } while(0);
             if ((label|0) == 572) {
              $1669 = ___cxa_find_matching_catch()|0;
              $1670 = tempRet0;
              $$25$i = $1670;$$29$i = $1669;
             }
             $1821 = HEAP8[$r$i>>0]|0;
             $1822 = $1821 & 1;
             $1823 = ($1822<<24>>24)==(0);
             if ($1823) {
              $$310$i = $$29$i;$$36$i = $$25$i;
              label = 638;
             } else {
              $1824 = (($r$i) + 8|0);
              $1825 = HEAP32[$1824>>2]|0;
              _free($1825);
              $$310$i = $$29$i;$$36$i = $$25$i;
              label = 638;
             }
            }
           } while(0);
           if ((label|0) == 638) {
            $1826 = HEAP8[$expr_list$i>>0]|0;
            $1827 = $1826 & 1;
            $1828 = ($1827<<24>>24)==(0);
            if (!($1828)) {
             $1829 = (($expr_list$i) + 8|0);
             $1830 = HEAP32[$1829>>2]|0;
             _free($1830);
            }
            $1831 = HEAP8[$type$i>>0]|0;
            $1832 = $1831 & 1;
            $1833 = ($1832<<24>>24)==(0);
            if ($1833) {
             $$4$i217 = $$36$i;$$411$i = $$310$i;
             break;
            }
            $1834 = (($type$i) + 8|0);
            $1835 = HEAP32[$1834>>2]|0;
            _free($1835);
            $$4$i217 = $$36$i;$$411$i = $$310$i;
            break;
           }
           $1804 = HEAP8[$expr_list$i>>0]|0;
           $1805 = $1804 & 1;
           $1806 = ($1805<<24>>24)==(0);
           if (!($1806)) {
            $1807 = (($expr_list$i) + 8|0);
            $1808 = HEAP32[$1807>>2]|0;
            _free($1808);
           }
           $1809 = HEAP8[$type$i>>0]|0;
           $1810 = $1809 & 1;
           $1811 = ($1810<<24>>24)==(0);
           if (!($1811)) {
            $1812 = (($type$i) + 8|0);
            $1813 = HEAP32[$1812>>2]|0;
            _free($1813);
           }
           $1814 = HEAP8[$init_list$i>>0]|0;
           $1815 = $1814 & 1;
           $1816 = ($1815<<24>>24)==(0);
           if (!($1816)) {
            $1817 = (($init_list$i) + 8|0);
            $1818 = HEAP32[$1817>>2]|0;
            _free($1818);
           }
           if ($$2$i215) {
            $$0 = $first;
           } else {
            $$221$i = $$019$i;
            break L1036;
           }
           STACKTOP = sp;return ($$0|0);
          }
         }
        } while(0);
        if ((label|0) == 559) {
         $1640 = ___cxa_find_matching_catch()|0;
         $1641 = tempRet0;
         $$4$i217 = $1641;$$411$i = $1640;
        }
        $1836 = HEAP8[$init_list$i>>0]|0;
        $1837 = $1836 & 1;
        $1838 = ($1837<<24>>24)==(0);
        if ($1838) {
         ___resumeException($$411$i|0);
         // unreachable;
        }
        $1839 = (($init_list$i) + 8|0);
        $1840 = HEAP32[$1839>>2]|0;
        _free($1840);
        ___resumeException($$411$i|0);
        // unreachable;
       } else {
        $$221$i = $first;
       }
      } else {
       $$221$i = $first;
      }
     } else {
      $$221$i = $first;
     }
    } while(0);
    $$0 = $$221$i;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 101:  {
    $1841 = (($first) + 2|0);
    HEAP8[$95>>0] = 4;
    $1842 = (($95) + 1|0);
    HEAP8[$1842>>0]=15649&255;HEAP8[$1842+1>>0]=15649>>8;
    $1843 = (($95) + 3|0);
    HEAP8[$1843>>0] = 0;
    __THREW__ = 0;
    $1844 = (invoke_iiiii(48,($1841|0),($last|0),($95|0),($db|0))|0);
    $1845 = __THREW__; __THREW__ = 0;
    $1846 = $1845&1;
    if ($1846) {
     $1848 = ___cxa_find_matching_catch()|0;
     $1849 = tempRet0;
     $$23 = $1848;$$2332 = $1849;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1847 = ($1844|0)==($1841|0);
     $first$56 = $1847 ? $first : $1844;
     $$0 = $first$56;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 103:  {
    $1850 = (($first) + 2|0);
    HEAP8[$96>>0] = 2;
    $1851 = (($96) + 1|0);
    HEAP8[$1851>>0] = 45;
    $1852 = (($96) + 2|0);
    HEAP8[$1852>>0] = 0;
    __THREW__ = 0;
    $1853 = (invoke_iiiii(49,($1850|0),($last|0),($96|0),($db|0))|0);
    $1854 = __THREW__; __THREW__ = 0;
    $1855 = $1854&1;
    if ($1855) {
     $1857 = ___cxa_find_matching_catch()|0;
     $1858 = tempRet0;
     $$23 = $1857;$$2332 = $1858;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1856 = ($1853|0)==($1850|0);
     $first$57 = $1856 ? $first : $1853;
     $$0 = $first$57;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 116:  {
    $1859 = (($first) + 2|0);
    HEAP8[$97>>0] = 2;
    $1860 = (($97) + 1|0);
    HEAP8[$1860>>0] = 33;
    $1861 = (($97) + 2|0);
    HEAP8[$1861>>0] = 0;
    __THREW__ = 0;
    $1862 = (invoke_iiiii(49,($1859|0),($last|0),($97|0),($db|0))|0);
    $1863 = __THREW__; __THREW__ = 0;
    $1864 = $1863&1;
    if ($1864) {
     $1866 = ___cxa_find_matching_catch()|0;
     $1867 = tempRet0;
     $$23 = $1866;$$2332 = $1867;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1865 = ($1862|0)==($1859|0);
     $first$58 = $1865 ? $first : $1862;
     $$0 = $first$58;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 120:  {
    $1868 = (($first) + 2|0);
    $1869 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1868,$last,$db)|0);
    $1870 = ($1869|0)==($1868|0);
    L1222: do {
     if ($1870) {
      $$03$i180 = $1868;
     } else {
      $1871 = HEAP32[$db>>2]|0;
      $1872 = (($db) + 4|0);
      $1873 = HEAP32[$1872>>2]|0;
      $1874 = ($1871|0)==($1873|0);
      if ($1874) {
       $$03$i180 = $1868;
      } else {
       $1875 = (($1873) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($29,$1875);
       __THREW__ = 0;
       $1876 = (invoke_iiiii(33,($29|0),0,(2368|0),10)|0);
       $1877 = __THREW__; __THREW__ = 0;
       $1878 = $1877&1;
       do {
        if ($1878) {
         $1939 = ___cxa_find_matching_catch()|0;
         $1940 = tempRet0;
         $$1$i179 = $1940;$$12$i178 = $1939;
        } else {
         ;HEAP32[$28+0>>2]=HEAP32[$1876+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$1876+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$1876+8>>2]|0;
         ;HEAP32[$1876+0>>2]=0|0;HEAP32[$1876+4>>2]=0|0;HEAP32[$1876+8>>2]=0|0;
         __THREW__ = 0;
         $1879 = (invoke_iiii(32,($28|0),(2000|0),1)|0);
         $1880 = __THREW__; __THREW__ = 0;
         $1881 = $1880&1;
         if ($1881) {
          $1941 = ___cxa_find_matching_catch()|0;
          $1942 = tempRet0;
          $1943 = HEAP8[$28>>0]|0;
          $1944 = $1943 & 1;
          $1945 = ($1944<<24>>24)==(0);
          if ($1945) {
           $$1$i179 = $1942;$$12$i178 = $1941;
           break;
          }
          $1946 = (($28) + 8|0);
          $1947 = HEAP32[$1946>>2]|0;
          _free($1947);
          $$1$i179 = $1942;$$12$i178 = $1941;
          break;
         }
         $1882 = HEAP8[$1879>>0]|0;
         $1883 = (($1879) + 1|0);
         ;HEAP8[$$sroa$6401+0>>0]=HEAP8[$1883+0>>0]|0;HEAP8[$$sroa$6401+1>>0]=HEAP8[$1883+1>>0]|0;HEAP8[$$sroa$6401+2>>0]=HEAP8[$1883+2>>0]|0;HEAP8[$$sroa$6401+3>>0]=HEAP8[$1883+3>>0]|0;HEAP8[$$sroa$6401+4>>0]=HEAP8[$1883+4>>0]|0;HEAP8[$$sroa$6401+5>>0]=HEAP8[$1883+5>>0]|0;HEAP8[$$sroa$6401+6>>0]=HEAP8[$1883+6>>0]|0;
         $1884 = (($1879) + 8|0);
         $1885 = HEAP32[$1884>>2]|0;
         ;HEAP32[$1879+0>>2]=0|0;HEAP32[$1879+4>>2]=0|0;HEAP32[$1879+8>>2]=0|0;
         $1886 = HEAP8[$1875>>0]|0;
         $1887 = $1886 & 1;
         $1888 = ($1887<<24>>24)==(0);
         do {
          if ($1888) {
           $1889 = (($1875) + 1|0);
           HEAP8[$1889>>0] = 0;
           HEAP8[$1875>>0] = 0;
          } else {
           $1890 = (($1873) + -16|0);
           $1891 = HEAP32[$1890>>2]|0;
           HEAP8[$1891>>0] = 0;
           $1892 = (($1873) + -20|0);
           HEAP32[$1892>>2] = 0;
           $$pre$i$i$i$i = HEAP8[$1875>>0]|0;
           $1893 = $$pre$i$i$i$i & 1;
           $1894 = ($1893<<24>>24)==(0);
           if ($1894) {
            $1899 = $$pre$i$i$i$i;$1908 = 10;
           } else {
            $1895 = HEAP32[$1875>>2]|0;
            $1896 = $1895 & -2;
            $phitmp$i$i$i$i$i$i$i = (($1896) + -1)|0;
            $1897 = $1895&255;
            $1899 = $1897;$1908 = $phitmp$i$i$i$i$i$i$i;
           }
           $1898 = $1899 & 1;
           $1900 = ($1898<<24>>24)==(0);
           if ($1900) {
            $1901 = $1899&255;
            $1902 = $1901 >>> 1;
            $1903 = ($1899&255)<(22);
            if ($1903) {
             $1907 = 10;$1927 = $1902;$3031 = 1;
            } else {
             $1904 = (($1902) + 16)|0;
             $1905 = $1904 & 240;
             $phitmp$i2$i$i$i$i$i$i = (($1905) + -1)|0;
             $1907 = $phitmp$i2$i$i$i$i$i$i;$1927 = $1902;$3031 = 1;
            }
           } else {
            $1907 = 10;$1927 = 0;$3031 = 0;
           }
           $1906 = ($1907|0)==($1908|0);
           if (!($1906)) {
            $1909 = ($1907|0)==(10);
            if ($1909) {
             $1914 = (($1875) + 1|0);
             $1915 = HEAP32[$1890>>2]|0;
             if ($3031) {
              $1916 = $1899&255;
              $1917 = $1916 >>> 1;
              $1918 = (($1917) + 1)|0;
              _memcpy(($1914|0),($1915|0),($1918|0))|0;
              _free($1915);
             } else {
              $1923 = HEAP8[$1915>>0]|0;
              HEAP8[$1914>>0] = $1923;
              _free($1915);
             }
             $1928 = $1927 << 1;
             $1929 = $1928&255;
             HEAP8[$1875>>0] = $1929;
             break;
            }
            $1910 = ($1907>>>0)<=($1908>>>0);
            $1911 = (($1907) + 1)|0;
            $1912 = (_malloc($1911)|0);
            $1913 = ($1912|0)==(0|0);
            $or$cond$i$i$i$i$i$i = $1910 & $1913;
            if (!($or$cond$i$i$i$i$i$i)) {
             if ($3031) {
              $1919 = (($1875) + 1|0);
              $1920 = $1899&255;
              $1921 = $1920 >>> 1;
              $1922 = (($1921) + 1)|0;
              _memcpy(($1912|0),($1919|0),($1922|0))|0;
             } else {
              $1924 = HEAP32[$1890>>2]|0;
              $1925 = HEAP8[$1924>>0]|0;
              HEAP8[$1912>>0] = $1925;
              _free($1924);
             }
             $1926 = $1911 | 1;
             HEAP32[$1875>>2] = $1926;
             HEAP32[$1892>>2] = $1927;
             HEAP32[$1890>>2] = $1912;
            }
           }
          }
         } while(0);
         HEAP8[$1875>>0] = $1882;
         $1930 = (($1873) + -23|0);
         ;HEAP8[$1930+0>>0]=HEAP8[$$sroa$6401+0>>0]|0;HEAP8[$1930+1>>0]=HEAP8[$$sroa$6401+1>>0]|0;HEAP8[$1930+2>>0]=HEAP8[$$sroa$6401+2>>0]|0;HEAP8[$1930+3>>0]=HEAP8[$$sroa$6401+3>>0]|0;HEAP8[$1930+4>>0]=HEAP8[$$sroa$6401+4>>0]|0;HEAP8[$1930+5>>0]=HEAP8[$$sroa$6401+5>>0]|0;HEAP8[$1930+6>>0]=HEAP8[$$sroa$6401+6>>0]|0;
         $1931 = (($1873) + -16|0);
         HEAP32[$1931>>2] = $1885;
         ;HEAP8[$$sroa$6401+0>>0]=0|0;HEAP8[$$sroa$6401+1>>0]=0|0;HEAP8[$$sroa$6401+2>>0]=0|0;HEAP8[$$sroa$6401+3>>0]=0|0;HEAP8[$$sroa$6401+4>>0]=0|0;HEAP8[$$sroa$6401+5>>0]=0|0;HEAP8[$$sroa$6401+6>>0]=0|0;
         $$pre442 = HEAP8[$28>>0]|0;
         $phitmp472 = $$pre442 & 1;
         $phitmp473 = ($phitmp472<<24>>24)==(0);
         if (!($phitmp473)) {
          $1932 = (($28) + 8|0);
          $1933 = HEAP32[$1932>>2]|0;
          _free($1933);
         }
         $1934 = HEAP8[$29>>0]|0;
         $1935 = $1934 & 1;
         $1936 = ($1935<<24>>24)==(0);
         if ($1936) {
          $$03$i180 = $1869;
          break L1222;
         }
         $1937 = (($29) + 8|0);
         $1938 = HEAP32[$1937>>2]|0;
         _free($1938);
         $$03$i180 = $1869;
         break L1222;
        }
       } while(0);
       $1948 = HEAP8[$29>>0]|0;
       $1949 = $1948 & 1;
       $1950 = ($1949<<24>>24)==(0);
       if ($1950) {
        ___resumeException($$12$i178|0);
        // unreachable;
       }
       $1951 = (($29) + 8|0);
       $1952 = HEAP32[$1951>>2]|0;
       _free($1952);
       ___resumeException($$12$i178|0);
       // unreachable;
      }
     }
    } while(0);
    $1953 = ($$03$i180|0)==($1868|0);
    $first$59 = $1953 ? $first : $$03$i180;
    $$0 = $first$59;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 111:  {
   $1954 = (($t$0) + 1|0);
   $1955 = HEAP8[$1954>>0]|0;
   $1956 = $1955 << 24 >> 24;
   if ((($1956|0) == 110)) {
    $1957 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$0 = $1957;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1956|0) == 111)) {
    $1958 = (($first) + 2|0);
    HEAP8[$98>>0] = 4;
    $1959 = (($98) + 1|0);
    HEAP8[$1959>>0]=31868&255;HEAP8[$1959+1>>0]=31868>>8;
    $1960 = (($98) + 3|0);
    HEAP8[$1960>>0] = 0;
    __THREW__ = 0;
    $1961 = (invoke_iiiii(48,($1958|0),($last|0),($98|0),($db|0))|0);
    $1962 = __THREW__; __THREW__ = 0;
    $1963 = $1962&1;
    if ($1963) {
     $1965 = ___cxa_find_matching_catch()|0;
     $1966 = tempRet0;
     $$23 = $1965;$$2332 = $1966;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1964 = ($1961|0)==($1958|0);
     $first$60 = $1964 ? $first : $1961;
     $$0 = $first$60;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1956|0) == 114)) {
    $1967 = (($first) + 2|0);
    HEAP8[$99>>0] = 2;
    $1968 = (($99) + 1|0);
    HEAP8[$1968>>0] = 124;
    $1969 = (($99) + 2|0);
    HEAP8[$1969>>0] = 0;
    __THREW__ = 0;
    $1970 = (invoke_iiiii(48,($1967|0),($last|0),($99|0),($db|0))|0);
    $1971 = __THREW__; __THREW__ = 0;
    $1972 = $1971&1;
    if ($1972) {
     $1974 = ___cxa_find_matching_catch()|0;
     $1975 = tempRet0;
     $$23 = $1974;$$2332 = $1975;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1973 = ($1970|0)==($1967|0);
     $first$61 = $1973 ? $first : $1970;
     $$0 = $first$61;
     STACKTOP = sp;return ($$0|0);
    }
   } else if ((($1956|0) == 82)) {
    $1976 = (($first) + 2|0);
    HEAP8[$100>>0] = 4;
    $1977 = (($100) + 1|0);
    HEAP8[$1977>>0]=15740&255;HEAP8[$1977+1>>0]=15740>>8;
    $1978 = (($100) + 3|0);
    HEAP8[$1978>>0] = 0;
    __THREW__ = 0;
    $1979 = (invoke_iiiii(48,($1976|0),($last|0),($100|0),($db|0))|0);
    $1980 = __THREW__; __THREW__ = 0;
    $1981 = $1980&1;
    if ($1981) {
     $1983 = ___cxa_find_matching_catch()|0;
     $1984 = tempRet0;
     $$23 = $1983;$$2332 = $1984;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1982 = ($1979|0)==($1976|0);
     $first$62 = $1982 ? $first : $1979;
     $$0 = $first$62;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 112:  {
   $1985 = (($t$0) + 1|0);
   $1986 = HEAP8[$1985>>0]|0;
   $1987 = $1986 << 24 >> 24;
   switch ($1987|0) {
   case 109:  {
    $1988 = (($first) + 2|0);
    HEAP8[$101>>0] = 6;
    $1989 = (($101) + 1|0);
    ;HEAP8[$1989+0>>0]=HEAP8[2208+0>>0]|0;HEAP8[$1989+1>>0]=HEAP8[2208+1>>0]|0;HEAP8[$1989+2>>0]=HEAP8[2208+2>>0]|0;
    $1990 = (($101) + 4|0);
    HEAP8[$1990>>0] = 0;
    __THREW__ = 0;
    $1991 = (invoke_iiiii(48,($1988|0),($last|0),($101|0),($db|0))|0);
    $1992 = __THREW__; __THREW__ = 0;
    $1993 = $1992&1;
    if ($1993) {
     $1995 = ___cxa_find_matching_catch()|0;
     $1996 = tempRet0;
     $$23 = $1995;$$2332 = $1996;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $1994 = ($1991|0)==($1988|0);
     $first$63 = $1994 ? $first : $1991;
     $$0 = $first$63;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 108:  {
    $1997 = (($first) + 2|0);
    HEAP8[$102>>0] = 2;
    $1998 = (($102) + 1|0);
    HEAP8[$1998>>0] = 43;
    $1999 = (($102) + 2|0);
    HEAP8[$1999>>0] = 0;
    __THREW__ = 0;
    $2000 = (invoke_iiiii(48,($1997|0),($last|0),($102|0),($db|0))|0);
    $2001 = __THREW__; __THREW__ = 0;
    $2002 = $2001&1;
    if ($2002) {
     $2004 = ___cxa_find_matching_catch()|0;
     $2005 = tempRet0;
     $$23 = $2004;$$2332 = $2005;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2003 = ($2000|0)==($1997|0);
     $first$64 = $2003 ? $first : $2000;
     $$0 = $first$64;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 76:  {
    $2006 = (($first) + 2|0);
    HEAP8[$103>>0] = 4;
    $2007 = (($103) + 1|0);
    HEAP8[$2007>>0]=15659&255;HEAP8[$2007+1>>0]=15659>>8;
    $2008 = (($103) + 3|0);
    HEAP8[$2008>>0] = 0;
    __THREW__ = 0;
    $2009 = (invoke_iiiii(48,($2006|0),($last|0),($103|0),($db|0))|0);
    $2010 = __THREW__; __THREW__ = 0;
    $2011 = $2010&1;
    if ($2011) {
     $2013 = ___cxa_find_matching_catch()|0;
     $2014 = tempRet0;
     $$23 = $2013;$$2332 = $2014;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2012 = ($2009|0)==($2006|0);
     $first$65 = $2012 ? $first : $2009;
     $$0 = $first$65;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 112:  {
    $2015 = (($first) + 2|0);
    $2016 = ($2015|0)==($last|0);
    if (!($2016)) {
     $2017 = HEAP8[$2015>>0]|0;
     $2018 = ($2017<<24>>24)==(95);
     if ($2018) {
      $2019 = (($first) + 3|0);
      HEAP8[$104>>0] = 4;
      $2020 = (($104) + 1|0);
      HEAP8[$2020>>0]=11051&255;HEAP8[$2020+1>>0]=11051>>8;
      $2021 = (($104) + 3|0);
      HEAP8[$2021>>0] = 0;
      __THREW__ = 0;
      $2022 = (invoke_iiiii(49,($2019|0),($last|0),($104|0),($db|0))|0);
      $2023 = __THREW__; __THREW__ = 0;
      $2024 = $2023&1;
      if ($2024) {
       $2026 = ___cxa_find_matching_catch()|0;
       $2027 = tempRet0;
       $$23 = $2026;$$2332 = $2027;
       ___resumeException($$23|0);
       // unreachable;
      } else {
       $2025 = ($2022|0)==($2019|0);
       $first$66 = $2025 ? $first : $2022;
       $$0 = $first$66;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    $2028 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2015,$last,$db)|0);
    $2029 = ($2028|0)==($2015|0);
    if ($2029) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2030 = HEAP32[$db>>2]|0;
    $2031 = (($db) + 4|0);
    $2032 = HEAP32[$2031>>2]|0;
    $2033 = ($2030|0)==($2032|0);
    if ($2033) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2034 = (($2032) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($107,$2034);
    __THREW__ = 0;
    $2035 = (invoke_iiiii(33,($107|0),0,(2008|0),1)|0);
    $2036 = __THREW__; __THREW__ = 0;
    $2037 = $2036&1;
    do {
     if ($2037) {
      $2055 = ___cxa_find_matching_catch()|0;
      $2056 = tempRet0;
      $$14 = $2055;$$1423 = $2056;
     } else {
      ;HEAP32[$106+0>>2]=HEAP32[$2035+0>>2]|0;HEAP32[$106+4>>2]=HEAP32[$2035+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$2035+8>>2]|0;
      ;HEAP32[$2035+0>>2]=0|0;HEAP32[$2035+4>>2]=0|0;HEAP32[$2035+8>>2]=0|0;
      __THREW__ = 0;
      $2038 = (invoke_iiii(32,($106|0),(2216|0),3)|0);
      $2039 = __THREW__; __THREW__ = 0;
      $2040 = $2039&1;
      if ($2040) {
       $2057 = ___cxa_find_matching_catch()|0;
       $2058 = tempRet0;
       $2059 = HEAP8[$106>>0]|0;
       $2060 = $2059 & 1;
       $2061 = ($2060<<24>>24)==(0);
       if ($2061) {
        $$14 = $2057;$$1423 = $2058;
        break;
       }
       $2062 = (($106) + 8|0);
       $2063 = HEAP32[$2062>>2]|0;
       _free($2063);
       $$14 = $2057;$$1423 = $2058;
       break;
      }
      $2041 = HEAP8[$2038>>0]|0;
      $2042 = (($2038) + 1|0);
      ;HEAP8[$$sroa$4364+0>>0]=HEAP8[$2042+0>>0]|0;HEAP8[$$sroa$4364+1>>0]=HEAP8[$2042+1>>0]|0;HEAP8[$$sroa$4364+2>>0]=HEAP8[$2042+2>>0]|0;HEAP8[$$sroa$4364+3>>0]=HEAP8[$2042+3>>0]|0;HEAP8[$$sroa$4364+4>>0]=HEAP8[$2042+4>>0]|0;HEAP8[$$sroa$4364+5>>0]=HEAP8[$2042+5>>0]|0;HEAP8[$$sroa$4364+6>>0]=HEAP8[$2042+6>>0]|0;
      $2043 = (($2038) + 8|0);
      $2044 = HEAP32[$2043>>2]|0;
      ;HEAP32[$2038+0>>2]=0|0;HEAP32[$2038+4>>2]=0|0;HEAP32[$2038+8>>2]=0|0;
      HEAP8[$105>>0] = $2041;
      $2045 = (($105) + 1|0);
      ;HEAP8[$2045+0>>0]=HEAP8[$$sroa$4364+0>>0]|0;HEAP8[$2045+1>>0]=HEAP8[$$sroa$4364+1>>0]|0;HEAP8[$2045+2>>0]=HEAP8[$$sroa$4364+2>>0]|0;HEAP8[$2045+3>>0]=HEAP8[$$sroa$4364+3>>0]|0;HEAP8[$2045+4>>0]=HEAP8[$$sroa$4364+4>>0]|0;HEAP8[$2045+5>>0]=HEAP8[$$sroa$4364+5>>0]|0;HEAP8[$2045+6>>0]=HEAP8[$$sroa$4364+6>>0]|0;
      $2046 = (($105) + 8|0);
      HEAP32[$2046>>2] = $2044;
      ;HEAP8[$$sroa$4364+0>>0]=0|0;HEAP8[$$sroa$4364+1>>0]=0|0;HEAP8[$$sroa$4364+2>>0]=0|0;HEAP8[$$sroa$4364+3>>0]=0|0;HEAP8[$$sroa$4364+4>>0]=0|0;HEAP8[$$sroa$4364+5>>0]=0|0;HEAP8[$$sroa$4364+6>>0]=0|0;
      $2047 = (($105) + 12|0);
      ;HEAP32[$2047+0>>2]=0|0;HEAP32[$2047+4>>2]=0|0;HEAP32[$2047+8>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2034,$105);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($105);
      $$pre443 = HEAP8[$106>>0]|0;
      $phitmp470 = $$pre443 & 1;
      $phitmp471 = ($phitmp470<<24>>24)==(0);
      if (!($phitmp471)) {
       $2048 = (($106) + 8|0);
       $2049 = HEAP32[$2048>>2]|0;
       _free($2049);
      }
      $2050 = HEAP8[$107>>0]|0;
      $2051 = $2050 & 1;
      $2052 = ($2051<<24>>24)==(0);
      if ($2052) {
       $$0 = $2028;
       STACKTOP = sp;return ($$0|0);
      }
      $2053 = (($107) + 8|0);
      $2054 = HEAP32[$2053>>2]|0;
      _free($2054);
      $$0 = $2028;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $2064 = HEAP8[$107>>0]|0;
    $2065 = $2064 & 1;
    $2066 = ($2065<<24>>24)==(0);
    if ($2066) {
     $$23 = $$14;$$2332 = $$1423;
     ___resumeException($$23|0);
     // unreachable;
    }
    $2067 = (($107) + 8|0);
    $2068 = HEAP32[$2067>>2]|0;
    _free($2068);
    $$23 = $$14;$$2332 = $$1423;
    ___resumeException($$23|0);
    // unreachable;
    break;
   }
   case 115:  {
    $2069 = (($first) + 2|0);
    HEAP8[$108>>0] = 2;
    $2070 = (($108) + 1|0);
    HEAP8[$2070>>0] = 43;
    $2071 = (($108) + 2|0);
    HEAP8[$2071>>0] = 0;
    __THREW__ = 0;
    $2072 = (invoke_iiiii(49,($2069|0),($last|0),($108|0),($db|0))|0);
    $2073 = __THREW__; __THREW__ = 0;
    $2074 = $2073&1;
    if ($2074) {
     $2076 = ___cxa_find_matching_catch()|0;
     $2077 = tempRet0;
     $$23 = $2076;$$2332 = $2077;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2075 = ($2072|0)==($2069|0);
     $first$67 = $2075 ? $first : $2072;
     $$0 = $first$67;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 116:  {
    $2078 = ($122|0)>(2);
    if (!($2078)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2079 = HEAP8[$first>>0]|0;
    $2080 = ($2079<<24>>24)==(112);
    if (!($2080)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2081 = (($first) + 1|0);
    $2082 = HEAP8[$2081>>0]|0;
    $2083 = ($2082<<24>>24)==(116);
    if (!($2083)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2084 = (($first) + 2|0);
    $2085 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2084,$last,$db)|0);
    $2086 = ($2085|0)==($2084|0);
    if ($2086) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2087 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2085,$last,$db)|0);
    $2088 = ($2087|0)==($2085|0);
    if ($2088) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2089 = (($db) + 4|0);
    $2090 = HEAP32[$2089>>2]|0;
    $2091 = HEAP32[$db>>2]|0;
    $2092 = $2090;
    $2093 = $2091;
    $2094 = (($2092) - ($2093))|0;
    $2095 = (($2094|0) / 24)&-1;
    $2096 = ($2095>>>0)<(2);
    if ($2096) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2097 = (($2090) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i170,$2097);
    $2098 = HEAP32[$2089>>2]|0;
    $2099 = (($2098) + -24|0);
    $2101 = $2098;
    while(1) {
     $2100 = (($2101) + -24|0);
     HEAP32[$2089>>2] = $2100;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2100);
     $2102 = HEAP32[$2089>>2]|0;
     $2103 = ($2102|0)==($2099|0);
     if ($2103) {
      break;
     } else {
      $2101 = $2102;
     }
    }
    $2104 = (($2098) + -48|0);
    __THREW__ = 0;
    (invoke_iiii(32,($2104|0),(2360|0),2)|0);
    $2105 = __THREW__; __THREW__ = 0;
    $2106 = $2105&1;
    if (!($2106)) {
     $2107 = HEAP32[$2089>>2]|0;
     $2108 = (($2107) + -24|0);
     $2109 = HEAP8[$tmp$i170>>0]|0;
     $2110 = $2109 & 1;
     $2111 = ($2110<<24>>24)==(0);
     if ($2111) {
      $2116 = (($tmp$i170) + 1|0);
      $2117 = $2109&255;
      $2118 = $2117 >>> 1;
      $2119 = $2116;$2120 = $2118;
     } else {
      $2112 = (($tmp$i170) + 8|0);
      $2113 = HEAP32[$2112>>2]|0;
      $2114 = (($tmp$i170) + 4|0);
      $2115 = HEAP32[$2114>>2]|0;
      $2119 = $2113;$2120 = $2115;
     }
     __THREW__ = 0;
     (invoke_iiii(32,($2108|0),($2119|0),($2120|0))|0);
     $2121 = __THREW__; __THREW__ = 0;
     $2122 = $2121&1;
     if (!($2122)) {
      if ($2111) {
       $$0 = $2087;
       STACKTOP = sp;return ($$0|0);
      }
      $2123 = (($tmp$i170) + 8|0);
      $2124 = HEAP32[$2123>>2]|0;
      _free($2124);
      $$0 = $2087;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $2125 = ___cxa_find_matching_catch()|0;
    $2126 = tempRet0;
    $2127 = HEAP8[$tmp$i170>>0]|0;
    $2128 = $2127 & 1;
    $2129 = ($2128<<24>>24)==(0);
    if ($2129) {
     ___resumeException($2125|0);
     // unreachable;
    }
    $2130 = (($tmp$i170) + 8|0);
    $2131 = HEAP32[$2130>>2]|0;
    _free($2131);
    ___resumeException($2125|0);
    // unreachable;
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 113:  {
   $2132 = (($t$0) + 1|0);
   $2133 = HEAP8[$2132>>0]|0;
   $2134 = ($2133<<24>>24)==(117);
   if (!($2134)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2135 = (($first) + 2|0);
   $2136 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2135,$last,$db)|0);
   $2137 = ($2136|0)==($2135|0);
   if ($2137) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2138 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2136,$last,$db)|0);
   $2139 = ($2138|0)==($2136|0);
   if ($2139) {
    $2316 = (($db) + 4|0);
    $2317 = HEAP32[$2316>>2]|0;
    $2318 = (($2317) + -24|0);
    $2320 = $2317;
    while(1) {
     $2319 = (($2320) + -24|0);
     HEAP32[$2316>>2] = $2319;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2319);
     $2321 = HEAP32[$2316>>2]|0;
     $2322 = ($2321|0)==($2318|0);
     if ($2322) {
      $$0 = $first;
      break;
     } else {
      $2320 = $2321;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   $2140 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2138,$last,$db)|0);
   $2141 = ($2140|0)==($2138|0);
   $2142 = (($db) + 4|0);
   $2143 = HEAP32[$2142>>2]|0;
   if ($2141) {
    $2306 = (($2143) + -24|0);
    $2308 = $2143;
    while(1) {
     $2307 = (($2308) + -24|0);
     HEAP32[$2142>>2] = $2307;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2307);
     $2309 = HEAP32[$2142>>2]|0;
     $2310 = ($2309|0)==($2306|0);
     if ($2310) {
      break;
     } else {
      $2308 = $2309;
     }
    }
    $2311 = (($2143) + -48|0);
    $2313 = $2306;
    while(1) {
     $2312 = (($2313) + -24|0);
     HEAP32[$2142>>2] = $2312;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2312);
     $2314 = HEAP32[$2142>>2]|0;
     $2315 = ($2314|0)==($2311|0);
     if ($2315) {
      $$0 = $first;
      break;
     } else {
      $2313 = $2314;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   $2144 = HEAP32[$db>>2]|0;
   $2145 = $2143;
   $2146 = $2144;
   $2147 = (($2145) - ($2146))|0;
   $2148 = (($2147|0) / 24)&-1;
   $2149 = ($2148>>>0)<(3);
   if ($2149) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $2150 = (($2143) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op3,$2150);
   $2151 = HEAP32[$2142>>2]|0;
   $2152 = (($2151) + -24|0);
   $2154 = $2151;
   while(1) {
    $2153 = (($2154) + -24|0);
    HEAP32[$2142>>2] = $2153;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2153);
    $2155 = HEAP32[$2142>>2]|0;
    $2156 = ($2155|0)==($2152|0);
    if ($2156) {
     break;
    } else {
     $2154 = $2155;
    }
   }
   $2157 = (($2151) + -48|0);
   __THREW__ = 0;
   invoke_vii(36,($op27|0),($2157|0));
   $2158 = __THREW__; __THREW__ = 0;
   $2159 = $2158&1;
   if ($2159) {
    $2250 = ___cxa_find_matching_catch()|0;
    $2251 = tempRet0;
    $$22 = $2250;$$2231 = $2251;
   } else {
    $2160 = HEAP32[$2142>>2]|0;
    $2161 = (($2160) + -24|0);
    $2163 = $2160;
    while(1) {
     $2162 = (($2163) + -24|0);
     HEAP32[$2142>>2] = $2162;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2162);
     $2164 = HEAP32[$2142>>2]|0;
     $2165 = ($2164|0)==($2161|0);
     if ($2165) {
      break;
     } else {
      $2163 = $2164;
     }
    }
    $2166 = (($2160) + -48|0);
    __THREW__ = 0;
    invoke_vii(36,($op18|0),($2166|0));
    $2167 = __THREW__; __THREW__ = 0;
    $2168 = $2167&1;
    if ($2168) {
     $2252 = ___cxa_find_matching_catch()|0;
     $2253 = tempRet0;
     $$21 = $2252;$$2130 = $2253;
    } else {
     $2169 = HEAP32[$2142>>2]|0;
     $2170 = (($2169) + -24|0);
     __THREW__ = 0;
     invoke_viii(46,($114|0),(2008|0),($op18|0));
     $2171 = __THREW__; __THREW__ = 0;
     $2172 = $2171&1;
     if ($2172) {
      $2254 = ___cxa_find_matching_catch()|0;
      $2255 = tempRet0;
      $$20 = $2254;$$2029 = $2255;
     } else {
      __THREW__ = 0;
      $2173 = (invoke_iiii(32,($114|0),(2224|0),5)|0);
      $2174 = __THREW__; __THREW__ = 0;
      $2175 = $2174&1;
      if ($2175) {
       $2256 = ___cxa_find_matching_catch()|0;
       $2257 = tempRet0;
       $$19 = $2256;$$1928 = $2257;
      } else {
       ;HEAP32[$113+0>>2]=HEAP32[$2173+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$2173+4>>2]|0;HEAP32[$113+8>>2]=HEAP32[$2173+8>>2]|0;
       ;HEAP32[$2173+0>>2]=0|0;HEAP32[$2173+4>>2]=0|0;HEAP32[$2173+8>>2]=0|0;
       $2176 = HEAP8[$op27>>0]|0;
       $2177 = $2176 & 1;
       $2178 = ($2177<<24>>24)==(0);
       if ($2178) {
        $2183 = (($op27) + 1|0);
        $2184 = $2176&255;
        $2185 = $2184 >>> 1;
        $2186 = $2183;$2187 = $2185;
       } else {
        $2179 = (($op27) + 8|0);
        $2180 = HEAP32[$2179>>2]|0;
        $2181 = (($op27) + 4|0);
        $2182 = HEAP32[$2181>>2]|0;
        $2186 = $2180;$2187 = $2182;
       }
       __THREW__ = 0;
       $2188 = (invoke_iiii(32,($113|0),($2186|0),($2187|0))|0);
       $2189 = __THREW__; __THREW__ = 0;
       $2190 = $2189&1;
       do {
        if ($2190) {
         $2258 = ___cxa_find_matching_catch()|0;
         $2259 = tempRet0;
         $$18 = $2258;$$1827 = $2259;
        } else {
         ;HEAP32[$112+0>>2]=HEAP32[$2188+0>>2]|0;HEAP32[$112+4>>2]=HEAP32[$2188+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$2188+8>>2]|0;
         ;HEAP32[$2188+0>>2]=0|0;HEAP32[$2188+4>>2]=0|0;HEAP32[$2188+8>>2]=0|0;
         __THREW__ = 0;
         $2191 = (invoke_iiii(32,($112|0),(2232|0),5)|0);
         $2192 = __THREW__; __THREW__ = 0;
         $2193 = $2192&1;
         do {
          if ($2193) {
           $2260 = ___cxa_find_matching_catch()|0;
           $2261 = tempRet0;
           $$17 = $2260;$$1726 = $2261;
          } else {
           ;HEAP32[$111+0>>2]=HEAP32[$2191+0>>2]|0;HEAP32[$111+4>>2]=HEAP32[$2191+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$2191+8>>2]|0;
           ;HEAP32[$2191+0>>2]=0|0;HEAP32[$2191+4>>2]=0|0;HEAP32[$2191+8>>2]=0|0;
           $2194 = HEAP8[$op3>>0]|0;
           $2195 = $2194 & 1;
           $2196 = ($2195<<24>>24)==(0);
           if ($2196) {
            $2201 = (($op3) + 1|0);
            $2202 = $2194&255;
            $2203 = $2202 >>> 1;
            $2204 = $2201;$2205 = $2203;
           } else {
            $2197 = (($op3) + 8|0);
            $2198 = HEAP32[$2197>>2]|0;
            $2199 = (($op3) + 4|0);
            $2200 = HEAP32[$2199>>2]|0;
            $2204 = $2198;$2205 = $2200;
           }
           __THREW__ = 0;
           $2206 = (invoke_iiii(32,($111|0),($2204|0),($2205|0))|0);
           $2207 = __THREW__; __THREW__ = 0;
           $2208 = $2207&1;
           do {
            if ($2208) {
             $2262 = ___cxa_find_matching_catch()|0;
             $2263 = tempRet0;
             $$16 = $2262;$$1625 = $2263;
            } else {
             ;HEAP32[$110+0>>2]=HEAP32[$2206+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$2206+4>>2]|0;HEAP32[$110+8>>2]=HEAP32[$2206+8>>2]|0;
             ;HEAP32[$2206+0>>2]=0|0;HEAP32[$2206+4>>2]=0|0;HEAP32[$2206+8>>2]=0|0;
             __THREW__ = 0;
             $2209 = (invoke_iiii(32,($110|0),(2000|0),1)|0);
             $2210 = __THREW__; __THREW__ = 0;
             $2211 = $2210&1;
             if ($2211) {
              $2264 = ___cxa_find_matching_catch()|0;
              $2265 = tempRet0;
              $2266 = HEAP8[$110>>0]|0;
              $2267 = $2266 & 1;
              $2268 = ($2267<<24>>24)==(0);
              if ($2268) {
               $$16 = $2264;$$1625 = $2265;
               break;
              }
              $2269 = (($110) + 8|0);
              $2270 = HEAP32[$2269>>2]|0;
              _free($2270);
              $$16 = $2264;$$1625 = $2265;
              break;
             }
             $2212 = HEAP8[$2209>>0]|0;
             $2213 = (($2209) + 1|0);
             ;HEAP8[$$sroa$4+0>>0]=HEAP8[$2213+0>>0]|0;HEAP8[$$sroa$4+1>>0]=HEAP8[$2213+1>>0]|0;HEAP8[$$sroa$4+2>>0]=HEAP8[$2213+2>>0]|0;HEAP8[$$sroa$4+3>>0]=HEAP8[$2213+3>>0]|0;HEAP8[$$sroa$4+4>>0]=HEAP8[$2213+4>>0]|0;HEAP8[$$sroa$4+5>>0]=HEAP8[$2213+5>>0]|0;HEAP8[$$sroa$4+6>>0]=HEAP8[$2213+6>>0]|0;
             $2214 = (($2209) + 8|0);
             $2215 = HEAP32[$2214>>2]|0;
             ;HEAP32[$2209+0>>2]=0|0;HEAP32[$2209+4>>2]=0|0;HEAP32[$2209+8>>2]=0|0;
             HEAP8[$109>>0] = $2212;
             $2216 = (($109) + 1|0);
             ;HEAP8[$2216+0>>0]=HEAP8[$$sroa$4+0>>0]|0;HEAP8[$2216+1>>0]=HEAP8[$$sroa$4+1>>0]|0;HEAP8[$2216+2>>0]=HEAP8[$$sroa$4+2>>0]|0;HEAP8[$2216+3>>0]=HEAP8[$$sroa$4+3>>0]|0;HEAP8[$2216+4>>0]=HEAP8[$$sroa$4+4>>0]|0;HEAP8[$2216+5>>0]=HEAP8[$$sroa$4+5>>0]|0;HEAP8[$2216+6>>0]=HEAP8[$$sroa$4+6>>0]|0;
             $2217 = (($109) + 8|0);
             HEAP32[$2217>>2] = $2215;
             ;HEAP8[$$sroa$4+0>>0]=0|0;HEAP8[$$sroa$4+1>>0]=0|0;HEAP8[$$sroa$4+2>>0]=0|0;HEAP8[$$sroa$4+3>>0]=0|0;HEAP8[$$sroa$4+4>>0]=0|0;HEAP8[$$sroa$4+5>>0]=0|0;HEAP8[$$sroa$4+6>>0]=0|0;
             $2218 = (($109) + 12|0);
             ;HEAP32[$2218+0>>2]=0|0;HEAP32[$2218+4>>2]=0|0;HEAP32[$2218+8>>2]=0|0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2170,$109);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($109);
             $$pre444 = HEAP8[$110>>0]|0;
             $phitmp468 = $$pre444 & 1;
             $phitmp469 = ($phitmp468<<24>>24)==(0);
             if (!($phitmp469)) {
              $2219 = (($110) + 8|0);
              $2220 = HEAP32[$2219>>2]|0;
              _free($2220);
             }
             $2221 = HEAP8[$111>>0]|0;
             $2222 = $2221 & 1;
             $2223 = ($2222<<24>>24)==(0);
             if (!($2223)) {
              $2224 = (($111) + 8|0);
              $2225 = HEAP32[$2224>>2]|0;
              _free($2225);
             }
             $2226 = HEAP8[$112>>0]|0;
             $2227 = $2226 & 1;
             $2228 = ($2227<<24>>24)==(0);
             if (!($2228)) {
              $2229 = (($112) + 8|0);
              $2230 = HEAP32[$2229>>2]|0;
              _free($2230);
             }
             $2231 = HEAP8[$113>>0]|0;
             $2232 = $2231 & 1;
             $2233 = ($2232<<24>>24)==(0);
             if (!($2233)) {
              $2234 = (($113) + 8|0);
              $2235 = HEAP32[$2234>>2]|0;
              _free($2235);
             }
             $2236 = HEAP8[$114>>0]|0;
             $2237 = $2236 & 1;
             $2238 = ($2237<<24>>24)==(0);
             if (!($2238)) {
              $2239 = (($114) + 8|0);
              $2240 = HEAP32[$2239>>2]|0;
              _free($2240);
             }
             $2241 = HEAP8[$op18>>0]|0;
             $2242 = $2241 & 1;
             $2243 = ($2242<<24>>24)==(0);
             if (!($2243)) {
              $2244 = (($op18) + 8|0);
              $2245 = HEAP32[$2244>>2]|0;
              _free($2245);
             }
             if (!($2178)) {
              $2246 = (($op27) + 8|0);
              $2247 = HEAP32[$2246>>2]|0;
              _free($2247);
             }
             if ($2196) {
              $$0 = $2140;
              STACKTOP = sp;return ($$0|0);
             }
             $2248 = (($op3) + 8|0);
             $2249 = HEAP32[$2248>>2]|0;
             _free($2249);
             $$0 = $2140;
             STACKTOP = sp;return ($$0|0);
            }
           } while(0);
           $2271 = HEAP8[$111>>0]|0;
           $2272 = $2271 & 1;
           $2273 = ($2272<<24>>24)==(0);
           if ($2273) {
            $$17 = $$16;$$1726 = $$1625;
            break;
           }
           $2274 = (($111) + 8|0);
           $2275 = HEAP32[$2274>>2]|0;
           _free($2275);
           $$17 = $$16;$$1726 = $$1625;
          }
         } while(0);
         $2276 = HEAP8[$112>>0]|0;
         $2277 = $2276 & 1;
         $2278 = ($2277<<24>>24)==(0);
         if ($2278) {
          $$18 = $$17;$$1827 = $$1726;
          break;
         }
         $2279 = (($112) + 8|0);
         $2280 = HEAP32[$2279>>2]|0;
         _free($2280);
         $$18 = $$17;$$1827 = $$1726;
        }
       } while(0);
       $2281 = HEAP8[$113>>0]|0;
       $2282 = $2281 & 1;
       $2283 = ($2282<<24>>24)==(0);
       if ($2283) {
        $$19 = $$18;$$1928 = $$1827;
       } else {
        $2284 = (($113) + 8|0);
        $2285 = HEAP32[$2284>>2]|0;
        _free($2285);
        $$19 = $$18;$$1928 = $$1827;
       }
      }
      $2286 = HEAP8[$114>>0]|0;
      $2287 = $2286 & 1;
      $2288 = ($2287<<24>>24)==(0);
      if ($2288) {
       $$20 = $$19;$$2029 = $$1928;
      } else {
       $2289 = (($114) + 8|0);
       $2290 = HEAP32[$2289>>2]|0;
       _free($2290);
       $$20 = $$19;$$2029 = $$1928;
      }
     }
     $2291 = HEAP8[$op18>>0]|0;
     $2292 = $2291 & 1;
     $2293 = ($2292<<24>>24)==(0);
     if ($2293) {
      $$21 = $$20;$$2130 = $$2029;
     } else {
      $2294 = (($op18) + 8|0);
      $2295 = HEAP32[$2294>>2]|0;
      _free($2295);
      $$21 = $$20;$$2130 = $$2029;
     }
    }
    $2296 = HEAP8[$op27>>0]|0;
    $2297 = $2296 & 1;
    $2298 = ($2297<<24>>24)==(0);
    if ($2298) {
     $$22 = $$21;$$2231 = $$2130;
    } else {
     $2299 = (($op27) + 8|0);
     $2300 = HEAP32[$2299>>2]|0;
     _free($2300);
     $$22 = $$21;$$2231 = $$2130;
    }
   }
   $2301 = HEAP8[$op3>>0]|0;
   $2302 = $2301 & 1;
   $2303 = ($2302<<24>>24)==(0);
   if ($2303) {
    $$23 = $$22;$$2332 = $$2231;
    ___resumeException($$23|0);
    // unreachable;
   }
   $2304 = (($op3) + 8|0);
   $2305 = HEAP32[$2304>>2]|0;
   _free($2305);
   $$23 = $$22;$$2332 = $$2231;
   ___resumeException($$23|0);
   // unreachable;
   break;
  }
  case 114:  {
   $2323 = (($t$0) + 1|0);
   $2324 = HEAP8[$2323>>0]|0;
   $2325 = $2324 << 24 >> 24;
   switch ($2325|0) {
   case 99:  {
    $2326 = ($122|0)>(2);
    if (!($2326)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2327 = HEAP8[$first>>0]|0;
    $2328 = ($2327<<24>>24)==(114);
    if (!($2328)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2329 = (($first) + 1|0);
    $2330 = HEAP8[$2329>>0]|0;
    $2331 = ($2330<<24>>24)==(99);
    if (!($2331)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2332 = (($first) + 2|0);
    $2333 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2332,$last,$db)|0);
    $2334 = ($2333|0)==($2332|0);
    if ($2334) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2335 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2333,$last,$db)|0);
    $2336 = ($2335|0)==($2333|0);
    if ($2336) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2337 = (($db) + 4|0);
    $2338 = HEAP32[$2337>>2]|0;
    $2339 = HEAP32[$db>>2]|0;
    $2340 = $2338;
    $2341 = $2339;
    $2342 = (($2340) - ($2341))|0;
    $2343 = (($2342|0) / 24)&-1;
    $2344 = ($2343>>>0)<(2);
    if ($2344) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2345 = (($2338) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i152,$2345);
    $2346 = HEAP32[$2337>>2]|0;
    $2347 = (($2346) + -24|0);
    $2349 = $2346;
    while(1) {
     $2348 = (($2349) + -24|0);
     HEAP32[$2337>>2] = $2348;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2348);
     $2350 = HEAP32[$2337>>2]|0;
     $2351 = ($2350|0)==($2347|0);
     if ($2351) {
      break;
     } else {
      $2349 = $2350;
     }
    }
    $2352 = (($2346) + -48|0);
    __THREW__ = 0;
    invoke_vii(36,($34|0),($2352|0));
    $2353 = __THREW__; __THREW__ = 0;
    $2354 = $2353&1;
    if ($2354) {
     $2405 = ___cxa_find_matching_catch()|0;
     $2406 = tempRet0;
     $$4$i168 = $2406;$$45$i167 = $2405;
    } else {
     __THREW__ = 0;
     $2355 = (invoke_iiiii(33,($34|0),0,(2336|0),17)|0);
     $2356 = __THREW__; __THREW__ = 0;
     $2357 = $2356&1;
     if ($2357) {
      $2407 = ___cxa_find_matching_catch()|0;
      $2408 = tempRet0;
      $$3$i166 = $2408;$$34$i165 = $2407;
     } else {
      ;HEAP32[$33+0>>2]=HEAP32[$2355+0>>2]|0;HEAP32[$33+4>>2]=HEAP32[$2355+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$2355+8>>2]|0;
      ;HEAP32[$2355+0>>2]=0|0;HEAP32[$2355+4>>2]=0|0;HEAP32[$2355+8>>2]=0|0;
      __THREW__ = 0;
      $2358 = (invoke_iiii(32,($33|0),(2328|0),2)|0);
      $2359 = __THREW__; __THREW__ = 0;
      $2360 = $2359&1;
      if ($2360) {
       $2409 = ___cxa_find_matching_catch()|0;
       $2410 = tempRet0;
       $$2$i164 = $2410;$$23$i163 = $2409;
      } else {
       ;HEAP32[$32+0>>2]=HEAP32[$2358+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$2358+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$2358+8>>2]|0;
       ;HEAP32[$2358+0>>2]=0|0;HEAP32[$2358+4>>2]=0|0;HEAP32[$2358+8>>2]=0|0;
       $2361 = HEAP8[$expr$i152>>0]|0;
       $2362 = $2361 & 1;
       $2363 = ($2362<<24>>24)==(0);
       if ($2363) {
        $2368 = (($expr$i152) + 1|0);
        $2369 = $2361&255;
        $2370 = $2369 >>> 1;
        $2371 = $2368;$2372 = $2370;
       } else {
        $2364 = (($expr$i152) + 8|0);
        $2365 = HEAP32[$2364>>2]|0;
        $2366 = (($expr$i152) + 4|0);
        $2367 = HEAP32[$2366>>2]|0;
        $2371 = $2365;$2372 = $2367;
       }
       __THREW__ = 0;
       $2373 = (invoke_iiii(32,($32|0),($2371|0),($2372|0))|0);
       $2374 = __THREW__; __THREW__ = 0;
       $2375 = $2374&1;
       do {
        if ($2375) {
         $2411 = ___cxa_find_matching_catch()|0;
         $2412 = tempRet0;
         $$1$i162 = $2412;$$12$i161 = $2411;
        } else {
         ;HEAP32[$31+0>>2]=HEAP32[$2373+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$2373+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$2373+8>>2]|0;
         ;HEAP32[$2373+0>>2]=0|0;HEAP32[$2373+4>>2]=0|0;HEAP32[$2373+8>>2]=0|0;
         __THREW__ = 0;
         $2376 = (invoke_iiii(32,($31|0),(2000|0),1)|0);
         $2377 = __THREW__; __THREW__ = 0;
         $2378 = $2377&1;
         if ($2378) {
          $2413 = ___cxa_find_matching_catch()|0;
          $2414 = tempRet0;
          $2415 = HEAP8[$31>>0]|0;
          $2416 = $2415 & 1;
          $2417 = ($2416<<24>>24)==(0);
          if ($2417) {
           $$1$i162 = $2414;$$12$i161 = $2413;
           break;
          }
          $2418 = (($31) + 8|0);
          $2419 = HEAP32[$2418>>2]|0;
          _free($2419);
          $$1$i162 = $2414;$$12$i161 = $2413;
          break;
         }
         $2379 = HEAP8[$2376>>0]|0;
         $2380 = (($2376) + 1|0);
         ;HEAP8[$$sroa$5398+0>>0]=HEAP8[$2380+0>>0]|0;HEAP8[$$sroa$5398+1>>0]=HEAP8[$2380+1>>0]|0;HEAP8[$$sroa$5398+2>>0]=HEAP8[$2380+2>>0]|0;HEAP8[$$sroa$5398+3>>0]=HEAP8[$2380+3>>0]|0;HEAP8[$$sroa$5398+4>>0]=HEAP8[$2380+4>>0]|0;HEAP8[$$sroa$5398+5>>0]=HEAP8[$2380+5>>0]|0;HEAP8[$$sroa$5398+6>>0]=HEAP8[$2380+6>>0]|0;
         $2381 = (($2376) + 8|0);
         $2382 = HEAP32[$2381>>2]|0;
         ;HEAP32[$2376+0>>2]=0|0;HEAP32[$2376+4>>2]=0|0;HEAP32[$2376+8>>2]=0|0;
         HEAP8[$30>>0] = $2379;
         $2383 = (($30) + 1|0);
         ;HEAP8[$2383+0>>0]=HEAP8[$$sroa$5398+0>>0]|0;HEAP8[$2383+1>>0]=HEAP8[$$sroa$5398+1>>0]|0;HEAP8[$2383+2>>0]=HEAP8[$$sroa$5398+2>>0]|0;HEAP8[$2383+3>>0]=HEAP8[$$sroa$5398+3>>0]|0;HEAP8[$2383+4>>0]=HEAP8[$$sroa$5398+4>>0]|0;HEAP8[$2383+5>>0]=HEAP8[$$sroa$5398+5>>0]|0;HEAP8[$2383+6>>0]=HEAP8[$$sroa$5398+6>>0]|0;
         $2384 = (($30) + 8|0);
         HEAP32[$2384>>2] = $2382;
         ;HEAP8[$$sroa$5398+0>>0]=0|0;HEAP8[$$sroa$5398+1>>0]=0|0;HEAP8[$$sroa$5398+2>>0]=0|0;HEAP8[$$sroa$5398+3>>0]=0|0;HEAP8[$$sroa$5398+4>>0]=0|0;HEAP8[$$sroa$5398+5>>0]=0|0;HEAP8[$$sroa$5398+6>>0]=0|0;
         $2385 = (($30) + 12|0);
         ;HEAP32[$2385+0>>2]=0|0;HEAP32[$2385+4>>2]=0|0;HEAP32[$2385+8>>2]=0|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2352,$30);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
         $$pre445 = HEAP8[$31>>0]|0;
         $phitmp466 = $$pre445 & 1;
         $phitmp467 = ($phitmp466<<24>>24)==(0);
         if (!($phitmp467)) {
          $2386 = (($31) + 8|0);
          $2387 = HEAP32[$2386>>2]|0;
          _free($2387);
         }
         $2388 = HEAP8[$32>>0]|0;
         $2389 = $2388 & 1;
         $2390 = ($2389<<24>>24)==(0);
         if (!($2390)) {
          $2391 = (($32) + 8|0);
          $2392 = HEAP32[$2391>>2]|0;
          _free($2392);
         }
         $2393 = HEAP8[$33>>0]|0;
         $2394 = $2393 & 1;
         $2395 = ($2394<<24>>24)==(0);
         if (!($2395)) {
          $2396 = (($33) + 8|0);
          $2397 = HEAP32[$2396>>2]|0;
          _free($2397);
         }
         $2398 = HEAP8[$34>>0]|0;
         $2399 = $2398 & 1;
         $2400 = ($2399<<24>>24)==(0);
         if (!($2400)) {
          $2401 = (($34) + 8|0);
          $2402 = HEAP32[$2401>>2]|0;
          _free($2402);
         }
         if ($2363) {
          $$0 = $2335;
          STACKTOP = sp;return ($$0|0);
         }
         $2403 = (($expr$i152) + 8|0);
         $2404 = HEAP32[$2403>>2]|0;
         _free($2404);
         $$0 = $2335;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $2420 = HEAP8[$32>>0]|0;
       $2421 = $2420 & 1;
       $2422 = ($2421<<24>>24)==(0);
       if ($2422) {
        $$2$i164 = $$1$i162;$$23$i163 = $$12$i161;
       } else {
        $2423 = (($32) + 8|0);
        $2424 = HEAP32[$2423>>2]|0;
        _free($2424);
        $$2$i164 = $$1$i162;$$23$i163 = $$12$i161;
       }
      }
      $2425 = HEAP8[$33>>0]|0;
      $2426 = $2425 & 1;
      $2427 = ($2426<<24>>24)==(0);
      if ($2427) {
       $$3$i166 = $$2$i164;$$34$i165 = $$23$i163;
      } else {
       $2428 = (($33) + 8|0);
       $2429 = HEAP32[$2428>>2]|0;
       _free($2429);
       $$3$i166 = $$2$i164;$$34$i165 = $$23$i163;
      }
     }
     $2430 = HEAP8[$34>>0]|0;
     $2431 = $2430 & 1;
     $2432 = ($2431<<24>>24)==(0);
     if ($2432) {
      $$4$i168 = $$3$i166;$$45$i167 = $$34$i165;
     } else {
      $2433 = (($34) + 8|0);
      $2434 = HEAP32[$2433>>2]|0;
      _free($2434);
      $$4$i168 = $$3$i166;$$45$i167 = $$34$i165;
     }
    }
    $2435 = HEAP8[$expr$i152>>0]|0;
    $2436 = $2435 & 1;
    $2437 = ($2436<<24>>24)==(0);
    if ($2437) {
     ___resumeException($$45$i167|0);
     // unreachable;
    }
    $2438 = (($expr$i152) + 8|0);
    $2439 = HEAP32[$2438>>2]|0;
    _free($2439);
    ___resumeException($$45$i167|0);
    // unreachable;
    break;
   }
   case 109:  {
    $2440 = (($first) + 2|0);
    HEAP8[$115>>0] = 2;
    $2441 = (($115) + 1|0);
    HEAP8[$2441>>0] = 37;
    $2442 = (($115) + 2|0);
    HEAP8[$2442>>0] = 0;
    __THREW__ = 0;
    $2443 = (invoke_iiiii(48,($2440|0),($last|0),($115|0),($db|0))|0);
    $2444 = __THREW__; __THREW__ = 0;
    $2445 = $2444&1;
    if ($2445) {
     $2447 = ___cxa_find_matching_catch()|0;
     $2448 = tempRet0;
     $$23 = $2447;$$2332 = $2448;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2446 = ($2443|0)==($2440|0);
     $first$68 = $2446 ? $first : $2443;
     $$0 = $first$68;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 77:  {
    $2449 = (($first) + 2|0);
    HEAP8[$116>>0] = 4;
    $2450 = (($116) + 1|0);
    HEAP8[$2450>>0]=15653&255;HEAP8[$2450+1>>0]=15653>>8;
    $2451 = (($116) + 3|0);
    HEAP8[$2451>>0] = 0;
    __THREW__ = 0;
    $2452 = (invoke_iiiii(48,($2449|0),($last|0),($116|0),($db|0))|0);
    $2453 = __THREW__; __THREW__ = 0;
    $2454 = $2453&1;
    if ($2454) {
     $2456 = ___cxa_find_matching_catch()|0;
     $2457 = tempRet0;
     $$23 = $2456;$$2332 = $2457;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2455 = ($2452|0)==($2449|0);
     $first$69 = $2455 ? $first : $2452;
     $$0 = $first$69;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 115:  {
    $2458 = (($first) + 2|0);
    HEAP8[$117>>0] = 4;
    $2459 = (($117) + 1|0);
    HEAP8[$2459>>0]=15934&255;HEAP8[$2459+1>>0]=15934>>8;
    $2460 = (($117) + 3|0);
    HEAP8[$2460>>0] = 0;
    __THREW__ = 0;
    $2461 = (invoke_iiiii(48,($2458|0),($last|0),($117|0),($db|0))|0);
    $2462 = __THREW__; __THREW__ = 0;
    $2463 = $2462&1;
    if ($2463) {
     $2465 = ___cxa_find_matching_catch()|0;
     $2466 = tempRet0;
     $$23 = $2465;$$2332 = $2466;
     ___resumeException($$23|0);
     // unreachable;
    } else {
     $2464 = ($2461|0)==($2458|0);
     $first$70 = $2464 ? $first : $2461;
     $$0 = $first$70;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 83:  {
    $2467 = (($first) + 2|0);
    HEAP8[$118>>0] = 6;
    $2468 = (($118) + 1|0);
    ;HEAP8[$2468+0>>0]=HEAP8[2240+0>>0]|0;HEAP8[$2468+1>>0]=HEAP8[2240+1>>0]|0;HEAP8[$2468+2>>0]=HEAP8[2240+2>>0]|0;
    $2469 = (($118) + 4|0);
    HEAP8[$2469>>0] = 0;
    __THREW__ = 0;
    $2470 = (invoke_iiiii(48,($2467|0),($last|0),($118|0),($db|0))|0);
    $2471 = __THREW__; __THREW__ = 0;
    $2472 = $2471&1;
    if (!($2472)) {
     $2473 = ($2470|0)==($2467|0);
     $first$71 = $2473 ? $first : $2470;
     STACKTOP = sp;return ($first$71|0);
    }
    $2474 = ___cxa_find_matching_catch()|0;
    $2475 = tempRet0;
    $$23 = $2474;$$2332 = $2475;
    ___resumeException($$23|0);
    // unreachable;
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 115:  {
   $2476 = (($t$0) + 1|0);
   $2477 = HEAP8[$2476>>0]|0;
   $2478 = $2477 << 24 >> 24;
   switch ($2478|0) {
   case 90:  {
    $2699 = $t$0;
    $2700 = (($120) - ($2699))|0;
    $2701 = ($2700|0)>(2);
    if (!($2701)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2702 = (($t$0) + 2|0);
    $2703 = HEAP8[$2702>>0]|0;
    $2704 = $2703 << 24 >> 24;
    if ((($2704|0) == 84)) {
     $2705 = ($122|0)>(2);
     if (!($2705)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2706 = HEAP8[$first>>0]|0;
     $2707 = ($2706<<24>>24)==(115);
     if (!($2707)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2708 = (($first) + 1|0);
     $2709 = HEAP8[$2708>>0]|0;
     $2710 = ($2709<<24>>24)==(90);
     if (!($2710)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2711 = (($first) + 2|0);
     $2712 = HEAP8[$2711>>0]|0;
     $2713 = ($2712<<24>>24)==(84);
     if (!($2713)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2714 = (($db) + 4|0);
     $2715 = HEAP32[$2714>>2]|0;
     $2716 = HEAP32[$db>>2]|0;
     $2717 = $2715;
     $2718 = $2716;
     $2719 = (($2717) - ($2718))|0;
     $2720 = (($2719|0) / 24)&-1;
     $2721 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($2711,$last,$db)|0);
     $2722 = HEAP32[$2714>>2]|0;
     $2723 = HEAP32[$db>>2]|0;
     $2724 = $2722;
     $2725 = $2723;
     $2726 = (($2724) - ($2725))|0;
     $2727 = (($2726|0) / 24)&-1;
     $2728 = ($2721|0)==($2711|0);
     if ($2728) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     HEAP8[$tmp$i>>0] = 20;
     $2729 = (($tmp$i) + 1|0);
     dest=$2729+0|0; src=2272+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $2730 = (($tmp$i) + 11|0);
     HEAP8[$2730>>0] = 0;
     $2731 = ($2720|0)==($2727|0);
     L1614: do {
      if ($2731) {
       label = 989;
      } else {
       $2732 = (($2723) + (($2720*24)|0)|0);
       __THREW__ = 0;
       invoke_vii(36,($54|0),($2732|0));
       $2733 = __THREW__; __THREW__ = 0;
       $2734 = $2733&1;
       if ($2734) {
        label = 980;
       } else {
        $2735 = HEAP8[$54>>0]|0;
        $2736 = $2735 & 1;
        $2737 = ($2736<<24>>24)==(0);
        if ($2737) {
         $2742 = (($54) + 1|0);
         $2743 = $2735&255;
         $2744 = $2743 >>> 1;
         $2745 = $2742;$2746 = $2744;
        } else {
         $2738 = (($54) + 8|0);
         $2739 = HEAP32[$2738>>2]|0;
         $2740 = (($54) + 4|0);
         $2741 = HEAP32[$2740>>2]|0;
         $2745 = $2739;$2746 = $2741;
        }
        __THREW__ = 0;
        (invoke_iiii(32,($tmp$i|0),($2745|0),($2746|0))|0);
        $2747 = __THREW__; __THREW__ = 0;
        $2748 = $2747&1;
        if ($2748) {
         $2784 = ___cxa_find_matching_catch()|0;
         $2785 = tempRet0;
         if ($2737) {
          $$1$i = $2785;$$12$i = $2784;
          break;
         }
         $2786 = (($54) + 8|0);
         $2787 = HEAP32[$2786>>2]|0;
         _free($2787);
         $$1$i = $2785;$$12$i = $2784;
         break;
        }
        if (!($2737)) {
         $2749 = (($54) + 8|0);
         $2750 = HEAP32[$2749>>2]|0;
         _free($2750);
        }
        $k$08$i = (($2720) + 1)|0;
        $2751 = ($k$08$i|0)==($2727|0);
        if ($2751) {
         label = 989;
        } else {
         $2752 = (($55) + 1|0);
         $2753 = (($55) + 8|0);
         $2754 = (($55) + 4|0);
         $2755 = (($56) + 8|0);
         $k$09$i = $k$08$i;
         while(1) {
          $2756 = HEAP32[$db>>2]|0;
          $2757 = (($2756) + (($k$09$i*24)|0)|0);
          __THREW__ = 0;
          invoke_vii(36,($56|0),($2757|0));
          $2758 = __THREW__; __THREW__ = 0;
          $2759 = $2758&1;
          if ($2759) {
           label = 979;
           break;
          }
          __THREW__ = 0;
          $2760 = (invoke_iiiii(33,($56|0),0,(2288|0),2)|0);
          $2761 = __THREW__; __THREW__ = 0;
          $2762 = $2761&1;
          if ($2762) {
           label = 984;
           break;
          }
          ;HEAP32[$55+0>>2]=HEAP32[$2760+0>>2]|0;HEAP32[$55+4>>2]=HEAP32[$2760+4>>2]|0;HEAP32[$55+8>>2]=HEAP32[$2760+8>>2]|0;
          ;HEAP32[$2760+0>>2]=0|0;HEAP32[$2760+4>>2]=0|0;HEAP32[$2760+8>>2]=0|0;
          $2763 = HEAP8[$55>>0]|0;
          $2764 = $2763 & 1;
          $2765 = ($2764<<24>>24)==(0);
          if ($2765) {
           $2768 = $2763&255;
           $2769 = $2768 >>> 1;
           $2770 = $2752;$2771 = $2769;
          } else {
           $2766 = HEAP32[$2753>>2]|0;
           $2767 = HEAP32[$2754>>2]|0;
           $2770 = $2766;$2771 = $2767;
          }
          __THREW__ = 0;
          (invoke_iiii(32,($tmp$i|0),($2770|0),($2771|0))|0);
          $2772 = __THREW__; __THREW__ = 0;
          $2773 = $2772&1;
          if ($2773) {
           label = 985;
           break;
          }
          if (!($2765)) {
           $2774 = HEAP32[$2753>>2]|0;
           _free($2774);
          }
          $2775 = HEAP8[$56>>0]|0;
          $2776 = $2775 & 1;
          $2777 = ($2776<<24>>24)==(0);
          if (!($2777)) {
           $2778 = HEAP32[$2755>>2]|0;
           _free($2778);
          }
          $k$0$i = (($k$09$i) + 1)|0;
          $2779 = ($k$0$i|0)==($2727|0);
          if ($2779) {
           label = 989;
           break L1614;
          } else {
           $k$09$i = $k$0$i;
          }
         }
         if ((label|0) == 979) {
          $2780 = ___cxa_find_matching_catch()|0;
          $2781 = tempRet0;
          $lpad$phi$i$index = $2780;$lpad$phi$i$index2 = $2781;
          label = 981;
          break;
         }
         else if ((label|0) == 984) {
          $2788 = ___cxa_find_matching_catch()|0;
          $2789 = tempRet0;
          $$0$i = $2789;$$01$i = $2788;
         }
         else if ((label|0) == 985) {
          $2790 = ___cxa_find_matching_catch()|0;
          $2791 = tempRet0;
          if ($2765) {
           $$0$i = $2791;$$01$i = $2790;
          } else {
           $2792 = HEAP32[$2753>>2]|0;
           _free($2792);
           $$0$i = $2791;$$01$i = $2790;
          }
         }
         $2793 = HEAP8[$56>>0]|0;
         $2794 = $2793 & 1;
         $2795 = ($2794<<24>>24)==(0);
         if ($2795) {
          $$1$i = $$0$i;$$12$i = $$01$i;
         } else {
          $2796 = HEAP32[$2755>>2]|0;
          _free($2796);
          $$1$i = $$0$i;$$12$i = $$01$i;
         }
        }
       }
      }
     } while(0);
     do {
      if ((label|0) == 989) {
       __THREW__ = 0;
       (invoke_iiii(32,($tmp$i|0),(2000|0),1)|0);
       $2797 = __THREW__; __THREW__ = 0;
       $2798 = $2797&1;
       if ($2798) {
        label = 980;
       } else {
        $$pre$i = HEAP32[$2714>>2]|0;
        if ($2731) {
         $2818 = $$pre$i;
        } else {
         $2799 = (($2720) - ($2727))|0;
         $2801 = $$pre$i;$k1$06$i = $2727;
         while(1) {
          $2800 = (($2801) + -24|0);
          $2803 = $2801;
          while(1) {
           $2802 = (($2803) + -24|0);
           HEAP32[$2714>>2] = $2802;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2802);
           $2804 = HEAP32[$2714>>2]|0;
           $2805 = ($2804|0)==($2800|0);
           if ($2805) {
            break;
           } else {
            $2803 = $2804;
           }
          }
          $2806 = (($k1$06$i) + -1)|0;
          $2807 = ($2806|0)==($2720|0);
          if ($2807) {
           break;
          } else {
           $2801 = $2800;$k1$06$i = $2806;
          }
         }
         $scevgep = (($$pre$i) + (($2799*24)|0)|0);
         $2818 = $scevgep;
        }
        $2808 = HEAP8[$tmp$i>>0]|0;
        $2809 = (($tmp$i) + 1|0);
        ;HEAP8[$$sroa$6+0>>0]=HEAP8[$2809+0>>0]|0;HEAP8[$$sroa$6+1>>0]=HEAP8[$2809+1>>0]|0;HEAP8[$$sroa$6+2>>0]=HEAP8[$2809+2>>0]|0;HEAP8[$$sroa$6+3>>0]=HEAP8[$2809+3>>0]|0;HEAP8[$$sroa$6+4>>0]=HEAP8[$2809+4>>0]|0;HEAP8[$$sroa$6+5>>0]=HEAP8[$2809+5>>0]|0;HEAP8[$$sroa$6+6>>0]=HEAP8[$2809+6>>0]|0;
        $2810 = (($tmp$i) + 8|0);
        $2811 = HEAP32[$2810>>2]|0;
        ;HEAP32[$tmp$i+0>>2]=0|0;HEAP32[$tmp$i+4>>2]=0|0;HEAP32[$tmp$i+8>>2]=0|0;
        HEAP8[$57>>0] = $2808;
        $2812 = (($57) + 1|0);
        ;HEAP8[$2812+0>>0]=HEAP8[$$sroa$6+0>>0]|0;HEAP8[$2812+1>>0]=HEAP8[$$sroa$6+1>>0]|0;HEAP8[$2812+2>>0]=HEAP8[$$sroa$6+2>>0]|0;HEAP8[$2812+3>>0]=HEAP8[$$sroa$6+3>>0]|0;HEAP8[$2812+4>>0]=HEAP8[$$sroa$6+4>>0]|0;HEAP8[$2812+5>>0]=HEAP8[$$sroa$6+5>>0]|0;HEAP8[$2812+6>>0]=HEAP8[$$sroa$6+6>>0]|0;
        $2813 = (($57) + 8|0);
        HEAP32[$2813>>2] = $2811;
        ;HEAP8[$$sroa$6+0>>0]=0|0;HEAP8[$$sroa$6+1>>0]=0|0;HEAP8[$$sroa$6+2>>0]=0|0;HEAP8[$$sroa$6+3>>0]=0|0;HEAP8[$$sroa$6+4>>0]=0|0;HEAP8[$$sroa$6+5>>0]=0|0;HEAP8[$$sroa$6+6>>0]=0|0;
        $2814 = (($57) + 12|0);
        ;HEAP32[$2814+0>>2]=0|0;HEAP32[$2814+4>>2]=0|0;HEAP32[$2814+8>>2]=0|0;
        $2815 = (($db) + 8|0);
        $2816 = HEAP32[$2815>>2]|0;
        $2817 = ($2818>>>0)<($2816>>>0);
        if ($2817) {
         $2819 = ($2818|0)==(0|0);
         if ($2819) {
          $2822 = 0;
         } else {
          ;HEAP32[$2818+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$2818+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$2818+8>>2]=HEAP32[$57+8>>2]|0;
          ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
          $2820 = (($2818) + 12|0);
          ;HEAP32[$2820+0>>2]=HEAP32[$2814+0>>2]|0;HEAP32[$2820+4>>2]=HEAP32[$2814+4>>2]|0;HEAP32[$2820+8>>2]=HEAP32[$2814+8>>2]|0;
          ;HEAP32[$2814+0>>2]=0|0;HEAP32[$2814+4>>2]=0|0;HEAP32[$2814+8>>2]=0|0;
          $$pre$i$i = HEAP32[$2714>>2]|0;
          $2822 = $$pre$i$i;
         }
         $2821 = (($2822) + 24|0);
         HEAP32[$2714>>2] = $2821;
        } else {
         $2823 = (($db) + 12|0);
         $2824 = HEAP32[$db>>2]|0;
         $2825 = $2818;
         $2826 = $2824;
         $2827 = (($2825) - ($2826))|0;
         $2828 = (($2827|0) / 24)&-1;
         $2829 = (($2828) + 1)|0;
         $2830 = ($2829|0)<(0);
         if ($2830) {
          __THREW__ = 0;
          invoke_v(41);
          $2831 = __THREW__; __THREW__ = 0;
          $2832 = $2831&1;
          if ($2832) {
           $2846 = ___cxa_find_matching_catch()|0;
           $2847 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($57);
           $$1$i = $2847;$$12$i = $2846;
           break;
          } else {
           // unreachable;
          }
         }
         $2833 = $2816;
         $2834 = (($2833) - ($2826))|0;
         $2835 = (($2834|0) / 24)&-1;
         $2836 = ($2835>>>0)<(1073741823);
         if ($2836) {
          $2837 = $2835 << 1;
          $2838 = ($2837>>>0)<($2829>>>0);
          $2839 = $2838 ? $2829 : $2837;
          $$0$i$i$i$i = $2839;
         } else {
          $$0$i$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$2828,$2823);
         $2840 = (($__v$i$i$i) + 8|0);
         $2841 = HEAP32[$2840>>2]|0;
         $2842 = ($2841|0)==(0|0);
         if (!($2842)) {
          ;HEAP32[$2841+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$2841+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$2841+8>>2]=HEAP32[$57+8>>2]|0;
          ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
          $2843 = (($2841) + 12|0);
          ;HEAP32[$2843+0>>2]=HEAP32[$2814+0>>2]|0;HEAP32[$2843+4>>2]=HEAP32[$2814+4>>2]|0;HEAP32[$2843+8>>2]=HEAP32[$2814+8>>2]|0;
          ;HEAP32[$2814+0>>2]=0|0;HEAP32[$2814+4>>2]=0|0;HEAP32[$2814+8>>2]=0|0;
         }
         $2844 = (($2841) + 24|0);
         HEAP32[$2840>>2] = $2844;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($57);
        $$pre449 = HEAP8[$tmp$i>>0]|0;
        $phitmp458 = $$pre449 & 1;
        $phitmp459 = ($phitmp458<<24>>24)==(0);
        if ($phitmp459) {
         $$0 = $2721;
         STACKTOP = sp;return ($$0|0);
        }
        $2845 = HEAP32[$2810>>2]|0;
        _free($2845);
        $$0 = $2721;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     if ((label|0) == 980) {
      $2782 = ___cxa_find_matching_catch()|0;
      $2783 = tempRet0;
      $lpad$phi$i$index = $2782;$lpad$phi$i$index2 = $2783;
      label = 981;
     }
     if ((label|0) == 981) {
      $$1$i = $lpad$phi$i$index2;$$12$i = $lpad$phi$i$index;
     }
     $2848 = HEAP8[$tmp$i>>0]|0;
     $2849 = $2848 & 1;
     $2850 = ($2849<<24>>24)==(0);
     if ($2850) {
      ___resumeException($$12$i|0);
      // unreachable;
     }
     $2851 = (($tmp$i) + 8|0);
     $2852 = HEAP32[$2851>>2]|0;
     _free($2852);
     ___resumeException($$12$i|0);
     // unreachable;
    } else if ((($2704|0) == 102)) {
     $2853 = ($122|0)>(2);
     if (!($2853)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2854 = HEAP8[$first>>0]|0;
     $2855 = ($2854<<24>>24)==(115);
     if (!($2855)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2856 = (($first) + 1|0);
     $2857 = HEAP8[$2856>>0]|0;
     $2858 = ($2857<<24>>24)==(90);
     if (!($2858)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2859 = (($first) + 2|0);
     $2860 = HEAP8[$2859>>0]|0;
     $2861 = ($2860<<24>>24)==(102);
     if (!($2861)) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2862 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($2859,$last,$db)|0);
     $2863 = ($2862|0)==($2859|0);
     if ($2863) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2864 = HEAP32[$db>>2]|0;
     $2865 = (($db) + 4|0);
     $2866 = HEAP32[$2865>>2]|0;
     $2867 = ($2864|0)==($2866|0);
     if ($2867) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $2868 = (($2866) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($53,$2868);
     __THREW__ = 0;
     $2869 = (invoke_iiiii(33,($53|0),0,(2272|0),10)|0);
     $2870 = __THREW__; __THREW__ = 0;
     $2871 = $2870&1;
     do {
      if ($2871) {
       $2889 = ___cxa_find_matching_catch()|0;
       $2890 = tempRet0;
       $$1$i122 = $2890;$$12$i121 = $2889;
      } else {
       ;HEAP32[$52+0>>2]=HEAP32[$2869+0>>2]|0;HEAP32[$52+4>>2]=HEAP32[$2869+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$2869+8>>2]|0;
       ;HEAP32[$2869+0>>2]=0|0;HEAP32[$2869+4>>2]=0|0;HEAP32[$2869+8>>2]=0|0;
       __THREW__ = 0;
       $2872 = (invoke_iiii(32,($52|0),(2000|0),1)|0);
       $2873 = __THREW__; __THREW__ = 0;
       $2874 = $2873&1;
       if ($2874) {
        $2891 = ___cxa_find_matching_catch()|0;
        $2892 = tempRet0;
        $2893 = HEAP8[$52>>0]|0;
        $2894 = $2893 & 1;
        $2895 = ($2894<<24>>24)==(0);
        if ($2895) {
         $$1$i122 = $2892;$$12$i121 = $2891;
         break;
        }
        $2896 = (($52) + 8|0);
        $2897 = HEAP32[$2896>>2]|0;
        _free($2897);
        $$1$i122 = $2892;$$12$i121 = $2891;
        break;
       }
       $2875 = HEAP8[$2872>>0]|0;
       $2876 = (($2872) + 1|0);
       ;HEAP8[$$sroa$5+0>>0]=HEAP8[$2876+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$2876+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$2876+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$2876+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$2876+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$2876+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$2876+6>>0]|0;
       $2877 = (($2872) + 8|0);
       $2878 = HEAP32[$2877>>2]|0;
       ;HEAP32[$2872+0>>2]=0|0;HEAP32[$2872+4>>2]=0|0;HEAP32[$2872+8>>2]=0|0;
       HEAP8[$51>>0] = $2875;
       $2879 = (($51) + 1|0);
       ;HEAP8[$2879+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$2879+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$2879+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$2879+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$2879+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$2879+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$2879+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
       $2880 = (($51) + 8|0);
       HEAP32[$2880>>2] = $2878;
       ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
       $2881 = (($51) + 12|0);
       ;HEAP32[$2881+0>>2]=0|0;HEAP32[$2881+4>>2]=0|0;HEAP32[$2881+8>>2]=0|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2868,$51);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($51);
       $$pre450 = HEAP8[$52>>0]|0;
       $phitmp456 = $$pre450 & 1;
       $phitmp457 = ($phitmp456<<24>>24)==(0);
       if (!($phitmp457)) {
        $2882 = (($52) + 8|0);
        $2883 = HEAP32[$2882>>2]|0;
        _free($2883);
       }
       $2884 = HEAP8[$53>>0]|0;
       $2885 = $2884 & 1;
       $2886 = ($2885<<24>>24)==(0);
       if ($2886) {
        $$0 = $2862;
        STACKTOP = sp;return ($$0|0);
       }
       $2887 = (($53) + 8|0);
       $2888 = HEAP32[$2887>>2]|0;
       _free($2888);
       $$0 = $2862;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $2898 = HEAP8[$53>>0]|0;
     $2899 = $2898 & 1;
     $2900 = ($2899<<24>>24)==(0);
     if ($2900) {
      ___resumeException($$12$i121|0);
      // unreachable;
     }
     $2901 = (($53) + 8|0);
     $2902 = HEAP32[$2901>>2]|0;
     _free($2902);
     ___resumeException($$12$i121|0);
     // unreachable;
    } else {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 99:  {
    $2479 = ($122|0)>(2);
    if (!($2479)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2480 = HEAP8[$first>>0]|0;
    $2481 = ($2480<<24>>24)==(115);
    if (!($2481)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2482 = (($first) + 1|0);
    $2483 = HEAP8[$2482>>0]|0;
    $2484 = ($2483<<24>>24)==(99);
    if (!($2484)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2485 = (($first) + 2|0);
    $2486 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2485,$last,$db)|0);
    $2487 = ($2486|0)==($2485|0);
    if ($2487) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2488 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2486,$last,$db)|0);
    $2489 = ($2488|0)==($2486|0);
    if ($2489) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2490 = (($db) + 4|0);
    $2491 = HEAP32[$2490>>2]|0;
    $2492 = HEAP32[$db>>2]|0;
    $2493 = $2491;
    $2494 = $2492;
    $2495 = (($2493) - ($2494))|0;
    $2496 = (($2495|0) / 24)&-1;
    $2497 = ($2496>>>0)<(2);
    if ($2497) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2498 = (($2491) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i,$2498);
    $2499 = HEAP32[$2490>>2]|0;
    $2500 = (($2499) + -24|0);
    $2502 = $2499;
    while(1) {
     $2501 = (($2502) + -24|0);
     HEAP32[$2490>>2] = $2501;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2501);
     $2503 = HEAP32[$2490>>2]|0;
     $2504 = ($2503|0)==($2500|0);
     if ($2504) {
      break;
     } else {
      $2502 = $2503;
     }
    }
    $2505 = (($2499) + -48|0);
    __THREW__ = 0;
    invoke_vii(36,($39|0),($2505|0));
    $2506 = __THREW__; __THREW__ = 0;
    $2507 = $2506&1;
    if ($2507) {
     $2558 = ___cxa_find_matching_catch()|0;
     $2559 = tempRet0;
     $$4$i = $2559;$$45$i = $2558;
    } else {
     __THREW__ = 0;
     $2508 = (invoke_iiiii(33,($39|0),0,(2312|0),12)|0);
     $2509 = __THREW__; __THREW__ = 0;
     $2510 = $2509&1;
     if ($2510) {
      $2560 = ___cxa_find_matching_catch()|0;
      $2561 = tempRet0;
      $$3$i = $2561;$$34$i = $2560;
     } else {
      ;HEAP32[$38+0>>2]=HEAP32[$2508+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$2508+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$2508+8>>2]|0;
      ;HEAP32[$2508+0>>2]=0|0;HEAP32[$2508+4>>2]=0|0;HEAP32[$2508+8>>2]=0|0;
      __THREW__ = 0;
      $2511 = (invoke_iiii(32,($38|0),(2328|0),2)|0);
      $2512 = __THREW__; __THREW__ = 0;
      $2513 = $2512&1;
      if ($2513) {
       $2562 = ___cxa_find_matching_catch()|0;
       $2563 = tempRet0;
       $$2$i = $2563;$$23$i = $2562;
      } else {
       ;HEAP32[$37+0>>2]=HEAP32[$2511+0>>2]|0;HEAP32[$37+4>>2]=HEAP32[$2511+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$2511+8>>2]|0;
       ;HEAP32[$2511+0>>2]=0|0;HEAP32[$2511+4>>2]=0|0;HEAP32[$2511+8>>2]=0|0;
       $2514 = HEAP8[$expr$i>>0]|0;
       $2515 = $2514 & 1;
       $2516 = ($2515<<24>>24)==(0);
       if ($2516) {
        $2521 = (($expr$i) + 1|0);
        $2522 = $2514&255;
        $2523 = $2522 >>> 1;
        $2524 = $2521;$2525 = $2523;
       } else {
        $2517 = (($expr$i) + 8|0);
        $2518 = HEAP32[$2517>>2]|0;
        $2519 = (($expr$i) + 4|0);
        $2520 = HEAP32[$2519>>2]|0;
        $2524 = $2518;$2525 = $2520;
       }
       __THREW__ = 0;
       $2526 = (invoke_iiii(32,($37|0),($2524|0),($2525|0))|0);
       $2527 = __THREW__; __THREW__ = 0;
       $2528 = $2527&1;
       do {
        if ($2528) {
         $2564 = ___cxa_find_matching_catch()|0;
         $2565 = tempRet0;
         $$1$i151 = $2565;$$12$i150 = $2564;
        } else {
         ;HEAP32[$36+0>>2]=HEAP32[$2526+0>>2]|0;HEAP32[$36+4>>2]=HEAP32[$2526+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$2526+8>>2]|0;
         ;HEAP32[$2526+0>>2]=0|0;HEAP32[$2526+4>>2]=0|0;HEAP32[$2526+8>>2]=0|0;
         __THREW__ = 0;
         $2529 = (invoke_iiii(32,($36|0),(2000|0),1)|0);
         $2530 = __THREW__; __THREW__ = 0;
         $2531 = $2530&1;
         if ($2531) {
          $2566 = ___cxa_find_matching_catch()|0;
          $2567 = tempRet0;
          $2568 = HEAP8[$36>>0]|0;
          $2569 = $2568 & 1;
          $2570 = ($2569<<24>>24)==(0);
          if ($2570) {
           $$1$i151 = $2567;$$12$i150 = $2566;
           break;
          }
          $2571 = (($36) + 8|0);
          $2572 = HEAP32[$2571>>2]|0;
          _free($2572);
          $$1$i151 = $2567;$$12$i150 = $2566;
          break;
         }
         $2532 = HEAP8[$2529>>0]|0;
         $2533 = (($2529) + 1|0);
         ;HEAP8[$$sroa$5395+0>>0]=HEAP8[$2533+0>>0]|0;HEAP8[$$sroa$5395+1>>0]=HEAP8[$2533+1>>0]|0;HEAP8[$$sroa$5395+2>>0]=HEAP8[$2533+2>>0]|0;HEAP8[$$sroa$5395+3>>0]=HEAP8[$2533+3>>0]|0;HEAP8[$$sroa$5395+4>>0]=HEAP8[$2533+4>>0]|0;HEAP8[$$sroa$5395+5>>0]=HEAP8[$2533+5>>0]|0;HEAP8[$$sroa$5395+6>>0]=HEAP8[$2533+6>>0]|0;
         $2534 = (($2529) + 8|0);
         $2535 = HEAP32[$2534>>2]|0;
         ;HEAP32[$2529+0>>2]=0|0;HEAP32[$2529+4>>2]=0|0;HEAP32[$2529+8>>2]=0|0;
         HEAP8[$35>>0] = $2532;
         $2536 = (($35) + 1|0);
         ;HEAP8[$2536+0>>0]=HEAP8[$$sroa$5395+0>>0]|0;HEAP8[$2536+1>>0]=HEAP8[$$sroa$5395+1>>0]|0;HEAP8[$2536+2>>0]=HEAP8[$$sroa$5395+2>>0]|0;HEAP8[$2536+3>>0]=HEAP8[$$sroa$5395+3>>0]|0;HEAP8[$2536+4>>0]=HEAP8[$$sroa$5395+4>>0]|0;HEAP8[$2536+5>>0]=HEAP8[$$sroa$5395+5>>0]|0;HEAP8[$2536+6>>0]=HEAP8[$$sroa$5395+6>>0]|0;
         $2537 = (($35) + 8|0);
         HEAP32[$2537>>2] = $2535;
         ;HEAP8[$$sroa$5395+0>>0]=0|0;HEAP8[$$sroa$5395+1>>0]=0|0;HEAP8[$$sroa$5395+2>>0]=0|0;HEAP8[$$sroa$5395+3>>0]=0|0;HEAP8[$$sroa$5395+4>>0]=0|0;HEAP8[$$sroa$5395+5>>0]=0|0;HEAP8[$$sroa$5395+6>>0]=0|0;
         $2538 = (($35) + 12|0);
         ;HEAP32[$2538+0>>2]=0|0;HEAP32[$2538+4>>2]=0|0;HEAP32[$2538+8>>2]=0|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2505,$35);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
         $$pre446 = HEAP8[$36>>0]|0;
         $phitmp464 = $$pre446 & 1;
         $phitmp465 = ($phitmp464<<24>>24)==(0);
         if (!($phitmp465)) {
          $2539 = (($36) + 8|0);
          $2540 = HEAP32[$2539>>2]|0;
          _free($2540);
         }
         $2541 = HEAP8[$37>>0]|0;
         $2542 = $2541 & 1;
         $2543 = ($2542<<24>>24)==(0);
         if (!($2543)) {
          $2544 = (($37) + 8|0);
          $2545 = HEAP32[$2544>>2]|0;
          _free($2545);
         }
         $2546 = HEAP8[$38>>0]|0;
         $2547 = $2546 & 1;
         $2548 = ($2547<<24>>24)==(0);
         if (!($2548)) {
          $2549 = (($38) + 8|0);
          $2550 = HEAP32[$2549>>2]|0;
          _free($2550);
         }
         $2551 = HEAP8[$39>>0]|0;
         $2552 = $2551 & 1;
         $2553 = ($2552<<24>>24)==(0);
         if (!($2553)) {
          $2554 = (($39) + 8|0);
          $2555 = HEAP32[$2554>>2]|0;
          _free($2555);
         }
         if ($2516) {
          $$0 = $2488;
          STACKTOP = sp;return ($$0|0);
         }
         $2556 = (($expr$i) + 8|0);
         $2557 = HEAP32[$2556>>2]|0;
         _free($2557);
         $$0 = $2488;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $2573 = HEAP8[$37>>0]|0;
       $2574 = $2573 & 1;
       $2575 = ($2574<<24>>24)==(0);
       if ($2575) {
        $$2$i = $$1$i151;$$23$i = $$12$i150;
       } else {
        $2576 = (($37) + 8|0);
        $2577 = HEAP32[$2576>>2]|0;
        _free($2577);
        $$2$i = $$1$i151;$$23$i = $$12$i150;
       }
      }
      $2578 = HEAP8[$38>>0]|0;
      $2579 = $2578 & 1;
      $2580 = ($2579<<24>>24)==(0);
      if ($2580) {
       $$3$i = $$2$i;$$34$i = $$23$i;
      } else {
       $2581 = (($38) + 8|0);
       $2582 = HEAP32[$2581>>2]|0;
       _free($2582);
       $$3$i = $$2$i;$$34$i = $$23$i;
      }
     }
     $2583 = HEAP8[$39>>0]|0;
     $2584 = $2583 & 1;
     $2585 = ($2584<<24>>24)==(0);
     if ($2585) {
      $$4$i = $$3$i;$$45$i = $$34$i;
     } else {
      $2586 = (($39) + 8|0);
      $2587 = HEAP32[$2586>>2]|0;
      _free($2587);
      $$4$i = $$3$i;$$45$i = $$34$i;
     }
    }
    $2588 = HEAP8[$expr$i>>0]|0;
    $2589 = $2588 & 1;
    $2590 = ($2589<<24>>24)==(0);
    if ($2590) {
     ___resumeException($$45$i|0);
     // unreachable;
    }
    $2591 = (($expr$i) + 8|0);
    $2592 = HEAP32[$2591>>2]|0;
    _free($2592);
    ___resumeException($$45$i|0);
    // unreachable;
    break;
   }
   case 112:  {
    $2593 = ($122|0)>(2);
    if (!($2593)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2594 = HEAP8[$first>>0]|0;
    $2595 = ($2594<<24>>24)==(115);
    if (!($2595)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2596 = (($first) + 1|0);
    $2597 = HEAP8[$2596>>0]|0;
    $2598 = ($2597<<24>>24)==(112);
    if (!($2598)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2599 = (($first) + 2|0);
    $2600 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2599,$last,$db)|0);
    $2601 = ($2600|0)==($2599|0);
    $first$$i = $2601 ? $first : $2600;
    $$0 = $first$$i;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 114:  {
    $2602 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$0 = $2602;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 116:  {
    $2603 = ($122|0)>(2);
    if (!($2603)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2604 = HEAP8[$first>>0]|0;
    $2605 = ($2604<<24>>24)==(115);
    if (!($2605)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2606 = (($first) + 1|0);
    $2607 = HEAP8[$2606>>0]|0;
    $2608 = ($2607<<24>>24)==(116);
    if (!($2608)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2609 = (($first) + 2|0);
    $2610 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2609,$last,$db)|0);
    $2611 = ($2610|0)==($2609|0);
    if ($2611) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2612 = HEAP32[$db>>2]|0;
    $2613 = (($db) + 4|0);
    $2614 = HEAP32[$2613>>2]|0;
    $2615 = ($2612|0)==($2614|0);
    if ($2615) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2616 = (($2614) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($42,$2616);
    __THREW__ = 0;
    $2617 = (invoke_iiiii(33,($42|0),0,(2296|0),8)|0);
    $2618 = __THREW__; __THREW__ = 0;
    $2619 = $2618&1;
    do {
     if ($2619) {
      $2637 = ___cxa_find_matching_catch()|0;
      $2638 = tempRet0;
      $$1$i142 = $2638;$$12$i141 = $2637;
     } else {
      ;HEAP32[$41+0>>2]=HEAP32[$2617+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$2617+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$2617+8>>2]|0;
      ;HEAP32[$2617+0>>2]=0|0;HEAP32[$2617+4>>2]=0|0;HEAP32[$2617+8>>2]=0|0;
      __THREW__ = 0;
      $2620 = (invoke_iiii(32,($41|0),(2000|0),1)|0);
      $2621 = __THREW__; __THREW__ = 0;
      $2622 = $2621&1;
      if ($2622) {
       $2639 = ___cxa_find_matching_catch()|0;
       $2640 = tempRet0;
       $2641 = HEAP8[$41>>0]|0;
       $2642 = $2641 & 1;
       $2643 = ($2642<<24>>24)==(0);
       if ($2643) {
        $$1$i142 = $2640;$$12$i141 = $2639;
        break;
       }
       $2644 = (($41) + 8|0);
       $2645 = HEAP32[$2644>>2]|0;
       _free($2645);
       $$1$i142 = $2640;$$12$i141 = $2639;
       break;
      }
      $2623 = HEAP8[$2620>>0]|0;
      $2624 = (($2620) + 1|0);
      ;HEAP8[$$sroa$5392+0>>0]=HEAP8[$2624+0>>0]|0;HEAP8[$$sroa$5392+1>>0]=HEAP8[$2624+1>>0]|0;HEAP8[$$sroa$5392+2>>0]=HEAP8[$2624+2>>0]|0;HEAP8[$$sroa$5392+3>>0]=HEAP8[$2624+3>>0]|0;HEAP8[$$sroa$5392+4>>0]=HEAP8[$2624+4>>0]|0;HEAP8[$$sroa$5392+5>>0]=HEAP8[$2624+5>>0]|0;HEAP8[$$sroa$5392+6>>0]=HEAP8[$2624+6>>0]|0;
      $2625 = (($2620) + 8|0);
      $2626 = HEAP32[$2625>>2]|0;
      ;HEAP32[$2620+0>>2]=0|0;HEAP32[$2620+4>>2]=0|0;HEAP32[$2620+8>>2]=0|0;
      HEAP8[$40>>0] = $2623;
      $2627 = (($40) + 1|0);
      ;HEAP8[$2627+0>>0]=HEAP8[$$sroa$5392+0>>0]|0;HEAP8[$2627+1>>0]=HEAP8[$$sroa$5392+1>>0]|0;HEAP8[$2627+2>>0]=HEAP8[$$sroa$5392+2>>0]|0;HEAP8[$2627+3>>0]=HEAP8[$$sroa$5392+3>>0]|0;HEAP8[$2627+4>>0]=HEAP8[$$sroa$5392+4>>0]|0;HEAP8[$2627+5>>0]=HEAP8[$$sroa$5392+5>>0]|0;HEAP8[$2627+6>>0]=HEAP8[$$sroa$5392+6>>0]|0;
      $2628 = (($40) + 8|0);
      HEAP32[$2628>>2] = $2626;
      ;HEAP8[$$sroa$5392+0>>0]=0|0;HEAP8[$$sroa$5392+1>>0]=0|0;HEAP8[$$sroa$5392+2>>0]=0|0;HEAP8[$$sroa$5392+3>>0]=0|0;HEAP8[$$sroa$5392+4>>0]=0|0;HEAP8[$$sroa$5392+5>>0]=0|0;HEAP8[$$sroa$5392+6>>0]=0|0;
      $2629 = (($40) + 12|0);
      ;HEAP32[$2629+0>>2]=0|0;HEAP32[$2629+4>>2]=0|0;HEAP32[$2629+8>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2616,$40);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $$pre447 = HEAP8[$41>>0]|0;
      $phitmp462 = $$pre447 & 1;
      $phitmp463 = ($phitmp462<<24>>24)==(0);
      if (!($phitmp463)) {
       $2630 = (($41) + 8|0);
       $2631 = HEAP32[$2630>>2]|0;
       _free($2631);
      }
      $2632 = HEAP8[$42>>0]|0;
      $2633 = $2632 & 1;
      $2634 = ($2633<<24>>24)==(0);
      if ($2634) {
       $$0 = $2610;
       STACKTOP = sp;return ($$0|0);
      }
      $2635 = (($42) + 8|0);
      $2636 = HEAP32[$2635>>2]|0;
      _free($2636);
      $$0 = $2610;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $2646 = HEAP8[$42>>0]|0;
    $2647 = $2646 & 1;
    $2648 = ($2647<<24>>24)==(0);
    if ($2648) {
     ___resumeException($$12$i141|0);
     // unreachable;
    }
    $2649 = (($42) + 8|0);
    $2650 = HEAP32[$2649>>2]|0;
    _free($2650);
    ___resumeException($$12$i141|0);
    // unreachable;
    break;
   }
   case 122:  {
    $2651 = ($122|0)>(2);
    if (!($2651)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2652 = HEAP8[$first>>0]|0;
    $2653 = ($2652<<24>>24)==(115);
    if (!($2653)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2654 = (($first) + 1|0);
    $2655 = HEAP8[$2654>>0]|0;
    $2656 = ($2655<<24>>24)==(122);
    if (!($2656)) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2657 = (($first) + 2|0);
    $2658 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2657,$last,$db)|0);
    $2659 = ($2658|0)==($2657|0);
    if ($2659) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2660 = HEAP32[$db>>2]|0;
    $2661 = (($db) + 4|0);
    $2662 = HEAP32[$2661>>2]|0;
    $2663 = ($2660|0)==($2662|0);
    if ($2663) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $2664 = (($2662) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($45,$2664);
    __THREW__ = 0;
    $2665 = (invoke_iiiii(33,($45|0),0,(2296|0),8)|0);
    $2666 = __THREW__; __THREW__ = 0;
    $2667 = $2666&1;
    do {
     if ($2667) {
      $2685 = ___cxa_find_matching_catch()|0;
      $2686 = tempRet0;
      $$1$i136 = $2686;$$12$i135 = $2685;
     } else {
      ;HEAP32[$44+0>>2]=HEAP32[$2665+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$2665+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$2665+8>>2]|0;
      ;HEAP32[$2665+0>>2]=0|0;HEAP32[$2665+4>>2]=0|0;HEAP32[$2665+8>>2]=0|0;
      __THREW__ = 0;
      $2668 = (invoke_iiii(32,($44|0),(2000|0),1)|0);
      $2669 = __THREW__; __THREW__ = 0;
      $2670 = $2669&1;
      if ($2670) {
       $2687 = ___cxa_find_matching_catch()|0;
       $2688 = tempRet0;
       $2689 = HEAP8[$44>>0]|0;
       $2690 = $2689 & 1;
       $2691 = ($2690<<24>>24)==(0);
       if ($2691) {
        $$1$i136 = $2688;$$12$i135 = $2687;
        break;
       }
       $2692 = (($44) + 8|0);
       $2693 = HEAP32[$2692>>2]|0;
       _free($2693);
       $$1$i136 = $2688;$$12$i135 = $2687;
       break;
      }
      $2671 = HEAP8[$2668>>0]|0;
      $2672 = (($2668) + 1|0);
      ;HEAP8[$$sroa$5389+0>>0]=HEAP8[$2672+0>>0]|0;HEAP8[$$sroa$5389+1>>0]=HEAP8[$2672+1>>0]|0;HEAP8[$$sroa$5389+2>>0]=HEAP8[$2672+2>>0]|0;HEAP8[$$sroa$5389+3>>0]=HEAP8[$2672+3>>0]|0;HEAP8[$$sroa$5389+4>>0]=HEAP8[$2672+4>>0]|0;HEAP8[$$sroa$5389+5>>0]=HEAP8[$2672+5>>0]|0;HEAP8[$$sroa$5389+6>>0]=HEAP8[$2672+6>>0]|0;
      $2673 = (($2668) + 8|0);
      $2674 = HEAP32[$2673>>2]|0;
      ;HEAP32[$2668+0>>2]=0|0;HEAP32[$2668+4>>2]=0|0;HEAP32[$2668+8>>2]=0|0;
      HEAP8[$43>>0] = $2671;
      $2675 = (($43) + 1|0);
      ;HEAP8[$2675+0>>0]=HEAP8[$$sroa$5389+0>>0]|0;HEAP8[$2675+1>>0]=HEAP8[$$sroa$5389+1>>0]|0;HEAP8[$2675+2>>0]=HEAP8[$$sroa$5389+2>>0]|0;HEAP8[$2675+3>>0]=HEAP8[$$sroa$5389+3>>0]|0;HEAP8[$2675+4>>0]=HEAP8[$$sroa$5389+4>>0]|0;HEAP8[$2675+5>>0]=HEAP8[$$sroa$5389+5>>0]|0;HEAP8[$2675+6>>0]=HEAP8[$$sroa$5389+6>>0]|0;
      $2676 = (($43) + 8|0);
      HEAP32[$2676>>2] = $2674;
      ;HEAP8[$$sroa$5389+0>>0]=0|0;HEAP8[$$sroa$5389+1>>0]=0|0;HEAP8[$$sroa$5389+2>>0]=0|0;HEAP8[$$sroa$5389+3>>0]=0|0;HEAP8[$$sroa$5389+4>>0]=0|0;HEAP8[$$sroa$5389+5>>0]=0|0;HEAP8[$$sroa$5389+6>>0]=0|0;
      $2677 = (($43) + 12|0);
      ;HEAP32[$2677+0>>2]=0|0;HEAP32[$2677+4>>2]=0|0;HEAP32[$2677+8>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2664,$43);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $$pre448 = HEAP8[$44>>0]|0;
      $phitmp460 = $$pre448 & 1;
      $phitmp461 = ($phitmp460<<24>>24)==(0);
      if (!($phitmp461)) {
       $2678 = (($44) + 8|0);
       $2679 = HEAP32[$2678>>2]|0;
       _free($2679);
      }
      $2680 = HEAP8[$45>>0]|0;
      $2681 = $2680 & 1;
      $2682 = ($2681<<24>>24)==(0);
      if ($2682) {
       $$0 = $2658;
       STACKTOP = sp;return ($$0|0);
      }
      $2683 = (($45) + 8|0);
      $2684 = HEAP32[$2683>>2]|0;
      _free($2684);
      $$0 = $2658;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $2694 = HEAP8[$45>>0]|0;
    $2695 = $2694 & 1;
    $2696 = ($2695<<24>>24)==(0);
    if ($2696) {
     ___resumeException($$12$i135|0);
     // unreachable;
    }
    $2697 = (($45) + 8|0);
    $2698 = HEAP32[$2697>>2]|0;
    _free($2698);
    ___resumeException($$12$i135|0);
    // unreachable;
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  default: {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this,$__x,$__a) {
 $this = $this|0;
 $__x = $__x|0;
 $__a = $__a|0;
 var $$0$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = HEAP32[$__a>>2]|0;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = $1;
 $4 = (($1) + 4096|0);
 $5 = (($1) + 4096|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)<(32);
 if ($10) {
  $12 = (_malloc(32)|0);
  $$0$i = $12;
 } else {
  $11 = (($6) + 32|0);
  HEAP32[$5>>2] = $11;
  $$0$i = $6;
 }
 HEAP32[$0>>2] = $$0$i;
 HEAP32[$this>>2] = $$0$i;
 $13 = (($$0$i) + 24|0);
 HEAP32[$2>>2] = $13;
 $14 = ($$0$i|0)==(0|0);
 if ($14) {
  $31 = 0;
  $30 = (($31) + 24|0);
  HEAP32[$0>>2] = $30;
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(39,($$0$i|0),($__x|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $28 = ___cxa_find_matching_catch()|0;
   $29 = tempRet0;
   $eh$lpad$body$index3Z2D = $29;$eh$lpad$body$indexZ2D = $28;
  } else {
   $17 = (($$0$i) + 12|0);
   $18 = (($__x) + 12|0);
   __THREW__ = 0;
   invoke_vii(39,($17|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $23 = HEAP8[$$0$i>>0]|0;
    $24 = $23 & 1;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     $eh$lpad$body$index3Z2D = $22;$eh$lpad$body$indexZ2D = $21;
     break;
    }
    $26 = (($$0$i) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    _free($27);
    $eh$lpad$body$index3Z2D = $22;$eh$lpad$body$indexZ2D = $21;
    break;
   } else {
    $$pre$i = HEAP32[$0>>2]|0;
    $31 = $$pre$i;
    $30 = (($31) + 24|0);
    HEAP32[$0>>2] = $30;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i14 = 0, $$0$i$i$i23 = 0, $$0$i$i$i8 = 0, $$02 = 0, $$02$i$i = 0, $$03 = 0, $$pre = 0, $$pre$i = 0, $$pre$i12 = 0, $$pre$i20 = 0, $$pre$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$lcssa$i$i = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0, $__v$i$i = 0, $__v$i$i11 = 0, $__v$i$i19 = 0, $__v$i$i6 = 0, $eh$lpad$body$i$i$index3Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i26$index10Z2D = 0;
 var $eh$lpad$body$i$i26$indexZ2D = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $scevgep4$i$i = 0, $sub$042 = 0, $t1$041 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i19 = sp + 48|0;
 $__v$i$i11 = sp + 80|0;
 $__v$i$i6 = sp + 100|0;
 $__v$i$i = sp + 120|0;
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 68|0;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 if (!($6)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP8[$first>>0]|0;
 $8 = ($7<<24>>24)==(84);
 if (!($8)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($first) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(95);
 if ($11) {
  $12 = (($db) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($db) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  if ($16) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = (($15) + -16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + -12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)==($20|0);
  if ($21) {
   HEAP8[$0>>0] = 4;
   $80 = (($0) + 1|0);
   HEAP8[$80>>0]=24404&255;HEAP8[$80+1>>0]=24404>>8;
   $81 = (($0) + 3|0);
   HEAP8[$81>>0] = 0;
   $82 = (($0) + 12|0);
   ;HEAP32[$82+0>>2]=0|0;HEAP32[$82+4>>2]=0|0;HEAP32[$82+8>>2]=0|0;
   $83 = (($db) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($db) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($84>>>0)<($86>>>0);
   if ($87) {
    $88 = ($84|0)==(0|0);
    if ($88) {
     $91 = 0;
    } else {
     ;HEAP32[$84+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $89 = (($84) + 12|0);
     ;HEAP32[$89+0>>2]=HEAP32[$82+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$82+8>>2]|0;
     ;HEAP32[$82+0>>2]=0|0;HEAP32[$82+4>>2]=0|0;HEAP32[$82+8>>2]=0|0;
     $$pre$i12 = HEAP32[$83>>2]|0;
     $91 = $$pre$i12;
    }
    $90 = (($91) + 24|0);
    HEAP32[$83>>2] = $90;
   } else {
    $92 = (($db) + 12|0);
    $93 = HEAP32[$db>>2]|0;
    $94 = $84;
    $95 = $93;
    $96 = (($94) - ($95))|0;
    $97 = (($96|0) / 24)&-1;
    $98 = (($97) + 1)|0;
    $99 = ($98|0)<(0);
    if ($99) {
     __THREW__ = 0;
     invoke_v(41);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if (!($101)) {
      // unreachable;
     }
     $116 = ___cxa_find_matching_catch()|0;
     $117 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$02 = $117;$$03 = $116;
     ___resumeException($$03|0);
     // unreachable;
    }
    $102 = $86;
    $103 = (($102) - ($95))|0;
    $104 = (($103|0) / 24)&-1;
    $105 = ($104>>>0)<(1073741823);
    if ($105) {
     $106 = $104 << 1;
     $107 = ($106>>>0)<($98>>>0);
     $108 = $107 ? $98 : $106;
     $$0$i$i$i14 = $108;
    } else {
     $$0$i$i$i14 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i11,$$0$i$i$i14,$97,$92);
    $109 = (($__v$i$i11) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)==(0|0);
    if (!($111)) {
     ;HEAP32[$110+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$110+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $112 = (($110) + 12|0);
     ;HEAP32[$112+0>>2]=HEAP32[$82+0>>2]|0;HEAP32[$112+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$82+8>>2]|0;
     ;HEAP32[$82+0>>2]=0|0;HEAP32[$82+4>>2]=0|0;HEAP32[$82+8>>2]=0|0;
    }
    $113 = (($110) + 24|0);
    HEAP32[$109>>2] = $113;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i11);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i11);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $114 = (($first) + 2|0);
   $115 = (($db) + 62|0);
   HEAP8[$115>>0] = 1;
   $$0 = $114;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = HEAP32[$18>>2]|0;
  $23 = (($18) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)==($24|0);
  L36: do {
   if (!($25)) {
    $26 = (($db) + 4|0);
    $27 = (($db) + 8|0);
    $28 = (($db) + 12|0);
    $29 = (($__v$i$i6) + 8|0);
    $34 = $22;
    while(1) {
     $30 = HEAP32[$26>>2]|0;
     $31 = HEAP32[$27>>2]|0;
     $32 = ($30|0)==($31|0);
     if ($32) {
      $48 = HEAP32[$db>>2]|0;
      $49 = $30;
      $50 = $48;
      $51 = (($49) - ($50))|0;
      $52 = (($51|0) / 24)&-1;
      $53 = (($52) + 1)|0;
      $54 = ($53|0)<(0);
      if ($54) {
       label = 17;
       break;
      }
      $55 = ($52>>>0)<(1073741823);
      if ($55) {
       $56 = $52 << 1;
       $57 = ($56>>>0)<($53>>>0);
       $58 = $57 ? $53 : $56;
       $$0$i$i$i8 = $58;
      } else {
       $$0$i$i$i8 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i6,$$0$i$i$i8,$52,$28);
      $59 = HEAP32[$29>>2]|0;
      $60 = ($59|0)==(0|0);
      if (!($60)) {
       __THREW__ = 0;
       invoke_vii(39,($59|0),($34|0));
       $61 = __THREW__; __THREW__ = 0;
       $62 = $61&1;
       if ($62) {
        label = 25;
        break;
       }
       $63 = (($59) + 12|0);
       $64 = (($34) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($63|0),($64|0));
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        label = 23;
        break;
       }
      }
      $76 = (($59) + 24|0);
      HEAP32[$29>>2] = $76;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i6);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
     } else {
      $33 = ($30|0)==(0|0);
      if ($33) {
       $47 = 0;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($30,$34);
       $35 = (($30) + 12|0);
       $36 = (($34) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($35|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 12;
        break;
       }
       $$pre$i7 = HEAP32[$26>>2]|0;
       $47 = $$pre$i7;
      }
      $46 = (($47) + 24|0);
      HEAP32[$26>>2] = $46;
     }
     $77 = (($34) + 24|0);
     $78 = ($77|0)==($24|0);
     if ($78) {
      break L36;
     } else {
      $34 = $77;
     }
    }
    if ((label|0) == 12) {
     $39 = ___cxa_find_matching_catch()|0;
     $40 = tempRet0;
     $41 = HEAP8[$30>>0]|0;
     $42 = $41 & 1;
     $43 = ($42<<24>>24)==(0);
     if ($43) {
      ___resumeException($39|0);
      // unreachable;
     }
     $44 = (($30) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     _free($45);
     ___resumeException($39|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    else if ((label|0) == 23) {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $69 = HEAP8[$59>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $eh$lpad$body$i$i$index3Z2D = $68;$eh$lpad$body$i$i$indexZ2D = $67;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     $72 = (($59) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     _free($73);
     $eh$lpad$body$i$i$index3Z2D = $68;$eh$lpad$body$i$i$indexZ2D = $67;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
     ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
     // unreachable;
    }
    else if ((label|0) == 25) {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $eh$lpad$body$i$i$index3Z2D = $75;$eh$lpad$body$i$i$indexZ2D = $74;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
     ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
     // unreachable;
    }
   }
  } while(0);
  $79 = (($first) + 2|0);
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 $118 = $10 << 24 >> 24;
 $isdigittmp = (($118) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if (!($isdigit)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = (($first) + 2|0);
 $120 = ($119|0)==($last|0);
 if ($120) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 } else {
  $sub$042 = $isdigittmp;$t1$041 = $119;
 }
 while(1) {
  $121 = HEAP8[$t1$041>>0]|0;
  $122 = $121 << 24 >> 24;
  $isdigittmp4 = (($122) + -48)|0;
  $isdigit5 = ($isdigittmp4>>>0)<(10);
  if (!($isdigit5)) {
   break;
  }
  $123 = ($sub$042*10)|0;
  $124 = (($123) + -48)|0;
  $125 = (($124) + ($122))|0;
  $126 = (($t1$041) + 1|0);
  $127 = ($126|0)==($last|0);
  if ($127) {
   $$0 = $first;
   label = 98;
   break;
  } else {
   $sub$042 = $125;$t1$041 = $126;
  }
 }
 if ((label|0) == 98) {
  STACKTOP = sp;return ($$0|0);
 }
 $128 = ($121<<24>>24)==(95);
 if (!($128)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $129 = (($db) + 32|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($db) + 36|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($130|0)==($132|0);
 if ($133) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $134 = (($sub$042) + 1)|0;
 $135 = (($132) + -12|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($132) + -16|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $136;
 $140 = $138;
 $141 = (($139) - ($140))|0;
 $142 = $141 >> 4;
 $143 = ($134>>>0)<($142>>>0);
 if (!($143)) {
  $203 = (($t1$041) + 1|0);
  $204 = $203;
  $205 = (($204) - ($4))|0;
  $206 = ($205>>>0)>(4294967279);
  if ($206) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   // unreachable;
  }
  $207 = ($205>>>0)<(11);
  if ($207) {
   $208 = $205 << 1;
   $209 = $208&255;
   HEAP8[$2>>0] = $209;
   $210 = (($2) + 1|0);
   $__p$0$ph$i$i = $210;
  } else {
   $211 = (($205) + 16)|0;
   $212 = $211 & -16;
   $213 = (_malloc($212)|0);
   $214 = (($2) + 8|0);
   HEAP32[$214>>2] = $213;
   $215 = $212 | 1;
   HEAP32[$2>>2] = $215;
   $216 = (($2) + 4|0);
   HEAP32[$216>>2] = $205;
   $__p$0$ph$i$i = $213;
  }
  $217 = ($203|0)==($first|0);
  if ($217) {
   $__p$0$lcssa$i$i = $__p$0$ph$i$i;
  } else {
   $$02$i$i = $first;$218 = 84;$__p$01$i$i = $__p$0$ph$i$i;
   while(1) {
    HEAP8[$__p$01$i$i>>0] = $218;
    $219 = (($$02$i$i) + 1|0);
    $220 = ($$02$i$i|0)==($t1$041|0);
    if ($220) {
     break;
    }
    $221 = (($__p$01$i$i) + 1|0);
    $$pre = HEAP8[$219>>0]|0;
    $$02$i$i = $219;$218 = $$pre;$__p$01$i$i = $221;
   }
   $scevgep4$i$i = (($__p$0$ph$i$i) + ($205)|0);
   $__p$0$lcssa$i$i = $scevgep4$i$i;
  }
  HEAP8[$__p$0$lcssa$i$i>>0] = 0;
  ;HEAP32[$1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  $222 = (($1) + 12|0);
  ;HEAP32[$222+0>>2]=0|0;HEAP32[$222+4>>2]=0|0;HEAP32[$222+8>>2]=0|0;
  $223 = (($db) + 4|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($db) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ($224>>>0)<($226>>>0);
  if ($227) {
   $228 = ($224|0)==(0|0);
   if ($228) {
    $231 = 0;
   } else {
    ;HEAP32[$224+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$224+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$224+8>>2]=HEAP32[$1+8>>2]|0;
    ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
    $229 = (($224) + 12|0);
    ;HEAP32[$229+0>>2]=HEAP32[$222+0>>2]|0;HEAP32[$229+4>>2]=HEAP32[$222+4>>2]|0;HEAP32[$229+8>>2]=HEAP32[$222+8>>2]|0;
    ;HEAP32[$222+0>>2]=0|0;HEAP32[$222+4>>2]=0|0;HEAP32[$222+8>>2]=0|0;
    $$pre$i = HEAP32[$223>>2]|0;
    $231 = $$pre$i;
   }
   $230 = (($231) + 24|0);
   HEAP32[$223>>2] = $230;
  } else {
   $232 = (($db) + 12|0);
   $233 = HEAP32[$db>>2]|0;
   $234 = $224;
   $235 = $233;
   $236 = (($234) - ($235))|0;
   $237 = (($236|0) / 24)&-1;
   $238 = (($237) + 1)|0;
   $239 = ($238|0)<(0);
   if ($239) {
    __THREW__ = 0;
    invoke_v(41);
    $240 = __THREW__; __THREW__ = 0;
    $241 = $240&1;
    if (!($241)) {
     // unreachable;
    }
    $255 = ___cxa_find_matching_catch()|0;
    $256 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    $$02 = $256;$$03 = $255;
    ___resumeException($$03|0);
    // unreachable;
   }
   $242 = $226;
   $243 = (($242) - ($235))|0;
   $244 = (($243|0) / 24)&-1;
   $245 = ($244>>>0)<(1073741823);
   if ($245) {
    $246 = $244 << 1;
    $247 = ($246>>>0)<($238>>>0);
    $248 = $247 ? $238 : $246;
    $$0$i$i$i = $248;
   } else {
    $$0$i$i$i = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$237,$232);
   $249 = (($__v$i$i) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($250|0)==(0|0);
   if (!($251)) {
    ;HEAP32[$250+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$250+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$250+8>>2]=HEAP32[$1+8>>2]|0;
    ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
    $252 = (($250) + 12|0);
    ;HEAP32[$252+0>>2]=HEAP32[$222+0>>2]|0;HEAP32[$252+4>>2]=HEAP32[$222+4>>2]|0;HEAP32[$252+8>>2]=HEAP32[$222+8>>2]|0;
    ;HEAP32[$222+0>>2]=0|0;HEAP32[$222+4>>2]=0|0;HEAP32[$222+8>>2]=0|0;
   }
   $253 = (($250) + 24|0);
   HEAP32[$249>>2] = $253;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
  $254 = (($db) + 62|0);
  HEAP8[$254>>0] = 1;
  $$0 = $203;
  STACKTOP = sp;return ($$0|0);
 }
 $144 = (($138) + ($134<<4)|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ((($138) + ($134<<4)|0) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($145|0)==($147|0);
 L127: do {
  if (!($148)) {
   $149 = (($db) + 4|0);
   $150 = (($db) + 8|0);
   $151 = (($db) + 12|0);
   $152 = (($__v$i$i19) + 8|0);
   $157 = $145;
   while(1) {
    $153 = HEAP32[$149>>2]|0;
    $154 = HEAP32[$150>>2]|0;
    $155 = ($153|0)==($154|0);
    if ($155) {
     $171 = HEAP32[$db>>2]|0;
     $172 = $153;
     $173 = $171;
     $174 = (($172) - ($173))|0;
     $175 = (($174|0) / 24)&-1;
     $176 = (($175) + 1)|0;
     $177 = ($176|0)<(0);
     if ($177) {
      label = 62;
      break;
     }
     $178 = ($175>>>0)<(1073741823);
     if ($178) {
      $179 = $175 << 1;
      $180 = ($179>>>0)<($176>>>0);
      $181 = $180 ? $176 : $179;
      $$0$i$i$i23 = $181;
     } else {
      $$0$i$i$i23 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19,$$0$i$i$i23,$175,$151);
     $182 = HEAP32[$152>>2]|0;
     $183 = ($182|0)==(0|0);
     if (!($183)) {
      __THREW__ = 0;
      invoke_vii(39,($182|0),($157|0));
      $184 = __THREW__; __THREW__ = 0;
      $185 = $184&1;
      if ($185) {
       label = 70;
       break;
      }
      $186 = (($182) + 12|0);
      $187 = (($157) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($186|0),($187|0));
      $188 = __THREW__; __THREW__ = 0;
      $189 = $188&1;
      if ($189) {
       label = 68;
       break;
      }
     }
     $199 = (($182) + 24|0);
     HEAP32[$152>>2] = $199;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i19);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
    } else {
     $156 = ($153|0)==(0|0);
     if ($156) {
      $170 = 0;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($153,$157);
      $158 = (($153) + 12|0);
      $159 = (($157) + 12|0);
      __THREW__ = 0;
      invoke_vii(39,($158|0),($159|0));
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 57;
       break;
      }
      $$pre$i20 = HEAP32[$149>>2]|0;
      $170 = $$pre$i20;
     }
     $169 = (($170) + 24|0);
     HEAP32[$149>>2] = $169;
    }
    $200 = (($157) + 24|0);
    $201 = ($200|0)==($147|0);
    if ($201) {
     break L127;
    } else {
     $157 = $200;
    }
   }
   if ((label|0) == 57) {
    $162 = ___cxa_find_matching_catch()|0;
    $163 = tempRet0;
    $164 = HEAP8[$153>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if ($166) {
     ___resumeException($162|0);
     // unreachable;
    }
    $167 = (($153) + 8|0);
    $168 = HEAP32[$167>>2]|0;
    _free($168);
    ___resumeException($162|0);
    // unreachable;
   }
   else if ((label|0) == 62) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   else if ((label|0) == 68) {
    $190 = ___cxa_find_matching_catch()|0;
    $191 = tempRet0;
    $192 = HEAP8[$182>>0]|0;
    $193 = $192 & 1;
    $194 = ($193<<24>>24)==(0);
    if ($194) {
     $eh$lpad$body$i$i26$index10Z2D = $191;$eh$lpad$body$i$i26$indexZ2D = $190;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
     ___resumeException($eh$lpad$body$i$i26$indexZ2D|0);
     // unreachable;
    }
    $195 = (($182) + 8|0);
    $196 = HEAP32[$195>>2]|0;
    _free($196);
    $eh$lpad$body$i$i26$index10Z2D = $191;$eh$lpad$body$i$i26$indexZ2D = $190;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
    ___resumeException($eh$lpad$body$i$i26$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 70) {
    $197 = ___cxa_find_matching_catch()|0;
    $198 = tempRet0;
    $eh$lpad$body$i$i26$index10Z2D = $198;$eh$lpad$body$i$i26$indexZ2D = $197;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
    ___resumeException($eh$lpad$body$i$i26$indexZ2D|0);
    // unreachable;
   }
  }
 } while(0);
 $202 = (($t1$041) + 1|0);
 $$0 = $202;
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$0$i$i$i25 = 0, $$0$i$i$i9 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$pre = 0, $$pre$i = 0, $$pre$i12 = 0, $$pre$i24 = 0, $$pre$i8 = 0, $$pre15 = 0, $$pre16 = 0, $$sroa$5 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__v$i$i = 0, $__v$i$i11 = 0, $__v$i$i23 = 0, $__v$i$i7 = 0, $args = 0, $eh$lpad$body$i$i$index18Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $k$036 = 0, $k1$045 = 0, $k2$042 = 0, $or$cond = 0, $phitmp = 0, $phitmp17 = 0, $t$066 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i23 = sp + 108|0;
 $__v$i$i11 = sp + 68|0;
 $__v$i$i7 = sp + 88|0;
 $__v$i$i = sp + 48|0;
 $args = sp + 12|0;
 $0 = sp;
 $1 = sp + 24|0;
 $$sroa$5 = sp + 128|0;
 $2 = $last;
 $3 = $first;
 $4 = (($2) - ($3))|0;
 $5 = ($4|0)>(1);
 if (!($5)) {
  $$1 = $first;
  STACKTOP = sp;return ($$1|0);
 }
 $6 = HEAP8[$first>>0]|0;
 $7 = ($6<<24>>24)==(73);
 if (!($7)) {
  $$1 = $first;
  STACKTOP = sp;return ($$1|0);
 }
 $8 = (($db) + 61|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  $11 = (($db) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + -16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + -12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==($14|0);
  if (!($17)) {
   $19 = $16;
   while(1) {
    $18 = (($19) + -16|0);
    HEAP32[$15>>2] = $18;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
    $20 = HEAP32[$15>>2]|0;
    $21 = ($20|0)==($14|0);
    if ($21) {
     break;
    } else {
     $19 = $20;
    }
   }
  }
 }
 $22 = (($first) + 1|0);
 HEAP8[$args>>0] = 2;
 $23 = (($args) + 1|0);
 HEAP8[$23>>0] = 60;
 $24 = (($args) + 2|0);
 HEAP8[$24>>0] = 0;
 $25 = HEAP8[$22>>0]|0;
 $26 = ($25<<24>>24)==(69);
 L12: do {
  if ($26) {
   $27 = (($22) + 1|0);
   $265 = 2;$323 = $27;
   label = 94;
  } else {
   $28 = (($db) + 4|0);
   $29 = (($db) + 36|0);
   $30 = (($db) + 12|0);
   $31 = (($__v$i$i7) + 8|0);
   $32 = (($__v$i$i11) + 8|0);
   $33 = (($0) + 1|0);
   $34 = (($0) + 8|0);
   $35 = (($0) + 4|0);
   $36 = (($args) + 4|0);
   $37 = (($db) + 32|0);
   $38 = (($db) + 40|0);
   $39 = (($db) + 44|0);
   $40 = (($__v$i$i) + 8|0);
   $t$066 = $22;
   L14: while(1) {
    $44 = HEAP8[$8>>0]|0;
    $45 = ($44<<24>>24)==(0);
    do {
     if (!($45)) {
      $46 = HEAP32[$30>>2]|0;
      $47 = HEAP32[$29>>2]|0;
      $48 = HEAP32[$38>>2]|0;
      $49 = ($47>>>0)<($48>>>0);
      if ($49) {
       $50 = ($47|0)==(0|0);
       if ($50) {
        $55 = 0;
       } else {
        HEAP32[$47>>2] = 0;
        $51 = (($47) + 4|0);
        HEAP32[$51>>2] = 0;
        $52 = (($47) + 8|0);
        HEAP32[$52>>2] = 0;
        $53 = (($47) + 12|0);
        HEAP32[$53>>2] = $46;
        $$pre$i = HEAP32[$29>>2]|0;
        $55 = $$pre$i;
       }
       $54 = (($55) + 16|0);
       HEAP32[$29>>2] = $54;
       break;
      }
      $56 = HEAP32[$37>>2]|0;
      $57 = $47;
      $58 = $56;
      $59 = (($57) - ($58))|0;
      $60 = $59 >> 4;
      $61 = (($60) + 1)|0;
      $62 = ($61|0)<(0);
      if ($62) {
       label = 16;
       break L14;
      }
      $65 = $48;
      $66 = (($65) - ($58))|0;
      $67 = $66 >> 4;
      $68 = ($67>>>0)<(1073741823);
      if ($68) {
       $69 = $66 >> 3;
       $70 = ($69>>>0)<($61>>>0);
       $71 = $70 ? $61 : $69;
       $$0$i$i$i = $71;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i,$$0$i$i$i,$60,$39);
      $72 = HEAP32[$40>>2]|0;
      $73 = ($72|0)==(0|0);
      if (!($73)) {
       HEAP32[$72>>2] = 0;
       $74 = (($72) + 4|0);
       HEAP32[$74>>2] = 0;
       $75 = (($72) + 8|0);
       HEAP32[$75>>2] = 0;
       $76 = (($72) + 12|0);
       HEAP32[$76>>2] = $46;
      }
      $77 = (($72) + 16|0);
      HEAP32[$40>>2] = $77;
      __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($37,$__v$i$i);
      __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
     }
    } while(0);
    $86 = HEAP32[$28>>2]|0;
    $87 = HEAP32[$db>>2]|0;
    $88 = $86;
    $89 = $87;
    $90 = (($88) - ($89))|0;
    $91 = (($90|0) / 24)&-1;
    __THREW__ = 0;
    $42 = (invoke_iiii(51,($t$066|0),($last|0),($db|0))|0);
    $92 = __THREW__; __THREW__ = 0;
    $93 = $92&1;
    if ($93) {
     label = 25;
     break;
    }
    $94 = HEAP32[$28>>2]|0;
    $95 = HEAP32[$db>>2]|0;
    $96 = $94;
    $97 = $95;
    $98 = (($96) - ($97))|0;
    $99 = (($98|0) / 24)&-1;
    $100 = HEAP8[$8>>0]|0;
    $101 = ($100<<24>>24)==(0);
    if (!($101)) {
     $102 = HEAP32[$29>>2]|0;
     $103 = (($102) + -16|0);
     $105 = $102;
     while(1) {
      $104 = (($105) + -16|0);
      HEAP32[$29>>2] = $104;
      __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($104);
      $106 = HEAP32[$29>>2]|0;
      $107 = ($106|0)==($103|0);
      if ($107) {
       break;
      } else {
       $105 = $106;
      }
     }
    }
    $108 = ($42|0)==($t$066|0);
    $109 = ($42|0)==($last|0);
    $or$cond = $108 | $109;
    if ($or$cond) {
     label = 33;
     break;
    }
    $115 = HEAP8[$8>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$29>>2]|0;
     $118 = (($117) + -16|0);
     $119 = HEAP32[$30>>2]|0;
     $120 = (($117) + -12|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($117) + -8|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ($121>>>0)<($123>>>0);
     if ($124) {
      $125 = ($121|0)==(0|0);
      if ($125) {
       $130 = 0;
      } else {
       HEAP32[$121>>2] = 0;
       $126 = (($121) + 4|0);
       HEAP32[$126>>2] = 0;
       $127 = (($121) + 8|0);
       HEAP32[$127>>2] = 0;
       $128 = (($121) + 12|0);
       HEAP32[$128>>2] = $119;
       $$pre$i8 = HEAP32[$120>>2]|0;
       $130 = $$pre$i8;
      }
      $129 = (($130) + 16|0);
      HEAP32[$120>>2] = $129;
     } else {
      $131 = (($117) + -4|0);
      $132 = HEAP32[$118>>2]|0;
      $133 = $121;
      $134 = $132;
      $135 = (($133) - ($134))|0;
      $136 = $135 >> 4;
      $137 = (($136) + 1)|0;
      $138 = ($137|0)<(0);
      if ($138) {
       label = 41;
       break;
      }
      $141 = $123;
      $142 = (($141) - ($134))|0;
      $143 = $142 >> 4;
      $144 = ($143>>>0)<(1073741823);
      if ($144) {
       $145 = $142 >> 3;
       $146 = ($145>>>0)<($137>>>0);
       $147 = $146 ? $137 : $145;
       $$0$i$i$i9 = $147;
      } else {
       $$0$i$i$i9 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i7,$$0$i$i$i9,$136,$131);
      $148 = HEAP32[$31>>2]|0;
      $149 = ($148|0)==(0|0);
      if (!($149)) {
       HEAP32[$148>>2] = 0;
       $150 = (($148) + 4|0);
       HEAP32[$150>>2] = 0;
       $151 = (($148) + 8|0);
       HEAP32[$151>>2] = 0;
       $152 = (($148) + 12|0);
       HEAP32[$152>>2] = $119;
      }
      $153 = (($148) + 16|0);
      HEAP32[$31>>2] = $153;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($118,$__v$i$i7);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i7);
     }
     $154 = ($91>>>0)<($99>>>0);
     if ($154) {
      $k$036 = $91;
      while(1) {
       $155 = HEAP32[$29>>2]|0;
       $156 = (($155) + -12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = (($157) + -16|0);
       $159 = HEAP32[$db>>2]|0;
       $160 = (($159) + (($k$036*24)|0)|0);
       $161 = (($157) + -12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($157) + -8|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($162|0)==($164|0);
       if ($165) {
        $182 = (($157) + -4|0);
        $183 = HEAP32[$158>>2]|0;
        $184 = $162;
        $185 = $183;
        $186 = (($184) - ($185))|0;
        $187 = (($186|0) / 24)&-1;
        $188 = (($187) + 1)|0;
        $189 = ($188|0)<(0);
        if ($189) {
         label = 58;
         break L14;
        }
        $192 = ($187>>>0)<(1073741823);
        if ($192) {
         $193 = $187 << 1;
         $194 = ($193>>>0)<($188>>>0);
         $195 = $194 ? $188 : $193;
         $$0$i$i$i13 = $195;
        } else {
         $$0$i$i$i13 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i11,$$0$i$i$i13,$187,$182);
        $196 = HEAP32[$32>>2]|0;
        $197 = ($196|0)==(0|0);
        if (!($197)) {
         __THREW__ = 0;
         invoke_vii(39,($196|0),($160|0));
         $198 = __THREW__; __THREW__ = 0;
         $199 = $198&1;
         if ($199) {
          label = 67;
          break L14;
         }
         $200 = (($196) + 12|0);
         $201 = ((($159) + (($k$036*24)|0)|0) + 12|0);
         __THREW__ = 0;
         invoke_vii(39,($200|0),($201|0));
         $202 = __THREW__; __THREW__ = 0;
         $203 = $202&1;
         if ($203) {
          label = 65;
          break L14;
         }
        }
        $213 = (($196) + 24|0);
        HEAP32[$32>>2] = $213;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($158,$__v$i$i11);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i11);
       } else {
        $166 = ($162|0)==(0|0);
        if ($166) {
         $181 = 0;
        } else {
         __THREW__ = 0;
         invoke_vii(39,($162|0),($160|0));
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          label = 23;
          break L14;
         }
         $169 = (($162) + 12|0);
         $170 = ((($159) + (($k$036*24)|0)|0) + 12|0);
         __THREW__ = 0;
         invoke_vii(39,($169|0),($170|0));
         $171 = __THREW__; __THREW__ = 0;
         $172 = $171&1;
         if ($172) {
          label = 54;
          break L14;
         }
         $$pre$i12 = HEAP32[$161>>2]|0;
         $181 = $$pre$i12;
        }
        $180 = (($181) + 24|0);
        HEAP32[$161>>2] = $180;
       }
       $214 = (($k$036) + 1)|0;
       $215 = ($214>>>0)<($99>>>0);
       if ($215) {
        $k$036 = $214;
       } else {
        break;
       }
      }
     }
    }
    $216 = ($91>>>0)<($99>>>0);
    if ($216) {
     $k2$042 = $91;
     while(1) {
      $217 = HEAP8[$args>>0]|0;
      $218 = $217 & 1;
      $219 = ($218<<24>>24)==(0);
      if ($219) {
       $221 = $217&255;
       $222 = $221 >>> 1;
       $224 = $222;
      } else {
       $220 = HEAP32[$36>>2]|0;
       $224 = $220;
      }
      $223 = ($224>>>0)>(1);
      if ($223) {
       __THREW__ = 0;
       (invoke_iiii(32,($args|0),(2288|0),2)|0);
       $225 = __THREW__; __THREW__ = 0;
       $226 = $225&1;
       if ($226) {
        label = 24;
        break L14;
       }
      }
      $227 = HEAP32[$db>>2]|0;
      $228 = (($227) + (($k2$042*24)|0)|0);
      __THREW__ = 0;
      invoke_vii(36,($0|0),($228|0));
      $229 = __THREW__; __THREW__ = 0;
      $230 = $229&1;
      if ($230) {
       label = 24;
       break L14;
      }
      $231 = HEAP8[$0>>0]|0;
      $232 = $231 & 1;
      $233 = ($232<<24>>24)==(0);
      if ($233) {
       $236 = $231&255;
       $237 = $236 >>> 1;
       $238 = $33;$239 = $237;
      } else {
       $234 = HEAP32[$34>>2]|0;
       $235 = HEAP32[$35>>2]|0;
       $238 = $234;$239 = $235;
      }
      __THREW__ = 0;
      (invoke_iiii(32,($args|0),($238|0),($239|0))|0);
      $240 = __THREW__; __THREW__ = 0;
      $241 = $240&1;
      if ($241) {
       label = 85;
       break L14;
      }
      if (!($233)) {
       $242 = HEAP32[$34>>2]|0;
       _free($242);
      }
      $243 = (($k2$042) + 1)|0;
      $244 = ($243>>>0)<($99>>>0);
      if ($244) {
       $k2$042 = $243;
      } else {
       break;
      }
     }
    }
    $248 = ($99|0)==($91|0);
    if (!($248)) {
     $$pre = HEAP32[$28>>2]|0;
     $250 = $$pre;$k1$045 = $99;
     while(1) {
      $249 = (($250) + -24|0);
      $252 = $250;
      while(1) {
       $251 = (($252) + -24|0);
       HEAP32[$28>>2] = $251;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($251);
       $253 = HEAP32[$28>>2]|0;
       $254 = ($253|0)==($249|0);
       if ($254) {
        break;
       } else {
        $252 = $253;
       }
      }
      $255 = (($k1$045) + -1)|0;
      $256 = ($255|0)==($91|0);
      if ($256) {
       break;
      } else {
       $250 = $249;$k1$045 = $255;
      }
     }
    }
    $41 = HEAP8[$42>>0]|0;
    $43 = ($41<<24>>24)==(69);
    if ($43) {
     label = 92;
     break;
    } else {
     $t$066 = $42;
    }
   }
   switch (label|0) {
    case 16: {
     __THREW__ = 0;
     invoke_v(41);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 26;
      break L12;
     }
     // unreachable;
     break;
    }
    case 23: {
     $78 = ___cxa_find_matching_catch()|0;
     $79 = tempRet0;
     $eh$lpad$body$index7Z2D = $79;$eh$lpad$body$indexZ2D = $78;
     label = 27;
     break L12;
     break;
    }
    case 24: {
     $80 = ___cxa_find_matching_catch()|0;
     $81 = tempRet0;
     $eh$lpad$body$index7Z2D = $81;$eh$lpad$body$indexZ2D = $80;
     label = 27;
     break L12;
     break;
    }
    case 25: {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $eh$lpad$body$index7Z2D = $83;$eh$lpad$body$indexZ2D = $82;
     label = 27;
     break L12;
     break;
    }
    case 33: {
     $110 = HEAP8[$args>>0]|0;
     $111 = $110 & 1;
     $112 = ($111<<24>>24)==(0);
     if ($112) {
      $$1 = $first;
      STACKTOP = sp;return ($$1|0);
     }
     $113 = (($args) + 8|0);
     $114 = HEAP32[$113>>2]|0;
     _free($114);
     $$1 = $first;
     STACKTOP = sp;return ($$1|0);
     break;
    }
    case 41: {
     __THREW__ = 0;
     invoke_v(41);
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if ($140) {
      label = 26;
      break L12;
     }
     // unreachable;
     break;
    }
    case 54: {
     $173 = ___cxa_find_matching_catch()|0;
     $174 = tempRet0;
     $175 = HEAP8[$162>>0]|0;
     $176 = $175 & 1;
     $177 = ($176<<24>>24)==(0);
     if ($177) {
      $eh$lpad$body$index7Z2D = $174;$eh$lpad$body$indexZ2D = $173;
      label = 27;
      break L12;
     }
     $178 = (($162) + 8|0);
     $179 = HEAP32[$178>>2]|0;
     _free($179);
     $eh$lpad$body$index7Z2D = $174;$eh$lpad$body$indexZ2D = $173;
     label = 27;
     break L12;
     break;
    }
    case 58: {
     __THREW__ = 0;
     invoke_v(41);
     $190 = __THREW__; __THREW__ = 0;
     $191 = $190&1;
     if ($191) {
      label = 26;
      break L12;
     }
     // unreachable;
     break;
    }
    case 65: {
     $204 = ___cxa_find_matching_catch()|0;
     $205 = tempRet0;
     $206 = HEAP8[$196>>0]|0;
     $207 = $206 & 1;
     $208 = ($207<<24>>24)==(0);
     if ($208) {
      $eh$lpad$body$i$i$index18Z2D = $205;$eh$lpad$body$i$i$indexZ2D = $204;
     } else {
      $209 = (($196) + 8|0);
      $210 = HEAP32[$209>>2]|0;
      _free($210);
      $eh$lpad$body$i$i$index18Z2D = $205;$eh$lpad$body$i$i$indexZ2D = $204;
     }
     break;
    }
    case 67: {
     $211 = ___cxa_find_matching_catch()|0;
     $212 = tempRet0;
     $eh$lpad$body$i$i$index18Z2D = $212;$eh$lpad$body$i$i$indexZ2D = $211;
     break;
    }
    case 85: {
     $245 = ___cxa_find_matching_catch()|0;
     $246 = tempRet0;
     if ($233) {
      $$04 = $246;$$05 = $245;
      break L12;
     }
     $247 = HEAP32[$34>>2]|0;
     _free($247);
     $$04 = $246;$$05 = $245;
     break L12;
     break;
    }
    case 92: {
     $$pre15 = HEAP8[$args>>0]|0;
     $257 = (($42) + 1|0);
     $258 = $$pre15 & 1;
     $259 = ($258<<24>>24)==(0);
     if ($259) {
      $265 = $$pre15;$323 = $257;
      label = 94;
      break L12;
     }
     $260 = (($args) + 8|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = (($args) + 4|0);
     $263 = HEAP32[$262>>2]|0;
     $267 = $263;$269 = $261;$324 = $257;
     label = 95;
     break L12;
     break;
    }
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i11);
   $eh$lpad$body$index7Z2D = $eh$lpad$body$i$i$index18Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
   label = 27;
  }
 } while(0);
 if ((label|0) == 94) {
  $264 = $265&255;
  $266 = $264 >>> 1;
  $267 = $266;$269 = $23;$324 = $323;
  label = 95;
 }
 do {
  if ((label|0) == 95) {
   $$sum$i = (($267) + -1)|0;
   $268 = (($269) + ($$sum$i)|0);
   $270 = HEAP8[$268>>0]|0;
   $271 = ($270<<24>>24)==(62);
   if ($271) {
    __THREW__ = 0;
    (invoke_iiii(32,($args|0),(4000|0),2)|0);
    $274 = __THREW__; __THREW__ = 0;
    $275 = $274&1;
    if ($275) {
     label = 26;
     break;
    }
   } else {
    __THREW__ = 0;
    (invoke_iiii(32,($args|0),(2096|0),1)|0);
    $272 = __THREW__; __THREW__ = 0;
    $273 = $272&1;
    if ($273) {
     label = 26;
     break;
    }
   }
   $276 = HEAP8[$args>>0]|0;
   $277 = (($args) + 1|0);
   ;HEAP8[$$sroa$5+0>>0]=HEAP8[$277+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$277+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$277+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$277+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$277+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$277+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$277+6>>0]|0;
   $278 = (($args) + 8|0);
   $279 = HEAP32[$278>>2]|0;
   ;HEAP32[$args+0>>2]=0|0;HEAP32[$args+4>>2]=0|0;HEAP32[$args+8>>2]=0|0;
   HEAP8[$1>>0] = $276;
   $280 = (($1) + 1|0);
   ;HEAP8[$280+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$280+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$280+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$280+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$280+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$280+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$280+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
   $281 = (($1) + 8|0);
   HEAP32[$281>>2] = $279;
   ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
   $282 = (($1) + 12|0);
   ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
   $283 = (($db) + 4|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (($db) + 8|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ($284>>>0)<($286>>>0);
   if ($287) {
    $288 = ($284|0)==(0|0);
    if ($288) {
     $291 = 0;
    } else {
     ;HEAP32[$284+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$284+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$284+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $289 = (($284) + 12|0);
     ;HEAP32[$289+0>>2]=HEAP32[$282+0>>2]|0;HEAP32[$289+4>>2]=HEAP32[$282+4>>2]|0;HEAP32[$289+8>>2]=HEAP32[$282+8>>2]|0;
     ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
     $$pre$i24 = HEAP32[$283>>2]|0;
     $291 = $$pre$i24;
    }
    $290 = (($291) + 24|0);
    HEAP32[$283>>2] = $290;
   } else {
    $292 = (($db) + 12|0);
    $293 = HEAP32[$db>>2]|0;
    $294 = $284;
    $295 = $293;
    $296 = (($294) - ($295))|0;
    $297 = (($296|0) / 24)&-1;
    $298 = (($297) + 1)|0;
    $299 = ($298|0)<(0);
    if ($299) {
     __THREW__ = 0;
     invoke_v(41);
     $300 = __THREW__; __THREW__ = 0;
     $301 = $300&1;
     if ($301) {
      $316 = ___cxa_find_matching_catch()|0;
      $317 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$04 = $317;$$05 = $316;
      break;
     } else {
      // unreachable;
     }
    }
    $302 = $286;
    $303 = (($302) - ($295))|0;
    $304 = (($303|0) / 24)&-1;
    $305 = ($304>>>0)<(1073741823);
    if ($305) {
     $306 = $304 << 1;
     $307 = ($306>>>0)<($298>>>0);
     $308 = $307 ? $298 : $306;
     $$0$i$i$i25 = $308;
    } else {
     $$0$i$i$i25 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23,$$0$i$i$i25,$297,$292);
    $309 = (($__v$i$i23) + 8|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = ($310|0)==(0|0);
    if (!($311)) {
     ;HEAP32[$310+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$310+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$310+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $312 = (($310) + 12|0);
     ;HEAP32[$312+0>>2]=HEAP32[$282+0>>2]|0;HEAP32[$312+4>>2]=HEAP32[$282+4>>2]|0;HEAP32[$312+8>>2]=HEAP32[$282+8>>2]|0;
     ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
    }
    $313 = (($310) + 24|0);
    HEAP32[$309>>2] = $313;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i23);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $$pre16 = HEAP8[$args>>0]|0;
   $phitmp = $$pre16 & 1;
   $phitmp17 = ($phitmp<<24>>24)==(0);
   if ($phitmp17) {
    $$1 = $324;
    STACKTOP = sp;return ($$1|0);
   }
   $314 = (($args) + 8|0);
   $315 = HEAP32[$314>>2]|0;
   _free($315);
   $$1 = $324;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 if ((label|0) == 26) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $eh$lpad$body$index7Z2D = $85;$eh$lpad$body$indexZ2D = $84;
  label = 27;
 }
 if ((label|0) == 27) {
  $$04 = $eh$lpad$body$index7Z2D;$$05 = $eh$lpad$body$indexZ2D;
 }
 $318 = HEAP8[$args>>0]|0;
 $319 = $318 & 1;
 $320 = ($319<<24>>24)==(0);
 if ($320) {
  ___resumeException($$05|0);
  // unreachable;
 }
 $321 = (($args) + 8|0);
 $322 = HEAP32[$321>>2]|0;
 _free($322);
 ___resumeException($$05|0);
 // unreachable;
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$01 = 0, $$017 = 0, $$02 = 0, $$02$i = 0, $$08 = 0, $$pre$i = 0, $$pre$i8 = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__v$i$i = 0, $__v$i$i7 = 0, $brmerge = 0, $c$0 = 0, $c$0$in$lcssa = 0, $c$0$in20 = 0, $c$017 = 0, $isdigit = 0, $isdigit5 = 0, $isdigit519 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp418 = 0, $l$03$i = 0, $n$0$lcssa = 0, $n$021 = 0, $or$cond = 0, $phitmp = 0, $phitmp6 = 0;
 var $r = 0, $r$04$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i7 = sp + 24|0;
 $__v$i$i = sp + 72|0;
 $r = sp + 92|0;
 $0 = sp + 104|0;
 $1 = sp;
 $2 = sp + 48|0;
 $$sroa$5 = sp + 116|0;
 $3 = ($first|0)==($last|0);
 if ($3) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 $4 = HEAP8[$first>>0]|0;
 $5 = $4 << 24 >> 24;
 $isdigittmp = (($5) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if (!($isdigit)) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 $6 = (($first) + 1|0);
 $7 = ($6|0)==($last|0);
 if ($7) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 $c$017 = HEAP8[$6>>0]|0;
 $8 = $c$017 << 24 >> 24;
 $isdigittmp418 = (($8) + -48)|0;
 $isdigit519 = ($isdigittmp418>>>0)<(10);
 L10: do {
  if ($isdigit519) {
   $14 = $8;$c$0$in20 = $6;$n$021 = $isdigittmp;
   while(1) {
    $9 = (($c$0$in20) + 1|0);
    $10 = ($9|0)==($last|0);
    if ($10) {
     $$02 = $first;
     break;
    }
    $11 = ($n$021*10)|0;
    $12 = (($11) + -48)|0;
    $13 = (($12) + ($14))|0;
    $c$0 = HEAP8[$9>>0]|0;
    $15 = $c$0 << 24 >> 24;
    $isdigittmp4 = (($15) + -48)|0;
    $isdigit5 = ($isdigittmp4>>>0)<(10);
    if ($isdigit5) {
     $14 = $15;$c$0$in20 = $9;$n$021 = $13;
    } else {
     $c$0$in$lcssa = $9;$n$0$lcssa = $13;
     break L10;
    }
   }
   STACKTOP = sp;return ($$02|0);
  } else {
   $c$0$in$lcssa = $6;$n$0$lcssa = $isdigittmp;
  }
 } while(0);
 $16 = $last;
 $17 = $c$0$in$lcssa;
 $18 = (($16) - ($17))|0;
 $19 = ($18>>>0)<($n$0$lcssa>>>0);
 if ($19) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r,$c$0$in$lcssa,$n$0$lcssa);
 $20 = HEAP8[$r>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $27 = $20&255;
  $28 = $27 >>> 1;
  $29 = (($r) + 1|0);
  $31 = $28;$33 = $29;
 } else {
  $23 = (($r) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($r) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $31 = $24;$33 = $26;
 }
 $30 = ($31>>>0)<(10);
 $32 = $30 ? $31 : 10;
 __THREW__ = 0;
 invoke_viii(40,($0|0),($33|0),($32|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 do {
  if ($35) {
   $97 = ___cxa_find_matching_catch()|0;
   $98 = tempRet0;
   $$0 = $98;$$01 = $97;$145 = $20;
  } else {
   $36 = HEAP8[$0>>0]|0;
   $37 = $36 & 1;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $43 = $36&255;
    $44 = $43 >>> 1;
    $45 = (($0) + 1|0);
    $149 = $45;$47 = $44;
   } else {
    $39 = (($0) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($0) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $149 = $42;$47 = $40;
   }
   $46 = ($47>>>0)>(10);
   $48 = $46 ? 10 : $47;
   $49 = ($48|0)==(0);
   L30: do {
    if ($49) {
     $58 = 0;
    } else {
     $$02$i = $48;$l$03$i = $149;$r$04$i = 3960;
     while(1) {
      $50 = HEAP8[$l$03$i>>0]|0;
      $51 = HEAP8[$r$04$i>>0]|0;
      $52 = ($50<<24>>24)==($51<<24>>24);
      if (!($52)) {
       $58 = 1;
       break L30;
      }
      $53 = (($$02$i) + -1)|0;
      $54 = (($l$03$i) + 1|0);
      $55 = (($r$04$i) + 1|0);
      $56 = ($53|0)==(0);
      if ($56) {
       $58 = 0;
       break;
      } else {
       $$02$i = $53;$l$03$i = $54;$r$04$i = $55;
      }
     }
    }
   } while(0);
   $57 = ($47>>>0)<(10);
   $or$cond = $58 | $57;
   if (!($38)) {
    $59 = (($0) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    _free($60);
   }
   $brmerge = $or$cond | $46;
   if ($brmerge) {
    $101 = (($r) + 1|0);
    ;HEAP8[$$sroa$5+0>>0]=HEAP8[$101+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$101+6>>0]|0;
    $102 = (($r) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    ;HEAP32[$r+0>>2]=0|0;HEAP32[$r+4>>2]=0|0;HEAP32[$r+8>>2]=0|0;
    HEAP8[$2>>0] = $20;
    $104 = (($2) + 1|0);
    ;HEAP8[$104+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$104+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$104+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$104+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$104+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$104+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$104+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
    $105 = (($2) + 8|0);
    HEAP32[$105>>2] = $103;
    ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
    $106 = (($2) + 12|0);
    ;HEAP32[$106+0>>2]=0|0;HEAP32[$106+4>>2]=0|0;HEAP32[$106+8>>2]=0|0;
    $107 = (($db) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($db) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($108>>>0)<($110>>>0);
    if ($111) {
     $112 = ($108|0)==(0|0);
     if ($112) {
      $115 = 0;
     } else {
      ;HEAP32[$108+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $113 = (($108) + 12|0);
      ;HEAP32[$113+0>>2]=HEAP32[$106+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$113+8>>2]=HEAP32[$106+8>>2]|0;
      ;HEAP32[$106+0>>2]=0|0;HEAP32[$106+4>>2]=0|0;HEAP32[$106+8>>2]=0|0;
      $$pre$i8 = HEAP32[$107>>2]|0;
      $115 = $$pre$i8;
     }
     $114 = (($115) + 24|0);
     HEAP32[$107>>2] = $114;
    } else {
     $116 = (($db) + 12|0);
     $117 = HEAP32[$db>>2]|0;
     $118 = $108;
     $119 = $117;
     $120 = (($118) - ($119))|0;
     $121 = (($120|0) / 24)&-1;
     $122 = (($121) + 1)|0;
     $123 = ($122|0)<(0);
     if ($123) {
      __THREW__ = 0;
      invoke_v(41);
      $124 = __THREW__; __THREW__ = 0;
      $125 = $124&1;
      if (!($125)) {
       // unreachable;
      }
      $139 = ___cxa_find_matching_catch()|0;
      $140 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $$017 = $139;$$08 = $140;
      ___resumeException($$017|0);
      // unreachable;
     }
     $126 = $110;
     $127 = (($126) - ($119))|0;
     $128 = (($127|0) / 24)&-1;
     $129 = ($128>>>0)<(1073741823);
     if ($129) {
      $130 = $128 << 1;
      $131 = ($130>>>0)<($122>>>0);
      $132 = $131 ? $122 : $130;
      $$0$i$i$i10 = $132;
     } else {
      $$0$i$i$i10 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7,$$0$i$i$i10,$121,$116);
     $133 = (($__v$i$i7) + 8|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($134|0)==(0|0);
     if (!($135)) {
      ;HEAP32[$134+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$134+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$134+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $136 = (($134) + 12|0);
      ;HEAP32[$136+0>>2]=HEAP32[$106+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$136+8>>2]=HEAP32[$106+8>>2]|0;
      ;HEAP32[$106+0>>2]=0|0;HEAP32[$106+4>>2]=0|0;HEAP32[$106+8>>2]=0|0;
     }
     $137 = (($134) + 24|0);
     HEAP32[$133>>2] = $137;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i7);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
    $138 = (($c$0$in$lcssa) + ($n$0$lcssa)|0);
    $$02 = $138;
    STACKTOP = sp;return ($$02|0);
   }
   $61 = (_malloc(32)|0);
   $62 = (($1) + 8|0);
   HEAP32[$62>>2] = $61;
   HEAP32[$1>>2] = 33;
   $63 = (($1) + 4|0);
   HEAP32[$63>>2] = 21;
   dest=$61+0|0; src=3976+0|0; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $64 = (($61) + 21|0);
   HEAP8[$64>>0] = 0;
   $65 = (($1) + 12|0);
   ;HEAP32[$65+0>>2]=0|0;HEAP32[$65+4>>2]=0|0;HEAP32[$65+8>>2]=0|0;
   $66 = (($db) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($db) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67>>>0)<($69>>>0);
   if ($70) {
    $71 = ($67|0)==(0|0);
    if ($71) {
     $74 = 0;
    } else {
     ;HEAP32[$67+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$67+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $72 = (($67) + 12|0);
     ;HEAP32[$72+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$72+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$65+8>>2]|0;
     ;HEAP32[$65+0>>2]=0|0;HEAP32[$65+4>>2]=0|0;HEAP32[$65+8>>2]=0|0;
     $$pre$i = HEAP32[$66>>2]|0;
     $74 = $$pre$i;
    }
    $73 = (($74) + 24|0);
    HEAP32[$66>>2] = $73;
   } else {
    $75 = (($db) + 12|0);
    $76 = HEAP32[$db>>2]|0;
    $77 = $67;
    $78 = $76;
    $79 = (($77) - ($78))|0;
    $80 = (($79|0) / 24)&-1;
    $81 = (($80) + 1)|0;
    $82 = ($81|0)<(0);
    if ($82) {
     __THREW__ = 0;
     invoke_v(41);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      $99 = ___cxa_find_matching_catch()|0;
      $100 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$0 = $100;$$01 = $99;$145 = $20;
      break;
     } else {
      // unreachable;
     }
    }
    $85 = $69;
    $86 = (($85) - ($78))|0;
    $87 = (($86|0) / 24)&-1;
    $88 = ($87>>>0)<(1073741823);
    if ($88) {
     $89 = $87 << 1;
     $90 = ($89>>>0)<($81>>>0);
     $91 = $90 ? $81 : $89;
     $$0$i$i$i = $91;
    } else {
     $$0$i$i$i = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$80,$75);
    $92 = (($__v$i$i) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if (!($94)) {
     ;HEAP32[$93+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $95 = (($93) + 12|0);
     ;HEAP32[$95+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$65+8>>2]|0;
     ;HEAP32[$65+0>>2]=0|0;HEAP32[$65+4>>2]=0|0;HEAP32[$65+8>>2]=0|0;
    }
    $96 = (($93) + 24|0);
    HEAP32[$92>>2] = $96;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $phitmp = $20 & 1;
   $phitmp6 = ($phitmp<<24>>24)==(0);
   $141 = (($c$0$in$lcssa) + ($n$0$lcssa)|0);
   if ($phitmp6) {
    $$02 = $141;
    STACKTOP = sp;return ($$02|0);
   }
   $142 = (($r) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   _free($143);
   $$02 = $141;
   STACKTOP = sp;return ($$02|0);
  }
 } while(0);
 $144 = $145 & 1;
 $146 = ($144<<24>>24)==(0);
 if ($146) {
  $$017 = $$01;$$08 = $$0;
  ___resumeException($$017|0);
  // unreachable;
 }
 $147 = (($r) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 _free($148);
 $$017 = $$01;$$08 = $$0;
 ___resumeException($$017|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $0 = HEAP8[$__lhs>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $8 = $0&255;
  $9 = $8 >>> 1;
  $10 = (_strlen(($__rhs|0))|0);
  $11 = (($__lhs) + 1|0);
  $13 = $10;$14 = $9;$15 = $11;
 } else {
  $3 = (($__lhs) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_strlen(($__rhs|0))|0);
  $6 = (($__lhs) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $13 = $5;$14 = $4;$15 = $7;
 }
 $12 = (($13) + ($14))|0;
 __THREW__ = 0;
 invoke_viiii(52,($agg$result|0),($15|0),($14|0),($12|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __THREW__ = 0;
  (invoke_iiii(32,($agg$result|0),($__rhs|0),($13|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $22 = HEAP8[$agg$result>>0]|0;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  ___resumeException($20|0);
  // unreachable;
 }
 $25 = (($agg$result) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 ___resumeException($20|0);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i9 = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i4 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (($this) + 1|0);
   HEAP8[$4>>0] = 0;
   HEAP8[$this>>0] = 0;
  } else {
   $5 = (($this) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   HEAP8[$6>>0] = 0;
   $7 = (($this) + 4|0);
   HEAP32[$7>>2] = 0;
   $$pre$i$i$i = HEAP8[$this>>0]|0;
   $8 = $$pre$i$i$i & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $14 = $$pre$i$i$i;$23 = 10;
   } else {
    $10 = HEAP32[$this>>2]|0;
    $11 = $10 & -2;
    $phitmp$i$i$i$i$i$i = (($11) + -1)|0;
    $12 = $10&255;
    $14 = $12;$23 = $phitmp$i$i$i$i$i$i;
   }
   $13 = $14 & 1;
   $15 = ($13<<24>>24)==(0);
   if ($15) {
    $16 = $14&255;
    $17 = $16 >>> 1;
    $18 = ($14&255)<(22);
    if ($18) {
     $22 = 10;$42 = $17;$91 = 1;
    } else {
     $19 = (($17) + 16)|0;
     $20 = $19 & 240;
     $phitmp$i2$i$i$i$i$i = (($20) + -1)|0;
     $22 = $phitmp$i2$i$i$i$i$i;$42 = $17;$91 = 1;
    }
   } else {
    $22 = 10;$42 = 0;$91 = 0;
   }
   $21 = ($22|0)==($23|0);
   if (!($21)) {
    $24 = ($22|0)==(10);
    if ($24) {
     $29 = (($this) + 1|0);
     $30 = HEAP32[$5>>2]|0;
     if ($91) {
      $31 = $14&255;
      $32 = $31 >>> 1;
      $33 = (($32) + 1)|0;
      _memcpy(($29|0),($30|0),($33|0))|0;
      _free($30);
     } else {
      $38 = HEAP8[$30>>0]|0;
      HEAP8[$29>>0] = $38;
      _free($30);
     }
     $43 = $42 << 1;
     $44 = $43&255;
     HEAP8[$this>>0] = $44;
     break;
    }
    $25 = ($22>>>0)<=($23>>>0);
    $26 = (($22) + 1)|0;
    $27 = (_malloc($26)|0);
    $28 = ($27|0)==(0|0);
    $or$cond$i$i$i$i$i = $25 & $28;
    if (!($or$cond$i$i$i$i$i)) {
     if ($91) {
      $34 = (($this) + 1|0);
      $35 = $14&255;
      $36 = $35 >>> 1;
      $37 = (($36) + 1)|0;
      _memcpy(($27|0),($34|0),($37|0))|0;
     } else {
      $39 = HEAP32[$5>>2]|0;
      $40 = HEAP8[$39>>0]|0;
      HEAP8[$27>>0] = $40;
      _free($39);
     }
     $41 = $26 | 1;
     HEAP32[$this>>2] = $41;
     HEAP32[$7>>2] = $42;
     HEAP32[$5>>2] = $27;
    }
   }
  }
 } while(0);
 ;HEAP32[$this+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $45 = (($this) + 12|0);
 $46 = (($0) + 12|0);
 $47 = HEAP8[$45>>0]|0;
 $48 = $47 & 1;
 $49 = ($48<<24>>24)==(0);
 do {
  if ($49) {
   $50 = (($45) + 1|0);
   HEAP8[$50>>0] = 0;
   HEAP8[$45>>0] = 0;
  } else {
   $51 = (($this) + 20|0);
   $52 = HEAP32[$51>>2]|0;
   HEAP8[$52>>0] = 0;
   $53 = (($this) + 16|0);
   HEAP32[$53>>2] = 0;
   $$pre$i$i$i2 = HEAP8[$45>>0]|0;
   $54 = $$pre$i$i$i2 & 1;
   $55 = ($54<<24>>24)==(0);
   if ($55) {
    $60 = $$pre$i$i$i2;$69 = 10;
   } else {
    $56 = HEAP32[$45>>2]|0;
    $57 = $56 & -2;
    $phitmp$i$i$i$i$i$i4 = (($57) + -1)|0;
    $58 = $56&255;
    $60 = $58;$69 = $phitmp$i$i$i$i$i$i4;
   }
   $59 = $60 & 1;
   $61 = ($59<<24>>24)==(0);
   if ($61) {
    $62 = $60&255;
    $63 = $62 >>> 1;
    $64 = ($60&255)<(22);
    if ($64) {
     $68 = 10;$88 = $63;$92 = 1;
    } else {
     $65 = (($63) + 16)|0;
     $66 = $65 & 240;
     $phitmp$i2$i$i$i$i$i7 = (($66) + -1)|0;
     $68 = $phitmp$i2$i$i$i$i$i7;$88 = $63;$92 = 1;
    }
   } else {
    $68 = 10;$88 = 0;$92 = 0;
   }
   $67 = ($68|0)==($69|0);
   if (!($67)) {
    $70 = ($68|0)==(10);
    if ($70) {
     $75 = (($45) + 1|0);
     $76 = HEAP32[$51>>2]|0;
     if ($92) {
      $77 = $60&255;
      $78 = $77 >>> 1;
      $79 = (($78) + 1)|0;
      _memcpy(($75|0),($76|0),($79|0))|0;
      _free($76);
     } else {
      $84 = HEAP8[$76>>0]|0;
      HEAP8[$75>>0] = $84;
      _free($76);
     }
     $89 = $88 << 1;
     $90 = $89&255;
     HEAP8[$45>>0] = $90;
     break;
    }
    $71 = ($68>>>0)<=($69>>>0);
    $72 = (($68) + 1)|0;
    $73 = (_malloc($72)|0);
    $74 = ($73|0)==(0|0);
    $or$cond$i$i$i$i$i9 = $71 & $74;
    if (!($or$cond$i$i$i$i$i9)) {
     if ($92) {
      $80 = (($45) + 1|0);
      $81 = $60&255;
      $82 = $81 >>> 1;
      $83 = (($82) + 1)|0;
      _memcpy(($73|0),($80|0),($83|0))|0;
     } else {
      $85 = HEAP32[$51>>2]|0;
      $86 = HEAP8[$85>>0]|0;
      HEAP8[$73>>0] = $86;
      _free($85);
     }
     $87 = $72 | 1;
     HEAP32[$45>>2] = $87;
     HEAP32[$53>>2] = $88;
     HEAP32[$51>>2] = $73;
    }
   }
  }
 } while(0);
 ;HEAP32[$45+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$46+8>>2]|0;
 ;HEAP32[$46+0>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$0$i$i$i21 = 0, $$0$i$i$i29 = 0, $$0$i$i$i37 = 0, $$0$i$i$i45 = 0, $$0$i$i$i52 = 0, $$0$i$i$i58 = 0, $$02 = 0, $$03 = 0, $$pn = 0, $$pn$v = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i19 = 0, $$pre$i27 = 0, $$pre$i35 = 0, $$pre$i43 = 0, $$pre$i51 = 0;
 var $$pre$i55 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i10 = 0, $__v$i$i18 = 0, $__v$i$i26 = 0, $__v$i$i34 = 0, $__v$i$i42 = 0;
 var $__v$i$i50 = 0, $__v$i$i54 = 0, $eh$lpad$body$i$i$index3Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i61$index10Z2D = 0, $eh$lpad$body$i$i61$indexZ2D = 0, $isdigit = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $or$cond = 0, $or$cond11 = 0, $sub$0 = 0, $sub$0$v = 0, $sub$171 = 0, $sub$2 = 0, $t$072 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i54 = sp + 140|0;
 $__v$i$i50 = sp + 120|0;
 $__v$i$i42 = sp + 244|0;
 $__v$i$i34 = sp + 204|0;
 $__v$i$i26 = sp + 184|0;
 $__v$i$i18 = sp + 224|0;
 $__v$i$i10 = sp + 264|0;
 $__v$i$i = sp + 284|0;
 $0 = sp + 48|0;
 $1 = sp + 24|0;
 $2 = sp + 160|0;
 $3 = sp + 72|0;
 $4 = sp;
 $5 = sp + 96|0;
 $6 = $last;
 $7 = $first;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 if (!($9)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP8[$first>>0]|0;
 $11 = ($10<<24>>24)==(83);
 if (!($11)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($first) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 switch ($14|0) {
 case 98:  {
  $54 = (_malloc(32)|0);
  $55 = (($1) + 8|0);
  HEAP32[$55>>2] = $54;
  HEAP32[$1>>2] = 33;
  $56 = (($1) + 4|0);
  HEAP32[$56>>2] = 17;
  dest=$54+0|0; src=3904+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $57 = (($54) + 17|0);
  HEAP8[$57>>0] = 0;
  $58 = (($1) + 12|0);
  ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
  $59 = (($db) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($db) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60>>>0)<($62>>>0);
  if ($63) {
   $64 = ($60|0)==(0|0);
   if ($64) {
    $67 = 0;
   } else {
    ;HEAP32[$60+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$1+8>>2]|0;
    ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
    $65 = (($60) + 12|0);
    ;HEAP32[$65+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$58+8>>2]|0;
    ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
    $$pre$i11 = HEAP32[$59>>2]|0;
    $67 = $$pre$i11;
   }
   $66 = (($67) + 24|0);
   HEAP32[$59>>2] = $66;
  } else {
   $68 = (($db) + 12|0);
   $69 = HEAP32[$db>>2]|0;
   $70 = $60;
   $71 = $69;
   $72 = (($70) - ($71))|0;
   $73 = (($72|0) / 24)&-1;
   $74 = (($73) + 1)|0;
   $75 = ($74|0)<(0);
   if ($75) {
    __THREW__ = 0;
    invoke_v(41);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if (!($77)) {
     // unreachable;
    }
    $91 = ___cxa_find_matching_catch()|0;
    $92 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    $$02 = $91;$$03 = $92;
    ___resumeException($$02|0);
    // unreachable;
   }
   $78 = $62;
   $79 = (($78) - ($71))|0;
   $80 = (($79|0) / 24)&-1;
   $81 = ($80>>>0)<(1073741823);
   if ($81) {
    $82 = $80 << 1;
    $83 = ($82>>>0)<($74>>>0);
    $84 = $83 ? $74 : $82;
    $$0$i$i$i13 = $84;
   } else {
    $$0$i$i$i13 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i10,$$0$i$i$i13,$73,$68);
   $85 = (($__v$i$i10) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)==(0|0);
   if (!($87)) {
    ;HEAP32[$86+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$1+8>>2]|0;
    ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
    $88 = (($86) + 12|0);
    ;HEAP32[$88+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$88+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$58+8>>2]|0;
    ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
   }
   $89 = (($86) + 24|0);
   HEAP32[$85>>2] = $89;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i10);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i10);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
  $90 = (($first) + 2|0);
  $$0 = $90;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 111:  {
  $171 = (_malloc(16)|0);
  $172 = (($4) + 8|0);
  HEAP32[$172>>2] = $171;
  HEAP32[$4>>2] = 17;
  $173 = (($4) + 4|0);
  HEAP32[$173>>2] = 12;
  dest=$171+0|0; src=3352+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $174 = (($171) + 12|0);
  HEAP8[$174>>0] = 0;
  $175 = (($4) + 12|0);
  ;HEAP32[$175+0>>2]=0|0;HEAP32[$175+4>>2]=0|0;HEAP32[$175+8>>2]=0|0;
  $176 = (($db) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($db) + 8|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($177>>>0)<($179>>>0);
  if ($180) {
   $181 = ($177|0)==(0|0);
   if ($181) {
    $184 = 0;
   } else {
    ;HEAP32[$177+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$177+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$177+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $182 = (($177) + 12|0);
    ;HEAP32[$182+0>>2]=HEAP32[$175+0>>2]|0;HEAP32[$182+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$182+8>>2]=HEAP32[$175+8>>2]|0;
    ;HEAP32[$175+0>>2]=0|0;HEAP32[$175+4>>2]=0|0;HEAP32[$175+8>>2]=0|0;
    $$pre$i35 = HEAP32[$176>>2]|0;
    $184 = $$pre$i35;
   }
   $183 = (($184) + 24|0);
   HEAP32[$176>>2] = $183;
  } else {
   $185 = (($db) + 12|0);
   $186 = HEAP32[$db>>2]|0;
   $187 = $177;
   $188 = $186;
   $189 = (($187) - ($188))|0;
   $190 = (($189|0) / 24)&-1;
   $191 = (($190) + 1)|0;
   $192 = ($191|0)<(0);
   if ($192) {
    __THREW__ = 0;
    invoke_v(41);
    $193 = __THREW__; __THREW__ = 0;
    $194 = $193&1;
    if (!($194)) {
     // unreachable;
    }
    $208 = ___cxa_find_matching_catch()|0;
    $209 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    $$02 = $208;$$03 = $209;
    ___resumeException($$02|0);
    // unreachable;
   }
   $195 = $179;
   $196 = (($195) - ($188))|0;
   $197 = (($196|0) / 24)&-1;
   $198 = ($197>>>0)<(1073741823);
   if ($198) {
    $199 = $197 << 1;
    $200 = ($199>>>0)<($191>>>0);
    $201 = $200 ? $191 : $199;
    $$0$i$i$i37 = $201;
   } else {
    $$0$i$i$i37 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i34,$$0$i$i$i37,$190,$185);
   $202 = (($__v$i$i34) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)==(0|0);
   if (!($204)) {
    ;HEAP32[$203+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$203+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$203+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $205 = (($203) + 12|0);
    ;HEAP32[$205+0>>2]=HEAP32[$175+0>>2]|0;HEAP32[$205+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$205+8>>2]=HEAP32[$175+8>>2]|0;
    ;HEAP32[$175+0>>2]=0|0;HEAP32[$175+4>>2]=0|0;HEAP32[$175+8>>2]=0|0;
   }
   $206 = (($203) + 24|0);
   HEAP32[$202>>2] = $206;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i34);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i34);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
  $207 = (($first) + 2|0);
  $$0 = $207;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 115:  {
  $93 = (_malloc(16)|0);
  $94 = (($2) + 8|0);
  HEAP32[$94>>2] = $93;
  HEAP32[$2>>2] = 17;
  $95 = (($2) + 4|0);
  HEAP32[$95>>2] = 11;
  dest=$93+0|0; src=3160+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $96 = (($93) + 11|0);
  HEAP8[$96>>0] = 0;
  $97 = (($2) + 12|0);
  ;HEAP32[$97+0>>2]=0|0;HEAP32[$97+4>>2]=0|0;HEAP32[$97+8>>2]=0|0;
  $98 = (($db) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($db) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99>>>0)<($101>>>0);
  if ($102) {
   $103 = ($99|0)==(0|0);
   if ($103) {
    $106 = 0;
   } else {
    ;HEAP32[$99+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$2+8>>2]|0;
    ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
    $104 = (($99) + 12|0);
    ;HEAP32[$104+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$104+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$104+8>>2]=HEAP32[$97+8>>2]|0;
    ;HEAP32[$97+0>>2]=0|0;HEAP32[$97+4>>2]=0|0;HEAP32[$97+8>>2]=0|0;
    $$pre$i19 = HEAP32[$98>>2]|0;
    $106 = $$pre$i19;
   }
   $105 = (($106) + 24|0);
   HEAP32[$98>>2] = $105;
  } else {
   $107 = (($db) + 12|0);
   $108 = HEAP32[$db>>2]|0;
   $109 = $99;
   $110 = $108;
   $111 = (($109) - ($110))|0;
   $112 = (($111|0) / 24)&-1;
   $113 = (($112) + 1)|0;
   $114 = ($113|0)<(0);
   if ($114) {
    __THREW__ = 0;
    invoke_v(41);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if (!($116)) {
     // unreachable;
    }
    $130 = ___cxa_find_matching_catch()|0;
    $131 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
    $$02 = $130;$$03 = $131;
    ___resumeException($$02|0);
    // unreachable;
   }
   $117 = $101;
   $118 = (($117) - ($110))|0;
   $119 = (($118|0) / 24)&-1;
   $120 = ($119>>>0)<(1073741823);
   if ($120) {
    $121 = $119 << 1;
    $122 = ($121>>>0)<($113>>>0);
    $123 = $122 ? $113 : $121;
    $$0$i$i$i21 = $123;
   } else {
    $$0$i$i$i21 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18,$$0$i$i$i21,$112,$107);
   $124 = (($__v$i$i18) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(0|0);
   if (!($126)) {
    ;HEAP32[$125+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[$2+8>>2]|0;
    ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
    $127 = (($125) + 12|0);
    ;HEAP32[$127+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$127+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$97+8>>2]|0;
    ;HEAP32[$97+0>>2]=0|0;HEAP32[$97+4>>2]=0|0;HEAP32[$97+8>>2]=0|0;
   }
   $128 = (($125) + 24|0);
   HEAP32[$124>>2] = $128;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i18);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
  $129 = (($first) + 2|0);
  $$0 = $129;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 95:  {
  $249 = (($db) + 16|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($db) + 20|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($250|0)==($252|0);
  if ($253) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $254 = HEAP32[$250>>2]|0;
  $255 = (($250) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ($254|0)==($256|0);
  L133: do {
   if (!($257)) {
    $258 = (($db) + 4|0);
    $259 = (($db) + 8|0);
    $260 = (($db) + 12|0);
    $261 = (($__v$i$i50) + 8|0);
    $266 = $254;
    while(1) {
     $262 = HEAP32[$258>>2]|0;
     $263 = HEAP32[$259>>2]|0;
     $264 = ($262|0)==($263|0);
     if ($264) {
      $280 = HEAP32[$db>>2]|0;
      $281 = $262;
      $282 = $280;
      $283 = (($281) - ($282))|0;
      $284 = (($283|0) / 24)&-1;
      $285 = (($284) + 1)|0;
      $286 = ($285|0)<(0);
      if ($286) {
       label = 100;
       break;
      }
      $287 = ($284>>>0)<(1073741823);
      if ($287) {
       $288 = $284 << 1;
       $289 = ($288>>>0)<($285>>>0);
       $290 = $289 ? $285 : $288;
       $$0$i$i$i52 = $290;
      } else {
       $$0$i$i$i52 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i50,$$0$i$i$i52,$284,$260);
      $291 = HEAP32[$261>>2]|0;
      $292 = ($291|0)==(0|0);
      if (!($292)) {
       __THREW__ = 0;
       invoke_vii(39,($291|0),($266|0));
       $293 = __THREW__; __THREW__ = 0;
       $294 = $293&1;
       if ($294) {
        label = 108;
        break;
       }
       $295 = (($291) + 12|0);
       $296 = (($266) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($295|0),($296|0));
       $297 = __THREW__; __THREW__ = 0;
       $298 = $297&1;
       if ($298) {
        label = 106;
        break;
       }
      }
      $308 = (($291) + 24|0);
      HEAP32[$261>>2] = $308;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i50);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i50);
     } else {
      $265 = ($262|0)==(0|0);
      if ($265) {
       $279 = 0;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($262,$266);
       $267 = (($262) + 12|0);
       $268 = (($266) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($267|0),($268|0));
       $269 = __THREW__; __THREW__ = 0;
       $270 = $269&1;
       if ($270) {
        label = 95;
        break;
       }
       $$pre$i51 = HEAP32[$258>>2]|0;
       $279 = $$pre$i51;
      }
      $278 = (($279) + 24|0);
      HEAP32[$258>>2] = $278;
     }
     $309 = (($266) + 24|0);
     $310 = ($309|0)==($256|0);
     if ($310) {
      break L133;
     } else {
      $266 = $309;
     }
    }
    if ((label|0) == 95) {
     $271 = ___cxa_find_matching_catch()|0;
     $272 = tempRet0;
     $273 = HEAP8[$262>>0]|0;
     $274 = $273 & 1;
     $275 = ($274<<24>>24)==(0);
     if ($275) {
      ___resumeException($271|0);
      // unreachable;
     }
     $276 = (($262) + 8|0);
     $277 = HEAP32[$276>>2]|0;
     _free($277);
     ___resumeException($271|0);
     // unreachable;
    }
    else if ((label|0) == 100) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    else if ((label|0) == 106) {
     $299 = ___cxa_find_matching_catch()|0;
     $300 = tempRet0;
     $301 = HEAP8[$291>>0]|0;
     $302 = $301 & 1;
     $303 = ($302<<24>>24)==(0);
     if ($303) {
      $eh$lpad$body$i$i$index3Z2D = $300;$eh$lpad$body$i$i$indexZ2D = $299;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i50);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     $304 = (($291) + 8|0);
     $305 = HEAP32[$304>>2]|0;
     _free($305);
     $eh$lpad$body$i$i$index3Z2D = $300;$eh$lpad$body$i$i$indexZ2D = $299;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i50);
     ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
     // unreachable;
    }
    else if ((label|0) == 108) {
     $306 = ___cxa_find_matching_catch()|0;
     $307 = tempRet0;
     $eh$lpad$body$i$i$index3Z2D = $307;$eh$lpad$body$i$i$indexZ2D = $306;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i50);
     ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
     // unreachable;
    }
   }
  } while(0);
  $311 = (($first) + 2|0);
  $$0 = $311;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 105:  {
  $132 = (_malloc(16)|0);
  $133 = (($3) + 8|0);
  HEAP32[$133>>2] = $132;
  HEAP32[$3>>2] = 17;
  $134 = (($3) + 4|0);
  HEAP32[$134>>2] = 12;
  dest=$132+0|0; src=3264+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $135 = (($132) + 12|0);
  HEAP8[$135>>0] = 0;
  $136 = (($3) + 12|0);
  ;HEAP32[$136+0>>2]=0|0;HEAP32[$136+4>>2]=0|0;HEAP32[$136+8>>2]=0|0;
  $137 = (($db) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($db) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($138>>>0)<($140>>>0);
  if ($141) {
   $142 = ($138|0)==(0|0);
   if ($142) {
    $145 = 0;
   } else {
    ;HEAP32[$138+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$138+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $143 = (($138) + 12|0);
    ;HEAP32[$143+0>>2]=HEAP32[$136+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$136+4>>2]|0;HEAP32[$143+8>>2]=HEAP32[$136+8>>2]|0;
    ;HEAP32[$136+0>>2]=0|0;HEAP32[$136+4>>2]=0|0;HEAP32[$136+8>>2]=0|0;
    $$pre$i27 = HEAP32[$137>>2]|0;
    $145 = $$pre$i27;
   }
   $144 = (($145) + 24|0);
   HEAP32[$137>>2] = $144;
  } else {
   $146 = (($db) + 12|0);
   $147 = HEAP32[$db>>2]|0;
   $148 = $138;
   $149 = $147;
   $150 = (($148) - ($149))|0;
   $151 = (($150|0) / 24)&-1;
   $152 = (($151) + 1)|0;
   $153 = ($152|0)<(0);
   if ($153) {
    __THREW__ = 0;
    invoke_v(41);
    $154 = __THREW__; __THREW__ = 0;
    $155 = $154&1;
    if (!($155)) {
     // unreachable;
    }
    $169 = ___cxa_find_matching_catch()|0;
    $170 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$02 = $169;$$03 = $170;
    ___resumeException($$02|0);
    // unreachable;
   }
   $156 = $140;
   $157 = (($156) - ($149))|0;
   $158 = (($157|0) / 24)&-1;
   $159 = ($158>>>0)<(1073741823);
   if ($159) {
    $160 = $158 << 1;
    $161 = ($160>>>0)<($152>>>0);
    $162 = $161 ? $152 : $160;
    $$0$i$i$i29 = $162;
   } else {
    $$0$i$i$i29 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i26,$$0$i$i$i29,$151,$146);
   $163 = (($__v$i$i26) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)==(0|0);
   if (!($165)) {
    ;HEAP32[$164+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$164+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$164+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $166 = (($164) + 12|0);
    ;HEAP32[$166+0>>2]=HEAP32[$136+0>>2]|0;HEAP32[$166+4>>2]=HEAP32[$136+4>>2]|0;HEAP32[$166+8>>2]=HEAP32[$136+8>>2]|0;
    ;HEAP32[$136+0>>2]=0|0;HEAP32[$136+4>>2]=0|0;HEAP32[$136+8>>2]=0|0;
   }
   $167 = (($164) + 24|0);
   HEAP32[$163>>2] = $167;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i26);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
  $168 = (($first) + 2|0);
  $$0 = $168;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 97:  {
  $15 = (_malloc(16)|0);
  $16 = (($0) + 8|0);
  HEAP32[$16>>2] = $15;
  HEAP32[$0>>2] = 17;
  $17 = (($0) + 4|0);
  HEAP32[$17>>2] = 14;
  dest=$15+0|0; src=3888+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $18 = (($15) + 14|0);
  HEAP8[$18>>0] = 0;
  $19 = (($0) + 12|0);
  ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
  $20 = (($db) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($db) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21>>>0)<($23>>>0);
  if ($24) {
   $25 = ($21|0)==(0|0);
   if ($25) {
    $28 = 0;
   } else {
    ;HEAP32[$21+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$21+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$0+8>>2]|0;
    ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
    $26 = (($21) + 12|0);
    ;HEAP32[$26+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$19+8>>2]|0;
    ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
    $$pre$i = HEAP32[$20>>2]|0;
    $28 = $$pre$i;
   }
   $27 = (($28) + 24|0);
   HEAP32[$20>>2] = $27;
  } else {
   $29 = (($db) + 12|0);
   $30 = HEAP32[$db>>2]|0;
   $31 = $21;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($33|0) / 24)&-1;
   $35 = (($34) + 1)|0;
   $36 = ($35|0)<(0);
   if ($36) {
    __THREW__ = 0;
    invoke_v(41);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     // unreachable;
    }
    $52 = ___cxa_find_matching_catch()|0;
    $53 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    $$02 = $52;$$03 = $53;
    ___resumeException($$02|0);
    // unreachable;
   }
   $39 = $23;
   $40 = (($39) - ($32))|0;
   $41 = (($40|0) / 24)&-1;
   $42 = ($41>>>0)<(1073741823);
   if ($42) {
    $43 = $41 << 1;
    $44 = ($43>>>0)<($35>>>0);
    $45 = $44 ? $35 : $43;
    $$0$i$i$i = $45;
   } else {
    $$0$i$i$i = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$34,$29);
   $46 = (($__v$i$i) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    ;HEAP32[$47+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$0+8>>2]|0;
    ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
    $49 = (($47) + 12|0);
    ;HEAP32[$49+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$49+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$19+8>>2]|0;
    ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
   }
   $50 = (($47) + 24|0);
   HEAP32[$46>>2] = $50;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
  $51 = (($first) + 2|0);
  $$0 = $51;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 100:  {
  $210 = (_malloc(16)|0);
  $211 = (($5) + 8|0);
  HEAP32[$211>>2] = $210;
  HEAP32[$5>>2] = 17;
  $212 = (($5) + 4|0);
  HEAP32[$212>>2] = 13;
  dest=$210+0|0; src=3440+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $213 = (($210) + 13|0);
  HEAP8[$213>>0] = 0;
  $214 = (($5) + 12|0);
  ;HEAP32[$214+0>>2]=0|0;HEAP32[$214+4>>2]=0|0;HEAP32[$214+8>>2]=0|0;
  $215 = (($db) + 4|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($db) + 8|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($216>>>0)<($218>>>0);
  if ($219) {
   $220 = ($216|0)==(0|0);
   if ($220) {
    $223 = 0;
   } else {
    ;HEAP32[$216+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$216+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$216+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    $221 = (($216) + 12|0);
    ;HEAP32[$221+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$214+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$214+8>>2]|0;
    ;HEAP32[$214+0>>2]=0|0;HEAP32[$214+4>>2]=0|0;HEAP32[$214+8>>2]=0|0;
    $$pre$i43 = HEAP32[$215>>2]|0;
    $223 = $$pre$i43;
   }
   $222 = (($223) + 24|0);
   HEAP32[$215>>2] = $222;
  } else {
   $224 = (($db) + 12|0);
   $225 = HEAP32[$db>>2]|0;
   $226 = $216;
   $227 = $225;
   $228 = (($226) - ($227))|0;
   $229 = (($228|0) / 24)&-1;
   $230 = (($229) + 1)|0;
   $231 = ($230|0)<(0);
   if ($231) {
    __THREW__ = 0;
    invoke_v(41);
    $232 = __THREW__; __THREW__ = 0;
    $233 = $232&1;
    if (!($233)) {
     // unreachable;
    }
    $247 = ___cxa_find_matching_catch()|0;
    $248 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $$02 = $247;$$03 = $248;
    ___resumeException($$02|0);
    // unreachable;
   }
   $234 = $218;
   $235 = (($234) - ($227))|0;
   $236 = (($235|0) / 24)&-1;
   $237 = ($236>>>0)<(1073741823);
   if ($237) {
    $238 = $236 << 1;
    $239 = ($238>>>0)<($230>>>0);
    $240 = $239 ? $230 : $238;
    $$0$i$i$i45 = $240;
   } else {
    $$0$i$i$i45 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i42,$$0$i$i$i45,$229,$224);
   $241 = (($__v$i$i42) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = ($242|0)==(0|0);
   if (!($243)) {
    ;HEAP32[$242+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$242+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$242+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    $244 = (($242) + 12|0);
    ;HEAP32[$244+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$214+4>>2]|0;HEAP32[$244+8>>2]=HEAP32[$214+8>>2]|0;
    ;HEAP32[$214+0>>2]=0|0;HEAP32[$214+4>>2]=0|0;HEAP32[$214+8>>2]=0|0;
   }
   $245 = (($242) + 24|0);
   HEAP32[$241>>2] = $245;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i42);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i42);
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
  $246 = (($first) + 2|0);
  $$0 = $246;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $isdigittmp = (($14) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $312 = (($14) + -65)|0;
  $313 = ($312>>>0)<(26);
  $or$cond = $isdigit | $313;
  if (!($or$cond)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $314 = (($first) + 2|0);
  $315 = ($314|0)==($last|0);
  if ($315) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $sub$0$v = $isdigit ? -48 : -55;
  $sub$0 = (($sub$0$v) + ($14))|0;
  $sub$171 = $sub$0;$t$072 = $314;
  while(1) {
   $316 = HEAP8[$t$072>>0]|0;
   $317 = $316 << 24 >> 24;
   $isdigittmp6 = (($317) + -48)|0;
   $isdigit7 = ($isdigittmp6>>>0)<(10);
   $318 = (($317) + -65)|0;
   $319 = ($318>>>0)<(26);
   $or$cond11 = $isdigit7 | $319;
   if (!($or$cond11)) {
    break;
   }
   $320 = ($sub$171*36)|0;
   $$pn$v = $isdigit7 ? -48 : -55;
   $$pn = (($317) + ($320))|0;
   $sub$2 = (($$pn) + ($$pn$v))|0;
   $321 = (($t$072) + 1|0);
   $322 = ($321|0)==($last|0);
   if ($322) {
    $$0 = $first;
    label = 144;
    break;
   } else {
    $sub$171 = $sub$2;$t$072 = $321;
   }
  }
  if ((label|0) == 144) {
   STACKTOP = sp;return ($$0|0);
  }
  $323 = ($316<<24>>24)==(95);
  if (!($323)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $324 = (($sub$171) + 1)|0;
  $325 = (($db) + 20|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($db) + 16|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $326;
  $330 = $328;
  $331 = (($329) - ($330))|0;
  $332 = $331 >> 4;
  $333 = ($324>>>0)<($332>>>0);
  if (!($333)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $334 = (($328) + ($324<<4)|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ((($328) + ($324<<4)|0) + 4|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = ($335|0)==($337|0);
  L27: do {
   if (!($338)) {
    $339 = (($db) + 4|0);
    $340 = (($db) + 8|0);
    $341 = (($db) + 12|0);
    $342 = (($__v$i$i54) + 8|0);
    $347 = $335;
    while(1) {
     $343 = HEAP32[$339>>2]|0;
     $344 = HEAP32[$340>>2]|0;
     $345 = ($343|0)==($344|0);
     if ($345) {
      $361 = HEAP32[$db>>2]|0;
      $362 = $343;
      $363 = $361;
      $364 = (($362) - ($363))|0;
      $365 = (($364|0) / 24)&-1;
      $366 = (($365) + 1)|0;
      $367 = ($366|0)<(0);
      if ($367) {
       label = 131;
       break;
      }
      $368 = ($365>>>0)<(1073741823);
      if ($368) {
       $369 = $365 << 1;
       $370 = ($369>>>0)<($366>>>0);
       $371 = $370 ? $366 : $369;
       $$0$i$i$i58 = $371;
      } else {
       $$0$i$i$i58 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i54,$$0$i$i$i58,$365,$341);
      $372 = HEAP32[$342>>2]|0;
      $373 = ($372|0)==(0|0);
      if (!($373)) {
       __THREW__ = 0;
       invoke_vii(39,($372|0),($347|0));
       $374 = __THREW__; __THREW__ = 0;
       $375 = $374&1;
       if ($375) {
        label = 139;
        break;
       }
       $376 = (($372) + 12|0);
       $377 = (($347) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($376|0),($377|0));
       $378 = __THREW__; __THREW__ = 0;
       $379 = $378&1;
       if ($379) {
        label = 137;
        break;
       }
      }
      $389 = (($372) + 24|0);
      HEAP32[$342>>2] = $389;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i54);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i54);
     } else {
      $346 = ($343|0)==(0|0);
      if ($346) {
       $360 = 0;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($343,$347);
       $348 = (($343) + 12|0);
       $349 = (($347) + 12|0);
       __THREW__ = 0;
       invoke_vii(39,($348|0),($349|0));
       $350 = __THREW__; __THREW__ = 0;
       $351 = $350&1;
       if ($351) {
        label = 126;
        break;
       }
       $$pre$i55 = HEAP32[$339>>2]|0;
       $360 = $$pre$i55;
      }
      $359 = (($360) + 24|0);
      HEAP32[$339>>2] = $359;
     }
     $390 = (($347) + 24|0);
     $391 = ($390|0)==($337|0);
     if ($391) {
      break L27;
     } else {
      $347 = $390;
     }
    }
    if ((label|0) == 126) {
     $352 = ___cxa_find_matching_catch()|0;
     $353 = tempRet0;
     $354 = HEAP8[$343>>0]|0;
     $355 = $354 & 1;
     $356 = ($355<<24>>24)==(0);
     if ($356) {
      ___resumeException($352|0);
      // unreachable;
     }
     $357 = (($343) + 8|0);
     $358 = HEAP32[$357>>2]|0;
     _free($358);
     ___resumeException($352|0);
     // unreachable;
    }
    else if ((label|0) == 131) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
     // unreachable;
    }
    else if ((label|0) == 137) {
     $380 = ___cxa_find_matching_catch()|0;
     $381 = tempRet0;
     $382 = HEAP8[$372>>0]|0;
     $383 = $382 & 1;
     $384 = ($383<<24>>24)==(0);
     if ($384) {
      $eh$lpad$body$i$i61$index10Z2D = $381;$eh$lpad$body$i$i61$indexZ2D = $380;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i54);
      ___resumeException($eh$lpad$body$i$i61$indexZ2D|0);
      // unreachable;
     }
     $385 = (($372) + 8|0);
     $386 = HEAP32[$385>>2]|0;
     _free($386);
     $eh$lpad$body$i$i61$index10Z2D = $381;$eh$lpad$body$i$i61$indexZ2D = $380;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i54);
     ___resumeException($eh$lpad$body$i$i61$indexZ2D|0);
     // unreachable;
    }
    else if ((label|0) == 139) {
     $387 = ___cxa_find_matching_catch()|0;
     $388 = tempRet0;
     $eh$lpad$body$i$i61$index10Z2D = $388;$eh$lpad$body$i$i61$indexZ2D = $387;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i54);
     ___resumeException($eh$lpad$body$i$i61$indexZ2D|0);
     // unreachable;
    }
   }
  } while(0);
  $392 = (($t$072) + 1|0);
  $$0 = $392;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$03 = 0, $$1 = 0, $$12 = 0, $$pre = 0, $$sroa$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, $phitmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $$sroa$4 = sp + 48|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(3);
 if (!($6)) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $7 = HEAP8[$first>>0]|0;
 $8 = ($7<<24>>24)==(68);
 if (!($8)) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $9 = (($first) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 if (!((($11|0) == 84) | (($11|0) == 116))) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $12 = (($first) + 2|0);
 $13 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12,$last,$db)|0);
 $14 = ($13|0)==($12|0);
 $15 = ($13|0)==($last|0);
 $or$cond = $14 | $15;
 if ($or$cond) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $16 = HEAP8[$13>>0]|0;
 $17 = ($16<<24>>24)==(69);
 if (!($17)) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $18 = HEAP32[$db>>2]|0;
 $19 = (($db) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)==($20|0);
 if ($21) {
  $$03 = $first;
  STACKTOP = sp;return ($$03|0);
 }
 $22 = (($20) + -24|0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$22);
 __THREW__ = 0;
 $23 = (invoke_iiiii(33,($2|0),0,(3872|0),9)|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 do {
  if ($25) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$1 = $45;$$12 = $44;
  } else {
   ;HEAP32[$1+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$23+8>>2]|0;
   ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
   __THREW__ = 0;
   $26 = (invoke_iiii(32,($1|0),(2000|0),1)|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $46 = ___cxa_find_matching_catch()|0;
    $47 = tempRet0;
    $48 = HEAP8[$1>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $$1 = $47;$$12 = $46;
     break;
    }
    $51 = (($1) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    _free($52);
    $$1 = $47;$$12 = $46;
    break;
   }
   $29 = HEAP8[$26>>0]|0;
   $30 = (($26) + 1|0);
   ;HEAP8[$$sroa$4+0>>0]=HEAP8[$30+0>>0]|0;HEAP8[$$sroa$4+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$$sroa$4+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$$sroa$4+3>>0]=HEAP8[$30+3>>0]|0;HEAP8[$$sroa$4+4>>0]=HEAP8[$30+4>>0]|0;HEAP8[$$sroa$4+5>>0]=HEAP8[$30+5>>0]|0;HEAP8[$$sroa$4+6>>0]=HEAP8[$30+6>>0]|0;
   $31 = (($26) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
   HEAP8[$0>>0] = $29;
   $33 = (($0) + 1|0);
   ;HEAP8[$33+0>>0]=HEAP8[$$sroa$4+0>>0]|0;HEAP8[$33+1>>0]=HEAP8[$$sroa$4+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$$sroa$4+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$$sroa$4+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$$sroa$4+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$$sroa$4+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$$sroa$4+6>>0]|0;
   $34 = (($0) + 8|0);
   HEAP32[$34>>2] = $32;
   ;HEAP8[$$sroa$4+0>>0]=0|0;HEAP8[$$sroa$4+1>>0]=0|0;HEAP8[$$sroa$4+2>>0]=0|0;HEAP8[$$sroa$4+3>>0]=0|0;HEAP8[$$sroa$4+4>>0]=0|0;HEAP8[$$sroa$4+5>>0]=0|0;HEAP8[$$sroa$4+6>>0]=0|0;
   $35 = (($0) + 12|0);
   ;HEAP32[$35+0>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($22,$0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $$pre = HEAP8[$1>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp6 = ($phitmp<<24>>24)==(0);
   if (!($phitmp6)) {
    $36 = (($1) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    _free($37);
   }
   $38 = HEAP8[$2>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if (!($40)) {
    $41 = (($2) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    _free($42);
   }
   $43 = (($13) + 1|0);
   $$03 = $43;
   STACKTOP = sp;return ($$03|0);
  }
 } while(0);
 $53 = HEAP8[$2>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  ___resumeException($$12|0);
  // unreachable;
 }
 $56 = (($2) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 _free($57);
 ___resumeException($$12|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $0 = (_strlen(($__lhs|0))|0);
 $1 = HEAP8[$__rhs>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = $1&255;
  $7 = $6 >>> 1;
  $9 = $7;
 } else {
  $4 = (($__rhs) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $9 = $5;
 }
 $8 = (($9) + ($0))|0;
 __THREW__ = 0;
 invoke_viiii(52,($agg$result|0),($__lhs|0),($0|0),($8|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = HEAP8[$__rhs>>0]|0;
  $13 = $12 & 1;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   $17 = (($__rhs) + 1|0);
   $18 = $17;
  } else {
   $15 = (($__rhs) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $18 = $16;
  }
  __THREW__ = 0;
  (invoke_iiii(32,($agg$result|0),($18|0),($9|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   STACKTOP = sp;return;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $23 = HEAP8[$agg$result>>0]|0;
 $24 = $23 & 1;
 $25 = ($24<<24>>24)==(0);
 if ($25) {
  ___resumeException($21|0);
  // unreachable;
 }
 $26 = (($agg$result) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 ___resumeException($21|0);
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return;
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return;
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$11,$12);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i$i10$i = 0, $$0$i$i$i21$i = 0, $$01$i = 0, $$04$i$i = 0, $$1$i = 0, $$1$i13 = 0, $$12$i = 0, $$14$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i6 = 0, $$pre$i19$i = 0, $$pre$i8$i = 0, $$pre25 = 0, $$pre26 = 0;
 var $$sroa$6 = 0, $$sroa$619 = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i = 0, $__p$13$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i4 = 0, $__v$i$i18$i = 0, $__v$i$i7$i = 0, $isdigit$i = 0, $isdigit11$i = 0, $isdigit13$i = 0;
 var $isdigit9$i = 0, $isdigittmp$i = 0, $isdigittmp10$i = 0, $isdigittmp12$i = 0, $isdigittmp8$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp28 = 0, $phitmp29 = 0, $t0$0$i = 0, $t01$0$i = 0, $t01$1$i = 0, $t01$2$i = 0, $t1$0$i$lcssa = 0;
 var $t1$0$i19 = 0, $t13$0$i$lcssa = 0, $t13$0$i23 = 0, $tmp$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i18$i = sp + 136|0;
 $__v$i$i$i4 = sp + 12|0;
 $0 = sp + 72|0;
 $$sroa$619 = sp;
 $1 = sp + 48|0;
 $tmp$i = sp + 200|0;
 $2 = sp + 212|0;
 $__v$i$i7$i = sp + 224|0;
 $__v$i$i$i = sp + 156|0;
 $3 = sp + 176|0;
 $4 = sp + 32|0;
 $5 = sp + 112|0;
 $$sroa$6 = sp + 244|0;
 $6 = sp + 96|0;
 $7 = ($first|0)==($last|0);
 if ($7) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP8[$first>>0]|0;
 $9 = $8 << 24 >> 24;
 switch ($9|0) {
 case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
  $443 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  STACKTOP = sp;return ($443|0);
  break;
 }
 case 85:  {
  $114 = $last;
  $115 = $first;
  $116 = (($114) - ($115))|0;
  $117 = ($116|0)>(2);
  $118 = ($8<<24>>24)==(85);
  $or$cond = $117 & $118;
  if (!($or$cond)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $119 = (($first) + 1|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120 << 24 >> 24;
  if ((($121|0) == 108)) {
   HEAP8[$1>>0] = 18;
   $192 = (($1) + 1|0);
   ;HEAP8[$192+0>>0]=HEAP8[3144+0>>0]|0;HEAP8[$192+1>>0]=HEAP8[3144+1>>0]|0;HEAP8[$192+2>>0]=HEAP8[3144+2>>0]|0;HEAP8[$192+3>>0]=HEAP8[3144+3>>0]|0;HEAP8[$192+4>>0]=HEAP8[3144+4>>0]|0;HEAP8[$192+5>>0]=HEAP8[3144+5>>0]|0;HEAP8[$192+6>>0]=HEAP8[3144+6>>0]|0;
   $193 = (($1) + 8|0);
   HEAP32[$193>>2] = (10279);
   $194 = (($1) + 12|0);
   ;HEAP32[$194+0>>2]=0|0;HEAP32[$194+4>>2]=0|0;HEAP32[$194+8>>2]=0|0;
   $195 = (($db) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($db) + 8|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ($196>>>0)<($198>>>0);
   if ($199) {
    $200 = ($196|0)==(0|0);
    if ($200) {
     $203 = 0;
    } else {
     ;HEAP32[$196+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$196+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $201 = (($196) + 12|0);
     ;HEAP32[$201+0>>2]=HEAP32[$194+0>>2]|0;HEAP32[$201+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$201+8>>2]=HEAP32[$194+8>>2]|0;
     ;HEAP32[$194+0>>2]=0|0;HEAP32[$194+4>>2]=0|0;HEAP32[$194+8>>2]=0|0;
     $$pre$i19$i = HEAP32[$195>>2]|0;
     $203 = $$pre$i19$i;
    }
    $202 = (($203) + 24|0);
    HEAP32[$195>>2] = $202;
   } else {
    $204 = (($db) + 12|0);
    $205 = HEAP32[$db>>2]|0;
    $206 = $196;
    $207 = $205;
    $208 = (($206) - ($207))|0;
    $209 = (($208|0) / 24)&-1;
    $210 = (($209) + 1)|0;
    $211 = ($210|0)<(0);
    if ($211) {
     __THREW__ = 0;
     invoke_v(41);
     $212 = __THREW__; __THREW__ = 0;
     $213 = $212&1;
     if (!($213)) {
      // unreachable;
     }
     $229 = ___cxa_find_matching_catch()|0;
     $230 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $$1$i13 = $230;$$14$i = $229;
     ___resumeException($$14$i|0);
     // unreachable;
    }
    $214 = $198;
    $215 = (($214) - ($207))|0;
    $216 = (($215|0) / 24)&-1;
    $217 = ($216>>>0)<(1073741823);
    if ($217) {
     $218 = $216 << 1;
     $219 = ($218>>>0)<($210>>>0);
     $220 = $219 ? $210 : $218;
     $$0$i$i$i21$i = $220;
    } else {
     $$0$i$i$i21$i = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18$i,$$0$i$i$i21$i,$209,$204);
    $221 = (($__v$i$i18$i) + 8|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($222|0)==(0|0);
    if (!($223)) {
     ;HEAP32[$222+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$222+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$222+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $224 = (($222) + 12|0);
     ;HEAP32[$224+0>>2]=HEAP32[$194+0>>2]|0;HEAP32[$224+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$224+8>>2]=HEAP32[$194+8>>2]|0;
     ;HEAP32[$194+0>>2]=0|0;HEAP32[$194+4>>2]=0|0;HEAP32[$194+8>>2]=0|0;
    }
    $225 = (($222) + 24|0);
    HEAP32[$221>>2] = $225;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i18$i);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18$i);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $$phi$trans$insert = (($first) + 2|0);
   $$pre25 = HEAP8[$$phi$trans$insert>>0]|0;
   $phitmp = ($$pre25<<24>>24)==(118);
   L34: do {
    if ($phitmp) {
     $226 = HEAP32[$195>>2]|0;
     $227 = (($226) + -24|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($227,41);
     $228 = (($first) + 3|0);
     $t01$1$i = $228;
    } else {
     $231 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$phi$trans$insert,$last,$db)|0);
     $232 = ($231|0)==($$phi$trans$insert|0);
     $233 = HEAP32[$195>>2]|0;
     if ($232) {
      $234 = (($233) + -24|0);
      $236 = $233;
      while(1) {
       $235 = (($236) + -24|0);
       HEAP32[$195>>2] = $235;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($235);
       $237 = HEAP32[$195>>2]|0;
       $238 = ($237|0)==($234|0);
       if ($238) {
        $$0 = $first;
        break;
       } else {
        $236 = $237;
       }
      }
      STACKTOP = sp;return ($$0|0);
     }
     $239 = HEAP32[$db>>2]|0;
     $240 = $233;
     $241 = $239;
     $242 = (($240) - ($241))|0;
     $243 = (($242|0) / 24)&-1;
     $244 = ($243>>>0)<(2);
     if ($244) {
      $$0 = $first;
      STACKTOP = sp;return ($$0|0);
     }
     $245 = (($233) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i,$245);
     $246 = HEAP32[$195>>2]|0;
     $247 = (($246) + -24|0);
     $249 = $246;
     while(1) {
      $248 = (($249) + -24|0);
      HEAP32[$195>>2] = $248;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($248);
      $250 = HEAP32[$195>>2]|0;
      $251 = ($250|0)==($247|0);
      if ($251) {
       break;
      } else {
       $249 = $250;
      }
     }
     $252 = (($246) + -48|0);
     $253 = HEAP8[$tmp$i>>0]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($tmp$i) + 1|0);
      $261 = $253&255;
      $262 = $261 >>> 1;
      $263 = $260;$264 = $262;
     } else {
      $256 = (($tmp$i) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($tmp$i) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $263 = $257;$264 = $259;
     }
     __THREW__ = 0;
     (invoke_iiii(32,($252|0),($263|0),($264|0))|0);
     $265 = __THREW__; __THREW__ = 0;
     $266 = $265&1;
     do {
      if ($266) {
       $445 = $253;
       label = 100;
      } else {
       $267 = (($tmp$i) + 1|0);
       $268 = (($tmp$i) + 8|0);
       $269 = (($tmp$i) + 4|0);
       $294 = $253;$t01$0$i = $231;
       while(1) {
        __THREW__ = 0;
        $270 = (invoke_iiii(34,($t01$0$i|0),($last|0),($db|0))|0);
        $271 = __THREW__; __THREW__ = 0;
        $272 = $271&1;
        if ($272) {
         $446 = $294;
         label = 99;
         break;
        }
        $273 = ($270|0)==($t01$0$i|0);
        $274 = HEAP32[$195>>2]|0;
        if ($273) {
         label = 132;
         break;
        }
        $284 = HEAP32[$db>>2]|0;
        $285 = $274;
        $286 = $284;
        $287 = (($285) - ($286))|0;
        $288 = (($287|0) / 24)&-1;
        $289 = ($288>>>0)<(2);
        if ($289) {
         label = 167;
         break;
        }
        $290 = (($274) + -24|0);
        __THREW__ = 0;
        invoke_vii(36,($2|0),($290|0));
        $291 = __THREW__; __THREW__ = 0;
        $292 = $291&1;
        if ($292) {
         $446 = $294;
         label = 99;
         break;
        }
        $293 = $294 & 1;
        $295 = ($293<<24>>24)==(0);
        do {
         if ($295) {
          HEAP8[$267>>0] = 0;
          HEAP8[$tmp$i>>0] = 0;
         } else {
          $296 = HEAP32[$268>>2]|0;
          HEAP8[$296>>0] = 0;
          HEAP32[$269>>2] = 0;
          $297 = HEAP32[$tmp$i>>2]|0;
          $298 = $297 & -2;
          $phitmp$i$i$i$i$i$i$i = (($298) + -1)|0;
          $299 = $297&255;
          $300 = $299 & 1;
          $301 = ($300<<24>>24)==(0);
          do {
           if ($301) {
            $302 = $297 >>> 1;
            $303 = $302 & 127;
            $304 = ($299&255)<(22);
            if ($304) {
             $308 = 10;$322 = $303;$447 = 1;
             break;
            }
            $305 = (($303) + 16)|0;
            $306 = $305 & 240;
            $phitmp$i2$i$i$i$i$i$i = (($306) + -1)|0;
            $308 = $phitmp$i2$i$i$i$i$i$i;$322 = $303;$447 = 1;
           } else {
            $308 = 10;$322 = 0;$447 = 0;
           }
          } while(0);
          $307 = ($308|0)==($phitmp$i$i$i$i$i$i$i|0);
          if ($307) {
           break;
          }
          $309 = ($308|0)==(10);
          if ($309) {
           if ($447) {
            $314 = $297 >>> 1;
            $315 = $314 & 127;
            $316 = (($315) + 1)|0;
            _memcpy(($267|0),($296|0),($316|0))|0;
            _free($296);
           } else {
            HEAP8[$267>>0] = 0;
            _free($296);
           }
           $323 = $322 << 1;
           $324 = $323&255;
           HEAP8[$tmp$i>>0] = $324;
           break;
          }
          $310 = ($308>>>0)<=($phitmp$i$i$i$i$i$i$i>>>0);
          $311 = (($308) + 1)|0;
          $312 = (_malloc($311)|0);
          $313 = ($312|0)==(0|0);
          $or$cond$i$i$i$i$i$i = $310 & $313;
          if ($or$cond$i$i$i$i$i$i) {
           break;
          }
          if ($447) {
           $317 = $297 >>> 1;
           $318 = $317 & 127;
           $319 = (($318) + 1)|0;
           _memcpy(($312|0),($267|0),($319|0))|0;
          } else {
           $320 = HEAP8[$296>>0]|0;
           HEAP8[$312>>0] = $320;
           _free($296);
          }
          $321 = $311 | 1;
          HEAP32[$tmp$i>>2] = $321;
          HEAP32[$269>>2] = $322;
          HEAP32[$268>>2] = $312;
         }
        } while(0);
        ;HEAP32[$tmp$i+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$2+8>>2]|0;
        ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
        $$pre26 = HEAP32[$195>>2]|0;
        $325 = (($$pre26) + -24|0);
        $327 = $$pre26;
        while(1) {
         $326 = (($327) + -24|0);
         HEAP32[$195>>2] = $326;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($326);
         $328 = HEAP32[$195>>2]|0;
         $329 = ($328|0)==($325|0);
         if ($329) {
          break;
         } else {
          $327 = $328;
         }
        }
        $330 = HEAP8[$tmp$i>>0]|0;
        $331 = $330 & 1;
        $332 = ($331<<24>>24)==(0);
        if ($332) {
         $334 = $330&255;
         $335 = $334 >>> 1;
         $337 = $335;
        } else {
         $333 = HEAP32[$269>>2]|0;
         $337 = $333;
        }
        $336 = ($337|0)==(0);
        if ($336) {
         $294 = $330;$t01$0$i = $270;
         continue;
        }
        $338 = (($$pre26) + -48|0);
        __THREW__ = 0;
        (invoke_iiii(32,($338|0),(2288|0),2)|0);
        $339 = __THREW__; __THREW__ = 0;
        $340 = $339&1;
        if ($340) {
         $446 = $330;
         label = 99;
         break;
        }
        $341 = HEAP32[$195>>2]|0;
        $342 = (($341) + -24|0);
        if ($332) {
         $345 = $330&255;
         $346 = $345 >>> 1;
         $347 = $267;$348 = $346;
        } else {
         $343 = HEAP32[$268>>2]|0;
         $344 = HEAP32[$269>>2]|0;
         $347 = $343;$348 = $344;
        }
        __THREW__ = 0;
        (invoke_iiii(32,($342|0),($347|0),($348|0))|0);
        $349 = __THREW__; __THREW__ = 0;
        $350 = $349&1;
        if ($350) {
         $446 = $330;
         label = 99;
         break;
        } else {
         $294 = $330;$t01$0$i = $270;
        }
       }
       if ((label|0) == 99) {
        $275 = ___cxa_find_matching_catch()|0;
        $276 = tempRet0;
        $280 = $446;$lpad$phi$index = $275;$lpad$phi$index2 = $276;
        break;
       }
       else if ((label|0) == 132) {
        $351 = (($274) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(32,($351|0),(2000|0),1)|0);
        $352 = __THREW__; __THREW__ = 0;
        $353 = $352&1;
        if ($353) {
         $445 = $294;
         label = 100;
         break;
        }
        $354 = $294 & 1;
        $355 = ($354<<24>>24)==(0);
        if ($355) {
         $t01$1$i = $t01$0$i;
         break L34;
        }
        $356 = HEAP32[$268>>2]|0;
        _free($356);
        $t01$1$i = $t01$0$i;
        break L34;
       }
       else if ((label|0) == 167) {
        $440 = $294 & 1;
        $441 = ($440<<24>>24)==(0);
        if ($441) {
         $$0 = $first;
         STACKTOP = sp;return ($$0|0);
        }
        $442 = HEAP32[$268>>2]|0;
        _free($442);
        $$0 = $first;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     if ((label|0) == 100) {
      $277 = ___cxa_find_matching_catch()|0;
      $278 = tempRet0;
      $280 = $445;$lpad$phi$index = $277;$lpad$phi$index2 = $278;
     }
     $279 = $280 & 1;
     $281 = ($279<<24>>24)==(0);
     if ($281) {
      $$1$i13 = $lpad$phi$index2;$$14$i = $lpad$phi$index;
      ___resumeException($$14$i|0);
      // unreachable;
     }
     $282 = (($tmp$i) + 8|0);
     $283 = HEAP32[$282>>2]|0;
     _free($283);
     $$1$i13 = $lpad$phi$index2;$$14$i = $lpad$phi$index;
     ___resumeException($$14$i|0);
     // unreachable;
    }
   } while(0);
   $357 = ($t01$1$i|0)==($last|0);
   if (!($357)) {
    $358 = HEAP8[$t01$1$i>>0]|0;
    $359 = ($358<<24>>24)==(69);
    if ($359) {
     $366 = (($t01$1$i) + 1|0);
     $367 = ($366|0)==($last|0);
     if ($367) {
      $368 = HEAP32[$195>>2]|0;
      $369 = (($368) + -24|0);
      $371 = $368;
      while(1) {
       $370 = (($371) + -24|0);
       HEAP32[$195>>2] = $370;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($370);
       $372 = HEAP32[$195>>2]|0;
       $373 = ($372|0)==($369|0);
       if ($373) {
        $$0 = $first;
        break;
       } else {
        $371 = $372;
       }
      }
      STACKTOP = sp;return ($$0|0);
     }
     $374 = HEAP8[$366>>0]|0;
     $375 = $374 << 24 >> 24;
     $isdigittmp$i = (($375) + -48)|0;
     $isdigit$i = ($isdigittmp$i>>>0)<(10);
     if ($isdigit$i) {
      $376 = (($t01$1$i) + 2|0);
      $377 = ($376|0)==($last|0);
      L124: do {
       if ($377) {
        $t13$0$i$lcssa = $last;
       } else {
        $t13$0$i23 = $376;
        while(1) {
         $380 = HEAP8[$t13$0$i23>>0]|0;
         $381 = $380 << 24 >> 24;
         $isdigittmp8$i = (($381) + -48)|0;
         $isdigit9$i = ($isdigittmp8$i>>>0)<(10);
         $379 = (($t13$0$i23) + 1|0);
         if (!($isdigit9$i)) {
          $t13$0$i$lcssa = $t13$0$i23;
          break L124;
         }
         $378 = ($379|0)==($last|0);
         if ($378) {
          $t13$0$i$lcssa = $last;
          break;
         } else {
          $t13$0$i23 = $379;
         }
        }
       }
      } while(0);
      $382 = HEAP32[$195>>2]|0;
      $383 = (($382) + -24|0);
      $384 = HEAP8[$383>>0]|0;
      $385 = $384 & 1;
      $386 = ($385<<24>>24)==(0);
      if ($386) {
       $387 = $384&255;
       $388 = $387 >>> 1;
       $399 = 10;$400 = $388;$403 = $384;
      } else {
       $389 = (($382) + -20|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = HEAP32[$383>>2]|0;
       $392 = $391 & -2;
       $phitmp$i$i$i = (($392) + -1)|0;
       $393 = $391&255;
       $399 = $phitmp$i$i$i;$400 = $390;$403 = $393;
      }
      $394 = $t13$0$i$lcssa;
      $395 = $366;
      $396 = (($394) - ($395))|0;
      $397 = ($t13$0$i$lcssa|0)==($366|0);
      if ($397) {
       $t01$2$i = $366;
      } else {
       $398 = (($399) - ($400))|0;
       $401 = ($398>>>0)<($396>>>0);
       if ($401) {
        $413 = (($400) + ($396))|0;
        $414 = (($413) - ($399))|0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($383,$399,$414,$400,7,$396);
        $415 = (($382) + -16|0);
        $416 = HEAP32[$415>>2]|0;
        $__p$0$i$i = $416;
       } else {
        $402 = $403 & 1;
        $404 = ($402<<24>>24)==(0);
        if ($404) {
         $407 = (($383) + 1|0);
         $411 = $407;
        } else {
         $405 = (($382) + -16|0);
         $406 = HEAP32[$405>>2]|0;
         $411 = $406;
        }
        $408 = ($400|0)==(7);
        if ($408) {
         $__p$0$i$i = $411;
        } else {
         $409 = (($400) + -7)|0;
         $410 = (($411) + 7|0);
         $$sum$i$i = (($396) + 7)|0;
         $412 = (($411) + ($$sum$i$i)|0);
         _memmove(($412|0),($410|0),($409|0))|0;
         $__p$0$i$i = $411;
        }
       }
       $417 = (($400) + ($396))|0;
       $418 = HEAP8[$383>>0]|0;
       $419 = $418 & 1;
       $420 = ($419<<24>>24)==(0);
       if ($420) {
        $422 = $417 << 1;
        $423 = $422&255;
        HEAP8[$383>>0] = $423;
       } else {
        $421 = (($382) + -20|0);
        HEAP32[$421>>2] = $417;
       }
       $424 = (($__p$0$i$i) + ($417)|0);
       HEAP8[$424>>0] = 0;
       $425 = (($__p$0$i$i) + 7|0);
       $$04$i$i = $366;$__p$13$i$i = $425;
       while(1) {
        $426 = HEAP8[$$04$i$i>>0]|0;
        HEAP8[$__p$13$i$i>>0] = $426;
        $427 = (($__p$13$i$i) + 1|0);
        $428 = (($$04$i$i) + 1|0);
        $429 = ($428|0)==($t13$0$i$lcssa|0);
        if ($429) {
         $t01$2$i = $t13$0$i$lcssa;
         break;
        } else {
         $$04$i$i = $428;$__p$13$i$i = $427;
        }
       }
      }
     } else {
      $t01$2$i = $366;
     }
     $430 = ($t01$2$i|0)==($last|0);
     if (!($430)) {
      $431 = HEAP8[$t01$2$i>>0]|0;
      $432 = ($431<<24>>24)==(95);
      if ($432) {
       $439 = (($t01$2$i) + 1|0);
       $$0 = $439;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $433 = HEAP32[$195>>2]|0;
     $434 = (($433) + -24|0);
     $436 = $433;
     while(1) {
      $435 = (($436) + -24|0);
      HEAP32[$195>>2] = $435;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($435);
      $437 = HEAP32[$195>>2]|0;
      $438 = ($437|0)==($434|0);
      if ($438) {
       $$0 = $first;
       break;
      } else {
       $436 = $437;
      }
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
   $360 = HEAP32[$195>>2]|0;
   $361 = (($360) + -24|0);
   $363 = $360;
   while(1) {
    $362 = (($363) + -24|0);
    HEAP32[$195>>2] = $362;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($362);
    $364 = HEAP32[$195>>2]|0;
    $365 = ($364|0)==($361|0);
    if ($365) {
     $$0 = $first;
     break;
    } else {
     $363 = $364;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else if ((($121|0) == 116)) {
   $122 = $$sroa$619;
   $123 = $122;
   HEAP32[$123>>2] = 1852732711;
   $124 = (($122) + 4)|0;
   $125 = $124;
   HEAP32[$125>>2] = 1684368737;
   $126 = (($$sroa$619) + 8|0);
   HEAP8[$126>>0] = 0;
   HEAP8[$0>>0] = 16;
   $127 = (($0) + 1|0);
   dest=$127+0|0; src=$$sroa$619+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   ;HEAP32[$$sroa$619+0>>2]=0|0;HEAP32[$$sroa$619+4>>2]=0|0;HEAP16[$$sroa$619+8>>1]=0|0;HEAP8[$$sroa$619+10>>0]=0|0;
   $128 = (($0) + 12|0);
   ;HEAP32[$128+0>>2]=0|0;HEAP32[$128+4>>2]=0|0;HEAP32[$128+8>>2]=0|0;
   $129 = (($db) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($db) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130>>>0)<($132>>>0);
   if ($133) {
    $134 = ($130|0)==(0|0);
    if ($134) {
     $137 = 0;
    } else {
     ;HEAP32[$130+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$130+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$130+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $135 = (($130) + 12|0);
     ;HEAP32[$135+0>>2]=HEAP32[$128+0>>2]|0;HEAP32[$135+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$135+8>>2]=HEAP32[$128+8>>2]|0;
     ;HEAP32[$128+0>>2]=0|0;HEAP32[$128+4>>2]=0|0;HEAP32[$128+8>>2]=0|0;
     $$pre$i$i6 = HEAP32[$129>>2]|0;
     $137 = $$pre$i$i6;
    }
    $136 = (($137) + 24|0);
    HEAP32[$129>>2] = $136;
   } else {
    $138 = (($db) + 12|0);
    $139 = HEAP32[$db>>2]|0;
    $140 = $130;
    $141 = $139;
    $142 = (($140) - ($141))|0;
    $143 = (($142|0) / 24)&-1;
    $144 = (($143) + 1)|0;
    $145 = ($144|0)<(0);
    if ($145) {
     __THREW__ = 0;
     invoke_v(41);
     $146 = __THREW__; __THREW__ = 0;
     $147 = $146&1;
     if (!($147)) {
      // unreachable;
     }
     $168 = ___cxa_find_matching_catch()|0;
     $169 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$1$i13 = $169;$$14$i = $168;
     ___resumeException($$14$i|0);
     // unreachable;
    }
    $148 = $132;
    $149 = (($148) - ($141))|0;
    $150 = (($149|0) / 24)&-1;
    $151 = ($150>>>0)<(1073741823);
    if ($151) {
     $152 = $150 << 1;
     $153 = ($152>>>0)<($144>>>0);
     $154 = $153 ? $144 : $152;
     $$0$i$i$i$i9 = $154;
    } else {
     $$0$i$i$i$i9 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i4,$$0$i$i$i$i9,$143,$138);
    $155 = (($__v$i$i$i4) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==(0|0);
    if (!($157)) {
     ;HEAP32[$156+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$156+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$156+8>>2]=HEAP32[$0+8>>2]|0;
     ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $158 = (($156) + 12|0);
     ;HEAP32[$158+0>>2]=HEAP32[$128+0>>2]|0;HEAP32[$158+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$158+8>>2]=HEAP32[$128+8>>2]|0;
     ;HEAP32[$128+0>>2]=0|0;HEAP32[$128+4>>2]=0|0;HEAP32[$128+8>>2]=0|0;
    }
    $159 = (($156) + 24|0);
    HEAP32[$155>>2] = $159;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i4);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i4);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $160 = (($first) + 2|0);
   $161 = ($160|0)==($last|0);
   if ($161) {
    $162 = HEAP32[$129>>2]|0;
    $163 = (($162) + -24|0);
    $165 = $162;
    while(1) {
     $164 = (($165) + -24|0);
     HEAP32[$129>>2] = $164;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($164);
     $166 = HEAP32[$129>>2]|0;
     $167 = ($166|0)==($163|0);
     if ($167) {
      $$0 = $first;
      break;
     } else {
      $165 = $166;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   $170 = HEAP8[$160>>0]|0;
   $171 = $170 << 24 >> 24;
   $isdigittmp10$i = (($171) + -48)|0;
   $isdigit11$i = ($isdigittmp10$i>>>0)<(10);
   if ($isdigit11$i) {
    $172 = (($first) + 3|0);
    $173 = ($172|0)==($last|0);
    L192: do {
     if ($173) {
      $t1$0$i$lcssa = $last;
     } else {
      $t1$0$i19 = $172;
      while(1) {
       $176 = HEAP8[$t1$0$i19>>0]|0;
       $177 = $176 << 24 >> 24;
       $isdigittmp12$i = (($177) + -48)|0;
       $isdigit13$i = ($isdigittmp12$i>>>0)<(10);
       $175 = (($t1$0$i19) + 1|0);
       if (!($isdigit13$i)) {
        $t1$0$i$lcssa = $t1$0$i19;
        break L192;
       }
       $174 = ($175|0)==($last|0);
       if ($174) {
        $t1$0$i$lcssa = $last;
        break;
       } else {
        $t1$0$i19 = $175;
       }
      }
     }
    } while(0);
    $178 = HEAP32[$129>>2]|0;
    $179 = (($178) + -24|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($179,$160,$t1$0$i$lcssa);
    $t0$0$i = $t1$0$i$lcssa;
   } else {
    $t0$0$i = $160;
   }
   $180 = HEAP32[$129>>2]|0;
   $181 = (($180) + -24|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($181,39);
   $182 = ($t0$0$i|0)==($last|0);
   if (!($182)) {
    $183 = HEAP8[$t0$0$i>>0]|0;
    $184 = ($183<<24>>24)==(95);
    if ($184) {
     $191 = (($t0$0$i) + 1|0);
     $$0 = $191;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $185 = HEAP32[$129>>2]|0;
   $186 = (($185) + -24|0);
   $188 = $185;
   while(1) {
    $187 = (($188) + -24|0);
    HEAP32[$129>>2] = $187;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($187);
    $189 = HEAP32[$129>>2]|0;
    $190 = ($189|0)==($186|0);
    if ($190) {
     $$0 = $first;
     break;
    } else {
     $188 = $189;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 68: case 67:  {
  $10 = $last;
  $11 = $first;
  $12 = (($10) - ($11))|0;
  $13 = ($12|0)>(1);
  if (!($13)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$db>>2]|0;
  $15 = (($db) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)==($16|0);
  if ($17) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  if ((($9|0) == 67)) {
   $18 = (($first) + 1|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   if (!((($20|0) == 53) | (($20|0) == 51) | (($20|0) == 50) | (($20|0) == 49))) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $21 = (($16) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4,$21);
   ;HEAP32[$3+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   $22 = (($3) + 12|0);
   ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
   $23 = HEAP32[$15>>2]|0;
   $24 = (($db) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23>>>0)<($25>>>0);
   if ($26) {
    $27 = ($23|0)==(0|0);
    if ($27) {
     $30 = 0;
    } else {
     ;HEAP32[$23+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $28 = (($23) + 12|0);
     ;HEAP32[$28+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$22+8>>2]|0;
     ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
     $$pre$i$i = HEAP32[$15>>2]|0;
     $30 = $$pre$i$i;
    }
    $29 = (($30) + 24|0);
    HEAP32[$15>>2] = $29;
   } else {
    $31 = (($db) + 12|0);
    $32 = HEAP32[$db>>2]|0;
    $33 = $23;
    $34 = $32;
    $35 = (($33) - ($34))|0;
    $36 = (($35|0) / 24)&-1;
    $37 = (($36) + 1)|0;
    $38 = ($37|0)<(0);
    if ($38) {
     __THREW__ = 0;
     invoke_v(41);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      // unreachable;
     }
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1$i = $56;$$12$i = $55;
     ___resumeException($$12$i|0);
     // unreachable;
    }
    $41 = $25;
    $42 = (($41) - ($34))|0;
    $43 = (($42|0) / 24)&-1;
    $44 = ($43>>>0)<(1073741823);
    if ($44) {
     $45 = $43 << 1;
     $46 = ($45>>>0)<($37>>>0);
     $47 = $46 ? $37 : $45;
     $$0$i$i$i$i = $47;
    } else {
     $$0$i$i$i$i = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$36,$31);
    $48 = (($__v$i$i$i) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if (!($50)) {
     ;HEAP32[$49+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$49+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $51 = (($49) + 12|0);
     ;HEAP32[$51+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$22+8>>2]|0;
     ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
    }
    $52 = (($49) + 24|0);
    HEAP32[$48>>2] = $52;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $53 = (($first) + 2|0);
   $54 = (($db) + 60|0);
   HEAP8[$54>>0] = 1;
   $$0 = $53;
   STACKTOP = sp;return ($$0|0);
  } else if ((($9|0) == 68)) {
   $57 = (($first) + 1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   if (!((($59|0) == 53) | (($59|0) == 50) | (($59|0) == 49) | (($59|0) == 48))) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $60 = (($16) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6,$60);
   __THREW__ = 0;
   $61 = (invoke_iiiii(33,($6|0),0,(2144|0),1)|0);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   do {
    if ($63) {
     $105 = ___cxa_find_matching_catch()|0;
     $106 = tempRet0;
     $$0$i = $106;$$01$i = $105;
    } else {
     $64 = HEAP8[$61>>0]|0;
     $65 = (($61) + 1|0);
     ;HEAP8[$$sroa$6+0>>0]=HEAP8[$65+0>>0]|0;HEAP8[$$sroa$6+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$$sroa$6+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$$sroa$6+3>>0]=HEAP8[$65+3>>0]|0;HEAP8[$$sroa$6+4>>0]=HEAP8[$65+4>>0]|0;HEAP8[$$sroa$6+5>>0]=HEAP8[$65+5>>0]|0;HEAP8[$$sroa$6+6>>0]=HEAP8[$65+6>>0]|0;
     $66 = (($61) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     ;HEAP32[$61+0>>2]=0|0;HEAP32[$61+4>>2]=0|0;HEAP32[$61+8>>2]=0|0;
     HEAP8[$5>>0] = $64;
     $68 = (($5) + 1|0);
     ;HEAP8[$68+0>>0]=HEAP8[$$sroa$6+0>>0]|0;HEAP8[$68+1>>0]=HEAP8[$$sroa$6+1>>0]|0;HEAP8[$68+2>>0]=HEAP8[$$sroa$6+2>>0]|0;HEAP8[$68+3>>0]=HEAP8[$$sroa$6+3>>0]|0;HEAP8[$68+4>>0]=HEAP8[$$sroa$6+4>>0]|0;HEAP8[$68+5>>0]=HEAP8[$$sroa$6+5>>0]|0;HEAP8[$68+6>>0]=HEAP8[$$sroa$6+6>>0]|0;
     $69 = (($5) + 8|0);
     HEAP32[$69>>2] = $67;
     ;HEAP8[$$sroa$6+0>>0]=0|0;HEAP8[$$sroa$6+1>>0]=0|0;HEAP8[$$sroa$6+2>>0]=0|0;HEAP8[$$sroa$6+3>>0]=0|0;HEAP8[$$sroa$6+4>>0]=0|0;HEAP8[$$sroa$6+5>>0]=0|0;HEAP8[$$sroa$6+6>>0]=0|0;
     $70 = (($5) + 12|0);
     ;HEAP32[$70+0>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;
     $71 = HEAP32[$15>>2]|0;
     $72 = (($db) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71>>>0)<($73>>>0);
     if ($74) {
      $75 = ($71|0)==(0|0);
      if ($75) {
       $78 = 0;
      } else {
       ;HEAP32[$71+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$5+8>>2]|0;
       ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $76 = (($71) + 12|0);
       ;HEAP32[$76+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$76+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$76+8>>2]=HEAP32[$70+8>>2]|0;
       ;HEAP32[$70+0>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;
       $$pre$i8$i = HEAP32[$15>>2]|0;
       $78 = $$pre$i8$i;
      }
      $77 = (($78) + 24|0);
      HEAP32[$15>>2] = $77;
     } else {
      $79 = (($db) + 12|0);
      $80 = HEAP32[$db>>2]|0;
      $81 = $71;
      $82 = $80;
      $83 = (($81) - ($82))|0;
      $84 = (($83|0) / 24)&-1;
      $85 = (($84) + 1)|0;
      $86 = ($85|0)<(0);
      if ($86) {
       __THREW__ = 0;
       invoke_v(41);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $107 = ___cxa_find_matching_catch()|0;
        $108 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$0$i = $108;$$01$i = $107;
        break;
       } else {
        // unreachable;
       }
      }
      $89 = $73;
      $90 = (($89) - ($82))|0;
      $91 = (($90|0) / 24)&-1;
      $92 = ($91>>>0)<(1073741823);
      if ($92) {
       $93 = $91 << 1;
       $94 = ($93>>>0)<($85>>>0);
       $95 = $94 ? $85 : $93;
       $$0$i$i$i10$i = $95;
      } else {
       $$0$i$i$i10$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7$i,$$0$i$i$i10$i,$84,$79);
      $96 = (($__v$i$i7$i) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)==(0|0);
      if (!($98)) {
       ;HEAP32[$97+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$97+8>>2]=HEAP32[$5+8>>2]|0;
       ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $99 = (($97) + 12|0);
       ;HEAP32[$99+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$70+8>>2]|0;
       ;HEAP32[$70+0>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;
      }
      $100 = (($97) + 24|0);
      HEAP32[$96>>2] = $100;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i7$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7$i);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $$pre = HEAP8[$6>>0]|0;
     $phitmp28 = $$pre & 1;
     $phitmp29 = ($phitmp28<<24>>24)==(0);
     if (!($phitmp29)) {
      $101 = (($6) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      _free($102);
     }
     $103 = (($first) + 2|0);
     $104 = (($db) + 60|0);
     HEAP8[$104>>0] = 1;
     $$0 = $103;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $109 = HEAP8[$6>>0]|0;
   $110 = $109 & 1;
   $111 = ($110<<24>>24)==(0);
   if ($111) {
    $$1$i = $$0$i;$$12$i = $$01$i;
    ___resumeException($$12$i|0);
    // unreachable;
   }
   $112 = (($6) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   _free($113);
   $$1$i = $$0$i;$$12$i = $$01$i;
   ___resumeException($$12$i|0);
   // unreachable;
  } else {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
  $444 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $$0 = $444;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$first = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $first$pn = 0, $isdigit = 0, $isdigit2 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $t1$08 = 0, $t11$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(95);
   if (!($2)) {
    $16 = $1 << 24 >> 24;
    $isdigittmp = (($16) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $first$pn = $first;
    } else {
     $$0 = $first;
     break;
    }
    while(1) {
     $t11$0 = (($first$pn) + 1|0);
     $17 = ($t11$0|0)==($last|0);
     if ($17) {
      $$0 = $last;
      break L1;
     }
     $18 = HEAP8[$t11$0>>0]|0;
     $19 = $18 << 24 >> 24;
     $isdigittmp1 = (($19) + -48)|0;
     $isdigit2 = ($isdigittmp1>>>0)<(10);
     if ($isdigit2) {
      $first$pn = $t11$0;
     } else {
      $$0 = $t11$0;
      break L1;
     }
    }
   }
   $3 = (($first) + 1|0);
   $4 = ($3|0)==($last|0);
   if ($4) {
    $$0 = $first;
   } else {
    $5 = HEAP8[$3>>0]|0;
    $6 = $5 << 24 >> 24;
    $isdigittmp3 = (($6) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $7 = (($first) + 2|0);
     $$0 = $7;
     break;
    }
    $8 = ($5<<24>>24)==(95);
    if ($8) {
     $9 = (($first) + 2|0);
     $10 = ($9|0)==($last|0);
     if ($10) {
      $$0 = $first;
     } else {
      $t1$08 = $9;
      while(1) {
       $13 = HEAP8[$t1$08>>0]|0;
       $14 = $13 << 24 >> 24;
       $isdigittmp5 = (($14) + -48)|0;
       $isdigit6 = ($isdigittmp5>>>0)<(10);
       $12 = (($t1$08) + 1|0);
       if (!($isdigit6)) {
        break;
       }
       $11 = ($12|0)==($last|0);
       if ($11) {
        $$0 = $first;
        break L1;
       } else {
        $t1$08 = $12;
       }
      }
      $15 = ($13<<24>>24)==(95);
      $$first = $15 ? $12 : $first;
      STACKTOP = sp;return ($$first|0);
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (_malloc($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__old_sz|0)==($__n_copy|0);
 if (!($20)) {
  $21 = (($__old_sz) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $22 = (($17) + ($$sum)|0);
  $23 = (($19) + ($__n_copy)|0);
  _memcpy(($22|0),($23|0),($21|0))|0;
 }
 $24 = ($__old_cap|0)==(10);
 if ($24) {
  $25 = (($this) + 8|0);
  HEAP32[$25>>2] = $17;
  $26 = $16 | 1;
  HEAP32[$this>>2] = $26;
  STACKTOP = sp;return;
 }
 _free($19);
 $25 = (($this) + 8|0);
 HEAP32[$25>>2] = $17;
 $26 = $16 | 1;
 HEAP32[$this>>2] = $26;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i54 = 0, $$0$i$i$i$i74 = 0, $$0$i$i$i29 = 0, $$0$i58 = 0, $$012$i$i$i = 0, $$012$i$i$i47 = 0, $$012$i$i$i67 = 0, $$02$i$i = 0, $$1 = 0, $$1$i = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0;
 var $$47 = 0, $$first = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i51 = 0, $$pre$i$i71 = 0, $$pre$i27 = 0, $$pre110 = 0, $$pre111 = 0, $$pre112 = 0, $$pre113 = 0, $$sroa$4 = 0, $$v$i = 0, $$v$i41 = 0, $$v$i64 = 0, $$v4$i = 0, $$v4$i44 = 0, $$v6$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i34 = 0, $__v$i$i$i59 = 0, $__v$i$i26 = 0, $e$010$i = 0, $e$08$i = 0, $e$08$i38 = 0, $first$ = 0, $first$10 = 0, $first$11 = 0, $first$12 = 0, $first$13 = 0, $first$14 = 0, $first$15 = 0, $first$16 = 0;
 var $first$17 = 0, $first$18 = 0, $first$19 = 0, $first$20 = 0, $first$21 = 0, $first$22 = 0, $first$23 = 0, $first$8 = 0, $first$9 = 0, $isdigit = 0, $isdigit$i29 = 0, $isdigit$i33 = 0, $isdigit$i38 = 0, $isdigit3$i = 0, $isdigit3$i43 = 0, $isdigit5$i = 0, $isdigittmp = 0, $isdigittmp$i28 = 0, $isdigittmp$i32 = 0, $isdigittmp$i37 = 0;
 var $isdigittmp2$i = 0, $isdigittmp2$i42 = 0, $isdigittmp4$i = 0, $n$090 = 0, $num$i = 0, $num$i35 = 0, $num$i60 = 0, $or$cond = 0, $or$cond115 = 0, $or$cond24 = 0, $or$cond84 = 0, $or$cond85 = 0, $or$cond86 = 0, $phitmp$i = 0, $phitmp$i45 = 0, $phitmp$i65 = 0, $scevgep4$i$i = 0, $t$011$i = 0, $t$09$i = 0, $t$09$i37 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__v$i$i$i59 = sp + 40|0;
 $0 = sp;
 $num$i60 = sp + 544|0;
 $1 = sp + 88|0;
 $2 = sp + 192|0;
 $__v$i$i$i34 = sp + 228|0;
 $3 = sp + 32|0;
 $num$i35 = sp + 584|0;
 $4 = sp + 64|0;
 $5 = sp + 156|0;
 $__v$i$i$i = sp + 168|0;
 $6 = sp + 188|0;
 $num$i = sp + 616|0;
 $7 = sp + 248|0;
 $8 = sp + 216|0;
 $__v$i$i26 = sp + 500|0;
 $__v$i$i = sp + 124|0;
 $9 = sp + 272|0;
 $10 = sp + 520|0;
 $11 = sp + 296|0;
 $12 = sp + 144|0;
 $13 = sp + 344|0;
 $14 = sp + 356|0;
 $15 = sp + 368|0;
 $16 = sp + 380|0;
 $17 = sp + 404|0;
 $18 = sp + 416|0;
 $19 = sp + 428|0;
 $20 = sp + 440|0;
 $21 = sp + 452|0;
 $22 = sp + 464|0;
 $23 = sp + 476|0;
 $24 = sp + 488|0;
 $25 = sp + 320|0;
 $$sroa$4 = sp + 640|0;
 $26 = sp + 204|0;
 $27 = sp + 284|0;
 $28 = sp + 112|0;
 $29 = sp + 392|0;
 $30 = $last;
 $31 = $first;
 $32 = (($30) - ($31))|0;
 $33 = ($32|0)>(3);
 if (!($33)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP8[$first>>0]|0;
 $35 = ($34<<24>>24)==(76);
 if (!($35)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (($first) + 1|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 << 24 >> 24;
 do {
  switch ($38|0) {
  case 121:  {
   $223 = (($first) + 2|0);
   HEAP8[$22>>0] = 6;
   $224 = (($22) + 1|0);
   ;HEAP8[$224+0>>0]=HEAP8[3816+0>>0]|0;HEAP8[$224+1>>0]=HEAP8[3816+1>>0]|0;HEAP8[$224+2>>0]=HEAP8[3816+2>>0]|0;
   $225 = (($22) + 4|0);
   HEAP8[$225>>0] = 0;
   __THREW__ = 0;
   $226 = (invoke_iiiii(53,($223|0),($last|0),($22|0),($db|0))|0);
   $227 = __THREW__; __THREW__ = 0;
   $228 = $227&1;
   if ($228) {
    $230 = ___cxa_find_matching_catch()|0;
    $231 = tempRet0;
    $$4 = $230;$$47 = $231;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $229 = ($226|0)==($223|0);
    $first$18 = $229 ? $first : $226;
    $$0 = $first$18;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 120:  {
   $214 = (($first) + 2|0);
   HEAP8[$21>>0] = 4;
   $215 = (($21) + 1|0);
   HEAP8[$215>>0]=27756&255;HEAP8[$215+1>>0]=27756>>8;
   $216 = (($21) + 3|0);
   HEAP8[$216>>0] = 0;
   __THREW__ = 0;
   $217 = (invoke_iiiii(53,($214|0),($last|0),($21|0),($db|0))|0);
   $218 = __THREW__; __THREW__ = 0;
   $219 = $218&1;
   if ($219) {
    $221 = ___cxa_find_matching_catch()|0;
    $222 = tempRet0;
    $$4 = $221;$$47 = $222;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $220 = ($217|0)==($214|0);
    $first$17 = $220 ? $first : $217;
    $$0 = $first$17;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 101:  {
   $397 = (($first) + 2|0);
   $398 = $397;
   $399 = (($30) - ($398))|0;
   $400 = ($399>>>0)>(20);
   L21: do {
    if ($400) {
     $401 = (($first) + 22|0);
     $402 = HEAP8[$397>>0]|0;
     $404 = $402;$e$010$i = $0;$t$011$i = $397;
     while(1) {
      $403 = $404 << 24 >> 24;
      $isdigittmp$i37 = (($403) + -48)|0;
      $isdigit$i38 = ($isdigittmp$i37>>>0)<(10);
      if (!($isdigit$i38)) {
       $405 = $403 | 32;
       $406 = (($405) + -97)|0;
       $407 = ($406>>>0)<(6);
       if (!($407)) {
        $$1$i = $397;
        break L21;
       }
      }
      $$v$i64 = $isdigit$i38 ? 0 : 9;
      $408 = (($$v$i64) + ($403))|0;
      $409 = (($t$011$i) + 1|0);
      $410 = HEAP8[$409>>0]|0;
      $411 = $410 << 24 >> 24;
      $isdigittmp4$i = (($411) + -48)|0;
      $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
      $$v6$i = $isdigit5$i ? 208 : 169;
      $412 = (($$v6$i) + ($411))|0;
      $413 = $408 << 4;
      $414 = (($412) + ($413))|0;
      $415 = $414&255;
      HEAP8[$e$010$i>>0] = $415;
      $416 = (($t$011$i) + 2|0);
      $417 = (($e$010$i) + 1|0);
      $418 = ($416|0)==($401|0);
      $419 = HEAP8[$416>>0]|0;
      if ($418) {
       break;
      } else {
       $404 = $419;$e$010$i = $417;$t$011$i = $416;
      }
     }
     $phitmp$i65 = ($419<<24>>24)==(69);
     if ($phitmp$i65) {
      $420 = ($0|0)!=($417|0);
      $421 = ($e$010$i>>>0)>($0>>>0);
      $or$cond86 = $420 & $421;
      L30: do {
       if ($or$cond86) {
        $$012$i$i$i67 = $0;$423 = $415;$424 = $e$010$i;
        while(1) {
         $422 = HEAP8[$$012$i$i$i67>>0]|0;
         HEAP8[$$012$i$i$i67>>0] = $423;
         HEAP8[$424>>0] = $422;
         $425 = (($$012$i$i$i67) + 1|0);
         $426 = (($424) + -1|0);
         $427 = ($425>>>0)<($426>>>0);
         if (!($427)) {
          break L30;
         }
         $$pre113 = HEAP8[$426>>0]|0;
         $$012$i$i$i67 = $425;$423 = $$pre113;$424 = $426;
        }
       }
      } while(0);
      dest=$num$i60+0|0; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $428 = +HEAPF64[$0>>3];
      HEAPF64[tempDoublePtr>>3]=$428;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $429 = (_snprintf($num$i60,40,3848,$vararg_buffer4)|0);
      $430 = ($429>>>0)>(39);
      if ($430) {
       $$1$i = $397;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$num$i60,$429);
       ;HEAP32[$1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
       ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
       $431 = (($1) + 12|0);
       ;HEAP32[$431+0>>2]=0|0;HEAP32[$431+4>>2]=0|0;HEAP32[$431+8>>2]=0|0;
       $432 = (($db) + 4|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = (($db) + 8|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = ($433>>>0)<($435>>>0);
       if ($436) {
        $437 = ($433|0)==(0|0);
        if ($437) {
         $440 = 0;
        } else {
         ;HEAP32[$433+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$433+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$433+8>>2]=HEAP32[$1+8>>2]|0;
         ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
         $438 = (($433) + 12|0);
         ;HEAP32[$438+0>>2]=HEAP32[$431+0>>2]|0;HEAP32[$438+4>>2]=HEAP32[$431+4>>2]|0;HEAP32[$438+8>>2]=HEAP32[$431+8>>2]|0;
         ;HEAP32[$431+0>>2]=0|0;HEAP32[$431+4>>2]=0|0;HEAP32[$431+8>>2]=0|0;
         $$pre$i$i71 = HEAP32[$432>>2]|0;
         $440 = $$pre$i$i71;
        }
        $439 = (($440) + 24|0);
        HEAP32[$432>>2] = $439;
       } else {
        $441 = (($db) + 12|0);
        $442 = HEAP32[$db>>2]|0;
        $443 = $433;
        $444 = $442;
        $445 = (($443) - ($444))|0;
        $446 = (($445|0) / 24)&-1;
        $447 = (($446) + 1)|0;
        $448 = ($447|0)<(0);
        if ($448) {
         __THREW__ = 0;
         invoke_v(41);
         $449 = __THREW__; __THREW__ = 0;
         $450 = $449&1;
         if ($450) {
          $464 = ___cxa_find_matching_catch()|0;
          $465 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          ___resumeException($464|0);
          // unreachable;
         } else {
          // unreachable;
         }
        }
        $451 = $435;
        $452 = (($451) - ($444))|0;
        $453 = (($452|0) / 24)&-1;
        $454 = ($453>>>0)<(1073741823);
        if ($454) {
         $455 = $453 << 1;
         $456 = ($455>>>0)<($447>>>0);
         $457 = $456 ? $447 : $455;
         $$0$i$i$i$i74 = $457;
        } else {
         $$0$i$i$i$i74 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i59,$$0$i$i$i$i74,$446,$441);
        $458 = (($__v$i$i$i59) + 8|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = ($459|0)==(0|0);
        if (!($460)) {
         ;HEAP32[$459+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$459+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$459+8>>2]=HEAP32[$1+8>>2]|0;
         ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
         $461 = (($459) + 12|0);
         ;HEAP32[$461+0>>2]=HEAP32[$431+0>>2]|0;HEAP32[$461+4>>2]=HEAP32[$431+4>>2]|0;HEAP32[$461+8>>2]=HEAP32[$431+8>>2]|0;
         ;HEAP32[$431+0>>2]=0|0;HEAP32[$431+4>>2]=0|0;HEAP32[$431+8>>2]=0|0;
        }
        $462 = (($459) + 24|0);
        HEAP32[$458>>2] = $462;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i59);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i59);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       $463 = (($first) + 23|0);
       $$1$i = $463;
      }
     } else {
      $$1$i = $397;
     }
    } else {
     $$1$i = $397;
    }
   } while(0);
   $466 = ($$1$i|0)==($397|0);
   $first$23 = $466 ? $first : $$1$i;
   $$0 = $first$23;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 100:  {
   $327 = (($first) + 2|0);
   $328 = $327;
   $329 = (($30) - ($328))|0;
   $330 = ($329>>>0)>(16);
   L58: do {
    if ($330) {
     $331 = (($first) + 18|0);
     $332 = HEAP8[$327>>0]|0;
     $334 = $332;$e$08$i38 = $3;$t$09$i37 = $327;
     while(1) {
      $333 = $334 << 24 >> 24;
      $isdigittmp$i32 = (($333) + -48)|0;
      $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
      if (!($isdigit$i33)) {
       $335 = $333 | 32;
       $336 = (($335) + -97)|0;
       $337 = ($336>>>0)<(6);
       if (!($337)) {
        $$0$i58 = $327;
        break L58;
       }
      }
      $$v$i41 = $isdigit$i33 ? 0 : 9;
      $338 = (($$v$i41) + ($333))|0;
      $339 = (($t$09$i37) + 1|0);
      $340 = HEAP8[$339>>0]|0;
      $341 = $340 << 24 >> 24;
      $isdigittmp2$i42 = (($341) + -48)|0;
      $isdigit3$i43 = ($isdigittmp2$i42>>>0)<(10);
      $$v4$i44 = $isdigit3$i43 ? 208 : 169;
      $342 = (($$v4$i44) + ($341))|0;
      $343 = $338 << 4;
      $344 = (($342) + ($343))|0;
      $345 = $344&255;
      HEAP8[$e$08$i38>>0] = $345;
      $346 = (($t$09$i37) + 2|0);
      $347 = (($e$08$i38) + 1|0);
      $348 = ($346|0)==($331|0);
      $349 = HEAP8[$346>>0]|0;
      if ($348) {
       break;
      } else {
       $334 = $349;$e$08$i38 = $347;$t$09$i37 = $346;
      }
     }
     $phitmp$i45 = ($349<<24>>24)==(69);
     if ($phitmp$i45) {
      $350 = ($3|0)!=($347|0);
      $351 = ($e$08$i38>>>0)>($3>>>0);
      $or$cond85 = $350 & $351;
      L67: do {
       if ($or$cond85) {
        $$012$i$i$i47 = $3;$353 = $345;$354 = $e$08$i38;
        while(1) {
         $352 = HEAP8[$$012$i$i$i47>>0]|0;
         HEAP8[$$012$i$i$i47>>0] = $353;
         HEAP8[$354>>0] = $352;
         $355 = (($$012$i$i$i47) + 1|0);
         $356 = (($354) + -1|0);
         $357 = ($355>>>0)<($356>>>0);
         if (!($357)) {
          break L67;
         }
         $$pre112 = HEAP8[$356>>0]|0;
         $$012$i$i$i47 = $355;$353 = $$pre112;$354 = $356;
        }
       }
      } while(0);
      dest=$num$i35+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $358 = +HEAPF64[$3>>3];
      HEAPF64[tempDoublePtr>>3]=$358;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $359 = (_snprintf($num$i35,32,3856,$vararg_buffer1)|0);
      $360 = ($359>>>0)>(31);
      if ($360) {
       $$0$i58 = $327;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5,$num$i35,$359);
       ;HEAP32[$4+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
       ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $361 = (($4) + 12|0);
       ;HEAP32[$361+0>>2]=0|0;HEAP32[$361+4>>2]=0|0;HEAP32[$361+8>>2]=0|0;
       $362 = (($db) + 4|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = (($db) + 8|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = ($363>>>0)<($365>>>0);
       if ($366) {
        $367 = ($363|0)==(0|0);
        if ($367) {
         $370 = 0;
        } else {
         ;HEAP32[$363+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$363+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$363+8>>2]=HEAP32[$4+8>>2]|0;
         ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
         $368 = (($363) + 12|0);
         ;HEAP32[$368+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$368+4>>2]=HEAP32[$361+4>>2]|0;HEAP32[$368+8>>2]=HEAP32[$361+8>>2]|0;
         ;HEAP32[$361+0>>2]=0|0;HEAP32[$361+4>>2]=0|0;HEAP32[$361+8>>2]=0|0;
         $$pre$i$i51 = HEAP32[$362>>2]|0;
         $370 = $$pre$i$i51;
        }
        $369 = (($370) + 24|0);
        HEAP32[$362>>2] = $369;
       } else {
        $371 = (($db) + 12|0);
        $372 = HEAP32[$db>>2]|0;
        $373 = $363;
        $374 = $372;
        $375 = (($373) - ($374))|0;
        $376 = (($375|0) / 24)&-1;
        $377 = (($376) + 1)|0;
        $378 = ($377|0)<(0);
        if ($378) {
         __THREW__ = 0;
         invoke_v(41);
         $379 = __THREW__; __THREW__ = 0;
         $380 = $379&1;
         if ($380) {
          $394 = ___cxa_find_matching_catch()|0;
          $395 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
          ___resumeException($394|0);
          // unreachable;
         } else {
          // unreachable;
         }
        }
        $381 = $365;
        $382 = (($381) - ($374))|0;
        $383 = (($382|0) / 24)&-1;
        $384 = ($383>>>0)<(1073741823);
        if ($384) {
         $385 = $383 << 1;
         $386 = ($385>>>0)<($377>>>0);
         $387 = $386 ? $377 : $385;
         $$0$i$i$i$i54 = $387;
        } else {
         $$0$i$i$i$i54 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i34,$$0$i$i$i$i54,$376,$371);
        $388 = (($__v$i$i$i34) + 8|0);
        $389 = HEAP32[$388>>2]|0;
        $390 = ($389|0)==(0|0);
        if (!($390)) {
         ;HEAP32[$389+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$389+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$389+8>>2]=HEAP32[$4+8>>2]|0;
         ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
         $391 = (($389) + 12|0);
         ;HEAP32[$391+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$391+4>>2]=HEAP32[$361+4>>2]|0;HEAP32[$391+8>>2]=HEAP32[$361+8>>2]|0;
         ;HEAP32[$361+0>>2]=0|0;HEAP32[$361+4>>2]=0|0;HEAP32[$361+8>>2]=0|0;
        }
        $392 = (($389) + 24|0);
        HEAP32[$388>>2] = $392;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i34);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i34);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $393 = (($first) + 19|0);
       $$0$i58 = $393;
      }
     } else {
      $$0$i58 = $327;
     }
    } else {
     $$0$i58 = $327;
    }
   } while(0);
   $396 = ($$0$i58|0)==($327|0);
   $first$22 = $396 ? $first : $$0$i58;
   $$0 = $first$22;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 95:  {
   $467 = (($first) + 2|0);
   $468 = HEAP8[$467>>0]|0;
   $469 = ($468<<24>>24)==(90);
   if (!($469)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $470 = (($first) + 3|0);
   $471 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($470,$last,$db)|0);
   $472 = ($471|0)==($470|0);
   $473 = ($471|0)==($last|0);
   $or$cond = $472 | $473;
   if ($or$cond) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   } else {
    $474 = HEAP8[$471>>0]|0;
    $475 = ($474<<24>>24)==(69);
    $476 = (($471) + 1|0);
    $$first = $475 ? $476 : $first;
    STACKTOP = sp;return ($$first|0);
   }
   break;
  }
  case 108:  {
   $196 = (($first) + 2|0);
   HEAP8[$19>>0] = 2;
   $197 = (($19) + 1|0);
   HEAP8[$197>>0] = 108;
   $198 = (($19) + 2|0);
   HEAP8[$198>>0] = 0;
   __THREW__ = 0;
   $199 = (invoke_iiiii(53,($196|0),($last|0),($19|0),($db|0))|0);
   $200 = __THREW__; __THREW__ = 0;
   $201 = $200&1;
   if ($201) {
    $203 = ___cxa_find_matching_catch()|0;
    $204 = tempRet0;
    $$4 = $203;$$47 = $204;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $202 = ($199|0)==($196|0);
    $first$15 = $202 ? $first : $199;
    $$0 = $first$15;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 105:  {
   $179 = (($first) + 2|0);
   HEAP8[$17>>0] = 0;
   $180 = (($17) + 1|0);
   HEAP8[$180>>0] = 0;
   __THREW__ = 0;
   $181 = (invoke_iiiii(53,($179|0),($last|0),($17|0),($db|0))|0);
   $182 = __THREW__; __THREW__ = 0;
   $183 = $182&1;
   if ($183) {
    $185 = ___cxa_find_matching_catch()|0;
    $186 = tempRet0;
    $$4 = $185;$$47 = $186;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $184 = ($181|0)==($179|0);
    $first$13 = $184 ? $first : $181;
    $$0 = $first$13;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 98:  {
   $48 = (($first) + 3|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49<<24>>24)==(69);
   if (!($50)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $51 = (($first) + 2|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 << 24 >> 24;
   if ((($53|0) == 48)) {
    HEAP8[$10>>0] = 10;
    $54 = (($10) + 1|0);
    ;HEAP8[$54+0>>0]=HEAP8[3736+0>>0]|0;HEAP8[$54+1>>0]=HEAP8[3736+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[3736+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[3736+3>>0]|0;HEAP8[$54+4>>0]=HEAP8[3736+4>>0]|0;
    $55 = (($10) + 6|0);
    HEAP8[$55>>0] = 0;
    $56 = (($10) + 12|0);
    ;HEAP32[$56+0>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
    $57 = (($db) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($db) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58>>>0)<($60>>>0);
    if ($61) {
     $62 = ($58|0)==(0|0);
     if ($62) {
      $65 = 0;
     } else {
      ;HEAP32[$58+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$58+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$58+8>>2]=HEAP32[$10+8>>2]|0;
      ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $63 = (($58) + 12|0);
      ;HEAP32[$63+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$63+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$56+8>>2]|0;
      ;HEAP32[$56+0>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
      $$pre$i = HEAP32[$57>>2]|0;
      $65 = $$pre$i;
     }
     $64 = (($65) + 24|0);
     HEAP32[$57>>2] = $64;
    } else {
     $66 = (($db) + 12|0);
     $67 = HEAP32[$db>>2]|0;
     $68 = $58;
     $69 = $67;
     $70 = (($68) - ($69))|0;
     $71 = (($70|0) / 24)&-1;
     $72 = (($71) + 1)|0;
     $73 = ($72|0)<(0);
     if ($73) {
      __THREW__ = 0;
      invoke_v(41);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if (!($75)) {
       // unreachable;
      }
      $89 = ___cxa_find_matching_catch()|0;
      $90 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $$4 = $89;$$47 = $90;
      ___resumeException($$4|0);
      // unreachable;
     }
     $76 = $60;
     $77 = (($76) - ($69))|0;
     $78 = (($77|0) / 24)&-1;
     $79 = ($78>>>0)<(1073741823);
     if ($79) {
      $80 = $78 << 1;
      $81 = ($80>>>0)<($72>>>0);
      $82 = $81 ? $72 : $80;
      $$0$i$i$i = $82;
     } else {
      $$0$i$i$i = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$71,$66);
     $83 = (($__v$i$i) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      ;HEAP32[$84+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$10+8>>2]|0;
      ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $86 = (($84) + 12|0);
      ;HEAP32[$86+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$56+8>>2]|0;
      ;HEAP32[$56+0>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
     }
     $87 = (($84) + 24|0);
     HEAP32[$83>>2] = $87;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
    $88 = (($first) + 4|0);
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   } else if ((($53|0) == 49)) {
    HEAP8[$11>>0] = 8;
    $91 = (($11) + 1|0);
    HEAP8[$91>>0]=1702195828&255;HEAP8[$91+1>>0]=(1702195828>>8)&255;HEAP8[$91+2>>0]=(1702195828>>16)&255;HEAP8[$91+3>>0]=1702195828>>24;
    $92 = (($11) + 5|0);
    HEAP8[$92>>0] = 0;
    $93 = (($11) + 12|0);
    ;HEAP32[$93+0>>2]=0|0;HEAP32[$93+4>>2]=0|0;HEAP32[$93+8>>2]=0|0;
    $94 = (($db) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($db) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95>>>0)<($97>>>0);
    if ($98) {
     $99 = ($95|0)==(0|0);
     if ($99) {
      $102 = 0;
     } else {
      ;HEAP32[$95+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$11+8>>2]|0;
      ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $100 = (($95) + 12|0);
      ;HEAP32[$100+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$100+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$100+8>>2]=HEAP32[$93+8>>2]|0;
      ;HEAP32[$93+0>>2]=0|0;HEAP32[$93+4>>2]=0|0;HEAP32[$93+8>>2]=0|0;
      $$pre$i27 = HEAP32[$94>>2]|0;
      $102 = $$pre$i27;
     }
     $101 = (($102) + 24|0);
     HEAP32[$94>>2] = $101;
    } else {
     $103 = (($db) + 12|0);
     $104 = HEAP32[$db>>2]|0;
     $105 = $95;
     $106 = $104;
     $107 = (($105) - ($106))|0;
     $108 = (($107|0) / 24)&-1;
     $109 = (($108) + 1)|0;
     $110 = ($109|0)<(0);
     if ($110) {
      __THREW__ = 0;
      invoke_v(41);
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if (!($112)) {
       // unreachable;
      }
      $126 = ___cxa_find_matching_catch()|0;
      $127 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $$4 = $126;$$47 = $127;
      ___resumeException($$4|0);
      // unreachable;
     }
     $113 = $97;
     $114 = (($113) - ($106))|0;
     $115 = (($114|0) / 24)&-1;
     $116 = ($115>>>0)<(1073741823);
     if ($116) {
      $117 = $115 << 1;
      $118 = ($117>>>0)<($109>>>0);
      $119 = $118 ? $109 : $117;
      $$0$i$i$i29 = $119;
     } else {
      $$0$i$i$i29 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i26,$$0$i$i$i29,$108,$103);
     $120 = (($__v$i$i26) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(0|0);
     if (!($122)) {
      ;HEAP32[$121+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$121+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$121+8>>2]=HEAP32[$11+8>>2]|0;
      ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $123 = (($121) + 12|0);
      ;HEAP32[$123+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$123+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$123+8>>2]=HEAP32[$93+8>>2]|0;
      ;HEAP32[$93+0>>2]=0|0;HEAP32[$93+4>>2]=0|0;HEAP32[$93+8>>2]=0|0;
     }
     $124 = (($121) + 24|0);
     HEAP32[$120>>2] = $124;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i26);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
    $125 = (($first) + 4|0);
    $$0 = $125;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 115:  {
   $159 = (($first) + 2|0);
   HEAP8[$15>>0] = 10;
   $160 = (($15) + 1|0);
   ;HEAP8[$160+0>>0]=HEAP8[3784+0>>0]|0;HEAP8[$160+1>>0]=HEAP8[3784+1>>0]|0;HEAP8[$160+2>>0]=HEAP8[3784+2>>0]|0;HEAP8[$160+3>>0]=HEAP8[3784+3>>0]|0;HEAP8[$160+4>>0]=HEAP8[3784+4>>0]|0;
   $161 = (($15) + 6|0);
   HEAP8[$161>>0] = 0;
   __THREW__ = 0;
   $162 = (invoke_iiiii(53,($159|0),($last|0),($15|0),($db|0))|0);
   $163 = __THREW__; __THREW__ = 0;
   $164 = $163&1;
   if ($164) {
    $166 = ___cxa_find_matching_catch()|0;
    $167 = tempRet0;
    $$4 = $166;$$47 = $167;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $165 = ($162|0)==($159|0);
    $first$11 = $165 ? $first : $162;
    $$0 = $first$11;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 102:  {
   $256 = (($first) + 2|0);
   $257 = $256;
   $258 = (($30) - ($257))|0;
   $259 = ($258>>>0)>(8);
   L239: do {
    if ($259) {
     $260 = (($first) + 10|0);
     $261 = HEAP8[$256>>0]|0;
     $263 = $261;$e$08$i = $6;$t$09$i = $256;
     while(1) {
      $262 = $263 << 24 >> 24;
      $isdigittmp$i28 = (($262) + -48)|0;
      $isdigit$i29 = ($isdigittmp$i28>>>0)<(10);
      if (!($isdigit$i29)) {
       $264 = $262 | 32;
       $265 = (($264) + -97)|0;
       $266 = ($265>>>0)<(6);
       if (!($266)) {
        $$0$i = $256;
        break L239;
       }
      }
      $$v$i = $isdigit$i29 ? 0 : 9;
      $267 = (($$v$i) + ($262))|0;
      $268 = (($t$09$i) + 1|0);
      $269 = HEAP8[$268>>0]|0;
      $270 = $269 << 24 >> 24;
      $isdigittmp2$i = (($270) + -48)|0;
      $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
      $$v4$i = $isdigit3$i ? 208 : 169;
      $271 = (($$v4$i) + ($270))|0;
      $272 = $267 << 4;
      $273 = (($271) + ($272))|0;
      $274 = $273&255;
      HEAP8[$e$08$i>>0] = $274;
      $275 = (($t$09$i) + 2|0);
      $276 = (($e$08$i) + 1|0);
      $277 = ($275|0)==($260|0);
      $278 = HEAP8[$275>>0]|0;
      if ($277) {
       break;
      } else {
       $263 = $278;$e$08$i = $276;$t$09$i = $275;
      }
     }
     $phitmp$i = ($278<<24>>24)==(69);
     if ($phitmp$i) {
      $279 = ($6|0)!=($276|0);
      $280 = ($e$08$i>>>0)>($6>>>0);
      $or$cond84 = $279 & $280;
      L248: do {
       if ($or$cond84) {
        $$012$i$i$i = $6;$282 = $274;$283 = $e$08$i;
        while(1) {
         $281 = HEAP8[$$012$i$i$i>>0]|0;
         HEAP8[$$012$i$i$i>>0] = $282;
         HEAP8[$283>>0] = $281;
         $284 = (($$012$i$i$i) + 1|0);
         $285 = (($283) + -1|0);
         $286 = ($284>>>0)<($285>>>0);
         if (!($286)) {
          break L248;
         }
         $$pre111 = HEAP8[$285>>0]|0;
         $$012$i$i$i = $284;$282 = $$pre111;$283 = $285;
        }
       }
      } while(0);
      dest=$num$i+0|0; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $287 = +HEAPF32[$6>>2];
      $288 = $287;
      HEAPF64[tempDoublePtr>>3]=$288;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $289 = (_snprintf($num$i,24,3864,$vararg_buffer)|0);
      $290 = ($289>>>0)>(23);
      if ($290) {
       $$0$i = $256;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,$num$i,$289);
       ;HEAP32[$7+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
       $291 = (($7) + 12|0);
       ;HEAP32[$291+0>>2]=0|0;HEAP32[$291+4>>2]=0|0;HEAP32[$291+8>>2]=0|0;
       $292 = (($db) + 4|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = (($db) + 8|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($293>>>0)<($295>>>0);
       if ($296) {
        $297 = ($293|0)==(0|0);
        if ($297) {
         $300 = 0;
        } else {
         ;HEAP32[$293+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$293+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$293+8>>2]=HEAP32[$7+8>>2]|0;
         ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
         $298 = (($293) + 12|0);
         ;HEAP32[$298+0>>2]=HEAP32[$291+0>>2]|0;HEAP32[$298+4>>2]=HEAP32[$291+4>>2]|0;HEAP32[$298+8>>2]=HEAP32[$291+8>>2]|0;
         ;HEAP32[$291+0>>2]=0|0;HEAP32[$291+4>>2]=0|0;HEAP32[$291+8>>2]=0|0;
         $$pre$i$i = HEAP32[$292>>2]|0;
         $300 = $$pre$i$i;
        }
        $299 = (($300) + 24|0);
        HEAP32[$292>>2] = $299;
       } else {
        $301 = (($db) + 12|0);
        $302 = HEAP32[$db>>2]|0;
        $303 = $293;
        $304 = $302;
        $305 = (($303) - ($304))|0;
        $306 = (($305|0) / 24)&-1;
        $307 = (($306) + 1)|0;
        $308 = ($307|0)<(0);
        if ($308) {
         __THREW__ = 0;
         invoke_v(41);
         $309 = __THREW__; __THREW__ = 0;
         $310 = $309&1;
         if ($310) {
          $324 = ___cxa_find_matching_catch()|0;
          $325 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
          ___resumeException($324|0);
          // unreachable;
         } else {
          // unreachable;
         }
        }
        $311 = $295;
        $312 = (($311) - ($304))|0;
        $313 = (($312|0) / 24)&-1;
        $314 = ($313>>>0)<(1073741823);
        if ($314) {
         $315 = $313 << 1;
         $316 = ($315>>>0)<($307>>>0);
         $317 = $316 ? $307 : $315;
         $$0$i$i$i$i = $317;
        } else {
         $$0$i$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$306,$301);
        $318 = (($__v$i$i$i) + 8|0);
        $319 = HEAP32[$318>>2]|0;
        $320 = ($319|0)==(0|0);
        if (!($320)) {
         ;HEAP32[$319+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$319+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$319+8>>2]=HEAP32[$7+8>>2]|0;
         ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
         $321 = (($319) + 12|0);
         ;HEAP32[$321+0>>2]=HEAP32[$291+0>>2]|0;HEAP32[$321+4>>2]=HEAP32[$291+4>>2]|0;HEAP32[$321+8>>2]=HEAP32[$291+8>>2]|0;
         ;HEAP32[$291+0>>2]=0|0;HEAP32[$291+4>>2]=0|0;HEAP32[$291+8>>2]=0|0;
        }
        $322 = (($319) + 24|0);
        HEAP32[$318>>2] = $322;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       $323 = (($first) + 11|0);
       $$0$i = $323;
      }
     } else {
      $$0$i = $256;
     }
    } else {
     $$0$i = $256;
    }
   } while(0);
   $326 = ($$0$i|0)==($256|0);
   $first$21 = $326 ? $first : $$0$i;
   $$0 = $first$21;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 84:  {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 111:  {
   $245 = (($first) + 2|0);
   $246 = (_malloc(32)|0);
   $247 = (($24) + 8|0);
   HEAP32[$247>>2] = $246;
   HEAP32[$24>>2] = 33;
   $248 = (($24) + 4|0);
   HEAP32[$248>>2] = 17;
   dest=$246+0|0; src=3824+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $249 = (($246) + 17|0);
   HEAP8[$249>>0] = 0;
   __THREW__ = 0;
   $250 = (invoke_iiiii(53,($245|0),($last|0),($24|0),($db|0))|0);
   $251 = __THREW__; __THREW__ = 0;
   $252 = $251&1;
   if ($252) {
    $254 = ___cxa_find_matching_catch()|0;
    $255 = tempRet0;
    _free($246);
    $$4 = $254;$$47 = $255;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    _free($246);
    $253 = ($250|0)==($245|0);
    $first$20 = $253 ? $first : $250;
    $$0 = $first$20;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 110:  {
   $232 = (($first) + 2|0);
   HEAP8[$23>>0] = 16;
   $233 = (($23) + 1|0);
   $234 = $233;
   $235 = $234;
   HEAP8[$235>>0]=1852399455&255;HEAP8[$235+1>>0]=(1852399455>>8)&255;HEAP8[$235+2>>0]=(1852399455>>16)&255;HEAP8[$235+3>>0]=1852399455>>24;
   $236 = (($234) + 4)|0;
   $237 = $236;
   HEAP8[$237>>0]=942813556&255;HEAP8[$237+1>>0]=(942813556>>8)&255;HEAP8[$237+2>>0]=(942813556>>16)&255;HEAP8[$237+3>>0]=942813556>>24;
   $238 = (($23) + 9|0);
   HEAP8[$238>>0] = 0;
   __THREW__ = 0;
   $239 = (invoke_iiiii(53,($232|0),($last|0),($23|0),($db|0))|0);
   $240 = __THREW__; __THREW__ = 0;
   $241 = $240&1;
   if ($241) {
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $$4 = $243;$$47 = $244;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $242 = ($239|0)==($232|0);
    $first$19 = $242 ? $first : $239;
    $$0 = $first$19;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 97:  {
   $137 = (($first) + 2|0);
   $138 = (_malloc(16)|0);
   $139 = (($13) + 8|0);
   HEAP32[$139>>2] = $138;
   HEAP32[$13>>2] = 17;
   $140 = (($13) + 4|0);
   HEAP32[$140>>2] = 11;
   dest=$138+0|0; src=3752+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $141 = (($138) + 11|0);
   HEAP8[$141>>0] = 0;
   __THREW__ = 0;
   $142 = (invoke_iiiii(53,($137|0),($last|0),($13|0),($db|0))|0);
   $143 = __THREW__; __THREW__ = 0;
   $144 = $143&1;
   if ($144) {
    $146 = ___cxa_find_matching_catch()|0;
    $147 = tempRet0;
    _free($138);
    $$4 = $146;$$47 = $147;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    _free($138);
    $145 = ($142|0)==($137|0);
    $first$9 = $145 ? $first : $142;
    $$0 = $first$9;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 116:  {
   $168 = (($first) + 2|0);
   $169 = (_malloc(16)|0);
   $170 = (($16) + 8|0);
   HEAP32[$170>>2] = $169;
   HEAP32[$16>>2] = 17;
   $171 = (($16) + 4|0);
   HEAP32[$171>>2] = 14;
   dest=$169+0|0; src=3792+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $172 = (($169) + 14|0);
   HEAP8[$172>>0] = 0;
   __THREW__ = 0;
   $173 = (invoke_iiiii(53,($168|0),($last|0),($16|0),($db|0))|0);
   $174 = __THREW__; __THREW__ = 0;
   $175 = $174&1;
   if ($175) {
    $177 = ___cxa_find_matching_catch()|0;
    $178 = tempRet0;
    _free($169);
    $$4 = $177;$$47 = $178;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    _free($169);
    $176 = ($173|0)==($168|0);
    $first$12 = $176 ? $first : $173;
    $$0 = $first$12;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 104:  {
   $148 = (($first) + 2|0);
   $149 = (_malloc(16)|0);
   $150 = (($14) + 8|0);
   HEAP32[$150>>2] = $149;
   HEAP32[$14>>2] = 17;
   $151 = (($14) + 4|0);
   HEAP32[$151>>2] = 13;
   dest=$149+0|0; src=3768+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $152 = (($149) + 13|0);
   HEAP8[$152>>0] = 0;
   __THREW__ = 0;
   $153 = (invoke_iiiii(53,($148|0),($last|0),($14|0),($db|0))|0);
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    $157 = ___cxa_find_matching_catch()|0;
    $158 = tempRet0;
    _free($149);
    $$4 = $157;$$47 = $158;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    _free($149);
    $156 = ($153|0)==($148|0);
    $first$10 = $156 ? $first : $153;
    $$0 = $first$10;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 109:  {
   $205 = (($first) + 2|0);
   HEAP8[$20>>0] = 4;
   $206 = (($20) + 1|0);
   HEAP8[$206>>0]=27765&255;HEAP8[$206+1>>0]=27765>>8;
   $207 = (($20) + 3|0);
   HEAP8[$207>>0] = 0;
   __THREW__ = 0;
   $208 = (invoke_iiiii(53,($205|0),($last|0),($20|0),($db|0))|0);
   $209 = __THREW__; __THREW__ = 0;
   $210 = $209&1;
   if ($210) {
    $212 = ___cxa_find_matching_catch()|0;
    $213 = tempRet0;
    $$4 = $212;$$47 = $213;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $211 = ($208|0)==($205|0);
    $first$16 = $211 ? $first : $208;
    $$0 = $first$16;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 99:  {
   $128 = (($first) + 2|0);
   HEAP8[$12>>0] = 8;
   $129 = (($12) + 1|0);
   HEAP8[$129>>0]=1918986339&255;HEAP8[$129+1>>0]=(1918986339>>8)&255;HEAP8[$129+2>>0]=(1918986339>>16)&255;HEAP8[$129+3>>0]=1918986339>>24;
   $130 = (($12) + 5|0);
   HEAP8[$130>>0] = 0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(53,($128|0),($last|0),($12|0),($db|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $$4 = $135;$$47 = $136;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $134 = ($131|0)==($128|0);
    $first$8 = $134 ? $first : $131;
    $$0 = $first$8;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 119:  {
   $39 = (($first) + 2|0);
   HEAP8[$9>>0] = 14;
   $40 = (($9) + 1|0);
   ;HEAP8[$40+0>>0]=HEAP8[3728+0>>0]|0;HEAP8[$40+1>>0]=HEAP8[3728+1>>0]|0;HEAP8[$40+2>>0]=HEAP8[3728+2>>0]|0;HEAP8[$40+3>>0]=HEAP8[3728+3>>0]|0;HEAP8[$40+4>>0]=HEAP8[3728+4>>0]|0;HEAP8[$40+5>>0]=HEAP8[3728+5>>0]|0;HEAP8[$40+6>>0]=HEAP8[3728+6>>0]|0;
   $41 = (($9) + 8|0);
   HEAP8[$41>>0] = 0;
   __THREW__ = 0;
   $42 = (invoke_iiiii(53,($39|0),($last|0),($9|0),($db|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $46 = ___cxa_find_matching_catch()|0;
    $47 = tempRet0;
    $$4 = $46;$$47 = $47;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $45 = ($42|0)==($39|0);
    $first$ = $45 ? $first : $42;
    $$0 = $first$;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 106:  {
   $187 = (($first) + 2|0);
   HEAP8[$18>>0] = 2;
   $188 = (($18) + 1|0);
   HEAP8[$188>>0] = 117;
   $189 = (($18) + 2|0);
   HEAP8[$189>>0] = 0;
   __THREW__ = 0;
   $190 = (invoke_iiiii(53,($187|0),($last|0),($18|0),($db|0))|0);
   $191 = __THREW__; __THREW__ = 0;
   $192 = $191&1;
   if ($192) {
    $194 = ___cxa_find_matching_catch()|0;
    $195 = tempRet0;
    $$4 = $194;$$47 = $195;
    ___resumeException($$4|0);
    // unreachable;
   } else {
    $193 = ($190|0)==($187|0);
    $first$14 = $193 ? $first : $190;
    $$0 = $first$14;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  default: {
   $477 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($36,$last,$db)|0);
   $478 = ($477|0)==($36|0);
   $479 = ($477|0)==($last|0);
   $or$cond24 = $478 | $479;
   if ($or$cond24) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $480 = HEAP8[$477>>0]|0;
   $481 = ($480<<24>>24)==(69);
   if ($481) {
    $582 = (($477) + 1|0);
    $$0 = $582;
    STACKTOP = sp;return ($$0|0);
   } else {
    $485 = $480;$n$090 = $477;
   }
   while(1) {
    $484 = $485 << 24 >> 24;
    $isdigittmp = (($484) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $483 = (($n$090) + 1|0);
    if (!($isdigit)) {
     break;
    }
    $482 = ($483|0)==($last|0);
    if ($482) {
     $$0 = $first;
     label = 195;
     break;
    }
    $$pre = HEAP8[$483>>0]|0;
    $485 = $$pre;$n$090 = $483;
   }
   if ((label|0) == 195) {
    STACKTOP = sp;return ($$0|0);
   }
   $486 = ($n$090|0)!=($477|0);
   $487 = ($485<<24>>24)==(69);
   $or$cond115 = $486 & $487;
   if (!($or$cond115)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $488 = HEAP32[$db>>2]|0;
   $489 = (($db) + 4|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ($488|0)==($490|0);
   if ($491) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $492 = (($490) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($28,$492);
   __THREW__ = 0;
   $493 = (invoke_iiiii(33,($28|0),0,(2008|0),1)|0);
   $494 = __THREW__; __THREW__ = 0;
   $495 = $494&1;
   if ($495) {
    $557 = ___cxa_find_matching_catch()|0;
    $558 = tempRet0;
    $$3 = $557;$$36 = $558;
   } else {
    ;HEAP32[$27+0>>2]=HEAP32[$493+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$493+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$493+8>>2]|0;
    ;HEAP32[$493+0>>2]=0|0;HEAP32[$493+4>>2]=0|0;HEAP32[$493+8>>2]=0|0;
    __THREW__ = 0;
    $496 = (invoke_iiii(32,($27|0),(2000|0),1)|0);
    $497 = __THREW__; __THREW__ = 0;
    $498 = $497&1;
    if ($498) {
     $559 = ___cxa_find_matching_catch()|0;
     $560 = tempRet0;
     $$2 = $559;$$25 = $560;
    } else {
     ;HEAP32[$26+0>>2]=HEAP32[$496+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$496+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$496+8>>2]|0;
     ;HEAP32[$496+0>>2]=0|0;HEAP32[$496+4>>2]=0|0;HEAP32[$496+8>>2]=0|0;
     $499 = $477;
     $500 = $n$090;
     $501 = (($500) - ($499))|0;
     $502 = ($501>>>0)>(4294967279);
     do {
      if ($502) {
       __THREW__ = 0;
       invoke_v(54);
       $503 = __THREW__; __THREW__ = 0;
       $504 = $503&1;
       if ($504) {
        $561 = ___cxa_find_matching_catch()|0;
        $562 = tempRet0;
        $$1 = $561;$$14 = $562;
        break;
       } else {
        // unreachable;
       }
      } else {
       $505 = ($501>>>0)<(11);
       if ($505) {
        $506 = $501 << 1;
        $507 = $506&255;
        HEAP8[$29>>0] = $507;
        $508 = (($29) + 1|0);
        $__p$0$ph$i$i = $508;
       } else {
        $509 = (($501) + 16)|0;
        $510 = $509 & -16;
        $511 = (_malloc($510)|0);
        $512 = (($29) + 8|0);
        HEAP32[$512>>2] = $511;
        $513 = $510 | 1;
        HEAP32[$29>>2] = $513;
        $514 = (($29) + 4|0);
        HEAP32[$514>>2] = $501;
        $__p$0$ph$i$i = $511;
       }
       $$02$i$i = $477;$__p$01$i$i = $__p$0$ph$i$i;
       while(1) {
        $515 = HEAP8[$$02$i$i>>0]|0;
        HEAP8[$__p$01$i$i>>0] = $515;
        $516 = (($$02$i$i) + 1|0);
        $517 = (($__p$01$i$i) + 1|0);
        $518 = ($516|0)==($n$090|0);
        if ($518) {
         break;
        } else {
         $$02$i$i = $516;$__p$01$i$i = $517;
        }
       }
       $scevgep4$i$i = (($__p$0$ph$i$i) + ($501)|0);
       $$pre110 = HEAP8[$29>>0]|0;
       HEAP8[$scevgep4$i$i>>0] = 0;
       $519 = $$pre110 & 1;
       $520 = ($519<<24>>24)==(0);
       if ($520) {
        $525 = (($29) + 1|0);
        $526 = $$pre110&255;
        $527 = $526 >>> 1;
        $528 = $525;$529 = $527;
       } else {
        $521 = (($29) + 8|0);
        $522 = HEAP32[$521>>2]|0;
        $523 = (($29) + 4|0);
        $524 = HEAP32[$523>>2]|0;
        $528 = $522;$529 = $524;
       }
       __THREW__ = 0;
       $530 = (invoke_iiii(32,($26|0),($528|0),($529|0))|0);
       $531 = __THREW__; __THREW__ = 0;
       $532 = $531&1;
       if ($532) {
        $563 = ___cxa_find_matching_catch()|0;
        $564 = tempRet0;
        if ($520) {
         $$1 = $563;$$14 = $564;
         break;
        }
        $565 = (($29) + 8|0);
        $566 = HEAP32[$565>>2]|0;
        _free($566);
        $$1 = $563;$$14 = $564;
        break;
       }
       $533 = HEAP8[$530>>0]|0;
       $534 = (($530) + 1|0);
       ;HEAP8[$$sroa$4+0>>0]=HEAP8[$534+0>>0]|0;HEAP8[$$sroa$4+1>>0]=HEAP8[$534+1>>0]|0;HEAP8[$$sroa$4+2>>0]=HEAP8[$534+2>>0]|0;HEAP8[$$sroa$4+3>>0]=HEAP8[$534+3>>0]|0;HEAP8[$$sroa$4+4>>0]=HEAP8[$534+4>>0]|0;HEAP8[$$sroa$4+5>>0]=HEAP8[$534+5>>0]|0;HEAP8[$$sroa$4+6>>0]=HEAP8[$534+6>>0]|0;
       $535 = (($530) + 8|0);
       $536 = HEAP32[$535>>2]|0;
       ;HEAP32[$530+0>>2]=0|0;HEAP32[$530+4>>2]=0|0;HEAP32[$530+8>>2]=0|0;
       HEAP8[$25>>0] = $533;
       $537 = (($25) + 1|0);
       ;HEAP8[$537+0>>0]=HEAP8[$$sroa$4+0>>0]|0;HEAP8[$537+1>>0]=HEAP8[$$sroa$4+1>>0]|0;HEAP8[$537+2>>0]=HEAP8[$$sroa$4+2>>0]|0;HEAP8[$537+3>>0]=HEAP8[$$sroa$4+3>>0]|0;HEAP8[$537+4>>0]=HEAP8[$$sroa$4+4>>0]|0;HEAP8[$537+5>>0]=HEAP8[$$sroa$4+5>>0]|0;HEAP8[$537+6>>0]=HEAP8[$$sroa$4+6>>0]|0;
       $538 = (($25) + 8|0);
       HEAP32[$538>>2] = $536;
       ;HEAP8[$$sroa$4+0>>0]=0|0;HEAP8[$$sroa$4+1>>0]=0|0;HEAP8[$$sroa$4+2>>0]=0|0;HEAP8[$$sroa$4+3>>0]=0|0;HEAP8[$$sroa$4+4>>0]=0|0;HEAP8[$$sroa$4+5>>0]=0|0;HEAP8[$$sroa$4+6>>0]=0|0;
       $539 = (($25) + 12|0);
       ;HEAP32[$539+0>>2]=0|0;HEAP32[$539+4>>2]=0|0;HEAP32[$539+8>>2]=0|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($492,$25);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
       if (!($520)) {
        $540 = (($29) + 8|0);
        $541 = HEAP32[$540>>2]|0;
        _free($541);
       }
       $542 = HEAP8[$26>>0]|0;
       $543 = $542 & 1;
       $544 = ($543<<24>>24)==(0);
       if (!($544)) {
        $545 = (($26) + 8|0);
        $546 = HEAP32[$545>>2]|0;
        _free($546);
       }
       $547 = HEAP8[$27>>0]|0;
       $548 = $547 & 1;
       $549 = ($548<<24>>24)==(0);
       if (!($549)) {
        $550 = (($27) + 8|0);
        $551 = HEAP32[$550>>2]|0;
        _free($551);
       }
       $552 = HEAP8[$28>>0]|0;
       $553 = $552 & 1;
       $554 = ($553<<24>>24)==(0);
       if ($554) {
        $$0 = $483;
        STACKTOP = sp;return ($$0|0);
       }
       $555 = (($28) + 8|0);
       $556 = HEAP32[$555>>2]|0;
       _free($556);
       $$0 = $483;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $567 = HEAP8[$26>>0]|0;
     $568 = $567 & 1;
     $569 = ($568<<24>>24)==(0);
     if ($569) {
      $$2 = $$1;$$25 = $$14;
     } else {
      $570 = (($26) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      _free($571);
      $$2 = $$1;$$25 = $$14;
     }
    }
    $572 = HEAP8[$27>>0]|0;
    $573 = $572 & 1;
    $574 = ($573<<24>>24)==(0);
    if ($574) {
     $$3 = $$2;$$36 = $$25;
    } else {
     $575 = (($27) + 8|0);
     $576 = HEAP32[$575>>2]|0;
     _free($576);
     $$3 = $$2;$$36 = $$25;
    }
   }
   $577 = HEAP8[$28>>0]|0;
   $578 = $577 & 1;
   $579 = ($578<<24>>24)==(0);
   if ($579) {
    $$4 = $$3;$$47 = $$36;
    ___resumeException($$4|0);
    // unreachable;
   }
   $580 = (($28) + 8|0);
   $581 = HEAP32[$580>>2]|0;
   _free($581);
   $$4 = $$3;$$47 = $$36;
   ___resumeException($$4|0);
   // unreachable;
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i21 = 0, $$01 = 0, $$02 = 0, $$02$i$i = 0, $$02$i$i8 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$pre = 0, $$pre$i = 0, $$pre$i19 = 0, $$pre16 = 0, $$sroa$5 = 0, $$sroa$513 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$lcssa$i$i = 0, $__p$0$lcssa$i$i13 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i6 = 0, $__p$01$i$i = 0, $__p$01$i$i9 = 0, $__v$i$i = 0, $__v$i$i18 = 0, $cv = 0, $cv1 = 0;
 var $phitmp = 0, $phitmp20 = 0, $phitmp21 = 0, $phitmp22 = 0, $scevgep4$i$i = 0, $scevgep4$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i18 = sp;
 $__v$i$i = sp + 60|0;
 $cv = sp + 80|0;
 $0 = sp + 88|0;
 $$sroa$513 = sp + 124|0;
 $1 = sp + 112|0;
 $cv1 = sp + 56|0;
 $2 = sp + 32|0;
 $$sroa$5 = sp + 131|0;
 $3 = sp + 20|0;
 $4 = $last;
 $5 = $first;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(2);
 if (!($7)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP8[$first>>0]|0;
 $9 = ($8<<24>>24)==(102);
 if (!($9)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($first) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 if ((($11<<24>>24) == 112)) {
  $12 = (($first) + 2|0);
  $13 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($12,$last,$cv)|0);
  $14 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($13,$last)|0);
  $15 = ($14|0)==($last|0);
  if ($15) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP8[$14>>0]|0;
  $17 = ($16<<24>>24)==(95);
  if (!($17)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $18 = $13;
  $19 = $14;
  $20 = (($19) - ($18))|0;
  $21 = ($20>>>0)>(4294967279);
  if ($21) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   // unreachable;
  }
  $22 = ($20>>>0)<(11);
  if ($22) {
   $23 = $20 << 1;
   $24 = $23&255;
   HEAP8[$1>>0] = $24;
   $25 = (($1) + 1|0);
   $__p$0$ph$i$i = $25;
  } else {
   $26 = (($20) + 16)|0;
   $27 = $26 & -16;
   $28 = (_malloc($27)|0);
   $29 = (($1) + 8|0);
   HEAP32[$29>>2] = $28;
   $30 = $27 | 1;
   HEAP32[$1>>2] = $30;
   $31 = (($1) + 4|0);
   HEAP32[$31>>2] = $20;
   $__p$0$ph$i$i = $28;
  }
  $32 = ($13|0)==($14|0);
  if ($32) {
   $__p$0$lcssa$i$i = $__p$0$ph$i$i;
  } else {
   $$02$i$i = $13;$__p$01$i$i = $__p$0$ph$i$i;
   while(1) {
    $33 = HEAP8[$$02$i$i>>0]|0;
    HEAP8[$__p$01$i$i>>0] = $33;
    $34 = (($$02$i$i) + 1|0);
    $35 = (($__p$01$i$i) + 1|0);
    $36 = ($34|0)==($14|0);
    if ($36) {
     break;
    } else {
     $$02$i$i = $34;$__p$01$i$i = $35;
    }
   }
   $scevgep4$i$i = (($__p$0$ph$i$i) + ($20)|0);
   $__p$0$lcssa$i$i = $scevgep4$i$i;
  }
  HEAP8[$__p$0$lcssa$i$i>>0] = 0;
  __THREW__ = 0;
  $37 = (invoke_iiiii(33,($1|0),0,(3720|0),2)|0);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  do {
   if ($39) {
    $81 = ___cxa_find_matching_catch()|0;
    $82 = tempRet0;
    $$01 = $81;$$02 = $82;
   } else {
    $40 = HEAP8[$37>>0]|0;
    $41 = (($37) + 1|0);
    ;HEAP8[$$sroa$513+0>>0]=HEAP8[$41+0>>0]|0;HEAP8[$$sroa$513+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$$sroa$513+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$$sroa$513+3>>0]=HEAP8[$41+3>>0]|0;HEAP8[$$sroa$513+4>>0]=HEAP8[$41+4>>0]|0;HEAP8[$$sroa$513+5>>0]=HEAP8[$41+5>>0]|0;HEAP8[$$sroa$513+6>>0]=HEAP8[$41+6>>0]|0;
    $42 = (($37) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;
    HEAP8[$0>>0] = $40;
    $44 = (($0) + 1|0);
    ;HEAP8[$44+0>>0]=HEAP8[$$sroa$513+0>>0]|0;HEAP8[$44+1>>0]=HEAP8[$$sroa$513+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$$sroa$513+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$$sroa$513+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$$sroa$513+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$$sroa$513+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$$sroa$513+6>>0]|0;
    $45 = (($0) + 8|0);
    HEAP32[$45>>2] = $43;
    ;HEAP8[$$sroa$513+0>>0]=0|0;HEAP8[$$sroa$513+1>>0]=0|0;HEAP8[$$sroa$513+2>>0]=0|0;HEAP8[$$sroa$513+3>>0]=0|0;HEAP8[$$sroa$513+4>>0]=0|0;HEAP8[$$sroa$513+5>>0]=0|0;HEAP8[$$sroa$513+6>>0]=0|0;
    $46 = (($0) + 12|0);
    ;HEAP32[$46+0>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;
    $47 = (($db) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($db) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48>>>0)<($50>>>0);
    if ($51) {
     $52 = ($48|0)==(0|0);
     if ($52) {
      $55 = 0;
     } else {
      ;HEAP32[$48+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$0+8>>2]|0;
      ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $53 = (($48) + 12|0);
      ;HEAP32[$53+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$46+8>>2]|0;
      ;HEAP32[$46+0>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;
      $$pre$i = HEAP32[$47>>2]|0;
      $55 = $$pre$i;
     }
     $54 = (($55) + 24|0);
     HEAP32[$47>>2] = $54;
    } else {
     $56 = (($db) + 12|0);
     $57 = HEAP32[$db>>2]|0;
     $58 = $48;
     $59 = $57;
     $60 = (($58) - ($59))|0;
     $61 = (($60|0) / 24)&-1;
     $62 = (($61) + 1)|0;
     $63 = ($62|0)<(0);
     if ($63) {
      __THREW__ = 0;
      invoke_v(41);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $83 = ___cxa_find_matching_catch()|0;
       $84 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       $$01 = $83;$$02 = $84;
       break;
      } else {
       // unreachable;
      }
     }
     $66 = $50;
     $67 = (($66) - ($59))|0;
     $68 = (($67|0) / 24)&-1;
     $69 = ($68>>>0)<(1073741823);
     if ($69) {
      $70 = $68 << 1;
      $71 = ($70>>>0)<($62>>>0);
      $72 = $71 ? $62 : $70;
      $$0$i$i$i = $72;
     } else {
      $$0$i$i$i = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$61,$56);
     $73 = (($__v$i$i) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0|0);
     if (!($75)) {
      ;HEAP32[$74+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$0+8>>2]|0;
      ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $76 = (($74) + 12|0);
      ;HEAP32[$76+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$76+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$76+8>>2]=HEAP32[$46+8>>2]|0;
      ;HEAP32[$46+0>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;
     }
     $77 = (($74) + 24|0);
     HEAP32[$73>>2] = $77;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    $$pre = HEAP8[$1>>0]|0;
    $phitmp21 = $$pre & 1;
    $phitmp22 = ($phitmp21<<24>>24)==(0);
    if (!($phitmp22)) {
     $78 = (($1) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     _free($79);
    }
    $80 = (($14) + 1|0);
    $$0 = $80;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $85 = HEAP8[$1>>0]|0;
  $86 = $85 & 1;
  $87 = ($86<<24>>24)==(0);
  if ($87) {
   $$2 = $$01;$$24 = $$02;
   ___resumeException($$2|0);
   // unreachable;
  }
  $88 = (($1) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  _free($89);
  $$2 = $$01;$$24 = $$02;
  ___resumeException($$2|0);
  // unreachable;
 } else if ((($11<<24>>24) == 76)) {
  $90 = (($first) + 2|0);
  $91 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($90,$last)|0);
  $92 = ($91|0)==($last|0);
  if ($92) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $93 = HEAP8[$91>>0]|0;
  $94 = ($93<<24>>24)==(112);
  if (!($94)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $95 = (($91) + 1|0);
  $96 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($95,$last,$cv1)|0);
  $97 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($96,$last)|0);
  $98 = ($97|0)==($last|0);
  if ($98) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $99 = HEAP8[$97>>0]|0;
  $100 = ($99<<24>>24)==(95);
  if (!($100)) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $101 = $96;
  $102 = $97;
  $103 = (($102) - ($101))|0;
  $104 = ($103>>>0)>(4294967279);
  if ($104) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   // unreachable;
  }
  $105 = ($103>>>0)<(11);
  if ($105) {
   $106 = $103 << 1;
   $107 = $106&255;
   HEAP8[$3>>0] = $107;
   $108 = (($3) + 1|0);
   $__p$0$ph$i$i6 = $108;
  } else {
   $109 = (($103) + 16)|0;
   $110 = $109 & -16;
   $111 = (_malloc($110)|0);
   $112 = (($3) + 8|0);
   HEAP32[$112>>2] = $111;
   $113 = $110 | 1;
   HEAP32[$3>>2] = $113;
   $114 = (($3) + 4|0);
   HEAP32[$114>>2] = $103;
   $__p$0$ph$i$i6 = $111;
  }
  $115 = ($96|0)==($97|0);
  if ($115) {
   $__p$0$lcssa$i$i13 = $__p$0$ph$i$i6;
  } else {
   $$02$i$i8 = $96;$__p$01$i$i9 = $__p$0$ph$i$i6;
   while(1) {
    $116 = HEAP8[$$02$i$i8>>0]|0;
    HEAP8[$__p$01$i$i9>>0] = $116;
    $117 = (($$02$i$i8) + 1|0);
    $118 = (($__p$01$i$i9) + 1|0);
    $119 = ($117|0)==($97|0);
    if ($119) {
     break;
    } else {
     $$02$i$i8 = $117;$__p$01$i$i9 = $118;
    }
   }
   $scevgep4$i$i11 = (($__p$0$ph$i$i6) + ($103)|0);
   $__p$0$lcssa$i$i13 = $scevgep4$i$i11;
  }
  HEAP8[$__p$0$lcssa$i$i13>>0] = 0;
  __THREW__ = 0;
  $120 = (invoke_iiiii(33,($3|0),0,(3720|0),2)|0);
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  do {
   if ($122) {
    $164 = ___cxa_find_matching_catch()|0;
    $165 = tempRet0;
    $$1 = $164;$$13 = $165;
   } else {
    $123 = HEAP8[$120>>0]|0;
    $124 = (($120) + 1|0);
    ;HEAP8[$$sroa$5+0>>0]=HEAP8[$124+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$124+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$124+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$124+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$124+6>>0]|0;
    $125 = (($120) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    ;HEAP32[$120+0>>2]=0|0;HEAP32[$120+4>>2]=0|0;HEAP32[$120+8>>2]=0|0;
    HEAP8[$2>>0] = $123;
    $127 = (($2) + 1|0);
    ;HEAP8[$127+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$127+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$127+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$127+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$127+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$127+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$127+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
    $128 = (($2) + 8|0);
    HEAP32[$128>>2] = $126;
    ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
    $129 = (($2) + 12|0);
    ;HEAP32[$129+0>>2]=0|0;HEAP32[$129+4>>2]=0|0;HEAP32[$129+8>>2]=0|0;
    $130 = (($db) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($db) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($131>>>0)<($133>>>0);
    if ($134) {
     $135 = ($131|0)==(0|0);
     if ($135) {
      $138 = 0;
     } else {
      ;HEAP32[$131+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$131+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$131+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $136 = (($131) + 12|0);
      ;HEAP32[$136+0>>2]=HEAP32[$129+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$136+8>>2]=HEAP32[$129+8>>2]|0;
      ;HEAP32[$129+0>>2]=0|0;HEAP32[$129+4>>2]=0|0;HEAP32[$129+8>>2]=0|0;
      $$pre$i19 = HEAP32[$130>>2]|0;
      $138 = $$pre$i19;
     }
     $137 = (($138) + 24|0);
     HEAP32[$130>>2] = $137;
    } else {
     $139 = (($db) + 12|0);
     $140 = HEAP32[$db>>2]|0;
     $141 = $131;
     $142 = $140;
     $143 = (($141) - ($142))|0;
     $144 = (($143|0) / 24)&-1;
     $145 = (($144) + 1)|0;
     $146 = ($145|0)<(0);
     if ($146) {
      __THREW__ = 0;
      invoke_v(41);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       $166 = ___cxa_find_matching_catch()|0;
       $167 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
       $$1 = $166;$$13 = $167;
       break;
      } else {
       // unreachable;
      }
     }
     $149 = $133;
     $150 = (($149) - ($142))|0;
     $151 = (($150|0) / 24)&-1;
     $152 = ($151>>>0)<(1073741823);
     if ($152) {
      $153 = $151 << 1;
      $154 = ($153>>>0)<($145>>>0);
      $155 = $154 ? $145 : $153;
      $$0$i$i$i21 = $155;
     } else {
      $$0$i$i$i21 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18,$$0$i$i$i21,$144,$139);
     $156 = (($__v$i$i18) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      ;HEAP32[$157+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$157+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$157+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $159 = (($157) + 12|0);
      ;HEAP32[$159+0>>2]=HEAP32[$129+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$129+8>>2]|0;
      ;HEAP32[$129+0>>2]=0|0;HEAP32[$129+4>>2]=0|0;HEAP32[$129+8>>2]=0|0;
     }
     $160 = (($157) + 24|0);
     HEAP32[$156>>2] = $160;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i18);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
    $$pre16 = HEAP8[$3>>0]|0;
    $phitmp = $$pre16 & 1;
    $phitmp20 = ($phitmp<<24>>24)==(0);
    if (!($phitmp20)) {
     $161 = (($3) + 8|0);
     $162 = HEAP32[$161>>2]|0;
     _free($162);
    }
    $163 = (($97) + 1|0);
    $$0 = $163;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $168 = HEAP8[$3>>0]|0;
  $169 = $168 & 1;
  $170 = ($169<<24>>24)==(0);
  if ($170) {
   $$2 = $$1;$$24 = $$13;
   ___resumeException($$2|0);
   // unreachable;
  }
  $171 = (($3) + 8|0);
  $172 = HEAP32[$171>>2]|0;
  _free($172);
  $$2 = $$1;$$24 = $$13;
  ___resumeException($$2|0);
  // unreachable;
 } else {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$i = 0, $$02$i10 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$57 = 0, $$6 = 0, $$68 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$03$i = 0, $l$03$i9 = 0, $op1 = 0, $op2 = 0, $or$cond = 0, $or$cond25 = 0, $r$04$i = 0;
 var $r$04$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op2 = sp + 12|0;
 $op1 = sp + 48|0;
 $0 = sp + 24|0;
 $1 = sp + 60|0;
 $2 = sp + 84|0;
 $3 = sp;
 $4 = sp + 36|0;
 $5 = sp + 72|0;
 $6 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $7 = ($6|0)==($first|0);
 if ($7) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$last,$db)|0);
 $9 = ($8|0)==($6|0);
 $10 = (($db) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 if ($9) {
  $229 = (($11) + -24|0);
  $231 = $11;
  while(1) {
   $230 = (($231) + -24|0);
   HEAP32[$10>>2] = $230;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($230);
   $232 = HEAP32[$10>>2]|0;
   $233 = ($232|0)==($229|0);
   if ($233) {
    $$0 = $first;
    break;
   } else {
    $231 = $232;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$db>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($11) + -24|0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$18);
 $19 = HEAP32[$10>>2]|0;
 $20 = (($19) + -24|0);
 $22 = $19;
 while(1) {
  $21 = (($22) + -24|0);
  HEAP32[$10>>2] = $21;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
  $23 = HEAP32[$10>>2]|0;
  $24 = ($23|0)==($20|0);
  if ($24) {
   break;
  } else {
   $22 = $23;
  }
 }
 $25 = (($19) + -48|0);
 __THREW__ = 0;
 invoke_vii(36,($op1|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $62 = ___cxa_find_matching_catch()|0;
  $63 = tempRet0;
  $$6 = $63;$$68 = $62;
 } else {
  $28 = HEAP32[$10>>2]|0;
  $29 = (($28) + -24|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 & 1;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $36 = (($29) + 1|0);
   HEAP8[$36>>0] = 0;
   HEAP8[$29>>0] = 0;
  } else {
   $33 = (($28) + -16|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP8[$34>>0] = 0;
   $35 = (($28) + -20|0);
   HEAP32[$35>>2] = 0;
  }
  $37 = HEAP8[$op>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $44 = $37&255;
   $45 = $44 >>> 1;
   $46 = (($op) + 1|0);
   $234 = $46;$48 = $45;
  } else {
   $40 = (($op) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($op) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $234 = $43;$48 = $41;
  }
  $47 = ($48>>>0)>(1);
  $49 = $47 ? 1 : $48;
  $50 = ($49|0)==(0);
  L27: do {
   if ($50) {
    label = 16;
   } else {
    $$02$i = $49;$l$03$i = $234;$r$04$i = 2096;
    while(1) {
     $51 = HEAP8[$l$03$i>>0]|0;
     $52 = HEAP8[$r$04$i>>0]|0;
     $53 = ($51<<24>>24)==($52<<24>>24);
     if (!($53)) {
      label = 20;
      break L27;
     }
     $54 = (($$02$i) + -1)|0;
     $55 = (($l$03$i) + 1|0);
     $56 = (($r$04$i) + 1|0);
     $57 = ($54|0)==(0);
     if ($57) {
      label = 16;
      break;
     } else {
      $$02$i = $54;$l$03$i = $55;$r$04$i = $56;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   $58 = ($48|0)!=(0);
   $59 = $47 ^ 1;
   $or$cond = $58 & $59;
   if ($or$cond) {
    __THREW__ = 0;
    invoke_vii(38,($29|0),40);
    $60 = __THREW__; __THREW__ = 0;
    $61 = $60&1;
    if ($61) {
     label = 19;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  }
  L34: do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_viii(46,($5|0),(2008|0),($op1|0));
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if ($67) {
     label = 19;
    } else {
     __THREW__ = 0;
     $68 = (invoke_iiii(32,($5|0),(2392|0),2)|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $173 = ___cxa_find_matching_catch()|0;
      $174 = tempRet0;
      $$4 = $174;$$46 = $173;
     } else {
      ;HEAP32[$4+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$68+8>>2]|0;
      ;HEAP32[$68+0>>2]=0|0;HEAP32[$68+4>>2]=0|0;HEAP32[$68+8>>2]=0|0;
      $71 = HEAP8[$op>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $78 = (($op) + 1|0);
       $79 = $71&255;
       $80 = $79 >>> 1;
       $81 = $78;$82 = $80;
      } else {
       $74 = (($op) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($op) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $81 = $75;$82 = $77;
      }
      __THREW__ = 0;
      $83 = (invoke_iiii(32,($4|0),($81|0),($82|0))|0);
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       $175 = ___cxa_find_matching_catch()|0;
       $176 = tempRet0;
       $$3 = $176;$$35 = $175;
      } else {
       ;HEAP32[$3+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$83+8>>2]|0;
       ;HEAP32[$83+0>>2]=0|0;HEAP32[$83+4>>2]=0|0;HEAP32[$83+8>>2]=0|0;
       __THREW__ = 0;
       $86 = (invoke_iiii(32,($3|0),(1992|0),2)|0);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $177 = ___cxa_find_matching_catch()|0;
        $178 = tempRet0;
        $$2 = $178;$$24 = $177;
       } else {
        ;HEAP32[$2+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$86+8>>2]|0;
        ;HEAP32[$86+0>>2]=0|0;HEAP32[$86+4>>2]=0|0;HEAP32[$86+8>>2]=0|0;
        $89 = HEAP8[$op2>>0]|0;
        $90 = $89 & 1;
        $91 = ($90<<24>>24)==(0);
        if ($91) {
         $96 = (($op2) + 1|0);
         $97 = $89&255;
         $98 = $97 >>> 1;
         $100 = $98;$99 = $96;
        } else {
         $92 = (($op2) + 8|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = (($op2) + 4|0);
         $95 = HEAP32[$94>>2]|0;
         $100 = $95;$99 = $93;
        }
        __THREW__ = 0;
        $101 = (invoke_iiii(32,($2|0),($99|0),($100|0))|0);
        $102 = __THREW__; __THREW__ = 0;
        $103 = $102&1;
        do {
         if ($103) {
          $179 = ___cxa_find_matching_catch()|0;
          $180 = tempRet0;
          $$1 = $180;$$13 = $179;
         } else {
          ;HEAP32[$1+0>>2]=HEAP32[$101+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$101+8>>2]|0;
          ;HEAP32[$101+0>>2]=0|0;HEAP32[$101+4>>2]=0|0;HEAP32[$101+8>>2]=0|0;
          __THREW__ = 0;
          $104 = (invoke_iiii(32,($1|0),(2000|0),1)|0);
          $105 = __THREW__; __THREW__ = 0;
          $106 = $105&1;
          do {
           if ($106) {
            $181 = ___cxa_find_matching_catch()|0;
            $182 = tempRet0;
            $$01 = $182;$$02 = $181;
           } else {
            ;HEAP32[$0+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$104+8>>2]|0;
            ;HEAP32[$104+0>>2]=0|0;HEAP32[$104+4>>2]=0|0;HEAP32[$104+8>>2]=0|0;
            $107 = HEAP8[$0>>0]|0;
            $108 = $107 & 1;
            $109 = ($108<<24>>24)==(0);
            if ($109) {
             $114 = (($0) + 1|0);
             $115 = $107&255;
             $116 = $115 >>> 1;
             $117 = $114;$118 = $116;
            } else {
             $110 = (($0) + 8|0);
             $111 = HEAP32[$110>>2]|0;
             $112 = (($0) + 4|0);
             $113 = HEAP32[$112>>2]|0;
             $117 = $111;$118 = $113;
            }
            __THREW__ = 0;
            (invoke_iiii(32,($29|0),($117|0),($118|0))|0);
            $119 = __THREW__; __THREW__ = 0;
            $120 = $119&1;
            if ($120) {
             $183 = ___cxa_find_matching_catch()|0;
             $184 = tempRet0;
             if ($109) {
              $$01 = $184;$$02 = $183;
              break;
             }
             $185 = (($0) + 8|0);
             $186 = HEAP32[$185>>2]|0;
             _free($186);
             $$01 = $184;$$02 = $183;
             break;
            }
            if (!($109)) {
             $121 = (($0) + 8|0);
             $122 = HEAP32[$121>>2]|0;
             _free($122);
            }
            $123 = HEAP8[$1>>0]|0;
            $124 = $123 & 1;
            $125 = ($124<<24>>24)==(0);
            if (!($125)) {
             $126 = (($1) + 8|0);
             $127 = HEAP32[$126>>2]|0;
             _free($127);
            }
            $128 = HEAP8[$2>>0]|0;
            $129 = $128 & 1;
            $130 = ($129<<24>>24)==(0);
            if (!($130)) {
             $131 = (($2) + 8|0);
             $132 = HEAP32[$131>>2]|0;
             _free($132);
            }
            $133 = HEAP8[$3>>0]|0;
            $134 = $133 & 1;
            $135 = ($134<<24>>24)==(0);
            if (!($135)) {
             $136 = (($3) + 8|0);
             $137 = HEAP32[$136>>2]|0;
             _free($137);
            }
            $138 = HEAP8[$4>>0]|0;
            $139 = $138 & 1;
            $140 = ($139<<24>>24)==(0);
            if (!($140)) {
             $141 = (($4) + 8|0);
             $142 = HEAP32[$141>>2]|0;
             _free($142);
            }
            $143 = HEAP8[$5>>0]|0;
            $144 = $143 & 1;
            $145 = ($144<<24>>24)==(0);
            if (!($145)) {
             $146 = (($5) + 8|0);
             $147 = HEAP32[$146>>2]|0;
             _free($147);
            }
            $148 = HEAP8[$op>>0]|0;
            $149 = $148 & 1;
            $150 = ($149<<24>>24)==(0);
            if ($150) {
             $155 = $148&255;
             $156 = $155 >>> 1;
             $157 = (($op) + 1|0);
             $159 = $156;$235 = $157;
            } else {
             $151 = (($op) + 4|0);
             $152 = HEAP32[$151>>2]|0;
             $153 = (($op) + 8|0);
             $154 = HEAP32[$153>>2]|0;
             $159 = $152;$235 = $154;
            }
            $158 = ($159>>>0)>(1);
            $160 = $158 ? 1 : $159;
            $161 = ($160|0)==(0);
            L87: do {
             if ($161) {
              label = 54;
             } else {
              $$02$i10 = $160;$l$03$i9 = $235;$r$04$i8 = 2096;
              while(1) {
               $162 = HEAP8[$l$03$i9>>0]|0;
               $163 = HEAP8[$r$04$i8>>0]|0;
               $164 = ($162<<24>>24)==($163<<24>>24);
               if (!($164)) {
                break L87;
               }
               $165 = (($$02$i10) + -1)|0;
               $166 = (($l$03$i9) + 1|0);
               $167 = (($r$04$i8) + 1|0);
               $168 = ($165|0)==(0);
               if ($168) {
                label = 54;
                break;
               } else {
                $$02$i10 = $165;$l$03$i9 = $166;$r$04$i8 = $167;
               }
              }
             }
            } while(0);
            do {
             if ((label|0) == 54) {
              $169 = ($159|0)!=(0);
              $170 = $158 ^ 1;
              $or$cond25 = $169 & $170;
              if (!($or$cond25)) {
               break;
              }
              __THREW__ = 0;
              invoke_vii(38,($29|0),41);
              $171 = __THREW__; __THREW__ = 0;
              $172 = $171&1;
              if ($172) {
               label = 19;
               break L34;
              }
             }
            } while(0);
            $212 = HEAP8[$op1>>0]|0;
            $213 = $212 & 1;
            $214 = ($213<<24>>24)==(0);
            if (!($214)) {
             $215 = (($op1) + 8|0);
             $216 = HEAP32[$215>>2]|0;
             _free($216);
            }
            if ($91) {
             $$0 = $8;
             STACKTOP = sp;return ($$0|0);
            }
            $217 = (($op2) + 8|0);
            $218 = HEAP32[$217>>2]|0;
            _free($218);
            $$0 = $8;
            STACKTOP = sp;return ($$0|0);
           }
          } while(0);
          $187 = HEAP8[$1>>0]|0;
          $188 = $187 & 1;
          $189 = ($188<<24>>24)==(0);
          if ($189) {
           $$1 = $$01;$$13 = $$02;
           break;
          }
          $190 = (($1) + 8|0);
          $191 = HEAP32[$190>>2]|0;
          _free($191);
          $$1 = $$01;$$13 = $$02;
         }
        } while(0);
        $192 = HEAP8[$2>>0]|0;
        $193 = $192 & 1;
        $194 = ($193<<24>>24)==(0);
        if ($194) {
         $$2 = $$1;$$24 = $$13;
        } else {
         $195 = (($2) + 8|0);
         $196 = HEAP32[$195>>2]|0;
         _free($196);
         $$2 = $$1;$$24 = $$13;
        }
       }
       $197 = HEAP8[$3>>0]|0;
       $198 = $197 & 1;
       $199 = ($198<<24>>24)==(0);
       if ($199) {
        $$3 = $$2;$$35 = $$24;
       } else {
        $200 = (($3) + 8|0);
        $201 = HEAP32[$200>>2]|0;
        _free($201);
        $$3 = $$2;$$35 = $$24;
       }
      }
      $202 = HEAP8[$4>>0]|0;
      $203 = $202 & 1;
      $204 = ($203<<24>>24)==(0);
      if ($204) {
       $$4 = $$3;$$46 = $$35;
      } else {
       $205 = (($4) + 8|0);
       $206 = HEAP32[$205>>2]|0;
       _free($206);
       $$4 = $$3;$$46 = $$35;
      }
     }
     $207 = HEAP8[$5>>0]|0;
     $208 = $207 & 1;
     $209 = ($208<<24>>24)==(0);
     if ($209) {
      $$5 = $$4;$$57 = $$46;
     } else {
      $210 = (($5) + 8|0);
      $211 = HEAP32[$210>>2]|0;
      _free($211);
      $$5 = $$4;$$57 = $$46;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $64 = ___cxa_find_matching_catch()|0;
   $65 = tempRet0;
   $$5 = $65;$$57 = $64;
  }
  $219 = HEAP8[$op1>>0]|0;
  $220 = $219 & 1;
  $221 = ($220<<24>>24)==(0);
  if ($221) {
   $$6 = $$5;$$68 = $$57;
  } else {
   $222 = (($op1) + 8|0);
   $223 = HEAP32[$222>>2]|0;
   _free($223);
   $$6 = $$5;$$68 = $$57;
  }
 }
 $224 = HEAP8[$op2>>0]|0;
 $225 = $224 & 1;
 $226 = ($225<<24>>24)==(0);
 if ($226) {
  ___resumeException($$68|0);
  // unreachable;
 }
 $227 = (($op2) + 8|0);
 $228 = HEAP32[$227>>2]|0;
 _free($228);
 ___resumeException($$68|0);
 // unreachable;
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$04 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i$i$i$i$i = 0;
 var $phitmp = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$sroa$4 = sp + 36|0;
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $4 = ($3|0)==($first|0);
 if ($4) {
  $$04 = $first;
  STACKTOP = sp;return ($$04|0);
 }
 $5 = HEAP32[$db>>2]|0;
 $6 = (($db) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $$04 = $first;
  STACKTOP = sp;return ($$04|0);
 }
 $9 = (($7) + -24|0);
 __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($1,$op,2008);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + -24|0);
 __THREW__ = 0;
 invoke_vii(36,($2|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$2 = $93;$$23 = $92;
 } else {
  $14 = HEAP8[$2>>0]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   $21 = (($2) + 1|0);
   $22 = $14&255;
   $23 = $22 >>> 1;
   $24 = $21;$25 = $23;
  } else {
   $17 = (($2) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($2) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $24 = $18;$25 = $20;
  }
  __THREW__ = 0;
  $26 = (invoke_iiii(32,($1|0),($24|0),($25|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  do {
   if ($28) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$1 = $95;$$12 = $94;
   } else {
    ;HEAP32[$0+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$26+8>>2]|0;
    ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
    __THREW__ = 0;
    $29 = (invoke_iiii(32,($0|0),(2000|0),1)|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     $96 = ___cxa_find_matching_catch()|0;
     $97 = tempRet0;
     $98 = HEAP8[$0>>0]|0;
     $99 = $98 & 1;
     $100 = ($99<<24>>24)==(0);
     if ($100) {
      $$1 = $97;$$12 = $96;
      break;
     }
     $101 = (($0) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     _free($102);
     $$1 = $97;$$12 = $96;
     break;
    }
    $32 = HEAP8[$29>>0]|0;
    $33 = (($29) + 1|0);
    ;HEAP8[$$sroa$4+0>>0]=HEAP8[$33+0>>0]|0;HEAP8[$$sroa$4+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$$sroa$4+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$$sroa$4+3>>0]=HEAP8[$33+3>>0]|0;HEAP8[$$sroa$4+4>>0]=HEAP8[$33+4>>0]|0;HEAP8[$$sroa$4+5>>0]=HEAP8[$33+5>>0]|0;HEAP8[$$sroa$4+6>>0]=HEAP8[$33+6>>0]|0;
    $34 = (($29) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    ;HEAP32[$29+0>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
    $36 = HEAP8[$9>>0]|0;
    $37 = $36 & 1;
    $38 = ($37<<24>>24)==(0);
    do {
     if ($38) {
      $39 = (($9) + 1|0);
      HEAP8[$39>>0] = 0;
      HEAP8[$9>>0] = 0;
     } else {
      $40 = (($7) + -16|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP8[$41>>0] = 0;
      $42 = (($7) + -20|0);
      HEAP32[$42>>2] = 0;
      $$pre$i$i$i = HEAP8[$9>>0]|0;
      $43 = $$pre$i$i$i & 1;
      $44 = ($43<<24>>24)==(0);
      if ($44) {
       $49 = $$pre$i$i$i;$58 = 10;
      } else {
       $45 = HEAP32[$9>>2]|0;
       $46 = $45 & -2;
       $phitmp$i$i$i$i$i$i = (($46) + -1)|0;
       $47 = $45&255;
       $49 = $47;$58 = $phitmp$i$i$i$i$i$i;
      }
      $48 = $49 & 1;
      $50 = ($48<<24>>24)==(0);
      if ($50) {
       $51 = $49&255;
       $52 = $51 >>> 1;
       $53 = ($49&255)<(22);
       if ($53) {
        $110 = 1;$57 = 10;$77 = $52;
       } else {
        $54 = (($52) + 16)|0;
        $55 = $54 & 240;
        $phitmp$i2$i$i$i$i$i = (($55) + -1)|0;
        $110 = 1;$57 = $phitmp$i2$i$i$i$i$i;$77 = $52;
       }
      } else {
       $110 = 0;$57 = 10;$77 = 0;
      }
      $56 = ($57|0)==($58|0);
      if (!($56)) {
       $59 = ($57|0)==(10);
       if ($59) {
        $64 = (($9) + 1|0);
        $65 = HEAP32[$40>>2]|0;
        if ($110) {
         $66 = $49&255;
         $67 = $66 >>> 1;
         $68 = (($67) + 1)|0;
         _memcpy(($64|0),($65|0),($68|0))|0;
         _free($65);
        } else {
         $73 = HEAP8[$65>>0]|0;
         HEAP8[$64>>0] = $73;
         _free($65);
        }
        $78 = $77 << 1;
        $79 = $78&255;
        HEAP8[$9>>0] = $79;
        break;
       }
       $60 = ($57>>>0)<=($58>>>0);
       $61 = (($57) + 1)|0;
       $62 = (_malloc($61)|0);
       $63 = ($62|0)==(0|0);
       $or$cond$i$i$i$i$i = $60 & $63;
       if (!($or$cond$i$i$i$i$i)) {
        if ($110) {
         $69 = (($9) + 1|0);
         $70 = $49&255;
         $71 = $70 >>> 1;
         $72 = (($71) + 1)|0;
         _memcpy(($62|0),($69|0),($72|0))|0;
        } else {
         $74 = HEAP32[$40>>2]|0;
         $75 = HEAP8[$74>>0]|0;
         HEAP8[$62>>0] = $75;
         _free($74);
        }
        $76 = $61 | 1;
        HEAP32[$9>>2] = $76;
        HEAP32[$42>>2] = $77;
        HEAP32[$40>>2] = $62;
       }
      }
     }
    } while(0);
    $80 = (($7) + -24|0);
    HEAP8[$80>>0] = $32;
    $81 = (($7) + -23|0);
    ;HEAP8[$81+0>>0]=HEAP8[$$sroa$4+0>>0]|0;HEAP8[$81+1>>0]=HEAP8[$$sroa$4+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$$sroa$4+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$$sroa$4+3>>0]|0;HEAP8[$81+4>>0]=HEAP8[$$sroa$4+4>>0]|0;HEAP8[$81+5>>0]=HEAP8[$$sroa$4+5>>0]|0;HEAP8[$81+6>>0]=HEAP8[$$sroa$4+6>>0]|0;
    $82 = (($7) + -16|0);
    HEAP32[$82>>2] = $35;
    ;HEAP8[$$sroa$4+0>>0]=0|0;HEAP8[$$sroa$4+1>>0]=0|0;HEAP8[$$sroa$4+2>>0]=0|0;HEAP8[$$sroa$4+3>>0]=0|0;HEAP8[$$sroa$4+4>>0]=0|0;HEAP8[$$sroa$4+5>>0]=0|0;HEAP8[$$sroa$4+6>>0]=0|0;
    $$pre = HEAP8[$0>>0]|0;
    $phitmp = $$pre & 1;
    $phitmp8 = ($phitmp<<24>>24)==(0);
    if (!($phitmp8)) {
     $83 = (($0) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     _free($84);
    }
    if (!($16)) {
     $85 = (($2) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     _free($86);
    }
    $87 = HEAP8[$1>>0]|0;
    $88 = $87 & 1;
    $89 = ($88<<24>>24)==(0);
    if ($89) {
     $$04 = $3;
     STACKTOP = sp;return ($$04|0);
    }
    $90 = (($1) + 8|0);
    $91 = HEAP32[$90>>2]|0;
    _free($91);
    $$04 = $3;
    STACKTOP = sp;return ($$04|0);
   }
  } while(0);
  if ($16) {
   $$2 = $$1;$$23 = $$12;
  } else {
   $103 = (($2) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   _free($104);
   $$2 = $$1;$$23 = $$12;
  }
 }
 $105 = HEAP8[$1>>0]|0;
 $106 = $105 & 1;
 $107 = ($106<<24>>24)==(0);
 if ($107) {
  ___resumeException($$23|0);
  // unreachable;
 }
 $108 = (($1) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 _free($109);
 ___resumeException($$23|0);
 // unreachable;
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$19 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$57 = 0, $$first = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $args3 = 0, $global$0$off0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $s = 0, $s1 = 0, $s4 = 0, $s5 = 0, $s6 = 0, $t$0 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$155 = 0;
 var $t$2 = 0, $t$3$lcssa = 0, $t$365 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $s = sp + 48|0;
 $0 = sp + 108|0;
 $s1 = sp;
 $1 = sp + 96|0;
 $args3 = sp + 120|0;
 $s4 = sp + 132|0;
 $2 = sp + 72|0;
 $s5 = sp + 60|0;
 $3 = sp + 24|0;
 $s6 = sp + 36|0;
 $4 = sp + 84|0;
 $5 = $last;
 $6 = $first;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 if (!($8)) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 $9 = HEAP8[$first>>0]|0;
 $10 = ($9<<24>>24)==(103);
 if ($10) {
  $11 = (($first) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(115);
  $14 = (($first) + 2|0);
  $$first = $13 ? $14 : $first;
  $global$0$off0 = $13;$t$0 = $$first;
 } else {
  $global$0$off0 = 0;$t$0 = $first;
 }
 $15 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
 $16 = ($15|0)==($t$0|0);
 if (!($16)) {
  if (!($global$0$off0)) {
   $$19 = $15;
   STACKTOP = sp;return ($$19|0);
  }
  $17 = HEAP32[$db>>2]|0;
  $18 = (($db) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)==($19|0);
  if ($20) {
   $$19 = $first;
   STACKTOP = sp;return ($$19|0);
  }
  $21 = (($19) + -24|0);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($21,0,2152,2)|0);
  $$19 = $15;
  STACKTOP = sp;return ($$19|0);
 }
 $22 = $t$0;
 $23 = (($5) - ($22))|0;
 $24 = ($23|0)>(2);
 if (!($24)) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 $25 = HEAP8[$t$0>>0]|0;
 $26 = ($25<<24>>24)==(115);
 if (!($26)) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 $27 = (($t$0) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(114);
 if (!($29)) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 $30 = (($t$0) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(78);
 if ($32) {
  $33 = (($t$0) + 3|0);
  $34 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33,$last,$db)|0);
  $35 = ($34|0)==($33|0);
  $36 = ($34|0)==($last|0);
  $or$cond = $35 | $36;
  if ($or$cond) {
   $$19 = $first;
   STACKTOP = sp;return ($$19|0);
  }
  $37 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34,$last,$db)|0);
  $38 = ($37|0)==($34|0);
  do {
   if ($38) {
    $t$1$ph = $34;
   } else {
    $39 = (($db) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$db>>2]|0;
    $42 = $40;
    $43 = $41;
    $44 = (($42) - ($43))|0;
    $45 = (($44|0) / 24)&-1;
    $46 = ($45>>>0)<(2);
    if ($46) {
     $$19 = $first;
     STACKTOP = sp;return ($$19|0);
    }
    $47 = (($40) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$47);
    $48 = HEAP32[$39>>2]|0;
    $49 = (($48) + -24|0);
    $51 = $48;
    while(1) {
     $50 = (($51) + -24|0);
     HEAP32[$39>>2] = $50;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
     $52 = HEAP32[$39>>2]|0;
     $53 = ($52|0)==($49|0);
     if ($53) {
      break;
     } else {
      $51 = $52;
     }
    }
    $54 = (($48) + -48|0);
    $55 = HEAP8[$args>>0]|0;
    $56 = $55 & 1;
    $57 = ($56<<24>>24)==(0);
    if ($57) {
     $62 = (($args) + 1|0);
     $63 = $55&255;
     $64 = $63 >>> 1;
     $65 = $62;$66 = $64;
    } else {
     $58 = (($args) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($args) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $65 = $59;$66 = $61;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($54|0),($65|0),($66|0))|0);
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     $78 = ___cxa_find_matching_catch()|0;
     $79 = tempRet0;
     if ($57) {
      $$5 = $79;$$57 = $78;
      ___resumeException($$57|0);
      // unreachable;
     }
     $80 = (($args) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     _free($81);
     $$5 = $79;$$57 = $78;
     ___resumeException($$57|0);
     // unreachable;
    }
    $69 = ($37|0)==($last|0);
    if (!($69)) {
     if ($57) {
      $t$1$ph = $37;
      break;
     }
     $82 = (($args) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     _free($83);
     $t$1$ph = $37;
     break;
    }
    $70 = HEAP32[$39>>2]|0;
    $71 = (($70) + -24|0);
    $73 = $70;
    while(1) {
     $72 = (($73) + -24|0);
     HEAP32[$39>>2] = $72;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
     $74 = HEAP32[$39>>2]|0;
     $75 = ($74|0)==($71|0);
     if ($75) {
      break;
     } else {
      $73 = $74;
     }
    }
    if ($57) {
     $$19 = $first;
     STACKTOP = sp;return ($$19|0);
    }
    $76 = (($args) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    _free($77);
    $$19 = $first;
    STACKTOP = sp;return ($$19|0);
   }
  } while(0);
  $84 = HEAP8[$t$1$ph>>0]|0;
  $85 = ($84<<24>>24)==(69);
  L62: do {
   if ($85) {
    $t$1$lcssa = $t$1$ph;
   } else {
    $86 = (($db) + 4|0);
    $87 = (($0) + 1|0);
    $88 = (($0) + 8|0);
    $89 = (($0) + 4|0);
    $90 = (($s) + 8|0);
    $t$155 = $t$1$ph;
    while(1) {
     $91 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$155,$last,$db)|0);
     $92 = ($91|0)==($t$155|0);
     $93 = ($91|0)==($last|0);
     $or$cond11 = $92 | $93;
     if ($or$cond11) {
      $$19 = $first;
      label = 152;
      break;
     }
     $94 = HEAP32[$86>>2]|0;
     $95 = HEAP32[$db>>2]|0;
     $96 = $94;
     $97 = $95;
     $98 = (($96) - ($97))|0;
     $99 = (($98|0) / 24)&-1;
     $100 = ($99>>>0)<(2);
     if ($100) {
      $$19 = $first;
      label = 152;
      break;
     }
     $101 = (($94) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s,$101);
     $102 = HEAP32[$86>>2]|0;
     $103 = (($102) + -24|0);
     $105 = $102;
     while(1) {
      $104 = (($105) + -24|0);
      HEAP32[$86>>2] = $104;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($104);
      $106 = HEAP32[$86>>2]|0;
      $107 = ($106|0)==($103|0);
      if ($107) {
       break;
      } else {
       $105 = $106;
      }
     }
     __THREW__ = 0;
     $108 = (invoke_iiiii(33,($s|0),0,(2152|0),2)|0);
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      label = 46;
      break;
     }
     ;HEAP32[$0+0>>2]=HEAP32[$108+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$108+8>>2]|0;
     ;HEAP32[$108+0>>2]=0|0;HEAP32[$108+4>>2]=0|0;HEAP32[$108+8>>2]=0|0;
     $111 = (($102) + -48|0);
     $112 = HEAP8[$0>>0]|0;
     $113 = $112 & 1;
     $114 = ($113<<24>>24)==(0);
     if ($114) {
      $117 = $112&255;
      $118 = $117 >>> 1;
      $119 = $87;$120 = $118;
     } else {
      $115 = HEAP32[$88>>2]|0;
      $116 = HEAP32[$89>>2]|0;
      $119 = $115;$120 = $116;
     }
     __THREW__ = 0;
     (invoke_iiii(32,($111|0),($119|0),($120|0))|0);
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if ($122) {
      label = 47;
      break;
     }
     if (!($114)) {
      $123 = HEAP32[$88>>2]|0;
      _free($123);
     }
     $124 = HEAP8[$s>>0]|0;
     $125 = $124 & 1;
     $126 = ($125<<24>>24)==(0);
     if (!($126)) {
      $127 = HEAP32[$90>>2]|0;
      _free($127);
     }
     $128 = HEAP8[$91>>0]|0;
     $129 = ($128<<24>>24)==(69);
     if ($129) {
      $t$1$lcssa = $91;
      break L62;
     } else {
      $t$155 = $91;
     }
    }
    if ((label|0) == 46) {
     $130 = ___cxa_find_matching_catch()|0;
     $131 = tempRet0;
     $$01 = $131;$$02 = $130;
    }
    else if ((label|0) == 47) {
     $132 = ___cxa_find_matching_catch()|0;
     $133 = tempRet0;
     if ($114) {
      $$01 = $133;$$02 = $132;
     } else {
      $134 = HEAP32[$88>>2]|0;
      _free($134);
      $$01 = $133;$$02 = $132;
     }
    }
    else if ((label|0) == 152) {
     STACKTOP = sp;return ($$19|0);
    }
    $135 = HEAP8[$s>>0]|0;
    $136 = $135 & 1;
    $137 = ($136<<24>>24)==(0);
    if ($137) {
     $$5 = $$01;$$57 = $$02;
     ___resumeException($$57|0);
     // unreachable;
    }
    $138 = HEAP32[$90>>2]|0;
    _free($138);
    $$5 = $$01;$$57 = $$02;
    ___resumeException($$57|0);
    // unreachable;
   }
  } while(0);
  $139 = (($t$1$lcssa) + 1|0);
  $140 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($139,$last,$db)|0);
  $141 = ($140|0)==($139|0);
  if ($141) {
   $142 = HEAP32[$db>>2]|0;
   $143 = (($db) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($142|0)==($144|0);
   if ($145) {
    $$19 = $first;
    STACKTOP = sp;return ($$19|0);
   }
   $146 = (($144) + -24|0);
   $148 = $144;
   while(1) {
    $147 = (($148) + -24|0);
    HEAP32[$143>>2] = $147;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($147);
    $149 = HEAP32[$143>>2]|0;
    $150 = ($149|0)==($146|0);
    if ($150) {
     $$19 = $first;
     break;
    } else {
     $148 = $149;
    }
   }
   STACKTOP = sp;return ($$19|0);
  }
  $151 = (($db) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = HEAP32[$db>>2]|0;
  $154 = $152;
  $155 = $153;
  $156 = (($154) - ($155))|0;
  $157 = (($156|0) / 24)&-1;
  $158 = ($157>>>0)<(2);
  if ($158) {
   $$19 = $first;
   STACKTOP = sp;return ($$19|0);
  }
  $159 = (($152) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s1,$159);
  $160 = HEAP32[$151>>2]|0;
  $161 = (($160) + -24|0);
  $163 = $160;
  while(1) {
   $162 = (($163) + -24|0);
   HEAP32[$151>>2] = $162;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($162);
   $164 = HEAP32[$151>>2]|0;
   $165 = ($164|0)==($161|0);
   if ($165) {
    break;
   } else {
    $163 = $164;
   }
  }
  __THREW__ = 0;
  $166 = (invoke_iiiii(33,($s1|0),0,(2152|0),2)|0);
  $167 = __THREW__; __THREW__ = 0;
  $168 = $167&1;
  do {
   if ($168) {
    $191 = ___cxa_find_matching_catch()|0;
    $192 = tempRet0;
    $$1 = $192;$$13 = $191;
   } else {
    ;HEAP32[$1+0>>2]=HEAP32[$166+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$166+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$166+8>>2]|0;
    ;HEAP32[$166+0>>2]=0|0;HEAP32[$166+4>>2]=0|0;HEAP32[$166+8>>2]=0|0;
    $169 = (($160) + -48|0);
    $170 = HEAP8[$1>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     $177 = (($1) + 1|0);
     $178 = $170&255;
     $179 = $178 >>> 1;
     $180 = $177;$181 = $179;
    } else {
     $173 = (($1) + 8|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($1) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $180 = $174;$181 = $176;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($169|0),($180|0),($181|0))|0);
    $182 = __THREW__; __THREW__ = 0;
    $183 = $182&1;
    if ($183) {
     $193 = ___cxa_find_matching_catch()|0;
     $194 = tempRet0;
     if ($172) {
      $$1 = $194;$$13 = $193;
      break;
     }
     $195 = (($1) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     _free($196);
     $$1 = $194;$$13 = $193;
     break;
    }
    if (!($172)) {
     $184 = (($1) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     _free($185);
    }
    $186 = HEAP8[$s1>>0]|0;
    $187 = $186 & 1;
    $188 = ($187<<24>>24)==(0);
    if ($188) {
     $$19 = $140;
     STACKTOP = sp;return ($$19|0);
    }
    $189 = (($s1) + 8|0);
    $190 = HEAP32[$189>>2]|0;
    _free($190);
    $$19 = $140;
    STACKTOP = sp;return ($$19|0);
   }
  } while(0);
  $197 = HEAP8[$s1>>0]|0;
  $198 = $197 & 1;
  $199 = ($198<<24>>24)==(0);
  if ($199) {
   $$5 = $$1;$$57 = $$13;
   ___resumeException($$57|0);
   // unreachable;
  }
  $200 = (($s1) + 8|0);
  $201 = HEAP32[$200>>2]|0;
  _free($201);
  $$5 = $$1;$$57 = $$13;
  ___resumeException($$57|0);
  // unreachable;
 }
 $202 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
 $203 = ($202|0)==($30|0);
 if (!($203)) {
  $204 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($202,$last,$db)|0);
  $205 = ($204|0)==($202|0);
  do {
   if ($205) {
    $t$2 = $202;
   } else {
    $206 = (($db) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = HEAP32[$db>>2]|0;
    $209 = $207;
    $210 = $208;
    $211 = (($209) - ($210))|0;
    $212 = (($211|0) / 24)&-1;
    $213 = ($212>>>0)<(2);
    if ($213) {
     $$19 = $first;
     STACKTOP = sp;return ($$19|0);
    }
    $214 = (($207) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3,$214);
    $215 = HEAP32[$206>>2]|0;
    $216 = (($215) + -24|0);
    $218 = $215;
    while(1) {
     $217 = (($218) + -24|0);
     HEAP32[$206>>2] = $217;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($217);
     $219 = HEAP32[$206>>2]|0;
     $220 = ($219|0)==($216|0);
     if ($220) {
      break;
     } else {
      $218 = $219;
     }
    }
    $221 = (($215) + -48|0);
    $222 = HEAP8[$args3>>0]|0;
    $223 = $222 & 1;
    $224 = ($223<<24>>24)==(0);
    if ($224) {
     $229 = (($args3) + 1|0);
     $230 = $222&255;
     $231 = $230 >>> 1;
     $232 = $229;$233 = $231;
    } else {
     $225 = (($args3) + 8|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (($args3) + 4|0);
     $228 = HEAP32[$227>>2]|0;
     $232 = $226;$233 = $228;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($221|0),($232|0),($233|0))|0);
    $234 = __THREW__; __THREW__ = 0;
    $235 = $234&1;
    if (!($235)) {
     if ($224) {
      $t$2 = $204;
      break;
     }
     $236 = (($args3) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     _free($237);
     $t$2 = $204;
     break;
    }
    $238 = ___cxa_find_matching_catch()|0;
    $239 = tempRet0;
    if ($224) {
     $$5 = $239;$$57 = $238;
     ___resumeException($$57|0);
     // unreachable;
    }
    $240 = (($args3) + 8|0);
    $241 = HEAP32[$240>>2]|0;
    _free($241);
    $$5 = $239;$$57 = $238;
    ___resumeException($$57|0);
    // unreachable;
   }
  } while(0);
  $242 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2,$last,$db)|0);
  $243 = ($242|0)==($t$2|0);
  if ($243) {
   $244 = HEAP32[$db>>2]|0;
   $245 = (($db) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = ($244|0)==($246|0);
   if ($247) {
    $$19 = $first;
    STACKTOP = sp;return ($$19|0);
   }
   $248 = (($246) + -24|0);
   $250 = $246;
   while(1) {
    $249 = (($250) + -24|0);
    HEAP32[$245>>2] = $249;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($249);
    $251 = HEAP32[$245>>2]|0;
    $252 = ($251|0)==($248|0);
    if ($252) {
     $$19 = $first;
     break;
    } else {
     $250 = $251;
    }
   }
   STACKTOP = sp;return ($$19|0);
  }
  $253 = (($db) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = HEAP32[$db>>2]|0;
  $256 = $254;
  $257 = $255;
  $258 = (($256) - ($257))|0;
  $259 = (($258|0) / 24)&-1;
  $260 = ($259>>>0)<(2);
  if ($260) {
   $$19 = $first;
   STACKTOP = sp;return ($$19|0);
  }
  $261 = (($254) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s4,$261);
  $262 = HEAP32[$253>>2]|0;
  $263 = (($262) + -24|0);
  $265 = $262;
  while(1) {
   $264 = (($265) + -24|0);
   HEAP32[$253>>2] = $264;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($264);
   $266 = HEAP32[$253>>2]|0;
   $267 = ($266|0)==($263|0);
   if ($267) {
    break;
   } else {
    $265 = $266;
   }
  }
  __THREW__ = 0;
  $268 = (invoke_iiiii(33,($s4|0),0,(2152|0),2)|0);
  $269 = __THREW__; __THREW__ = 0;
  $270 = $269&1;
  do {
   if ($270) {
    $293 = ___cxa_find_matching_catch()|0;
    $294 = tempRet0;
    $$2 = $294;$$24 = $293;
   } else {
    ;HEAP32[$2+0>>2]=HEAP32[$268+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$268+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$268+8>>2]|0;
    ;HEAP32[$268+0>>2]=0|0;HEAP32[$268+4>>2]=0|0;HEAP32[$268+8>>2]=0|0;
    $271 = (($262) + -48|0);
    $272 = HEAP8[$2>>0]|0;
    $273 = $272 & 1;
    $274 = ($273<<24>>24)==(0);
    if ($274) {
     $279 = (($2) + 1|0);
     $280 = $272&255;
     $281 = $280 >>> 1;
     $282 = $279;$283 = $281;
    } else {
     $275 = (($2) + 8|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = (($2) + 4|0);
     $278 = HEAP32[$277>>2]|0;
     $282 = $276;$283 = $278;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($271|0),($282|0),($283|0))|0);
    $284 = __THREW__; __THREW__ = 0;
    $285 = $284&1;
    if ($285) {
     $295 = ___cxa_find_matching_catch()|0;
     $296 = tempRet0;
     if ($274) {
      $$2 = $296;$$24 = $295;
      break;
     }
     $297 = (($2) + 8|0);
     $298 = HEAP32[$297>>2]|0;
     _free($298);
     $$2 = $296;$$24 = $295;
     break;
    }
    if (!($274)) {
     $286 = (($2) + 8|0);
     $287 = HEAP32[$286>>2]|0;
     _free($287);
    }
    $288 = HEAP8[$s4>>0]|0;
    $289 = $288 & 1;
    $290 = ($289<<24>>24)==(0);
    if ($290) {
     $$19 = $242;
     STACKTOP = sp;return ($$19|0);
    }
    $291 = (($s4) + 8|0);
    $292 = HEAP32[$291>>2]|0;
    _free($292);
    $$19 = $242;
    STACKTOP = sp;return ($$19|0);
   }
  } while(0);
  $299 = HEAP8[$s4>>0]|0;
  $300 = $299 & 1;
  $301 = ($300<<24>>24)==(0);
  if ($301) {
   $$5 = $$2;$$57 = $$24;
   ___resumeException($$57|0);
   // unreachable;
  }
  $302 = (($s4) + 8|0);
  $303 = HEAP32[$302>>2]|0;
  _free($303);
  $$5 = $$2;$$57 = $$24;
  ___resumeException($$57|0);
  // unreachable;
 }
 $304 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
 $305 = ($304|0)==($30|0);
 $306 = ($304|0)==($last|0);
 $or$cond12 = $305 | $306;
 if ($or$cond12) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 do {
  if ($global$0$off0) {
   $307 = HEAP32[$db>>2]|0;
   $308 = (($db) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = ($307|0)==($309|0);
   if ($310) {
    $$19 = $first;
    STACKTOP = sp;return ($$19|0);
   } else {
    $311 = (($309) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($311,0,2152,2)|0);
    break;
   }
  }
 } while(0);
 $312 = HEAP8[$304>>0]|0;
 $313 = ($312<<24>>24)==(69);
 L205: do {
  if ($313) {
   $t$3$lcssa = $304;
  } else {
   $314 = (($db) + 4|0);
   $315 = (($3) + 1|0);
   $316 = (($3) + 8|0);
   $317 = (($3) + 4|0);
   $318 = (($s5) + 8|0);
   $t$365 = $304;
   while(1) {
    $319 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$365,$last,$db)|0);
    $320 = ($319|0)==($t$365|0);
    $321 = ($319|0)==($last|0);
    $or$cond13 = $320 | $321;
    if ($or$cond13) {
     $$19 = $first;
     label = 152;
     break;
    }
    $322 = HEAP32[$314>>2]|0;
    $323 = HEAP32[$db>>2]|0;
    $324 = $322;
    $325 = $323;
    $326 = (($324) - ($325))|0;
    $327 = (($326|0) / 24)&-1;
    $328 = ($327>>>0)<(2);
    if ($328) {
     $$19 = $first;
     label = 152;
     break;
    }
    $329 = (($322) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s5,$329);
    $330 = HEAP32[$314>>2]|0;
    $331 = (($330) + -24|0);
    $333 = $330;
    while(1) {
     $332 = (($333) + -24|0);
     HEAP32[$314>>2] = $332;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($332);
     $334 = HEAP32[$314>>2]|0;
     $335 = ($334|0)==($331|0);
     if ($335) {
      break;
     } else {
      $333 = $334;
     }
    }
    __THREW__ = 0;
    $336 = (invoke_iiiii(33,($s5|0),0,(2152|0),2)|0);
    $337 = __THREW__; __THREW__ = 0;
    $338 = $337&1;
    if ($338) {
     label = 126;
     break;
    }
    ;HEAP32[$3+0>>2]=HEAP32[$336+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$336+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$336+8>>2]|0;
    ;HEAP32[$336+0>>2]=0|0;HEAP32[$336+4>>2]=0|0;HEAP32[$336+8>>2]=0|0;
    $339 = (($330) + -48|0);
    $340 = HEAP8[$3>>0]|0;
    $341 = $340 & 1;
    $342 = ($341<<24>>24)==(0);
    if ($342) {
     $345 = $340&255;
     $346 = $345 >>> 1;
     $347 = $315;$348 = $346;
    } else {
     $343 = HEAP32[$316>>2]|0;
     $344 = HEAP32[$317>>2]|0;
     $347 = $343;$348 = $344;
    }
    __THREW__ = 0;
    (invoke_iiii(32,($339|0),($347|0),($348|0))|0);
    $349 = __THREW__; __THREW__ = 0;
    $350 = $349&1;
    if ($350) {
     label = 127;
     break;
    }
    if (!($342)) {
     $351 = HEAP32[$316>>2]|0;
     _free($351);
    }
    $352 = HEAP8[$s5>>0]|0;
    $353 = $352 & 1;
    $354 = ($353<<24>>24)==(0);
    if (!($354)) {
     $355 = HEAP32[$318>>2]|0;
     _free($355);
    }
    $356 = HEAP8[$319>>0]|0;
    $357 = ($356<<24>>24)==(69);
    if ($357) {
     $t$3$lcssa = $319;
     break L205;
    } else {
     $t$365 = $319;
    }
   }
   if ((label|0) == 126) {
    $358 = ___cxa_find_matching_catch()|0;
    $359 = tempRet0;
    $$3 = $359;$$35 = $358;
   }
   else if ((label|0) == 127) {
    $360 = ___cxa_find_matching_catch()|0;
    $361 = tempRet0;
    if ($342) {
     $$3 = $361;$$35 = $360;
    } else {
     $362 = HEAP32[$316>>2]|0;
     _free($362);
     $$3 = $361;$$35 = $360;
    }
   }
   else if ((label|0) == 152) {
    STACKTOP = sp;return ($$19|0);
   }
   $363 = HEAP8[$s5>>0]|0;
   $364 = $363 & 1;
   $365 = ($364<<24>>24)==(0);
   if ($365) {
    $$5 = $$3;$$57 = $$35;
    ___resumeException($$57|0);
    // unreachable;
   }
   $366 = HEAP32[$318>>2]|0;
   _free($366);
   $$5 = $$3;$$57 = $$35;
   ___resumeException($$57|0);
   // unreachable;
  }
 } while(0);
 $367 = (($t$3$lcssa) + 1|0);
 $368 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($367,$last,$db)|0);
 $369 = ($368|0)==($367|0);
 if ($369) {
  $370 = HEAP32[$db>>2]|0;
  $371 = (($db) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = ($370|0)==($372|0);
  if ($373) {
   $$19 = $first;
   STACKTOP = sp;return ($$19|0);
  }
  $374 = (($372) + -24|0);
  $376 = $372;
  while(1) {
   $375 = (($376) + -24|0);
   HEAP32[$371>>2] = $375;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($375);
   $377 = HEAP32[$371>>2]|0;
   $378 = ($377|0)==($374|0);
   if ($378) {
    $$19 = $first;
    break;
   } else {
    $376 = $377;
   }
  }
  STACKTOP = sp;return ($$19|0);
 }
 $379 = (($db) + 4|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = HEAP32[$db>>2]|0;
 $382 = $380;
 $383 = $381;
 $384 = (($382) - ($383))|0;
 $385 = (($384|0) / 24)&-1;
 $386 = ($385>>>0)<(2);
 if ($386) {
  $$19 = $first;
  STACKTOP = sp;return ($$19|0);
 }
 $387 = (($380) + -24|0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s6,$387);
 $388 = HEAP32[$379>>2]|0;
 $389 = (($388) + -24|0);
 $391 = $388;
 while(1) {
  $390 = (($391) + -24|0);
  HEAP32[$379>>2] = $390;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($390);
  $392 = HEAP32[$379>>2]|0;
  $393 = ($392|0)==($389|0);
  if ($393) {
   break;
  } else {
   $391 = $392;
  }
 }
 __THREW__ = 0;
 $394 = (invoke_iiiii(33,($s6|0),0,(2152|0),2)|0);
 $395 = __THREW__; __THREW__ = 0;
 $396 = $395&1;
 do {
  if ($396) {
   $419 = ___cxa_find_matching_catch()|0;
   $420 = tempRet0;
   $$4 = $420;$$46 = $419;
  } else {
   ;HEAP32[$4+0>>2]=HEAP32[$394+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$394+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$394+8>>2]|0;
   ;HEAP32[$394+0>>2]=0|0;HEAP32[$394+4>>2]=0|0;HEAP32[$394+8>>2]=0|0;
   $397 = (($388) + -48|0);
   $398 = HEAP8[$4>>0]|0;
   $399 = $398 & 1;
   $400 = ($399<<24>>24)==(0);
   if ($400) {
    $405 = (($4) + 1|0);
    $406 = $398&255;
    $407 = $406 >>> 1;
    $408 = $405;$409 = $407;
   } else {
    $401 = (($4) + 8|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = (($4) + 4|0);
    $404 = HEAP32[$403>>2]|0;
    $408 = $402;$409 = $404;
   }
   __THREW__ = 0;
   (invoke_iiii(32,($397|0),($408|0),($409|0))|0);
   $410 = __THREW__; __THREW__ = 0;
   $411 = $410&1;
   if ($411) {
    $421 = ___cxa_find_matching_catch()|0;
    $422 = tempRet0;
    if ($400) {
     $$4 = $422;$$46 = $421;
     break;
    }
    $423 = (($4) + 8|0);
    $424 = HEAP32[$423>>2]|0;
    _free($424);
    $$4 = $422;$$46 = $421;
    break;
   }
   if (!($400)) {
    $412 = (($4) + 8|0);
    $413 = HEAP32[$412>>2]|0;
    _free($413);
   }
   $414 = HEAP8[$s6>>0]|0;
   $415 = $414 & 1;
   $416 = ($415<<24>>24)==(0);
   if ($416) {
    $$19 = $368;
    STACKTOP = sp;return ($$19|0);
   }
   $417 = (($s6) + 8|0);
   $418 = HEAP32[$417>>2]|0;
   _free($418);
   $$19 = $368;
   STACKTOP = sp;return ($$19|0);
  }
 } while(0);
 $425 = HEAP8[$s6>>0]|0;
 $426 = $425 & 1;
 $427 = ($426<<24>>24)==(0);
 if ($427) {
  $$5 = $$4;$$57 = $$46;
  ___resumeException($$57|0);
  // unreachable;
 }
 $428 = (($s6) + 8|0);
 $429 = HEAP32[$428>>2]|0;
 _free($429);
 $$5 = $$4;$$57 = $$46;
 ___resumeException($$57|0);
 // unreachable;
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$first>>0]|0;
 $2 = $1 << 24 >> 24;
 if ((($2|0) == 74)) {
  $10 = (($first) + 1|0);
  $11 = ($10|0)==($last|0);
  if ($11) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  } else {
   $t$0 = $10;
  }
  while(1) {
   $12 = HEAP8[$t$0>>0]|0;
   $13 = ($12<<24>>24)==(69);
   if ($13) {
    break;
   }
   $14 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
   $15 = ($14|0)==($t$0|0);
   if ($15) {
    $$0 = $first;
    label = 15;
    break;
   } else {
    $t$0 = $14;
   }
  }
  if ((label|0) == 15) {
   STACKTOP = sp;return ($$0|0);
  }
  $16 = (($t$0) + 1|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 76)) {
  $17 = (($first) + 1|0);
  $18 = ($17|0)==($last|0);
  if (!($18)) {
   $19 = HEAP8[$17>>0]|0;
   $20 = ($19<<24>>24)==(90);
   if ($20) {
    $21 = (($first) + 2|0);
    $22 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21,$last,$db)|0);
    $23 = ($22|0)==($21|0);
    $24 = ($22|0)==($last|0);
    $or$cond2 = $23 | $24;
    if ($or$cond2) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    } else {
     $25 = HEAP8[$22>>0]|0;
     $26 = ($25<<24>>24)==(69);
     $27 = (($22) + 1|0);
     $$first3 = $26 ? $27 : $first;
     STACKTOP = sp;return ($$first3|0);
    }
   }
  }
  $28 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 88)) {
  $3 = (($first) + 1|0);
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3,$last,$db)|0);
  $5 = ($4|0)==($3|0);
  $6 = ($4|0)==($last|0);
  $or$cond = $5 | $6;
  if ($or$cond) {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  $7 = HEAP8[$4>>0]|0;
  $8 = ($7<<24>>24)==(69);
  $9 = (($4) + 1|0);
  $$first = $8 ? $9 : $first;
  $$0 = $$first;
  STACKTOP = sp;return ($$0|0);
 } else {
  $29 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $$02$i = 0, $$02$i$i = 0, $$02$i13 = 0, $$02$i3 = 0, $$02$i8 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$lcssa$i$i = 0, $__p$0$ph$i$i = 0, $__p$01$i$i = 0;
 var $c$0$ph = 0, $l$03$i = 0, $l$03$i12 = 0, $l$03$i2 = 0, $l$03$i7 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond23 = 0, $or$cond24 = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$1 = 0, $pe$1$pn = 0, $r$04$i = 0, $r$04$i1 = 0, $r$04$i11 = 0, $r$04$i6 = 0, $scevgep4$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($s) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result,$s);
  STACKTOP = sp;return;
 }
 if ($2) {
  $13 = $0&255;
  $14 = $13 >>> 1;
  $15 = (($s) + 1|0);
  $147 = $15;$17 = $14;
 } else {
  $9 = (($s) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($s) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $147 = $12;$17 = $10;
 }
 $16 = ($17>>>0)>(11);
 $18 = $16 ? 11 : $17;
 $19 = ($18|0)==(0);
 L13: do {
  if ($19) {
   label = 12;
  } else {
   $$02$i = $18;$l$03$i = $147;$r$04$i = 3160;
   while(1) {
    $20 = HEAP8[$l$03$i>>0]|0;
    $21 = HEAP8[$r$04$i>>0]|0;
    $22 = ($20<<24>>24)==($21<<24>>24);
    if (!($22)) {
     break L13;
    }
    $23 = (($$02$i) + -1)|0;
    $24 = (($l$03$i) + 1|0);
    $25 = (($r$04$i) + 1|0);
    $26 = ($23|0)==(0);
    if ($26) {
     label = 12;
     break;
    } else {
     $$02$i = $23;$l$03$i = $24;$r$04$i = $25;
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $27 = ($17>>>0)>(10);
  $28 = $16 ^ 1;
  $or$cond = $27 & $28;
  if ($or$cond) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,3176,70);
   $29 = (_malloc(16)|0);
   $30 = (($agg$result) + 8|0);
   HEAP32[$30>>2] = $29;
   HEAP32[$agg$result>>2] = 17;
   $31 = (($agg$result) + 4|0);
   HEAP32[$31>>2] = 12;
   dest=$29+0|0; src=3248+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $32 = (($29) + 12|0);
   HEAP8[$32>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 if ($2) {
  $37 = $0&255;
  $38 = $37 >>> 1;
  $39 = (($s) + 1|0);
  $148 = $39;$41 = $38;
 } else {
  $33 = (($s) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($s) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $148 = $36;$41 = $34;
 }
 $40 = ($41>>>0)>(12);
 $42 = $40 ? 12 : $41;
 $43 = ($42|0)==(0);
 L26: do {
  if ($43) {
   label = 20;
  } else {
   $$02$i3 = $42;$l$03$i2 = $148;$r$04$i1 = 3264;
   while(1) {
    $44 = HEAP8[$l$03$i2>>0]|0;
    $45 = HEAP8[$r$04$i1>>0]|0;
    $46 = ($44<<24>>24)==($45<<24>>24);
    if (!($46)) {
     break L26;
    }
    $47 = (($$02$i3) + -1)|0;
    $48 = (($l$03$i2) + 1|0);
    $49 = (($r$04$i1) + 1|0);
    $50 = ($47|0)==(0);
    if ($50) {
     label = 20;
     break;
    } else {
     $$02$i3 = $47;$l$03$i2 = $48;$r$04$i1 = $49;
    }
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $51 = ($41>>>0)>(11);
  $52 = $40 ^ 1;
  $or$cond22 = $51 & $52;
  if ($or$cond22) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,3280,49);
   $53 = (_malloc(16)|0);
   $54 = (($agg$result) + 8|0);
   HEAP32[$54>>2] = $53;
   HEAP32[$agg$result>>2] = 17;
   $55 = (($agg$result) + 4|0);
   HEAP32[$55>>2] = 13;
   dest=$53+0|0; src=3336+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $56 = (($53) + 13|0);
   HEAP8[$56>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 if ($2) {
  $61 = $0&255;
  $62 = $61 >>> 1;
  $63 = (($s) + 1|0);
  $149 = $63;$65 = $62;
 } else {
  $57 = (($s) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($s) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $149 = $60;$65 = $58;
 }
 $64 = ($65>>>0)>(12);
 $66 = $64 ? 12 : $65;
 $67 = ($66|0)==(0);
 L39: do {
  if ($67) {
   label = 28;
  } else {
   $$02$i8 = $66;$l$03$i7 = $149;$r$04$i6 = 3352;
   while(1) {
    $68 = HEAP8[$l$03$i7>>0]|0;
    $69 = HEAP8[$r$04$i6>>0]|0;
    $70 = ($68<<24>>24)==($69<<24>>24);
    if (!($70)) {
     break L39;
    }
    $71 = (($$02$i8) + -1)|0;
    $72 = (($l$03$i7) + 1|0);
    $73 = (($r$04$i6) + 1|0);
    $74 = ($71|0)==(0);
    if ($74) {
     label = 28;
     break;
    } else {
     $$02$i8 = $71;$l$03$i7 = $72;$r$04$i6 = $73;
    }
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $75 = ($65>>>0)>(11);
  $76 = $64 ^ 1;
  $or$cond23 = $75 & $76;
  if ($or$cond23) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,3368,49);
   $77 = (_malloc(16)|0);
   $78 = (($agg$result) + 8|0);
   HEAP32[$78>>2] = $77;
   HEAP32[$agg$result>>2] = 17;
   $79 = (($agg$result) + 4|0);
   HEAP32[$79>>2] = 13;
   dest=$77+0|0; src=3424+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $80 = (($77) + 13|0);
   HEAP8[$80>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 if ($2) {
  $85 = $0&255;
  $86 = $85 >>> 1;
  $87 = (($s) + 1|0);
  $150 = $87;$89 = $86;
 } else {
  $81 = (($s) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($s) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $150 = $84;$89 = $82;
 }
 $88 = ($89>>>0)>(13);
 $90 = $88 ? 13 : $89;
 $91 = ($90|0)==(0);
 L52: do {
  if ($91) {
   label = 36;
  } else {
   $$02$i13 = $90;$l$03$i12 = $150;$r$04$i11 = 3440;
   while(1) {
    $92 = HEAP8[$l$03$i12>>0]|0;
    $93 = HEAP8[$r$04$i11>>0]|0;
    $94 = ($92<<24>>24)==($93<<24>>24);
    if (!($94)) {
     break L52;
    }
    $95 = (($$02$i13) + -1)|0;
    $96 = (($l$03$i12) + 1|0);
    $97 = (($r$04$i11) + 1|0);
    $98 = ($95|0)==(0);
    if ($98) {
     label = 36;
     break;
    } else {
     $$02$i13 = $95;$l$03$i12 = $96;$r$04$i11 = $97;
    }
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $99 = ($89>>>0)>(12);
  $100 = $88 ^ 1;
  $or$cond24 = $99 & $100;
  if ($or$cond24) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,3456,50);
   $101 = (_malloc(16)|0);
   $102 = (($agg$result) + 8|0);
   HEAP32[$102>>2] = $101;
   HEAP32[$agg$result>>2] = 17;
   $103 = (($agg$result) + 4|0);
   HEAP32[$103>>2] = 14;
   dest=$101+0|0; src=3512+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $104 = (($101) + 14|0);
   HEAP8[$104>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 if ($2) {
  $109 = (($s) + 1|0);
  $110 = $0&255;
  $111 = $110 >>> 1;
  $113 = $109;$114 = $111;
 } else {
  $105 = (($s) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($s) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $113 = $106;$114 = $108;
 }
 $112 = (($113) + ($114)|0);
 $$sum = (($114) + -1)|0;
 $115 = (($113) + ($$sum)|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = ($116<<24>>24)==(62);
 L65: do {
  if ($117) {
   $c$0$ph = 1;$pe$0$ph = $112;
   L66: while(1) {
    $pe$0 = $pe$0$ph;
    while(1) {
     $118 = (($pe$0) + -1|0);
     $119 = ($118|0)==($113|0);
     if ($119) {
      break L66;
     }
     $120 = (($pe$0) + -2|0);
     $121 = HEAP8[$120>>0]|0;
     if ((($121<<24>>24) == 62)) {
      label = 47;
      break;
     } else if ((($121<<24>>24) == 60)) {
      label = 46;
      break;
     } else {
      $pe$0 = $118;
     }
    }
    if ((label|0) == 46) {
     label = 0;
     $122 = (($c$0$ph) + -1)|0;
     $123 = ($122|0)==(0);
     if ($123) {
      $pe$1 = $120;
      break L65;
     } else {
      $c$0$ph = $122;$pe$0$ph = $118;
      continue;
     }
    }
    else if ((label|0) == 47) {
     label = 0;
     $124 = (($c$0$ph) + 1)|0;
     $c$0$ph = $124;$pe$0$ph = $118;
     continue;
    }
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   STACKTOP = sp;return;
  } else {
   $pe$1 = $112;
  }
 } while(0);
 $pe$1$pn = $pe$1;
 while(1) {
  $p0$0 = (($pe$1$pn) + -1|0);
  $125 = ($p0$0|0)==($113|0);
  if ($125) {
   $p0$1 = $113;
   break;
  }
  $126 = HEAP8[$p0$0>>0]|0;
  $127 = ($126<<24>>24)==(58);
  if ($127) {
   $p0$1 = $pe$1$pn;
   break;
  } else {
   $pe$1$pn = $p0$0;
  }
 }
 $128 = $p0$1;
 $129 = $pe$1;
 $130 = (($129) - ($128))|0;
 $131 = ($130>>>0)>(4294967279);
 if ($131) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $132 = ($130>>>0)<(11);
 if ($132) {
  $133 = $130 << 1;
  $134 = $133&255;
  HEAP8[$agg$result>>0] = $134;
  $135 = (($agg$result) + 1|0);
  $__p$0$ph$i$i = $135;
 } else {
  $136 = (($130) + 16)|0;
  $137 = $136 & -16;
  $138 = (_malloc($137)|0);
  $139 = (($agg$result) + 8|0);
  HEAP32[$139>>2] = $138;
  $140 = $137 | 1;
  HEAP32[$agg$result>>2] = $140;
  $141 = (($agg$result) + 4|0);
  HEAP32[$141>>2] = $130;
  $__p$0$ph$i$i = $138;
 }
 $142 = ($p0$1|0)==($pe$1|0);
 if ($142) {
  $__p$0$lcssa$i$i = $__p$0$ph$i$i;
 } else {
  $$02$i$i = $p0$1;$__p$01$i$i = $__p$0$ph$i$i;
  while(1) {
   $143 = HEAP8[$$02$i$i>>0]|0;
   HEAP8[$__p$01$i$i>>0] = $143;
   $144 = (($$02$i$i) + 1|0);
   $145 = (($__p$01$i$i) + 1|0);
   $146 = ($144|0)==($pe$1|0);
   if ($146) {
    break;
   } else {
    $$02$i$i = $144;$__p$01$i$i = $145;
   }
  }
  $scevgep4$i$i = (($__p$0$ph$i$i) + ($130)|0);
  $__p$0$lcssa$i$i = $scevgep4$i$i;
 }
 HEAP8[$__p$0$lcssa$i$i>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return;
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i106 = 0, $$0$i$i$i115 = 0, $$0$i$i$i124 = 0, $$0$i$i$i133 = 0, $$0$i$i$i142 = 0, $$0$i$i$i151 = 0, $$0$i$i$i160 = 0, $$0$i$i$i169 = 0, $$0$i$i$i17 = 0, $$0$i$i$i177 = 0, $$0$i$i$i186 = 0, $$0$i$i$i195 = 0, $$0$i$i$i204 = 0, $$0$i$i$i213 = 0, $$0$i$i$i222 = 0, $$0$i$i$i231 = 0, $$0$i$i$i239 = 0, $$0$i$i$i248 = 0;
 var $$0$i$i$i257 = 0, $$0$i$i$i26 = 0, $$0$i$i$i266 = 0, $$0$i$i$i274 = 0, $$0$i$i$i283 = 0, $$0$i$i$i292 = 0, $$0$i$i$i301 = 0, $$0$i$i$i309 = 0, $$0$i$i$i318 = 0, $$0$i$i$i327 = 0, $$0$i$i$i336 = 0, $$0$i$i$i345 = 0, $$0$i$i$i35 = 0, $$0$i$i$i354 = 0, $$0$i$i$i363 = 0, $$0$i$i$i372 = 0, $$0$i$i$i381 = 0, $$0$i$i$i390 = 0, $$0$i$i$i398 = 0, $$0$i$i$i44 = 0;
 var $$0$i$i$i53 = 0, $$0$i$i$i61 = 0, $$0$i$i$i70 = 0, $$0$i$i$i79 = 0, $$0$i$i$i8 = 0, $$0$i$i$i88 = 0, $$0$i$i$i97 = 0, $$02 = 0, $$03 = 0, $$pre$i = 0, $$pre$i104 = 0, $$pre$i113 = 0, $$pre$i122 = 0, $$pre$i131 = 0, $$pre$i140 = 0, $$pre$i149 = 0, $$pre$i15 = 0, $$pre$i158 = 0, $$pre$i167 = 0, $$pre$i175 = 0;
 var $$pre$i184 = 0, $$pre$i193 = 0, $$pre$i202 = 0, $$pre$i211 = 0, $$pre$i220 = 0, $$pre$i229 = 0, $$pre$i237 = 0, $$pre$i24 = 0, $$pre$i246 = 0, $$pre$i255 = 0, $$pre$i264 = 0, $$pre$i272 = 0, $$pre$i281 = 0, $$pre$i290 = 0, $$pre$i299 = 0, $$pre$i307 = 0, $$pre$i316 = 0, $$pre$i325 = 0, $$pre$i33 = 0, $$pre$i334 = 0;
 var $$pre$i343 = 0, $$pre$i352 = 0, $$pre$i361 = 0, $$pre$i370 = 0, $$pre$i379 = 0, $$pre$i388 = 0, $$pre$i396 = 0, $$pre$i42 = 0, $$pre$i51 = 0, $$pre$i59 = 0, $$pre$i6 = 0, $$pre$i68 = 0, $$pre$i77 = 0, $$pre$i86 = 0, $$pre$i95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0;
 var $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0;
 var $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0;
 var $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0;
 var $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0;
 var $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0;
 var $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0;
 var $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0;
 var $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0;
 var $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0;
 var $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0;
 var $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0;
 var $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0;
 var $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0;
 var $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0;
 var $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0;
 var $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0;
 var $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0;
 var $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0;
 var $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0;
 var $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0;
 var $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0;
 var $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0;
 var $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0;
 var $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0;
 var $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0;
 var $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0;
 var $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0;
 var $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0;
 var $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0;
 var $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0;
 var $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0;
 var $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0;
 var $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0;
 var $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0;
 var $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0;
 var $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__v$i$i = 0, $__v$i$i103 = 0, $__v$i$i112 = 0, $__v$i$i121 = 0, $__v$i$i130 = 0, $__v$i$i139 = 0, $__v$i$i14 = 0, $__v$i$i148 = 0;
 var $__v$i$i157 = 0, $__v$i$i166 = 0, $__v$i$i174 = 0, $__v$i$i183 = 0, $__v$i$i192 = 0, $__v$i$i201 = 0, $__v$i$i210 = 0, $__v$i$i219 = 0, $__v$i$i228 = 0, $__v$i$i23 = 0, $__v$i$i236 = 0, $__v$i$i245 = 0, $__v$i$i254 = 0, $__v$i$i263 = 0, $__v$i$i271 = 0, $__v$i$i280 = 0, $__v$i$i289 = 0, $__v$i$i298 = 0, $__v$i$i306 = 0, $__v$i$i315 = 0;
 var $__v$i$i32 = 0, $__v$i$i324 = 0, $__v$i$i333 = 0, $__v$i$i342 = 0, $__v$i$i351 = 0, $__v$i$i360 = 0, $__v$i$i369 = 0, $__v$i$i378 = 0, $__v$i$i387 = 0, $__v$i$i395 = 0, $__v$i$i41 = 0, $__v$i$i5 = 0, $__v$i$i50 = 0, $__v$i$i58 = 0, $__v$i$i67 = 0, $__v$i$i76 = 0, $__v$i$i85 = 0, $__v$i$i94 = 0, $isdigit = 0, $isdigittmp = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i395 = sp + 940|0;
 $__v$i$i387 = sp + 920|0;
 $__v$i$i378 = sp + 900|0;
 $__v$i$i369 = sp + 880|0;
 $__v$i$i360 = sp + 1892|0;
 $__v$i$i351 = sp + 1932|0;
 $__v$i$i342 = sp + 1972|0;
 $__v$i$i333 = sp + 48|0;
 $__v$i$i324 = sp + 168|0;
 $__v$i$i315 = sp + 188|0;
 $__v$i$i306 = sp + 208|0;
 $__v$i$i298 = sp + 228|0;
 $__v$i$i289 = sp + 248|0;
 $__v$i$i280 = sp + 268|0;
 $__v$i$i271 = sp + 288|0;
 $__v$i$i263 = sp + 308|0;
 $__v$i$i254 = sp + 328|0;
 $__v$i$i245 = sp + 348|0;
 $__v$i$i236 = sp + 368|0;
 $__v$i$i228 = sp + 388|0;
 $__v$i$i219 = sp + 408|0;
 $__v$i$i210 = sp + 428|0;
 $__v$i$i201 = sp + 448|0;
 $__v$i$i192 = sp + 468|0;
 $__v$i$i183 = sp + 488|0;
 $__v$i$i174 = sp + 508|0;
 $__v$i$i166 = sp + 528|0;
 $__v$i$i157 = sp + 548|0;
 $__v$i$i148 = sp + 568|0;
 $__v$i$i139 = sp + 588|0;
 $__v$i$i130 = sp + 608|0;
 $__v$i$i121 = sp + 628|0;
 $__v$i$i112 = sp + 648|0;
 $__v$i$i103 = sp + 668|0;
 $__v$i$i94 = sp + 688|0;
 $__v$i$i85 = sp + 708|0;
 $__v$i$i76 = sp + 728|0;
 $__v$i$i67 = sp + 748|0;
 $__v$i$i58 = sp + 768|0;
 $__v$i$i50 = sp + 788|0;
 $__v$i$i41 = sp + 1776|0;
 $__v$i$i32 = sp + 1824|0;
 $__v$i$i23 = sp + 1872|0;
 $__v$i$i14 = sp + 1912|0;
 $__v$i$i5 = sp + 1952|0;
 $__v$i$i = sp + 1992|0;
 $0 = sp + 2016|0;
 $1 = sp + 960|0;
 $2 = sp + 984|0;
 $3 = sp + 1008|0;
 $4 = sp + 1032|0;
 $5 = sp + 1056|0;
 $6 = sp + 1080|0;
 $7 = sp + 1104|0;
 $8 = sp + 1128|0;
 $9 = sp + 1152|0;
 $10 = sp + 1176|0;
 $11 = sp + 1200|0;
 $12 = sp + 1224|0;
 $13 = sp + 1248|0;
 $14 = sp + 1272|0;
 $15 = sp + 1296|0;
 $16 = sp + 1320|0;
 $17 = sp + 1344|0;
 $18 = sp + 1368|0;
 $19 = sp + 1392|0;
 $20 = sp + 1416|0;
 $21 = sp + 1440|0;
 $22 = sp + 1464|0;
 $23 = sp + 1488|0;
 $24 = sp + 1512|0;
 $25 = sp + 1536|0;
 $26 = sp + 1560|0;
 $27 = sp + 1584|0;
 $28 = sp + 1608|0;
 $29 = sp + 1632|0;
 $30 = sp + 1656|0;
 $31 = sp + 1680|0;
 $32 = sp + 1704|0;
 $33 = sp + 1728|0;
 $34 = sp + 144|0;
 $35 = sp + 120|0;
 $36 = sp + 1752|0;
 $37 = sp + 808|0;
 $38 = sp;
 $39 = sp + 96|0;
 $40 = sp + 832|0;
 $41 = sp + 1800|0;
 $42 = sp + 24|0;
 $43 = sp + 72|0;
 $44 = sp + 856|0;
 $45 = sp + 1848|0;
 $46 = $last;
 $47 = $first;
 $48 = (($46) - ($47))|0;
 $49 = ($48|0)>(1);
 if (!($49)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = HEAP8[$first>>0]|0;
 $51 = $50 << 24 >> 24;
 do {
  switch ($51|0) {
  case 108:  {
   $751 = (($first) + 1|0);
   $752 = HEAP8[$751>>0]|0;
   $753 = $752 << 24 >> 24;
   switch ($753|0) {
   case 101:  {
    HEAP8[$18>>0] = 20;
    $754 = (($18) + 1|0);
    dest=$754+0|0; src=2728+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $755 = (($18) + 11|0);
    HEAP8[$755>>0] = 0;
    $756 = (($18) + 12|0);
    ;HEAP32[$756+0>>2]=0|0;HEAP32[$756+4>>2]=0|0;HEAP32[$756+8>>2]=0|0;
    $757 = (($db) + 4|0);
    $758 = HEAP32[$757>>2]|0;
    $759 = (($db) + 8|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = ($758>>>0)<($760>>>0);
    if ($761) {
     $762 = ($758|0)==(0|0);
     if ($762) {
      $765 = 0;
     } else {
      ;HEAP32[$758+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$758+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$758+8>>2]=HEAP32[$18+8>>2]|0;
      ;HEAP32[$18+0>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $763 = (($758) + 12|0);
      ;HEAP32[$763+0>>2]=HEAP32[$756+0>>2]|0;HEAP32[$763+4>>2]=HEAP32[$756+4>>2]|0;HEAP32[$763+8>>2]=HEAP32[$756+8>>2]|0;
      ;HEAP32[$756+0>>2]=0|0;HEAP32[$756+4>>2]=0|0;HEAP32[$756+8>>2]=0|0;
      $$pre$i158 = HEAP32[$757>>2]|0;
      $765 = $$pre$i158;
     }
     $764 = (($765) + 24|0);
     HEAP32[$757>>2] = $764;
    } else {
     $766 = (($db) + 12|0);
     $767 = HEAP32[$db>>2]|0;
     $768 = $758;
     $769 = $767;
     $770 = (($768) - ($769))|0;
     $771 = (($770|0) / 24)&-1;
     $772 = (($771) + 1)|0;
     $773 = ($772|0)<(0);
     if ($773) {
      __THREW__ = 0;
      invoke_v(41);
      $774 = __THREW__; __THREW__ = 0;
      $775 = $774&1;
      if (!($775)) {
       // unreachable;
      }
      $789 = ___cxa_find_matching_catch()|0;
      $790 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $$02 = $789;$$03 = $790;
      ___resumeException($$02|0);
      // unreachable;
     }
     $776 = $760;
     $777 = (($776) - ($769))|0;
     $778 = (($777|0) / 24)&-1;
     $779 = ($778>>>0)<(1073741823);
     if ($779) {
      $780 = $778 << 1;
      $781 = ($780>>>0)<($772>>>0);
      $782 = $781 ? $772 : $780;
      $$0$i$i$i160 = $782;
     } else {
      $$0$i$i$i160 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i157,$$0$i$i$i160,$771,$766);
     $783 = (($__v$i$i157) + 8|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = ($784|0)==(0|0);
     if (!($785)) {
      ;HEAP32[$784+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$784+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$784+8>>2]=HEAP32[$18+8>>2]|0;
      ;HEAP32[$18+0>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $786 = (($784) + 12|0);
      ;HEAP32[$786+0>>2]=HEAP32[$756+0>>2]|0;HEAP32[$786+4>>2]=HEAP32[$756+4>>2]|0;HEAP32[$786+8>>2]=HEAP32[$756+8>>2]|0;
      ;HEAP32[$756+0>>2]=0|0;HEAP32[$756+4>>2]=0|0;HEAP32[$756+8>>2]=0|0;
     }
     $787 = (($784) + 24|0);
     HEAP32[$783>>2] = $787;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i157);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i157);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
    $788 = (($first) + 2|0);
    $$0 = $788;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 105:  {
    $791 = (($first) + 2|0);
    $792 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($791,$last,$db)|0);
    $793 = ($792|0)==($791|0);
    if ($793) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $794 = HEAP32[$db>>2]|0;
    $795 = (($db) + 4|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = ($794|0)==($796|0);
    if ($797) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $798 = (($796) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($798,0,2744,11)|0);
    $$0 = $792;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 115:  {
    HEAP8[$19>>0] = 20;
    $799 = (($19) + 1|0);
    dest=$799+0|0; src=2760+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $800 = (($19) + 11|0);
    HEAP8[$800>>0] = 0;
    $801 = (($19) + 12|0);
    ;HEAP32[$801+0>>2]=0|0;HEAP32[$801+4>>2]=0|0;HEAP32[$801+8>>2]=0|0;
    $802 = (($db) + 4|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (($db) + 8|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = ($803>>>0)<($805>>>0);
    if ($806) {
     $807 = ($803|0)==(0|0);
     if ($807) {
      $810 = 0;
     } else {
      ;HEAP32[$803+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$803+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$803+8>>2]=HEAP32[$19+8>>2]|0;
      ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
      $808 = (($803) + 12|0);
      ;HEAP32[$808+0>>2]=HEAP32[$801+0>>2]|0;HEAP32[$808+4>>2]=HEAP32[$801+4>>2]|0;HEAP32[$808+8>>2]=HEAP32[$801+8>>2]|0;
      ;HEAP32[$801+0>>2]=0|0;HEAP32[$801+4>>2]=0|0;HEAP32[$801+8>>2]=0|0;
      $$pre$i167 = HEAP32[$802>>2]|0;
      $810 = $$pre$i167;
     }
     $809 = (($810) + 24|0);
     HEAP32[$802>>2] = $809;
    } else {
     $811 = (($db) + 12|0);
     $812 = HEAP32[$db>>2]|0;
     $813 = $803;
     $814 = $812;
     $815 = (($813) - ($814))|0;
     $816 = (($815|0) / 24)&-1;
     $817 = (($816) + 1)|0;
     $818 = ($817|0)<(0);
     if ($818) {
      __THREW__ = 0;
      invoke_v(41);
      $819 = __THREW__; __THREW__ = 0;
      $820 = $819&1;
      if (!($820)) {
       // unreachable;
      }
      $834 = ___cxa_find_matching_catch()|0;
      $835 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $$02 = $834;$$03 = $835;
      ___resumeException($$02|0);
      // unreachable;
     }
     $821 = $805;
     $822 = (($821) - ($814))|0;
     $823 = (($822|0) / 24)&-1;
     $824 = ($823>>>0)<(1073741823);
     if ($824) {
      $825 = $823 << 1;
      $826 = ($825>>>0)<($817>>>0);
      $827 = $826 ? $817 : $825;
      $$0$i$i$i169 = $827;
     } else {
      $$0$i$i$i169 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i166,$$0$i$i$i169,$816,$811);
     $828 = (($__v$i$i166) + 8|0);
     $829 = HEAP32[$828>>2]|0;
     $830 = ($829|0)==(0|0);
     if (!($830)) {
      ;HEAP32[$829+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$829+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$829+8>>2]=HEAP32[$19+8>>2]|0;
      ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
      $831 = (($829) + 12|0);
      ;HEAP32[$831+0>>2]=HEAP32[$801+0>>2]|0;HEAP32[$831+4>>2]=HEAP32[$801+4>>2]|0;HEAP32[$831+8>>2]=HEAP32[$801+8>>2]|0;
      ;HEAP32[$801+0>>2]=0|0;HEAP32[$801+4>>2]=0|0;HEAP32[$801+8>>2]=0|0;
     }
     $832 = (($829) + 24|0);
     HEAP32[$828>>2] = $832;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i166);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i166);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
    $833 = (($first) + 2|0);
    $$0 = $833;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 83:  {
    $836 = (_malloc(16)|0);
    $837 = (($20) + 8|0);
    HEAP32[$837>>2] = $836;
    HEAP32[$20>>2] = 17;
    $838 = (($20) + 4|0);
    HEAP32[$838>>2] = 11;
    dest=$836+0|0; src=2776+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $839 = (($836) + 11|0);
    HEAP8[$839>>0] = 0;
    $840 = (($20) + 12|0);
    ;HEAP32[$840+0>>2]=0|0;HEAP32[$840+4>>2]=0|0;HEAP32[$840+8>>2]=0|0;
    $841 = (($db) + 4|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = (($db) + 8|0);
    $844 = HEAP32[$843>>2]|0;
    $845 = ($842>>>0)<($844>>>0);
    if ($845) {
     $846 = ($842|0)==(0|0);
     if ($846) {
      $849 = 0;
     } else {
      ;HEAP32[$842+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$842+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$842+8>>2]=HEAP32[$20+8>>2]|0;
      ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
      $847 = (($842) + 12|0);
      ;HEAP32[$847+0>>2]=HEAP32[$840+0>>2]|0;HEAP32[$847+4>>2]=HEAP32[$840+4>>2]|0;HEAP32[$847+8>>2]=HEAP32[$840+8>>2]|0;
      ;HEAP32[$840+0>>2]=0|0;HEAP32[$840+4>>2]=0|0;HEAP32[$840+8>>2]=0|0;
      $$pre$i175 = HEAP32[$841>>2]|0;
      $849 = $$pre$i175;
     }
     $848 = (($849) + 24|0);
     HEAP32[$841>>2] = $848;
    } else {
     $850 = (($db) + 12|0);
     $851 = HEAP32[$db>>2]|0;
     $852 = $842;
     $853 = $851;
     $854 = (($852) - ($853))|0;
     $855 = (($854|0) / 24)&-1;
     $856 = (($855) + 1)|0;
     $857 = ($856|0)<(0);
     if ($857) {
      __THREW__ = 0;
      invoke_v(41);
      $858 = __THREW__; __THREW__ = 0;
      $859 = $858&1;
      if (!($859)) {
       // unreachable;
      }
      $873 = ___cxa_find_matching_catch()|0;
      $874 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
      $$02 = $873;$$03 = $874;
      ___resumeException($$02|0);
      // unreachable;
     }
     $860 = $844;
     $861 = (($860) - ($853))|0;
     $862 = (($861|0) / 24)&-1;
     $863 = ($862>>>0)<(1073741823);
     if ($863) {
      $864 = $862 << 1;
      $865 = ($864>>>0)<($856>>>0);
      $866 = $865 ? $856 : $864;
      $$0$i$i$i177 = $866;
     } else {
      $$0$i$i$i177 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i174,$$0$i$i$i177,$855,$850);
     $867 = (($__v$i$i174) + 8|0);
     $868 = HEAP32[$867>>2]|0;
     $869 = ($868|0)==(0|0);
     if (!($869)) {
      ;HEAP32[$868+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$868+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$868+8>>2]=HEAP32[$20+8>>2]|0;
      ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
      $870 = (($868) + 12|0);
      ;HEAP32[$870+0>>2]=HEAP32[$840+0>>2]|0;HEAP32[$870+4>>2]=HEAP32[$840+4>>2]|0;HEAP32[$870+8>>2]=HEAP32[$840+8>>2]|0;
      ;HEAP32[$840+0>>2]=0|0;HEAP32[$840+4>>2]=0|0;HEAP32[$840+8>>2]=0|0;
     }
     $871 = (($868) + 24|0);
     HEAP32[$867>>2] = $871;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i174);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i174);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
    $872 = (($first) + 2|0);
    $$0 = $872;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 116:  {
    HEAP8[$21>>0] = 18;
    $875 = (($21) + 1|0);
    dest=$875+0|0; src=2792+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $876 = (($21) + 10|0);
    HEAP8[$876>>0] = 0;
    $877 = (($21) + 12|0);
    ;HEAP32[$877+0>>2]=0|0;HEAP32[$877+4>>2]=0|0;HEAP32[$877+8>>2]=0|0;
    $878 = (($db) + 4|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = (($db) + 8|0);
    $881 = HEAP32[$880>>2]|0;
    $882 = ($879>>>0)<($881>>>0);
    if ($882) {
     $883 = ($879|0)==(0|0);
     if ($883) {
      $886 = 0;
     } else {
      ;HEAP32[$879+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$879+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$879+8>>2]=HEAP32[$21+8>>2]|0;
      ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      $884 = (($879) + 12|0);
      ;HEAP32[$884+0>>2]=HEAP32[$877+0>>2]|0;HEAP32[$884+4>>2]=HEAP32[$877+4>>2]|0;HEAP32[$884+8>>2]=HEAP32[$877+8>>2]|0;
      ;HEAP32[$877+0>>2]=0|0;HEAP32[$877+4>>2]=0|0;HEAP32[$877+8>>2]=0|0;
      $$pre$i184 = HEAP32[$878>>2]|0;
      $886 = $$pre$i184;
     }
     $885 = (($886) + 24|0);
     HEAP32[$878>>2] = $885;
    } else {
     $887 = (($db) + 12|0);
     $888 = HEAP32[$db>>2]|0;
     $889 = $879;
     $890 = $888;
     $891 = (($889) - ($890))|0;
     $892 = (($891|0) / 24)&-1;
     $893 = (($892) + 1)|0;
     $894 = ($893|0)<(0);
     if ($894) {
      __THREW__ = 0;
      invoke_v(41);
      $895 = __THREW__; __THREW__ = 0;
      $896 = $895&1;
      if (!($896)) {
       // unreachable;
      }
      $910 = ___cxa_find_matching_catch()|0;
      $911 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $$02 = $910;$$03 = $911;
      ___resumeException($$02|0);
      // unreachable;
     }
     $897 = $881;
     $898 = (($897) - ($890))|0;
     $899 = (($898|0) / 24)&-1;
     $900 = ($899>>>0)<(1073741823);
     if ($900) {
      $901 = $899 << 1;
      $902 = ($901>>>0)<($893>>>0);
      $903 = $902 ? $893 : $901;
      $$0$i$i$i186 = $903;
     } else {
      $$0$i$i$i186 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i183,$$0$i$i$i186,$892,$887);
     $904 = (($__v$i$i183) + 8|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = ($905|0)==(0|0);
     if (!($906)) {
      ;HEAP32[$905+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$905+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$905+8>>2]=HEAP32[$21+8>>2]|0;
      ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      $907 = (($905) + 12|0);
      ;HEAP32[$907+0>>2]=HEAP32[$877+0>>2]|0;HEAP32[$907+4>>2]=HEAP32[$877+4>>2]|0;HEAP32[$907+8>>2]=HEAP32[$877+8>>2]|0;
      ;HEAP32[$877+0>>2]=0|0;HEAP32[$877+4>>2]=0|0;HEAP32[$877+8>>2]=0|0;
     }
     $908 = (($905) + 24|0);
     HEAP32[$904>>2] = $908;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i183);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i183);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
    $909 = (($first) + 2|0);
    $$0 = $909;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 101:  {
   $520 = (($first) + 1|0);
   $521 = HEAP8[$520>>0]|0;
   $522 = $521 << 24 >> 24;
   if ((($522|0) == 113)) {
    HEAP8[$14>>0] = 20;
    $597 = (($14) + 1|0);
    dest=$597+0|0; src=2664+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $598 = (($14) + 11|0);
    HEAP8[$598>>0] = 0;
    $599 = (($14) + 12|0);
    ;HEAP32[$599+0>>2]=0|0;HEAP32[$599+4>>2]=0|0;HEAP32[$599+8>>2]=0|0;
    $600 = (($db) + 4|0);
    $601 = HEAP32[$600>>2]|0;
    $602 = (($db) + 8|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = ($601>>>0)<($603>>>0);
    if ($604) {
     $605 = ($601|0)==(0|0);
     if ($605) {
      $608 = 0;
     } else {
      ;HEAP32[$601+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$601+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$601+8>>2]=HEAP32[$14+8>>2]|0;
      ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
      $606 = (($601) + 12|0);
      ;HEAP32[$606+0>>2]=HEAP32[$599+0>>2]|0;HEAP32[$606+4>>2]=HEAP32[$599+4>>2]|0;HEAP32[$606+8>>2]=HEAP32[$599+8>>2]|0;
      ;HEAP32[$599+0>>2]=0|0;HEAP32[$599+4>>2]=0|0;HEAP32[$599+8>>2]=0|0;
      $$pre$i122 = HEAP32[$600>>2]|0;
      $608 = $$pre$i122;
     }
     $607 = (($608) + 24|0);
     HEAP32[$600>>2] = $607;
    } else {
     $609 = (($db) + 12|0);
     $610 = HEAP32[$db>>2]|0;
     $611 = $601;
     $612 = $610;
     $613 = (($611) - ($612))|0;
     $614 = (($613|0) / 24)&-1;
     $615 = (($614) + 1)|0;
     $616 = ($615|0)<(0);
     if ($616) {
      __THREW__ = 0;
      invoke_v(41);
      $617 = __THREW__; __THREW__ = 0;
      $618 = $617&1;
      if (!($618)) {
       // unreachable;
      }
      $632 = ___cxa_find_matching_catch()|0;
      $633 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $$02 = $632;$$03 = $633;
      ___resumeException($$02|0);
      // unreachable;
     }
     $619 = $603;
     $620 = (($619) - ($612))|0;
     $621 = (($620|0) / 24)&-1;
     $622 = ($621>>>0)<(1073741823);
     if ($622) {
      $623 = $621 << 1;
      $624 = ($623>>>0)<($615>>>0);
      $625 = $624 ? $615 : $623;
      $$0$i$i$i124 = $625;
     } else {
      $$0$i$i$i124 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i121,$$0$i$i$i124,$614,$609);
     $626 = (($__v$i$i121) + 8|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = ($627|0)==(0|0);
     if (!($628)) {
      ;HEAP32[$627+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$627+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$627+8>>2]=HEAP32[$14+8>>2]|0;
      ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
      $629 = (($627) + 12|0);
      ;HEAP32[$629+0>>2]=HEAP32[$599+0>>2]|0;HEAP32[$629+4>>2]=HEAP32[$599+4>>2]|0;HEAP32[$629+8>>2]=HEAP32[$599+8>>2]|0;
      ;HEAP32[$599+0>>2]=0|0;HEAP32[$599+4>>2]=0|0;HEAP32[$599+8>>2]=0|0;
     }
     $630 = (($627) + 24|0);
     HEAP32[$626>>2] = $630;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i121);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i121);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
    $631 = (($first) + 2|0);
    $$0 = $631;
    STACKTOP = sp;return ($$0|0);
   } else if ((($522|0) == 79)) {
    HEAP8[$13>>0] = 20;
    $560 = (($13) + 1|0);
    dest=$560+0|0; src=2648+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $561 = (($13) + 11|0);
    HEAP8[$561>>0] = 0;
    $562 = (($13) + 12|0);
    ;HEAP32[$562+0>>2]=0|0;HEAP32[$562+4>>2]=0|0;HEAP32[$562+8>>2]=0|0;
    $563 = (($db) + 4|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = (($db) + 8|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = ($564>>>0)<($566>>>0);
    if ($567) {
     $568 = ($564|0)==(0|0);
     if ($568) {
      $571 = 0;
     } else {
      ;HEAP32[$564+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$564+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$564+8>>2]=HEAP32[$13+8>>2]|0;
      ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $569 = (($564) + 12|0);
      ;HEAP32[$569+0>>2]=HEAP32[$562+0>>2]|0;HEAP32[$569+4>>2]=HEAP32[$562+4>>2]|0;HEAP32[$569+8>>2]=HEAP32[$562+8>>2]|0;
      ;HEAP32[$562+0>>2]=0|0;HEAP32[$562+4>>2]=0|0;HEAP32[$562+8>>2]=0|0;
      $$pre$i113 = HEAP32[$563>>2]|0;
      $571 = $$pre$i113;
     }
     $570 = (($571) + 24|0);
     HEAP32[$563>>2] = $570;
    } else {
     $572 = (($db) + 12|0);
     $573 = HEAP32[$db>>2]|0;
     $574 = $564;
     $575 = $573;
     $576 = (($574) - ($575))|0;
     $577 = (($576|0) / 24)&-1;
     $578 = (($577) + 1)|0;
     $579 = ($578|0)<(0);
     if ($579) {
      __THREW__ = 0;
      invoke_v(41);
      $580 = __THREW__; __THREW__ = 0;
      $581 = $580&1;
      if (!($581)) {
       // unreachable;
      }
      $595 = ___cxa_find_matching_catch()|0;
      $596 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $$02 = $595;$$03 = $596;
      ___resumeException($$02|0);
      // unreachable;
     }
     $582 = $566;
     $583 = (($582) - ($575))|0;
     $584 = (($583|0) / 24)&-1;
     $585 = ($584>>>0)<(1073741823);
     if ($585) {
      $586 = $584 << 1;
      $587 = ($586>>>0)<($578>>>0);
      $588 = $587 ? $578 : $586;
      $$0$i$i$i115 = $588;
     } else {
      $$0$i$i$i115 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i112,$$0$i$i$i115,$577,$572);
     $589 = (($__v$i$i112) + 8|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($590|0)==(0|0);
     if (!($591)) {
      ;HEAP32[$590+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$590+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$590+8>>2]=HEAP32[$13+8>>2]|0;
      ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $592 = (($590) + 12|0);
      ;HEAP32[$592+0>>2]=HEAP32[$562+0>>2]|0;HEAP32[$592+4>>2]=HEAP32[$562+4>>2]|0;HEAP32[$592+8>>2]=HEAP32[$562+8>>2]|0;
      ;HEAP32[$562+0>>2]=0|0;HEAP32[$562+4>>2]=0|0;HEAP32[$562+8>>2]=0|0;
     }
     $593 = (($590) + 24|0);
     HEAP32[$589>>2] = $593;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i112);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i112);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
    $594 = (($first) + 2|0);
    $$0 = $594;
    STACKTOP = sp;return ($$0|0);
   } else if ((($522|0) == 111)) {
    HEAP8[$12>>0] = 18;
    $523 = (($12) + 1|0);
    dest=$523+0|0; src=2632+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $524 = (($12) + 10|0);
    HEAP8[$524>>0] = 0;
    $525 = (($12) + 12|0);
    ;HEAP32[$525+0>>2]=0|0;HEAP32[$525+4>>2]=0|0;HEAP32[$525+8>>2]=0|0;
    $526 = (($db) + 4|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = (($db) + 8|0);
    $529 = HEAP32[$528>>2]|0;
    $530 = ($527>>>0)<($529>>>0);
    if ($530) {
     $531 = ($527|0)==(0|0);
     if ($531) {
      $534 = 0;
     } else {
      ;HEAP32[$527+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$527+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$527+8>>2]=HEAP32[$12+8>>2]|0;
      ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $532 = (($527) + 12|0);
      ;HEAP32[$532+0>>2]=HEAP32[$525+0>>2]|0;HEAP32[$532+4>>2]=HEAP32[$525+4>>2]|0;HEAP32[$532+8>>2]=HEAP32[$525+8>>2]|0;
      ;HEAP32[$525+0>>2]=0|0;HEAP32[$525+4>>2]=0|0;HEAP32[$525+8>>2]=0|0;
      $$pre$i104 = HEAP32[$526>>2]|0;
      $534 = $$pre$i104;
     }
     $533 = (($534) + 24|0);
     HEAP32[$526>>2] = $533;
    } else {
     $535 = (($db) + 12|0);
     $536 = HEAP32[$db>>2]|0;
     $537 = $527;
     $538 = $536;
     $539 = (($537) - ($538))|0;
     $540 = (($539|0) / 24)&-1;
     $541 = (($540) + 1)|0;
     $542 = ($541|0)<(0);
     if ($542) {
      __THREW__ = 0;
      invoke_v(41);
      $543 = __THREW__; __THREW__ = 0;
      $544 = $543&1;
      if (!($544)) {
       // unreachable;
      }
      $558 = ___cxa_find_matching_catch()|0;
      $559 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $$02 = $558;$$03 = $559;
      ___resumeException($$02|0);
      // unreachable;
     }
     $545 = $529;
     $546 = (($545) - ($538))|0;
     $547 = (($546|0) / 24)&-1;
     $548 = ($547>>>0)<(1073741823);
     if ($548) {
      $549 = $547 << 1;
      $550 = ($549>>>0)<($541>>>0);
      $551 = $550 ? $541 : $549;
      $$0$i$i$i106 = $551;
     } else {
      $$0$i$i$i106 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i103,$$0$i$i$i106,$540,$535);
     $552 = (($__v$i$i103) + 8|0);
     $553 = HEAP32[$552>>2]|0;
     $554 = ($553|0)==(0|0);
     if (!($554)) {
      ;HEAP32[$553+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$553+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$553+8>>2]=HEAP32[$12+8>>2]|0;
      ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $555 = (($553) + 12|0);
      ;HEAP32[$555+0>>2]=HEAP32[$525+0>>2]|0;HEAP32[$555+4>>2]=HEAP32[$525+4>>2]|0;HEAP32[$555+8>>2]=HEAP32[$525+8>>2]|0;
      ;HEAP32[$525+0>>2]=0|0;HEAP32[$525+4>>2]=0|0;HEAP32[$525+8>>2]=0|0;
     }
     $556 = (($553) + 24|0);
     HEAP32[$552>>2] = $556;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i103);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i103);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
    $557 = (($first) + 2|0);
    $$0 = $557;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 100:  {
   $328 = (($first) + 1|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329 << 24 >> 24;
   switch ($330|0) {
   case 108:  {
    $407 = (_malloc(16)|0);
    $408 = (($9) + 8|0);
    HEAP32[$408>>2] = $407;
    HEAP32[$9>>2] = 17;
    $409 = (($9) + 4|0);
    HEAP32[$409>>2] = 15;
    dest=$407+0|0; src=2584+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $410 = (($407) + 15|0);
    HEAP8[$410>>0] = 0;
    $411 = (($9) + 12|0);
    ;HEAP32[$411+0>>2]=0|0;HEAP32[$411+4>>2]=0|0;HEAP32[$411+8>>2]=0|0;
    $412 = (($db) + 4|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = (($db) + 8|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ($413>>>0)<($415>>>0);
    if ($416) {
     $417 = ($413|0)==(0|0);
     if ($417) {
      $420 = 0;
     } else {
      ;HEAP32[$413+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$413+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$413+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $418 = (($413) + 12|0);
      ;HEAP32[$418+0>>2]=HEAP32[$411+0>>2]|0;HEAP32[$418+4>>2]=HEAP32[$411+4>>2]|0;HEAP32[$418+8>>2]=HEAP32[$411+8>>2]|0;
      ;HEAP32[$411+0>>2]=0|0;HEAP32[$411+4>>2]=0|0;HEAP32[$411+8>>2]=0|0;
      $$pre$i77 = HEAP32[$412>>2]|0;
      $420 = $$pre$i77;
     }
     $419 = (($420) + 24|0);
     HEAP32[$412>>2] = $419;
    } else {
     $421 = (($db) + 12|0);
     $422 = HEAP32[$db>>2]|0;
     $423 = $413;
     $424 = $422;
     $425 = (($423) - ($424))|0;
     $426 = (($425|0) / 24)&-1;
     $427 = (($426) + 1)|0;
     $428 = ($427|0)<(0);
     if ($428) {
      __THREW__ = 0;
      invoke_v(41);
      $429 = __THREW__; __THREW__ = 0;
      $430 = $429&1;
      if (!($430)) {
       // unreachable;
      }
      $444 = ___cxa_find_matching_catch()|0;
      $445 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $$02 = $444;$$03 = $445;
      ___resumeException($$02|0);
      // unreachable;
     }
     $431 = $415;
     $432 = (($431) - ($424))|0;
     $433 = (($432|0) / 24)&-1;
     $434 = ($433>>>0)<(1073741823);
     if ($434) {
      $435 = $433 << 1;
      $436 = ($435>>>0)<($427>>>0);
      $437 = $436 ? $427 : $435;
      $$0$i$i$i79 = $437;
     } else {
      $$0$i$i$i79 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i76,$$0$i$i$i79,$426,$421);
     $438 = (($__v$i$i76) + 8|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ($439|0)==(0|0);
     if (!($440)) {
      ;HEAP32[$439+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$439+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$439+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $441 = (($439) + 12|0);
      ;HEAP32[$441+0>>2]=HEAP32[$411+0>>2]|0;HEAP32[$441+4>>2]=HEAP32[$411+4>>2]|0;HEAP32[$441+8>>2]=HEAP32[$411+8>>2]|0;
      ;HEAP32[$411+0>>2]=0|0;HEAP32[$411+4>>2]=0|0;HEAP32[$411+8>>2]=0|0;
     }
     $442 = (($439) + 24|0);
     HEAP32[$438>>2] = $442;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i76);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i76);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
    $443 = (($first) + 2|0);
    $$0 = $443;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 118:  {
    HEAP8[$10>>0] = 18;
    $446 = (($10) + 1|0);
    dest=$446+0|0; src=2600+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $447 = (($10) + 10|0);
    HEAP8[$447>>0] = 0;
    $448 = (($10) + 12|0);
    ;HEAP32[$448+0>>2]=0|0;HEAP32[$448+4>>2]=0|0;HEAP32[$448+8>>2]=0|0;
    $449 = (($db) + 4|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = (($db) + 8|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = ($450>>>0)<($452>>>0);
    if ($453) {
     $454 = ($450|0)==(0|0);
     if ($454) {
      $457 = 0;
     } else {
      ;HEAP32[$450+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$450+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$450+8>>2]=HEAP32[$10+8>>2]|0;
      ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $455 = (($450) + 12|0);
      ;HEAP32[$455+0>>2]=HEAP32[$448+0>>2]|0;HEAP32[$455+4>>2]=HEAP32[$448+4>>2]|0;HEAP32[$455+8>>2]=HEAP32[$448+8>>2]|0;
      ;HEAP32[$448+0>>2]=0|0;HEAP32[$448+4>>2]=0|0;HEAP32[$448+8>>2]=0|0;
      $$pre$i86 = HEAP32[$449>>2]|0;
      $457 = $$pre$i86;
     }
     $456 = (($457) + 24|0);
     HEAP32[$449>>2] = $456;
    } else {
     $458 = (($db) + 12|0);
     $459 = HEAP32[$db>>2]|0;
     $460 = $450;
     $461 = $459;
     $462 = (($460) - ($461))|0;
     $463 = (($462|0) / 24)&-1;
     $464 = (($463) + 1)|0;
     $465 = ($464|0)<(0);
     if ($465) {
      __THREW__ = 0;
      invoke_v(41);
      $466 = __THREW__; __THREW__ = 0;
      $467 = $466&1;
      if (!($467)) {
       // unreachable;
      }
      $481 = ___cxa_find_matching_catch()|0;
      $482 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $$02 = $481;$$03 = $482;
      ___resumeException($$02|0);
      // unreachable;
     }
     $468 = $452;
     $469 = (($468) - ($461))|0;
     $470 = (($469|0) / 24)&-1;
     $471 = ($470>>>0)<(1073741823);
     if ($471) {
      $472 = $470 << 1;
      $473 = ($472>>>0)<($464>>>0);
      $474 = $473 ? $464 : $472;
      $$0$i$i$i88 = $474;
     } else {
      $$0$i$i$i88 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i85,$$0$i$i$i88,$463,$458);
     $475 = (($__v$i$i85) + 8|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = ($476|0)==(0|0);
     if (!($477)) {
      ;HEAP32[$476+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$476+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$476+8>>2]=HEAP32[$10+8>>2]|0;
      ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $478 = (($476) + 12|0);
      ;HEAP32[$478+0>>2]=HEAP32[$448+0>>2]|0;HEAP32[$478+4>>2]=HEAP32[$448+4>>2]|0;HEAP32[$478+8>>2]=HEAP32[$448+8>>2]|0;
      ;HEAP32[$448+0>>2]=0|0;HEAP32[$448+4>>2]=0|0;HEAP32[$448+8>>2]=0|0;
     }
     $479 = (($476) + 24|0);
     HEAP32[$475>>2] = $479;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i85);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i85);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
    $480 = (($first) + 2|0);
    $$0 = $480;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 97:  {
    $331 = (_malloc(32)|0);
    $332 = (($7) + 8|0);
    HEAP32[$332>>2] = $331;
    HEAP32[$7>>2] = 33;
    $333 = (($7) + 4|0);
    HEAP32[$333>>2] = 17;
    dest=$331+0|0; src=2544+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $334 = (($331) + 17|0);
    HEAP8[$334>>0] = 0;
    $335 = (($7) + 12|0);
    ;HEAP32[$335+0>>2]=0|0;HEAP32[$335+4>>2]=0|0;HEAP32[$335+8>>2]=0|0;
    $336 = (($db) + 4|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = (($db) + 8|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = ($337>>>0)<($339>>>0);
    if ($340) {
     $341 = ($337|0)==(0|0);
     if ($341) {
      $344 = 0;
     } else {
      ;HEAP32[$337+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$337+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$337+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $342 = (($337) + 12|0);
      ;HEAP32[$342+0>>2]=HEAP32[$335+0>>2]|0;HEAP32[$342+4>>2]=HEAP32[$335+4>>2]|0;HEAP32[$342+8>>2]=HEAP32[$335+8>>2]|0;
      ;HEAP32[$335+0>>2]=0|0;HEAP32[$335+4>>2]=0|0;HEAP32[$335+8>>2]=0|0;
      $$pre$i59 = HEAP32[$336>>2]|0;
      $344 = $$pre$i59;
     }
     $343 = (($344) + 24|0);
     HEAP32[$336>>2] = $343;
    } else {
     $345 = (($db) + 12|0);
     $346 = HEAP32[$db>>2]|0;
     $347 = $337;
     $348 = $346;
     $349 = (($347) - ($348))|0;
     $350 = (($349|0) / 24)&-1;
     $351 = (($350) + 1)|0;
     $352 = ($351|0)<(0);
     if ($352) {
      __THREW__ = 0;
      invoke_v(41);
      $353 = __THREW__; __THREW__ = 0;
      $354 = $353&1;
      if (!($354)) {
       // unreachable;
      }
      $368 = ___cxa_find_matching_catch()|0;
      $369 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $$02 = $368;$$03 = $369;
      ___resumeException($$02|0);
      // unreachable;
     }
     $355 = $339;
     $356 = (($355) - ($348))|0;
     $357 = (($356|0) / 24)&-1;
     $358 = ($357>>>0)<(1073741823);
     if ($358) {
      $359 = $357 << 1;
      $360 = ($359>>>0)<($351>>>0);
      $361 = $360 ? $351 : $359;
      $$0$i$i$i61 = $361;
     } else {
      $$0$i$i$i61 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i58,$$0$i$i$i61,$350,$345);
     $362 = (($__v$i$i58) + 8|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ($363|0)==(0|0);
     if (!($364)) {
      ;HEAP32[$363+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$363+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$363+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $365 = (($363) + 12|0);
      ;HEAP32[$365+0>>2]=HEAP32[$335+0>>2]|0;HEAP32[$365+4>>2]=HEAP32[$335+4>>2]|0;HEAP32[$365+8>>2]=HEAP32[$335+8>>2]|0;
      ;HEAP32[$335+0>>2]=0|0;HEAP32[$335+4>>2]=0|0;HEAP32[$335+8>>2]=0|0;
     }
     $366 = (($363) + 24|0);
     HEAP32[$362>>2] = $366;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i58);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i58);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
    $367 = (($first) + 2|0);
    $$0 = $367;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 86:  {
    HEAP8[$11>>0] = 20;
    $483 = (($11) + 1|0);
    dest=$483+0|0; src=2616+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $484 = (($11) + 11|0);
    HEAP8[$484>>0] = 0;
    $485 = (($11) + 12|0);
    ;HEAP32[$485+0>>2]=0|0;HEAP32[$485+4>>2]=0|0;HEAP32[$485+8>>2]=0|0;
    $486 = (($db) + 4|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = (($db) + 8|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = ($487>>>0)<($489>>>0);
    if ($490) {
     $491 = ($487|0)==(0|0);
     if ($491) {
      $494 = 0;
     } else {
      ;HEAP32[$487+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$487+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$487+8>>2]=HEAP32[$11+8>>2]|0;
      ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $492 = (($487) + 12|0);
      ;HEAP32[$492+0>>2]=HEAP32[$485+0>>2]|0;HEAP32[$492+4>>2]=HEAP32[$485+4>>2]|0;HEAP32[$492+8>>2]=HEAP32[$485+8>>2]|0;
      ;HEAP32[$485+0>>2]=0|0;HEAP32[$485+4>>2]=0|0;HEAP32[$485+8>>2]=0|0;
      $$pre$i95 = HEAP32[$486>>2]|0;
      $494 = $$pre$i95;
     }
     $493 = (($494) + 24|0);
     HEAP32[$486>>2] = $493;
    } else {
     $495 = (($db) + 12|0);
     $496 = HEAP32[$db>>2]|0;
     $497 = $487;
     $498 = $496;
     $499 = (($497) - ($498))|0;
     $500 = (($499|0) / 24)&-1;
     $501 = (($500) + 1)|0;
     $502 = ($501|0)<(0);
     if ($502) {
      __THREW__ = 0;
      invoke_v(41);
      $503 = __THREW__; __THREW__ = 0;
      $504 = $503&1;
      if (!($504)) {
       // unreachable;
      }
      $518 = ___cxa_find_matching_catch()|0;
      $519 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $$02 = $518;$$03 = $519;
      ___resumeException($$02|0);
      // unreachable;
     }
     $505 = $489;
     $506 = (($505) - ($498))|0;
     $507 = (($506|0) / 24)&-1;
     $508 = ($507>>>0)<(1073741823);
     if ($508) {
      $509 = $507 << 1;
      $510 = ($509>>>0)<($501>>>0);
      $511 = $510 ? $501 : $509;
      $$0$i$i$i97 = $511;
     } else {
      $$0$i$i$i97 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i94,$$0$i$i$i97,$500,$495);
     $512 = (($__v$i$i94) + 8|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = ($513|0)==(0|0);
     if (!($514)) {
      ;HEAP32[$513+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$513+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$513+8>>2]=HEAP32[$11+8>>2]|0;
      ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $515 = (($513) + 12|0);
      ;HEAP32[$515+0>>2]=HEAP32[$485+0>>2]|0;HEAP32[$515+4>>2]=HEAP32[$485+4>>2]|0;HEAP32[$515+8>>2]=HEAP32[$485+8>>2]|0;
      ;HEAP32[$485+0>>2]=0|0;HEAP32[$485+4>>2]=0|0;HEAP32[$485+8>>2]=0|0;
     }
     $516 = (($513) + 24|0);
     HEAP32[$512>>2] = $516;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i94);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i94);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
    $517 = (($first) + 2|0);
    $$0 = $517;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 101:  {
    HEAP8[$8>>0] = 18;
    $370 = (($8) + 1|0);
    dest=$370+0|0; src=2568+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $371 = (($8) + 10|0);
    HEAP8[$371>>0] = 0;
    $372 = (($8) + 12|0);
    ;HEAP32[$372+0>>2]=0|0;HEAP32[$372+4>>2]=0|0;HEAP32[$372+8>>2]=0|0;
    $373 = (($db) + 4|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (($db) + 8|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($374>>>0)<($376>>>0);
    if ($377) {
     $378 = ($374|0)==(0|0);
     if ($378) {
      $381 = 0;
     } else {
      ;HEAP32[$374+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$374+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$374+8>>2]=HEAP32[$8+8>>2]|0;
      ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $379 = (($374) + 12|0);
      ;HEAP32[$379+0>>2]=HEAP32[$372+0>>2]|0;HEAP32[$379+4>>2]=HEAP32[$372+4>>2]|0;HEAP32[$379+8>>2]=HEAP32[$372+8>>2]|0;
      ;HEAP32[$372+0>>2]=0|0;HEAP32[$372+4>>2]=0|0;HEAP32[$372+8>>2]=0|0;
      $$pre$i68 = HEAP32[$373>>2]|0;
      $381 = $$pre$i68;
     }
     $380 = (($381) + 24|0);
     HEAP32[$373>>2] = $380;
    } else {
     $382 = (($db) + 12|0);
     $383 = HEAP32[$db>>2]|0;
     $384 = $374;
     $385 = $383;
     $386 = (($384) - ($385))|0;
     $387 = (($386|0) / 24)&-1;
     $388 = (($387) + 1)|0;
     $389 = ($388|0)<(0);
     if ($389) {
      __THREW__ = 0;
      invoke_v(41);
      $390 = __THREW__; __THREW__ = 0;
      $391 = $390&1;
      if (!($391)) {
       // unreachable;
      }
      $405 = ___cxa_find_matching_catch()|0;
      $406 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $$02 = $405;$$03 = $406;
      ___resumeException($$02|0);
      // unreachable;
     }
     $392 = $376;
     $393 = (($392) - ($385))|0;
     $394 = (($393|0) / 24)&-1;
     $395 = ($394>>>0)<(1073741823);
     if ($395) {
      $396 = $394 << 1;
      $397 = ($396>>>0)<($388>>>0);
      $398 = $397 ? $388 : $396;
      $$0$i$i$i70 = $398;
     } else {
      $$0$i$i$i70 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i67,$$0$i$i$i70,$387,$382);
     $399 = (($__v$i$i67) + 8|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($400|0)==(0|0);
     if (!($401)) {
      ;HEAP32[$400+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$400+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$400+8>>2]=HEAP32[$8+8>>2]|0;
      ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $402 = (($400) + 12|0);
      ;HEAP32[$402+0>>2]=HEAP32[$372+0>>2]|0;HEAP32[$402+4>>2]=HEAP32[$372+4>>2]|0;HEAP32[$402+8>>2]=HEAP32[$372+8>>2]|0;
      ;HEAP32[$372+0>>2]=0|0;HEAP32[$372+4>>2]=0|0;HEAP32[$372+8>>2]=0|0;
     }
     $403 = (($400) + 24|0);
     HEAP32[$399>>2] = $403;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i67);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i67);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
    $404 = (($first) + 2|0);
    $$0 = $404;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 97:  {
   $52 = (($first) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   switch ($54|0) {
   case 83:  {
    HEAP8[$3>>0] = 18;
    $166 = (($3) + 1|0);
    dest=$166+0|0; src=2464+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $167 = (($3) + 10|0);
    HEAP8[$167>>0] = 0;
    $168 = (($3) + 12|0);
    ;HEAP32[$168+0>>2]=0|0;HEAP32[$168+4>>2]=0|0;HEAP32[$168+8>>2]=0|0;
    $169 = (($db) + 4|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($db) + 8|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($170>>>0)<($172>>>0);
    if ($173) {
     $174 = ($170|0)==(0|0);
     if ($174) {
      $177 = 0;
     } else {
      ;HEAP32[$170+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$170+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$170+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $175 = (($170) + 12|0);
      ;HEAP32[$175+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$175+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$175+8>>2]=HEAP32[$168+8>>2]|0;
      ;HEAP32[$168+0>>2]=0|0;HEAP32[$168+4>>2]=0|0;HEAP32[$168+8>>2]=0|0;
      $$pre$i24 = HEAP32[$169>>2]|0;
      $177 = $$pre$i24;
     }
     $176 = (($177) + 24|0);
     HEAP32[$169>>2] = $176;
    } else {
     $178 = (($db) + 12|0);
     $179 = HEAP32[$db>>2]|0;
     $180 = $170;
     $181 = $179;
     $182 = (($180) - ($181))|0;
     $183 = (($182|0) / 24)&-1;
     $184 = (($183) + 1)|0;
     $185 = ($184|0)<(0);
     if ($185) {
      __THREW__ = 0;
      invoke_v(41);
      $186 = __THREW__; __THREW__ = 0;
      $187 = $186&1;
      if (!($187)) {
       // unreachable;
      }
      $201 = ___cxa_find_matching_catch()|0;
      $202 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$02 = $201;$$03 = $202;
      ___resumeException($$02|0);
      // unreachable;
     }
     $188 = $172;
     $189 = (($188) - ($181))|0;
     $190 = (($189|0) / 24)&-1;
     $191 = ($190>>>0)<(1073741823);
     if ($191) {
      $192 = $190 << 1;
      $193 = ($192>>>0)<($184>>>0);
      $194 = $193 ? $184 : $192;
      $$0$i$i$i26 = $194;
     } else {
      $$0$i$i$i26 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23,$$0$i$i$i26,$183,$178);
     $195 = (($__v$i$i23) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($196|0)==(0|0);
     if (!($197)) {
      ;HEAP32[$196+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$196+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $198 = (($196) + 12|0);
      ;HEAP32[$198+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$198+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$198+8>>2]=HEAP32[$168+8>>2]|0;
      ;HEAP32[$168+0>>2]=0|0;HEAP32[$168+4>>2]=0|0;HEAP32[$168+8>>2]=0|0;
     }
     $199 = (($196) + 24|0);
     HEAP32[$195>>2] = $199;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i23);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $200 = (($first) + 2|0);
    $$0 = $200;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 97:  {
    HEAP8[$0>>0] = 20;
    $55 = (($0) + 1|0);
    dest=$55+0|0; src=2416+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $56 = (($0) + 11|0);
    HEAP8[$56>>0] = 0;
    $57 = (($0) + 12|0);
    ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
    $58 = (($db) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($db) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($59>>>0)<($61>>>0);
    if ($62) {
     $63 = ($59|0)==(0|0);
     if ($63) {
      $66 = 0;
     } else {
      ;HEAP32[$59+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$0+8>>2]|0;
      ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $64 = (($59) + 12|0);
      ;HEAP32[$64+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$57+8>>2]|0;
      ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
      $$pre$i = HEAP32[$58>>2]|0;
      $66 = $$pre$i;
     }
     $65 = (($66) + 24|0);
     HEAP32[$58>>2] = $65;
    } else {
     $67 = (($db) + 12|0);
     $68 = HEAP32[$db>>2]|0;
     $69 = $59;
     $70 = $68;
     $71 = (($69) - ($70))|0;
     $72 = (($71|0) / 24)&-1;
     $73 = (($72) + 1)|0;
     $74 = ($73|0)<(0);
     if ($74) {
      __THREW__ = 0;
      invoke_v(41);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if (!($76)) {
       // unreachable;
      }
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $$02 = $90;$$03 = $91;
      ___resumeException($$02|0);
      // unreachable;
     }
     $77 = $61;
     $78 = (($77) - ($70))|0;
     $79 = (($78|0) / 24)&-1;
     $80 = ($79>>>0)<(1073741823);
     if ($80) {
      $81 = $79 << 1;
      $82 = ($81>>>0)<($73>>>0);
      $83 = $82 ? $73 : $81;
      $$0$i$i$i = $83;
     } else {
      $$0$i$i$i = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$72,$67);
     $84 = (($__v$i$i) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      ;HEAP32[$85+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$85+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$85+8>>2]=HEAP32[$0+8>>2]|0;
      ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $87 = (($85) + 12|0);
      ;HEAP32[$87+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$57+8>>2]|0;
      ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
     }
     $88 = (($85) + 24|0);
     HEAP32[$84>>2] = $88;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    $89 = (($first) + 2|0);
    $$0 = $89;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 78:  {
    HEAP8[$2>>0] = 20;
    $129 = (($2) + 1|0);
    dest=$129+0|0; src=2448+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $130 = (($2) + 11|0);
    HEAP8[$130>>0] = 0;
    $131 = (($2) + 12|0);
    ;HEAP32[$131+0>>2]=0|0;HEAP32[$131+4>>2]=0|0;HEAP32[$131+8>>2]=0|0;
    $132 = (($db) + 4|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($db) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($133>>>0)<($135>>>0);
    if ($136) {
     $137 = ($133|0)==(0|0);
     if ($137) {
      $140 = 0;
     } else {
      ;HEAP32[$133+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$133+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $138 = (($133) + 12|0);
      ;HEAP32[$138+0>>2]=HEAP32[$131+0>>2]|0;HEAP32[$138+4>>2]=HEAP32[$131+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$131+8>>2]|0;
      ;HEAP32[$131+0>>2]=0|0;HEAP32[$131+4>>2]=0|0;HEAP32[$131+8>>2]=0|0;
      $$pre$i15 = HEAP32[$132>>2]|0;
      $140 = $$pre$i15;
     }
     $139 = (($140) + 24|0);
     HEAP32[$132>>2] = $139;
    } else {
     $141 = (($db) + 12|0);
     $142 = HEAP32[$db>>2]|0;
     $143 = $133;
     $144 = $142;
     $145 = (($143) - ($144))|0;
     $146 = (($145|0) / 24)&-1;
     $147 = (($146) + 1)|0;
     $148 = ($147|0)<(0);
     if ($148) {
      __THREW__ = 0;
      invoke_v(41);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if (!($150)) {
       // unreachable;
      }
      $164 = ___cxa_find_matching_catch()|0;
      $165 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $$02 = $164;$$03 = $165;
      ___resumeException($$02|0);
      // unreachable;
     }
     $151 = $135;
     $152 = (($151) - ($144))|0;
     $153 = (($152|0) / 24)&-1;
     $154 = ($153>>>0)<(1073741823);
     if ($154) {
      $155 = $153 << 1;
      $156 = ($155>>>0)<($147>>>0);
      $157 = $156 ? $147 : $155;
      $$0$i$i$i17 = $157;
     } else {
      $$0$i$i$i17 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i14,$$0$i$i$i17,$146,$141);
     $158 = (($__v$i$i14) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      ;HEAP32[$159+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      $161 = (($159) + 12|0);
      ;HEAP32[$161+0>>2]=HEAP32[$131+0>>2]|0;HEAP32[$161+4>>2]=HEAP32[$131+4>>2]|0;HEAP32[$161+8>>2]=HEAP32[$131+8>>2]|0;
      ;HEAP32[$131+0>>2]=0|0;HEAP32[$131+4>>2]=0|0;HEAP32[$131+8>>2]=0|0;
     }
     $162 = (($159) + 24|0);
     HEAP32[$158>>2] = $162;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i14);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i14);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
    $163 = (($first) + 2|0);
    $$0 = $163;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 110: case 100:  {
    HEAP8[$1>>0] = 18;
    $92 = (($1) + 1|0);
    dest=$92+0|0; src=2432+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $93 = (($1) + 10|0);
    HEAP8[$93>>0] = 0;
    $94 = (($1) + 12|0);
    ;HEAP32[$94+0>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
    $95 = (($db) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($db) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96>>>0)<($98>>>0);
    if ($99) {
     $100 = ($96|0)==(0|0);
     if ($100) {
      $103 = 0;
     } else {
      ;HEAP32[$96+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$96+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      $101 = (($96) + 12|0);
      ;HEAP32[$101+0>>2]=HEAP32[$94+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$94+8>>2]|0;
      ;HEAP32[$94+0>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
      $$pre$i6 = HEAP32[$95>>2]|0;
      $103 = $$pre$i6;
     }
     $102 = (($103) + 24|0);
     HEAP32[$95>>2] = $102;
    } else {
     $104 = (($db) + 12|0);
     $105 = HEAP32[$db>>2]|0;
     $106 = $96;
     $107 = $105;
     $108 = (($106) - ($107))|0;
     $109 = (($108|0) / 24)&-1;
     $110 = (($109) + 1)|0;
     $111 = ($110|0)<(0);
     if ($111) {
      __THREW__ = 0;
      invoke_v(41);
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if (!($113)) {
       // unreachable;
      }
      $127 = ___cxa_find_matching_catch()|0;
      $128 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $$02 = $127;$$03 = $128;
      ___resumeException($$02|0);
      // unreachable;
     }
     $114 = $98;
     $115 = (($114) - ($107))|0;
     $116 = (($115|0) / 24)&-1;
     $117 = ($116>>>0)<(1073741823);
     if ($117) {
      $118 = $116 << 1;
      $119 = ($118>>>0)<($110>>>0);
      $120 = $119 ? $110 : $118;
      $$0$i$i$i8 = $120;
     } else {
      $$0$i$i$i8 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i5,$$0$i$i$i8,$109,$104);
     $121 = (($__v$i$i5) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)==(0|0);
     if (!($123)) {
      ;HEAP32[$122+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$122+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$122+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      $124 = (($122) + 12|0);
      ;HEAP32[$124+0>>2]=HEAP32[$94+0>>2]|0;HEAP32[$124+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$124+8>>2]=HEAP32[$94+8>>2]|0;
      ;HEAP32[$94+0>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
     }
     $125 = (($122) + 24|0);
     HEAP32[$121>>2] = $125;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i5);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i5);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    $126 = (($first) + 2|0);
    $$0 = $126;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 99:  {
   $203 = (($first) + 1|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204 << 24 >> 24;
   if ((($205|0) == 111)) {
    HEAP8[$6>>0] = 18;
    $280 = (($6) + 1|0);
    dest=$280+0|0; src=2512+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $281 = (($6) + 10|0);
    HEAP8[$281>>0] = 0;
    $282 = (($6) + 12|0);
    ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
    $283 = (($db) + 4|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($db) + 8|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($284>>>0)<($286>>>0);
    if ($287) {
     $288 = ($284|0)==(0|0);
     if ($288) {
      $291 = 0;
     } else {
      ;HEAP32[$284+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$284+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$284+8>>2]=HEAP32[$6+8>>2]|0;
      ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $289 = (($284) + 12|0);
      ;HEAP32[$289+0>>2]=HEAP32[$282+0>>2]|0;HEAP32[$289+4>>2]=HEAP32[$282+4>>2]|0;HEAP32[$289+8>>2]=HEAP32[$282+8>>2]|0;
      ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
      $$pre$i51 = HEAP32[$283>>2]|0;
      $291 = $$pre$i51;
     }
     $290 = (($291) + 24|0);
     HEAP32[$283>>2] = $290;
    } else {
     $292 = (($db) + 12|0);
     $293 = HEAP32[$db>>2]|0;
     $294 = $284;
     $295 = $293;
     $296 = (($294) - ($295))|0;
     $297 = (($296|0) / 24)&-1;
     $298 = (($297) + 1)|0;
     $299 = ($298|0)<(0);
     if ($299) {
      __THREW__ = 0;
      invoke_v(41);
      $300 = __THREW__; __THREW__ = 0;
      $301 = $300&1;
      if (!($301)) {
       // unreachable;
      }
      $315 = ___cxa_find_matching_catch()|0;
      $316 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $$02 = $315;$$03 = $316;
      ___resumeException($$02|0);
      // unreachable;
     }
     $302 = $286;
     $303 = (($302) - ($295))|0;
     $304 = (($303|0) / 24)&-1;
     $305 = ($304>>>0)<(1073741823);
     if ($305) {
      $306 = $304 << 1;
      $307 = ($306>>>0)<($298>>>0);
      $308 = $307 ? $298 : $306;
      $$0$i$i$i53 = $308;
     } else {
      $$0$i$i$i53 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i50,$$0$i$i$i53,$297,$292);
     $309 = (($__v$i$i50) + 8|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = ($310|0)==(0|0);
     if (!($311)) {
      ;HEAP32[$310+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$310+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$310+8>>2]=HEAP32[$6+8>>2]|0;
      ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $312 = (($310) + 12|0);
      ;HEAP32[$312+0>>2]=HEAP32[$282+0>>2]|0;HEAP32[$312+4>>2]=HEAP32[$282+4>>2]|0;HEAP32[$312+8>>2]=HEAP32[$282+8>>2]|0;
      ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;HEAP32[$282+8>>2]=0|0;
     }
     $313 = (($310) + 24|0);
     HEAP32[$309>>2] = $313;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i50);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i50);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
    $314 = (($first) + 2|0);
    $$0 = $314;
    STACKTOP = sp;return ($$0|0);
   } else if ((($205|0) == 108)) {
    HEAP8[$4>>0] = 20;
    $206 = (($4) + 1|0);
    dest=$206+0|0; src=2480+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $207 = (($4) + 11|0);
    HEAP8[$207>>0] = 0;
    $208 = (($4) + 12|0);
    ;HEAP32[$208+0>>2]=0|0;HEAP32[$208+4>>2]=0|0;HEAP32[$208+8>>2]=0|0;
    $209 = (($db) + 4|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (($db) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($210>>>0)<($212>>>0);
    if ($213) {
     $214 = ($210|0)==(0|0);
     if ($214) {
      $217 = 0;
     } else {
      ;HEAP32[$210+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$210+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$210+8>>2]=HEAP32[$4+8>>2]|0;
      ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $215 = (($210) + 12|0);
      ;HEAP32[$215+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$215+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$215+8>>2]=HEAP32[$208+8>>2]|0;
      ;HEAP32[$208+0>>2]=0|0;HEAP32[$208+4>>2]=0|0;HEAP32[$208+8>>2]=0|0;
      $$pre$i33 = HEAP32[$209>>2]|0;
      $217 = $$pre$i33;
     }
     $216 = (($217) + 24|0);
     HEAP32[$209>>2] = $216;
    } else {
     $218 = (($db) + 12|0);
     $219 = HEAP32[$db>>2]|0;
     $220 = $210;
     $221 = $219;
     $222 = (($220) - ($221))|0;
     $223 = (($222|0) / 24)&-1;
     $224 = (($223) + 1)|0;
     $225 = ($224|0)<(0);
     if ($225) {
      __THREW__ = 0;
      invoke_v(41);
      $226 = __THREW__; __THREW__ = 0;
      $227 = $226&1;
      if (!($227)) {
       // unreachable;
      }
      $241 = ___cxa_find_matching_catch()|0;
      $242 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$02 = $241;$$03 = $242;
      ___resumeException($$02|0);
      // unreachable;
     }
     $228 = $212;
     $229 = (($228) - ($221))|0;
     $230 = (($229|0) / 24)&-1;
     $231 = ($230>>>0)<(1073741823);
     if ($231) {
      $232 = $230 << 1;
      $233 = ($232>>>0)<($224>>>0);
      $234 = $233 ? $224 : $232;
      $$0$i$i$i35 = $234;
     } else {
      $$0$i$i$i35 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i32,$$0$i$i$i35,$223,$218);
     $235 = (($__v$i$i32) + 8|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = ($236|0)==(0|0);
     if (!($237)) {
      ;HEAP32[$236+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$236+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$4+8>>2]|0;
      ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $238 = (($236) + 12|0);
      ;HEAP32[$238+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$238+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$238+8>>2]=HEAP32[$208+8>>2]|0;
      ;HEAP32[$208+0>>2]=0|0;HEAP32[$208+4>>2]=0|0;HEAP32[$208+8>>2]=0|0;
     }
     $239 = (($236) + 24|0);
     HEAP32[$235>>2] = $239;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i32);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    $240 = (($first) + 2|0);
    $$0 = $240;
    STACKTOP = sp;return ($$0|0);
   } else if ((($205|0) == 118)) {
    $317 = (($db) + 63|0);
    $318 = HEAP8[$317>>0]|0;
    HEAP8[$317>>0] = 0;
    $319 = (($first) + 2|0);
    $320 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($319,$last,$db)|0);
    HEAP8[$317>>0] = $318;
    $321 = ($320|0)==($319|0);
    if ($321) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $322 = HEAP32[$db>>2]|0;
    $323 = (($db) + 4|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($322|0)==($324|0);
    if ($325) {
     $$0 = $first;
     STACKTOP = sp;return ($$0|0);
    }
    $326 = (($324) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($326,0,2528,9)|0);
    $327 = (($db) + 60|0);
    HEAP8[$327>>0] = 1;
    $$0 = $320;
    STACKTOP = sp;return ($$0|0);
   } else if ((($205|0) == 109)) {
    HEAP8[$5>>0] = 18;
    $243 = (($5) + 1|0);
    dest=$243+0|0; src=2496+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $244 = (($5) + 10|0);
    HEAP8[$244>>0] = 0;
    $245 = (($5) + 12|0);
    ;HEAP32[$245+0>>2]=0|0;HEAP32[$245+4>>2]=0|0;HEAP32[$245+8>>2]=0|0;
    $246 = (($db) + 4|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($db) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($247>>>0)<($249>>>0);
    if ($250) {
     $251 = ($247|0)==(0|0);
     if ($251) {
      $254 = 0;
     } else {
      ;HEAP32[$247+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$247+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$247+8>>2]=HEAP32[$5+8>>2]|0;
      ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
      $252 = (($247) + 12|0);
      ;HEAP32[$252+0>>2]=HEAP32[$245+0>>2]|0;HEAP32[$252+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$252+8>>2]=HEAP32[$245+8>>2]|0;
      ;HEAP32[$245+0>>2]=0|0;HEAP32[$245+4>>2]=0|0;HEAP32[$245+8>>2]=0|0;
      $$pre$i42 = HEAP32[$246>>2]|0;
      $254 = $$pre$i42;
     }
     $253 = (($254) + 24|0);
     HEAP32[$246>>2] = $253;
    } else {
     $255 = (($db) + 12|0);
     $256 = HEAP32[$db>>2]|0;
     $257 = $247;
     $258 = $256;
     $259 = (($257) - ($258))|0;
     $260 = (($259|0) / 24)&-1;
     $261 = (($260) + 1)|0;
     $262 = ($261|0)<(0);
     if ($262) {
      __THREW__ = 0;
      invoke_v(41);
      $263 = __THREW__; __THREW__ = 0;
      $264 = $263&1;
      if (!($264)) {
       // unreachable;
      }
      $278 = ___cxa_find_matching_catch()|0;
      $279 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $$02 = $278;$$03 = $279;
      ___resumeException($$02|0);
      // unreachable;
     }
     $265 = $249;
     $266 = (($265) - ($258))|0;
     $267 = (($266|0) / 24)&-1;
     $268 = ($267>>>0)<(1073741823);
     if ($268) {
      $269 = $267 << 1;
      $270 = ($269>>>0)<($261>>>0);
      $271 = $270 ? $261 : $269;
      $$0$i$i$i44 = $271;
     } else {
      $$0$i$i$i44 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i41,$$0$i$i$i44,$260,$255);
     $272 = (($__v$i$i41) + 8|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ($273|0)==(0|0);
     if (!($274)) {
      ;HEAP32[$273+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$273+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$273+8>>2]=HEAP32[$5+8>>2]|0;
      ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
      $275 = (($273) + 12|0);
      ;HEAP32[$275+0>>2]=HEAP32[$245+0>>2]|0;HEAP32[$275+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$275+8>>2]=HEAP32[$245+8>>2]|0;
      ;HEAP32[$245+0>>2]=0|0;HEAP32[$245+4>>2]=0|0;HEAP32[$245+8>>2]=0|0;
     }
     $276 = (($273) + 24|0);
     HEAP32[$272>>2] = $276;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i41);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i41);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $277 = (($first) + 2|0);
    $$0 = $277;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 105:  {
   $711 = (($first) + 1|0);
   $712 = HEAP8[$711>>0]|0;
   $713 = ($712<<24>>24)==(120);
   if (!($713)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$17>>0] = 20;
   $714 = (($17) + 1|0);
   dest=$714+0|0; src=2712+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $715 = (($17) + 11|0);
   HEAP8[$715>>0] = 0;
   $716 = (($17) + 12|0);
   ;HEAP32[$716+0>>2]=0|0;HEAP32[$716+4>>2]=0|0;HEAP32[$716+8>>2]=0|0;
   $717 = (($db) + 4|0);
   $718 = HEAP32[$717>>2]|0;
   $719 = (($db) + 8|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = ($718>>>0)<($720>>>0);
   if ($721) {
    $722 = ($718|0)==(0|0);
    if ($722) {
     $725 = 0;
    } else {
     ;HEAP32[$718+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$718+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$718+8>>2]=HEAP32[$17+8>>2]|0;
     ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $723 = (($718) + 12|0);
     ;HEAP32[$723+0>>2]=HEAP32[$716+0>>2]|0;HEAP32[$723+4>>2]=HEAP32[$716+4>>2]|0;HEAP32[$723+8>>2]=HEAP32[$716+8>>2]|0;
     ;HEAP32[$716+0>>2]=0|0;HEAP32[$716+4>>2]=0|0;HEAP32[$716+8>>2]=0|0;
     $$pre$i149 = HEAP32[$717>>2]|0;
     $725 = $$pre$i149;
    }
    $724 = (($725) + 24|0);
    HEAP32[$717>>2] = $724;
   } else {
    $726 = (($db) + 12|0);
    $727 = HEAP32[$db>>2]|0;
    $728 = $718;
    $729 = $727;
    $730 = (($728) - ($729))|0;
    $731 = (($730|0) / 24)&-1;
    $732 = (($731) + 1)|0;
    $733 = ($732|0)<(0);
    if ($733) {
     __THREW__ = 0;
     invoke_v(41);
     $734 = __THREW__; __THREW__ = 0;
     $735 = $734&1;
     if (!($735)) {
      // unreachable;
     }
     $749 = ___cxa_find_matching_catch()|0;
     $750 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $$02 = $749;$$03 = $750;
     ___resumeException($$02|0);
     // unreachable;
    }
    $736 = $720;
    $737 = (($736) - ($729))|0;
    $738 = (($737|0) / 24)&-1;
    $739 = ($738>>>0)<(1073741823);
    if ($739) {
     $740 = $738 << 1;
     $741 = ($740>>>0)<($732>>>0);
     $742 = $741 ? $732 : $740;
     $$0$i$i$i151 = $742;
    } else {
     $$0$i$i$i151 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i148,$$0$i$i$i151,$731,$726);
    $743 = (($__v$i$i148) + 8|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = ($744|0)==(0|0);
    if (!($745)) {
     ;HEAP32[$744+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$744+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$744+8>>2]=HEAP32[$17+8>>2]|0;
     ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $746 = (($744) + 12|0);
     ;HEAP32[$746+0>>2]=HEAP32[$716+0>>2]|0;HEAP32[$746+4>>2]=HEAP32[$716+4>>2]|0;HEAP32[$746+8>>2]=HEAP32[$716+8>>2]|0;
     ;HEAP32[$716+0>>2]=0|0;HEAP32[$716+4>>2]=0|0;HEAP32[$716+8>>2]=0|0;
    }
    $747 = (($744) + 24|0);
    HEAP32[$743>>2] = $747;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i148);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i148);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $748 = (($first) + 2|0);
   $$0 = $748;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 103:  {
   $634 = (($first) + 1|0);
   $635 = HEAP8[$634>>0]|0;
   $636 = $635 << 24 >> 24;
   if ((($636|0) == 101)) {
    HEAP8[$15>>0] = 20;
    $637 = (($15) + 1|0);
    dest=$637+0|0; src=2680+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $638 = (($15) + 11|0);
    HEAP8[$638>>0] = 0;
    $639 = (($15) + 12|0);
    ;HEAP32[$639+0>>2]=0|0;HEAP32[$639+4>>2]=0|0;HEAP32[$639+8>>2]=0|0;
    $640 = (($db) + 4|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = (($db) + 8|0);
    $643 = HEAP32[$642>>2]|0;
    $644 = ($641>>>0)<($643>>>0);
    if ($644) {
     $645 = ($641|0)==(0|0);
     if ($645) {
      $648 = 0;
     } else {
      ;HEAP32[$641+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$641+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$641+8>>2]=HEAP32[$15+8>>2]|0;
      ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
      $646 = (($641) + 12|0);
      ;HEAP32[$646+0>>2]=HEAP32[$639+0>>2]|0;HEAP32[$646+4>>2]=HEAP32[$639+4>>2]|0;HEAP32[$646+8>>2]=HEAP32[$639+8>>2]|0;
      ;HEAP32[$639+0>>2]=0|0;HEAP32[$639+4>>2]=0|0;HEAP32[$639+8>>2]=0|0;
      $$pre$i131 = HEAP32[$640>>2]|0;
      $648 = $$pre$i131;
     }
     $647 = (($648) + 24|0);
     HEAP32[$640>>2] = $647;
    } else {
     $649 = (($db) + 12|0);
     $650 = HEAP32[$db>>2]|0;
     $651 = $641;
     $652 = $650;
     $653 = (($651) - ($652))|0;
     $654 = (($653|0) / 24)&-1;
     $655 = (($654) + 1)|0;
     $656 = ($655|0)<(0);
     if ($656) {
      __THREW__ = 0;
      invoke_v(41);
      $657 = __THREW__; __THREW__ = 0;
      $658 = $657&1;
      if (!($658)) {
       // unreachable;
      }
      $672 = ___cxa_find_matching_catch()|0;
      $673 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $$02 = $672;$$03 = $673;
      ___resumeException($$02|0);
      // unreachable;
     }
     $659 = $643;
     $660 = (($659) - ($652))|0;
     $661 = (($660|0) / 24)&-1;
     $662 = ($661>>>0)<(1073741823);
     if ($662) {
      $663 = $661 << 1;
      $664 = ($663>>>0)<($655>>>0);
      $665 = $664 ? $655 : $663;
      $$0$i$i$i133 = $665;
     } else {
      $$0$i$i$i133 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i130,$$0$i$i$i133,$654,$649);
     $666 = (($__v$i$i130) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if (!($668)) {
      ;HEAP32[$667+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$667+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$667+8>>2]=HEAP32[$15+8>>2]|0;
      ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
      $669 = (($667) + 12|0);
      ;HEAP32[$669+0>>2]=HEAP32[$639+0>>2]|0;HEAP32[$669+4>>2]=HEAP32[$639+4>>2]|0;HEAP32[$669+8>>2]=HEAP32[$639+8>>2]|0;
      ;HEAP32[$639+0>>2]=0|0;HEAP32[$639+4>>2]=0|0;HEAP32[$639+8>>2]=0|0;
     }
     $670 = (($667) + 24|0);
     HEAP32[$666>>2] = $670;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i130);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i130);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
    $671 = (($first) + 2|0);
    $$0 = $671;
    STACKTOP = sp;return ($$0|0);
   } else if ((($636|0) == 116)) {
    HEAP8[$16>>0] = 18;
    $674 = (($16) + 1|0);
    dest=$674+0|0; src=2696+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $675 = (($16) + 10|0);
    HEAP8[$675>>0] = 0;
    $676 = (($16) + 12|0);
    ;HEAP32[$676+0>>2]=0|0;HEAP32[$676+4>>2]=0|0;HEAP32[$676+8>>2]=0|0;
    $677 = (($db) + 4|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = (($db) + 8|0);
    $680 = HEAP32[$679>>2]|0;
    $681 = ($678>>>0)<($680>>>0);
    if ($681) {
     $682 = ($678|0)==(0|0);
     if ($682) {
      $685 = 0;
     } else {
      ;HEAP32[$678+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$678+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$678+8>>2]=HEAP32[$16+8>>2]|0;
      ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      $683 = (($678) + 12|0);
      ;HEAP32[$683+0>>2]=HEAP32[$676+0>>2]|0;HEAP32[$683+4>>2]=HEAP32[$676+4>>2]|0;HEAP32[$683+8>>2]=HEAP32[$676+8>>2]|0;
      ;HEAP32[$676+0>>2]=0|0;HEAP32[$676+4>>2]=0|0;HEAP32[$676+8>>2]=0|0;
      $$pre$i140 = HEAP32[$677>>2]|0;
      $685 = $$pre$i140;
     }
     $684 = (($685) + 24|0);
     HEAP32[$677>>2] = $684;
    } else {
     $686 = (($db) + 12|0);
     $687 = HEAP32[$db>>2]|0;
     $688 = $678;
     $689 = $687;
     $690 = (($688) - ($689))|0;
     $691 = (($690|0) / 24)&-1;
     $692 = (($691) + 1)|0;
     $693 = ($692|0)<(0);
     if ($693) {
      __THREW__ = 0;
      invoke_v(41);
      $694 = __THREW__; __THREW__ = 0;
      $695 = $694&1;
      if (!($695)) {
       // unreachable;
      }
      $709 = ___cxa_find_matching_catch()|0;
      $710 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $$02 = $709;$$03 = $710;
      ___resumeException($$02|0);
      // unreachable;
     }
     $696 = $680;
     $697 = (($696) - ($689))|0;
     $698 = (($697|0) / 24)&-1;
     $699 = ($698>>>0)<(1073741823);
     if ($699) {
      $700 = $698 << 1;
      $701 = ($700>>>0)<($692>>>0);
      $702 = $701 ? $692 : $700;
      $$0$i$i$i142 = $702;
     } else {
      $$0$i$i$i142 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i139,$$0$i$i$i142,$691,$686);
     $703 = (($__v$i$i139) + 8|0);
     $704 = HEAP32[$703>>2]|0;
     $705 = ($704|0)==(0|0);
     if (!($705)) {
      ;HEAP32[$704+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$704+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$704+8>>2]=HEAP32[$16+8>>2]|0;
      ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      $706 = (($704) + 12|0);
      ;HEAP32[$706+0>>2]=HEAP32[$676+0>>2]|0;HEAP32[$706+4>>2]=HEAP32[$676+4>>2]|0;HEAP32[$706+8>>2]=HEAP32[$676+8>>2]|0;
      ;HEAP32[$676+0>>2]=0|0;HEAP32[$676+4>>2]=0|0;HEAP32[$676+8>>2]=0|0;
     }
     $707 = (($704) + 24|0);
     HEAP32[$703>>2] = $707;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i139);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i139);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
    $708 = (($first) + 2|0);
    $$0 = $708;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 109:  {
   $912 = (($first) + 1|0);
   $913 = HEAP8[$912>>0]|0;
   $914 = $913 << 24 >> 24;
   switch ($914|0) {
   case 105:  {
    HEAP8[$22>>0] = 18;
    $915 = (($22) + 1|0);
    dest=$915+0|0; src=2808+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $916 = (($22) + 10|0);
    HEAP8[$916>>0] = 0;
    $917 = (($22) + 12|0);
    ;HEAP32[$917+0>>2]=0|0;HEAP32[$917+4>>2]=0|0;HEAP32[$917+8>>2]=0|0;
    $918 = (($db) + 4|0);
    $919 = HEAP32[$918>>2]|0;
    $920 = (($db) + 8|0);
    $921 = HEAP32[$920>>2]|0;
    $922 = ($919>>>0)<($921>>>0);
    if ($922) {
     $923 = ($919|0)==(0|0);
     if ($923) {
      $926 = 0;
     } else {
      ;HEAP32[$919+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$919+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$919+8>>2]=HEAP32[$22+8>>2]|0;
      ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
      $924 = (($919) + 12|0);
      ;HEAP32[$924+0>>2]=HEAP32[$917+0>>2]|0;HEAP32[$924+4>>2]=HEAP32[$917+4>>2]|0;HEAP32[$924+8>>2]=HEAP32[$917+8>>2]|0;
      ;HEAP32[$917+0>>2]=0|0;HEAP32[$917+4>>2]=0|0;HEAP32[$917+8>>2]=0|0;
      $$pre$i193 = HEAP32[$918>>2]|0;
      $926 = $$pre$i193;
     }
     $925 = (($926) + 24|0);
     HEAP32[$918>>2] = $925;
    } else {
     $927 = (($db) + 12|0);
     $928 = HEAP32[$db>>2]|0;
     $929 = $919;
     $930 = $928;
     $931 = (($929) - ($930))|0;
     $932 = (($931|0) / 24)&-1;
     $933 = (($932) + 1)|0;
     $934 = ($933|0)<(0);
     if ($934) {
      __THREW__ = 0;
      invoke_v(41);
      $935 = __THREW__; __THREW__ = 0;
      $936 = $935&1;
      if (!($936)) {
       // unreachable;
      }
      $950 = ___cxa_find_matching_catch()|0;
      $951 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $$02 = $950;$$03 = $951;
      ___resumeException($$02|0);
      // unreachable;
     }
     $937 = $921;
     $938 = (($937) - ($930))|0;
     $939 = (($938|0) / 24)&-1;
     $940 = ($939>>>0)<(1073741823);
     if ($940) {
      $941 = $939 << 1;
      $942 = ($941>>>0)<($933>>>0);
      $943 = $942 ? $933 : $941;
      $$0$i$i$i195 = $943;
     } else {
      $$0$i$i$i195 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i192,$$0$i$i$i195,$932,$927);
     $944 = (($__v$i$i192) + 8|0);
     $945 = HEAP32[$944>>2]|0;
     $946 = ($945|0)==(0|0);
     if (!($946)) {
      ;HEAP32[$945+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[$22+8>>2]|0;
      ;HEAP32[$22+0>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
      $947 = (($945) + 12|0);
      ;HEAP32[$947+0>>2]=HEAP32[$917+0>>2]|0;HEAP32[$947+4>>2]=HEAP32[$917+4>>2]|0;HEAP32[$947+8>>2]=HEAP32[$917+8>>2]|0;
      ;HEAP32[$917+0>>2]=0|0;HEAP32[$917+4>>2]=0|0;HEAP32[$917+8>>2]=0|0;
     }
     $948 = (($945) + 24|0);
     HEAP32[$944>>2] = $948;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i192);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i192);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
    $949 = (($first) + 2|0);
    $$0 = $949;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 73:  {
    HEAP8[$23>>0] = 20;
    $952 = (($23) + 1|0);
    dest=$952+0|0; src=2824+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $953 = (($23) + 11|0);
    HEAP8[$953>>0] = 0;
    $954 = (($23) + 12|0);
    ;HEAP32[$954+0>>2]=0|0;HEAP32[$954+4>>2]=0|0;HEAP32[$954+8>>2]=0|0;
    $955 = (($db) + 4|0);
    $956 = HEAP32[$955>>2]|0;
    $957 = (($db) + 8|0);
    $958 = HEAP32[$957>>2]|0;
    $959 = ($956>>>0)<($958>>>0);
    if ($959) {
     $960 = ($956|0)==(0|0);
     if ($960) {
      $963 = 0;
     } else {
      ;HEAP32[$956+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$956+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$956+8>>2]=HEAP32[$23+8>>2]|0;
      ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $961 = (($956) + 12|0);
      ;HEAP32[$961+0>>2]=HEAP32[$954+0>>2]|0;HEAP32[$961+4>>2]=HEAP32[$954+4>>2]|0;HEAP32[$961+8>>2]=HEAP32[$954+8>>2]|0;
      ;HEAP32[$954+0>>2]=0|0;HEAP32[$954+4>>2]=0|0;HEAP32[$954+8>>2]=0|0;
      $$pre$i202 = HEAP32[$955>>2]|0;
      $963 = $$pre$i202;
     }
     $962 = (($963) + 24|0);
     HEAP32[$955>>2] = $962;
    } else {
     $964 = (($db) + 12|0);
     $965 = HEAP32[$db>>2]|0;
     $966 = $956;
     $967 = $965;
     $968 = (($966) - ($967))|0;
     $969 = (($968|0) / 24)&-1;
     $970 = (($969) + 1)|0;
     $971 = ($970|0)<(0);
     if ($971) {
      __THREW__ = 0;
      invoke_v(41);
      $972 = __THREW__; __THREW__ = 0;
      $973 = $972&1;
      if (!($973)) {
       // unreachable;
      }
      $987 = ___cxa_find_matching_catch()|0;
      $988 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $$02 = $987;$$03 = $988;
      ___resumeException($$02|0);
      // unreachable;
     }
     $974 = $958;
     $975 = (($974) - ($967))|0;
     $976 = (($975|0) / 24)&-1;
     $977 = ($976>>>0)<(1073741823);
     if ($977) {
      $978 = $976 << 1;
      $979 = ($978>>>0)<($970>>>0);
      $980 = $979 ? $970 : $978;
      $$0$i$i$i204 = $980;
     } else {
      $$0$i$i$i204 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i201,$$0$i$i$i204,$969,$964);
     $981 = (($__v$i$i201) + 8|0);
     $982 = HEAP32[$981>>2]|0;
     $983 = ($982|0)==(0|0);
     if (!($983)) {
      ;HEAP32[$982+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$982+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$982+8>>2]=HEAP32[$23+8>>2]|0;
      ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $984 = (($982) + 12|0);
      ;HEAP32[$984+0>>2]=HEAP32[$954+0>>2]|0;HEAP32[$984+4>>2]=HEAP32[$954+4>>2]|0;HEAP32[$984+8>>2]=HEAP32[$954+8>>2]|0;
      ;HEAP32[$954+0>>2]=0|0;HEAP32[$954+4>>2]=0|0;HEAP32[$954+8>>2]=0|0;
     }
     $985 = (($982) + 24|0);
     HEAP32[$981>>2] = $985;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i201);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i201);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
    $986 = (($first) + 2|0);
    $$0 = $986;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 108:  {
    HEAP8[$24>>0] = 18;
    $989 = (($24) + 1|0);
    dest=$989+0|0; src=2568+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $990 = (($24) + 10|0);
    HEAP8[$990>>0] = 0;
    $991 = (($24) + 12|0);
    ;HEAP32[$991+0>>2]=0|0;HEAP32[$991+4>>2]=0|0;HEAP32[$991+8>>2]=0|0;
    $992 = (($db) + 4|0);
    $993 = HEAP32[$992>>2]|0;
    $994 = (($db) + 8|0);
    $995 = HEAP32[$994>>2]|0;
    $996 = ($993>>>0)<($995>>>0);
    if ($996) {
     $997 = ($993|0)==(0|0);
     if ($997) {
      $1000 = 0;
     } else {
      ;HEAP32[$993+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$993+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$993+8>>2]=HEAP32[$24+8>>2]|0;
      ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $998 = (($993) + 12|0);
      ;HEAP32[$998+0>>2]=HEAP32[$991+0>>2]|0;HEAP32[$998+4>>2]=HEAP32[$991+4>>2]|0;HEAP32[$998+8>>2]=HEAP32[$991+8>>2]|0;
      ;HEAP32[$991+0>>2]=0|0;HEAP32[$991+4>>2]=0|0;HEAP32[$991+8>>2]=0|0;
      $$pre$i211 = HEAP32[$992>>2]|0;
      $1000 = $$pre$i211;
     }
     $999 = (($1000) + 24|0);
     HEAP32[$992>>2] = $999;
    } else {
     $1001 = (($db) + 12|0);
     $1002 = HEAP32[$db>>2]|0;
     $1003 = $993;
     $1004 = $1002;
     $1005 = (($1003) - ($1004))|0;
     $1006 = (($1005|0) / 24)&-1;
     $1007 = (($1006) + 1)|0;
     $1008 = ($1007|0)<(0);
     if ($1008) {
      __THREW__ = 0;
      invoke_v(41);
      $1009 = __THREW__; __THREW__ = 0;
      $1010 = $1009&1;
      if (!($1010)) {
       // unreachable;
      }
      $1024 = ___cxa_find_matching_catch()|0;
      $1025 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $$02 = $1024;$$03 = $1025;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1011 = $995;
     $1012 = (($1011) - ($1004))|0;
     $1013 = (($1012|0) / 24)&-1;
     $1014 = ($1013>>>0)<(1073741823);
     if ($1014) {
      $1015 = $1013 << 1;
      $1016 = ($1015>>>0)<($1007>>>0);
      $1017 = $1016 ? $1007 : $1015;
      $$0$i$i$i213 = $1017;
     } else {
      $$0$i$i$i213 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i210,$$0$i$i$i213,$1006,$1001);
     $1018 = (($__v$i$i210) + 8|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = ($1019|0)==(0|0);
     if (!($1020)) {
      ;HEAP32[$1019+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$1019+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$1019+8>>2]=HEAP32[$24+8>>2]|0;
      ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $1021 = (($1019) + 12|0);
      ;HEAP32[$1021+0>>2]=HEAP32[$991+0>>2]|0;HEAP32[$1021+4>>2]=HEAP32[$991+4>>2]|0;HEAP32[$1021+8>>2]=HEAP32[$991+8>>2]|0;
      ;HEAP32[$991+0>>2]=0|0;HEAP32[$991+4>>2]=0|0;HEAP32[$991+8>>2]=0|0;
     }
     $1022 = (($1019) + 24|0);
     HEAP32[$1018>>2] = $1022;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i210);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i210);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
    $1023 = (($first) + 2|0);
    $$0 = $1023;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 76:  {
    HEAP8[$25>>0] = 20;
    $1026 = (($25) + 1|0);
    dest=$1026+0|0; src=2840+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1027 = (($25) + 11|0);
    HEAP8[$1027>>0] = 0;
    $1028 = (($25) + 12|0);
    ;HEAP32[$1028+0>>2]=0|0;HEAP32[$1028+4>>2]=0|0;HEAP32[$1028+8>>2]=0|0;
    $1029 = (($db) + 4|0);
    $1030 = HEAP32[$1029>>2]|0;
    $1031 = (($db) + 8|0);
    $1032 = HEAP32[$1031>>2]|0;
    $1033 = ($1030>>>0)<($1032>>>0);
    if ($1033) {
     $1034 = ($1030|0)==(0|0);
     if ($1034) {
      $1037 = 0;
     } else {
      ;HEAP32[$1030+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$1030+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1030+8>>2]=HEAP32[$25+8>>2]|0;
      ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $1035 = (($1030) + 12|0);
      ;HEAP32[$1035+0>>2]=HEAP32[$1028+0>>2]|0;HEAP32[$1035+4>>2]=HEAP32[$1028+4>>2]|0;HEAP32[$1035+8>>2]=HEAP32[$1028+8>>2]|0;
      ;HEAP32[$1028+0>>2]=0|0;HEAP32[$1028+4>>2]=0|0;HEAP32[$1028+8>>2]=0|0;
      $$pre$i220 = HEAP32[$1029>>2]|0;
      $1037 = $$pre$i220;
     }
     $1036 = (($1037) + 24|0);
     HEAP32[$1029>>2] = $1036;
    } else {
     $1038 = (($db) + 12|0);
     $1039 = HEAP32[$db>>2]|0;
     $1040 = $1030;
     $1041 = $1039;
     $1042 = (($1040) - ($1041))|0;
     $1043 = (($1042|0) / 24)&-1;
     $1044 = (($1043) + 1)|0;
     $1045 = ($1044|0)<(0);
     if ($1045) {
      __THREW__ = 0;
      invoke_v(41);
      $1046 = __THREW__; __THREW__ = 0;
      $1047 = $1046&1;
      if (!($1047)) {
       // unreachable;
      }
      $1061 = ___cxa_find_matching_catch()|0;
      $1062 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $$02 = $1061;$$03 = $1062;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1048 = $1032;
     $1049 = (($1048) - ($1041))|0;
     $1050 = (($1049|0) / 24)&-1;
     $1051 = ($1050>>>0)<(1073741823);
     if ($1051) {
      $1052 = $1050 << 1;
      $1053 = ($1052>>>0)<($1044>>>0);
      $1054 = $1053 ? $1044 : $1052;
      $$0$i$i$i222 = $1054;
     } else {
      $$0$i$i$i222 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i219,$$0$i$i$i222,$1043,$1038);
     $1055 = (($__v$i$i219) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = ($1056|0)==(0|0);
     if (!($1057)) {
      ;HEAP32[$1056+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$1056+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1056+8>>2]=HEAP32[$25+8>>2]|0;
      ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $1058 = (($1056) + 12|0);
      ;HEAP32[$1058+0>>2]=HEAP32[$1028+0>>2]|0;HEAP32[$1058+4>>2]=HEAP32[$1028+4>>2]|0;HEAP32[$1058+8>>2]=HEAP32[$1028+8>>2]|0;
      ;HEAP32[$1028+0>>2]=0|0;HEAP32[$1028+4>>2]=0|0;HEAP32[$1028+8>>2]=0|0;
     }
     $1059 = (($1056) + 24|0);
     HEAP32[$1055>>2] = $1059;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i219);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i219);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
    $1060 = (($first) + 2|0);
    $$0 = $1060;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 109:  {
    HEAP8[$26>>0] = 20;
    $1063 = (($26) + 1|0);
    dest=$1063+0|0; src=2856+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1064 = (($26) + 11|0);
    HEAP8[$1064>>0] = 0;
    $1065 = (($26) + 12|0);
    ;HEAP32[$1065+0>>2]=0|0;HEAP32[$1065+4>>2]=0|0;HEAP32[$1065+8>>2]=0|0;
    $1066 = (($db) + 4|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = (($db) + 8|0);
    $1069 = HEAP32[$1068>>2]|0;
    $1070 = ($1067>>>0)<($1069>>>0);
    if ($1070) {
     $1071 = ($1067|0)==(0|0);
     if ($1071) {
      $1074 = 0;
     } else {
      ;HEAP32[$1067+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$1067+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$1067+8>>2]=HEAP32[$26+8>>2]|0;
      ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $1072 = (($1067) + 12|0);
      ;HEAP32[$1072+0>>2]=HEAP32[$1065+0>>2]|0;HEAP32[$1072+4>>2]=HEAP32[$1065+4>>2]|0;HEAP32[$1072+8>>2]=HEAP32[$1065+8>>2]|0;
      ;HEAP32[$1065+0>>2]=0|0;HEAP32[$1065+4>>2]=0|0;HEAP32[$1065+8>>2]=0|0;
      $$pre$i229 = HEAP32[$1066>>2]|0;
      $1074 = $$pre$i229;
     }
     $1073 = (($1074) + 24|0);
     HEAP32[$1066>>2] = $1073;
    } else {
     $1075 = (($db) + 12|0);
     $1076 = HEAP32[$db>>2]|0;
     $1077 = $1067;
     $1078 = $1076;
     $1079 = (($1077) - ($1078))|0;
     $1080 = (($1079|0) / 24)&-1;
     $1081 = (($1080) + 1)|0;
     $1082 = ($1081|0)<(0);
     if ($1082) {
      __THREW__ = 0;
      invoke_v(41);
      $1083 = __THREW__; __THREW__ = 0;
      $1084 = $1083&1;
      if (!($1084)) {
       // unreachable;
      }
      $1098 = ___cxa_find_matching_catch()|0;
      $1099 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $$02 = $1098;$$03 = $1099;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1085 = $1069;
     $1086 = (($1085) - ($1078))|0;
     $1087 = (($1086|0) / 24)&-1;
     $1088 = ($1087>>>0)<(1073741823);
     if ($1088) {
      $1089 = $1087 << 1;
      $1090 = ($1089>>>0)<($1081>>>0);
      $1091 = $1090 ? $1081 : $1089;
      $$0$i$i$i231 = $1091;
     } else {
      $$0$i$i$i231 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i228,$$0$i$i$i231,$1080,$1075);
     $1092 = (($__v$i$i228) + 8|0);
     $1093 = HEAP32[$1092>>2]|0;
     $1094 = ($1093|0)==(0|0);
     if (!($1094)) {
      ;HEAP32[$1093+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$1093+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$1093+8>>2]=HEAP32[$26+8>>2]|0;
      ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $1095 = (($1093) + 12|0);
      ;HEAP32[$1095+0>>2]=HEAP32[$1065+0>>2]|0;HEAP32[$1095+4>>2]=HEAP32[$1065+4>>2]|0;HEAP32[$1095+8>>2]=HEAP32[$1065+8>>2]|0;
      ;HEAP32[$1065+0>>2]=0|0;HEAP32[$1065+4>>2]=0|0;HEAP32[$1065+8>>2]=0|0;
     }
     $1096 = (($1093) + 24|0);
     HEAP32[$1092>>2] = $1096;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i228);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i228);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
    $1097 = (($first) + 2|0);
    $$0 = $1097;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 110:  {
   $1100 = (($first) + 1|0);
   $1101 = HEAP8[$1100>>0]|0;
   $1102 = $1101 << 24 >> 24;
   switch ($1102|0) {
   case 97:  {
    $1103 = (_malloc(16)|0);
    $1104 = (($27) + 8|0);
    HEAP32[$1104>>2] = $1103;
    HEAP32[$27>>2] = 17;
    $1105 = (($27) + 4|0);
    HEAP32[$1105>>2] = 14;
    dest=$1103+0|0; src=2872+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1106 = (($1103) + 14|0);
    HEAP8[$1106>>0] = 0;
    $1107 = (($27) + 12|0);
    ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
    $1108 = (($db) + 4|0);
    $1109 = HEAP32[$1108>>2]|0;
    $1110 = (($db) + 8|0);
    $1111 = HEAP32[$1110>>2]|0;
    $1112 = ($1109>>>0)<($1111>>>0);
    if ($1112) {
     $1113 = ($1109|0)==(0|0);
     if ($1113) {
      $1116 = 0;
     } else {
      ;HEAP32[$1109+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1109+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1109+8>>2]=HEAP32[$27+8>>2]|0;
      ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $1114 = (($1109) + 12|0);
      ;HEAP32[$1114+0>>2]=HEAP32[$1107+0>>2]|0;HEAP32[$1114+4>>2]=HEAP32[$1107+4>>2]|0;HEAP32[$1114+8>>2]=HEAP32[$1107+8>>2]|0;
      ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
      $$pre$i237 = HEAP32[$1108>>2]|0;
      $1116 = $$pre$i237;
     }
     $1115 = (($1116) + 24|0);
     HEAP32[$1108>>2] = $1115;
    } else {
     $1117 = (($db) + 12|0);
     $1118 = HEAP32[$db>>2]|0;
     $1119 = $1109;
     $1120 = $1118;
     $1121 = (($1119) - ($1120))|0;
     $1122 = (($1121|0) / 24)&-1;
     $1123 = (($1122) + 1)|0;
     $1124 = ($1123|0)<(0);
     if ($1124) {
      __THREW__ = 0;
      invoke_v(41);
      $1125 = __THREW__; __THREW__ = 0;
      $1126 = $1125&1;
      if (!($1126)) {
       // unreachable;
      }
      $1140 = ___cxa_find_matching_catch()|0;
      $1141 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $$02 = $1140;$$03 = $1141;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1127 = $1111;
     $1128 = (($1127) - ($1120))|0;
     $1129 = (($1128|0) / 24)&-1;
     $1130 = ($1129>>>0)<(1073741823);
     if ($1130) {
      $1131 = $1129 << 1;
      $1132 = ($1131>>>0)<($1123>>>0);
      $1133 = $1132 ? $1123 : $1131;
      $$0$i$i$i239 = $1133;
     } else {
      $$0$i$i$i239 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i236,$$0$i$i$i239,$1122,$1117);
     $1134 = (($__v$i$i236) + 8|0);
     $1135 = HEAP32[$1134>>2]|0;
     $1136 = ($1135|0)==(0|0);
     if (!($1136)) {
      ;HEAP32[$1135+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$1135+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1135+8>>2]=HEAP32[$27+8>>2]|0;
      ;HEAP32[$27+0>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $1137 = (($1135) + 12|0);
      ;HEAP32[$1137+0>>2]=HEAP32[$1107+0>>2]|0;HEAP32[$1137+4>>2]=HEAP32[$1107+4>>2]|0;HEAP32[$1137+8>>2]=HEAP32[$1107+8>>2]|0;
      ;HEAP32[$1107+0>>2]=0|0;HEAP32[$1107+4>>2]=0|0;HEAP32[$1107+8>>2]=0|0;
     }
     $1138 = (($1135) + 24|0);
     HEAP32[$1134>>2] = $1138;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i236);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i236);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
    $1139 = (($first) + 2|0);
    $$0 = $1139;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 101:  {
    HEAP8[$28>>0] = 20;
    $1142 = (($28) + 1|0);
    dest=$1142+0|0; src=2888+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1143 = (($28) + 11|0);
    HEAP8[$1143>>0] = 0;
    $1144 = (($28) + 12|0);
    ;HEAP32[$1144+0>>2]=0|0;HEAP32[$1144+4>>2]=0|0;HEAP32[$1144+8>>2]=0|0;
    $1145 = (($db) + 4|0);
    $1146 = HEAP32[$1145>>2]|0;
    $1147 = (($db) + 8|0);
    $1148 = HEAP32[$1147>>2]|0;
    $1149 = ($1146>>>0)<($1148>>>0);
    if ($1149) {
     $1150 = ($1146|0)==(0|0);
     if ($1150) {
      $1153 = 0;
     } else {
      ;HEAP32[$1146+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$1146+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$1146+8>>2]=HEAP32[$28+8>>2]|0;
      ;HEAP32[$28+0>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $1151 = (($1146) + 12|0);
      ;HEAP32[$1151+0>>2]=HEAP32[$1144+0>>2]|0;HEAP32[$1151+4>>2]=HEAP32[$1144+4>>2]|0;HEAP32[$1151+8>>2]=HEAP32[$1144+8>>2]|0;
      ;HEAP32[$1144+0>>2]=0|0;HEAP32[$1144+4>>2]=0|0;HEAP32[$1144+8>>2]=0|0;
      $$pre$i246 = HEAP32[$1145>>2]|0;
      $1153 = $$pre$i246;
     }
     $1152 = (($1153) + 24|0);
     HEAP32[$1145>>2] = $1152;
    } else {
     $1154 = (($db) + 12|0);
     $1155 = HEAP32[$db>>2]|0;
     $1156 = $1146;
     $1157 = $1155;
     $1158 = (($1156) - ($1157))|0;
     $1159 = (($1158|0) / 24)&-1;
     $1160 = (($1159) + 1)|0;
     $1161 = ($1160|0)<(0);
     if ($1161) {
      __THREW__ = 0;
      invoke_v(41);
      $1162 = __THREW__; __THREW__ = 0;
      $1163 = $1162&1;
      if (!($1163)) {
       // unreachable;
      }
      $1177 = ___cxa_find_matching_catch()|0;
      $1178 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $$02 = $1177;$$03 = $1178;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1164 = $1148;
     $1165 = (($1164) - ($1157))|0;
     $1166 = (($1165|0) / 24)&-1;
     $1167 = ($1166>>>0)<(1073741823);
     if ($1167) {
      $1168 = $1166 << 1;
      $1169 = ($1168>>>0)<($1160>>>0);
      $1170 = $1169 ? $1160 : $1168;
      $$0$i$i$i248 = $1170;
     } else {
      $$0$i$i$i248 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i245,$$0$i$i$i248,$1159,$1154);
     $1171 = (($__v$i$i245) + 8|0);
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = ($1172|0)==(0|0);
     if (!($1173)) {
      ;HEAP32[$1172+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$1172+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$1172+8>>2]=HEAP32[$28+8>>2]|0;
      ;HEAP32[$28+0>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $1174 = (($1172) + 12|0);
      ;HEAP32[$1174+0>>2]=HEAP32[$1144+0>>2]|0;HEAP32[$1174+4>>2]=HEAP32[$1144+4>>2]|0;HEAP32[$1174+8>>2]=HEAP32[$1144+8>>2]|0;
      ;HEAP32[$1144+0>>2]=0|0;HEAP32[$1144+4>>2]=0|0;HEAP32[$1144+8>>2]=0|0;
     }
     $1175 = (($1172) + 24|0);
     HEAP32[$1171>>2] = $1175;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i245);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i245);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
    $1176 = (($first) + 2|0);
    $$0 = $1176;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 103:  {
    HEAP8[$29>>0] = 18;
    $1179 = (($29) + 1|0);
    dest=$1179+0|0; src=2808+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1180 = (($29) + 10|0);
    HEAP8[$1180>>0] = 0;
    $1181 = (($29) + 12|0);
    ;HEAP32[$1181+0>>2]=0|0;HEAP32[$1181+4>>2]=0|0;HEAP32[$1181+8>>2]=0|0;
    $1182 = (($db) + 4|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = (($db) + 8|0);
    $1185 = HEAP32[$1184>>2]|0;
    $1186 = ($1183>>>0)<($1185>>>0);
    if ($1186) {
     $1187 = ($1183|0)==(0|0);
     if ($1187) {
      $1190 = 0;
     } else {
      ;HEAP32[$1183+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$1183+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$1183+8>>2]=HEAP32[$29+8>>2]|0;
      ;HEAP32[$29+0>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
      $1188 = (($1183) + 12|0);
      ;HEAP32[$1188+0>>2]=HEAP32[$1181+0>>2]|0;HEAP32[$1188+4>>2]=HEAP32[$1181+4>>2]|0;HEAP32[$1188+8>>2]=HEAP32[$1181+8>>2]|0;
      ;HEAP32[$1181+0>>2]=0|0;HEAP32[$1181+4>>2]=0|0;HEAP32[$1181+8>>2]=0|0;
      $$pre$i255 = HEAP32[$1182>>2]|0;
      $1190 = $$pre$i255;
     }
     $1189 = (($1190) + 24|0);
     HEAP32[$1182>>2] = $1189;
    } else {
     $1191 = (($db) + 12|0);
     $1192 = HEAP32[$db>>2]|0;
     $1193 = $1183;
     $1194 = $1192;
     $1195 = (($1193) - ($1194))|0;
     $1196 = (($1195|0) / 24)&-1;
     $1197 = (($1196) + 1)|0;
     $1198 = ($1197|0)<(0);
     if ($1198) {
      __THREW__ = 0;
      invoke_v(41);
      $1199 = __THREW__; __THREW__ = 0;
      $1200 = $1199&1;
      if (!($1200)) {
       // unreachable;
      }
      $1214 = ___cxa_find_matching_catch()|0;
      $1215 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $$02 = $1214;$$03 = $1215;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1201 = $1185;
     $1202 = (($1201) - ($1194))|0;
     $1203 = (($1202|0) / 24)&-1;
     $1204 = ($1203>>>0)<(1073741823);
     if ($1204) {
      $1205 = $1203 << 1;
      $1206 = ($1205>>>0)<($1197>>>0);
      $1207 = $1206 ? $1197 : $1205;
      $$0$i$i$i257 = $1207;
     } else {
      $$0$i$i$i257 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i254,$$0$i$i$i257,$1196,$1191);
     $1208 = (($__v$i$i254) + 8|0);
     $1209 = HEAP32[$1208>>2]|0;
     $1210 = ($1209|0)==(0|0);
     if (!($1210)) {
      ;HEAP32[$1209+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$1209+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$1209+8>>2]=HEAP32[$29+8>>2]|0;
      ;HEAP32[$29+0>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
      $1211 = (($1209) + 12|0);
      ;HEAP32[$1211+0>>2]=HEAP32[$1181+0>>2]|0;HEAP32[$1211+4>>2]=HEAP32[$1181+4>>2]|0;HEAP32[$1211+8>>2]=HEAP32[$1181+8>>2]|0;
      ;HEAP32[$1181+0>>2]=0|0;HEAP32[$1181+4>>2]=0|0;HEAP32[$1181+8>>2]=0|0;
     }
     $1212 = (($1209) + 24|0);
     HEAP32[$1208>>2] = $1212;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i254);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i254);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
    $1213 = (($first) + 2|0);
    $$0 = $1213;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 116:  {
    HEAP8[$30>>0] = 18;
    $1216 = (($30) + 1|0);
    dest=$1216+0|0; src=2904+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1217 = (($30) + 10|0);
    HEAP8[$1217>>0] = 0;
    $1218 = (($30) + 12|0);
    ;HEAP32[$1218+0>>2]=0|0;HEAP32[$1218+4>>2]=0|0;HEAP32[$1218+8>>2]=0|0;
    $1219 = (($db) + 4|0);
    $1220 = HEAP32[$1219>>2]|0;
    $1221 = (($db) + 8|0);
    $1222 = HEAP32[$1221>>2]|0;
    $1223 = ($1220>>>0)<($1222>>>0);
    if ($1223) {
     $1224 = ($1220|0)==(0|0);
     if ($1224) {
      $1227 = 0;
     } else {
      ;HEAP32[$1220+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$1220+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$1220+8>>2]=HEAP32[$30+8>>2]|0;
      ;HEAP32[$30+0>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;
      $1225 = (($1220) + 12|0);
      ;HEAP32[$1225+0>>2]=HEAP32[$1218+0>>2]|0;HEAP32[$1225+4>>2]=HEAP32[$1218+4>>2]|0;HEAP32[$1225+8>>2]=HEAP32[$1218+8>>2]|0;
      ;HEAP32[$1218+0>>2]=0|0;HEAP32[$1218+4>>2]=0|0;HEAP32[$1218+8>>2]=0|0;
      $$pre$i264 = HEAP32[$1219>>2]|0;
      $1227 = $$pre$i264;
     }
     $1226 = (($1227) + 24|0);
     HEAP32[$1219>>2] = $1226;
    } else {
     $1228 = (($db) + 12|0);
     $1229 = HEAP32[$db>>2]|0;
     $1230 = $1220;
     $1231 = $1229;
     $1232 = (($1230) - ($1231))|0;
     $1233 = (($1232|0) / 24)&-1;
     $1234 = (($1233) + 1)|0;
     $1235 = ($1234|0)<(0);
     if ($1235) {
      __THREW__ = 0;
      invoke_v(41);
      $1236 = __THREW__; __THREW__ = 0;
      $1237 = $1236&1;
      if (!($1237)) {
       // unreachable;
      }
      $1251 = ___cxa_find_matching_catch()|0;
      $1252 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $$02 = $1251;$$03 = $1252;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1238 = $1222;
     $1239 = (($1238) - ($1231))|0;
     $1240 = (($1239|0) / 24)&-1;
     $1241 = ($1240>>>0)<(1073741823);
     if ($1241) {
      $1242 = $1240 << 1;
      $1243 = ($1242>>>0)<($1234>>>0);
      $1244 = $1243 ? $1234 : $1242;
      $$0$i$i$i266 = $1244;
     } else {
      $$0$i$i$i266 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i263,$$0$i$i$i266,$1233,$1228);
     $1245 = (($__v$i$i263) + 8|0);
     $1246 = HEAP32[$1245>>2]|0;
     $1247 = ($1246|0)==(0|0);
     if (!($1247)) {
      ;HEAP32[$1246+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$1246+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$1246+8>>2]=HEAP32[$30+8>>2]|0;
      ;HEAP32[$30+0>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;
      $1248 = (($1246) + 12|0);
      ;HEAP32[$1248+0>>2]=HEAP32[$1218+0>>2]|0;HEAP32[$1248+4>>2]=HEAP32[$1218+4>>2]|0;HEAP32[$1248+8>>2]=HEAP32[$1218+8>>2]|0;
      ;HEAP32[$1218+0>>2]=0|0;HEAP32[$1218+4>>2]=0|0;HEAP32[$1218+8>>2]=0|0;
     }
     $1249 = (($1246) + 24|0);
     HEAP32[$1245>>2] = $1249;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i263);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i263);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
    $1250 = (($first) + 2|0);
    $$0 = $1250;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 119:  {
    $1253 = (_malloc(16)|0);
    $1254 = (($31) + 8|0);
    HEAP32[$1254>>2] = $1253;
    HEAP32[$31>>2] = 17;
    $1255 = (($31) + 4|0);
    HEAP32[$1255>>2] = 12;
    dest=$1253+0|0; src=2920+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1256 = (($1253) + 12|0);
    HEAP8[$1256>>0] = 0;
    $1257 = (($31) + 12|0);
    ;HEAP32[$1257+0>>2]=0|0;HEAP32[$1257+4>>2]=0|0;HEAP32[$1257+8>>2]=0|0;
    $1258 = (($db) + 4|0);
    $1259 = HEAP32[$1258>>2]|0;
    $1260 = (($db) + 8|0);
    $1261 = HEAP32[$1260>>2]|0;
    $1262 = ($1259>>>0)<($1261>>>0);
    if ($1262) {
     $1263 = ($1259|0)==(0|0);
     if ($1263) {
      $1266 = 0;
     } else {
      ;HEAP32[$1259+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$1259+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$1259+8>>2]=HEAP32[$31+8>>2]|0;
      ;HEAP32[$31+0>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;
      $1264 = (($1259) + 12|0);
      ;HEAP32[$1264+0>>2]=HEAP32[$1257+0>>2]|0;HEAP32[$1264+4>>2]=HEAP32[$1257+4>>2]|0;HEAP32[$1264+8>>2]=HEAP32[$1257+8>>2]|0;
      ;HEAP32[$1257+0>>2]=0|0;HEAP32[$1257+4>>2]=0|0;HEAP32[$1257+8>>2]=0|0;
      $$pre$i272 = HEAP32[$1258>>2]|0;
      $1266 = $$pre$i272;
     }
     $1265 = (($1266) + 24|0);
     HEAP32[$1258>>2] = $1265;
    } else {
     $1267 = (($db) + 12|0);
     $1268 = HEAP32[$db>>2]|0;
     $1269 = $1259;
     $1270 = $1268;
     $1271 = (($1269) - ($1270))|0;
     $1272 = (($1271|0) / 24)&-1;
     $1273 = (($1272) + 1)|0;
     $1274 = ($1273|0)<(0);
     if ($1274) {
      __THREW__ = 0;
      invoke_v(41);
      $1275 = __THREW__; __THREW__ = 0;
      $1276 = $1275&1;
      if (!($1276)) {
       // unreachable;
      }
      $1290 = ___cxa_find_matching_catch()|0;
      $1291 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $$02 = $1290;$$03 = $1291;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1277 = $1261;
     $1278 = (($1277) - ($1270))|0;
     $1279 = (($1278|0) / 24)&-1;
     $1280 = ($1279>>>0)<(1073741823);
     if ($1280) {
      $1281 = $1279 << 1;
      $1282 = ($1281>>>0)<($1273>>>0);
      $1283 = $1282 ? $1273 : $1281;
      $$0$i$i$i274 = $1283;
     } else {
      $$0$i$i$i274 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i271,$$0$i$i$i274,$1272,$1267);
     $1284 = (($__v$i$i271) + 8|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = ($1285|0)==(0|0);
     if (!($1286)) {
      ;HEAP32[$1285+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$1285+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$1285+8>>2]=HEAP32[$31+8>>2]|0;
      ;HEAP32[$31+0>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;
      $1287 = (($1285) + 12|0);
      ;HEAP32[$1287+0>>2]=HEAP32[$1257+0>>2]|0;HEAP32[$1287+4>>2]=HEAP32[$1257+4>>2]|0;HEAP32[$1287+8>>2]=HEAP32[$1257+8>>2]|0;
      ;HEAP32[$1257+0>>2]=0|0;HEAP32[$1257+4>>2]=0|0;HEAP32[$1257+8>>2]=0|0;
     }
     $1288 = (($1285) + 24|0);
     HEAP32[$1284>>2] = $1288;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i271);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i271);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
    $1289 = (($first) + 2|0);
    $$0 = $1289;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 111:  {
   $1292 = (($first) + 1|0);
   $1293 = HEAP8[$1292>>0]|0;
   $1294 = $1293 << 24 >> 24;
   if ((($1294|0) == 111)) {
    HEAP8[$32>>0] = 20;
    $1295 = (($32) + 1|0);
    dest=$1295+0|0; src=2936+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1296 = (($32) + 11|0);
    HEAP8[$1296>>0] = 0;
    $1297 = (($32) + 12|0);
    ;HEAP32[$1297+0>>2]=0|0;HEAP32[$1297+4>>2]=0|0;HEAP32[$1297+8>>2]=0|0;
    $1298 = (($db) + 4|0);
    $1299 = HEAP32[$1298>>2]|0;
    $1300 = (($db) + 8|0);
    $1301 = HEAP32[$1300>>2]|0;
    $1302 = ($1299>>>0)<($1301>>>0);
    if ($1302) {
     $1303 = ($1299|0)==(0|0);
     if ($1303) {
      $1306 = 0;
     } else {
      ;HEAP32[$1299+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$1299+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$1299+8>>2]=HEAP32[$32+8>>2]|0;
      ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;
      $1304 = (($1299) + 12|0);
      ;HEAP32[$1304+0>>2]=HEAP32[$1297+0>>2]|0;HEAP32[$1304+4>>2]=HEAP32[$1297+4>>2]|0;HEAP32[$1304+8>>2]=HEAP32[$1297+8>>2]|0;
      ;HEAP32[$1297+0>>2]=0|0;HEAP32[$1297+4>>2]=0|0;HEAP32[$1297+8>>2]=0|0;
      $$pre$i281 = HEAP32[$1298>>2]|0;
      $1306 = $$pre$i281;
     }
     $1305 = (($1306) + 24|0);
     HEAP32[$1298>>2] = $1305;
    } else {
     $1307 = (($db) + 12|0);
     $1308 = HEAP32[$db>>2]|0;
     $1309 = $1299;
     $1310 = $1308;
     $1311 = (($1309) - ($1310))|0;
     $1312 = (($1311|0) / 24)&-1;
     $1313 = (($1312) + 1)|0;
     $1314 = ($1313|0)<(0);
     if ($1314) {
      __THREW__ = 0;
      invoke_v(41);
      $1315 = __THREW__; __THREW__ = 0;
      $1316 = $1315&1;
      if (!($1316)) {
       // unreachable;
      }
      $1330 = ___cxa_find_matching_catch()|0;
      $1331 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
      $$02 = $1330;$$03 = $1331;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1317 = $1301;
     $1318 = (($1317) - ($1310))|0;
     $1319 = (($1318|0) / 24)&-1;
     $1320 = ($1319>>>0)<(1073741823);
     if ($1320) {
      $1321 = $1319 << 1;
      $1322 = ($1321>>>0)<($1313>>>0);
      $1323 = $1322 ? $1313 : $1321;
      $$0$i$i$i283 = $1323;
     } else {
      $$0$i$i$i283 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i280,$$0$i$i$i283,$1312,$1307);
     $1324 = (($__v$i$i280) + 8|0);
     $1325 = HEAP32[$1324>>2]|0;
     $1326 = ($1325|0)==(0|0);
     if (!($1326)) {
      ;HEAP32[$1325+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$1325+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$1325+8>>2]=HEAP32[$32+8>>2]|0;
      ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;
      $1327 = (($1325) + 12|0);
      ;HEAP32[$1327+0>>2]=HEAP32[$1297+0>>2]|0;HEAP32[$1327+4>>2]=HEAP32[$1297+4>>2]|0;HEAP32[$1327+8>>2]=HEAP32[$1297+8>>2]|0;
      ;HEAP32[$1297+0>>2]=0|0;HEAP32[$1297+4>>2]=0|0;HEAP32[$1297+8>>2]=0|0;
     }
     $1328 = (($1325) + 24|0);
     HEAP32[$1324>>2] = $1328;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i280);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i280);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
    $1329 = (($first) + 2|0);
    $$0 = $1329;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1294|0) == 114)) {
    HEAP8[$33>>0] = 18;
    $1332 = (($33) + 1|0);
    dest=$1332+0|0; src=2952+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1333 = (($33) + 10|0);
    HEAP8[$1333>>0] = 0;
    $1334 = (($33) + 12|0);
    ;HEAP32[$1334+0>>2]=0|0;HEAP32[$1334+4>>2]=0|0;HEAP32[$1334+8>>2]=0|0;
    $1335 = (($db) + 4|0);
    $1336 = HEAP32[$1335>>2]|0;
    $1337 = (($db) + 8|0);
    $1338 = HEAP32[$1337>>2]|0;
    $1339 = ($1336>>>0)<($1338>>>0);
    if ($1339) {
     $1340 = ($1336|0)==(0|0);
     if ($1340) {
      $1343 = 0;
     } else {
      ;HEAP32[$1336+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$1336+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$1336+8>>2]=HEAP32[$33+8>>2]|0;
      ;HEAP32[$33+0>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;
      $1341 = (($1336) + 12|0);
      ;HEAP32[$1341+0>>2]=HEAP32[$1334+0>>2]|0;HEAP32[$1341+4>>2]=HEAP32[$1334+4>>2]|0;HEAP32[$1341+8>>2]=HEAP32[$1334+8>>2]|0;
      ;HEAP32[$1334+0>>2]=0|0;HEAP32[$1334+4>>2]=0|0;HEAP32[$1334+8>>2]=0|0;
      $$pre$i290 = HEAP32[$1335>>2]|0;
      $1343 = $$pre$i290;
     }
     $1342 = (($1343) + 24|0);
     HEAP32[$1335>>2] = $1342;
    } else {
     $1344 = (($db) + 12|0);
     $1345 = HEAP32[$db>>2]|0;
     $1346 = $1336;
     $1347 = $1345;
     $1348 = (($1346) - ($1347))|0;
     $1349 = (($1348|0) / 24)&-1;
     $1350 = (($1349) + 1)|0;
     $1351 = ($1350|0)<(0);
     if ($1351) {
      __THREW__ = 0;
      invoke_v(41);
      $1352 = __THREW__; __THREW__ = 0;
      $1353 = $1352&1;
      if (!($1353)) {
       // unreachable;
      }
      $1367 = ___cxa_find_matching_catch()|0;
      $1368 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
      $$02 = $1367;$$03 = $1368;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1354 = $1338;
     $1355 = (($1354) - ($1347))|0;
     $1356 = (($1355|0) / 24)&-1;
     $1357 = ($1356>>>0)<(1073741823);
     if ($1357) {
      $1358 = $1356 << 1;
      $1359 = ($1358>>>0)<($1350>>>0);
      $1360 = $1359 ? $1350 : $1358;
      $$0$i$i$i292 = $1360;
     } else {
      $$0$i$i$i292 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i289,$$0$i$i$i292,$1349,$1344);
     $1361 = (($__v$i$i289) + 8|0);
     $1362 = HEAP32[$1361>>2]|0;
     $1363 = ($1362|0)==(0|0);
     if (!($1363)) {
      ;HEAP32[$1362+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$1362+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$1362+8>>2]=HEAP32[$33+8>>2]|0;
      ;HEAP32[$33+0>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;
      $1364 = (($1362) + 12|0);
      ;HEAP32[$1364+0>>2]=HEAP32[$1334+0>>2]|0;HEAP32[$1364+4>>2]=HEAP32[$1334+4>>2]|0;HEAP32[$1364+8>>2]=HEAP32[$1334+8>>2]|0;
      ;HEAP32[$1334+0>>2]=0|0;HEAP32[$1334+4>>2]=0|0;HEAP32[$1334+8>>2]=0|0;
     }
     $1365 = (($1362) + 24|0);
     HEAP32[$1361>>2] = $1365;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i289);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i289);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
    $1366 = (($first) + 2|0);
    $$0 = $1366;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1294|0) == 82)) {
    HEAP8[$34>>0] = 20;
    $1369 = (($34) + 1|0);
    dest=$1369+0|0; src=2968+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1370 = (($34) + 11|0);
    HEAP8[$1370>>0] = 0;
    $1371 = (($34) + 12|0);
    ;HEAP32[$1371+0>>2]=0|0;HEAP32[$1371+4>>2]=0|0;HEAP32[$1371+8>>2]=0|0;
    $1372 = (($db) + 4|0);
    $1373 = HEAP32[$1372>>2]|0;
    $1374 = (($db) + 8|0);
    $1375 = HEAP32[$1374>>2]|0;
    $1376 = ($1373>>>0)<($1375>>>0);
    if ($1376) {
     $1377 = ($1373|0)==(0|0);
     if ($1377) {
      $1380 = 0;
     } else {
      ;HEAP32[$1373+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$1373+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$1373+8>>2]=HEAP32[$34+8>>2]|0;
      ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
      $1378 = (($1373) + 12|0);
      ;HEAP32[$1378+0>>2]=HEAP32[$1371+0>>2]|0;HEAP32[$1378+4>>2]=HEAP32[$1371+4>>2]|0;HEAP32[$1378+8>>2]=HEAP32[$1371+8>>2]|0;
      ;HEAP32[$1371+0>>2]=0|0;HEAP32[$1371+4>>2]=0|0;HEAP32[$1371+8>>2]=0|0;
      $$pre$i299 = HEAP32[$1372>>2]|0;
      $1380 = $$pre$i299;
     }
     $1379 = (($1380) + 24|0);
     HEAP32[$1372>>2] = $1379;
    } else {
     $1381 = (($db) + 12|0);
     $1382 = HEAP32[$db>>2]|0;
     $1383 = $1373;
     $1384 = $1382;
     $1385 = (($1383) - ($1384))|0;
     $1386 = (($1385|0) / 24)&-1;
     $1387 = (($1386) + 1)|0;
     $1388 = ($1387|0)<(0);
     if ($1388) {
      __THREW__ = 0;
      invoke_v(41);
      $1389 = __THREW__; __THREW__ = 0;
      $1390 = $1389&1;
      if (!($1390)) {
       // unreachable;
      }
      $1404 = ___cxa_find_matching_catch()|0;
      $1405 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
      $$02 = $1404;$$03 = $1405;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1391 = $1375;
     $1392 = (($1391) - ($1384))|0;
     $1393 = (($1392|0) / 24)&-1;
     $1394 = ($1393>>>0)<(1073741823);
     if ($1394) {
      $1395 = $1393 << 1;
      $1396 = ($1395>>>0)<($1387>>>0);
      $1397 = $1396 ? $1387 : $1395;
      $$0$i$i$i301 = $1397;
     } else {
      $$0$i$i$i301 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i298,$$0$i$i$i301,$1386,$1381);
     $1398 = (($__v$i$i298) + 8|0);
     $1399 = HEAP32[$1398>>2]|0;
     $1400 = ($1399|0)==(0|0);
     if (!($1400)) {
      ;HEAP32[$1399+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$1399+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$1399+8>>2]=HEAP32[$34+8>>2]|0;
      ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
      $1401 = (($1399) + 12|0);
      ;HEAP32[$1401+0>>2]=HEAP32[$1371+0>>2]|0;HEAP32[$1401+4>>2]=HEAP32[$1371+4>>2]|0;HEAP32[$1401+8>>2]=HEAP32[$1371+8>>2]|0;
      ;HEAP32[$1371+0>>2]=0|0;HEAP32[$1371+4>>2]=0|0;HEAP32[$1371+8>>2]=0|0;
     }
     $1402 = (($1399) + 24|0);
     HEAP32[$1398>>2] = $1402;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i298);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i298);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
    $1403 = (($first) + 2|0);
    $$0 = $1403;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 112:  {
   $1406 = (($first) + 1|0);
   $1407 = HEAP8[$1406>>0]|0;
   $1408 = $1407 << 24 >> 24;
   switch ($1408|0) {
   case 109:  {
    $1409 = (_malloc(16)|0);
    $1410 = (($35) + 8|0);
    HEAP32[$1410>>2] = $1409;
    HEAP32[$35>>2] = 17;
    $1411 = (($35) + 4|0);
    HEAP32[$1411>>2] = 11;
    dest=$1409+0|0; src=2984+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1412 = (($1409) + 11|0);
    HEAP8[$1412>>0] = 0;
    $1413 = (($35) + 12|0);
    ;HEAP32[$1413+0>>2]=0|0;HEAP32[$1413+4>>2]=0|0;HEAP32[$1413+8>>2]=0|0;
    $1414 = (($db) + 4|0);
    $1415 = HEAP32[$1414>>2]|0;
    $1416 = (($db) + 8|0);
    $1417 = HEAP32[$1416>>2]|0;
    $1418 = ($1415>>>0)<($1417>>>0);
    if ($1418) {
     $1419 = ($1415|0)==(0|0);
     if ($1419) {
      $1422 = 0;
     } else {
      ;HEAP32[$1415+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$1415+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$1415+8>>2]=HEAP32[$35+8>>2]|0;
      ;HEAP32[$35+0>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;
      $1420 = (($1415) + 12|0);
      ;HEAP32[$1420+0>>2]=HEAP32[$1413+0>>2]|0;HEAP32[$1420+4>>2]=HEAP32[$1413+4>>2]|0;HEAP32[$1420+8>>2]=HEAP32[$1413+8>>2]|0;
      ;HEAP32[$1413+0>>2]=0|0;HEAP32[$1413+4>>2]=0|0;HEAP32[$1413+8>>2]=0|0;
      $$pre$i307 = HEAP32[$1414>>2]|0;
      $1422 = $$pre$i307;
     }
     $1421 = (($1422) + 24|0);
     HEAP32[$1414>>2] = $1421;
    } else {
     $1423 = (($db) + 12|0);
     $1424 = HEAP32[$db>>2]|0;
     $1425 = $1415;
     $1426 = $1424;
     $1427 = (($1425) - ($1426))|0;
     $1428 = (($1427|0) / 24)&-1;
     $1429 = (($1428) + 1)|0;
     $1430 = ($1429|0)<(0);
     if ($1430) {
      __THREW__ = 0;
      invoke_v(41);
      $1431 = __THREW__; __THREW__ = 0;
      $1432 = $1431&1;
      if (!($1432)) {
       // unreachable;
      }
      $1446 = ___cxa_find_matching_catch()|0;
      $1447 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
      $$02 = $1446;$$03 = $1447;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1433 = $1417;
     $1434 = (($1433) - ($1426))|0;
     $1435 = (($1434|0) / 24)&-1;
     $1436 = ($1435>>>0)<(1073741823);
     if ($1436) {
      $1437 = $1435 << 1;
      $1438 = ($1437>>>0)<($1429>>>0);
      $1439 = $1438 ? $1429 : $1437;
      $$0$i$i$i309 = $1439;
     } else {
      $$0$i$i$i309 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i306,$$0$i$i$i309,$1428,$1423);
     $1440 = (($__v$i$i306) + 8|0);
     $1441 = HEAP32[$1440>>2]|0;
     $1442 = ($1441|0)==(0|0);
     if (!($1442)) {
      ;HEAP32[$1441+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$1441+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$1441+8>>2]=HEAP32[$35+8>>2]|0;
      ;HEAP32[$35+0>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;
      $1443 = (($1441) + 12|0);
      ;HEAP32[$1443+0>>2]=HEAP32[$1413+0>>2]|0;HEAP32[$1443+4>>2]=HEAP32[$1413+4>>2]|0;HEAP32[$1443+8>>2]=HEAP32[$1413+8>>2]|0;
      ;HEAP32[$1413+0>>2]=0|0;HEAP32[$1413+4>>2]=0|0;HEAP32[$1413+8>>2]=0|0;
     }
     $1444 = (($1441) + 24|0);
     HEAP32[$1440>>2] = $1444;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i306);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i306);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
    $1445 = (($first) + 2|0);
    $$0 = $1445;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 108:  {
    HEAP8[$36>>0] = 18;
    $1448 = (($36) + 1|0);
    dest=$1448+0|0; src=3000+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1449 = (($36) + 10|0);
    HEAP8[$1449>>0] = 0;
    $1450 = (($36) + 12|0);
    ;HEAP32[$1450+0>>2]=0|0;HEAP32[$1450+4>>2]=0|0;HEAP32[$1450+8>>2]=0|0;
    $1451 = (($db) + 4|0);
    $1452 = HEAP32[$1451>>2]|0;
    $1453 = (($db) + 8|0);
    $1454 = HEAP32[$1453>>2]|0;
    $1455 = ($1452>>>0)<($1454>>>0);
    if ($1455) {
     $1456 = ($1452|0)==(0|0);
     if ($1456) {
      $1459 = 0;
     } else {
      ;HEAP32[$1452+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$1452+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$1452+8>>2]=HEAP32[$36+8>>2]|0;
      ;HEAP32[$36+0>>2]=0|0;HEAP32[$36+4>>2]=0|0;HEAP32[$36+8>>2]=0|0;
      $1457 = (($1452) + 12|0);
      ;HEAP32[$1457+0>>2]=HEAP32[$1450+0>>2]|0;HEAP32[$1457+4>>2]=HEAP32[$1450+4>>2]|0;HEAP32[$1457+8>>2]=HEAP32[$1450+8>>2]|0;
      ;HEAP32[$1450+0>>2]=0|0;HEAP32[$1450+4>>2]=0|0;HEAP32[$1450+8>>2]=0|0;
      $$pre$i316 = HEAP32[$1451>>2]|0;
      $1459 = $$pre$i316;
     }
     $1458 = (($1459) + 24|0);
     HEAP32[$1451>>2] = $1458;
    } else {
     $1460 = (($db) + 12|0);
     $1461 = HEAP32[$db>>2]|0;
     $1462 = $1452;
     $1463 = $1461;
     $1464 = (($1462) - ($1463))|0;
     $1465 = (($1464|0) / 24)&-1;
     $1466 = (($1465) + 1)|0;
     $1467 = ($1466|0)<(0);
     if ($1467) {
      __THREW__ = 0;
      invoke_v(41);
      $1468 = __THREW__; __THREW__ = 0;
      $1469 = $1468&1;
      if (!($1469)) {
       // unreachable;
      }
      $1483 = ___cxa_find_matching_catch()|0;
      $1484 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $$02 = $1483;$$03 = $1484;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1470 = $1454;
     $1471 = (($1470) - ($1463))|0;
     $1472 = (($1471|0) / 24)&-1;
     $1473 = ($1472>>>0)<(1073741823);
     if ($1473) {
      $1474 = $1472 << 1;
      $1475 = ($1474>>>0)<($1466>>>0);
      $1476 = $1475 ? $1466 : $1474;
      $$0$i$i$i318 = $1476;
     } else {
      $$0$i$i$i318 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i315,$$0$i$i$i318,$1465,$1460);
     $1477 = (($__v$i$i315) + 8|0);
     $1478 = HEAP32[$1477>>2]|0;
     $1479 = ($1478|0)==(0|0);
     if (!($1479)) {
      ;HEAP32[$1478+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$1478+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$1478+8>>2]=HEAP32[$36+8>>2]|0;
      ;HEAP32[$36+0>>2]=0|0;HEAP32[$36+4>>2]=0|0;HEAP32[$36+8>>2]=0|0;
      $1480 = (($1478) + 12|0);
      ;HEAP32[$1480+0>>2]=HEAP32[$1450+0>>2]|0;HEAP32[$1480+4>>2]=HEAP32[$1450+4>>2]|0;HEAP32[$1480+8>>2]=HEAP32[$1450+8>>2]|0;
      ;HEAP32[$1450+0>>2]=0|0;HEAP32[$1450+4>>2]=0|0;HEAP32[$1450+8>>2]=0|0;
     }
     $1481 = (($1478) + 24|0);
     HEAP32[$1477>>2] = $1481;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i315);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i315);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
    $1482 = (($first) + 2|0);
    $$0 = $1482;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 76:  {
    HEAP8[$37>>0] = 20;
    $1485 = (($37) + 1|0);
    dest=$1485+0|0; src=3016+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1486 = (($37) + 11|0);
    HEAP8[$1486>>0] = 0;
    $1487 = (($37) + 12|0);
    ;HEAP32[$1487+0>>2]=0|0;HEAP32[$1487+4>>2]=0|0;HEAP32[$1487+8>>2]=0|0;
    $1488 = (($db) + 4|0);
    $1489 = HEAP32[$1488>>2]|0;
    $1490 = (($db) + 8|0);
    $1491 = HEAP32[$1490>>2]|0;
    $1492 = ($1489>>>0)<($1491>>>0);
    if ($1492) {
     $1493 = ($1489|0)==(0|0);
     if ($1493) {
      $1496 = 0;
     } else {
      ;HEAP32[$1489+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$1489+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$1489+8>>2]=HEAP32[$37+8>>2]|0;
      ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;
      $1494 = (($1489) + 12|0);
      ;HEAP32[$1494+0>>2]=HEAP32[$1487+0>>2]|0;HEAP32[$1494+4>>2]=HEAP32[$1487+4>>2]|0;HEAP32[$1494+8>>2]=HEAP32[$1487+8>>2]|0;
      ;HEAP32[$1487+0>>2]=0|0;HEAP32[$1487+4>>2]=0|0;HEAP32[$1487+8>>2]=0|0;
      $$pre$i325 = HEAP32[$1488>>2]|0;
      $1496 = $$pre$i325;
     }
     $1495 = (($1496) + 24|0);
     HEAP32[$1488>>2] = $1495;
    } else {
     $1497 = (($db) + 12|0);
     $1498 = HEAP32[$db>>2]|0;
     $1499 = $1489;
     $1500 = $1498;
     $1501 = (($1499) - ($1500))|0;
     $1502 = (($1501|0) / 24)&-1;
     $1503 = (($1502) + 1)|0;
     $1504 = ($1503|0)<(0);
     if ($1504) {
      __THREW__ = 0;
      invoke_v(41);
      $1505 = __THREW__; __THREW__ = 0;
      $1506 = $1505&1;
      if (!($1506)) {
       // unreachable;
      }
      $1520 = ___cxa_find_matching_catch()|0;
      $1521 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
      $$02 = $1520;$$03 = $1521;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1507 = $1491;
     $1508 = (($1507) - ($1500))|0;
     $1509 = (($1508|0) / 24)&-1;
     $1510 = ($1509>>>0)<(1073741823);
     if ($1510) {
      $1511 = $1509 << 1;
      $1512 = ($1511>>>0)<($1503>>>0);
      $1513 = $1512 ? $1503 : $1511;
      $$0$i$i$i327 = $1513;
     } else {
      $$0$i$i$i327 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i324,$$0$i$i$i327,$1502,$1497);
     $1514 = (($__v$i$i324) + 8|0);
     $1515 = HEAP32[$1514>>2]|0;
     $1516 = ($1515|0)==(0|0);
     if (!($1516)) {
      ;HEAP32[$1515+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$1515+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$1515+8>>2]=HEAP32[$37+8>>2]|0;
      ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;
      $1517 = (($1515) + 12|0);
      ;HEAP32[$1517+0>>2]=HEAP32[$1487+0>>2]|0;HEAP32[$1517+4>>2]=HEAP32[$1487+4>>2]|0;HEAP32[$1517+8>>2]=HEAP32[$1487+8>>2]|0;
      ;HEAP32[$1487+0>>2]=0|0;HEAP32[$1487+4>>2]=0|0;HEAP32[$1487+8>>2]=0|0;
     }
     $1518 = (($1515) + 24|0);
     HEAP32[$1514>>2] = $1518;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i324);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i324);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
    $1519 = (($first) + 2|0);
    $$0 = $1519;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 112:  {
    HEAP8[$38>>0] = 20;
    $1522 = (($38) + 1|0);
    dest=$1522+0|0; src=3032+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1523 = (($38) + 11|0);
    HEAP8[$1523>>0] = 0;
    $1524 = (($38) + 12|0);
    ;HEAP32[$1524+0>>2]=0|0;HEAP32[$1524+4>>2]=0|0;HEAP32[$1524+8>>2]=0|0;
    $1525 = (($db) + 4|0);
    $1526 = HEAP32[$1525>>2]|0;
    $1527 = (($db) + 8|0);
    $1528 = HEAP32[$1527>>2]|0;
    $1529 = ($1526>>>0)<($1528>>>0);
    if ($1529) {
     $1530 = ($1526|0)==(0|0);
     if ($1530) {
      $1533 = 0;
     } else {
      ;HEAP32[$1526+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$1526+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$1526+8>>2]=HEAP32[$38+8>>2]|0;
      ;HEAP32[$38+0>>2]=0|0;HEAP32[$38+4>>2]=0|0;HEAP32[$38+8>>2]=0|0;
      $1531 = (($1526) + 12|0);
      ;HEAP32[$1531+0>>2]=HEAP32[$1524+0>>2]|0;HEAP32[$1531+4>>2]=HEAP32[$1524+4>>2]|0;HEAP32[$1531+8>>2]=HEAP32[$1524+8>>2]|0;
      ;HEAP32[$1524+0>>2]=0|0;HEAP32[$1524+4>>2]=0|0;HEAP32[$1524+8>>2]=0|0;
      $$pre$i334 = HEAP32[$1525>>2]|0;
      $1533 = $$pre$i334;
     }
     $1532 = (($1533) + 24|0);
     HEAP32[$1525>>2] = $1532;
    } else {
     $1534 = (($db) + 12|0);
     $1535 = HEAP32[$db>>2]|0;
     $1536 = $1526;
     $1537 = $1535;
     $1538 = (($1536) - ($1537))|0;
     $1539 = (($1538|0) / 24)&-1;
     $1540 = (($1539) + 1)|0;
     $1541 = ($1540|0)<(0);
     if ($1541) {
      __THREW__ = 0;
      invoke_v(41);
      $1542 = __THREW__; __THREW__ = 0;
      $1543 = $1542&1;
      if (!($1543)) {
       // unreachable;
      }
      $1557 = ___cxa_find_matching_catch()|0;
      $1558 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
      $$02 = $1557;$$03 = $1558;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1544 = $1528;
     $1545 = (($1544) - ($1537))|0;
     $1546 = (($1545|0) / 24)&-1;
     $1547 = ($1546>>>0)<(1073741823);
     if ($1547) {
      $1548 = $1546 << 1;
      $1549 = ($1548>>>0)<($1540>>>0);
      $1550 = $1549 ? $1540 : $1548;
      $$0$i$i$i336 = $1550;
     } else {
      $$0$i$i$i336 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i333,$$0$i$i$i336,$1539,$1534);
     $1551 = (($__v$i$i333) + 8|0);
     $1552 = HEAP32[$1551>>2]|0;
     $1553 = ($1552|0)==(0|0);
     if (!($1553)) {
      ;HEAP32[$1552+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$1552+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$1552+8>>2]=HEAP32[$38+8>>2]|0;
      ;HEAP32[$38+0>>2]=0|0;HEAP32[$38+4>>2]=0|0;HEAP32[$38+8>>2]=0|0;
      $1554 = (($1552) + 12|0);
      ;HEAP32[$1554+0>>2]=HEAP32[$1524+0>>2]|0;HEAP32[$1554+4>>2]=HEAP32[$1524+4>>2]|0;HEAP32[$1554+8>>2]=HEAP32[$1524+8>>2]|0;
      ;HEAP32[$1524+0>>2]=0|0;HEAP32[$1524+4>>2]=0|0;HEAP32[$1524+8>>2]=0|0;
     }
     $1555 = (($1552) + 24|0);
     HEAP32[$1551>>2] = $1555;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i333);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i333);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
    $1556 = (($first) + 2|0);
    $$0 = $1556;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 115:  {
    HEAP8[$39>>0] = 18;
    $1559 = (($39) + 1|0);
    dest=$1559+0|0; src=3000+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1560 = (($39) + 10|0);
    HEAP8[$1560>>0] = 0;
    $1561 = (($39) + 12|0);
    ;HEAP32[$1561+0>>2]=0|0;HEAP32[$1561+4>>2]=0|0;HEAP32[$1561+8>>2]=0|0;
    $1562 = (($db) + 4|0);
    $1563 = HEAP32[$1562>>2]|0;
    $1564 = (($db) + 8|0);
    $1565 = HEAP32[$1564>>2]|0;
    $1566 = ($1563>>>0)<($1565>>>0);
    if ($1566) {
     $1567 = ($1563|0)==(0|0);
     if ($1567) {
      $1570 = 0;
     } else {
      ;HEAP32[$1563+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$1563+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$1563+8>>2]=HEAP32[$39+8>>2]|0;
      ;HEAP32[$39+0>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;
      $1568 = (($1563) + 12|0);
      ;HEAP32[$1568+0>>2]=HEAP32[$1561+0>>2]|0;HEAP32[$1568+4>>2]=HEAP32[$1561+4>>2]|0;HEAP32[$1568+8>>2]=HEAP32[$1561+8>>2]|0;
      ;HEAP32[$1561+0>>2]=0|0;HEAP32[$1561+4>>2]=0|0;HEAP32[$1561+8>>2]=0|0;
      $$pre$i343 = HEAP32[$1562>>2]|0;
      $1570 = $$pre$i343;
     }
     $1569 = (($1570) + 24|0);
     HEAP32[$1562>>2] = $1569;
    } else {
     $1571 = (($db) + 12|0);
     $1572 = HEAP32[$db>>2]|0;
     $1573 = $1563;
     $1574 = $1572;
     $1575 = (($1573) - ($1574))|0;
     $1576 = (($1575|0) / 24)&-1;
     $1577 = (($1576) + 1)|0;
     $1578 = ($1577|0)<(0);
     if ($1578) {
      __THREW__ = 0;
      invoke_v(41);
      $1579 = __THREW__; __THREW__ = 0;
      $1580 = $1579&1;
      if (!($1580)) {
       // unreachable;
      }
      $1594 = ___cxa_find_matching_catch()|0;
      $1595 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
      $$02 = $1594;$$03 = $1595;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1581 = $1565;
     $1582 = (($1581) - ($1574))|0;
     $1583 = (($1582|0) / 24)&-1;
     $1584 = ($1583>>>0)<(1073741823);
     if ($1584) {
      $1585 = $1583 << 1;
      $1586 = ($1585>>>0)<($1577>>>0);
      $1587 = $1586 ? $1577 : $1585;
      $$0$i$i$i345 = $1587;
     } else {
      $$0$i$i$i345 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i342,$$0$i$i$i345,$1576,$1571);
     $1588 = (($__v$i$i342) + 8|0);
     $1589 = HEAP32[$1588>>2]|0;
     $1590 = ($1589|0)==(0|0);
     if (!($1590)) {
      ;HEAP32[$1589+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$1589+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$1589+8>>2]=HEAP32[$39+8>>2]|0;
      ;HEAP32[$39+0>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;
      $1591 = (($1589) + 12|0);
      ;HEAP32[$1591+0>>2]=HEAP32[$1561+0>>2]|0;HEAP32[$1591+4>>2]=HEAP32[$1561+4>>2]|0;HEAP32[$1591+8>>2]=HEAP32[$1561+8>>2]|0;
      ;HEAP32[$1561+0>>2]=0|0;HEAP32[$1561+4>>2]=0|0;HEAP32[$1561+8>>2]=0|0;
     }
     $1592 = (($1589) + 24|0);
     HEAP32[$1588>>2] = $1592;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i342);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i342);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
    $1593 = (($first) + 2|0);
    $$0 = $1593;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 116:  {
    HEAP8[$40>>0] = 20;
    $1596 = (($40) + 1|0);
    dest=$1596+0|0; src=3048+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1597 = (($40) + 11|0);
    HEAP8[$1597>>0] = 0;
    $1598 = (($40) + 12|0);
    ;HEAP32[$1598+0>>2]=0|0;HEAP32[$1598+4>>2]=0|0;HEAP32[$1598+8>>2]=0|0;
    $1599 = (($db) + 4|0);
    $1600 = HEAP32[$1599>>2]|0;
    $1601 = (($db) + 8|0);
    $1602 = HEAP32[$1601>>2]|0;
    $1603 = ($1600>>>0)<($1602>>>0);
    if ($1603) {
     $1604 = ($1600|0)==(0|0);
     if ($1604) {
      $1607 = 0;
     } else {
      ;HEAP32[$1600+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$1600+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$1600+8>>2]=HEAP32[$40+8>>2]|0;
      ;HEAP32[$40+0>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;
      $1605 = (($1600) + 12|0);
      ;HEAP32[$1605+0>>2]=HEAP32[$1598+0>>2]|0;HEAP32[$1605+4>>2]=HEAP32[$1598+4>>2]|0;HEAP32[$1605+8>>2]=HEAP32[$1598+8>>2]|0;
      ;HEAP32[$1598+0>>2]=0|0;HEAP32[$1598+4>>2]=0|0;HEAP32[$1598+8>>2]=0|0;
      $$pre$i352 = HEAP32[$1599>>2]|0;
      $1607 = $$pre$i352;
     }
     $1606 = (($1607) + 24|0);
     HEAP32[$1599>>2] = $1606;
    } else {
     $1608 = (($db) + 12|0);
     $1609 = HEAP32[$db>>2]|0;
     $1610 = $1600;
     $1611 = $1609;
     $1612 = (($1610) - ($1611))|0;
     $1613 = (($1612|0) / 24)&-1;
     $1614 = (($1613) + 1)|0;
     $1615 = ($1614|0)<(0);
     if ($1615) {
      __THREW__ = 0;
      invoke_v(41);
      $1616 = __THREW__; __THREW__ = 0;
      $1617 = $1616&1;
      if (!($1617)) {
       // unreachable;
      }
      $1631 = ___cxa_find_matching_catch()|0;
      $1632 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $$02 = $1631;$$03 = $1632;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1618 = $1602;
     $1619 = (($1618) - ($1611))|0;
     $1620 = (($1619|0) / 24)&-1;
     $1621 = ($1620>>>0)<(1073741823);
     if ($1621) {
      $1622 = $1620 << 1;
      $1623 = ($1622>>>0)<($1614>>>0);
      $1624 = $1623 ? $1614 : $1622;
      $$0$i$i$i354 = $1624;
     } else {
      $$0$i$i$i354 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i351,$$0$i$i$i354,$1613,$1608);
     $1625 = (($__v$i$i351) + 8|0);
     $1626 = HEAP32[$1625>>2]|0;
     $1627 = ($1626|0)==(0|0);
     if (!($1627)) {
      ;HEAP32[$1626+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$1626+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$1626+8>>2]=HEAP32[$40+8>>2]|0;
      ;HEAP32[$40+0>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;
      $1628 = (($1626) + 12|0);
      ;HEAP32[$1628+0>>2]=HEAP32[$1598+0>>2]|0;HEAP32[$1628+4>>2]=HEAP32[$1598+4>>2]|0;HEAP32[$1628+8>>2]=HEAP32[$1598+8>>2]|0;
      ;HEAP32[$1598+0>>2]=0|0;HEAP32[$1598+4>>2]=0|0;HEAP32[$1598+8>>2]=0|0;
     }
     $1629 = (($1626) + 24|0);
     HEAP32[$1625>>2] = $1629;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i351);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i351);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
    $1630 = (($first) + 2|0);
    $$0 = $1630;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  case 113:  {
   $1633 = (($first) + 1|0);
   $1634 = HEAP8[$1633>>0]|0;
   $1635 = ($1634<<24>>24)==(117);
   if (!($1635)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$41>>0] = 18;
   $1636 = (($41) + 1|0);
   dest=$1636+0|0; src=3064+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $1637 = (($41) + 10|0);
   HEAP8[$1637>>0] = 0;
   $1638 = (($41) + 12|0);
   ;HEAP32[$1638+0>>2]=0|0;HEAP32[$1638+4>>2]=0|0;HEAP32[$1638+8>>2]=0|0;
   $1639 = (($db) + 4|0);
   $1640 = HEAP32[$1639>>2]|0;
   $1641 = (($db) + 8|0);
   $1642 = HEAP32[$1641>>2]|0;
   $1643 = ($1640>>>0)<($1642>>>0);
   if ($1643) {
    $1644 = ($1640|0)==(0|0);
    if ($1644) {
     $1647 = 0;
    } else {
     ;HEAP32[$1640+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$1640+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$1640+8>>2]=HEAP32[$41+8>>2]|0;
     ;HEAP32[$41+0>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
     $1645 = (($1640) + 12|0);
     ;HEAP32[$1645+0>>2]=HEAP32[$1638+0>>2]|0;HEAP32[$1645+4>>2]=HEAP32[$1638+4>>2]|0;HEAP32[$1645+8>>2]=HEAP32[$1638+8>>2]|0;
     ;HEAP32[$1638+0>>2]=0|0;HEAP32[$1638+4>>2]=0|0;HEAP32[$1638+8>>2]=0|0;
     $$pre$i361 = HEAP32[$1639>>2]|0;
     $1647 = $$pre$i361;
    }
    $1646 = (($1647) + 24|0);
    HEAP32[$1639>>2] = $1646;
   } else {
    $1648 = (($db) + 12|0);
    $1649 = HEAP32[$db>>2]|0;
    $1650 = $1640;
    $1651 = $1649;
    $1652 = (($1650) - ($1651))|0;
    $1653 = (($1652|0) / 24)&-1;
    $1654 = (($1653) + 1)|0;
    $1655 = ($1654|0)<(0);
    if ($1655) {
     __THREW__ = 0;
     invoke_v(41);
     $1656 = __THREW__; __THREW__ = 0;
     $1657 = $1656&1;
     if (!($1657)) {
      // unreachable;
     }
     $1671 = ___cxa_find_matching_catch()|0;
     $1672 = tempRet0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
     $$02 = $1671;$$03 = $1672;
     ___resumeException($$02|0);
     // unreachable;
    }
    $1658 = $1642;
    $1659 = (($1658) - ($1651))|0;
    $1660 = (($1659|0) / 24)&-1;
    $1661 = ($1660>>>0)<(1073741823);
    if ($1661) {
     $1662 = $1660 << 1;
     $1663 = ($1662>>>0)<($1654>>>0);
     $1664 = $1663 ? $1654 : $1662;
     $$0$i$i$i363 = $1664;
    } else {
     $$0$i$i$i363 = 2147483647;
    }
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i360,$$0$i$i$i363,$1653,$1648);
    $1665 = (($__v$i$i360) + 8|0);
    $1666 = HEAP32[$1665>>2]|0;
    $1667 = ($1666|0)==(0|0);
    if (!($1667)) {
     ;HEAP32[$1666+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$1666+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$1666+8>>2]=HEAP32[$41+8>>2]|0;
     ;HEAP32[$41+0>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
     $1668 = (($1666) + 12|0);
     ;HEAP32[$1668+0>>2]=HEAP32[$1638+0>>2]|0;HEAP32[$1668+4>>2]=HEAP32[$1638+4>>2]|0;HEAP32[$1668+8>>2]=HEAP32[$1638+8>>2]|0;
     ;HEAP32[$1638+0>>2]=0|0;HEAP32[$1638+4>>2]=0|0;HEAP32[$1638+8>>2]=0|0;
    }
    $1669 = (($1666) + 24|0);
    HEAP32[$1665>>2] = $1669;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i360);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i360);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
   $1670 = (($first) + 2|0);
   $$0 = $1670;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 114:  {
   $1673 = (($first) + 1|0);
   $1674 = HEAP8[$1673>>0]|0;
   $1675 = $1674 << 24 >> 24;
   if ((($1675|0) == 109)) {
    HEAP8[$42>>0] = 18;
    $1676 = (($42) + 1|0);
    dest=$1676+0|0; src=3080+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1677 = (($42) + 10|0);
    HEAP8[$1677>>0] = 0;
    $1678 = (($42) + 12|0);
    ;HEAP32[$1678+0>>2]=0|0;HEAP32[$1678+4>>2]=0|0;HEAP32[$1678+8>>2]=0|0;
    $1679 = (($db) + 4|0);
    $1680 = HEAP32[$1679>>2]|0;
    $1681 = (($db) + 8|0);
    $1682 = HEAP32[$1681>>2]|0;
    $1683 = ($1680>>>0)<($1682>>>0);
    if ($1683) {
     $1684 = ($1680|0)==(0|0);
     if ($1684) {
      $1687 = 0;
     } else {
      ;HEAP32[$1680+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$1680+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$1680+8>>2]=HEAP32[$42+8>>2]|0;
      ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;
      $1685 = (($1680) + 12|0);
      ;HEAP32[$1685+0>>2]=HEAP32[$1678+0>>2]|0;HEAP32[$1685+4>>2]=HEAP32[$1678+4>>2]|0;HEAP32[$1685+8>>2]=HEAP32[$1678+8>>2]|0;
      ;HEAP32[$1678+0>>2]=0|0;HEAP32[$1678+4>>2]=0|0;HEAP32[$1678+8>>2]=0|0;
      $$pre$i370 = HEAP32[$1679>>2]|0;
      $1687 = $$pre$i370;
     }
     $1686 = (($1687) + 24|0);
     HEAP32[$1679>>2] = $1686;
    } else {
     $1688 = (($db) + 12|0);
     $1689 = HEAP32[$db>>2]|0;
     $1690 = $1680;
     $1691 = $1689;
     $1692 = (($1690) - ($1691))|0;
     $1693 = (($1692|0) / 24)&-1;
     $1694 = (($1693) + 1)|0;
     $1695 = ($1694|0)<(0);
     if ($1695) {
      __THREW__ = 0;
      invoke_v(41);
      $1696 = __THREW__; __THREW__ = 0;
      $1697 = $1696&1;
      if (!($1697)) {
       // unreachable;
      }
      $1711 = ___cxa_find_matching_catch()|0;
      $1712 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
      $$02 = $1711;$$03 = $1712;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1698 = $1682;
     $1699 = (($1698) - ($1691))|0;
     $1700 = (($1699|0) / 24)&-1;
     $1701 = ($1700>>>0)<(1073741823);
     if ($1701) {
      $1702 = $1700 << 1;
      $1703 = ($1702>>>0)<($1694>>>0);
      $1704 = $1703 ? $1694 : $1702;
      $$0$i$i$i372 = $1704;
     } else {
      $$0$i$i$i372 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i369,$$0$i$i$i372,$1693,$1688);
     $1705 = (($__v$i$i369) + 8|0);
     $1706 = HEAP32[$1705>>2]|0;
     $1707 = ($1706|0)==(0|0);
     if (!($1707)) {
      ;HEAP32[$1706+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$1706+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$1706+8>>2]=HEAP32[$42+8>>2]|0;
      ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;
      $1708 = (($1706) + 12|0);
      ;HEAP32[$1708+0>>2]=HEAP32[$1678+0>>2]|0;HEAP32[$1708+4>>2]=HEAP32[$1678+4>>2]|0;HEAP32[$1708+8>>2]=HEAP32[$1678+8>>2]|0;
      ;HEAP32[$1678+0>>2]=0|0;HEAP32[$1678+4>>2]=0|0;HEAP32[$1678+8>>2]=0|0;
     }
     $1709 = (($1706) + 24|0);
     HEAP32[$1705>>2] = $1709;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i369);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i369);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
    $1710 = (($first) + 2|0);
    $$0 = $1710;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1675|0) == 77)) {
    HEAP8[$43>>0] = 20;
    $1713 = (($43) + 1|0);
    dest=$1713+0|0; src=3096+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1714 = (($43) + 11|0);
    HEAP8[$1714>>0] = 0;
    $1715 = (($43) + 12|0);
    ;HEAP32[$1715+0>>2]=0|0;HEAP32[$1715+4>>2]=0|0;HEAP32[$1715+8>>2]=0|0;
    $1716 = (($db) + 4|0);
    $1717 = HEAP32[$1716>>2]|0;
    $1718 = (($db) + 8|0);
    $1719 = HEAP32[$1718>>2]|0;
    $1720 = ($1717>>>0)<($1719>>>0);
    if ($1720) {
     $1721 = ($1717|0)==(0|0);
     if ($1721) {
      $1724 = 0;
     } else {
      ;HEAP32[$1717+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$1717+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$1717+8>>2]=HEAP32[$43+8>>2]|0;
      ;HEAP32[$43+0>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;
      $1722 = (($1717) + 12|0);
      ;HEAP32[$1722+0>>2]=HEAP32[$1715+0>>2]|0;HEAP32[$1722+4>>2]=HEAP32[$1715+4>>2]|0;HEAP32[$1722+8>>2]=HEAP32[$1715+8>>2]|0;
      ;HEAP32[$1715+0>>2]=0|0;HEAP32[$1715+4>>2]=0|0;HEAP32[$1715+8>>2]=0|0;
      $$pre$i379 = HEAP32[$1716>>2]|0;
      $1724 = $$pre$i379;
     }
     $1723 = (($1724) + 24|0);
     HEAP32[$1716>>2] = $1723;
    } else {
     $1725 = (($db) + 12|0);
     $1726 = HEAP32[$db>>2]|0;
     $1727 = $1717;
     $1728 = $1726;
     $1729 = (($1727) - ($1728))|0;
     $1730 = (($1729|0) / 24)&-1;
     $1731 = (($1730) + 1)|0;
     $1732 = ($1731|0)<(0);
     if ($1732) {
      __THREW__ = 0;
      invoke_v(41);
      $1733 = __THREW__; __THREW__ = 0;
      $1734 = $1733&1;
      if (!($1734)) {
       // unreachable;
      }
      $1748 = ___cxa_find_matching_catch()|0;
      $1749 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $$02 = $1748;$$03 = $1749;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1735 = $1719;
     $1736 = (($1735) - ($1728))|0;
     $1737 = (($1736|0) / 24)&-1;
     $1738 = ($1737>>>0)<(1073741823);
     if ($1738) {
      $1739 = $1737 << 1;
      $1740 = ($1739>>>0)<($1731>>>0);
      $1741 = $1740 ? $1731 : $1739;
      $$0$i$i$i381 = $1741;
     } else {
      $$0$i$i$i381 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i378,$$0$i$i$i381,$1730,$1725);
     $1742 = (($__v$i$i378) + 8|0);
     $1743 = HEAP32[$1742>>2]|0;
     $1744 = ($1743|0)==(0|0);
     if (!($1744)) {
      ;HEAP32[$1743+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$1743+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$1743+8>>2]=HEAP32[$43+8>>2]|0;
      ;HEAP32[$43+0>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;
      $1745 = (($1743) + 12|0);
      ;HEAP32[$1745+0>>2]=HEAP32[$1715+0>>2]|0;HEAP32[$1745+4>>2]=HEAP32[$1715+4>>2]|0;HEAP32[$1745+8>>2]=HEAP32[$1715+8>>2]|0;
      ;HEAP32[$1715+0>>2]=0|0;HEAP32[$1715+4>>2]=0|0;HEAP32[$1715+8>>2]=0|0;
     }
     $1746 = (($1743) + 24|0);
     HEAP32[$1742>>2] = $1746;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i378);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i378);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
    $1747 = (($first) + 2|0);
    $$0 = $1747;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1675|0) == 115)) {
    HEAP8[$44>>0] = 20;
    $1750 = (($44) + 1|0);
    dest=$1750+0|0; src=3112+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1751 = (($44) + 11|0);
    HEAP8[$1751>>0] = 0;
    $1752 = (($44) + 12|0);
    ;HEAP32[$1752+0>>2]=0|0;HEAP32[$1752+4>>2]=0|0;HEAP32[$1752+8>>2]=0|0;
    $1753 = (($db) + 4|0);
    $1754 = HEAP32[$1753>>2]|0;
    $1755 = (($db) + 8|0);
    $1756 = HEAP32[$1755>>2]|0;
    $1757 = ($1754>>>0)<($1756>>>0);
    if ($1757) {
     $1758 = ($1754|0)==(0|0);
     if ($1758) {
      $1761 = 0;
     } else {
      ;HEAP32[$1754+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$1754+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$1754+8>>2]=HEAP32[$44+8>>2]|0;
      ;HEAP32[$44+0>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;
      $1759 = (($1754) + 12|0);
      ;HEAP32[$1759+0>>2]=HEAP32[$1752+0>>2]|0;HEAP32[$1759+4>>2]=HEAP32[$1752+4>>2]|0;HEAP32[$1759+8>>2]=HEAP32[$1752+8>>2]|0;
      ;HEAP32[$1752+0>>2]=0|0;HEAP32[$1752+4>>2]=0|0;HEAP32[$1752+8>>2]=0|0;
      $$pre$i388 = HEAP32[$1753>>2]|0;
      $1761 = $$pre$i388;
     }
     $1760 = (($1761) + 24|0);
     HEAP32[$1753>>2] = $1760;
    } else {
     $1762 = (($db) + 12|0);
     $1763 = HEAP32[$db>>2]|0;
     $1764 = $1754;
     $1765 = $1763;
     $1766 = (($1764) - ($1765))|0;
     $1767 = (($1766|0) / 24)&-1;
     $1768 = (($1767) + 1)|0;
     $1769 = ($1768|0)<(0);
     if ($1769) {
      __THREW__ = 0;
      invoke_v(41);
      $1770 = __THREW__; __THREW__ = 0;
      $1771 = $1770&1;
      if (!($1771)) {
       // unreachable;
      }
      $1785 = ___cxa_find_matching_catch()|0;
      $1786 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
      $$02 = $1785;$$03 = $1786;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1772 = $1756;
     $1773 = (($1772) - ($1765))|0;
     $1774 = (($1773|0) / 24)&-1;
     $1775 = ($1774>>>0)<(1073741823);
     if ($1775) {
      $1776 = $1774 << 1;
      $1777 = ($1776>>>0)<($1768>>>0);
      $1778 = $1777 ? $1768 : $1776;
      $$0$i$i$i390 = $1778;
     } else {
      $$0$i$i$i390 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i387,$$0$i$i$i390,$1767,$1762);
     $1779 = (($__v$i$i387) + 8|0);
     $1780 = HEAP32[$1779>>2]|0;
     $1781 = ($1780|0)==(0|0);
     if (!($1781)) {
      ;HEAP32[$1780+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$1780+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$1780+8>>2]=HEAP32[$44+8>>2]|0;
      ;HEAP32[$44+0>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;
      $1782 = (($1780) + 12|0);
      ;HEAP32[$1782+0>>2]=HEAP32[$1752+0>>2]|0;HEAP32[$1782+4>>2]=HEAP32[$1752+4>>2]|0;HEAP32[$1782+8>>2]=HEAP32[$1752+8>>2]|0;
      ;HEAP32[$1752+0>>2]=0|0;HEAP32[$1752+4>>2]=0|0;HEAP32[$1752+8>>2]=0|0;
     }
     $1783 = (($1780) + 24|0);
     HEAP32[$1779>>2] = $1783;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i387);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i387);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
    $1784 = (($first) + 2|0);
    $$0 = $1784;
    STACKTOP = sp;return ($$0|0);
   } else if ((($1675|0) == 83)) {
    $1787 = (_malloc(16)|0);
    $1788 = (($45) + 8|0);
    HEAP32[$1788>>2] = $1787;
    HEAP32[$45>>2] = 17;
    $1789 = (($45) + 4|0);
    HEAP32[$1789>>2] = 11;
    dest=$1787+0|0; src=3128+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $1790 = (($1787) + 11|0);
    HEAP8[$1790>>0] = 0;
    $1791 = (($45) + 12|0);
    ;HEAP32[$1791+0>>2]=0|0;HEAP32[$1791+4>>2]=0|0;HEAP32[$1791+8>>2]=0|0;
    $1792 = (($db) + 4|0);
    $1793 = HEAP32[$1792>>2]|0;
    $1794 = (($db) + 8|0);
    $1795 = HEAP32[$1794>>2]|0;
    $1796 = ($1793>>>0)<($1795>>>0);
    if ($1796) {
     $1797 = ($1793|0)==(0|0);
     if ($1797) {
      $1800 = 0;
     } else {
      ;HEAP32[$1793+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$1793+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$1793+8>>2]=HEAP32[$45+8>>2]|0;
      ;HEAP32[$45+0>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;
      $1798 = (($1793) + 12|0);
      ;HEAP32[$1798+0>>2]=HEAP32[$1791+0>>2]|0;HEAP32[$1798+4>>2]=HEAP32[$1791+4>>2]|0;HEAP32[$1798+8>>2]=HEAP32[$1791+8>>2]|0;
      ;HEAP32[$1791+0>>2]=0|0;HEAP32[$1791+4>>2]=0|0;HEAP32[$1791+8>>2]=0|0;
      $$pre$i396 = HEAP32[$1792>>2]|0;
      $1800 = $$pre$i396;
     }
     $1799 = (($1800) + 24|0);
     HEAP32[$1792>>2] = $1799;
    } else {
     $1801 = (($db) + 12|0);
     $1802 = HEAP32[$db>>2]|0;
     $1803 = $1793;
     $1804 = $1802;
     $1805 = (($1803) - ($1804))|0;
     $1806 = (($1805|0) / 24)&-1;
     $1807 = (($1806) + 1)|0;
     $1808 = ($1807|0)<(0);
     if ($1808) {
      __THREW__ = 0;
      invoke_v(41);
      $1809 = __THREW__; __THREW__ = 0;
      $1810 = $1809&1;
      if (!($1810)) {
       // unreachable;
      }
      $1824 = ___cxa_find_matching_catch()|0;
      $1825 = tempRet0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $$02 = $1824;$$03 = $1825;
      ___resumeException($$02|0);
      // unreachable;
     }
     $1811 = $1795;
     $1812 = (($1811) - ($1804))|0;
     $1813 = (($1812|0) / 24)&-1;
     $1814 = ($1813>>>0)<(1073741823);
     if ($1814) {
      $1815 = $1813 << 1;
      $1816 = ($1815>>>0)<($1807>>>0);
      $1817 = $1816 ? $1807 : $1815;
      $$0$i$i$i398 = $1817;
     } else {
      $$0$i$i$i398 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i395,$$0$i$i$i398,$1806,$1801);
     $1818 = (($__v$i$i395) + 8|0);
     $1819 = HEAP32[$1818>>2]|0;
     $1820 = ($1819|0)==(0|0);
     if (!($1820)) {
      ;HEAP32[$1819+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$1819+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$1819+8>>2]=HEAP32[$45+8>>2]|0;
      ;HEAP32[$45+0>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;
      $1821 = (($1819) + 12|0);
      ;HEAP32[$1821+0>>2]=HEAP32[$1791+0>>2]|0;HEAP32[$1821+4>>2]=HEAP32[$1791+4>>2]|0;HEAP32[$1821+8>>2]=HEAP32[$1791+8>>2]|0;
      ;HEAP32[$1791+0>>2]=0|0;HEAP32[$1791+4>>2]=0|0;HEAP32[$1791+8>>2]=0|0;
     }
     $1822 = (($1819) + 24|0);
     HEAP32[$1818>>2] = $1822;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i395);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i395);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
    $1823 = (($first) + 2|0);
    $$0 = $1823;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 118:  {
   $1826 = (($first) + 1|0);
   $1827 = HEAP8[$1826>>0]|0;
   $1828 = $1827 << 24 >> 24;
   $isdigittmp = (($1828) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1829 = (($first) + 2|0);
   $1830 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1829,$last,$db)|0);
   $1831 = ($1830|0)==($1829|0);
   if ($1831) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1832 = HEAP32[$db>>2]|0;
   $1833 = (($db) + 4|0);
   $1834 = HEAP32[$1833>>2]|0;
   $1835 = ($1832|0)==($1834|0);
   if ($1835) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $1836 = (($1834) + -24|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($1836,0,2528,9)|0);
   $$0 = $1830;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $$0 = $first;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$lit,$db) {
 $first = $first|0;
 $last = $last|0;
 $lit = $lit|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i6 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$i = 0, $$pre$i5 = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i4 = 0, $or$cond = 0, $phitmp = 0, $phitmp7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i4 = sp + 60|0;
 $__v$i$i = sp + 40|0;
 $0 = sp + 16|0;
 $$sroa$5 = sp + 80|0;
 $1 = sp;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last)|0);
 $3 = ($2|0)==($first|0);
 $4 = ($2|0)==($last|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$1 = $first;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = HEAP8[$2>>0]|0;
 $6 = ($5<<24>>24)==(69);
 if (!($6)) {
  $$1 = $first;
  STACKTOP = sp;return ($$1|0);
 }
 $7 = HEAP8[$lit>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $12 = $7&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($lit) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>(3);
 L11: do {
  if ($14) {
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1,2008,$lit);
   __THREW__ = 0;
   $16 = (invoke_iiii(32,($1|0),(2000|0),1)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   do {
    if ($18) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $$0 = $60;$$01 = $59;
    } else {
     $19 = HEAP8[$16>>0]|0;
     $20 = (($16) + 1|0);
     ;HEAP8[$$sroa$5+0>>0]=HEAP8[$20+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$sroa$5+3>>0]=HEAP8[$20+3>>0]|0;HEAP8[$$sroa$5+4>>0]=HEAP8[$20+4>>0]|0;HEAP8[$$sroa$5+5>>0]=HEAP8[$20+5>>0]|0;HEAP8[$$sroa$5+6>>0]=HEAP8[$20+6>>0]|0;
     $21 = (($16) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
     HEAP8[$0>>0] = $19;
     $23 = (($0) + 1|0);
     ;HEAP8[$23+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$$sroa$5+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$$sroa$5+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$$sroa$5+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$$sroa$5+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$$sroa$5+6>>0]|0;
     $24 = (($0) + 8|0);
     HEAP32[$24>>2] = $22;
     ;HEAP8[$$sroa$5+0>>0]=0|0;HEAP8[$$sroa$5+1>>0]=0|0;HEAP8[$$sroa$5+2>>0]=0|0;HEAP8[$$sroa$5+3>>0]=0|0;HEAP8[$$sroa$5+4>>0]=0|0;HEAP8[$$sroa$5+5>>0]=0|0;HEAP8[$$sroa$5+6>>0]=0|0;
     $25 = (($0) + 12|0);
     ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
     $26 = (($db) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($db) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($27>>>0)<($29>>>0);
     if ($30) {
      $31 = ($27|0)==(0|0);
      if ($31) {
       $34 = 0;
      } else {
       ;HEAP32[$27+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$0+8>>2]|0;
       ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
       $32 = (($27) + 12|0);
       ;HEAP32[$32+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$25+8>>2]|0;
       ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
       $$pre$i = HEAP32[$26>>2]|0;
       $34 = $$pre$i;
      }
      $33 = (($34) + 24|0);
      HEAP32[$26>>2] = $33;
     } else {
      $35 = (($db) + 12|0);
      $36 = HEAP32[$db>>2]|0;
      $37 = $27;
      $38 = $36;
      $39 = (($37) - ($38))|0;
      $40 = (($39|0) / 24)&-1;
      $41 = (($40) + 1)|0;
      $42 = ($41|0)<(0);
      if ($42) {
       __THREW__ = 0;
       invoke_v(41);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $61 = ___cxa_find_matching_catch()|0;
        $62 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        $$0 = $62;$$01 = $61;
        break;
       } else {
        // unreachable;
       }
      }
      $45 = $29;
      $46 = (($45) - ($38))|0;
      $47 = (($46|0) / 24)&-1;
      $48 = ($47>>>0)<(1073741823);
      if ($48) {
       $49 = $47 << 1;
       $50 = ($49>>>0)<($41>>>0);
       $51 = $50 ? $41 : $49;
       $$0$i$i$i = $51;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$40,$35);
      $52 = (($__v$i$i) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       ;HEAP32[$53+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$0+8>>2]|0;
       ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
       $55 = (($53) + 12|0);
       ;HEAP32[$55+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$55+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$55+8>>2]=HEAP32[$25+8>>2]|0;
       ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      }
      $56 = (($53) + 24|0);
      HEAP32[$52>>2] = $56;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$pre = HEAP8[$1>>0]|0;
     $phitmp = $$pre & 1;
     $phitmp7 = ($phitmp<<24>>24)==(0);
     if ($phitmp7) {
      break L11;
     }
     $57 = (($1) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     _free($58);
     break L11;
    }
   } while(0);
   $63 = HEAP8[$1>>0]|0;
   $64 = $63 & 1;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    ___resumeException($$01|0);
    // unreachable;
   }
   $66 = (($1) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   _free($67);
   ___resumeException($$01|0);
   // unreachable;
  } else {
   $68 = (($db) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($db) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($69>>>0)<($71>>>0);
   if ($72) {
    $73 = ($69|0)==(0|0);
    if ($73) {
     $75 = 0;
    } else {
     ;HEAP32[$69+0>>2]=0|0;HEAP32[$69+4>>2]=0|0;HEAP32[$69+8>>2]=0|0;HEAP32[$69+12>>2]=0|0;HEAP32[$69+16>>2]=0|0;HEAP32[$69+20>>2]=0|0;
     $$pre$i5 = HEAP32[$68>>2]|0;
     $75 = $$pre$i5;
    }
    $74 = (($75) + 24|0);
    HEAP32[$68>>2] = $74;
    break;
   }
   $76 = (($db) + 12|0);
   $77 = HEAP32[$db>>2]|0;
   $78 = $69;
   $79 = $77;
   $80 = (($78) - ($79))|0;
   $81 = (($80|0) / 24)&-1;
   $82 = (($81) + 1)|0;
   $83 = ($82|0)<(0);
   if ($83) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   $84 = $71;
   $85 = (($84) - ($79))|0;
   $86 = (($85|0) / 24)&-1;
   $87 = ($86>>>0)<(1073741823);
   if ($87) {
    $88 = $86 << 1;
    $89 = ($88>>>0)<($82>>>0);
    $90 = $89 ? $82 : $88;
    $$0$i$i$i6 = $90;
   } else {
    $$0$i$i$i6 = 2147483647;
   }
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4,$$0$i$i$i6,$81,$76);
   $91 = (($__v$i$i4) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    ;HEAP32[$92+0>>2]=0|0;HEAP32[$92+4>>2]=0|0;HEAP32[$92+8>>2]=0|0;HEAP32[$92+12>>2]=0|0;HEAP32[$92+16>>2]=0|0;HEAP32[$92+20>>2]=0|0;
   }
   $94 = (($92) + 24|0);
   HEAP32[$91>>2] = $94;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i4);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
  }
 } while(0);
 $95 = HEAP8[$first>>0]|0;
 $96 = ($95<<24>>24)==(110);
 $97 = (($db) + 4|0);
 if ($96) {
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + -24|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($99,45);
  $100 = (($first) + 1|0);
  $$02 = $100;
 } else {
  $$02 = $first;
 }
 $101 = HEAP32[$97>>2]|0;
 $102 = (($101) + -24|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($102,$$02,$2);
 $103 = HEAP8[$lit>>0]|0;
 $104 = $103 & 1;
 $105 = ($104<<24>>24)==(0);
 if ($105) {
  $108 = $103&255;
  $109 = $108 >>> 1;
  $111 = $109;
 } else {
  $106 = (($lit) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $111 = $107;
 }
 $110 = ($111>>>0)<(4);
 if ($110) {
  $112 = HEAP32[$97>>2]|0;
  $113 = (($112) + -24|0);
  if ($105) {
   $118 = (($lit) + 1|0);
   $119 = $103&255;
   $120 = $119 >>> 1;
   $121 = $118;$122 = $120;
  } else {
   $114 = (($lit) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($lit) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $121 = $115;$122 = $117;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($113,$121,$122)|0);
 }
 $123 = (($2) + 1|0);
 $$1 = $123;
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $args3 = 0, $first$ = 0, $t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $args3 = sp;
 $0 = $last;
 $1 = $first;
 $2 = (($0) - ($1))|0;
 $3 = ($2|0)>(1);
 if (!($3)) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP8[$first>>0]|0;
 if ((($4<<24>>24) == 100) | (($4<<24>>24) == 111)) {
  $5 = (($first) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(110);
  if ($7) {
   $8 = ($4<<24>>24)==(111);
   $9 = (($first) + 2|0);
   if (!($8)) {
    $50 = ($9|0)==($last|0);
    if ($50) {
     $$0$i = $last;
     $60 = ($$0$i|0)==($9|0);
     $first$ = $60 ? $first : $$0$i;
     STACKTOP = sp;return ($first$|0);
    }
    $51 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
    $52 = ($51|0)==($9|0);
    if ($52) {
     $53 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
     $t$0$i = $53;
    } else {
     $t$0$i = $51;
    }
    $54 = ($t$0$i|0)==($9|0);
    if ($54) {
     $$0$i = $9;
     $60 = ($$0$i|0)==($9|0);
     $first$ = $60 ? $first : $$0$i;
     STACKTOP = sp;return ($first$|0);
    }
    $55 = HEAP32[$db>>2]|0;
    $56 = (($db) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $$0$i = $9;
     $60 = ($$0$i|0)==($9|0);
     $first$ = $60 ? $first : $$0$i;
     STACKTOP = sp;return ($first$|0);
    }
    $59 = (($57) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($59,0,2144,1)|0);
    $$0$i = $t$0$i;
    $60 = ($$0$i|0)==($9|0);
    $first$ = $60 ? $first : $$0$i;
    STACKTOP = sp;return ($first$|0);
   }
   $10 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
   $11 = ($10|0)==($9|0);
   if ($11) {
    $$0 = $first;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10,$last,$db)|0);
   $13 = ($12|0)==($10|0);
   if ($13) {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
   $14 = (($db) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$db>>2]|0;
   $17 = $15;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = (($19|0) / 24)&-1;
   $21 = ($20>>>0)<(2);
   if ($21) {
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = (($15) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$22);
   $23 = HEAP32[$14>>2]|0;
   $24 = (($23) + -24|0);
   $26 = $23;
   while(1) {
    $25 = (($26) + -24|0);
    HEAP32[$14>>2] = $25;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==($24|0);
    if ($28) {
     break;
    } else {
     $26 = $27;
    }
   }
   $29 = (($23) + -48|0);
   $30 = HEAP8[$args>>0]|0;
   $31 = $30 & 1;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $37 = (($args) + 1|0);
    $38 = $30&255;
    $39 = $38 >>> 1;
    $40 = $37;$41 = $39;
   } else {
    $33 = (($args) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($args) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $40 = $34;$41 = $36;
   }
   __THREW__ = 0;
   (invoke_iiii(32,($29|0),($40|0),($41|0))|0);
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $46 = ___cxa_find_matching_catch()|0;
    $47 = tempRet0;
    if ($32) {
     $$01 = $47;$$02 = $46;
     ___resumeException($$02|0);
     // unreachable;
    }
    $48 = (($args) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    _free($49);
    $$01 = $47;$$02 = $46;
    ___resumeException($$02|0);
    // unreachable;
   } else {
    if ($32) {
     $$0 = $12;
     STACKTOP = sp;return ($$0|0);
    }
    $44 = (($args) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    _free($45);
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $61 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $62 = ($61|0)==($first|0);
 if (!($62)) {
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $64 = ($63|0)==($first|0);
 if ($64) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($63,$last,$db)|0);
 $66 = ($65|0)==($63|0);
 if ($66) {
  $$0 = $63;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = (($db) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$db>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 24)&-1;
 $74 = ($73>>>0)<(2);
 if ($74) {
  $$0 = $65;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = (($68) + -24|0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3,$75);
 $76 = HEAP32[$67>>2]|0;
 $77 = (($76) + -24|0);
 $79 = $76;
 while(1) {
  $78 = (($79) + -24|0);
  HEAP32[$67>>2] = $78;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
  $80 = HEAP32[$67>>2]|0;
  $81 = ($80|0)==($77|0);
  if ($81) {
   break;
  } else {
   $79 = $80;
  }
 }
 $82 = (($76) + -48|0);
 $83 = HEAP8[$args3>>0]|0;
 $84 = $83 & 1;
 $85 = ($84<<24>>24)==(0);
 if ($85) {
  $90 = (($args3) + 1|0);
  $91 = $83&255;
  $92 = $91 >>> 1;
  $93 = $90;$94 = $92;
 } else {
  $86 = (($args3) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($args3) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $93 = $87;$94 = $89;
 }
 __THREW__ = 0;
 (invoke_iiii(32,($82|0),($93|0),($94|0))|0);
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $99 = ___cxa_find_matching_catch()|0;
  $100 = tempRet0;
  if ($85) {
   $$01 = $100;$$02 = $99;
   ___resumeException($$02|0);
   // unreachable;
  }
  $101 = (($args3) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  _free($102);
  $$01 = $100;$$02 = $99;
  ___resumeException($$02|0);
  // unreachable;
 } else {
  if ($85) {
   $$0 = $65;
   STACKTOP = sp;return ($$0|0);
  }
  $97 = (($args3) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  _free($98);
  $$0 = $65;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$0$i$i$i8 = 0, $$01 = 0, $$02 = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i13 = 0, $__v$i$i5 = 0, $k1$021 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i13 = sp + 104|0;
 $__v$i$i5 = sp + 60|0;
 $__v$i$i = sp + 16|0;
 $0 = sp + 40|0;
 $1 = sp + 124|0;
 $2 = sp;
 $3 = sp + 56|0;
 $4 = sp + 88|0;
 $5 = sp + 80|0;
 $6 = ($first|0)==($last|0);
 if ($6) {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 $7 = HEAP8[$first>>0]|0;
 $8 = $7 << 24 >> 24;
 if ((($8|0) == 68)) {
  $90 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $91 = ($90|0)==($first|0);
  if ($91) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $92 = HEAP32[$db>>2]|0;
  $93 = (($db) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92|0)==($94|0);
  if ($95) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $96 = (($db) + 16|0);
  $97 = (($94) + -24|0);
  $98 = (($db) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$3>>2] = $99;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2,$97,$3);
  $100 = (($db) + 20|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($db) + 24|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($101>>>0)<($103>>>0);
  if ($104) {
   $105 = ($101|0)==(0|0);
   if ($105) {
    $117 = 0;
   } else {
    $106 = (($101) + 4|0);
    $107 = (($2) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($101) + 8|0);
    $110 = (($101) + 12|0);
    HEAP32[$110>>2] = $108;
    $111 = HEAP32[$2>>2]|0;
    HEAP32[$101>>2] = $111;
    $112 = (($2) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    HEAP32[$106>>2] = $113;
    $114 = (($2) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$109>>2] = $115;
    HEAP32[$114>>2] = 0;
    HEAP32[$112>>2] = 0;
    HEAP32[$2>>2] = 0;
    $$pre$i6 = HEAP32[$100>>2]|0;
    $117 = $$pre$i6;
   }
   $116 = (($117) + 16|0);
   HEAP32[$100>>2] = $116;
  } else {
   $118 = (($db) + 28|0);
   $119 = HEAP32[$96>>2]|0;
   $120 = $101;
   $121 = $119;
   $122 = (($120) - ($121))|0;
   $123 = $122 >> 4;
   $124 = (($123) + 1)|0;
   $125 = ($124|0)<(0);
   if ($125) {
    __THREW__ = 0;
    invoke_v(41);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if (!($127)) {
     // unreachable;
    }
    $149 = ___cxa_find_matching_catch()|0;
    $150 = tempRet0;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
    $$0 = $150;$$01 = $149;
    ___resumeException($$01|0);
    // unreachable;
   }
   $128 = $103;
   $129 = (($128) - ($121))|0;
   $130 = $129 >> 4;
   $131 = ($130>>>0)<(1073741823);
   if ($131) {
    $132 = $129 >> 3;
    $133 = ($132>>>0)<($124>>>0);
    $134 = $133 ? $124 : $132;
    $$0$i$i$i8 = $134;
   } else {
    $$0$i$i$i8 = 2147483647;
   }
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i5,$$0$i$i$i8,$123,$118);
   $135 = (($__v$i$i5) + 8|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)==(0|0);
   if (!($137)) {
    $138 = (($136) + 4|0);
    $139 = (($2) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($136) + 8|0);
    $142 = (($136) + 12|0);
    HEAP32[$142>>2] = $140;
    $143 = HEAP32[$2>>2]|0;
    HEAP32[$136>>2] = $143;
    $144 = (($2) + 4|0);
    $145 = HEAP32[$144>>2]|0;
    HEAP32[$138>>2] = $145;
    $146 = (($2) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    HEAP32[$141>>2] = $147;
    HEAP32[$146>>2] = 0;
    HEAP32[$144>>2] = 0;
    HEAP32[$2>>2] = 0;
   }
   $148 = (($136) + 16|0);
   HEAP32[$135>>2] = $148;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($96,$__v$i$i5);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i5);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  $$02 = $90;
  STACKTOP = sp;return ($$02|0);
 } else if ((($8|0) == 84)) {
  $9 = (($db) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$db>>2]|0;
  $12 = $10;
  $13 = $11;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 24)&-1;
  $16 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $17 = HEAP32[$9>>2]|0;
  $18 = HEAP32[$db>>2]|0;
  $19 = $17;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($21|0) / 24)&-1;
  $23 = ($16|0)!=($first|0);
  $24 = (($15) + 1)|0;
  $25 = ($22|0)==($24|0);
  $or$cond = $23 & $25;
  if (!($or$cond)) {
   $26 = ($22|0)==($15|0);
   if ($26) {
    $$02 = $first;
    STACKTOP = sp;return ($$02|0);
   } else {
    $83 = $17;$k1$021 = $22;
   }
   while(1) {
    $82 = (($83) + -24|0);
    $85 = $83;
    while(1) {
     $84 = (($85) + -24|0);
     HEAP32[$9>>2] = $84;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84);
     $86 = HEAP32[$9>>2]|0;
     $87 = ($86|0)==($82|0);
     if ($87) {
      break;
     } else {
      $85 = $86;
     }
    }
    $88 = (($k1$021) + -1)|0;
    $89 = ($88|0)==($15|0);
    if ($89) {
     $$02 = $first;
     break;
    } else {
     $83 = $82;$k1$021 = $88;
    }
   }
   STACKTOP = sp;return ($$02|0);
  }
  $27 = (($db) + 16|0);
  $28 = (($17) + -24|0);
  $29 = (($db) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$1>>2] = $30;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0,$28,$1);
  $31 = (($db) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($db) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32>>>0)<($34>>>0);
  if ($35) {
   $36 = ($32|0)==(0|0);
   if ($36) {
    $48 = 0;
   } else {
    $37 = (($32) + 4|0);
    $38 = (($0) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($32) + 8|0);
    $41 = (($32) + 12|0);
    HEAP32[$41>>2] = $39;
    $42 = HEAP32[$0>>2]|0;
    HEAP32[$32>>2] = $42;
    $43 = (($0) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    HEAP32[$37>>2] = $44;
    $45 = (($0) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    HEAP32[$40>>2] = $46;
    HEAP32[$45>>2] = 0;
    HEAP32[$43>>2] = 0;
    HEAP32[$0>>2] = 0;
    $$pre$i = HEAP32[$31>>2]|0;
    $48 = $$pre$i;
   }
   $47 = (($48) + 16|0);
   HEAP32[$31>>2] = $47;
  } else {
   $49 = (($db) + 28|0);
   $50 = HEAP32[$27>>2]|0;
   $51 = $32;
   $52 = $50;
   $53 = (($51) - ($52))|0;
   $54 = $53 >> 4;
   $55 = (($54) + 1)|0;
   $56 = ($55|0)<(0);
   if ($56) {
    __THREW__ = 0;
    invoke_v(41);
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if (!($58)) {
     // unreachable;
    }
    $80 = ___cxa_find_matching_catch()|0;
    $81 = tempRet0;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
    $$0 = $81;$$01 = $80;
    ___resumeException($$01|0);
    // unreachable;
   }
   $59 = $34;
   $60 = (($59) - ($52))|0;
   $61 = $60 >> 4;
   $62 = ($61>>>0)<(1073741823);
   if ($62) {
    $63 = $60 >> 3;
    $64 = ($63>>>0)<($55>>>0);
    $65 = $64 ? $55 : $63;
    $$0$i$i$i = $65;
   } else {
    $$0$i$i$i = 2147483647;
   }
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$54,$49);
   $66 = (($__v$i$i) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    $69 = (($67) + 4|0);
    $70 = (($0) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($67) + 8|0);
    $73 = (($67) + 12|0);
    HEAP32[$73>>2] = $71;
    $74 = HEAP32[$0>>2]|0;
    HEAP32[$67>>2] = $74;
    $75 = (($0) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    HEAP32[$69>>2] = $76;
    $77 = (($0) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    HEAP32[$72>>2] = $78;
    HEAP32[$77>>2] = 0;
    HEAP32[$75>>2] = 0;
    HEAP32[$0>>2] = 0;
   }
   $79 = (($67) + 16|0);
   HEAP32[$66>>2] = $79;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($27,$__v$i$i);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
  $$02 = $16;
  STACKTOP = sp;return ($$02|0);
 } else if ((($8|0) == 83)) {
  $151 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $152 = ($151|0)==($first|0);
  if (!($152)) {
   $$02 = $151;
   STACKTOP = sp;return ($$02|0);
  }
  $153 = $last;
  $154 = $first;
  $155 = (($153) - ($154))|0;
  $156 = ($155|0)>(2);
  if (!($156)) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $157 = (($first) + 1|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = ($158<<24>>24)==(116);
  if (!($159)) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $160 = (($first) + 2|0);
  $161 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($160,$last,$db)|0);
  $162 = ($161|0)==($160|0);
  if ($162) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $163 = HEAP32[$db>>2]|0;
  $164 = (($db) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ($163|0)==($165|0);
  if ($166) {
   $$02 = $first;
   STACKTOP = sp;return ($$02|0);
  }
  $167 = (($165) + -24|0);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($167,0,2408,5)|0);
  $168 = (($db) + 16|0);
  $169 = HEAP32[$164>>2]|0;
  $170 = (($169) + -24|0);
  $171 = (($db) + 12|0);
  $172 = HEAP32[$171>>2]|0;
  HEAP32[$5>>2] = $172;
  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$170,$5);
  $173 = (($db) + 20|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($db) + 24|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174>>>0)<($176>>>0);
  if ($177) {
   $178 = ($174|0)==(0|0);
   if ($178) {
    $190 = 0;
   } else {
    $179 = (($174) + 4|0);
    $180 = (($4) + 12|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($174) + 8|0);
    $183 = (($174) + 12|0);
    HEAP32[$183>>2] = $181;
    $184 = HEAP32[$4>>2]|0;
    HEAP32[$174>>2] = $184;
    $185 = (($4) + 4|0);
    $186 = HEAP32[$185>>2]|0;
    HEAP32[$179>>2] = $186;
    $187 = (($4) + 8|0);
    $188 = HEAP32[$187>>2]|0;
    HEAP32[$182>>2] = $188;
    HEAP32[$187>>2] = 0;
    HEAP32[$185>>2] = 0;
    HEAP32[$4>>2] = 0;
    $$pre$i14 = HEAP32[$173>>2]|0;
    $190 = $$pre$i14;
   }
   $189 = (($190) + 16|0);
   HEAP32[$173>>2] = $189;
  } else {
   $191 = (($db) + 28|0);
   $192 = HEAP32[$168>>2]|0;
   $193 = $174;
   $194 = $192;
   $195 = (($193) - ($194))|0;
   $196 = $195 >> 4;
   $197 = (($196) + 1)|0;
   $198 = ($197|0)<(0);
   if ($198) {
    __THREW__ = 0;
    invoke_v(41);
    $199 = __THREW__; __THREW__ = 0;
    $200 = $199&1;
    if (!($200)) {
     // unreachable;
    }
    $222 = ___cxa_find_matching_catch()|0;
    $223 = tempRet0;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
    $$0 = $223;$$01 = $222;
    ___resumeException($$01|0);
    // unreachable;
   }
   $201 = $176;
   $202 = (($201) - ($194))|0;
   $203 = $202 >> 4;
   $204 = ($203>>>0)<(1073741823);
   if ($204) {
    $205 = $202 >> 3;
    $206 = ($205>>>0)<($197>>>0);
    $207 = $206 ? $197 : $205;
    $$0$i$i$i16 = $207;
   } else {
    $$0$i$i$i16 = 2147483647;
   }
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i13,$$0$i$i$i16,$196,$191);
   $208 = (($__v$i$i13) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($209|0)==(0|0);
   if (!($210)) {
    $211 = (($209) + 4|0);
    $212 = (($4) + 12|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = (($209) + 8|0);
    $215 = (($209) + 12|0);
    HEAP32[$215>>2] = $213;
    $216 = HEAP32[$4>>2]|0;
    HEAP32[$209>>2] = $216;
    $217 = (($4) + 4|0);
    $218 = HEAP32[$217>>2]|0;
    HEAP32[$211>>2] = $218;
    $219 = (($4) + 8|0);
    $220 = HEAP32[$219>>2]|0;
    HEAP32[$214>>2] = $220;
    HEAP32[$219>>2] = 0;
    HEAP32[$217>>2] = 0;
    HEAP32[$4>>2] = 0;
   }
   $221 = (($209) + 16|0);
   HEAP32[$208>>2] = $221;
   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($168,$__v$i$i13);
   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i13);
  }
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
  $$02 = $161;
  STACKTOP = sp;return ($$02|0);
 } else {
  $$02 = $first;
  STACKTOP = sp;return ($$02|0);
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $2 = ($1|0)==($first|0);
 if ($2) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1,$last,$db)|0);
 $4 = ($3|0)==($1|0);
 if ($4) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($db) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$db>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 $12 = ($11>>>0)<(2);
 if ($12) {
  $$0 = $first;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($6) + -24|0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$13);
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + -24|0);
 $17 = $14;
 while(1) {
  $16 = (($17) + -24|0);
  HEAP32[$5>>2] = $16;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
  $18 = HEAP32[$5>>2]|0;
  $19 = ($18|0)==($15|0);
  if ($19) {
   break;
  } else {
   $17 = $18;
  }
 }
 $20 = (($14) + -48|0);
 $21 = HEAP8[$args>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $28 = (($args) + 1|0);
  $29 = $21&255;
  $30 = $29 >>> 1;
  $31 = $28;$32 = $30;
 } else {
  $24 = (($args) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($args) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $31 = $25;$32 = $27;
 }
 __THREW__ = 0;
 (invoke_iiii(32,($20|0),($31|0),($32|0))|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  if ($23) {
   ___resumeException($37|0);
   // unreachable;
  }
  $39 = (($args) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
  ___resumeException($37|0);
  // unreachable;
 } else {
  if ($23) {
   $$0 = $3;
   STACKTOP = sp;return ($$0|0);
  }
  $35 = (($args) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  _free($36);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[5536>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((5536 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((5536 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[5536>>2] = $22;
     } else {
      $23 = HEAP32[((5536 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((5536 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((5536 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((5536 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[5536>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((5536 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((5536 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((5536 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((5536 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[5536>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[5536>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((5536 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((5536 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((5536 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((5536 + 8|0))>>2] = $81;
     HEAP32[((5536 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((5536 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((5536 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((5536 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((5536 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((5536 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((5536 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((5536 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((5536 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((5536 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((5536 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((5536 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((5536 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[5536>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[5536>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((5536 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((5536 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((5536 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((5536 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((5536 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((5536 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((5536 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((5536 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((5536 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((5536 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((5536 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((5536 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((5536 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((5536 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((5536 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((5536 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((5536 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[5536>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[5536>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((5536 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((5536 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((5536 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((5536 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((5536 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((5536 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L224;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((5536 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((5536 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((5536 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((5536 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((5536 + 20|0))>>2] = $514;
   HEAP32[((5536 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((5536 + 8|0))>>2] = 0;
   HEAP32[((5536 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((5536 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((5536 + 12|0))>>2] = $528;
  $529 = HEAP32[((5536 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((5536 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[6008>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((6008 + 8|0))>>2] = $538;
    HEAP32[((6008 + 4|0))>>2] = $538;
    HEAP32[((6008 + 12|0))>>2] = -1;
    HEAP32[((6008 + 16|0))>>2] = -1;
    HEAP32[((6008 + 20|0))>>2] = 0;
    HEAP32[((5536 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[6008>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((6008 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((5536 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((5536 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((5536 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((5536 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((5536 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((5536 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((6008 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((5536 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((5536 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((6008 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((5536 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((5536 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((5536 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((5536 + 432|0))>>2] = $633;
  $634 = HEAP32[((5536 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((5536 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((5536 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((5536 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((5536 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((5536 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((5536 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((5536 + 460|0))>>2] = 0;
    $641 = HEAP32[6008>>2]|0;
    HEAP32[((5536 + 36|0))>>2] = $641;
    HEAP32[((5536 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((5536 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((5536 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((5536 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((5536 + 24|0))>>2] = $654;
    HEAP32[((5536 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((6008 + 16|0))>>2]|0;
    HEAP32[((5536 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((5536 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((5536 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((5536 + 24|0))>>2] = $684;
       HEAP32[((5536 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((6008 + 16|0))>>2]|0;
       HEAP32[((5536 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((5536 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((5536 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((5536 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L335: do {
       if ($729) {
        $730 = HEAP32[((5536 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((5536 + 12|0))>>2] = $731;
        HEAP32[((5536 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((5536 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((5536 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((5536 + 8|0))>>2] = $737;
         HEAP32[((5536 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L343: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((5536 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[5536>>2]|0;
            $764 = $763 & $762;
            HEAP32[5536>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((5536 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((5536 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((5536 + 4|0))>>2] = $807;
             break L343;
            } else {
             $808 = HEAP32[((5536 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L343;
             }
            }
           } while(0);
           $815 = HEAP32[((5536 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((5536 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((5536 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[5536>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[5536>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((5536 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((5536 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((5536 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((5536 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((5536 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((5536 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L432: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L432;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((5536 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L335;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((5536 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((5536 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((5536 + 24|0))>>2] = $953;
    HEAP32[((5536 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((6008 + 16|0))>>2]|0;
    HEAP32[((5536 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((5536 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((5536 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((5536 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((5536 + 448|0))+12>>2]|0;
    HEAP32[((5536 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((5536 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((5536 + 460|0))>>2] = 0;
    HEAP32[((5536 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((5536 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[5536>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[5536>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((5536 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((5536 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((5536 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((5536 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((5536 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((5536 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L483: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L483;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((5536 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((5536 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((5536 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((5536 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((5536 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((5536 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((5536 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((5536 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((5536 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((5536 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[5536>>2]|0;
     $36 = $35 & $34;
     HEAP32[5536>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((5536 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((5536 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((5536 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((5536 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((5536 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((5536 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((5536 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((5536 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((5536 + 12|0))>>2] = $120;
   HEAP32[((5536 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((5536 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((5536 + 20|0))>>2] = 0;
   HEAP32[((5536 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((5536 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((5536 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((5536 + 8|0))>>2] = $128;
   HEAP32[((5536 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((5536 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((5536 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[5536>>2]|0;
     $152 = $151 & $150;
     HEAP32[5536>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((5536 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((5536 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((5536 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((5536 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((5536 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((5536 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((5536 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((5536 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((5536 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((5536 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((5536 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((5536 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[5536>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[5536>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((5536 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((5536 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((5536 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((5536 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((5536 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((5536 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L204: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L204;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((5536 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((5536 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((5536 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((5536 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((5536 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((5536 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19$i25 = 0, $$sum2 = 0, $$sum22 = 0, $$sum22$i29 = 0, $$sum23 = 0, $$sum23$i3 = 0, $$sum24 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum2728$i = 0, $$sum28 = 0, $$sum30 = 0, $$sum4 = 0, $$sum5 = 0, $$sum5$i13 = 0, $$sum78$i = 0, $$sum9 = 0, $$sum910$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $cond$i = 0, $mem$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond30$i = 0, $storemerge$i = 0, $storemerge21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  STACKTOP = sp;return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $21 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $21 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $8 = (($oldmem) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -8;
 $$sum = (($10) + -8)|0;
 $11 = (($oldmem) + ($$sum)|0);
 $12 = HEAP32[((5536 + 16|0))>>2]|0;
 $13 = $9 & 3;
 $notlhs$i = ($7>>>0)>=($12>>>0);
 $notrhs$i = ($13|0)!=(1);
 $or$cond$not$i = $notrhs$i & $notlhs$i;
 $14 = ($$sum|0)>(-8);
 $or$cond30$i = $or$cond$not$i & $14;
 if (!($or$cond30$i)) {
  _abort();
  // unreachable;
 }
 $$sum2728$i = $10 | 4;
 $$sum1 = (($$sum2728$i) + -8)|0;
 $15 = (($oldmem) + ($$sum1)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = ($13|0)==(0);
 do {
  if ($19) {
   $20 = ($21>>>0)<(256);
   $22 = $21 | 4;
   $23 = ($10>>>0)<($22>>>0);
   $or$cond = $20 | $23;
   if (!($or$cond)) {
    $24 = (($10) - ($21))|0;
    $25 = HEAP32[((6008 + 8|0))>>2]|0;
    $26 = $25 << 1;
    $27 = ($24>>>0)>($26>>>0);
    if (!($27)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
   }
  } else {
   $28 = ($10>>>0)<($21>>>0);
   if (!($28)) {
    $29 = (($10) - ($21))|0;
    $30 = ($29>>>0)>(15);
    if (!($30)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
    $$sum2 = (($21) + -8)|0;
    $31 = (($oldmem) + ($$sum2)|0);
    $32 = $9 & 1;
    $33 = $32 | $21;
    $34 = $33 | 2;
    HEAP32[$8>>2] = $34;
    $$sum23$i3 = $21 | 4;
    $$sum4 = (($$sum23$i3) + -8)|0;
    $35 = (($oldmem) + ($$sum4)|0);
    $36 = $29 | 3;
    HEAP32[$35>>2] = $36;
    $37 = HEAP32[$15>>2]|0;
    $38 = $37 | 1;
    HEAP32[$15>>2] = $38;
    _dispose_chunk($31,$29);
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $39 = HEAP32[((5536 + 24|0))>>2]|0;
   $40 = ($11|0)==($39|0);
   if ($40) {
    $41 = HEAP32[((5536 + 12|0))>>2]|0;
    $42 = (($41) + ($10))|0;
    $43 = ($42>>>0)>($21>>>0);
    if (!($43)) {
     break;
    }
    $44 = (($42) - ($21))|0;
    $$sum28 = (($21) + -8)|0;
    $45 = (($oldmem) + ($$sum28)|0);
    $46 = $9 & 1;
    $47 = $46 | $21;
    $48 = $47 | 2;
    HEAP32[$8>>2] = $48;
    $$sum22$i29 = $21 | 4;
    $$sum30 = (($$sum22$i29) + -8)|0;
    $49 = (($oldmem) + ($$sum30)|0);
    $50 = $44 | 1;
    HEAP32[$49>>2] = $50;
    HEAP32[((5536 + 24|0))>>2] = $45;
    HEAP32[((5536 + 12|0))>>2] = $44;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $51 = HEAP32[((5536 + 20|0))>>2]|0;
   $52 = ($11|0)==($51|0);
   if ($52) {
    $53 = HEAP32[((5536 + 8|0))>>2]|0;
    $54 = (($53) + ($10))|0;
    $55 = ($54>>>0)<($21>>>0);
    if ($55) {
     break;
    }
    $56 = (($54) - ($21))|0;
    $57 = ($56>>>0)>(15);
    if ($57) {
     $$sum23 = (($21) + -8)|0;
     $58 = (($oldmem) + ($$sum23)|0);
     $$sum24 = (($54) + -8)|0;
     $59 = (($oldmem) + ($$sum24)|0);
     $60 = $9 & 1;
     $61 = $60 | $21;
     $62 = $61 | 2;
     HEAP32[$8>>2] = $62;
     $$sum19$i25 = $21 | 4;
     $$sum26 = (($$sum19$i25) + -8)|0;
     $63 = (($oldmem) + ($$sum26)|0);
     $64 = $56 | 1;
     HEAP32[$63>>2] = $64;
     HEAP32[$59>>2] = $56;
     $$sum27 = (($54) + -4)|0;
     $65 = (($oldmem) + ($$sum27)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $66 & -2;
     HEAP32[$65>>2] = $67;
     $storemerge$i = $58;$storemerge21$i = $56;
    } else {
     $68 = $9 & 1;
     $69 = $68 | $54;
     $70 = $69 | 2;
     HEAP32[$8>>2] = $70;
     $$sum22 = (($54) + -4)|0;
     $71 = (($oldmem) + ($$sum22)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 | 1;
     HEAP32[$71>>2] = $73;
     $storemerge$i = 0;$storemerge21$i = 0;
    }
    HEAP32[((5536 + 8|0))>>2] = $storemerge21$i;
    HEAP32[((5536 + 20|0))>>2] = $storemerge$i;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $74 = $16 & 2;
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = $16 & -8;
    $77 = (($76) + ($10))|0;
    $78 = ($77>>>0)<($21>>>0);
    if (!($78)) {
     $79 = (($77) - ($21))|0;
     $80 = $16 >>> 3;
     $81 = ($16>>>0)<(256);
     do {
      if ($81) {
       $82 = (($oldmem) + ($10)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($oldmem) + ($$sum2728$i)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $80 << 1;
       $87 = ((5536 + ($86<<2)|0) + 40|0);
       $88 = ($83|0)==($87|0);
       if (!($88)) {
        $89 = ($83>>>0)<($12>>>0);
        if ($89) {
         _abort();
         // unreachable;
        }
        $90 = (($83) + 12|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==($11|0);
        if (!($92)) {
         _abort();
         // unreachable;
        }
       }
       $93 = ($85|0)==($83|0);
       if ($93) {
        $94 = 1 << $80;
        $95 = $94 ^ -1;
        $96 = HEAP32[5536>>2]|0;
        $97 = $96 & $95;
        HEAP32[5536>>2] = $97;
        break;
       }
       $98 = ($85|0)==($87|0);
       if ($98) {
        $$pre$i = (($85) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $99 = ($85>>>0)<($12>>>0);
        if ($99) {
         _abort();
         // unreachable;
        }
        $100 = (($85) + 8|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)==($11|0);
        if ($102) {
         $$pre$phi$iZ2D = $100;
        } else {
         _abort();
         // unreachable;
        }
       }
       $103 = (($83) + 12|0);
       HEAP32[$103>>2] = $85;
       HEAP32[$$pre$phi$iZ2D>>2] = $83;
      } else {
       $$sum5 = (($10) + 16)|0;
       $104 = (($oldmem) + ($$sum5)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($oldmem) + ($$sum2728$i)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)==($11|0);
       do {
        if ($108) {
         $$sum17 = (($10) + 12)|0;
         $118 = (($oldmem) + ($$sum17)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ($119|0)==(0|0);
         if ($120) {
          $$sum18 = (($10) + 8)|0;
          $121 = (($oldmem) + ($$sum18)|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = ($122|0)==(0|0);
          if ($123) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $122;$RP$0$i = $121;
          }
         } else {
          $R$0$i = $119;$RP$0$i = $118;
         }
         while(1) {
          $124 = (($R$0$i) + 20|0);
          $125 = HEAP32[$124>>2]|0;
          $126 = ($125|0)==(0|0);
          if (!($126)) {
           $R$0$i = $125;$RP$0$i = $124;
           continue;
          }
          $127 = (($R$0$i) + 16|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = ($128|0)==(0|0);
          if ($129) {
           break;
          } else {
           $R$0$i = $128;$RP$0$i = $127;
          }
         }
         $130 = ($RP$0$i>>>0)<($12>>>0);
         if ($130) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i>>2] = 0;
          $R$1$i = $R$0$i;
          break;
         }
        } else {
         $109 = (($oldmem) + ($10)|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($110>>>0)<($12>>>0);
         if ($111) {
          _abort();
          // unreachable;
         }
         $112 = (($110) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = ($113|0)==($11|0);
         if (!($114)) {
          _abort();
          // unreachable;
         }
         $115 = (($107) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = ($116|0)==($11|0);
         if ($117) {
          HEAP32[$112>>2] = $107;
          HEAP32[$115>>2] = $110;
          $R$1$i = $107;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $131 = ($105|0)==(0|0);
       if (!($131)) {
        $$sum9 = (($10) + 20)|0;
        $132 = (($oldmem) + ($$sum9)|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = ((5536 + ($133<<2)|0) + 304|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($11|0)==($135|0);
        if ($136) {
         HEAP32[$134>>2] = $R$1$i;
         $cond$i = ($R$1$i|0)==(0|0);
         if ($cond$i) {
          $137 = 1 << $133;
          $138 = $137 ^ -1;
          $139 = HEAP32[((5536 + 4|0))>>2]|0;
          $140 = $139 & $138;
          HEAP32[((5536 + 4|0))>>2] = $140;
          break;
         }
        } else {
         $141 = HEAP32[((5536 + 16|0))>>2]|0;
         $142 = ($105>>>0)<($141>>>0);
         if ($142) {
          _abort();
          // unreachable;
         }
         $143 = (($105) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($144|0)==($11|0);
         if ($145) {
          HEAP32[$143>>2] = $R$1$i;
         } else {
          $146 = (($105) + 20|0);
          HEAP32[$146>>2] = $R$1$i;
         }
         $147 = ($R$1$i|0)==(0|0);
         if ($147) {
          break;
         }
        }
        $148 = HEAP32[((5536 + 16|0))>>2]|0;
        $149 = ($R$1$i>>>0)<($148>>>0);
        if ($149) {
         _abort();
         // unreachable;
        }
        $150 = (($R$1$i) + 24|0);
        HEAP32[$150>>2] = $105;
        $$sum10 = (($10) + 8)|0;
        $151 = (($oldmem) + ($$sum10)|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = ($152|0)==(0|0);
        do {
         if (!($153)) {
          $154 = ($152>>>0)<($148>>>0);
          if ($154) {
           _abort();
           // unreachable;
          } else {
           $155 = (($R$1$i) + 16|0);
           HEAP32[$155>>2] = $152;
           $156 = (($152) + 24|0);
           HEAP32[$156>>2] = $R$1$i;
           break;
          }
         }
        } while(0);
        $$sum11 = (($10) + 12)|0;
        $157 = (($oldmem) + ($$sum11)|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)==(0|0);
        if (!($159)) {
         $160 = HEAP32[((5536 + 16|0))>>2]|0;
         $161 = ($158>>>0)<($160>>>0);
         if ($161) {
          _abort();
          // unreachable;
         } else {
          $162 = (($R$1$i) + 20|0);
          HEAP32[$162>>2] = $158;
          $163 = (($158) + 24|0);
          HEAP32[$163>>2] = $R$1$i;
          break;
         }
        }
       }
      }
     } while(0);
     $164 = ($79>>>0)<(16);
     if ($164) {
      $165 = $9 & 1;
      $166 = $77 | $165;
      $167 = $166 | 2;
      HEAP32[$8>>2] = $167;
      $$sum910$i = $77 | 4;
      $$sum16 = (($$sum910$i) + -8)|0;
      $168 = (($oldmem) + ($$sum16)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = $169 | 1;
      HEAP32[$168>>2] = $170;
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     } else {
      $$sum12 = (($21) + -8)|0;
      $171 = (($oldmem) + ($$sum12)|0);
      $172 = $9 & 1;
      $173 = $172 | $21;
      $174 = $173 | 2;
      HEAP32[$8>>2] = $174;
      $$sum5$i13 = $21 | 4;
      $$sum14 = (($$sum5$i13) + -8)|0;
      $175 = (($oldmem) + ($$sum14)|0);
      $176 = $79 | 3;
      HEAP32[$175>>2] = $176;
      $$sum78$i = $77 | 4;
      $$sum15 = (($$sum78$i) + -8)|0;
      $177 = (($oldmem) + ($$sum15)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 | 1;
      HEAP32[$177>>2] = $179;
      _dispose_chunk($171,$79);
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
   }
  }
 } while(0);
 $180 = (_malloc($bytes)|0);
 $181 = ($180|0)==(0|0);
 if ($181) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $182 = HEAP32[$8>>2]|0;
 $183 = $182 & -8;
 $184 = $182 & 3;
 $185 = ($184|0)==(0);
 $186 = $185 ? 8 : 4;
 $187 = (($183) - ($186))|0;
 $188 = ($187>>>0)<($bytes>>>0);
 $189 = $188 ? $187 : $bytes;
 _memcpy(($180|0),($oldmem|0),($189|0))|0;
 _free($oldmem);
 $mem$0 = $180;
 STACKTOP = sp;return ($mem$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _wcrtomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$01 = 0, $$02 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = HEAP32[$f>>2]|0;
   $10 = $9 & 8;
   $11 = ($10|0)==(0);
   if ($11) {
    $13 = (($f) + 8|0);
    HEAP32[$13>>2] = 0;
    $14 = (($f) + 4|0);
    HEAP32[$14>>2] = 0;
    $15 = (($f) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($f) + 28|0);
    HEAP32[$17>>2] = $16;
    $18 = (($f) + 20|0);
    HEAP32[$18>>2] = $16;
    $19 = (($f) + 48|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($16) + ($20)|0);
    HEAP32[$0>>2] = $21;
    $24 = $21;$26 = $16;
    break;
   }
   $12 = $9 | 32;
   HEAP32[$f>>2] = $12;
   STACKTOP = sp;return;
  } else {
   $$phi$trans$insert = (($f) + 20|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $24 = $1;$26 = $$pre;
  }
 } while(0);
 $22 = (($f) + 20|0);
 $23 = $24;
 $25 = $26;
 $27 = (($23) - ($25))|0;
 $28 = ($27>>>0)<($l>>>0);
 if ($28) {
  $29 = (($f) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  (FUNCTION_TABLE_iiii[$30 & 63]($f,$s,$l)|0);
  STACKTOP = sp;return;
 }
 $31 = (($f) + 75|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)>(-1);
 L13: do {
  if ($33) {
   $i$0 = $l;
   while(1) {
    $34 = ($i$0|0)==(0);
    if ($34) {
     $$01 = $l;$$02 = $s;$45 = $26;
     break L13;
    }
    $35 = (($i$0) + -1)|0;
    $36 = (($s) + ($35)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(10);
    if ($38) {
     break;
    } else {
     $i$0 = $35;
    }
   }
   $39 = (($f) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_iiii[$40 & 63]($f,$s,$i$0)|0);
   $42 = ($41>>>0)<($i$0>>>0);
   if ($42) {
    STACKTOP = sp;return;
   } else {
    $43 = (($s) + ($i$0)|0);
    $44 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$22>>2]|0;
    $$01 = $44;$$02 = $43;$45 = $$pre5;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$45 = $26;
  }
 } while(0);
 _memcpy(($45|0),($$02|0),($$01|0))|0;
 $46 = HEAP32[$22>>2]|0;
 $47 = (($46) + ($$01)|0);
 HEAP32[$22>>2] = $47;
 STACKTOP = sp;return;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$$02$i = 0, $$$i$i = 0, $$0$i = 0, $$0$i$i = 0, $$02$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $ap2$i$i = 0, $b$i = 0, $f$i = 0;
 var $internal_buf$i$i = 0, $nl_arg$i$i = 0, $nl_type$i$i = 0, $ret$1$i$i = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i$i = sp + 192|0;
 $nl_type$i$i = sp + 224|0;
 $nl_arg$i$i = sp;
 $internal_buf$i$i = sp + 272|0;
 $b$i = sp + 264|0;
 $f$i = sp + 80|0;
 $ap = sp + 208|0;
 HEAP32[$ap>>2] = $varargs;
 dest=$f$i+0|0; src=6600+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$02$i = 1;$5 = $b$i;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0$i = -1;
   STACKTOP = sp;return ($$0$i|0);
  }
 } else {
  $$02$i = $n;$5 = $s;
 }
 $4 = $5;
 $6 = (-2 - ($4))|0;
 $7 = ($$02$i>>>0)>($6>>>0);
 $$$02$i = $7 ? $6 : $$02$i;
 $8 = (($f$i) + 48|0);
 HEAP32[$8>>2] = $$$02$i;
 $9 = (($f$i) + 20|0);
 HEAP32[$9>>2] = $5;
 $10 = (($f$i) + 44|0);
 HEAP32[$10>>2] = $5;
 $11 = (($5) + ($$$02$i)|0);
 $12 = (($f$i) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f$i) + 28|0);
 HEAP32[$13>>2] = $11;
 dest=$nl_type$i$i+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2$i$i>>2] = $vacopy_currentptr;
 $14 = (_printf_core(0,$fmt,$ap2$i$i,$nl_arg$i$i,$nl_type$i$i)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $$0$i$i = -1;
 } else {
  $16 = ($$$02$i|0)==(0);
  if ($16) {
   HEAP32[$10>>2] = $internal_buf$i$i;
   HEAP32[$13>>2] = $internal_buf$i$i;
   HEAP32[$9>>2] = $internal_buf$i$i;
   HEAP32[$8>>2] = 80;
   $18 = (($internal_buf$i$i) + 80|0);
   HEAP32[$12>>2] = $18;
   $19 = (_printf_core($f$i,$fmt,$ap2$i$i,$nl_arg$i$i,$nl_type$i$i)|0);
   $20 = ($5|0)==(0|0);
   if ($20) {
    $ret$1$i$i = $19;
   } else {
    $21 = (($f$i) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    (FUNCTION_TABLE_iiii[$22 & 63]($f$i,0,0)|0);
    $23 = HEAP32[$9>>2]|0;
    $24 = ($23|0)==(0|0);
    $$$i$i = $24 ? -1 : $19;
    HEAP32[$10>>2] = $5;
    HEAP32[$8>>2] = 0;
    HEAP32[$12>>2] = 0;
    HEAP32[$13>>2] = 0;
    HEAP32[$9>>2] = 0;
    $ret$1$i$i = $$$i$i;
   }
  } else {
   $17 = (_printf_core($f$i,$fmt,$ap2$i$i,$nl_arg$i$i,$nl_type$i$i)|0);
   $ret$1$i$i = $17;
  }
  $$0$i$i = $ret$1$i$i;
 }
 $25 = ($$$02$i|0)==(0);
 if ($25) {
  $$0$i = $$0$i$i;
  STACKTOP = sp;return ($$0$i|0);
 }
 $26 = HEAP32[$9>>2]|0;
 $27 = HEAP32[$12>>2]|0;
 $28 = ($26|0)==($27|0);
 $29 = $28 << 31 >> 31;
 $30 = (($26) + ($29)|0);
 HEAP8[$30>>0] = 0;
 $$0$i = $$0$i$i;
 STACKTOP = sp;return ($$0$i|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((5536 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((5536 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((5536 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((5536 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[5536>>2]|0;
     $32 = $31 & $30;
     HEAP32[5536>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((5536 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((5536 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((5536 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((5536 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((5536 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((5536 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((5536 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((5536 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((5536 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((5536 + 12|0))>>2] = $115;
   HEAP32[((5536 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((5536 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((5536 + 20|0))>>2] = 0;
   HEAP32[((5536 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((5536 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((5536 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((5536 + 8|0))>>2] = $123;
   HEAP32[((5536 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((5536 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[5536>>2]|0;
     $146 = $145 & $144;
     HEAP32[5536>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((5536 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((5536 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((5536 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((5536 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((5536 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((5536 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((5536 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((5536 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((5536 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[5536>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[5536>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((5536 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((5536 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((5536 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((5536 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((5536 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((5536 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((5536 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((5536 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i3 = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0;
 var $$0$lcssa$i62 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0;
 var $$01$i67 = 0, $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$012$i1 = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0;
 var $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0, $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$15$i = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$22$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0;
 var $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$3$i6 = 0, $$314$i = 0, $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa$i = 0, $$lcssa292$i = 0;
 var $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre18 = 0, $$pre19 = 0, $$pre260 = 0, $$pre261 = 0;
 var $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1053$phi = 0, $1054 = 0, $1054$phi = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0.0;
 var $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0.0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0;
 var $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0;
 var $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0;
 var $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0;
 var $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0;
 var $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0, $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0;
 var $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0;
 var $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0;
 var $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i2 = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0, $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0;
 var $or$cond$i98$i = 0, $or$cond11$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0, $p$5 = 0, $pad$i = 0, $phitmp = 0;
 var $phitmp20 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$lcssa$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$013$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$13$i = 0, $s$2$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0;
 var $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0, $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$0$lcssa$i = 0, $w$06$i = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0;
 var $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1053 = 0;$1054 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 363;
   break;
  } else {
   $1055 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1055<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   } else if ((($1055<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1055 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   ___fwritex($fmt83,$34,$f);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1054$phi = $1054;$1053$phi = $1053;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1054 = $1054$phi;$1053 = $1053$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 382;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 382;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 382;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 382;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((6032 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 382;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 382;
     break L1;
    } else {
     $1056 = $1053;$1057 = $1054;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1056 = $144;$1057 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 382;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1053;$218 = $1054;
    } else {
     do {
      switch ($134|0) {
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1058 = $165;$1059 = $166;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1058 = 0;$1059 = $154;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1058 = $177;$1059 = $176;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1058 = $180;$1059 = $179;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1058 = 0;$1059 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1058 = 0;$1059 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1058 = $1054;$1059 = $150;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1058 = $172;$1059 = $173;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1058 = $153;$1059 = $151;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1058 = $160;$1059 = $157;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1058 = $1054;$1059 = $1053;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1058 = $1057;$1059 = $1056;
    label = 64;
   } else {
    $1053 = $1056;$1054 = $1057;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1059;$218 = $1058;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$383 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $384 = ($218|0)<(0);
    if ($384) {
     $385 = -$383;
     $$010$i = $385;$pl$0$i = 1;$prefix$0$i = 6520;
    } else {
     $386 = $fl$1$ & 2048;
     $387 = ($386|0)==(0);
     if ($387) {
      $388 = $fl$1$ & 1;
      $389 = ($388|0)==(0);
      $$$i = $389 ? ((6520 + 1|0)) : ((6520 + 6|0));
      $$010$i = $383;$pl$0$i = $388;$prefix$0$i = $$$i;
     } else {
      $$010$i = $383;$pl$0$i = 1;$prefix$0$i = ((6520 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$390 = HEAP32[tempDoublePtr>>2]|0;
    $391 = HEAP32[tempDoublePtr+4>>2]|0;
    $392 = $391 & 2146435072;
    $393 = ($392>>>0)<(2146435072);
    $394 = (0)<(0);
    $395 = ($392|0)==(2146435072);
    $396 = $395 & $394;
    $397 = $393 | $396;
    if (!($397)) {
     $398 = $t$0 & 32;
     $399 = ($398|0)!=(0);
     $400 = $399 ? 6544 : 6552;
     $401 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($401) {
      $402 = $399 ? 6560 : 6568;
      $pl$1$i = 0;$s1$0$i = $402;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $400;
     }
     $403 = (($pl$1$i) + 3)|0;
     $404 = $fl$1$ & 8192;
     $405 = ($404|0)==(0);
     $406 = ($w$1|0)>($403|0);
     $or$cond$i40$i = $405 & $406;
     if ($or$cond$i40$i) {
      $407 = (($w$1) - ($403))|0;
      $408 = ($407>>>0)>(256);
      $409 = $408 ? 256 : $407;
      _memset(($pad$i|0),32,($409|0))|0;
      $410 = ($407>>>0)>(255);
      if ($410) {
       $$01$i42$i = $407;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $411 = (($$01$i42$i) + -256)|0;
        $412 = ($411>>>0)>(255);
        if ($412) {
         $$01$i42$i = $411;
        } else {
         break;
        }
       }
       $413 = $407 & 255;
       $$0$lcssa$i44$i = $413;
      } else {
       $$0$lcssa$i44$i = $407;
      }
      ___fwritex($pad$i,$$0$lcssa$i44$i,$f);
     }
     ___fwritex($prefix$0$i,$pl$1$i,$f);
     ___fwritex($s1$0$i,3,$f);
     $414 = $fl$1$ & 73728;
     $415 = ($414|0)==(8192);
     $or$cond$i47$i = $415 & $406;
     if ($or$cond$i47$i) {
      $416 = (($w$1) - ($403))|0;
      $417 = ($416>>>0)>(256);
      $418 = $417 ? 256 : $416;
      _memset(($pad$i|0),32,($418|0))|0;
      $419 = ($416>>>0)>(255);
      if ($419) {
       $$01$i49$i = $416;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $420 = (($$01$i49$i) + -256)|0;
        $421 = ($420>>>0)>(255);
        if ($421) {
         $$01$i49$i = $420;
        } else {
         break;
        }
       }
       $422 = $416 & 255;
       $$0$lcssa$i51$i = $422;
      } else {
       $$0$lcssa$i51$i = $416;
      }
      ___fwritex($pad$i,$$0$lcssa$i51$i,$f);
     }
     $w$$i = $406 ? $w$1 : $403;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $423 = (+_frexp($$010$i,$e2$i));
    $424 = $423 * 2.0;
    $425 = $424 != 0.0;
    if ($425) {
     $426 = HEAP32[$e2$i>>2]|0;
     $427 = (($426) + -1)|0;
     HEAP32[$e2$i>>2] = $427;
    }
    $428 = $t$0 | 32;
    $429 = ($428|0)==(97);
    if ($429) {
     $430 = $t$0 & 32;
     $431 = ($430|0)==(0);
     $432 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $431 ? $prefix$0$i : $432;
     $433 = $pl$0$i | 2;
     $434 = ($p$0>>>0)>(11);
     $435 = (12 - ($p$0))|0;
     $re$0$i = $434 ? 0 : $435;
     $436 = ($re$0$i|0)==(0);
     do {
      if ($436) {
       $$1$i = $424;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $437 = (($re$1163$i) + -1)|0;
        $438 = $round$0162$i * 16.0;
        $439 = ($437|0)==(0);
        if ($439) {
         break;
        } else {
         $re$1163$i = $437;$round$0162$i = $438;
        }
       }
       $440 = HEAP8[$prefix$0$$i>>0]|0;
       $441 = ($440<<24>>24)==(45);
       if ($441) {
        $442 = -$424;
        $443 = $442 - $438;
        $444 = $438 + $443;
        $445 = -$444;
        $$1$i = $445;
        break;
       } else {
        $446 = $424 + $438;
        $447 = $446 - $438;
        $$1$i = $447;
        break;
       }
      }
     } while(0);
     $448 = HEAP32[$e2$i>>2]|0;
     $449 = ($448|0)<(0);
     $450 = (0 - ($448))|0;
     $451 = $449 ? $450 : $448;
     $452 = ($451|0)<(0);
     if ($452) {
      $453 = ($451|0)<(0);
      $454 = $453 << 31 >> 31;
      $$05$i$i = $7;$455 = $451;$456 = $454;
      while(1) {
       $457 = (___uremdi3(($455|0),($456|0),10,0)|0);
       $458 = tempRet0;
       $459 = $457 | 48;
       $460 = $459&255;
       $461 = (($$05$i$i) + -1|0);
       HEAP8[$461>>0] = $460;
       $462 = (___udivdi3(($455|0),($456|0),10,0)|0);
       $463 = tempRet0;
       $464 = ($456>>>0)>(9);
       $465 = ($455>>>0)>(4294967295);
       $466 = ($456|0)==(9);
       $467 = $466 & $465;
       $468 = $464 | $467;
       if ($468) {
        $$05$i$i = $461;$455 = $462;$456 = $463;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $461;$$01$lcssa$off0$i$i = $462;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $451;
     }
     $469 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($469) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $470 = (($y$03$i$i>>>0) % 10)&-1;
       $471 = $470 | 48;
       $472 = $471&255;
       $473 = (($$12$i$i) + -1|0);
       HEAP8[$473>>0] = $472;
       $474 = (($y$03$i$i>>>0) / 10)&-1;
       $475 = ($y$03$i$i>>>0)<(10);
       if ($475) {
        $$1$lcssa$i$i = $473;
        break;
       } else {
        $$12$i$i = $473;$y$03$i$i = $474;
       }
      }
     }
     $476 = ($$1$lcssa$i$i|0)==($7|0);
     if ($476) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $477 = HEAP32[$e2$i>>2]|0;
     $478 = $477 >> 31;
     $479 = $478 & 2;
     $480 = (($479) + 43)|0;
     $481 = $480&255;
     $482 = (($estr$0$i) + -1|0);
     HEAP8[$482>>0] = $481;
     $483 = (($t$0) + 15)|0;
     $484 = $483&255;
     $485 = (($estr$0$i) + -2|0);
     HEAP8[$485>>0] = $484;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $486 = $fl$1$ & 8;
      $487 = ($486|0)==(0);
      if ($487) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$us$i)));
        $489 = (6576 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $430;
        $493 = $492&255;
        $494 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)!=(1);
        $notlhs$us$us$i = $497 == 0.0;
        $or$cond$i73 = $500 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $494;
        } else {
         $501 = (($s$0$us$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$us$i = $501;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$us$i = $497;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us$i)));
        $504 = (6576 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $430;
        $508 = $507&255;
        $509 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        if ($515) {
         $516 = (($s$0$us$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us$i = $516;
        } else {
         $s$1$us$i = $509;
        }
        $517 = $512 != 0.0;
        if ($517) {
         $$2$us$i = $512;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $518 = (~~(($$2$i)));
       $519 = (6576 + ($518)|0);
       $520 = HEAP8[$519>>0]|0;
       $521 = $520&255;
       $522 = $521 | $430;
       $523 = $522&255;
       $524 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $523;
       $525 = (+($518|0));
       $526 = $$2$i - $525;
       $527 = $526 * 16.0;
       $528 = $524;
       $529 = (($528) - ($0))|0;
       $530 = ($529|0)==(1);
       if ($530) {
        $531 = (($s$0$i) + 2|0);
        HEAP8[$524>>0] = 46;
        $s$1$i = $531;
       } else {
        $s$1$i = $524;
       }
       $532 = $527 != 0.0;
       if ($532) {
        $$2$i = $527;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $533 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $534 = (($11) + ($$pre306$i))|0;
     $535 = ($534|0)<($p$0|0);
     $or$cond271 = $533 & $535;
     $536 = $485;
     if ($or$cond271) {
      $537 = (($12) + ($p$0))|0;
      $538 = (($537) - ($536))|0;
      $l$0$i = $538;
     } else {
      $539 = (($10) - ($536))|0;
      $540 = (($539) + ($$pre306$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($433))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($w$1|0)>($541|0);
     $or$cond$i57$i = $543 & $544;
     if ($or$cond$i57$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i59$i = $545;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $549 = (($$01$i59$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i59$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i61$i = $551;
      } else {
       $$0$lcssa$i61$i = $545;
      }
      ___fwritex($pad$i,$$0$lcssa$i61$i,$f);
     }
     ___fwritex($prefix$0$$i,$433,$f);
     $552 = ($542|0)==(65536);
     $or$cond$i64$i = $552 & $544;
     if ($or$cond$i64$i) {
      $553 = (($w$1) - ($541))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i66$i = $553;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $557 = (($$01$i66$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i66$i = $557;
        } else {
         break;
        }
       }
       $559 = $553 & 255;
       $$0$lcssa$i68$i = $559;
      } else {
       $$0$lcssa$i68$i = $553;
      }
      ___fwritex($pad$i,$$0$lcssa$i68$i,$f);
     }
     $560 = (($$pre306$i) - ($0))|0;
     ___fwritex($buf$i,$560,$f);
     $561 = (($9) - ($536))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($560))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i72$i = $563;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $568 = (($$01$i72$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i72$i = $568;
        } else {
         break;
        }
       }
       $570 = $563 & 255;
       $$0$lcssa$i74$i = $570;
      } else {
       $$0$lcssa$i74$i = $563;
      }
      ___fwritex($pad$i,$$0$lcssa$i74$i,$f);
     }
     ___fwritex($485,$561,$f);
     $571 = ($542|0)==(8192);
     $or$cond$i77$i = $571 & $544;
     if ($or$cond$i77$i) {
      $572 = (($w$1) - ($541))|0;
      $573 = ($572>>>0)>(256);
      $574 = $573 ? 256 : $572;
      _memset(($pad$i|0),32,($574|0))|0;
      $575 = ($572>>>0)>(255);
      if ($575) {
       $$01$i79$i = $572;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $576 = (($$01$i79$i) + -256)|0;
        $577 = ($576>>>0)>(255);
        if ($577) {
         $$01$i79$i = $576;
        } else {
         break;
        }
       }
       $578 = $572 & 255;
       $$0$lcssa$i81$i = $578;
      } else {
       $$0$lcssa$i81$i = $572;
      }
      ___fwritex($pad$i,$$0$lcssa$i81$i,$f);
     }
     $w$22$i = $544 ? $w$1 : $541;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $579 = ($p$0|0)<(0);
    $$p$i = $579 ? 6 : $p$0;
    if ($425) {
     $580 = $424 * 268435456.0;
     $581 = HEAP32[$e2$i>>2]|0;
     $582 = (($581) + -28)|0;
     HEAP32[$e2$i>>2] = $582;
     $$3$i = $580;$584 = $582;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $424;$584 = $$pre$i;
    }
    $583 = ($584|0)<(0);
    $$36$i = $583 ? $big$i : $13;
    $585 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $586 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $586;
     $587 = (($z$0$i) + 4|0);
     $588 = (+($586>>>0));
     $589 = $$4$i - $588;
     $590 = $589 * 1.0E+9;
     $591 = $590 != 0.0;
     if ($591) {
      $$4$i = $590;$z$0$i = $587;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $592 = ($$pr$i|0)>(0);
    if ($592) {
     $594 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $587;
     while(1) {
      $593 = ($594|0)>(29);
      $595 = $593 ? 29 : $594;
      $d$0249$i = (($z$1257$i) + -4|0);
      $596 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($596) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($595|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $606 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($606) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $d$0$i;
         }
        }
        $607 = ($604|0)==(0);
        if ($607) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $608 = (($a$1258$i) + -4|0);
        HEAP32[$608>>2] = $604;
        $a$2$ph$i = $608;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $609 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($609)) {
        break;
       }
       $610 = (($z$2$i) + -4|0);
       $611 = HEAP32[$610>>2]|0;
       $612 = ($611|0)==(0);
       if ($612) {
        $z$2$i = $610;
       } else {
        break;
       }
      }
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($595))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $594 = $614;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $614;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $587;
    }
    $616 = ($$pr151$i|0)<(0);
    L222: do {
     if ($616) {
      $617 = (($$p$i) + 25)|0;
      $618 = (($617|0) / 9)&-1;
      $619 = (($618) + 1)|0;
      $620 = ($428|0)==(102);
      if ($620) {
       $621 = (($$36$i) + ($619<<2)|0);
       $623 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$23$us$i = $624 ? 9 : $622;
        $625 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$23$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $642 = HEAP32[$d$1237$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$23$us$i;
           $646 = (($645) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $646;
           $633 = Math_imul($643, $647)|0;
           $648 = (($d$1237$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3243$us$i>>>0);
           if ($649) {
            $carry3$0238$us$i = $633;$d$1237$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3244$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3244$us$i;
          $632 = ($633|0)==(0);
          if ($632) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $634 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $633;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3244$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $627 ? $628 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($585))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L222;
        }
       }
      } else {
       $652 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$23$i = $653 ? 9 : $651;
       $654 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$23$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $661 = HEAP32[$d$1237$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$23$i;
          $664 = (($663) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1237$i) + 4|0);
          $667 = ($666>>>0)<($z$3243$i>>>0);
          if ($667) {
           $carry3$0238$i = $665;$d$1237$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3244$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3244$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3244$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $672 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $665;
         $$a$3310$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3244$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3244$i) + 4|0);
         $$a$3309$i = $656 ? $657 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3310$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3310$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($682) {
      $683 = $a$3$lcssa$i;
      $684 = (($585) - ($683))|0;
      $685 = $684 >> 2;
      $686 = ($685*9)|0;
      $687 = HEAP32[$a$3$lcssa$i>>2]|0;
      $688 = ($687>>>0)<(10);
      if ($688) {
       $e$1$i = $686;
       break;
      } else {
       $e$0233$i = $686;$i$0232$i = 10;
      }
      while(1) {
       $689 = ($i$0232$i*10)|0;
       $690 = (($e$0233$i) + 1)|0;
       $691 = ($687>>>0)<($689>>>0);
       if ($691) {
        $e$1$i = $690;
        break;
       } else {
        $e$0233$i = $690;$i$0232$i = $689;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $692 = ($428|0)!=(102);
    $693 = $692 ? $e$1$i : 0;
    $694 = (($$p$i) - ($693))|0;
    $695 = ($428|0)==(103);
    $696 = ($$p$i|0)!=(0);
    $$24$i = $695 & $696;
    $$neg156$i = $$24$i << 31 >> 31;
    $697 = (($694) + ($$neg156$i))|0;
    $698 = $z$3$lcssa$i;
    $699 = (($698) - ($585))|0;
    $700 = $699 >> 2;
    $701 = ($700*9)|0;
    $702 = (($701) + -9)|0;
    $703 = ($697|0)<($702|0);
    if ($703) {
     $704 = (($697) + 9216)|0;
     $705 = (($704|0) / 9)&-1;
     $$sum$i = (($705) + -1023)|0;
     $706 = (($$36$i) + ($$sum$i<<2)|0);
     $707 = (($704|0) % 9)&-1;
     $j$0224$i = (($707) + 1)|0;
     $708 = ($j$0224$i|0)<(9);
     if ($708) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $709 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $709;
        break;
       } else {
        $i$1225$i = $709;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $710 = HEAP32[$706>>2]|0;
     $711 = (($710>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $712 = ($711|0)==(0);
     if ($712) {
      $$sum18$i = (($705) + -1022)|0;
      $713 = (($$36$i) + ($$sum18$i<<2)|0);
      $714 = ($713|0)==($z$3$lcssa$i|0);
      if ($714) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $706;$e$3$i = $e$1$i;
      } else {
       label = 243;
      }
     } else {
      label = 243;
     }
     do {
      if ((label|0) == 243) {
       label = 0;
       $715 = (($710>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $716 = $715 & 1;
       $717 = ($716|0)==(0);
       $$25$i = $717 ? 9007199254740992.0 : 9007199254740994.0;
       $718 = (($i$1$lcssa$i|0) / 2)&-1;
       $719 = ($711>>>0)<($718>>>0);
       do {
        if ($719) {
         $small$0$i = 0.5;
        } else {
         $720 = ($711|0)==($718|0);
         if ($720) {
          $$sum19$i = (($705) + -1022)|0;
          $721 = (($$36$i) + ($$sum19$i<<2)|0);
          $722 = ($721|0)==($z$3$lcssa$i|0);
          if ($722) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $723 = ($pl$0$i|0)==(0);
       do {
        if ($723) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $724 = HEAP8[$prefix$0$i>>0]|0;
         $725 = ($724<<24>>24)==(45);
         if (!($725)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $726 = $$25$i * -1.0;
         $727 = $small$0$i * -1.0;
         $round6$1$i = $726;$small$1$i = $727;
        }
       } while(0);
       $728 = (($710) - ($711))|0;
       HEAP32[$706>>2] = $728;
       $729 = $round6$1$i + $small$1$i;
       $730 = $729 != $round6$1$i;
       if (!($730)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $706;$e$3$i = $e$1$i;
        break;
       }
       $731 = (($728) + ($i$1$lcssa$i))|0;
       HEAP32[$706>>2] = $731;
       $732 = ($731>>>0)>(999999999);
       if ($732) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $706;
        while(1) {
         $733 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $734 = ($733>>>0)<($a$5218$i>>>0);
         if ($734) {
          $735 = (($a$5218$i) + -4|0);
          HEAP32[$735>>2] = 0;
          $a$6$i = $735;
         } else {
          $a$6$i = $a$5218$i;
         }
         $736 = HEAP32[$733>>2]|0;
         $737 = (($736) + 1)|0;
         HEAP32[$733>>2] = $737;
         $738 = ($737>>>0)>(999999999);
         if ($738) {
          $a$5218$i = $a$6$i;$d$2217$i = $733;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $733;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $706;
       }
       $739 = $a$5$lcssa$i;
       $740 = (($585) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$a$5$lcssa$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2213$i = $742;$i$2212$i = 10;
       }
       while(1) {
        $745 = ($i$2212$i*10)|0;
        $746 = (($e$2213$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2213$i = $746;$i$2212$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $750 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $751 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($751)) {
      $$lcssa292$i = 0;
      break;
     }
     $752 = (($z$6$i) + -4|0);
     $753 = HEAP32[$752>>2]|0;
     $754 = ($753|0)==(0);
     if ($754) {
      $z$6$i = $752;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($695) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$ph$i|0);
      $758 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $757 & $758;
      if ($or$cond5$i) {
       $759 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $760 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $759;$$213$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$016$i = $761;$$213$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $765 = (($z$6$i) + -4|0);
        $766 = HEAP32[$765>>2]|0;
        $767 = ($766|0)==(0);
        if ($767) {
         $j$2$i = 9;
         break;
        }
        $768 = (($766>>>0) % 10)&-1;
        $769 = ($768|0)==(0);
        if ($769) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $770 = ($i$3204$i*10)|0;
         $771 = (($j$1205$i) + 1)|0;
         $772 = (($766>>>0) % ($770>>>0))&-1;
         $773 = ($772|0)==(0);
         if ($773) {
          $i$3204$i = $770;$j$1205$i = $771;
         } else {
          $j$2$i = $771;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $774 = $$016$i | 32;
      $775 = ($774|0)==(102);
      $776 = $z$6$i;
      $777 = (($776) - ($585))|0;
      $778 = $777 >> 2;
      $779 = ($778*9)|0;
      $780 = (($779) + -9)|0;
      if ($775) {
       $781 = (($780) - ($j$2$i))|0;
       $782 = ($781|0)<(0);
       $$26$i = $782 ? 0 : $781;
       $783 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $783 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $784 = (($780) + ($e$4$ph$i))|0;
       $785 = (($784) - ($j$2$i))|0;
       $786 = ($785|0)<(0);
       $$28$i = $786 ? 0 : $785;
       $787 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $787 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $788 = ($$314$i|0)!=(0);
    if ($788) {
     $792 = 1;
    } else {
     $789 = $fl$1$ & 8;
     $790 = ($789|0)!=(0);
     $792 = $790;
    }
    $791 = $792&1;
    $793 = $$117$i | 32;
    $794 = ($793|0)==(102);
    if ($794) {
     $795 = ($e$4$ph$i|0)>(0);
     $796 = $795 ? $e$4$ph$i : 0;
     $$pn$i = $796;$estr$2$i = 0;
    } else {
     $797 = ($e$4$ph$i|0)<(0);
     $798 = $797 ? $750 : $e$4$ph$i;
     $799 = ($798|0)<(0);
     if ($799) {
      $800 = ($798|0)<(0);
      $801 = $800 << 31 >> 31;
      $$05$i84$i = $7;$802 = $798;$803 = $801;
      while(1) {
       $804 = (___uremdi3(($802|0),($803|0),10,0)|0);
       $805 = tempRet0;
       $806 = $804 | 48;
       $807 = $806&255;
       $808 = (($$05$i84$i) + -1|0);
       HEAP8[$808>>0] = $807;
       $809 = (___udivdi3(($802|0),($803|0),10,0)|0);
       $810 = tempRet0;
       $811 = ($803>>>0)>(9);
       $812 = ($802>>>0)>(4294967295);
       $813 = ($803|0)==(9);
       $814 = $813 & $812;
       $815 = $811 | $814;
       if ($815) {
        $$05$i84$i = $808;$802 = $809;$803 = $810;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $808;$$01$lcssa$off0$i90$i = $809;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $798;
     }
     $816 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($816) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $817 = (($y$03$i91$i>>>0) % 10)&-1;
       $818 = $817 | 48;
       $819 = $818&255;
       $820 = (($$12$i92$i) + -1|0);
       HEAP8[$820>>0] = $819;
       $821 = (($y$03$i91$i>>>0) / 10)&-1;
       $822 = ($y$03$i91$i>>>0)<(10);
       if ($822) {
        $estr$1$ph$i = $820;
        break;
       } else {
        $$12$i92$i = $820;$y$03$i91$i = $821;
       }
      }
     }
     $823 = $estr$1$ph$i;
     $824 = (($9) - ($823))|0;
     $825 = ($824|0)<(2);
     if ($825) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $826 = (($estr$1195$i) + -1|0);
       HEAP8[$826>>0] = 48;
       $827 = $826;
       $828 = (($9) - ($827))|0;
       $829 = ($828|0)<(2);
       if ($829) {
        $estr$1195$i = $826;
       } else {
        $estr$1$lcssa$i = $826;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $830 = $e$4$ph$i >> 31;
     $831 = $830 & 2;
     $832 = (($831) + 43)|0;
     $833 = $832&255;
     $834 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$834>>0] = $833;
     $835 = $$117$i&255;
     $836 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$836>>0] = $835;
     $837 = $836;
     $838 = (($9) - ($837))|0;
     $$pn$i = $838;$estr$2$i = $836;
    }
    $839 = (($pl$0$i) + 1)|0;
    $840 = (($839) + ($$314$i))|0;
    $l$1$i = (($840) + ($791))|0;
    $841 = (($l$1$i) + ($$pn$i))|0;
    $842 = $fl$1$ & 73728;
    $843 = ($842|0)==(0);
    $844 = ($w$1|0)>($841|0);
    $or$cond$i98$i = $843 & $844;
    if ($or$cond$i98$i) {
     $845 = (($w$1) - ($841))|0;
     $846 = ($845>>>0)>(256);
     $847 = $846 ? 256 : $845;
     _memset(($pad$i|0),32,($847|0))|0;
     $848 = ($845>>>0)>(255);
     if ($848) {
      $$01$i100$i = $845;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $849 = (($$01$i100$i) + -256)|0;
       $850 = ($849>>>0)>(255);
       if ($850) {
        $$01$i100$i = $849;
       } else {
        break;
       }
      }
      $851 = $845 & 255;
      $$0$lcssa$i102$i = $851;
     } else {
      $$0$lcssa$i102$i = $845;
     }
     ___fwritex($pad$i,$$0$lcssa$i102$i,$f);
    }
    ___fwritex($prefix$0$i,$pl$0$i,$f);
    $852 = ($842|0)==(65536);
    $or$cond$i105$i = $852 & $844;
    if ($or$cond$i105$i) {
     $853 = (($w$1) - ($841))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i107$i = $853;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $857 = (($$01$i107$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i107$i = $857;
       } else {
        break;
       }
      }
      $859 = $853 & 255;
      $$0$lcssa$i109$i = $859;
     } else {
      $$0$lcssa$i109$i = $853;
     }
     ___fwritex($pad$i,$$0$lcssa$i109$i,$f);
    }
    do {
     if ($794) {
      $860 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $860 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $861 = HEAP32[$d$4180$i>>2]|0;
       $862 = ($861|0)==(0);
       if ($862) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $861;
        while(1) {
         $863 = (($y$03$i114$i>>>0) % 10)&-1;
         $864 = $863 | 48;
         $865 = $864&255;
         $866 = (($$12$i115$i) + -1|0);
         HEAP8[$866>>0] = $865;
         $867 = (($y$03$i114$i>>>0) / 10)&-1;
         $868 = ($y$03$i114$i>>>0)<(10);
         if ($868) {
          $$1$lcssa$i117$i = $866;
          break;
         } else {
          $$12$i115$i = $866;$y$03$i114$i = $867;
         }
        }
       }
       $869 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($869) {
         $873 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($873)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $870 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($870) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $871 = (($s7$0177$i) + -1|0);
          HEAP8[$871>>0] = 48;
          $872 = ($871>>>0)>($buf$i>>>0);
          if ($872) {
           $s7$0177$i = $871;
          } else {
           $s7$1$i = $871;
           break;
          }
         }
        }
       } while(0);
       $874 = $s7$1$i;
       $875 = (($15) - ($874))|0;
       ___fwritex($s7$1$i,$875,$f);
       $876 = (($d$4180$i) + 4|0);
       $877 = ($876>>>0)>($$36$i>>>0);
       if ($877) {
        break;
       } else {
        $d$4180$i = $876;
       }
      }
      $$not$i = $788 ^ 1;
      $878 = $fl$1$ & 8;
      $879 = ($878|0)==(0);
      $or$cond32$i = $879 & $$not$i;
      if (!($or$cond32$i)) {
       ___fwritex(6592,1,$f);
      }
      $880 = ($876>>>0)<($z$6$i>>>0);
      $881 = ($$314$i|0)>(0);
      $or$cond7169$i = $880 & $881;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $876;
       while(1) {
        $882 = HEAP32[$d$5170$i>>2]|0;
        $883 = ($882|0)==(0);
        if ($883) {
         $s8$0165$i = $14;
         label = 312;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $882;
         while(1) {
          $884 = (($y$03$i123$i>>>0) % 10)&-1;
          $885 = $884 | 48;
          $886 = $885&255;
          $887 = (($$12$i124$i) + -1|0);
          HEAP8[$887>>0] = $886;
          $888 = (($y$03$i123$i>>>0) / 10)&-1;
          $889 = ($y$03$i123$i>>>0)<(10);
          if ($889) {
           break;
          } else {
           $$12$i124$i = $887;$y$03$i123$i = $888;
          }
         }
         $890 = ($887>>>0)>($buf$i>>>0);
         if ($890) {
          $s8$0165$i = $887;
          label = 312;
         } else {
          $s8$0$lcssa$i = $887;
         }
        }
        if ((label|0) == 312) {
         while(1) {
          label = 0;
          $891 = (($s8$0165$i) + -1|0);
          HEAP8[$891>>0] = 48;
          $892 = ($891>>>0)>($buf$i>>>0);
          if ($892) {
           $s8$0165$i = $891;
           label = 312;
          } else {
           $s8$0$lcssa$i = $891;
           break;
          }
         }
        }
        $893 = ($$415171$i|0)>(9);
        $894 = $893 ? 9 : $$415171$i;
        ___fwritex($s8$0$lcssa$i,$894,$f);
        $895 = (($d$5170$i) + 4|0);
        $896 = (($$415171$i) + -9)|0;
        $897 = ($895>>>0)<($z$6$i>>>0);
        $898 = ($896|0)>(0);
        $or$cond7$i = $897 & $898;
        if ($or$cond7$i) {
         $$415171$i = $896;$d$5170$i = $895;
        } else {
         $$415$lcssa$i = $896;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $899 = ($$415$lcssa$i|0)>(0);
      if (!($899)) {
       break;
      }
      $900 = ($$415$lcssa$i>>>0)>(256);
      $901 = $900 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($901|0))|0;
      $902 = ($$415$lcssa$i>>>0)>(255);
      if ($902) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $903 = (($$01$i131$i) + -256)|0;
        $904 = ($903>>>0)>(255);
        if ($904) {
         $$01$i131$i = $903;
        } else {
         break;
        }
       }
       $905 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $905;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      ___fwritex($pad$i,$$0$lcssa$i133$i,$f);
     } else {
      $906 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $906;
      $907 = ($$314$i|0)>(-1);
      do {
       if ($907) {
        $908 = $fl$1$ & 8;
        $909 = ($908|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $910 = HEAP32[$d$6188$i>>2]|0;
         $911 = ($910|0)==(0);
         if ($911) {
          label = 324;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $910;
          while(1) {
           $912 = (($y$03$i138$i>>>0) % 10)&-1;
           $913 = $912 | 48;
           $914 = $913&255;
           $915 = (($$12$i139$i) + -1|0);
           HEAP8[$915>>0] = $914;
           $916 = (($y$03$i138$i>>>0) / 10)&-1;
           $917 = ($y$03$i138$i>>>0)<(10);
           if ($917) {
            break;
           } else {
            $$12$i139$i = $915;$y$03$i138$i = $916;
           }
          }
          $918 = ($915|0)==($14|0);
          if ($918) {
           label = 324;
          } else {
           $s9$0$i = $915;
          }
         }
         if ((label|0) == 324) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $919 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($919) {
           $923 = (($s9$0$i) + 1|0);
           ___fwritex($s9$0$i,1,$f);
           $924 = ($$5189$i|0)<(1);
           $or$cond34$i = $924 & $909;
           if ($or$cond34$i) {
            $s9$2$i = $923;
            break;
           }
           ___fwritex(6592,1,$f);
           $s9$2$i = $923;
          } else {
           $920 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($920) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $921 = (($s9$1184$i) + -1|0);
            HEAP8[$921>>0] = 48;
            $922 = ($921>>>0)>($buf$i>>>0);
            if ($922) {
             $s9$1184$i = $921;
            } else {
             $s9$2$i = $921;
             break;
            }
           }
          }
         } while(0);
         $925 = $s9$2$i;
         $926 = (($15) - ($925))|0;
         $927 = ($$5189$i|0)>($926|0);
         $$$5$i = $927 ? $926 : $$5189$i;
         ___fwritex($s9$2$i,$$$5$i,$f);
         $928 = (($$5189$i) - ($926))|0;
         $929 = (($d$6188$i) + 4|0);
         $930 = ($929>>>0)<($z$6$$i>>>0);
         $931 = ($928|0)>(-1);
         $or$cond9$i = $930 & $931;
         if ($or$cond9$i) {
          $$5189$i = $928;$d$6188$i = $929;
         } else {
          break;
         }
        }
        $932 = ($928|0)>(0);
        if (!($932)) {
         break;
        }
        $933 = ($928>>>0)>(256);
        $934 = $933 ? 256 : $928;
        _memset(($pad$i|0),48,($934|0))|0;
        $935 = ($928>>>0)>(255);
        if ($935) {
         $$01$i146$i = $928;
         while(1) {
          ___fwritex($pad$i,256,$f);
          $936 = (($$01$i146$i) + -256)|0;
          $937 = ($936>>>0)>(255);
          if ($937) {
           $$01$i146$i = $936;
          } else {
           break;
          }
         }
         $938 = $928 & 255;
         $$0$lcssa$i148$i = $938;
        } else {
         $$0$lcssa$i148$i = $928;
        }
        ___fwritex($pad$i,$$0$lcssa$i148$i,$f);
       }
      } while(0);
      $939 = $estr$2$i;
      $940 = (($9) - ($939))|0;
      ___fwritex($estr$2$i,$940,$f);
     }
    } while(0);
    $941 = ($842|0)==(8192);
    $or$cond$i$i = $941 & $844;
    if ($or$cond$i$i) {
     $942 = (($w$1) - ($841))|0;
     $943 = ($942>>>0)>(256);
     $944 = $943 ? 256 : $942;
     _memset(($pad$i|0),32,($944|0))|0;
     $945 = ($942>>>0)>(255);
     if ($945) {
      $$01$i$i = $942;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $946 = (($$01$i$i) + -256)|0;
       $947 = ($946>>>0)>(255);
       if ($947) {
        $$01$i$i = $946;
       } else {
        break;
       }
      }
      $948 = $942 & 255;
      $$0$lcssa$i$i = $948;
     } else {
      $$0$lcssa$i$i = $942;
     }
     ___fwritex($pad$i,$$0$lcssa$i$i,$f);
    }
    $w$35$i = $844 ? $w$1 : $841;
    $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1062 = $wc;$1063 = $6;$p$4266 = -1;
    label = 112;
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 6496 : ((6496 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 6512 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1060 = $191;$1061 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 6496;$z$2 = $2;
    break;
   }
   case 83:  {
    $344 = $191;
    $345 = ($p$0|0)==(0);
    if ($345) {
     $1064 = $191;$1065 = $344;$i$0$lcssa267 = 0;
     label = 117;
    } else {
     $1062 = $344;$1063 = $191;$p$4266 = $p$0;
     label = 112;
    }
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 6496;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 6496 : ((6496 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((6496 + 1|0));
     label = 86;
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 6496;
    label = 86;
    break;
   }
   default: {
    $1060 = $191;$1061 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6496;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6496;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (6576 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6496;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (6496 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = $a$1;
    $311 = $310 & 3;
    $312 = ($311|0)!=(0);
    $313 = ($p$0|0)!=(0);
    $or$cond11$i = $312 & $313;
    L445: do {
     if ($or$cond11$i) {
      $$012$i1 = $p$0;$s$013$i = $a$1;
      while(1) {
       $314 = HEAP8[$s$013$i>>0]|0;
       $315 = ($314<<24>>24)==(0);
       if ($315) {
        $$3$i6 = $$012$i1;$s$2$i = $s$013$i;
        break L445;
       }
       $316 = (($s$013$i) + 1|0);
       $317 = (($$012$i1) + -1)|0;
       $318 = $316;
       $319 = $318 & 3;
       $320 = ($319|0)!=(0);
       $321 = ($317|0)!=(0);
       $or$cond$i2 = $320 & $321;
       if ($or$cond$i2) {
        $$012$i1 = $317;$s$013$i = $316;
       } else {
        $$0$lcssa$i3 = $317;$$lcssa$i = $321;$s$0$lcssa$i = $316;
        label = 99;
        break;
       }
      }
     } else {
      $$0$lcssa$i3 = $p$0;$$lcssa$i = $313;$s$0$lcssa$i = $a$1;
      label = 99;
     }
    } while(0);
    L449: do {
     if ((label|0) == 99) {
      label = 0;
      if ($$lcssa$i) {
       $$pre19 = HEAP8[$s$0$lcssa$i>>0]|0;
       $phitmp = ($$pre19<<24>>24)==(0);
       if ($phitmp) {
        $$3$i6 = $$0$lcssa$i3;$s$2$i = $s$0$lcssa$i;
       } else {
        $322 = ($$0$lcssa$i3>>>0)>(3);
        L453: do {
         if ($322) {
          $$15$i = $$0$lcssa$i3;$w$06$i = $s$0$lcssa$i;
          while(1) {
           $323 = HEAP32[$w$06$i>>2]|0;
           $324 = (($323) + -16843009)|0;
           $325 = $323 & -2139062144;
           $326 = $325 ^ -2139062144;
           $327 = $326 & $324;
           $328 = ($327|0)==(0);
           if (!($328)) {
            $$1$lcssa$i = $$15$i;$w$0$lcssa$i = $w$06$i;
            break L453;
           }
           $329 = (($w$06$i) + 4|0);
           $330 = (($$15$i) + -4)|0;
           $331 = ($330>>>0)>(3);
           if ($331) {
            $$15$i = $330;$w$06$i = $329;
           } else {
            $$1$lcssa$i = $330;$w$0$lcssa$i = $329;
            break;
           }
          }
         } else {
          $$1$lcssa$i = $$0$lcssa$i3;$w$0$lcssa$i = $s$0$lcssa$i;
         }
        } while(0);
        $332 = ($$1$lcssa$i|0)==(0);
        if ($332) {
         $$3$i6 = 0;$s$2$i = $w$0$lcssa$i;
        } else {
         $$22$i = $$1$lcssa$i;$s$13$i = $w$0$lcssa$i;
         while(1) {
          $333 = HEAP8[$s$13$i>>0]|0;
          $334 = ($333<<24>>24)==(0);
          if ($334) {
           $$3$i6 = $$22$i;$s$2$i = $s$13$i;
           break L449;
          }
          $335 = (($s$13$i) + 1|0);
          $336 = (($$22$i) + -1)|0;
          $337 = ($336|0)==(0);
          if ($337) {
           $$3$i6 = 0;$s$2$i = $335;
           break;
          } else {
           $$22$i = $336;$s$13$i = $335;
          }
         }
        }
       }
      } else {
       $$3$i6 = 0;$s$2$i = $s$0$lcssa$i;
      }
     }
    } while(0);
    $338 = ($$3$i6|0)!=(0);
    $339 = $338 ? $s$2$i : 0;
    $340 = ($339|0)==(0|0);
    if ($340) {
     $341 = (($a$1) + ($p$0)|0);
     $1060 = $191;$1061 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6496;$z$2 = $341;
     break;
    } else {
     $342 = $339;
     $343 = (($342) - ($310))|0;
     $1060 = $191;$1061 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $343;$pl$2 = 0;$prefix$2 = 6496;$z$2 = $339;
     break;
    }
   }
   else if ((label|0) == 112) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1062;
    while(1) {
     $346 = HEAP32[$ws$0167>>2]|0;
     $347 = ($346|0)==(0);
     if ($347) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $348 = (_wcrtomb($mb,$346)|0);
     $349 = ($348|0)<(0);
     $350 = (($p$4266) - ($i$0166))|0;
     $351 = ($348>>>0)>($350>>>0);
     $or$cond17 = $349 | $351;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $348;
      break;
     }
     $352 = (($ws$0167) + 4|0);
     $353 = (($348) + ($i$0166))|0;
     $354 = ($p$4266>>>0)>($353>>>0);
     if ($354) {
      $i$0166 = $353;$l$1165 = $348;$ws$0167 = $352;
     } else {
      $i$0$lcssa = $353;$l$2 = $348;
      break;
     }
    }
    $355 = ($l$2|0)<(0);
    if ($355) {
     $$0 = -1;
     label = 382;
     break L1;
    } else {
     $1064 = $1063;$1065 = $1062;$i$0$lcssa267 = $i$0$lcssa;
     label = 117;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1060 = $293;$1061 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1060 = $293;$1061 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 117) {
   label = 0;
   $356 = $fl$1$ & 73728;
   $357 = ($356|0)==(0);
   $358 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $357 & $358;
   if ($or$cond$i58) {
    $359 = (($w$1) - ($i$0$lcssa267))|0;
    $360 = ($359>>>0)>(256);
    $361 = $360 ? 256 : $359;
    _memset(($pad$i|0),32,($361|0))|0;
    $362 = ($359>>>0)>(255);
    if ($362) {
     $$01$i60 = $359;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $363 = (($$01$i60) + -256)|0;
      $364 = ($363>>>0)>(255);
      if ($364) {
       $$01$i60 = $363;
      } else {
       break;
      }
     }
     $365 = $359 & 255;
     $$0$lcssa$i62 = $365;
    } else {
     $$0$lcssa$i62 = $359;
    }
    ___fwritex($pad$i,$$0$lcssa$i62,$f);
   }
   $366 = ($i$0$lcssa267|0)==(0);
   L496: do {
    if (!($366)) {
     $i$1174 = 0;$ws$1175 = $1065;
     while(1) {
      $367 = HEAP32[$ws$1175>>2]|0;
      $368 = ($367|0)==(0);
      if ($368) {
       break L496;
      }
      $369 = (_wcrtomb($mb,$367)|0);
      $370 = (($369) + ($i$1174))|0;
      $371 = ($370|0)>($i$0$lcssa267|0);
      if ($371) {
       break L496;
      }
      $372 = (($ws$1175) + 4|0);
      ___fwritex($mb,$369,$f);
      $373 = ($370>>>0)<($i$0$lcssa267>>>0);
      if ($373) {
       $i$1174 = $370;$ws$1175 = $372;
      } else {
       break;
      }
     }
    }
   } while(0);
   $374 = ($356|0)==(8192);
   $or$cond$i65 = $374 & $358;
   if ($or$cond$i65) {
    $375 = (($w$1) - ($i$0$lcssa267))|0;
    $376 = ($375>>>0)>(256);
    $377 = $376 ? 256 : $375;
    _memset(($pad$i|0),32,($377|0))|0;
    $378 = ($375>>>0)>(255);
    if ($378) {
     $$01$i67 = $375;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $379 = (($$01$i67) + -256)|0;
      $380 = ($379>>>0)>(255);
      if ($380) {
       $$01$i67 = $379;
      } else {
       break;
      }
     }
     $381 = $375 & 255;
     $$0$lcssa$i69 = $381;
    } else {
     $$0$lcssa$i69 = $375;
    }
    ___fwritex($pad$i,$$0$lcssa$i69,$f);
   }
   $382 = $358 ? $w$1 : $i$0$lcssa267;
   $1053 = $1064;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $382;$l10n$0 = $l10n$3;
   continue;
  }
  $949 = $z$2;
  $950 = $a$2;
  $951 = (($949) - ($950))|0;
  $952 = ($p$5|0)<($951|0);
  $$p$5 = $952 ? $951 : $p$5;
  $953 = (($pl$2) + ($$p$5))|0;
  $954 = ($w$1|0)<($953|0);
  $w$2 = $954 ? $953 : $w$1;
  $955 = $fl$6 & 73728;
  $956 = ($955|0)==(0);
  $957 = ($w$2|0)>($953|0);
  $or$cond$i75 = $956 & $957;
  if ($or$cond$i75) {
   $958 = (($w$2) - ($953))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),32,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i77 = $958;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $962 = (($$01$i77) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i77 = $962;
     } else {
      break;
     }
    }
    $964 = $958 & 255;
    $$0$lcssa$i79 = $964;
   } else {
    $$0$lcssa$i79 = $958;
   }
   ___fwritex($pad$i,$$0$lcssa$i79,$f);
  }
  ___fwritex($prefix$2,$pl$2,$f);
  $965 = ($955|0)==(65536);
  $or$cond$i51 = $965 & $957;
  if ($or$cond$i51) {
   $966 = (($w$2) - ($953))|0;
   $967 = ($966>>>0)>(256);
   $968 = $967 ? 256 : $966;
   _memset(($pad$i|0),48,($968|0))|0;
   $969 = ($966>>>0)>(255);
   if ($969) {
    $$01$i53 = $966;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $970 = (($$01$i53) + -256)|0;
     $971 = ($970>>>0)>(255);
     if ($971) {
      $$01$i53 = $970;
     } else {
      break;
     }
    }
    $972 = $966 & 255;
    $$0$lcssa$i55 = $972;
   } else {
    $$0$lcssa$i55 = $966;
   }
   ___fwritex($pad$i,$$0$lcssa$i55,$f);
  }
  $973 = ($$p$5|0)>($951|0);
  if ($973) {
   $974 = (($$p$5) - ($951))|0;
   $975 = ($974>>>0)>(256);
   $976 = $975 ? 256 : $974;
   _memset(($pad$i|0),48,($976|0))|0;
   $977 = ($974>>>0)>(255);
   if ($977) {
    $$01$i38 = $974;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $978 = (($$01$i38) + -256)|0;
     $979 = ($978>>>0)>(255);
     if ($979) {
      $$01$i38 = $978;
     } else {
      break;
     }
    }
    $980 = $974 & 255;
    $$0$lcssa$i40 = $980;
   } else {
    $$0$lcssa$i40 = $974;
   }
   ___fwritex($pad$i,$$0$lcssa$i40,$f);
  }
  ___fwritex($a$2,$951,$f);
  $981 = ($955|0)==(8192);
  $or$cond$i = $981 & $957;
  if (!($or$cond$i)) {
   $1053 = $1060;$1054 = $1061;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $982 = (($w$2) - ($953))|0;
  $983 = ($982>>>0)>(256);
  $984 = $983 ? 256 : $982;
  _memset(($pad$i|0),32,($984|0))|0;
  $985 = ($982>>>0)>(255);
  if ($985) {
   $$01$i = $982;
   while(1) {
    ___fwritex($pad$i,256,$f);
    $986 = (($$01$i) + -256)|0;
    $987 = ($986>>>0)>(255);
    if ($987) {
     $$01$i = $986;
    } else {
     break;
    }
   }
   $988 = $982 & 255;
   $$0$lcssa$i = $988;
  } else {
   $$0$lcssa$i = $982;
  }
  ___fwritex($pad$i,$$0$lcssa$i,$f);
  $1053 = $1060;$1054 = $1061;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 363) {
  $989 = ($f|0)==(0|0);
  if (!($989)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $990 = ($l10n$0|0)==(0);
  if ($990) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $991 = (($nl_type) + ($i$2100<<2)|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = ($992|0)==(0);
   if ($993) {
    $1066 = 1;$i$397 = $i$2100;
    break;
   }
   $994 = (($nl_arg) + ($i$2100<<3)|0);
   $995 = ($992>>>0)>(20);
   L551: do {
    if (!($995)) {
     do {
      switch ($992|0) {
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $997 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $998 = ($997|0)<(0);
       $999 = $998 << 31 >> 31;
       $1000 = $994;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       $1002 = (($1000) + 4)|0;
       $1003 = $1002;
       HEAP32[$1003>>2] = $999;
       break L551;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$994>>2] = $996;
       break L551;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1004 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1005 = $994;
       $1006 = $1005;
       HEAP32[$1006>>2] = $1004;
       $1007 = (($1005) + 4)|0;
       $1008 = $1007;
       HEAP32[$1008>>2] = 0;
       break L551;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1009 = $arglist_current44;
       $1010 = $1009;
       $1011 = HEAP32[$1010>>2]|0;
       $1012 = (($1009) + 4)|0;
       $1013 = $1012;
       $1014 = HEAP32[$1013>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1015 = $994;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1011;
       $1017 = (($1015) + 4)|0;
       $1018 = $1017;
       HEAP32[$1018>>2] = $1014;
       break L551;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1019 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1020 = $1019&65535;
       $1021 = $1020 << 16 >> 16;
       $1022 = ($1021|0)<(0);
       $1023 = $1022 << 31 >> 31;
       $1024 = $994;
       $1025 = $1024;
       HEAP32[$1025>>2] = $1021;
       $1026 = (($1024) + 4)|0;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1023;
       break L551;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1028 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1028 & 65535;
       $1029 = $994;
       $1030 = $1029;
       HEAP32[$1030>>2] = $$mask1$i;
       $1031 = (($1029) + 4)|0;
       $1032 = $1031;
       HEAP32[$1032>>2] = 0;
       break L551;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1033 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1034 = $1033&255;
       $1035 = $1034 << 24 >> 24;
       $1036 = ($1035|0)<(0);
       $1037 = $1036 << 31 >> 31;
       $1038 = $994;
       $1039 = $1038;
       HEAP32[$1039>>2] = $1035;
       $1040 = (($1038) + 4)|0;
       $1041 = $1040;
       HEAP32[$1041>>2] = $1037;
       break L551;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1042 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1042 & 255;
       $1043 = $994;
       $1044 = $1043;
       HEAP32[$1044>>2] = $$mask$i;
       $1045 = (($1043) + 4)|0;
       $1046 = $1045;
       HEAP32[$1046>>2] = 0;
       break L551;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1047 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$994>>3] = $1047;
       break L551;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1048 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$994>>3] = $1048;
       break L551;
       break;
      }
      default: {
       break L551;
      }
      }
     } while(0);
    }
   } while(0);
   $1049 = (($i$2100) + 1)|0;
   $1050 = ($1049|0)<(10);
   if ($1050) {
    $i$2100 = $1049;
   } else {
    $$0 = 1;
    label = 382;
    break;
   }
  }
  if ((label|0) == 382) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1052 = (($i$397) + 1)|0;
   if (!($1066)) {
    $$0 = -1;
    label = 382;
    break;
   }
   $1051 = ($1052|0)<(10);
   if (!($1051)) {
    $$0 = 1;
    label = 382;
    break;
   }
   $$phi$trans$insert = (($nl_type) + ($1052<<2)|0);
   $$pre18 = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp20 = ($$pre18|0)==(0);
   $1066 = $phitmp20;$i$397 = $1052;
  }
  if ((label|0) == 382) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 382) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&31]()|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&31](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&31](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&63]();
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2() { ; nullFunc_i(2);return 0; }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6); }
  function b7() { ; nullFunc_v(7); }
  function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0; }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9); }
  function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
  function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,b0,b0,b0
  ,b0,b0,b0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj,b0,__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_,b0,__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12operator_newI5Test1JEEEPT_DpOT0_
  ,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI5Test1EEvPT_,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeI5Test1EEPKvPT_,b5,__ZN10emscripten8internal7InvokerIP5Test1JEE6invokeEPFS3_vE,b5
  ,__ZN5Test18generateEv,b5,b5];
  var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj,b6,__ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_,b6,b6,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9];
  var FUNCTION_TABLE_iii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,__ZN10emscripten8internal13MethodInvokerIM5Test1FivEiPS2_JEE6invokeERKS4_S5_,b10];
  var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11
  ,b11,b11,__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];

  return { _malloc: _malloc, _i64Subtract: _i64Subtract, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _strlen: _strlen, _memset: _memset, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a8: __GLOBAL__I_a8, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real___GLOBAL__I_a8 = asm["__GLOBAL__I_a8"]; asm["__GLOBAL__I_a8"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a8.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a8 = Module["__GLOBAL__I_a8"] = asm["__GLOBAL__I_a8"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



