// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22176;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,117,102,102,101,114,32,112,116,114,32,105,115,32,39,37,105,39,10,0,0,0,0,0,66,117,102,102,101,114,91,48,93,32,105,115,32,39,37,99,39,10,0,0,0,0,0,0,69,114,114,111,114,32,105,110,32,111,112,101,110,105,110,103,32,102,105,108,101,10,0,0,82,101,97,100,32,109,101,115,104,32,37,105,32,37,105,10,0,0,0,0,0,0,0,0,82,101,102,105,110,101,100,32,109,101,115,104,32,37,105,32,37,105,10,0,0,0,0,0,79,112,101,110,105,110,110,103,32,116,105,109,101,32,37,53,46,50,102,32,10,32,82,101,102,105,110,101,109,101,110,116,32,116,105,109,101,32,37,53,46,50,102,0,0,0,0,0,116,114,105,58,58,72,97,115,70,70,65,100,106,97,99,101,110,99,121,40,109,41,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,103,111,114,105,116,104,109,115,47,114,101,102,105,110,101,46,104,0,0,0,82,101,102,105,110,101,69,0,82,101,102,105,110,101,68,97,116,97,0,0,0,0,0,0,82,101,102,105,110,105,110,103,46,46,46,0,0,0,0,0,101,100,103,101,67,117,114,46,73,115,77,97,110,105,102,111,108,100,40,41,0,0,0,0,82,68,91,101,100,103,101,67,117,114,46,70,40,41,93,46,101,112,91,101,100,103,101,67,117,114,46,69,40,41,93,0,108,97,115,116,118,61,61,109,46,118,101,114,116,46,101,110,100,40,41,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,40,42,110,102,91,105,93,41,46,86,40,106,41,33,61,48,0,0,0,0,0,0,0,0,108,97,115,116,102,61,61,109,46,102,97,99,101,46,101,110,100,40,41,0,0,0,0,0,33,109,46,118,101,114,116,46,101,109,112,116,121,40,41,0,40,42,102,105,41,46,86,40,48,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,48,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,40,42,102,105,41,46,86,40,49,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,49,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,40,42,102,105,41,46,86,40,50,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,50,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,116,48,46,110,40,41,61,61,32,116,49,46,110,40,41,0,87,101,100,103,101,73,110,116,101,114,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,0,0,0,87,84,0,0,0,0,0,0,105,62,61,48,32,38,38,32,105,60,51,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,100,101,112,114,101,99,97,116,101,100,95,112,111,105,110,116,51,46,104,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,106,62,61,48,32,38,38,32,106,60,51,0,0,0,0,0,86,0,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,99,111,110,110,101,99,116,111,114,115,47,104,101,100,103,101,95,99,111,109,112,111,110,101,110,116,46,104,0,0,72,70,112,0,0,0,0,0,99,72,70,112,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,101,100,103,101,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,0,0,0,69,70,112,0,0,0,0,0,99,69,70,112,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,118,101,114,116,101,120,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,0,86,70,112,0,0,0,0,0,99,86,70,112,0,0,0,0,70,70,112,0,0,0,0,0,118,112,62,61,111,108,100,66,97,115,101,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,108,111,99,97,116,101,46,104,0,0,0,0,85,112,100,97,116,101,0,0,118,112,60,111,108,100,69,110,100,0,0,0,0,0,0,0,99,70,70,112,0,0,0,0,109,112,0,0,0,0,0,0,111,112,101,114,97,116,111,114,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,120,62,61,48,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,99,111,108,111,114,52,46,104,0,0,0,0,0,0,0,0,108,101,114,112,0,0,0,0,120,60,61,49,0,0,0,0,105,62,61,48,32,38,38,32,105,60,52,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,100,101,112,114,101,99,97,116,101,100,95,112,111,105,110,116,52,46,104,0,0,0,0,0,72,86,112,0,0,0,0,0,99,86,0,0,0,0,0,0,102,45,62,70,70,112,40,122,41,45,62,70,70,112,40,102,45,62,70,70,105,40,122,41,41,61,61,102,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,112,111,115,46,104,0,0,0,0,70,108,105,112,70,0,0,0,102,45,62,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,86,40,40,122,41,41,61,61,118,41,0,0,0,0,110,102,45,62,86,40,110,102,45,62,80,114,101,118,40,110,122,41,41,33,61,118,32,38,38,32,40,110,102,45,62,86,40,110,102,45,62,78,101,120,116,40,110,122,41,41,61,61,118,32,124,124,32,110,102,45,62,86,40,40,110,122,41,41,61,61,118,41,0,0,0,0,102,45,62,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,86,40,122,41,61,61,118,41,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,116,111,112,111,108,111,103,121,46,104,0,0,0,0,0,0,0,73,115,66,111,114,100,101,114,0,0,0,0,0,0,0,0,102,46,99,70,70,112,40,106,41,32,33,61,32,48,0,0,73,115,77,97,110,105,102,111,108,100,0,0,0,0,0,0,102,45,62,99,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,99,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,99,86,40,122,41,61,61,118,41,0,0,0,86,70,108,105,112,0,0,0,105,32,61,61,109,46,102,97,99,101,95,97,116,116,114,46,101,110,100,40,41,0,0,0,65,100,100,80,101,114,70,97,99,101,65,116,116,114,105,98,117,116,101,0,0,0,0,0,0,0,0,0,240,11,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,78,51,118,99,103,49,52,83,105,109,112,108,101,84,101,109,112,68,97,116,97,73,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,54,77,121,70,97,99,101,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,78,83,95,51,116,114,105,49,53,82,101,102,105,110,101,100,70,97,99,101,68,97,116,97,73,80,56,77,121,86,101,114,116,101,120,69,69,69,69,0,0,0,0,0,0,0,78,51,118,99,103,49,56,83,105,109,112,108,101,84,101,109,112,68,97,116,97,66,97,115,101,69,0,0,0,0,0,0,208,79,0,0,200,11,0,0,248,79,0,0,88,11,0,0,232,11,0,0,0,0,0,0,0,0,0,0,232,11,0,0,8,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,0,0,0,0,70,70,65,100,106,97,99,101,110,99,121,0,0,0,0,0,78,51,118,99,103,50,53,77,105,115,115,105,110,103,67,111,109,112,111,110,101,110,116,69,120,99,101,112,116,105,111,110,69,0,0,0,0,0,0,0,248,79,0,0,56,12,0,0,120,78,0,0,0,0,0,0,0,0,0,0,96,12,0,0,11,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,67,111,109,112,111,110,101,110,116,32,69,120,99,101,112,116,105,111,110,32,45,0,0,0,45,32,10,0,0,0,0,0,77,105,115,115,105,110,103,32,67,111,109,112,111,110,101,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,101,114,70,97,99,101,70,108,97,103,115,32,32,32,32,32,32,32,0,0,0,0,0,40,42,113,41,46,122,62,61,48,0,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,103,111,114,105,116,104,109,115,47,117,112,100,97,116,101,47,116,111,112,111,108,111,103,121,46,104,0,0,70,97,99,101,70,97,99,101,0,0,0,0,0,0,0,0,40,42,113,95,110,101,120,116,41,46,122,62,61,48,0,0,40,42,113,95,110,101,120,116,41,46,122,60,32,40,42,113,95,110,101,120,116,41,46,102,45,62,86,78,40,41,0,0,40,42,113,41,46,122,60,32,40,42,113,41,46,102,45,62,86,78,40,41,0,0,0,0,112,102,33,61,48,0,0,0,83,101,116,0,0,0,0,0,110,122,62,61,48,0,0,0,110,122,60,112,102,45,62,86,78,40,41,0,0,0,0,0,118,91,48,93,32,33,61,32,118,91,49,93,0,0,0,0,60,0,0,0,0,0,0,0,168,14,0,0,14,0,0,0,15,0,0,0,196,255,255,255,196,255,255,255,168,14,0,0,16,0,0,0,17,0,0,0,52,14,0,0,196,14,0,0,216,14,0,0,72,14,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,248,79,0,0,96,14,0,0,224,36,0,0,0,0,0,0,60,0,0,0,0,0,0,0,224,36,0,0,18,0,0,0,19,0,0,0,196,255,255,255,196,255,255,255,224,36,0,0,20,0,0,0,21,0,0,0,0,0,0,0,104,15,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,248,79,0,0,32,15,0,0,104,36,0,0,0,0,0,0,79,70,70,0,0,0,0,0,86,101,114,116,101,120,32,76,111,97,100,105,110,103,0,0,46,0,0,0,0,0,0,0,70,97,99,101,32,76,111,97,100,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,46,118,101,114,116,46,115,105,122,101,40,41,62,48,0,65,100,100,81,117,97,100,70,97,99,101,0,0,0,0,0,118,48,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,48,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,49,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,49,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,50,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,50,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,51,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,51,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,65,100,100,70,97,99,101,0,40,118,48,33,61,118,49,41,32,38,38,32,40,118,49,33,61,118,50,41,32,38,38,32,40,118,48,33,61,118,50,41,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,76,61,205,204,76,61,205,204,76,61,205,204,76,61,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,114,111,119,32,62,61,32,48,32,38,38,32,114,111,119,32,60,32,52,0,0,0,0,0,46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,118,99,103,108,105,98,47,118,99,103,47,109,97,116,104,47,109,97,116,114,105,120,52,52,46,104,0,0,0,0,0,0,0,69,108,101,109,101,110,116,65,116,0,0,0,0,0,0,0,99,111,108,32,62,61,32,48,32,38,38,32,99,111,108,32,60,32,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([32,31,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,248,79,0,0,0,31,0,0,168,36,0,0,0,0,0,0,0,0,0,0,136,31,0,0,50,0,0,0,51,0,0,0,52,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,53,0,0,0,43,0,0,0,44,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,248,79,0,0,112,31,0,0,168,36,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,32,32,0,0,59,0,0,0,60,0,0,0,61,0,0,0,25,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,29,0,0,0,30,0,0,0,65,0,0,0,32,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,248,79,0,0,0,32,0,0,104,36,0,0,0,0,0,0,0,0,0,0,136,32,0,0,69,0,0,0,70,0,0,0,71,0,0,0,25,0,0,0,62,0,0,0,63,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,34,0,0,0,75,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,248,79,0,0,112,32,0,0,104,36,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,208,79,0,0,152,32,0,0,58,32,0,0,0,0,0,0,0,0,0,0,248,32,0,0,76,0,0,0,77,0,0,0,78,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,248,79,0,0,224,32,0,0,120,78,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,208,79,0,0,8,33,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,248,79,0,0,48,33,0,0,40,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,224,35,0,0,79,0,0,0,80,0,0,0,0,0,0,0,104,36,0,0,81,0,0,0,82,0,0,0,24,0,0,0,25,0,0,0,62,0,0,0,63,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,65,0,0,0,32,0,0,0,66,0,0,0,34,0,0,0,75,0,0,0,0,0,0,0,168,36,0,0,83,0,0,0,84,0,0,0,85,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,53,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,57,0,0,0,58,0,0,0,8,0,0,0,0,0,0,0,224,36,0,0,18,0,0,0,19,0,0,0,248,255,255,255,248,255,255,255,224,36,0,0,20,0,0,0,21,0,0,0,8,0,0,0,0,0,0,0,40,37,0,0,86,0,0,0,87,0,0,0,248,255,255,255,248,255,255,255,40,37,0,0,88,0,0,0,89,0,0,0,4,0,0,0,0,0,0,0,112,37,0,0,90,0,0,0,91,0,0,0,252,255,255,255,252,255,255,255,112,37,0,0,92,0,0,0,93,0,0,0,4,0,0,0,0,0,0,0,184,37,0,0,94,0,0,0,95,0,0,0,252,255,255,255,252,255,255,255,184,37,0,0,96,0,0,0,97,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,35,0,0,98,0,0,0,99,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,168,35,0,0,100,0,0,0,101,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,248,79,0,0,96,35,0,0,248,32,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,208,79,0,0,144,35,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,248,79,0,0,176,35,0,0,168,35,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,248,79,0,0,240,35,0,0,168,35,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,208,79,0,0,48,36,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,208,79,0,0,112,36,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,88,80,0,0,176,36,0,0,0,0,0,0,1,0,0,0,224,35,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,88,80,0,0,248,36,0,0,0,0,0,0,1,0,0,0,32,36,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,88,80,0,0,64,37,0,0,0,0,0,0,1,0,0,0,224,35,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,88,80,0,0,136,37,0,0,0,0,0,0,1,0,0,0,32,36,0,0,3,244,255,255,0,0,0,0,24,38,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,248,79,0,0,248,37,0,0,72,33,0,0,0,0,0,0,0,0,0,0,96,52,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,52,0,0,115,0,0,0,116,0,0,0,111,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,57,0,0,120,0,0,0,121,0,0,0,111,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,208,57,0,0,133,0,0,0,134,0,0,0,111,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,58,0,0,146,0,0,0,147,0,0,0,111,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,40,59,0,0,156,0,0,0,157,0,0,0,111,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,80,54,0,0,166,0,0,0,167,0,0,0,111,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,248,255,255,255,80,54,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,240,54,0,0,182,0,0,0,183,0,0,0,111,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,248,255,255,255,240,54,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,128,55,0,0,198,0,0,0,199,0,0,0,111,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,55,0,0,201,0,0,0,202,0,0,0,111,0,0,0,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,52,0,0,204,0,0,0,205,0,0,0,111,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,53,0,0,215,0,0,0,216,0,0,0,111,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,53,0,0,226,0,0,0,227,0,0,0,111,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,53,0,0,237,0,0,0,238,0,0,0,111,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,59,0,0,248,0,0,0,249,0,0,0,111,0,0,0,250,0,0,0,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,72,60,0,0,252,0,0,0,253,0,0,0,111,0,0,0,254,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,216,60,0,0,0,1,0,0,1,1,0,0,111,0,0,0,2,1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,104,61,0,0,4,1,0,0,5,1,0,0,111,0,0,0,6,1,0,0,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,56,0,0,8,1,0,0,9,1,0,0,111,0,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,56,0,0,13,1,0,0,14,1,0,0,111,0,0,0,15,1,0,0,16,1,0,0,17,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,56,52,0,0,18,1,0,0,19,1,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,49,0,0,20,1,0,0,21,1,0,0,111,0,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,49,0,0,30,1,0,0,31,1,0,0,111,0,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,51,0,0,39,1,0,0,40,1,0,0,111,0,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,0,0,0,0,16,52,0,0,46,1,0,0,47,1,0,0,111,0,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,72,48,0,0,53,1,0,0,54,1,0,0,111,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,248,79,0,0,48,48,0,0,184,32,0,0,0,0,0,0,0,0,0,0,216,48,0,0,53,1,0,0,55,1,0,0,111,0,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,208,79,0,0,184,48,0,0,88,80,0,0,160,48,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,48,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,88,80,0,0,248,48,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,48,0,0,2,0,0,0,0,0,0,0,168,49,0,0,53,1,0,0,68,1,0,0,111,0,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,208,79,0,0,136,49,0,0,88,80,0,0,96,49,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,160,49,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,88,80,0,0,200,49,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,160,49,0,0,2,0,0,0,0,0,0,0,104,50,0,0,53,1,0,0,76,1,0,0,111,0,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,88,80,0,0,64,50,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,160,49,0,0,2,0,0,0,0,0,0,0,224,50,0,0,53,1,0,0,84,1,0,0,111,0,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,88,80,0,0,184,50,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,160,49,0,0,2,0,0,0,0,0,0,0,88,51,0,0,53,1,0,0,92,1,0,0,111,0,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,248,79,0,0,48,51,0,0,224,50,0,0,0,0,0,0,0,0,0,0,192,51,0,0,53,1,0,0,93,1,0,0,111,0,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,248,79,0,0,152,51,0,0,224,50,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,248,79,0,0,208,51,0,0,72,48,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,248,79,0,0,248,51,0,0,72,48,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,248,79,0,0,32,52,0,0,72,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,248,79,0,0,72,52,0,0,72,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,248,79,0,0,112,52,0,0,72,48,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,208,79,0,0,184,52,0,0,88,80,0,0,152,52,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,52,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,88,80,0,0,248,52,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,52,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,88,80,0,0,56,53,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,52,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,88,80,0,0,120,53,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,52,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,208,79,0,0,0,54,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,208,79,0,0,32,54,0,0,88,80,0,0,184,53,0,0,0,0,0,0,3,0,0,0,72,48,0,0,2,0,0,0,24,54,0,0,2,0,0,0,72,54,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,208,79,0,0,192,54,0,0,88,80,0,0,120,54,0,0,0,0,0,0,3,0,0,0,72,48,0,0,2,0,0,0,24,54,0,0,2,0,0,0,232,54,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,208,79,0,0,96,55,0,0,88,80,0,0,24,55,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,120,55,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,88,80,0,0,160,55,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,120,55,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,208,79,0,0,32,56,0,0,88,80,0,0,8,56,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,56,56,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,88,80,0,0,96,56,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,56,56,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,208,79,0,0,248,56,0,0,88,80,0,0,224,56,0,0,0,0,0,0,1,0,0,0,24,57,0,0,0,0,0,0,88,80,0,0,152,56,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,32,57,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,88,80,0,0,160,57,0,0,0,0,0,0,1,0,0,0,24,57,0,0,0,0,0,0,88,80,0,0,88,57,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,184,57,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,208,79,0,0,80,58,0,0,88,80,0,0,56,58,0,0,0,0,0,0,1,0,0,0,112,58,0,0,0,0,0,0,88,80,0,0,240,57,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,120,58,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,88,80,0,0,248,58,0,0,0,0,0,0,1,0,0,0,112,58,0,0,0,0,0,0,88,80,0,0,176,58,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,16,59,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,208,79,0,0,144,59,0,0,88,80,0,0,72,59,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,176,59,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,208,79,0,0,32,60,0,0,88,80,0,0,216,59,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,64,60,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,208,79,0,0,176,60,0,0,88,80,0,0,104,60,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,208,60,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,208,79,0,0,64,61,0,0,88,80,0,0,248,60,0,0,0,0,0,0,2,0,0,0,72,48,0,0,2,0,0,0,96,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7868);
/* memory initializer */ allocate([109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,1,0,0,0,0,0,0,104,75,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,0,77,0,0,95,1,0,0,96,1,0,0,97,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,248,79,0,0,240,76,0,0,136,77,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,208,79,0,0,120,77,0,0,0,0,0,0,208,77,0,0,98,1,0,0,99,1,0,0,100,1,0,0,0,0,0,0,0,0,0,0,120,78,0,0,101,1,0,0,102,1,0,0,78,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,248,79,0,0,192,77,0,0,136,77,0,0,0,0,0,0,0,0,0,0,16,78,0,0,98,1,0,0,103,1,0,0,100,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,248,79,0,0,248,77,0,0,208,77,0,0,0,0,0,0,0,0,0,0,80,78,0,0,98,1,0,0,104,1,0,0,100,1,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,248,79,0,0,56,78,0,0,208,77,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,248,79,0,0,96,78,0,0,136,77,0,0,0,0,0,0,0,0,0,0,216,78,0,0,105,1,0,0,106,1,0,0,107,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,208,79,0,0,176,78,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,248,79,0,0,200,78,0,0,136,77,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,248,79,0,0,232,78,0,0,192,78,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,248,79,0,0,32,79,0,0,16,79,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,248,79,0,0,128,79,0,0,16,79,0,0,0,0,0,0,248,79,0,0,88,79,0,0,168,79,0,0,0,0,0,0,0,0,0,0,72,79,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,0,0,0,0,64,80,0,0,108,1,0,0,116,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,248,79,0,0,24,80,0,0,72,79,0,0,0,0,0,0,0,0,0,0,160,80,0,0,108,1,0,0,120,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,248,79,0,0,120,80,0,0,72,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18108);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  var _sqrtf=Math_sqrt;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var _acos=Math_acos;

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_vidddd": invoke_vidddd, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_copysignl": _copysignl, "_send": _send, "_vfprintf": _vfprintf, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_guard_acquire": ___cxa_guard_acquire, "_fmodl": _fmodl, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_acos": _acos, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_uselocale": _uselocale, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_strftime": _strftime, "_clock": _clock, "_sqrtf": _sqrtf, "__arraySum": __arraySum, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fileno": _fileno, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_printf": _printf, "__reallyNegative": __reallyNegative, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_copysign": _copysign, "_fputc": _fputc, "_mkport": _mkport, "_freelocale": _freelocale, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___cxa_rethrow": ___cxa_rethrow, "__exit": __exit, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "___cxa_throw": ___cxa_throw, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "___cxa_atexit": ___cxa_atexit, "_pthread_key_create": _pthread_key_create, "__formatString": __formatString, "_atexit": _atexit, "_catopen": _catopen, "_exit": _exit, "_time": _time, "_read": _read, "___cxa_guard_abort": ___cxa_guard_abort, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _copysignl=env._copysignl;
  var _send=env._send;
  var _vfprintf=env._vfprintf;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _fmodl=env._fmodl;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _acos=env._acos;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _uselocale=env._uselocale;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _strftime=env._strftime;
  var _clock=env._clock;
  var _sqrtf=env._sqrtf;
  var __arraySum=env.__arraySum;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fileno=env._fileno;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _printf=env._printf;
  var __reallyNegative=env.__reallyNegative;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var _freelocale=env._freelocale;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var ___cxa_throw=env.___cxa_throw;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var ___cxa_atexit=env.___cxa_atexit;
  var _pthread_key_create=env._pthread_key_create;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var _time=env._time;
  var _read=env._read;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _allocator($_size) {
 $_size = $_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_size;
 $1 = $0;
 HEAP32[16>>2] = $1;
 $2 = HEAP32[16>>2]|0;
 $3 = (_malloc($2)|0);
 HEAP32[8>>2] = $3;
 $4 = HEAP32[8>>2]|0;
 HEAP8[$4>>0] = 81;
 $5 = HEAP32[8>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _refine($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $edgePred = 0, $loadmask = 0, $m = 0, $midFun = 0, $ret = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 16|0;
 $vararg_buffer10 = sp;
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $m = sp + 72|0;
 $loadmask = sp + 376|0;
 $edgePred = sp + 392|0;
 $midFun = sp + 400|0;
 $0 = $num;
 __ZN6MyMeshC1Ev($m);
 __THREW__ = 0;
 $4 = (invoke_i(381)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if (!($6)) {
   $t0 = $4;
   $7 = HEAP32[8>>2]|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = $7;
   (invoke_iii(382,(24|0),($vararg_buffer|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = HEAP32[8>>2]|0;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer1>>2] = $12;
    (invoke_iii(382,(48|0),($vararg_buffer1|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = HEAP32[8>>2]|0;
     $16 = HEAP32[8>>2]|0;
     __THREW__ = 0;
     $17 = (invoke_ii(383,($16|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      __THREW__ = 0;
      $20 = (invoke_iiiiii(384,($m|0),($15|0),($17|0),($loadmask|0),(0|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $ret = $20;
       __THREW__ = 0;
       $23 = (invoke_i(381)|0);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        $t1 = $23;
        $26 = $ret;
        $27 = ($26|0)!=(0);
        if ($27) {
         __THREW__ = 0;
         (invoke_iii(382,(72|0),($vararg_buffer4|0))|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          break;
         }
         __THREW__ = 0;
         invoke_vi(385,-1);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          break;
         }
         // unreachable;
        }
        __THREW__ = 0;
        $36 = (invoke_i(381)|0);
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if (!($38)) {
         $t2 = $36;
         __THREW__ = 0;
         $39 = (invoke_ii(387,($m|0))|0);
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if (!($41)) {
          __THREW__ = 0;
          $42 = (invoke_ii(388,($m|0))|0);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if (!($44)) {
           __THREW__ = 0;
           HEAP32[$vararg_buffer6>>2] = $39;
           $vararg_ptr9 = (($vararg_buffer6) + 4|0);
           HEAP32[$vararg_ptr9>>2] = $42;
           (invoke_iii(382,(96|0),($vararg_buffer6|0))|0);
           $45 = __THREW__; __THREW__ = 0;
           $46 = $45&1;
           if (!($46)) {
            __THREW__ = 0;
            invoke_vi(389,($m|0));
            $47 = __THREW__; __THREW__ = 0;
            $48 = $47&1;
            if (!($48)) {
             __THREW__ = 0;
             invoke_vid(390,($edgePred|0),0.0);
             $49 = __THREW__; __THREW__ = 0;
             $50 = $49&1;
             if (!($50)) {
              __THREW__ = 0;
              invoke_viii(391,($midFun|0),($m|0),(0|0));
              $51 = __THREW__; __THREW__ = 0;
              $52 = $51&1;
              if (!($52)) {
               __THREW__ = 0;
               (invoke_iiiiii(392,($m|0),($midFun|0),($edgePred|0),0,(0|0))|0);
               $53 = __THREW__; __THREW__ = 0;
               $54 = $53&1;
               if (!($54)) {
                __THREW__ = 0;
                $55 = (invoke_i(381)|0);
                $56 = __THREW__; __THREW__ = 0;
                $57 = $56&1;
                if (!($57)) {
                 $t3 = $55;
                 __THREW__ = 0;
                 $58 = (invoke_ii(387,($m|0))|0);
                 $59 = __THREW__; __THREW__ = 0;
                 $60 = $59&1;
                 if (!($60)) {
                  __THREW__ = 0;
                  $61 = (invoke_ii(388,($m|0))|0);
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if (!($63)) {
                   __THREW__ = 0;
                   HEAP32[$vararg_buffer10>>2] = $58;
                   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
                   HEAP32[$vararg_ptr13>>2] = $61;
                   (invoke_iii(382,(120|0),($vararg_buffer10|0))|0);
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if (!($65)) {
                    $66 = $t1;
                    $67 = $t0;
                    $68 = (($66) - ($67))|0;
                    $69 = (+($68|0));
                    $70 = $69 / 1.0E+6;
                    $71 = $70;
                    $72 = $t3;
                    $73 = $t2;
                    $74 = (($72) - ($73))|0;
                    $75 = (+($74|0));
                    $76 = $75 / 1.0E+6;
                    $77 = $76;
                    __THREW__ = 0;
                    HEAPF64[tempDoublePtr>>3]=$71;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
                    $vararg_ptr17 = (($vararg_buffer14) + 8|0);
                    HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
                    (invoke_iii(382,(144|0),($vararg_buffer14|0))|0);
                    $78 = __THREW__; __THREW__ = 0;
                    $79 = $78&1;
                    if ($79) {
                     break;
                    }
                    __THREW__ = 0;
                    $80 = (invoke_ii(387,($m|0))|0);
                    $81 = __THREW__; __THREW__ = 0;
                    $82 = $81&1;
                    if ($82) {
                     break;
                    }
                    $3 = 1;
                    __ZN6MyMeshD1Ev($m);
                    STACKTOP = sp;return ($80|0);
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $1 = $32;
 $2 = $33;
 __THREW__ = 0;
 invoke_vi(386,($m|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $85 = ___cxa_find_matching_catch(0|0)|0;
  $86 = tempRet0;
  ___clang_call_terminate($85);
  // unreachable;
 }
 $83 = $1;
 $84 = $2;
 ___resumeException($83|0);
 // unreachable;
 return 0|0;
}
function __ZN6MyMeshC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6MyMeshC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE7OpenMemERS3_PKcjRiPFbiS7_E($mesh,$mem,$sz,$loadmask,$cb) {
 $mesh = $mesh|0;
 $mem = $mem|0;
 $sz = $sz|0;
 $loadmask = $loadmask|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i = 0;
 var $__i$i$i$i$i$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $str = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 164|0;
 $strm = sp + 188|0;
 $38 = $mesh;
 $39 = $mem;
 $40 = $sz;
 $41 = $loadmask;
 $42 = $cb;
 $37 = $str;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $34 = $48;
 $49 = $34;
 $33 = $49;
 $50 = $33;
 $32 = $50;
 $31 = $47;
 $51 = $31;
 $30 = $51;
 $52 = $30;
 $29 = $52;
 $53 = $29;
 $__a$i$i$i = $53;
 $__i$i$i$i = 0;
 while(1) {
  $54 = $__i$i$i$i;
  $55 = ($54>>>0)<(3);
  if (!($55)) {
   break;
  }
  $56 = $__i$i$i$i;
  $57 = $__a$i$i$i;
  $58 = (($57) + ($56<<2)|0);
  HEAP32[$58>>2] = 0;
  $59 = $__i$i$i$i;
  $60 = (($59) + 1)|0;
  $__i$i$i$i = $60;
 }
 $61 = $39;
 $62 = $40;
 __THREW__ = 0;
 (invoke_iiii(393,($str|0),($61|0),($62|0))|0);
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 L5: do {
  if ($64) {
   label = 25;
  } else {
   $24 = $strm;
   $25 = $str;
   $26 = 8;
   $65 = $24;
   $66 = (($65) + 60|0);
   $23 = $66;
   $67 = $23;
   $22 = $67;
   $68 = $22;
   $69 = (9024 + 8|0);
   HEAP32[$68>>2] = $69;
   $70 = (8624 + 8|0);
   HEAP32[$67>>2] = $70;
   $71 = (3624 + 12|0);
   HEAP32[$65>>2] = $71;
   $72 = (($65) + 60|0);
   $73 = (3624 + 32|0);
   HEAP32[$72>>2] = $73;
   $74 = (($65) + 8|0);
   $19 = $65;
   $75 = (3664 + 4|0);
   $20 = $75;
   $21 = $74;
   $76 = $19;
   $77 = $20;
   $78 = HEAP32[$77>>2]|0;
   HEAP32[$76>>2] = $78;
   $79 = (($77) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$76>>2]|0;
   $82 = (($81) + -12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($76) + ($83)|0);
   HEAP32[$84>>2] = $80;
   $85 = (($76) + 4|0);
   HEAP32[$85>>2] = 0;
   $86 = HEAP32[$76>>2]|0;
   $87 = (($86) + -12|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($76) + ($88)|0);
   $90 = $21;
   $17 = $89;
   $18 = $90;
   $91 = $17;
   $92 = $18;
   __THREW__ = 0;
   invoke_vii(394,($91|0),($92|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   do {
    if ($94) {
     $144 = ___cxa_find_matching_catch()|0;
     $145 = tempRet0;
     $27 = $144;
     $28 = $145;
    } else {
     $95 = (($91) + 72|0);
     HEAP32[$95>>2] = 0;
     $96 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $97 = (($91) + 76|0);
     HEAP32[$97>>2] = $96;
     $98 = (3624 + 12|0);
     HEAP32[$65>>2] = $98;
     $99 = (($65) + 60|0);
     $100 = (3624 + 32|0);
     HEAP32[$99>>2] = $100;
     $101 = (($65) + 8|0);
     $102 = $25;
     $103 = $26;
     $104 = $103 | 8;
     $14 = $101;
     $15 = $102;
     $16 = $104;
     $105 = $14;
     $106 = $16;
     $107 = $15;
     $9 = $105;
     $10 = $107;
     $11 = $106;
     $108 = $9;
     __THREW__ = 0;
     invoke_vi(395,($108|0));
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     do {
      if ($110) {
       $146 = ___cxa_find_matching_catch()|0;
       $147 = tempRet0;
       $eh$lpad$body$i$index2Z2D = $147;$eh$lpad$body$i$indexZ2D = $146;
      } else {
       $111 = (3808 + 8|0);
       HEAP32[$108>>2] = $111;
       $112 = (($108) + 32|0);
       $8 = $112;
       $113 = $8;
       $7 = $113;
       $114 = $7;
       $6 = $114;
       $115 = $6;
       $5 = $115;
       $116 = $5;
       $4 = $116;
       $117 = $4;
       $3 = $117;
       $2 = $114;
       $118 = $2;
       $1 = $118;
       $119 = $1;
       $0 = $119;
       $120 = $0;
       $__a$i$i$i$i$i$i = $120;
       $__i$i$i$i$i$i$i = 0;
       while(1) {
        $121 = $__i$i$i$i$i$i$i;
        $122 = ($121>>>0)<(3);
        if (!($122)) {
         break;
        }
        $123 = $__i$i$i$i$i$i$i;
        $124 = $__a$i$i$i$i$i$i;
        $125 = (($124) + ($123<<2)|0);
        HEAP32[$125>>2] = 0;
        $126 = $__i$i$i$i$i$i$i;
        $127 = (($126) + 1)|0;
        $__i$i$i$i$i$i$i = $127;
       }
       $128 = (($108) + 44|0);
       HEAP32[$128>>2] = 0;
       $129 = (($108) + 48|0);
       $130 = $11;
       HEAP32[$129>>2] = $130;
       $131 = $10;
       __THREW__ = 0;
       invoke_vii(396,($108|0),($131|0));
       $132 = __THREW__; __THREW__ = 0;
       $133 = $132&1;
       if ($133) {
        $134 = ___cxa_find_matching_catch()|0;
        $135 = tempRet0;
        $12 = $134;
        $13 = $135;
        __THREW__ = 0;
        invoke_vi(397,($112|0));
        $136 = __THREW__; __THREW__ = 0;
        $137 = $136&1;
        if ($137) {
         $142 = ___cxa_find_matching_catch(0|0)|0;
         $143 = tempRet0;
         ___clang_call_terminate($142);
         // unreachable;
        }
        __THREW__ = 0;
        invoke_vi(398,($108|0));
        $138 = __THREW__; __THREW__ = 0;
        $139 = $138&1;
        if ($139) {
         $142 = ___cxa_find_matching_catch(0|0)|0;
         $143 = tempRet0;
         ___clang_call_terminate($142);
         // unreachable;
        } else {
         $140 = $12;
         $141 = $13;
         $eh$lpad$body$i$index2Z2D = $141;$eh$lpad$body$i$indexZ2D = $140;
         break;
        }
       }
       $157 = $38;
       $158 = $41;
       $159 = $42;
       __THREW__ = 0;
       $160 = (invoke_iiiii(400,($157|0),($strm|0),($158|0),($159|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if (!($162)) {
        $45 = 1;
        __THREW__ = 0;
        invoke_vi(14,($strm|0));
        $163 = __THREW__; __THREW__ = 0;
        $164 = $163&1;
        if ($164) {
         label = 25;
         break L5;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
        STACKTOP = sp;return ($160|0);
       }
       $167 = ___cxa_find_matching_catch()|0;
       $168 = tempRet0;
       $43 = $167;
       $44 = $168;
       __THREW__ = 0;
       invoke_vi(14,($strm|0));
       $169 = __THREW__; __THREW__ = 0;
       $170 = $169&1;
       if ($170) {
        $175 = ___cxa_find_matching_catch(0|0)|0;
        $176 = tempRet0;
        ___clang_call_terminate($175);
        // unreachable;
       } else {
        break L5;
       }
      }
     } while(0);
     $27 = $eh$lpad$body$i$indexZ2D;
     $28 = $eh$lpad$body$i$index2Z2D;
     __THREW__ = 0;
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if ($149) {
      $155 = ___cxa_find_matching_catch(0|0)|0;
      $156 = tempRet0;
      ___clang_call_terminate($155);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $150 = (($65) + 60|0);
   __THREW__ = 0;
   invoke_vi(399,($150|0));
   $151 = __THREW__; __THREW__ = 0;
   $152 = $151&1;
   if ($152) {
    $155 = ___cxa_find_matching_catch(0|0)|0;
    $156 = tempRet0;
    ___clang_call_terminate($155);
    // unreachable;
   } else {
    $153 = $27;
    $154 = $28;
    $eh$lpad$body$index7Z2D = $154;$eh$lpad$body$indexZ2D = $153;
    label = 26;
    break;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $165 = ___cxa_find_matching_catch()|0;
  $166 = tempRet0;
  $eh$lpad$body$index7Z2D = $166;$eh$lpad$body$indexZ2D = $165;
  label = 26;
 }
 if ((label|0) == 26) {
  $43 = $eh$lpad$body$indexZ2D;
  $44 = $eh$lpad$body$index7Z2D;
 }
 __THREW__ = 0;
 invoke_vi(397,($str|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 if ($172) {
  $175 = ___cxa_find_matching_catch(0|0)|0;
  $176 = tempRet0;
  ___clang_call_terminate($175);
  // unreachable;
 }
 $173 = $43;
 $174 = $44;
 ___resumeException($173|0);
 // unreachable;
 return 0|0;
}
function __ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2FNEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2VNEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $ne = 0, $pe = 0, $ps = 0, $q = 0, $q_next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $69 = sp;
 $72 = sp + 620|0;
 $74 = sp + 8|0;
 $75 = sp + 16|0;
 $106 = sp + 436|0;
 $112 = sp + 460|0;
 $118 = sp + 484|0;
 $123 = sp + 504|0;
 $126 = sp + 516|0;
 $131 = sp + 536|0;
 $132 = sp + 540|0;
 $133 = sp + 544|0;
 $e = sp + 36|0;
 $139 = sp + 356|0;
 $140 = sp + 564|0;
 $pe = sp + 572|0;
 $ps = sp + 288|0;
 $141 = sp + 312|0;
 $142 = sp + 296|0;
 $143 = sp + 580|0;
 $q = sp + 28|0;
 $q_next = sp + 20|0;
 $144 = sp + 384|0;
 $145 = sp + 592|0;
 $136 = $m;
 $146 = $136;
 __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($146);
 $147 = $136;
 $148 = (($147) + 44|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(0);
 if ($150) {
  STACKTOP = sp;return;
 }
 $135 = $e;
 $151 = $135;
 $134 = $151;
 $152 = $134;
 $130 = $152;
 $153 = $130;
 $129 = $153;
 $104 = $106;
 $105 = -1;
 $154 = $104;
 $155 = $105;
 $102 = $154;
 $103 = $155;
 $156 = $102;
 HEAP32[$156>>2] = 0;
 $157 = HEAP32[$106>>2]|0;
 HEAP32[$131>>2] = $157;
 $107 = $131;
 HEAP32[$153>>2] = 0;
 $158 = (($153) + 4|0);
 $110 = $112;
 $111 = -1;
 $159 = $110;
 $160 = $111;
 $108 = $159;
 $109 = $160;
 $161 = $108;
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$112>>2]|0;
 HEAP32[$132>>2] = $162;
 $113 = $132;
 HEAP32[$158>>2] = 0;
 $163 = (($153) + 8|0);
 $116 = $118;
 $117 = -1;
 $164 = $116;
 $165 = $117;
 $114 = $164;
 $115 = $165;
 $166 = $114;
 HEAP32[$166>>2] = 0;
 $167 = HEAP32[$118>>2]|0;
 HEAP32[$133>>2] = $167;
 $119 = $133;
 $127 = $163;
 $128 = 0;
 $168 = $127;
 $169 = $128;
 $125 = $168;
 HEAP32[$126>>2] = $169;
 $170 = $125;
 $124 = $126;
 $171 = $124;
 $172 = HEAP32[$171>>2]|0;
 $122 = $170;
 HEAP32[$123>>2] = $172;
 $173 = $122;
 $121 = $173;
 $120 = $123;
 $174 = $120;
 $175 = HEAP32[$174>>2]|0;
 HEAP32[$173>>2] = $175;
 $176 = $136;
 __THREW__ = 0;
 invoke_viii(401,($176|0),($e|0),1);
 $177 = __THREW__; __THREW__ = 0;
 $178 = $177&1;
 L5: do {
  if (!($178)) {
   $101 = $e;
   $179 = $101;
   $180 = HEAP32[$179>>2]|0;
   $99 = $179;
   $100 = $180;
   $181 = $100;
   $97 = $139;
   $98 = $181;
   $182 = $97;
   $183 = $98;
   $95 = $182;
   $96 = $183;
   $184 = $95;
   $185 = $96;
   HEAP32[$184>>2] = $185;
   $94 = $e;
   $186 = $94;
   $187 = (($186) + 4|0);
   $188 = HEAP32[$187>>2]|0;
   $92 = $186;
   $93 = $188;
   $189 = $93;
   $90 = $140;
   $91 = $189;
   $190 = $90;
   $191 = $91;
   $88 = $190;
   $89 = $191;
   $192 = $88;
   $193 = $89;
   HEAP32[$192>>2] = $193;
   ;HEAP8[$75+0>>0]=HEAP8[$139+0>>0]|0;HEAP8[$75+1>>0]=HEAP8[$139+1>>0]|0;HEAP8[$75+2>>0]=HEAP8[$139+2>>0]|0;HEAP8[$75+3>>0]=HEAP8[$139+3>>0]|0;
   ;HEAP8[$74+0>>0]=HEAP8[$140+0>>0]|0;HEAP8[$74+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$140+3>>0]|0;
   $73 = $75;
   $194 = $73;
   $195 = HEAP32[$194>>2]|0;
   $66 = $74;
   $196 = $66;
   $197 = HEAP32[$196>>2]|0;
   $70 = $195;
   $71 = $197;
   $198 = $70;
   $199 = $71;
   ;HEAP8[$69+0>>0]=HEAP8[$72+0>>0]|0;
   $67 = $198;
   $68 = $199;
   $200 = $67;
   $201 = $68;
   __THREW__ = 0;
   invoke_viii(402,($200|0),($201|0),($69|0));
   $202 = __THREW__; __THREW__ = 0;
   $203 = $202&1;
   if (!($203)) {
    $ne = 0;
    $65 = $pe;
    $204 = $65;
    $64 = $204;
    $60 = $ps;
    $205 = $60;
    $59 = $205;
    $55 = $e;
    $206 = $55;
    $207 = HEAP32[$206>>2]|0;
    $53 = $206;
    $54 = $207;
    $208 = $54;
    $51 = $141;
    $52 = $208;
    $209 = $51;
    $210 = $52;
    $49 = $209;
    $50 = $210;
    $211 = $49;
    $212 = $50;
    HEAP32[$211>>2] = $212;
    ;HEAP32[$ps+0>>2]=HEAP32[$141+0>>2]|0;
    $44 = $e;
    $213 = $44;
    $214 = HEAP32[$213>>2]|0;
    $42 = $213;
    $43 = $214;
    $215 = $43;
    $40 = $142;
    $41 = $215;
    $216 = $40;
    $217 = $41;
    $38 = $216;
    $39 = $217;
    $218 = $38;
    $219 = $39;
    HEAP32[$218>>2] = $219;
    ;HEAP32[$pe+0>>2]=HEAP32[$142+0>>2]|0;
    L9: while(1) {
     $34 = $e;
     $220 = $34;
     $221 = (($220) + 4|0);
     $222 = HEAP32[$221>>2]|0;
     $32 = $220;
     $33 = $222;
     $223 = $33;
     $30 = $143;
     $31 = $223;
     $224 = $30;
     $225 = $31;
     $28 = $224;
     $29 = $225;
     $226 = $28;
     $227 = $29;
     HEAP32[$226>>2] = $227;
     $23 = $pe;
     $24 = $143;
     $228 = $23;
     $22 = $228;
     $229 = $22;
     $230 = HEAP32[$229>>2]|0;
     $231 = $24;
     $21 = $231;
     $232 = $21;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($230|0)==($233|0);
     if ($234) {
      label = 10;
     } else {
      $16 = $pe;
      $235 = $16;
      $236 = HEAP32[$235>>2]|0;
      $0 = $ps;
      $237 = $0;
      $238 = HEAP32[$237>>2]|0;
      __THREW__ = 0;
      $239 = (invoke_iii(403,($236|0),($238|0))|0);
      $240 = __THREW__; __THREW__ = 0;
      $241 = $240&1;
      if ($241) {
       break L5;
      }
      if (!($239)) {
       label = 10;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $2 = $q;
      $242 = $2;
      $1 = $242;
      $4 = $q_next;
      $243 = $4;
      $3 = $243;
      ;HEAP32[$q+0>>2]=HEAP32[$ps+0>>2]|0;
      while(1) {
       $9 = $pe;
       $10 = 1;
       $244 = $9;
       $245 = $10;
       $246 = (0 - ($245))|0;
       $7 = $244;
       $8 = $246;
       $247 = $7;
       ;HEAP32[$144+0>>2]=HEAP32[$247+0>>2]|0;
       $248 = $8;
       $5 = $144;
       $6 = $248;
       $249 = $5;
       $250 = $6;
       $251 = HEAP32[$249>>2]|0;
       $252 = (($251) + ($250<<4)|0);
       HEAP32[$249>>2] = $252;
       $13 = $q;
       $14 = $144;
       $253 = $13;
       $12 = $253;
       $254 = $12;
       $255 = HEAP32[$254>>2]|0;
       $256 = $14;
       $11 = $256;
       $257 = $11;
       $258 = HEAP32[$257>>2]|0;
       $259 = ($255>>>0)<($258>>>0);
       if (!($259)) {
        break;
       }
       $15 = $q;
       $260 = $15;
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + 12|0);
       $263 = HEAP32[$262>>2]|0;
       $264 = ($263|0)>=(0);
       if (!($264)) {
        label = 13;
        break L9;
       }
       ;HEAP32[$q_next+0>>2]=HEAP32[$q+0>>2]|0;
       $17 = $q_next;
       $271 = $17;
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + 16|0);
       HEAP32[$271>>2] = $273;
       $18 = $q_next;
       $274 = $18;
       $275 = HEAP32[$274>>2]|0;
       $276 = (($275) + 12|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ($277|0)>=(0);
       if (!($278)) {
        label = 17;
        break L9;
       }
       $19 = $q_next;
       $281 = $19;
       $282 = HEAP32[$281>>2]|0;
       $283 = (($282) + 12|0);
       $284 = HEAP32[$283>>2]|0;
       $20 = $q_next;
       $285 = $20;
       $286 = HEAP32[$285>>2]|0;
       $287 = (($286) + 8|0);
       $288 = HEAP32[$287>>2]|0;
       __THREW__ = 0;
       $289 = (invoke_ii(406,($288|0))|0);
       $290 = __THREW__; __THREW__ = 0;
       $291 = $290&1;
       if ($291) {
        break L5;
       }
       $292 = ($284|0)<($289|0);
       if (!($292)) {
        label = 21;
        break L9;
       }
       $25 = $q_next;
       $295 = $25;
       $296 = HEAP32[$295>>2]|0;
       $297 = (($296) + 8|0);
       $298 = HEAP32[$297>>2]|0;
       $26 = $q;
       $299 = $26;
       $300 = HEAP32[$299>>2]|0;
       $301 = (($300) + 8|0);
       $302 = HEAP32[$301>>2]|0;
       $27 = $q;
       $303 = $27;
       $304 = HEAP32[$303>>2]|0;
       $305 = (($304) + 12|0);
       $306 = HEAP32[$305>>2]|0;
       __THREW__ = 0;
       $307 = (invoke_iii(407,($302|0),($306|0))|0);
       $308 = __THREW__; __THREW__ = 0;
       $309 = $308&1;
       if ($309) {
        break L5;
       }
       HEAP32[$307>>2] = $298;
       $35 = $q_next;
       $310 = $35;
       $311 = HEAP32[$310>>2]|0;
       $312 = (($311) + 12|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = $313&255;
       $36 = $q;
       $315 = $36;
       $316 = HEAP32[$315>>2]|0;
       $317 = (($316) + 8|0);
       $318 = HEAP32[$317>>2]|0;
       $37 = $q;
       $319 = $37;
       $320 = HEAP32[$319>>2]|0;
       $321 = (($320) + 12|0);
       $322 = HEAP32[$321>>2]|0;
       __THREW__ = 0;
       $323 = (invoke_iii(408,($318|0),($322|0))|0);
       $324 = __THREW__; __THREW__ = 0;
       $325 = $324&1;
       if ($325) {
        break L5;
       }
       HEAP8[$323>>0] = $314;
       $45 = $q;
       $326 = $45;
       $327 = HEAP32[$326>>2]|0;
       $328 = (($327) + 16|0);
       HEAP32[$326>>2] = $328;
      }
      $46 = $q;
      $329 = $46;
      $330 = HEAP32[$329>>2]|0;
      $331 = (($330) + 12|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ($332|0)>=(0);
      if (!($333)) {
       label = 28;
       break;
      }
      $47 = $q;
      $336 = $47;
      $337 = HEAP32[$336>>2]|0;
      $338 = (($337) + 12|0);
      $339 = HEAP32[$338>>2]|0;
      $48 = $q;
      $340 = $48;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($341) + 8|0);
      $343 = HEAP32[$342>>2]|0;
      __THREW__ = 0;
      $344 = (invoke_ii(406,($343|0))|0);
      $345 = __THREW__; __THREW__ = 0;
      $346 = $345&1;
      if ($346) {
       break L5;
      }
      $347 = ($339|0)<($344|0);
      if (!($347)) {
       label = 32;
       break;
      }
      $56 = $ps;
      $350 = $56;
      $351 = HEAP32[$350>>2]|0;
      $352 = (($351) + 8|0);
      $353 = HEAP32[$352>>2]|0;
      $57 = $q;
      $354 = $57;
      $355 = HEAP32[$354>>2]|0;
      $356 = (($355) + 8|0);
      $357 = HEAP32[$356>>2]|0;
      $58 = $q;
      $358 = $58;
      $359 = HEAP32[$358>>2]|0;
      $360 = (($359) + 12|0);
      $361 = HEAP32[$360>>2]|0;
      __THREW__ = 0;
      $362 = (invoke_iii(407,($357|0),($361|0))|0);
      $363 = __THREW__; __THREW__ = 0;
      $364 = $363&1;
      if ($364) {
       break L5;
      }
      HEAP32[$362>>2] = $353;
      $61 = $ps;
      $365 = $61;
      $366 = HEAP32[$365>>2]|0;
      $367 = (($366) + 12|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = $368&255;
      $62 = $q;
      $370 = $62;
      $371 = HEAP32[$370>>2]|0;
      $372 = (($371) + 8|0);
      $373 = HEAP32[$372>>2]|0;
      $63 = $q;
      $374 = $63;
      $375 = HEAP32[$374>>2]|0;
      $376 = (($375) + 12|0);
      $377 = HEAP32[$376>>2]|0;
      __THREW__ = 0;
      $378 = (invoke_iii(408,($373|0),($377|0))|0);
      $379 = __THREW__; __THREW__ = 0;
      $380 = $379&1;
      if ($380) {
       break L5;
      }
      HEAP8[$378>>0] = $369;
      ;HEAP32[$ps+0>>2]=HEAP32[$pe+0>>2]|0;
      $381 = $ne;
      $382 = (($381) + 1)|0;
      $ne = $382;
     }
     $82 = $e;
     $383 = $82;
     $384 = (($383) + 4|0);
     $385 = HEAP32[$384>>2]|0;
     $80 = $383;
     $81 = $385;
     $386 = $81;
     $78 = $145;
     $79 = $386;
     $387 = $78;
     $388 = $79;
     $76 = $387;
     $77 = $388;
     $389 = $76;
     $390 = $77;
     HEAP32[$389>>2] = $390;
     $85 = $pe;
     $86 = $145;
     $391 = $85;
     $84 = $391;
     $392 = $84;
     $393 = HEAP32[$392>>2]|0;
     $394 = $86;
     $83 = $394;
     $395 = $83;
     $396 = HEAP32[$395>>2]|0;
     $397 = ($393|0)==($396|0);
     if ($397) {
      label = 38;
      break;
     }
     $87 = $pe;
     $398 = $87;
     $399 = HEAP32[$398>>2]|0;
     $400 = (($399) + 16|0);
     HEAP32[$398>>2] = $400;
     if (!(1)) {
      break;
     }
    }
    if ((label|0) == 13) {
     __THREW__ = 0;
     invoke_viiii(404,(3400|0),(3416|0),230,(3480|0));
     $265 = __THREW__; __THREW__ = 0;
     $266 = $265&1;
     if ($266) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 17) {
     __THREW__ = 0;
     invoke_viiii(404,(3496|0),(3416|0),234,(3480|0));
     $279 = __THREW__; __THREW__ = 0;
     $280 = $279&1;
     if ($280) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 21) {
     __THREW__ = 0;
     invoke_viiii(404,(3512|0),(3416|0),235,(3480|0));
     $293 = __THREW__; __THREW__ = 0;
     $294 = $293&1;
     if ($294) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 28) {
     __THREW__ = 0;
     invoke_viiii(404,(3400|0),(3416|0),239,(3480|0));
     $334 = __THREW__; __THREW__ = 0;
     $335 = $334&1;
     if ($335) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 32) {
     __THREW__ = 0;
     invoke_viiii(404,(3544|0),(3416|0),240,(3480|0));
     $348 = __THREW__; __THREW__ = 0;
     $349 = $348&1;
     if ($349) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 38) {
    }
    __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED1Ev($e);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $267 = ___cxa_find_matching_catch()|0;
 $268 = tempRet0;
 $137 = $267;
 $138 = $268;
 __THREW__ = 0;
 invoke_vi(405,($e|0));
 $269 = __THREW__; __THREW__ = 0;
 $270 = $269&1;
 if ($270) {
  $403 = ___cxa_find_matching_catch(0|0)|0;
  $404 = tempRet0;
  ___clang_call_terminate($403);
  // unreachable;
 }
 $401 = $137;
 $402 = $138;
 ___resumeException($401|0);
 // unreachable;
}
function __ZN3vcg3tri7EdgeLenI6MyMeshfEC1Ef($this,$threshold) {
 $this = $this|0;
 $threshold = +$threshold;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $threshold;
 $2 = $0;
 $3 = $1;
 __ZN3vcg3tri7EdgeLenI6MyMeshfEC2Ef($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC1EPS2_PS4_($this,$_mp,$_intFunc) {
 $this = $this|0;
 $_mp = $_mp|0;
 $_intFunc = $_intFunc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_mp;
 $2 = $_intFunc;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC2EPS2_PS4_($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7RefineEI6MyMeshNS0_8MidPointIS2_NS0_16BaseInterpolatorIS2_EEEENS0_7EdgeLenIS2_fEEEEbRT_RT0_RT1_bPFbiPKcE($m,$mid,$ep,$RefineSelected,$cb) {
 $m = $m|0;
 $mid = $mid|0;
 $ep = $ep|0;
 $RefineSelected = $RefineSelected|0;
 $cb = $cb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0.0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0.0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $NewFaceNum = 0, $NewVertNum = 0, $PercStep = 0, $RD = 0, $edgeCur = 0, $edgeCur1 = 0, $fca = 0, $fcn = 0, $fi = 0, $i = 0, $ind = 0, $j = 0, $lastf = 0, $lastv = 0, $nf = 0, $oldendf = 0, $orgflag = 0, $step = 0, $vv = 0, $wtt = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 472|0;
 $$byval_copy = sp + 452|0;
 $164 = sp;
 $167 = sp + 1056|0;
 $RD = sp + 800|0;
 $182 = sp + 808|0;
 $185 = sp + 836|0;
 $186 = sp + 840|0;
 $fi = sp + 844|0;
 $187 = sp + 848|0;
 $188 = sp + 852|0;
 $edgeCur = sp + 856|0;
 $189 = sp + 868|0;
 $lastv = sp + 880|0;
 $190 = sp + 884|0;
 $191 = sp + 888|0;
 $edgeCur1 = sp + 892|0;
 $192 = sp + 904|0;
 $193 = sp + 916|0;
 $lastf = sp + 920|0;
 $oldendf = sp + 48|0;
 $vv = sp + 696|0;
 $nf = sp + 32|0;
 $wtt = sp + 928|0;
 $194 = sp + 432|0;
 $195 = sp + 436|0;
 $196 = sp + 448|0;
 $197 = sp + 1032|0;
 $198 = sp + 464|0;
 $199 = sp + 780|0;
 $200 = sp + 764|0;
 $201 = sp + 728|0;
 $177 = $m;
 $178 = $mid;
 $179 = $ep;
 $202 = $RefineSelected&1;
 $180 = $202;
 $181 = $cb;
 $203 = $177;
 $204 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($203)|0);
 if (!($204)) {
  ___assert_fail((192|0),(216|0),335,(272|0));
  // unreachable;
 }
 $205 = $177;
 __ZN3vcg3tri11UpdateFlagsI6MyMeshE16FaceBorderFromFFERS2_($205);
 $NewVertNum = 0;
 $NewFaceNum = 0;
 $206 = $177;
 $174 = $182;
 $175 = 280;
 $207 = $174;
 $208 = $175;
 $172 = $207;
 $173 = $208;
 $209 = $172;
 $171 = $209;
 $210 = $171;
 $170 = $210;
 $211 = $170;
 $169 = $211;
 $212 = $169;
 $168 = $212;
 $213 = $173;
 $214 = $173;
 $215 = (__ZNSt3__111char_traitsIcE6lengthEPKc($214)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($209,$213,$215);
 __THREW__ = 0;
 invoke_viii(409,($RD|0),($206|0),($182|0));
 $216 = __THREW__; __THREW__ = 0;
 $217 = $216&1;
 if ($217) {
  $279 = ___cxa_find_matching_catch()|0;
  $280 = tempRet0;
  $183 = $279;
  $184 = $280;
  __THREW__ = 0;
  invoke_vi(397,($182|0));
  $281 = __THREW__; __THREW__ = 0;
  $282 = $281&1;
  if ($282) {
   $913 = ___cxa_find_matching_catch(0|0)|0;
   $914 = tempRet0;
   ___clang_call_terminate($913);
   // unreachable;
  }
  $911 = $183;
  $912 = $184;
  ___resumeException($911|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
 $step = 0;
 HEAP32[$185>>2] = 1;
 $218 = $177;
 $219 = (($218) + 44|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = (($220|0) / 33)&-1;
 HEAP32[$186>>2] = $221;
 $165 = $185;
 $166 = $186;
 $222 = $165;
 $223 = $166;
 ;HEAP8[$164+0>>0]=HEAP8[$167+0>>0]|0;
 $162 = $222;
 $163 = $223;
 $224 = $162;
 $225 = $163;
 $159 = $164;
 $160 = $224;
 $161 = $225;
 $226 = $160;
 $227 = HEAP32[$226>>2]|0;
 $228 = $161;
 $229 = HEAP32[$228>>2]|0;
 $230 = ($227|0)<($229|0);
 if ($230) {
  $231 = $163;
  $234 = $231;
 } else {
  $232 = $162;
  $234 = $232;
 }
 $233 = HEAP32[$234>>2]|0;
 $PercStep = $233;
 $158 = $fi;
 $235 = $158;
 $157 = $235;
 $236 = $177;
 $237 = (($236) + 32|0);
 $156 = $237;
 $238 = $156;
 $239 = HEAP32[$238>>2]|0;
 $154 = $238;
 $155 = $239;
 $240 = $155;
 $152 = $187;
 $153 = $240;
 $241 = $152;
 $242 = $153;
 $150 = $241;
 $151 = $242;
 $243 = $150;
 $244 = $151;
 HEAP32[$243>>2] = $244;
 ;HEAP32[$fi+0>>2]=HEAP32[$187+0>>2]|0;
 $j = 0;
 L15: while(1) {
  $245 = $177;
  $246 = (($245) + 32|0);
  $149 = $246;
  $247 = $149;
  $248 = (($247) + 4|0);
  $249 = HEAP32[$248>>2]|0;
  $147 = $247;
  $148 = $249;
  $250 = $148;
  $145 = $188;
  $146 = $250;
  $251 = $145;
  $252 = $146;
  $143 = $251;
  $144 = $252;
  $253 = $143;
  $254 = $144;
  HEAP32[$253>>2] = $254;
  $141 = $fi;
  $142 = $188;
  $255 = $141;
  $256 = $142;
  $139 = $255;
  $140 = $256;
  $257 = $139;
  $138 = $257;
  $258 = $138;
  $259 = HEAP32[$258>>2]|0;
  $260 = $140;
  $137 = $260;
  $261 = $137;
  $262 = HEAP32[$261>>2]|0;
  $263 = ($259|0)==($262|0);
  $264 = $263 ^ 1;
  if (!($264)) {
   break;
  }
  $134 = $fi;
  $265 = $134;
  $266 = HEAP32[$265>>2]|0;
  $267 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($266)|0);
  do {
   if ($267) {
    label = 34;
   } else {
    $268 = $181;
    $269 = ($268|0)!=(0|0);
    if ($269) {
     $270 = $step;
     $271 = (($270) + 1)|0;
     $step = $271;
     $272 = $PercStep;
     $273 = (($271|0) % ($272|0))&-1;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = $181;
      $276 = $step;
      $277 = $PercStep;
      $278 = (($276|0) / ($277|0))&-1;
      (FUNCTION_TABLE_iii[$275 & 1023]($278,296)|0);
     }
    }
    $283 = $180;
    $284 = $283&1;
    if ($284) {
     $124 = $fi;
     $285 = $124;
     $286 = HEAP32[$285>>2]|0;
     $287 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($286)|0);
     if (!($287)) {
      break;
     }
    }
    $j = 0;
    while(1) {
     $288 = $j;
     $289 = ($288|0)<(3);
     if (!($289)) {
      break;
     }
     $290 = $j;
     $291 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
     $292 = (($291) + ($290)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&1;
     do {
      if ($294) {
      } else {
       $121 = $fi;
       $295 = $121;
       $296 = HEAP32[$295>>2]|0;
       $297 = $j;
       __ZN3vcg4face3PosI6MyFaceEC1EPS2_i($edgeCur,$296,$297);
       $298 = $180;
       $299 = $298&1;
       if ($299) {
        $300 = (__ZNK3vcg4face3PosI6MyFaceE5FFlipEv($edgeCur)|0);
        $301 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($300)|0);
        if (!($301)) {
         break;
        }
       }
       $302 = $179;
       ;HEAP32[$189+0>>2]=HEAP32[$edgeCur+0>>2]|0;HEAP32[$189+4>>2]=HEAP32[$edgeCur+4>>2]|0;HEAP32[$189+8>>2]=HEAP32[$edgeCur+8>>2]|0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$189+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$189+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$189+8>>2]|0;
       $303 = (__ZNK3vcg3tri7EdgeLenI6MyMeshfEclENS_4face3PosI6MyFaceEE($302,$$byval_copy)|0);
       if (!($303)) {
        break;
       }
       $304 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur)|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
       $307 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$306)|0);
       $308 = (($307) + ($305)|0);
       HEAP8[$308>>0] = 1;
       $309 = $NewFaceNum;
       $310 = (($309) + 1)|0;
       $NewFaceNum = $310;
       $311 = $NewVertNum;
       $312 = (($311) + 1)|0;
       $NewVertNum = $312;
       $313 = (__ZN3vcg4face3PosI6MyFaceE10IsManifoldEv($edgeCur)|0);
       if (!($313)) {
        label = 28;
        break L15;
       }
       $314 = (__ZN3vcg4face3PosI6MyFaceE8IsBorderEv($edgeCur)|0);
       if (!($314)) {
        __ZN3vcg4face3PosI6MyFaceE5FlipFEv($edgeCur);
        $315 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
        $316 = HEAP32[$315>>2]|0;
        __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($316);
        $317 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur)|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
        $320 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$319)|0);
        $321 = (($320) + ($318)|0);
        HEAP8[$321>>0] = 1;
        $322 = $NewFaceNum;
        $323 = (($322) + 1)|0;
        $NewFaceNum = $323;
       }
      }
     } while(0);
     $324 = $j;
     $325 = (($324) + 1)|0;
     $j = $325;
    }
    label = 34;
   }
  } while(0);
  if ((label|0) == 34) {
   label = 0;
  }
  $111 = $fi;
  $326 = $111;
  $327 = HEAP32[$326>>2]|0;
  $328 = (($327) + 44|0);
  HEAP32[$326>>2] = $328;
 }
 if ((label|0) == 28) {
  ___assert_fail((312|0),(216|0),368,(272|0));
  // unreachable;
 }
 $329 = $NewVertNum;
 $330 = ($329|0)==(0);
 if ($330) {
  $331 = $177;
  __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($331,$RD);
  $$expand_i1_val = 0;
  $176 = $$expand_i1_val;
  $$pre_trunc = $176;
  $910 = $$pre_trunc&1;
  STACKTOP = sp;return ($910|0);
 }
 $332 = $177;
 $333 = $NewVertNum;
 __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($lastv,$332,$333);
 $334 = $177;
 $335 = (($334) + 32|0);
 $108 = $335;
 $336 = $108;
 $337 = HEAP32[$336>>2]|0;
 $106 = $336;
 $107 = $337;
 $338 = $107;
 $104 = $190;
 $105 = $338;
 $339 = $104;
 $340 = $105;
 $102 = $339;
 $103 = $340;
 $341 = $102;
 $342 = $103;
 HEAP32[$341>>2] = $342;
 ;HEAP32[$fi+0>>2]=HEAP32[$190+0>>2]|0;
 L57: while(1) {
  $343 = $177;
  $344 = (($343) + 32|0);
  $92 = $344;
  $345 = $92;
  $346 = (($345) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $90 = $345;
  $91 = $347;
  $348 = $91;
  $88 = $191;
  $89 = $348;
  $349 = $88;
  $350 = $89;
  $86 = $349;
  $87 = $350;
  $351 = $86;
  $352 = $87;
  HEAP32[$351>>2] = $352;
  $83 = $fi;
  $84 = $191;
  $353 = $83;
  $354 = $84;
  $81 = $353;
  $82 = $354;
  $355 = $81;
  $80 = $355;
  $356 = $80;
  $357 = HEAP32[$356>>2]|0;
  $358 = $82;
  $79 = $358;
  $359 = $79;
  $360 = HEAP32[$359>>2]|0;
  $361 = ($357|0)==($360|0);
  $362 = $361 ^ 1;
  if (!($362)) {
   break;
  }
  $44 = $fi;
  $363 = $44;
  $364 = HEAP32[$363>>2]|0;
  $365 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($364)|0);
  if (!($365)) {
   $366 = $181;
   $367 = ($366|0)!=(0|0);
   if ($367) {
    $368 = $step;
    $369 = (($368) + 1)|0;
    $step = $369;
    $370 = $PercStep;
    $371 = (($369|0) % ($370|0))&-1;
    $372 = ($371|0)==(0);
    if ($372) {
     $373 = $181;
     $374 = $step;
     $375 = $PercStep;
     $376 = (($374|0) / ($375|0))&-1;
     (FUNCTION_TABLE_iii[$373 & 1023]($376,296)|0);
    }
   }
   $j = 0;
   while(1) {
    $377 = $j;
    $378 = ($377|0)<(3);
    if (!($378)) {
     break;
    }
    $379 = $180;
    $380 = $379&1;
    if ($380) {
     $43 = $fi;
     $381 = $43;
     $382 = HEAP32[$381>>2]|0;
     $383 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($382)|0);
     if ($383) {
      label = 49;
     } else {
     }
    } else {
     label = 49;
    }
    if ((label|0) == 49) {
     label = 0;
     $j = 0;
     while(1) {
      $384 = $j;
      $385 = ($384|0)<(3);
      if (!($385)) {
       break;
      }
      $42 = $fi;
      $386 = $42;
      $387 = HEAP32[$386>>2]|0;
      $388 = $j;
      __ZN3vcg4face3PosI6MyFaceEC1EPS2_i($edgeCur1,$387,$388);
      $389 = $180;
      $390 = $389&1;
      if ($390) {
       $391 = (__ZNK3vcg4face3PosI6MyFaceE5FFlipEv($edgeCur1)|0);
       $392 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($391)|0);
       if ($392) {
        label = 54;
       } else {
       }
      } else {
       label = 54;
      }
      if ((label|0) == 54) {
       label = 0;
       $393 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
       $396 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$395)|0);
       $397 = (($396) + ($394)|0);
       $398 = HEAP8[$397>>0]|0;
       $399 = $398&1;
       if ($399) {
        $400 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
        $403 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$402)|0);
        $404 = (($403) + 4|0);
        $405 = (($404) + ($401<<2)|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = ($406|0)==(0|0);
        if ($407) {
         $41 = $lastv;
         $408 = $41;
         $409 = HEAP32[$408>>2]|0;
         $410 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
         $411 = HEAP32[$410>>2]|0;
         $412 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
         $413 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$412)|0);
         $414 = (($413) + 4|0);
         $415 = (($414) + ($411<<2)|0);
         HEAP32[$415>>2] = $409;
         $416 = $178;
         $40 = $lastv;
         $417 = $40;
         $418 = HEAP32[$417>>2]|0;
         ;HEAP32[$192+0>>2]=HEAP32[$edgeCur1+0>>2]|0;HEAP32[$192+4>>2]=HEAP32[$edgeCur1+4>>2]|0;HEAP32[$192+8>>2]=HEAP32[$edgeCur1+8>>2]|0;
         ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$192+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$192+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$192+8>>2]|0;
         __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEclER8MyVertexNS_4face3PosI6MyFaceEE($416,$418,$$byval_copy1);
         $419 = (__ZN3vcg4face3PosI6MyFaceE8IsBorderEv($edgeCur1)|0);
         if (!($419)) {
          __ZN3vcg4face3PosI6MyFaceE5FlipFEv($edgeCur1);
          $420 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
          $423 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$422)|0);
          $424 = (($423) + ($421)|0);
          $425 = HEAP8[$424>>0]|0;
          $426 = $425&1;
          if (!($426)) {
           label = 58;
           break L57;
          }
          $39 = $lastv;
          $427 = $39;
          $428 = HEAP32[$427>>2]|0;
          $429 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
          $430 = HEAP32[$429>>2]|0;
          $431 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
          $432 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$431)|0);
          $433 = (($432) + 4|0);
          $434 = (($433) + ($430<<2)|0);
          HEAP32[$434>>2] = $428;
         }
         $38 = $lastv;
         $435 = $38;
         $436 = HEAP32[$435>>2]|0;
         $437 = (($436) + 36|0);
         HEAP32[$435>>2] = $437;
        }
       }
      }
      $438 = $j;
      $439 = (($438) + 1)|0;
      $j = $439;
     }
    }
    $440 = $j;
    $441 = (($440) + 1)|0;
    $j = $441;
   }
  }
  $37 = $fi;
  $442 = $37;
  $443 = HEAP32[$442>>2]|0;
  $444 = (($443) + 44|0);
  HEAP32[$442>>2] = $444;
 }
 if ((label|0) == 58) {
  ___assert_fail((336|0),(216|0),408,(272|0));
  // unreachable;
 }
 $445 = $177;
 $36 = $445;
 $446 = $36;
 $447 = (($446) + 4|0);
 $448 = HEAP32[$447>>2]|0;
 $34 = $446;
 $35 = $448;
 $449 = $35;
 $32 = $193;
 $33 = $449;
 $450 = $32;
 $451 = $33;
 $30 = $450;
 $31 = $451;
 $452 = $30;
 $453 = $31;
 HEAP32[$452>>2] = $453;
 $28 = $lastv;
 $29 = $193;
 $454 = $28;
 $27 = $454;
 $455 = $27;
 $456 = HEAP32[$455>>2]|0;
 $457 = $29;
 $26 = $457;
 $458 = $26;
 $459 = HEAP32[$458>>2]|0;
 $460 = ($456|0)==($459|0);
 if (!($460)) {
  ___assert_fail((368|0),(216|0),417,(272|0));
  // unreachable;
 }
 $461 = $177;
 $462 = $NewFaceNum;
 __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($lastf,$461,$462);
 ;HEAP32[$oldendf+0>>2]=HEAP32[$lastf+0>>2]|0;
 $463 = (($wtt) + 72|0);
 $464 = $wtt;
 while(1) {
  __ZN3vcg9TexCoord2IfLi1EEC1Ev($464);
  $465 = (($464) + 12|0);
  $466 = ($465|0)==($463|0);
  if ($466) {
   break;
  } else {
   $464 = $465;
  }
 }
 $fca = 0;
 $fcn = 0;
 $467 = $177;
 $468 = (($467) + 32|0);
 $25 = $468;
 $469 = $25;
 $470 = HEAP32[$469>>2]|0;
 $23 = $469;
 $24 = $470;
 $471 = $24;
 $21 = $194;
 $22 = $471;
 $472 = $21;
 $473 = $22;
 $19 = $472;
 $20 = $473;
 $474 = $19;
 $475 = $20;
 HEAP32[$474>>2] = $475;
 ;HEAP32[$fi+0>>2]=HEAP32[$194+0>>2]|0;
 L105: while(1) {
  $17 = $fi;
  $18 = $oldendf;
  $476 = $17;
  $477 = $18;
  $15 = $476;
  $16 = $477;
  $478 = $15;
  $14 = $478;
  $479 = $14;
  $480 = HEAP32[$479>>2]|0;
  $481 = $16;
  $13 = $481;
  $482 = $13;
  $483 = HEAP32[$482>>2]|0;
  $484 = ($480|0)==($483|0);
  $485 = $484 ^ 1;
  if (!($485)) {
   break;
  }
  $12 = $fi;
  $486 = $12;
  $487 = HEAP32[$486>>2]|0;
  $488 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($487)|0);
  if (!($488)) {
   $489 = $181;
   $490 = ($489|0)!=(0|0);
   if ($490) {
    $491 = $step;
    $492 = (($491) + 1)|0;
    $step = $492;
    $493 = $PercStep;
    $494 = (($492|0) % ($493|0))&-1;
    $495 = ($494|0)==(0);
    if ($495) {
     $496 = $181;
     $497 = $step;
     $498 = $PercStep;
     $499 = (($497|0) / ($498|0))&-1;
     (FUNCTION_TABLE_iii[$496 & 1023]($499,296)|0);
    }
   }
   $500 = $fcn;
   $501 = (($500) + 1)|0;
   $fcn = $501;
   $11 = $fi;
   $502 = $11;
   $503 = HEAP32[$502>>2]|0;
   $504 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($503,0)|0);
   $505 = HEAP32[$504>>2]|0;
   HEAP32[$vv>>2] = $505;
   $10 = $fi;
   $506 = $10;
   $507 = HEAP32[$506>>2]|0;
   $508 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($507,1)|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = (($vv) + 4|0);
   HEAP32[$510>>2] = $509;
   $9 = $fi;
   $511 = $9;
   $512 = HEAP32[$511>>2]|0;
   $513 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($512,2)|0);
   $514 = HEAP32[$513>>2]|0;
   $515 = (($vv) + 8|0);
   HEAP32[$515>>2] = $514;
   $516 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $517 = (($516) + 4|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = (($vv) + 12|0);
   HEAP32[$519>>2] = $518;
   $520 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $521 = (($520) + 4|0);
   $522 = (($521) + 4|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = (($vv) + 16|0);
   HEAP32[$524>>2] = $523;
   $525 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $526 = (($525) + 4|0);
   $527 = (($526) + 8|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = (($vv) + 20|0);
   HEAP32[$529>>2] = $528;
   $530 = (($vv) + 12|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = ($531|0)!=(0|0);
   $533 = $532 ? 1 : 0;
   $534 = (($vv) + 16|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = ($535|0)!=(0|0);
   $537 = $536 ? 2 : 0;
   $538 = (($533) + ($537))|0;
   $539 = (($vv) + 20|0);
   $540 = HEAP32[$539>>2]|0;
   $541 = ($540|0)!=(0|0);
   $542 = $541 ? 4 : 0;
   $543 = (($538) + ($542))|0;
   $ind = $543;
   $8 = $fi;
   $544 = $8;
   $545 = HEAP32[$544>>2]|0;
   HEAP32[$nf>>2] = $545;
   $i = 1;
   while(1) {
    $546 = $i;
    $547 = $ind;
    $548 = (392 + (($547*116)|0)|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = ($546|0)<($549|0);
    if (!($550)) {
     break;
    }
    $7 = $lastf;
    $551 = $7;
    $552 = HEAP32[$551>>2]|0;
    $553 = $i;
    $554 = (($nf) + ($553<<2)|0);
    HEAP32[$554>>2] = $552;
    $6 = $lastf;
    $555 = $6;
    $556 = HEAP32[$555>>2]|0;
    $557 = (($556) + 44|0);
    HEAP32[$555>>2] = $557;
    $558 = $fca;
    $559 = (($558) + 1)|0;
    $fca = $559;
    $560 = $180;
    $561 = $560&1;
    if ($561) {
     label = 82;
    } else {
     $5 = $fi;
     $562 = $5;
     $563 = HEAP32[$562>>2]|0;
     $564 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($563)|0);
     if ($564) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     label = 0;
     $565 = $i;
     $566 = (($nf) + ($565<<2)|0);
     $567 = HEAP32[$566>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetSEv($567);
    }
    $568 = $i;
    $569 = (($nf) + ($568<<2)|0);
    $570 = HEAP32[$569>>2]|0;
    $4 = $fi;
    $571 = $4;
    $572 = HEAP32[$571>>2]|0;
    __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE10ImportDataI6MyFaceEEvRKT_($570,$572);
    $573 = $i;
    $574 = (($573) + 1)|0;
    $i = $574;
   }
   $575 = $177;
   $576 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($575)|0);
   if ($576) {
    $i = 0;
    while(1) {
     $577 = $i;
     $578 = ($577|0)<(3);
     if (!($578)) {
      break;
     }
     $579 = $i;
     $580 = (($wtt) + (($579*12)|0)|0);
     $3 = $fi;
     $581 = $3;
     $582 = HEAP32[$581>>2]|0;
     $583 = $i;
     $584 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($582,$583)|0);
     (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($580,$584)|0);
     $585 = $i;
     $586 = (3 + ($585))|0;
     $587 = (($wtt) + (($586*12)|0)|0);
     $588 = $178;
     $2 = $fi;
     $589 = $2;
     $590 = HEAP32[$589>>2]|0;
     $591 = $i;
     $592 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($590,$591)|0);
     $1 = $fi;
     $593 = $1;
     $594 = HEAP32[$593>>2]|0;
     $595 = $i;
     $596 = (($595) + 1)|0;
     $597 = (($596|0) % 3)&-1;
     $598 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($594,$597)|0);
     __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEE11WedgeInterpIfEENS_9TexCoord2IT_Li1EEERS9_SA_($195,$588,$592,$598);
     (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($587,$195)|0);
     $599 = $i;
     $600 = (($599) + 1)|0;
     $i = $600;
    }
   }
   $0 = $fi;
   $601 = $0;
   $602 = HEAP32[$601>>2]|0;
   $603 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($602)|0);
   $604 = HEAP32[$603>>2]|0;
   $orgflag = $604;
   $i = 0;
   while(1) {
    $605 = $i;
    $606 = $ind;
    $607 = (392 + (($606*116)|0)|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = ($605|0)<($608|0);
    if (!($609)) {
     break;
    }
    $j = 0;
    while(1) {
     $610 = $j;
     $611 = ($610|0)<(3);
     if (!($611)) {
      break;
     }
     $612 = $j;
     $613 = $i;
     $614 = $ind;
     $615 = (392 + (($614*116)|0)|0);
     $616 = (($615) + 4|0);
     $617 = (($616) + (($613*12)|0)|0);
     $618 = (($617) + ($612<<2)|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = (($vv) + ($619<<2)|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $i;
     $623 = (($nf) + ($622<<2)|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = $j;
     $626 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($624,$625)|0);
     HEAP32[$626>>2] = $621;
     $627 = $177;
     $628 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($627)|0);
     if ($628) {
      $629 = $i;
      $630 = (($nf) + ($629<<2)|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = $j;
      $633 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($631,$632)|0);
      $634 = $j;
      $635 = $i;
      $636 = $ind;
      $637 = (392 + (($636*116)|0)|0);
      $638 = (($637) + 4|0);
      $639 = (($638) + (($635*12)|0)|0);
      $640 = (($639) + ($634<<2)|0);
      $641 = HEAP32[$640>>2]|0;
      $642 = (($wtt) + (($641*12)|0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($633,$642)|0);
     }
     $643 = $i;
     $644 = (($nf) + ($643<<2)|0);
     $645 = HEAP32[$644>>2]|0;
     $646 = $j;
     $647 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($645,$646)|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = ($648|0)!=(0|0);
     if (!($649)) {
      label = 98;
      break L105;
     }
     $650 = $j;
     $651 = $i;
     $652 = $ind;
     $653 = (392 + (($652*116)|0)|0);
     $654 = (($653) + 68|0);
     $655 = (($654) + (($651*12)|0)|0);
     $656 = (($655) + ($650<<2)|0);
     $657 = HEAP32[$656>>2]|0;
     $658 = ($657|0)!=(3);
     if ($658) {
      $659 = $orgflag;
      $660 = $j;
      $661 = $i;
      $662 = $ind;
      $663 = (392 + (($662*116)|0)|0);
      $664 = (($663) + 68|0);
      $665 = (($664) + (($661*12)|0)|0);
      $666 = (($665) + ($660<<2)|0);
      $667 = HEAP32[$666>>2]|0;
      $668 = 64 << $667;
      $669 = $659 & $668;
      $670 = ($669|0)!=(0);
      if ($670) {
       $671 = $i;
       $672 = (($nf) + ($671<<2)|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = $j;
       __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($673,$674);
      } else {
       $675 = $i;
       $676 = (($nf) + ($675<<2)|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = $j;
       __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($677,$678);
      }
     } else {
      $679 = $i;
      $680 = (($nf) + ($679<<2)|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = $j;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($681,$682);
     }
     $683 = $j;
     $684 = (($683) + 1)|0;
     $j = $684;
    }
    $685 = $i;
    $686 = (($685) + 1)|0;
    $i = $686;
   }
   $687 = $ind;
   $688 = (392 + (($687*116)|0)|0);
   $689 = HEAP32[$688>>2]|0;
   $690 = ($689|0)==(3);
   if ($690) {
    $691 = $ind;
    $692 = (392 + (($691*116)|0)|0);
    $693 = (($692) + 52|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (($vv) + ($694<<2)|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($696)|0);
    $698 = $ind;
    $699 = (392 + (($698*116)|0)|0);
    $700 = (($699) + 52|0);
    $701 = (($700) + 4|0);
    $702 = HEAP32[$701>>2]|0;
    $703 = (($vv) + ($702<<2)|0);
    $704 = HEAP32[$703>>2]|0;
    $705 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($704)|0);
    $706 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($697,$705));
    $707 = $ind;
    $708 = (392 + (($707*116)|0)|0);
    $709 = (($708) + 52|0);
    $710 = (($709) + 8|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (($vv) + ($711<<2)|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($713)|0);
    $715 = $ind;
    $716 = (392 + (($715*116)|0)|0);
    $717 = (($716) + 52|0);
    $718 = (($717) + 8|0);
    $719 = (($718) + 4|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = (($vv) + ($720<<2)|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($722)|0);
    $724 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($714,$723));
    $725 = $706 < $724;
    if ($725) {
     $726 = (($nf) + 4|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($727,0)|0);
     $729 = HEAP32[$728>>2]|0;
     $730 = (($nf) + 8|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($731,1)|0);
     HEAP32[$732>>2] = $729;
     $733 = (($nf) + 8|0);
     $734 = HEAP32[$733>>2]|0;
     $735 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($734,0)|0);
     $736 = HEAP32[$735>>2]|0;
     $737 = (($nf) + 4|0);
     $738 = HEAP32[$737>>2]|0;
     $739 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($738,1)|0);
     HEAP32[$739>>2] = $736;
     $740 = $177;
     $741 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($740)|0);
     if ($741) {
      $742 = (($nf) + 8|0);
      $743 = HEAP32[$742>>2]|0;
      $744 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($743,1)|0);
      $745 = (($nf) + 4|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($746,0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($744,$747)|0);
      $748 = (($nf) + 4|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($749,1)|0);
      $751 = (($nf) + 8|0);
      $752 = HEAP32[$751>>2]|0;
      $753 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($752,0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($750,$753)|0);
     }
     $754 = (($nf) + 4|0);
     $755 = HEAP32[$754>>2]|0;
     $756 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($755,0)|0);
     if ($756) {
      $757 = (($nf) + 8|0);
      $758 = HEAP32[$757>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($758,1);
     } else {
      $759 = (($nf) + 8|0);
      $760 = HEAP32[$759>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($760,1);
     }
     $761 = (($nf) + 8|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($762,0)|0);
     if ($763) {
      $764 = (($nf) + 4|0);
      $765 = HEAP32[$764>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($765,1);
     } else {
      $766 = (($nf) + 4|0);
      $767 = HEAP32[$766>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($767,1);
     }
     $768 = (($nf) + 4|0);
     $769 = HEAP32[$768>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($769,0);
     $770 = (($nf) + 8|0);
     $771 = HEAP32[$770>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($771,0);
    }
   }
  }
  $45 = $fi;
  $772 = $45;
  $773 = HEAP32[$772>>2]|0;
  $774 = (($773) + 44|0);
  HEAP32[$772>>2] = $774;
 }
 if ((label|0) == 98) {
  ___assert_fail((1320|0),(216|0),484,(272|0));
  // unreachable;
 }
 $775 = $177;
 $776 = (($775) + 32|0);
 $52 = $776;
 $777 = $52;
 $778 = (($777) + 4|0);
 $779 = HEAP32[$778>>2]|0;
 $50 = $777;
 $51 = $779;
 $780 = $51;
 $48 = $196;
 $49 = $780;
 $781 = $48;
 $782 = $49;
 $46 = $781;
 $47 = $782;
 $783 = $46;
 $784 = $47;
 HEAP32[$783>>2] = $784;
 $55 = $lastf;
 $56 = $196;
 $785 = $55;
 $54 = $785;
 $786 = $54;
 $787 = HEAP32[$786>>2]|0;
 $788 = $56;
 $53 = $788;
 $789 = $53;
 $790 = HEAP32[$789>>2]|0;
 $791 = ($787|0)==($790|0);
 if (!($791)) {
  ___assert_fail((1344|0),(216|0),512,(272|0));
  // unreachable;
 }
 $792 = $177;
 $57 = $792;
 $793 = $57;
 $794 = HEAP32[$793>>2]|0;
 $795 = (($793) + 4|0);
 $796 = HEAP32[$795>>2]|0;
 $797 = ($794|0)==($796|0);
 if ($797) {
  ___assert_fail((1368|0),(216|0),513,(272|0));
  // unreachable;
 }
 $798 = $177;
 $799 = (($798) + 32|0);
 $64 = $799;
 $800 = $64;
 $801 = HEAP32[$800>>2]|0;
 $62 = $800;
 $63 = $801;
 $802 = $63;
 $60 = $197;
 $61 = $802;
 $803 = $60;
 $804 = $61;
 $58 = $803;
 $59 = $804;
 $805 = $58;
 $806 = $59;
 HEAP32[$805>>2] = $806;
 ;HEAP32[$fi+0>>2]=HEAP32[$197+0>>2]|0;
 while(1) {
  $807 = $177;
  $808 = (($807) + 32|0);
  $71 = $808;
  $809 = $71;
  $810 = (($809) + 4|0);
  $811 = HEAP32[$810>>2]|0;
  $69 = $809;
  $70 = $811;
  $812 = $70;
  $67 = $198;
  $68 = $812;
  $813 = $67;
  $814 = $68;
  $65 = $813;
  $66 = $814;
  $815 = $65;
  $816 = $66;
  HEAP32[$815>>2] = $816;
  $76 = $fi;
  $77 = $198;
  $817 = $76;
  $818 = $77;
  $74 = $817;
  $75 = $818;
  $819 = $74;
  $73 = $819;
  $820 = $73;
  $821 = HEAP32[$820>>2]|0;
  $822 = $75;
  $72 = $822;
  $823 = $72;
  $824 = HEAP32[$823>>2]|0;
  $825 = ($821|0)==($824|0);
  $826 = $825 ^ 1;
  if (!($826)) {
   label = 142;
   break;
  }
  $78 = $fi;
  $827 = $78;
  $828 = HEAP32[$827>>2]|0;
  $829 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($828)|0);
  if (!($829)) {
   $85 = $fi;
   $830 = $85;
   $831 = HEAP32[$830>>2]|0;
   $832 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($831,0)|0);
   $833 = HEAP32[$832>>2]|0;
   $834 = $177;
   $99 = $834;
   $835 = $99;
   $836 = HEAP32[$835>>2]|0;
   $97 = $835;
   $98 = $836;
   $837 = $98;
   $95 = $199;
   $96 = $837;
   $838 = $95;
   $839 = $96;
   $93 = $838;
   $94 = $839;
   $840 = $93;
   $841 = $94;
   HEAP32[$840>>2] = $841;
   $100 = $199;
   $842 = $100;
   $843 = HEAP32[$842>>2]|0;
   $844 = ($833>>>0)>=($843>>>0);
   if (!($844)) {
    label = 132;
    break;
   }
   $101 = $fi;
   $845 = $101;
   $846 = HEAP32[$845>>2]|0;
   $847 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($846,0)|0);
   $848 = HEAP32[$847>>2]|0;
   $849 = $177;
   $109 = $849;
   $850 = $109;
   $851 = (($850) + 4|0);
   $852 = HEAP32[$851>>2]|0;
   $853 = (($852) + -36|0);
   $854 = ($848>>>0)<=($853>>>0);
   if (!($854)) {
    label = 132;
    break;
   }
   $110 = $fi;
   $855 = $110;
   $856 = HEAP32[$855>>2]|0;
   $857 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($856,1)|0);
   $858 = HEAP32[$857>>2]|0;
   $859 = $177;
   $118 = $859;
   $860 = $118;
   $861 = HEAP32[$860>>2]|0;
   $116 = $860;
   $117 = $861;
   $862 = $117;
   $114 = $200;
   $115 = $862;
   $863 = $114;
   $864 = $115;
   $112 = $863;
   $113 = $864;
   $865 = $112;
   $866 = $113;
   HEAP32[$865>>2] = $866;
   $119 = $200;
   $867 = $119;
   $868 = HEAP32[$867>>2]|0;
   $869 = ($858>>>0)>=($868>>>0);
   if (!($869)) {
    label = 135;
    break;
   }
   $120 = $fi;
   $870 = $120;
   $871 = HEAP32[$870>>2]|0;
   $872 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($871,1)|0);
   $873 = HEAP32[$872>>2]|0;
   $874 = $177;
   $122 = $874;
   $875 = $122;
   $876 = (($875) + 4|0);
   $877 = HEAP32[$876>>2]|0;
   $878 = (($877) + -36|0);
   $879 = ($873>>>0)<=($878>>>0);
   if (!($879)) {
    label = 135;
    break;
   }
   $123 = $fi;
   $880 = $123;
   $881 = HEAP32[$880>>2]|0;
   $882 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($881,2)|0);
   $883 = HEAP32[$882>>2]|0;
   $884 = $177;
   $131 = $884;
   $885 = $131;
   $886 = HEAP32[$885>>2]|0;
   $129 = $885;
   $130 = $886;
   $887 = $130;
   $127 = $201;
   $128 = $887;
   $888 = $127;
   $889 = $128;
   $125 = $888;
   $126 = $889;
   $890 = $125;
   $891 = $126;
   HEAP32[$890>>2] = $891;
   $132 = $201;
   $892 = $132;
   $893 = HEAP32[$892>>2]|0;
   $894 = ($883>>>0)>=($893>>>0);
   if (!($894)) {
    label = 138;
    break;
   }
   $133 = $fi;
   $895 = $133;
   $896 = HEAP32[$895>>2]|0;
   $897 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($896,2)|0);
   $898 = HEAP32[$897>>2]|0;
   $899 = $177;
   $135 = $899;
   $900 = $135;
   $901 = (($900) + 4|0);
   $902 = HEAP32[$901>>2]|0;
   $903 = (($902) + -36|0);
   $904 = ($898>>>0)<=($903>>>0);
   if (!($904)) {
    label = 138;
    break;
   }
  }
  $136 = $fi;
  $905 = $136;
  $906 = HEAP32[$905>>2]|0;
  $907 = (($906) + 44|0);
  HEAP32[$905>>2] = $907;
 }
 if ((label|0) == 132) {
  ___assert_fail((1384|0),(216|0),515,(272|0));
  // unreachable;
 }
 else if ((label|0) == 135) {
  ___assert_fail((1448|0),(216|0),516,(272|0));
  // unreachable;
 }
 else if ((label|0) == 138) {
  ___assert_fail((1512|0),(216|0),517,(272|0));
  // unreachable;
 }
 else if ((label|0) == 142) {
  $908 = $177;
  __ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_($908);
  $909 = $177;
  __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($909,$RD);
  $$expand_i1_val3 = 1;
  $176 = $$expand_i1_val3;
  $$pre_trunc = $176;
  $910 = $$pre_trunc&1;
  STACKTOP = sp;return ($910|0);
 }
 return 0|0;
}
function __ZN6MyMeshD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6MyMeshD2Ev($1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri24FaceVectorHasFFAdjacencyI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE16FaceBorderFromFFERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $fi = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fi = sp + 40|0;
 $27 = sp + 92|0;
 $26 = $m;
 $28 = $26;
 __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($28);
 $29 = $26;
 __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($29);
 $30 = $26;
 $31 = (($30) + 32|0);
 $25 = $31;
 $32 = $25;
 $33 = HEAP32[$32>>2]|0;
 $23 = $32;
 $24 = $33;
 $34 = $24;
 $21 = $fi;
 $22 = $34;
 $35 = $21;
 $36 = $22;
 $19 = $35;
 $20 = $36;
 $37 = $19;
 $38 = $20;
 HEAP32[$37>>2] = $38;
 while(1) {
  $39 = $26;
  $40 = (($39) + 32|0);
  $17 = $40;
  $41 = $17;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $15 = $41;
  $16 = $43;
  $44 = $16;
  $13 = $27;
  $14 = $44;
  $45 = $13;
  $46 = $14;
  $11 = $45;
  $12 = $46;
  $47 = $11;
  $48 = $12;
  HEAP32[$47>>2] = $48;
  $8 = $fi;
  $9 = $27;
  $49 = $8;
  $50 = $9;
  $6 = $49;
  $7 = $50;
  $51 = $6;
  $5 = $51;
  $52 = $5;
  $53 = HEAP32[$52>>2]|0;
  $54 = $7;
  $4 = $54;
  $55 = $4;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)==($56|0);
  $58 = $57 ^ 1;
  if (!($58)) {
   break;
  }
  $2 = $fi;
  $59 = $2;
  $60 = HEAP32[$59>>2]|0;
  $61 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($60)|0);
  if (!($61)) {
   $j = 0;
   while(1) {
    $62 = $j;
    $0 = $fi;
    $63 = $0;
    $64 = HEAP32[$63>>2]|0;
    $65 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($64)|0);
    $66 = ($62|0)<($65|0);
    if (!($66)) {
     break;
    }
    $1 = $fi;
    $67 = $1;
    $68 = HEAP32[$67>>2]|0;
    $69 = $j;
    $70 = (__ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($68,$69)|0);
    if ($70) {
     $3 = $fi;
     $71 = $3;
     $72 = HEAP32[$71>>2]|0;
     $73 = $j;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($72,$73);
    } else {
     $10 = $fi;
     $74 = $10;
     $75 = HEAP32[$74>>2]|0;
     $76 = $j;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($75,$76);
    }
    $77 = $j;
    $78 = (($77) + 1)|0;
    $j = $78;
   }
  }
  $18 = $fi;
  $79 = $18;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + 44|0);
  HEAP32[$79>>2] = $81;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEENS0_7TriMeshINSt3__16vectorIS6_NSA_9allocatorIS6_EEEENSB_I6MyFaceNSC_ISF_EEEENSB_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EERS2_NSA_12basic_stringIcNSA_11char_traitsIcEENSC_IcEEEE($agg$result,$m,$name) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p1$i$i = 0, $__p1$i$i$i$i = 0;
 var $__p1$i$i1 = 0, $h = 0, $i = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p1$i$i$i$i = sp + 40|0;
 $8 = sp + 32|0;
 $11 = sp + 64|0;
 $16 = sp + 88|0;
 $__p1$i$i1 = sp + 24|0;
 $21 = sp + 16|0;
 $33 = sp + 272|0;
 $__p1$i$i = sp;
 $36 = sp + 8|0;
 $39 = sp + 212|0;
 $i = sp + 260|0;
 $h = sp + 160|0;
 $56 = sp + 232|0;
 $57 = sp + 136|0;
 $res = sp + 280|0;
 $53 = $m;
 $52 = $i;
 $59 = $52;
 $51 = $59;
 __ZN3vcg18PointerToAttributeC1Ev($h);
 $60 = (($h) + 4|0);
 __THREW__ = 0;
 (invoke_iii(410,($60|0),($name|0))|0);
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 L1: do {
  if ($62) {
   label = 12;
  } else {
   $50 = $name;
   $63 = $50;
   $49 = $63;
   $64 = $49;
   $48 = $64;
   $65 = $48;
   $47 = $65;
   $66 = $47;
   $46 = $66;
   $67 = $46;
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $69 & 1;
   $71 = ($70|0)!=(0);
   if ($71) {
    $42 = $64;
    $72 = $42;
    $41 = $72;
    $73 = $41;
    $40 = $73;
    $74 = $40;
    $75 = (($74) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $84 = $76;
   } else {
    $45 = $64;
    $77 = $45;
    $44 = $77;
    $78 = $44;
    $43 = $78;
    $79 = $43;
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = $81 >> 1;
    $84 = $82;
   }
   $83 = ($84|0)==(0);
   do {
    if (!($83)) {
     $85 = $53;
     $86 = (($85) + 140|0);
     $37 = $86;
     $38 = $h;
     $87 = $37;
     $88 = $38;
     __THREW__ = 0;
     invoke_viii(411,($39|0),($87|0),($88|0));
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 12;
      break L1;
     }
     ;HEAP8[$36+0>>0]=HEAP8[$39+0>>0]|0;HEAP8[$36+1>>0]=HEAP8[$39+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$39+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$39+3>>0]|0;
     $35 = $56;
     $91 = $35;
     ;HEAP8[$__p1$i$i+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$__p1$i$i+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$__p1$i$i+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$__p1$i$i+3>>0]=HEAP8[$36+3>>0]|0;
     $34 = $91;
     $92 = $34;
     $93 = HEAP32[$__p1$i$i>>2]|0;
     HEAP32[$92>>2] = $93;
     ;HEAP32[$i+0>>2]=HEAP32[$56+0>>2]|0;
     $94 = $53;
     $95 = (($94) + 140|0);
     $32 = $95;
     $96 = $32;
     $31 = $96;
     $97 = $31;
     $30 = $97;
     $98 = $30;
     $99 = (($98) + 4|0);
     $29 = $99;
     $100 = $29;
     $28 = $100;
     $101 = $28;
     $27 = $101;
     $102 = $27;
     $26 = $102;
     $103 = $26;
     $24 = $33;
     $25 = $103;
     $104 = $24;
     $105 = $25;
     $22 = $104;
     $23 = $105;
     $106 = $22;
     $107 = $23;
     HEAP32[$106>>2] = $107;
     ;HEAP8[$21+0>>0]=HEAP8[$33+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$33+3>>0]|0;
     $20 = $57;
     $108 = $20;
     ;HEAP8[$__p1$i$i1+0>>0]=HEAP8[$21+0>>0]|0;HEAP8[$__p1$i$i1+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$__p1$i$i1+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$__p1$i$i1+3>>0]=HEAP8[$21+3>>0]|0;
     $19 = $108;
     $109 = $19;
     $110 = HEAP32[$__p1$i$i1>>2]|0;
     HEAP32[$109>>2] = $110;
     $17 = $i;
     $18 = $57;
     $111 = $17;
     $112 = HEAP32[$111>>2]|0;
     $113 = $18;
     $114 = HEAP32[$113>>2]|0;
     $115 = ($112|0)==($114|0);
     if ($115) {
      break;
     }
     __THREW__ = 0;
     invoke_viiii(404,(2816|0),(2056|0),1305,(2840|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 12;
      break L1;
     }
     // unreachable;
    }
   } while(0);
   $120 = (($h) + 16|0);
   HEAP32[$120>>2] = 16;
   $121 = (($h) + 20|0);
   HEAP32[$121>>2] = 0;
   __THREW__ = 0;
   $122 = (invoke_ii(412,24)|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 12;
   } else {
    $125 = $53;
    $126 = (($125) + 32|0);
    __THREW__ = 0;
    invoke_vii(413,($122|0),($126|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $170 = ___cxa_find_matching_catch()|0;
     $171 = tempRet0;
     $54 = $170;
     $55 = $171;
     __ZdlPv($122);
     break;
    }
    HEAP32[$h>>2] = $122;
    $129 = $53;
    $130 = (($129) + 112|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + 1)|0;
    HEAP32[$130>>2] = $132;
    $133 = $53;
    $134 = (($133) + 112|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($h) + 24|0);
    HEAP32[$136>>2] = $135;
    $137 = $53;
    $138 = (($137) + 140|0);
    $14 = $138;
    $15 = $h;
    $139 = $14;
    $140 = $15;
    __THREW__ = 0;
    invoke_viii(414,($16|0),($139|0),($140|0));
    $141 = __THREW__; __THREW__ = 0;
    $142 = $141&1;
    if ($142) {
     label = 12;
    } else {
     $12 = $res;
     $13 = $16;
     $143 = $12;
     $144 = $13;
     $9 = $143;
     $10 = $144;
     $145 = $9;
     $146 = $10;
     ;HEAP32[$11+0>>2]=HEAP32[$146+0>>2]|0;
     ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;HEAP8[$8+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$11+3>>0]|0;
     $7 = $145;
     $147 = $7;
     ;HEAP8[$__p1$i$i$i$i+0>>0]=HEAP8[$8+0>>0]|0;HEAP8[$__p1$i$i$i$i+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$__p1$i$i$i$i+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$__p1$i$i$i$i+3>>0]=HEAP8[$8+3>>0]|0;
     $6 = $147;
     $148 = $6;
     $149 = HEAP32[$__p1$i$i$i$i>>2]|0;
     HEAP32[$148>>2] = $149;
     $150 = (($145) + 4|0);
     $151 = $10;
     $152 = (($151) + 4|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = $153&1;
     $155 = $154&1;
     HEAP8[$150>>0] = $155;
     $5 = $res;
     $156 = $5;
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + 16|0);
     $4 = $158;
     $159 = $4;
     $3 = $159;
     $160 = $3;
     $161 = HEAP32[$160>>2]|0;
     $2 = $res;
     $162 = $2;
     $163 = HEAP32[$162>>2]|0;
     $164 = (($163) + 16|0);
     $1 = $164;
     $165 = $1;
     $0 = $165;
     $166 = $0;
     $167 = (($166) + 24|0);
     __THREW__ = 0;
     invoke_viii(415,($agg$result|0),($161|0),($167|0));
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 12;
     } else {
      $58 = 1;
      __ZN3vcg18PointerToAttributeD1Ev($h);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $118 = ___cxa_find_matching_catch()|0;
  $119 = tempRet0;
  $54 = $118;
  $55 = $119;
 }
 __THREW__ = 0;
 invoke_vi(416,($h|0));
 $172 = __THREW__; __THREW__ = 0;
 $173 = $172&1;
 if ($173) {
  $176 = ___cxa_find_matching_catch(0|0)|0;
  $177 = tempRet0;
  ___clang_call_terminate($176);
  // unreachable;
 }
 $174 = $54;
 $175 = $55;
 ___resumeException($174|0);
 // unreachable;
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($1)|0);
 $3 = $2 & 32;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixERKNS1_11__wrap_iterIPS3_EE($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face3PosI6MyFaceEC1EPS2_i($this,$fp,$zp) {
 $this = $this|0;
 $fp = $fp|0;
 $zp = $zp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fp;
 $2 = $zp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg4face3PosI6MyFaceEC2EPS2_i($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZNK3vcg4face3PosI6MyFaceE5FFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($2,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $nf = $6;
 $7 = $nf;
 STACKTOP = sp;return ($7|0);
}
function __ZNK3vcg3tri7EdgeLenI6MyMeshfEclENS_4face3PosI6MyFaceEE($this,$ep) {
 $this = $this|0;
 $ep = $ep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face3PosI6MyFaceE1VEv($ep)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($3)|0);
 $5 = (__ZNK3vcg4face3PosI6MyFaceE5VFlipEv($ep)|0);
 $6 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($5)|0);
 $7 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($4,$6));
 $8 = +HEAPF32[$1>>2];
 $9 = $7 > $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN3vcg4face3PosI6MyFaceE1EEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEPKS3_($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg4face3PosI6MyFaceE1FEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg4face3PosI6MyFaceE10IsManifoldEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face10IsManifoldI6MyFaceEEbRKT_i($2,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face3PosI6MyFaceE8IsBorderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($2,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face3PosI6MyFaceE5FlipFEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nf = 0, $nz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $nz = sp;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($2,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($1) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($7,$9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($6,$12)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($14|0)==($15|0);
 if (!($16)) {
  ___assert_fail((2352|0),(2384|0),192,(2432|0));
  // unreachable;
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = (($1) + 4|0);
 $20 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($18,$19)|0);
 $21 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($17,$20)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($1) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22|0)!=($24|0);
 if (!($25)) {
  ___assert_fail((2440|0),(2384|0),194,(2432|0));
  // unreachable;
 }
 $26 = HEAP32[$1>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($1) + 4|0);
 $29 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($27,$28)|0);
 $30 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($26,$29)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($1) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31|0)==($33|0);
 if (!($34)) {
  $35 = HEAP32[$1>>2]|0;
  $36 = (($1) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($35,$37)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($1) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)==($41|0);
  if (!($42)) {
   ___assert_fail((2440|0),(2384|0),194,(2432|0));
   // unreachable;
  }
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($1) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($43,$45)|0);
 $47 = HEAP32[$46>>2]|0;
 $nf = $47;
 $48 = HEAP32[$1>>2]|0;
 $49 = (($1) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($48,$50)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 << 24 >> 24;
 HEAP32[$nz>>2] = $53;
 $54 = $nf;
 $55 = $nf;
 $56 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($55,$nz)|0);
 $57 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($54,$56)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($1) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58|0)!=($60|0);
 if (!($61)) {
  ___assert_fail((2504|0),(2384|0),197,(2432|0));
  // unreachable;
 }
 $62 = $nf;
 $63 = $nf;
 $64 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($63,$nz)|0);
 $65 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($62,$64)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($1) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($66|0)==($68|0);
 if (!($69)) {
  $70 = $nf;
  $71 = HEAP32[$nz>>2]|0;
  $72 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($70,$71)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($1) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if (!($76)) {
   ___assert_fail((2504|0),(2384|0),197,(2432|0));
   // unreachable;
  }
 }
 $77 = $nf;
 HEAP32[$1>>2] = $77;
 $78 = HEAP32[$nz>>2]|0;
 $79 = (($1) + 4|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$1>>2]|0;
 $81 = HEAP32[$1>>2]|0;
 $82 = (($1) + 4|0);
 $83 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($81,$82)|0);
 $84 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($80,$83)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($1) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($85|0)!=($87|0);
 if (!($88)) {
  ___assert_fail((2576|0),(2384|0),200,(2432|0));
  // unreachable;
 }
 $89 = HEAP32[$1>>2]|0;
 $90 = HEAP32[$1>>2]|0;
 $91 = (($1) + 4|0);
 $92 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($90,$91)|0);
 $93 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($89,$92)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($1) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($94|0)==($96|0);
 if ($97) {
  STACKTOP = sp;return;
 }
 $98 = HEAP32[$1>>2]|0;
 $99 = (($1) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($98,$100)|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($1) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($102|0)==($104|0);
 if ($105) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2576|0),(2384|0),200,(2432|0));
  // unreachable;
 }
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 16;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($m,$h) {
 $m = $m|0;
 $h = $h|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p1$i$i = 0, $__p1$i$i2 = 0, $__p1$i$i7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $__p1$i$i7 = sp + 48|0;
 $8 = sp + 16|0;
 $20 = sp + 200|0;
 $__p1$i$i2 = sp + 8|0;
 $23 = sp + 40|0;
 $25 = sp + 132|0;
 $26 = sp + 136|0;
 $27 = sp + 32|0;
 $__p1$i$i = sp + 24|0;
 $30 = sp;
 $38 = sp + 216|0;
 $i = sp + 196|0;
 $44 = sp + 112|0;
 $45 = sp + 204|0;
 $46 = sp + 184|0;
 $47 = sp + 220|0;
 $42 = $m;
 $43 = $h;
 $41 = $i;
 $48 = $41;
 $40 = $48;
 $49 = $42;
 $50 = (($49) + 140|0);
 $37 = $50;
 $51 = $37;
 $36 = $51;
 $52 = $36;
 $35 = $52;
 $53 = $35;
 $54 = HEAP32[$53>>2]|0;
 $33 = $38;
 $34 = $54;
 $55 = $33;
 $56 = $34;
 $31 = $55;
 $32 = $56;
 $57 = $31;
 $58 = $32;
 HEAP32[$57>>2] = $58;
 ;HEAP8[$30+0>>0]=HEAP8[$38+0>>0]|0;HEAP8[$30+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$30+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$30+3>>0]=HEAP8[$38+3>>0]|0;
 $29 = $44;
 $59 = $29;
 ;HEAP8[$__p1$i$i+0>>0]=HEAP8[$30+0>>0]|0;HEAP8[$__p1$i$i+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$__p1$i$i+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$__p1$i$i+3>>0]=HEAP8[$30+3>>0]|0;
 $28 = $59;
 $60 = $28;
 $61 = HEAP32[$__p1$i$i>>2]|0;
 HEAP32[$60>>2] = $61;
 ;HEAP32[$i+0>>2]=HEAP32[$44+0>>2]|0;
 while(1) {
  $62 = $42;
  $63 = (($62) + 140|0);
  $19 = $63;
  $64 = $19;
  $18 = $64;
  $65 = $18;
  $17 = $65;
  $66 = $17;
  $67 = (($66) + 4|0);
  $16 = $67;
  $68 = $16;
  $15 = $68;
  $69 = $15;
  $14 = $69;
  $70 = $14;
  $13 = $70;
  $71 = $13;
  $11 = $20;
  $12 = $71;
  $72 = $11;
  $73 = $12;
  $9 = $72;
  $10 = $73;
  $74 = $9;
  $75 = $10;
  HEAP32[$74>>2] = $75;
  ;HEAP8[$8+0>>0]=HEAP8[$20+0>>0]|0;HEAP8[$8+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$20+3>>0]|0;
  $7 = $45;
  $76 = $7;
  ;HEAP8[$__p1$i$i7+0>>0]=HEAP8[$8+0>>0]|0;HEAP8[$__p1$i$i7+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$__p1$i$i7+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$__p1$i$i7+3>>0]=HEAP8[$8+3>>0]|0;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$__p1$i$i7>>2]|0;
  HEAP32[$77>>2] = $78;
  $4 = $i;
  $5 = $45;
  $79 = $4;
  $80 = $5;
  $2 = $79;
  $3 = $80;
  $81 = $2;
  $82 = HEAP32[$81>>2]|0;
  $83 = $3;
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  $86 = $85 ^ 1;
  if (!($86)) {
   label = 9;
   break;
  }
  $0 = $i;
  $87 = $0;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $43;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  if ($93) {
   break;
  }
  $39 = $i;
  $108 = $39;
  $109 = HEAP32[$108>>2]|0;
  $110 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($109)|0);
  HEAP32[$108>>2] = $110;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $1 = $i;
 $94 = $1;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 16|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==(0|0);
 if (!($98)) {
  $99 = HEAP32[$97>>2]|0;
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_vi[$101 & 1023]($97);
 }
 $102 = $42;
 $103 = (($102) + 140|0);
 ;HEAP32[$46+0>>2]=HEAP32[$i+0>>2]|0;
 ;HEAP8[$27+0>>0]=HEAP8[$46+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$46+3>>0]|0;
 $24 = $103;
 $104 = $24;
 ;HEAP32[$26+0>>2]=HEAP32[$27+0>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$26+0>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($25,$104,$$byval_copy);
 ;HEAP8[$23+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$25+3>>0]|0;
 $22 = $47;
 $105 = $22;
 ;HEAP8[$__p1$i$i2+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$__p1$i$i2+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$__p1$i$i2+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$__p1$i$i2+3>>0]=HEAP8[$23+3>>0]|0;
 $21 = $105;
 $106 = $21;
 $107 = HEAP32[$__p1$i$i2>>2]|0;
 HEAP32[$106>>2] = $107;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($agg$result,$m,$n) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 16|0;
 $0 = $m;
 $1 = $n;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC1Ev($pu);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viiii(417,($agg$result|0),($5|0),($6|0),($pu|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $4 = 1;
  __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED1Ev($pu);
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $2 = $9;
 $3 = $10;
 __THREW__ = 0;
 invoke_vi(418,($pu|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 $13 = $2;
 $14 = $3;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEclER8MyVertexNS_4face3PosI6MyFaceEE($this,$nv,$ep) {
 $this = $this|0;
 $nv = $nv|0;
 $ep = $ep|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 64|0;
 $2 = sp + 16|0;
 $3 = sp + 76|0;
 $4 = sp;
 $5 = sp + 32|0;
 $6 = sp + 56|0;
 $7 = sp + 44|0;
 $0 = $this;
 $1 = $nv;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2136|0),(216|0),143,(2144|0));
  // unreachable;
 }
 $11 = $1;
 $12 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($11)|0);
 $13 = HEAP32[$ep>>2]|0;
 $14 = (($ep) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($13,$15)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($17)|0);
 $19 = HEAP32[$ep>>2]|0;
 $20 = (($ep) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($19,$21)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($23)|0);
 __ZNK3vcg6Point3IfEplERKS1_($3,$18,$24);
 __ZNK3vcg6Point3IfEdvEf($2,$3,2.0);
 (__ZN3vcg6Point3IfEaSERKS1_($12,$2)|0);
 $25 = HEAP32[$8>>2]|0;
 $26 = (__ZN3vcg3tri18HasPerVertexNormalI6MyMeshEEbRKT_($25)|0);
 if ($26) {
  $27 = $1;
  $28 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($27)|0);
  $29 = HEAP32[$ep>>2]|0;
  $30 = (($ep) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($29,$31)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($33)|0);
  $35 = HEAP32[$ep>>2]|0;
  $36 = (($ep) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($35,$37)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($39)|0);
  __ZNK3vcg6Point3IfEplERKS1_($4,$34,$40);
  $41 = (__ZN3vcg6Point3IfE10normalizedEv($4)|0);
  (__ZN3vcg6Point3IfEaSERKS1_($28,$41)|0);
 }
 $42 = HEAP32[$8>>2]|0;
 $43 = (__ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_($42)|0);
 if ($43) {
  $44 = $1;
  $45 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($44)|0);
  $46 = HEAP32[$ep>>2]|0;
  $47 = (($ep) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($46,$48)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($50)|0);
  $52 = HEAP32[$ep>>2]|0;
  $53 = (($ep) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($52,$54)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($56)|0);
  __ZN3vcg6Color4IhE4lerpIfEEvRKS1_S4_T_($45,$51,$57,0.5);
 }
 $58 = HEAP32[$8>>2]|0;
 $59 = (__ZN3vcg3tri19HasPerVertexQualityI6MyMeshEEbRKT_($58)|0);
 if ($59) {
  $60 = HEAP32[$ep>>2]|0;
  $61 = (($ep) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($60,$62)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($64)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = HEAP32[$ep>>2]|0;
  $68 = (($ep) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($67,$69)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($71)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $66 + $73;
  $75 = $74;
  $76 = $75 / 2.0;
  $77 = $76;
  $78 = $1;
  $79 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($78)|0);
  HEAPF32[$79>>2] = $77;
 }
 $80 = HEAP32[$8>>2]|0;
 $81 = (__ZN3vcg3tri20HasPerVertexTexCoordI6MyMeshEEbRKT_($80)|0);
 if ($81) {
  $82 = $1;
  $83 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($82)|0);
  $84 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($83)|0);
  $85 = HEAP32[$ep>>2]|0;
  $86 = (($ep) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($85,$87)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($89)|0);
  $91 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($90)|0);
  $92 = HEAP32[$ep>>2]|0;
  $93 = (($ep) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($92,$94)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($96)|0);
  $98 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($97)|0);
  __ZNK3vcg6Point2IfEplERKS1_($6,$91,$98);
  __ZNK3vcg6Point2IfEdvEf($5,$6,2.0);
  (__ZN3vcg6Point2IfEaSERKS1_($84,$5)|0);
 }
 $99 = (($8) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = (($8) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $1;
 ;HEAP32[$7+0>>2]=HEAP32[$ep+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$ep+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$ep+8>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;
 __ZN3vcg3tri16BaseInterpolatorI6MyMeshEclER8MyVertexNS_4face3PosI6MyFaceEE($103,$104,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($agg$result,$m,$n) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 16|0;
 $0 = $m;
 $1 = $n;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC1Ev($pu);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viiii(419,($agg$result|0),($5|0),($6|0),($pu|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $4 = 1;
  __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev($pu);
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $2 = $9;
 $3 = $10;
 __THREW__ = 0;
 invoke_vi(420,($pu|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 $13 = $2;
 $14 = $3;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3vcg9TexCoord2IfLi1EEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg9TexCoord2IfLi1EEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 12|0);
   $9 = (($8) + ($7<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((1792|0),(1640|0),173,(1808|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetSEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 32;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv()|0);
 if ($3) {
  $4 = $1;
  $5 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($4)|0);
  $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
  HEAP32[$6>>2] = $5;
 }
 $7 = $1;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE10ImportDataI6MyFaceEEvRKT_($2,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri29FaceVectorHasPerWedgeTexCoordI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg9TexCoord2IfLi1EEaSERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $__i0 = 0;
 while(1) {
  $4 = $__i0;
  $5 = ($4|0)!=(1);
  if (!($5)) {
   break;
  }
  $6 = $__i0;
  $7 = (($3) + ($6<<3)|0);
  $8 = $__i0;
  $9 = $2;
  $10 = (($9) + ($8<<3)|0);
  (__ZN3vcg6Point2IfEaSERKS1_($7,$10)|0);
  $11 = $__i0;
  $12 = (($11) + 1)|0;
  $__i0 = $12;
 }
 $13 = (($3) + 8|0);
 $14 = $2;
 $15 = (($14) + 8|0);
 ;HEAP16[$13+0>>1]=HEAP16[$15+0>>1]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 $6 = HEAP8[1624>>0]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire((1624|0))|0);
   $9 = ($8|0)!=(0);
   if ($9) {
    __THREW__ = 0;
    invoke_vi(421,(1608|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if (!($11)) {
     ___cxa_guard_release((1624|0));
     break;
    }
    $12 = ___cxa_find_matching_catch()|0;
    $13 = tempRet0;
    $4 = $12;
    $5 = $13;
    ___cxa_guard_abort((1624|0));
    $14 = $4;
    $15 = $5;
    ___resumeException($14|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((1632|0),(1640|0),58,(1696|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEE11WedgeInterpIfEENS_9TexCoord2IT_Li1EEERS9_SA_($agg$result,$this,$t0,$t1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $t0 = $t0|0;
 $t1 = $t1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $t0;
 $2 = $t1;
 __ZN3vcg9TexCoord2IfLi1EEC1Ev($agg$result);
 $5 = $1;
 $6 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($5)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $2;
 $10 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($9)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($8|0)==($12|0);
 if ($13) {
  $14 = $1;
  $15 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($14)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($agg$result)|0);
  HEAP16[$17>>1] = $16;
  $18 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($agg$result)|0);
  $19 = $1;
  $20 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($19)|0);
  $21 = $2;
  $22 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($21)|0);
  __ZNK3vcg6Point2IfEplERKS1_($4,$20,$22);
  __ZNK3vcg6Point2IfEdvEf($3,$4,2.0);
  (__ZN3vcg6Point2IfEaSERKS1_($18,$3)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((1576|0),(216|0),171,(1592|0));
  // unreachable;
 }
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 64 << $3;
 $5 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 64 << $3;
 $5 = $4 ^ -1;
 $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & $5;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $p1;
 $1 = $p2;
 $3 = $0;
 $4 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($2,$3,$4);
 $5 = (+__ZNK3vcg6Point3IfE11SquaredNormEv($2));
 STACKTOP = sp;return (+$5);
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($2)|0);
 $4 = $1;
 $5 = 64 << $4;
 $6 = $3 & $5;
 $7 = ($6|0)!=(0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK3vcg6Point3IfEmiERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 - $11;
 $13 = (($2) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 - $17;
 __ZN3vcg6Point3IfEC1Efff($agg$result,$6,$12,$18);
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfE11SquaredNormEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 STACKTOP = sp;return (+$16);
}
function __ZN3vcg6Point3IfEC1Efff($this,$nx,$ny,$nz) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN3vcg6Point3IfEC2Efff($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC2Efff($this,$nx,$ny,$nz) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $2;
 $7 = (($4) + 4|0);
 HEAPF32[$7>>2] = $6;
 $8 = $3;
 $9 = (($4) + 8|0);
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg9TexCoord2IfLi1EE1nEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg9TexCoord2IfLi1EE1tEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point2IfEaSERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg6Point2IfEplERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 + $11;
 __ZN3vcg6Point2IfEC1Eff($agg$result,$6,$12);
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point2IfEdvEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 / $4;
 $6 = (($2) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 / $8;
 __ZN3vcg6Point2IfEC1Eff($agg$result,$5,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC1Eff($this,$nx,$ny) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg6Point2IfEC2Eff($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC2Eff($this,$nx,$ny) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAPF32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri29FaceVectorHasPerWedgeTexCoordI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE16HasWedgeTexCoordEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE16HasWedgeTexCoordEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $rightF;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE15IsNormalEnabledEv($4)|0);
 if ($5) {
  $6 = (__ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE1NEv($3)|0);
  $7 = $1;
  __ZNK3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE2cNEv($2,$7);
  __ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE($6,$2);
 }
 $8 = $1;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($3,$8);
 STACKTOP = sp;return;
}
function __ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE15IsNormalEnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE9HasNormalEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE1NEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point3IfEixEi($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = (__ZNK3vcg6Point3IfEixEi($6,1)|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($2) + 4|0);
 HEAPF32[$9>>2] = $8;
 $10 = $1;
 $11 = (__ZNK3vcg6Point3IfEixEi($10,2)|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($2) + 8|0);
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNK3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE2cNEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC1ERKS1_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE10ImportDataI6MyFaceEEvRKT_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC1ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 __ZN3vcg6Point3IfEC2ERKS1_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC2ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1704|0),(1720|0),225,(1776|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE9HasNormalEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg9TexCoord2IfLi1EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = $1;
 while(1) {
  __ZN3vcg6Point2IfEC1Ev($3);
  $4 = (($3) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point2IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_jRNS3_14PointerUpdaterIP6MyFaceEE($agg$result,$m,$n,$pu) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 $pu = $pu|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__p1$i$i = 0, $__p1$i$i5 = 0, $ai = 0, $ei = 0, $fi = 0, $fi1 = 0, $firstNewFace = 0, $hi = 0, $i = 0, $i2 = 0, $siz = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p1$i$i5 = sp + 16|0;
 $100 = sp + 24|0;
 $112 = sp + 488|0;
 $__p1$i$i = sp + 32|0;
 $116 = sp + 8|0;
 $124 = sp + 844|0;
 $132 = sp;
 $135 = sp + 848|0;
 $181 = sp + 768|0;
 $firstNewFace = sp + 776|0;
 $ai = sp + 780|0;
 $182 = sp + 784|0;
 $183 = sp + 72|0;
 $184 = sp + 36|0;
 $187 = sp + 96|0;
 $fi = sp + 64|0;
 $fi1 = sp + 108|0;
 $vi = sp + 788|0;
 $188 = sp + 412|0;
 $ei = sp + 416|0;
 $189 = sp + 804|0;
 $hi = sp + 836|0;
 $190 = sp + 584|0;
 $178 = $m;
 $179 = $n;
 $180 = $pu;
 $191 = $180;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE5ClearEv($191);
 $192 = $179;
 $193 = ($192|0)==(0);
 if ($193) {
  $194 = $178;
  $195 = (($194) + 32|0);
  $177 = $195;
  $196 = $177;
  $197 = (($196) + 4|0);
  $198 = HEAP32[$197>>2]|0;
  $175 = $196;
  $176 = $198;
  $199 = $176;
  $173 = $agg$result;
  $174 = $199;
  $200 = $173;
  $201 = $174;
  $171 = $200;
  $172 = $201;
  $202 = $171;
  $203 = $172;
  HEAP32[$202>>2] = $203;
  STACKTOP = sp;return;
 }
 $204 = $178;
 $205 = (($204) + 32|0);
 $170 = $205;
 $206 = $170;
 $207 = HEAP32[$206>>2]|0;
 $208 = (($206) + 4|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = ($207|0)==($209|0);
 if (!($210)) {
  $211 = $178;
  $212 = (($211) + 32|0);
  $168 = $212;
  $213 = $168;
  $214 = HEAP32[$213>>2]|0;
  $166 = $213;
  $167 = $214;
  $215 = $167;
  $164 = $181;
  $165 = $215;
  $216 = $164;
  $217 = $165;
  $162 = $216;
  $163 = $217;
  $218 = $162;
  $219 = $163;
  HEAP32[$218>>2] = $219;
  $161 = $181;
  $220 = $161;
  $221 = HEAP32[$220>>2]|0;
  $222 = $180;
  $223 = (($222) + 4|0);
  HEAP32[$223>>2] = $221;
  $224 = $178;
  $225 = (($224) + 32|0);
  $159 = $225;
  $226 = $159;
  $227 = (($226) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($228) + -44|0);
  $230 = (($229) + 44|0);
  $231 = $180;
  $232 = (($231) + 12|0);
  HEAP32[$232>>2] = $230;
 }
 $233 = $178;
 $234 = (($233) + 32|0);
 $235 = $178;
 $236 = (($235) + 32|0);
 $157 = $236;
 $237 = $157;
 $238 = (($237) + 4|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = HEAP32[$237>>2]|0;
 $241 = $239;
 $242 = $240;
 $243 = (($241) - ($242))|0;
 $244 = (($243|0) / 44)&-1;
 $245 = $179;
 $246 = (($244) + ($245))|0;
 __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($234,$246);
 $247 = $179;
 $248 = $178;
 $249 = (($248) + 44|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($250) + ($247))|0;
 HEAP32[$249>>2] = $251;
 $252 = $178;
 $253 = (($252) + 32|0);
 $146 = $253;
 $254 = $146;
 $255 = (($254) + 4|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = HEAP32[$254>>2]|0;
 $258 = $256;
 $259 = $257;
 $260 = (($258) - ($259))|0;
 $261 = (($260|0) / 44)&-1;
 $262 = $179;
 $263 = (($261) - ($262))|0;
 $siz = $263;
 $264 = $178;
 $265 = (($264) + 32|0);
 $142 = $265;
 $266 = $142;
 $267 = HEAP32[$266>>2]|0;
 $140 = $266;
 $141 = $267;
 $268 = $141;
 $138 = $firstNewFace;
 $139 = $268;
 $269 = $138;
 $270 = $139;
 $136 = $269;
 $137 = $270;
 $271 = $136;
 $272 = $137;
 HEAP32[$271>>2] = $272;
 $273 = $siz;
 $133 = $firstNewFace;
 $134 = $273;
 $274 = $133;
 $275 = $134;
 ;HEAP8[$132+0>>0]=HEAP8[$135+0>>0]|0;
 $130 = $274;
 $131 = $275;
 $276 = $130;
 $277 = $131;
 $128 = $276;
 $129 = $277;
 $278 = $128;
 $279 = $129;
 $280 = HEAP32[$278>>2]|0;
 $281 = (($280) + (($279*44)|0)|0);
 HEAP32[$278>>2] = $281;
 $126 = $ai;
 $282 = $126;
 $125 = $282;
 $283 = $178;
 $284 = (($283) + 140|0);
 $123 = $284;
 $285 = $123;
 $122 = $285;
 $286 = $122;
 $121 = $286;
 $287 = $121;
 $288 = HEAP32[$287>>2]|0;
 $119 = $124;
 $120 = $288;
 $289 = $119;
 $290 = $120;
 $117 = $289;
 $118 = $290;
 $291 = $117;
 $292 = $118;
 HEAP32[$291>>2] = $292;
 ;HEAP8[$116+0>>0]=HEAP8[$124+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$124+3>>0]|0;
 $115 = $182;
 $293 = $115;
 ;HEAP8[$__p1$i$i+0>>0]=HEAP8[$116+0>>0]|0;HEAP8[$__p1$i$i+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$__p1$i$i+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$__p1$i$i+3>>0]=HEAP8[$116+3>>0]|0;
 $114 = $293;
 $294 = $114;
 $295 = HEAP32[$__p1$i$i>>2]|0;
 HEAP32[$294>>2] = $295;
 ;HEAP32[$ai+0>>2]=HEAP32[$182+0>>2]|0;
 while(1) {
  $296 = $178;
  $297 = (($296) + 140|0);
  $111 = $297;
  $298 = $111;
  $110 = $298;
  $299 = $110;
  $109 = $299;
  $300 = $109;
  $301 = (($300) + 4|0);
  $108 = $301;
  $302 = $108;
  $107 = $302;
  $303 = $107;
  $106 = $303;
  $304 = $106;
  $105 = $304;
  $305 = $105;
  $103 = $112;
  $104 = $305;
  $306 = $103;
  $307 = $104;
  $101 = $306;
  $102 = $307;
  $308 = $101;
  $309 = $102;
  HEAP32[$308>>2] = $309;
  ;HEAP8[$100+0>>0]=HEAP8[$112+0>>0]|0;HEAP8[$100+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$100+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$100+3>>0]=HEAP8[$112+3>>0]|0;
  $99 = $183;
  $310 = $99;
  ;HEAP8[$__p1$i$i5+0>>0]=HEAP8[$100+0>>0]|0;HEAP8[$__p1$i$i5+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$__p1$i$i5+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$__p1$i$i5+3>>0]=HEAP8[$100+3>>0]|0;
  $98 = $310;
  $311 = $98;
  $312 = HEAP32[$__p1$i$i5>>2]|0;
  HEAP32[$311>>2] = $312;
  $95 = $ai;
  $96 = $183;
  $313 = $95;
  $314 = $96;
  $93 = $313;
  $94 = $314;
  $315 = $93;
  $316 = HEAP32[$315>>2]|0;
  $317 = $94;
  $318 = HEAP32[$317>>2]|0;
  $319 = ($316|0)==($318|0);
  $320 = $319 ^ 1;
  if (!($320)) {
   break;
  }
  $71 = $ai;
  $321 = $71;
  $322 = HEAP32[$321>>2]|0;
  $323 = (($322) + 16|0);
  __ZN3vcg18PointerToAttributeC1ERKS0_($184,$323);
  $324 = $178;
  $325 = (($324) + 32|0);
  $69 = $325;
  $326 = $69;
  $327 = (($326) + 4|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = HEAP32[$326>>2]|0;
  $330 = $328;
  $331 = $329;
  $332 = (($330) - ($331))|0;
  $333 = (($332|0) / 44)&-1;
  __THREW__ = 0;
  invoke_vii(422,($184|0),($333|0));
  $334 = __THREW__; __THREW__ = 0;
  $335 = $334&1;
  if ($335) {
   label = 10;
   break;
  }
  __ZN3vcg18PointerToAttributeD1Ev($184);
  $68 = $ai;
  $336 = $68;
  $337 = HEAP32[$336>>2]|0;
  $338 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($337)|0);
  HEAP32[$336>>2] = $338;
 }
 if ((label|0) == 10) {
  $339 = ___cxa_find_matching_catch()|0;
  $340 = tempRet0;
  $185 = $339;
  $186 = $340;
  __THREW__ = 0;
  invoke_vi(416,($184|0));
  $341 = __THREW__; __THREW__ = 0;
  $342 = $341&1;
  if ($342) {
   $581 = ___cxa_find_matching_catch(0|0)|0;
   $582 = tempRet0;
   ___clang_call_terminate($581);
   // unreachable;
  }
  $579 = $185;
  $580 = $186;
  ___resumeException($579|0);
  // unreachable;
 }
 $343 = $178;
 $344 = (($343) + 32|0);
 $67 = $344;
 $345 = $67;
 $346 = HEAP32[$345>>2]|0;
 $65 = $345;
 $66 = $346;
 $347 = $66;
 $63 = $187;
 $64 = $347;
 $348 = $63;
 $349 = $64;
 $61 = $348;
 $62 = $349;
 $350 = $61;
 $351 = $62;
 HEAP32[$350>>2] = $351;
 $59 = $187;
 $352 = $59;
 $353 = HEAP32[$352>>2]|0;
 $354 = $180;
 HEAP32[$354>>2] = $353;
 $355 = $178;
 $356 = (($355) + 32|0);
 $57 = $356;
 $357 = $57;
 $358 = (($357) + 4|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = (($359) + -44|0);
 $361 = (($360) + 44|0);
 $362 = $180;
 $363 = (($362) + 8|0);
 HEAP32[$363>>2] = $361;
 $364 = $180;
 $365 = (__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE10NeedUpdateEv($364)|0);
 if ($365) {
  $366 = $178;
  $367 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($366)|0);
  if ($367) {
   $368 = $178;
   $369 = (($368) + 32|0);
   $34 = $369;
   $370 = $34;
   $371 = HEAP32[$370>>2]|0;
   $32 = $370;
   $33 = $371;
   $372 = $33;
   $30 = $fi;
   $31 = $372;
   $373 = $30;
   $374 = $31;
   $28 = $373;
   $29 = $374;
   $375 = $28;
   $376 = $29;
   HEAP32[$375>>2] = $376;
   while(1) {
    $26 = $fi;
    $27 = $firstNewFace;
    $377 = $26;
    $378 = $27;
    $24 = $377;
    $25 = $378;
    $379 = $24;
    $23 = $379;
    $380 = $23;
    $381 = HEAP32[$380>>2]|0;
    $382 = $25;
    $22 = $382;
    $383 = $22;
    $384 = HEAP32[$383>>2]|0;
    $385 = ($381|0)==($384|0);
    $386 = $385 ^ 1;
    if (!($386)) {
     break;
    }
    $20 = $fi;
    $387 = $20;
    $388 = HEAP32[$387>>2]|0;
    $389 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($388)|0);
    if (!($389)) {
     $i = 0;
     while(1) {
      $390 = $i;
      $18 = $fi;
      $391 = $18;
      $392 = HEAP32[$391>>2]|0;
      $393 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($392)|0);
      $394 = ($390|0)<($393|0);
      if (!($394)) {
       break;
      }
      $16 = $fi;
      $395 = $16;
      $396 = HEAP32[$395>>2]|0;
      $397 = $i;
      $398 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($396,$397)|0);
      $399 = ($398|0)!=(0|0);
      if ($399) {
       $400 = $180;
       $1 = $fi;
       $401 = $1;
       $402 = HEAP32[$401>>2]|0;
       $403 = $i;
       $404 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($402,$403)|0);
       __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($400,$404);
      }
      $405 = $i;
      $406 = (($405) + 1)|0;
      $i = $406;
     }
    }
    $0 = $fi;
    $407 = $0;
    $408 = HEAP32[$407>>2]|0;
    $409 = (($408) + 44|0);
    HEAP32[$407>>2] = $409;
   }
  }
  $410 = $178;
  $411 = (__ZN3vcg3tri23HasPerVertexVFAdjacencyI6MyMeshEEbRKT_($410)|0);
  if ($411) {
   $412 = $178;
   $413 = (__ZN3vcg3tri21HasPerFaceVFAdjacencyI6MyMeshEEbRKT_($412)|0);
   if ($413) {
    $414 = $178;
    $415 = (($414) + 32|0);
    $8 = $415;
    $416 = $8;
    $417 = HEAP32[$416>>2]|0;
    $6 = $416;
    $7 = $417;
    $418 = $7;
    $4 = $fi1;
    $5 = $418;
    $419 = $4;
    $420 = $5;
    $2 = $419;
    $3 = $420;
    $421 = $2;
    $422 = $3;
    HEAP32[$421>>2] = $422;
    while(1) {
     $13 = $fi1;
     $14 = $firstNewFace;
     $423 = $13;
     $424 = $14;
     $11 = $423;
     $12 = $424;
     $425 = $11;
     $10 = $425;
     $426 = $10;
     $427 = HEAP32[$426>>2]|0;
     $428 = $12;
     $9 = $428;
     $429 = $9;
     $430 = HEAP32[$429>>2]|0;
     $431 = ($427|0)==($430|0);
     $432 = $431 ^ 1;
     if (!($432)) {
      break;
     }
     $15 = $fi1;
     $433 = $15;
     $434 = HEAP32[$433>>2]|0;
     $435 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($434)|0);
     if (!($435)) {
      $i2 = 0;
      while(1) {
       $436 = $i2;
       $17 = $fi1;
       $437 = $17;
       $438 = HEAP32[$437>>2]|0;
       $439 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($438)|0);
       $440 = ($436|0)<($439|0);
       if (!($440)) {
        break;
       }
       $19 = $fi1;
       $441 = $19;
       $442 = HEAP32[$441>>2]|0;
       $443 = $i2;
       $444 = (__ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE4cVFpEi($442,$443)|0);
       $445 = ($444|0)!=(0|0);
       if ($445) {
        $446 = $180;
        $21 = $fi1;
        $447 = $21;
        $448 = HEAP32[$447>>2]|0;
        $449 = $i2;
        $450 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE3VFpEi($448,$449)|0);
        __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($446,$450);
       }
       $451 = $i2;
       $452 = (($451) + 1)|0;
       $i2 = $452;
      }
     }
     $35 = $fi1;
     $453 = $35;
     $454 = HEAP32[$453>>2]|0;
     $455 = (($454) + 44|0);
     HEAP32[$453>>2] = $455;
    }
    $456 = $178;
    $42 = $456;
    $457 = $42;
    $458 = HEAP32[$457>>2]|0;
    $40 = $457;
    $41 = $458;
    $459 = $41;
    $38 = $vi;
    $39 = $459;
    $460 = $38;
    $461 = $39;
    $36 = $460;
    $37 = $461;
    $462 = $36;
    $463 = $37;
    HEAP32[$462>>2] = $463;
    while(1) {
     $464 = $178;
     $49 = $464;
     $465 = $49;
     $466 = (($465) + 4|0);
     $467 = HEAP32[$466>>2]|0;
     $47 = $465;
     $48 = $467;
     $468 = $48;
     $45 = $188;
     $46 = $468;
     $469 = $45;
     $470 = $46;
     $43 = $469;
     $44 = $470;
     $471 = $43;
     $472 = $44;
     HEAP32[$471>>2] = $472;
     $54 = $vi;
     $55 = $188;
     $473 = $54;
     $474 = $55;
     $52 = $473;
     $53 = $474;
     $475 = $52;
     $51 = $475;
     $476 = $51;
     $477 = HEAP32[$476>>2]|0;
     $478 = $53;
     $50 = $478;
     $479 = $50;
     $480 = HEAP32[$479>>2]|0;
     $481 = ($477|0)==($480|0);
     $482 = $481 ^ 1;
     if (!($482)) {
      break;
     }
     $56 = $vi;
     $483 = $56;
     $484 = HEAP32[$483>>2]|0;
     $485 = (__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($484)|0);
     if (!($485)) {
      $58 = $vi;
      $486 = $58;
      $487 = HEAP32[$486>>2]|0;
      $488 = (__ZNK3vcg6vertex9EmptyCoreI11MyUsedTypesE4cVFpEv($487)|0);
      $489 = ($488|0)!=(0|0);
      if ($489) {
       $490 = $180;
       $60 = $vi;
       $491 = $60;
       $492 = HEAP32[$491>>2]|0;
       $493 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE3VFpEv($492)|0);
       __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($490,$493);
      }
     }
     $70 = $vi;
     $494 = $70;
     $495 = HEAP32[$494>>2]|0;
     $496 = (($495) + 36|0);
     HEAP32[$494>>2] = $496;
    }
   }
  }
  $497 = $178;
  $498 = (__ZN3vcg3tri14HasEFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($497)|0);
  if ($498) {
   $499 = $178;
   $500 = (($499) + 16|0);
   $78 = $500;
   $501 = $78;
   $502 = HEAP32[$501>>2]|0;
   $76 = $501;
   $77 = $502;
   $503 = $77;
   $74 = $ei;
   $75 = $503;
   $504 = $74;
   $505 = $75;
   $72 = $504;
   $73 = $505;
   $506 = $72;
   $507 = $73;
   HEAP32[$506>>2] = $507;
   while(1) {
    $508 = $178;
    $509 = (($508) + 16|0);
    $85 = $509;
    $510 = $85;
    $511 = (($510) + 4|0);
    $512 = HEAP32[$511>>2]|0;
    $83 = $510;
    $84 = $512;
    $513 = $84;
    $81 = $189;
    $82 = $513;
    $514 = $81;
    $515 = $82;
    $79 = $514;
    $80 = $515;
    $516 = $79;
    $517 = $80;
    HEAP32[$516>>2] = $517;
    $90 = $ei;
    $91 = $189;
    $518 = $90;
    $519 = $91;
    $88 = $518;
    $89 = $519;
    $520 = $88;
    $87 = $520;
    $521 = $87;
    $522 = HEAP32[$521>>2]|0;
    $523 = $89;
    $86 = $523;
    $524 = $86;
    $525 = HEAP32[$524>>2]|0;
    $526 = ($522|0)==($525|0);
    $527 = $526 ^ 1;
    if (!($527)) {
     break;
    }
    $92 = $ei;
    $528 = $92;
    $529 = HEAP32[$528>>2]|0;
    $530 = (__ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($529)|0);
    if (!($530)) {
     $97 = $ei;
     $531 = $97;
     $532 = HEAP32[$531>>2]|0;
     $533 = (__ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE4cEFpEv($532)|0);
     $534 = ($533|0)!=(0|0);
     if ($534) {
      $535 = $180;
      $113 = $ei;
      $536 = $113;
      $537 = HEAP32[$536>>2]|0;
      $538 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE3EFpEv($537)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($535,$538);
     }
    }
    $127 = $ei;
    $539 = $127;
    $540 = HEAP32[$539>>2]|0;
    $541 = (($540) + 1|0);
    HEAP32[$539>>2] = $541;
   }
  }
  $542 = $178;
  $543 = (__ZN3vcg3tri14HasHFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($542)|0);
  if ($543) {
   $544 = $178;
   $545 = (($544) + 48|0);
   $145 = $545;
   $546 = $145;
   $547 = HEAP32[$546>>2]|0;
   $143 = $546;
   $144 = $547;
   $548 = $144;
   __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2ESH_($hi,$548);
   while(1) {
    $549 = $178;
    $550 = (($549) + 48|0);
    $149 = $550;
    $551 = $149;
    $552 = (($551) + 4|0);
    $553 = HEAP32[$552>>2]|0;
    $147 = $551;
    $148 = $553;
    $554 = $148;
    __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2ESH_($190,$554);
    $154 = $hi;
    $155 = $190;
    $555 = $154;
    $556 = $155;
    $152 = $555;
    $153 = $556;
    $557 = $152;
    $151 = $557;
    $558 = $151;
    $559 = HEAP32[$558>>2]|0;
    $560 = $153;
    $150 = $560;
    $561 = $150;
    $562 = HEAP32[$561>>2]|0;
    $563 = ($559|0)==($562|0);
    $564 = $563 ^ 1;
    if (!($564)) {
     break;
    }
    $156 = $hi;
    $565 = $156;
    $566 = HEAP32[$565>>2]|0;
    $567 = (__ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($566)|0);
    if (!($567)) {
     $158 = $hi;
     $568 = $158;
     $569 = HEAP32[$568>>2]|0;
     $570 = (__ZNK3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE4cHFpEv($569)|0);
     $571 = ($570|0)!=(0|0);
     if ($571) {
      $572 = $180;
      $160 = $hi;
      $573 = $160;
      $574 = HEAP32[$573>>2]|0;
      $575 = (__ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE3HFpEv($574)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($572,$575);
     }
    }
    $169 = $hi;
    $576 = $169;
    $577 = HEAP32[$576>>2]|0;
    $578 = (($577) + 1|0);
    HEAP32[$576>>2] = $578;
   }
  }
 }
 ;HEAP32[$agg$result+0>>2]=HEAP32[$firstNewFace+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -4|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = (($19) + 4|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$19>>2] = 0;
 $23 = (($19) + 16|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 4)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(423,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 } else {
  $13 = $24;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 44)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + (($39*44)|0)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 44)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -44|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(424,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttributeC1ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg18PointerToAttributeC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttribute6ResizeEj($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sz;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 FUNCTION_TABLE_vii[$6 & 1023]($3,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttributeD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg18PointerToAttributeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE10NeedUpdateEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = (($3) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if ($10) {
   $11 = (($3) + 28|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&1;
   if ($13) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = (($3) + 16|0);
  $0 = $14;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($15) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $$expand_i1_val2 = 0;
   $1 = $$expand_i1_val2;
   $$pre_trunc = $1;
   $20 = $$pre_trunc&1;
   STACKTOP = sp;return ($20|0);
  }
 }
 $$expand_i1_val = 1;
 $1 = $$expand_i1_val;
 $$pre_trunc = $1;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 24|0);
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 ___assert_fail((1792|0),(1640|0),618,(2128|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($this,$vp) {
 $this = $this|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $vp;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)>($14>>>0);
  if (!($15)) {
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($5) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17>>>0)>=($19>>>0);
   if (!($20)) {
    ___assert_fail((2040|0),(2056|0),133,(2104|0));
    // unreachable;
   }
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22>>>0)<($24>>>0);
   if (!($25)) {
    ___assert_fail((2112|0),(2056|0),134,(2104|0));
    // unreachable;
   }
   $26 = HEAP32[$5>>2]|0;
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($5) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $28;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($33|0) / 44)&-1;
   $35 = (($26) + (($34*44)|0)|0);
   $36 = $4;
   HEAP32[$36>>2] = $35;
   $37 = (($5) + 16|0);
   $2 = $37;
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($38) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    STACKTOP = sp;return;
   }
   $43 = HEAP32[$5>>2]|0;
   $44 = (($5) + 16|0);
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$5>>2]|0;
   $48 = $46;
   $49 = $47;
   $50 = (($48) - ($49))|0;
   $51 = (($50|0) / 44)&-1;
   $0 = $44;
   $1 = $51;
   $52 = $0;
   $53 = $1;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($43) + (($56*44)|0)|0);
   $58 = $4;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 24|0);
   $9 = (($8) + ($7<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((1792|0),(1640|0),617,(2032|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri23HasPerVertexVFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri26VertexVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri21HasPerFaceVFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri24FaceVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE4cVFpEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 ___assert_fail((1632|0),(1640|0),108,(2024|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE3VFpEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 ___assert_fail((1632|0),(1640|0),107,(2016|0));
 // unreachable;
 return 0|0;
}
function __ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE6cFlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg6vertex9EmptyCoreI11MyUsedTypesE4cVFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1960|0),105,(2024|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE3VFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1960|0),104,(2016|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri14HasEFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE5FlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE4cEFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1888|0),93,(1952|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE3EFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1888|0),92,(1944|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri14HasHFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE14HasHFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg5hedge13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESE_SE_SE_SE_EEEEE5FlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE4cHFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1816|0),331,(1880|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE3HFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1816|0),330,(1872|0));
 // unreachable;
 return 0|0;
}
function __ZNK3vcg5hedge13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESE_SE_SE_SE_EEEEE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2ESH_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__x;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE14HasHFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNK3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE6cFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri24FaceVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg3tri26VertexVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 48|0;
 $8 = sp + 64|0;
 $14 = sp + 4|0;
 $19 = sp + 12|0;
 $16 = $__x;
 $20 = $16;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $12 = $14;
 $13 = -1;
 $23 = $12;
 $24 = $13;
 $10 = $23;
 $11 = $24;
 $25 = $10;
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$14>>2]|0;
 HEAP32[$19>>2] = $26;
 $0 = $19;
 $27 = ($22|0)!=(0|0);
 if ($27) {
  $28 = $16;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $7 = $30;
  while(1) {
   $31 = $7;
   $32 = HEAP32[$31>>2]|0;
   $4 = $6;
   $5 = -1;
   $33 = $4;
   $34 = $5;
   $2 = $33;
   $3 = $34;
   $35 = $2;
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$6>>2]|0;
   HEAP32[$8>>2] = $36;
   $1 = $8;
   $37 = ($32|0)!=(0|0);
   if (!($37)) {
    break;
   }
   $38 = $7;
   $39 = HEAP32[$38>>2]|0;
   $7 = $39;
  }
  $40 = $7;
  $15 = $40;
  $55 = $15;
  STACKTOP = sp;return ($55|0);
 } else {
  while(1) {
   $41 = $16;
   $9 = $41;
   $42 = $9;
   $43 = $9;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = ($42|0)==($46|0);
   $48 = $47 ^ 1;
   if (!($48)) {
    break;
   }
   $49 = $16;
   $50 = (($49) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $16 = $51;
  }
  $52 = $16;
  $53 = (($52) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $15 = $54;
  $55 = $15;
  STACKTOP = sp;return ($55|0);
 }
 return 0|0;
}
function __ZN3vcg18PointerToAttributeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttributeC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = (($3) + 4|0);
 $7 = $2;
 $8 = (($7) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($6,$8);
 $9 = (($3) + 16|0);
 $10 = $2;
 $11 = (($10) + 16|0);
 ;HEAP32[$9+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$11+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 92|0;
 $__v = sp + 52|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 44)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 44)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 44)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 44)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC1EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(425,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(426,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(427,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 44)&-1;
 $35 = (($22) + (($34*44)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*44)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 44)&-1;
 $52 = (($43) + (($51*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC1ERKS4_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   dest=$17+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN6MyFaceC1Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 44|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC1EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC2EjjS4_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   dest=$19+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN6MyFaceC1Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 44|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 92|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -44|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -44|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZN6MyFaceC1ERKS_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -44|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 44)&-1;
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -44|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 44)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 44)&-1;
 $39 = (($26) + (($38*44)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 44)&-1;
 $51 = (($42) + (($50*44)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 44)&-1;
 $67 = (($54) + (($66*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 44)&-1;
 $39 = (($26) + (($38*44)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 44)&-1;
 $55 = (($42) + (($54*44)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC1ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN6MyFaceC2ERKS_($3,$4);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2ERKS8_($3,$4);
 $5 = (($3) + 40|0);
 $6 = $2;
 $7 = (($6) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2ERKS7_($3,$4);
 $5 = (($3) + 24|0);
 $6 = $2;
 $7 = (($6) + 24|0);
 ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP16[$5+12>>1]=HEAP16[$7+12>>1]|0;HEAP8[$5+14>>0]=HEAP8[$7+14>>0]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2ERKS6_($3,$4);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2ERKS6_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2ERKS5_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2ERKS5_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2ERKS7_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point3IfEC1ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6MyFaceC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2Ev($1);
 $2 = (($1) + 40|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2Ev($1);
 $2 = (($1) + 24|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 24|0);
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 24|0);
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2Ev($1);
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 12|0);
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 12|0);
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC1Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 97612893;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = ($75*44)|0;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + (($85*44)|0)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + (($90*44)|0)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC1ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 64|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 48|0;
 $30 = sp + 100|0;
 $31 = sp + 52|0;
 $34 = $this;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = (($35) + 12|0);
 HEAP32[$38>>2] = 0;
 $39 = (($35) + 16|0);
 $33 = $39;
 $40 = $33;
 $32 = $40;
 $41 = $32;
 $28 = $41;
 $42 = $28;
 $27 = $42;
 $2 = $4;
 $3 = -1;
 $43 = $2;
 $44 = $3;
 $0 = $43;
 $1 = $44;
 $45 = $0;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $46;
 $5 = $29;
 HEAP32[$42>>2] = 0;
 $47 = (($42) + 4|0);
 $8 = $10;
 $9 = -1;
 $48 = $8;
 $49 = $9;
 $6 = $48;
 $7 = $49;
 $50 = $6;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $51;
 $11 = $30;
 HEAP32[$47>>2] = 0;
 $52 = (($42) + 8|0);
 $14 = $16;
 $15 = -1;
 $53 = $14;
 $54 = $15;
 $12 = $53;
 $13 = $54;
 $55 = $12;
 HEAP32[$55>>2] = 0;
 $56 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $56;
 $17 = $31;
 $25 = $52;
 $26 = 0;
 $57 = $25;
 $58 = $26;
 $23 = $57;
 HEAP32[$24>>2] = $58;
 $59 = $23;
 $22 = $24;
 $60 = $22;
 $61 = HEAP32[$60>>2]|0;
 $20 = $59;
 HEAP32[$21>>2] = $61;
 $62 = $20;
 $19 = $62;
 $18 = $21;
 $63 = $18;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = (($35) + 28|0);
 HEAP8[$65>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEaSERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg6Point3IfEplERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 + $11;
 $13 = (($2) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 + $17;
 __ZN3vcg6Point3IfEC1Efff($agg$result,$6,$12,$18);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = (($4|0) % 3)&-1;
 $6 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($2,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK3vcg6Point3IfEdvEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 / $4;
 $6 = (($2) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 / $8;
 $10 = (($2) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = $11 / $12;
 __ZN3vcg6Point3IfEC1Efff($agg$result,$5,$9,$13);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri18HasPerVertexNormalI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri30VertexVectorHasPerVertexNormalI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Point3IfE10normalizedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6Point3IfE9NormalizeEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri29VertexVectorHasPerVertexColorI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 24|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Color4IhE4lerpIfEEvRKS1_S4_T_($this,$c0,$c1,$x) {
 $this = $this|0;
 $c0 = $c0|0;
 $c1 = $c1|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c0;
 $2 = $c1;
 $3 = $x;
 $4 = $0;
 $5 = $3;
 $6 = $5 >= 0.0;
 if (!($6)) {
  ___assert_fail((2192|0),(2200|0),110,(2248|0));
  // unreachable;
 }
 $7 = $3;
 $8 = $7 <= 1.0;
 if ($8) {
  $9 = $2;
  $10 = (__ZNK3vcg6Point4IhE1VEv($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (+($12|0));
  $14 = $3;
  $15 = $13 * $14;
  $16 = $1;
  $17 = (__ZNK3vcg6Point4IhE1VEv($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (+($19|0));
  $21 = $3;
  $22 = 1.0 - $21;
  $23 = $20 * $22;
  $24 = $15 + $23;
  $25 = (~~(($24))&255);
  $26 = (__ZN3vcg6Point4IhEixEi($4,0)|0);
  HEAP8[$26>>0] = $25;
  $27 = $2;
  $28 = (__ZNK3vcg6Point4IhE1VEv($27)|0);
  $29 = (($28) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (+($31|0));
  $33 = $3;
  $34 = $32 * $33;
  $35 = $1;
  $36 = (__ZNK3vcg6Point4IhE1VEv($35)|0);
  $37 = (($36) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (+($39|0));
  $41 = $3;
  $42 = 1.0 - $41;
  $43 = $40 * $42;
  $44 = $34 + $43;
  $45 = (~~(($44))&255);
  $46 = (__ZN3vcg6Point4IhEixEi($4,1)|0);
  HEAP8[$46>>0] = $45;
  $47 = $2;
  $48 = (__ZNK3vcg6Point4IhE1VEv($47)|0);
  $49 = (($48) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (+($51|0));
  $53 = $3;
  $54 = $52 * $53;
  $55 = $1;
  $56 = (__ZNK3vcg6Point4IhE1VEv($55)|0);
  $57 = (($56) + 2|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (+($59|0));
  $61 = $3;
  $62 = 1.0 - $61;
  $63 = $60 * $62;
  $64 = $54 + $63;
  $65 = (~~(($64))&255);
  $66 = (__ZN3vcg6Point4IhEixEi($4,2)|0);
  HEAP8[$66>>0] = $65;
  $67 = $2;
  $68 = (__ZNK3vcg6Point4IhE1VEv($67)|0);
  $69 = (($68) + 3|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = (+($71|0));
  $73 = $3;
  $74 = $72 * $73;
  $75 = $1;
  $76 = (__ZNK3vcg6Point4IhE1VEv($75)|0);
  $77 = (($76) + 3|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (+($79|0));
  $81 = $3;
  $82 = 1.0 - $81;
  $83 = $80 * $82;
  $84 = $74 + $83;
  $85 = (~~(($84))&255);
  $86 = (__ZN3vcg6Point4IhEixEi($4,3)|0);
  HEAP8[$86>>0] = $85;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2256|0),(2200|0),111,(2248|0));
  // unreachable;
 }
}
function __ZN3vcg3tri19HasPerVertexQualityI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri31VertexVectorHasPerVertexQualityI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri20HasPerVertexTexCoordI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri32VertexVectorHasPerVertexTexCoordI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = HEAP8[2176>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((2176|0))|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    __THREW__ = 0;
    invoke_vi(421,(2160|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     ___cxa_guard_release((2176|0));
     break;
    }
    $10 = ___cxa_find_matching_catch()|0;
    $11 = tempRet0;
    $2 = $10;
    $3 = $11;
    ___cxa_guard_abort((2176|0));
    $12 = $2;
    $13 = $3;
    ___resumeException($12|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((1632|0),(1960|0),94,(2184|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg9TexCoord2IfLi1EE1PEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg3tri16BaseInterpolatorI6MyMeshEclER8MyVertexNS_4face3PosI6MyFaceEE($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri32VertexVectorHasPerVertexTexCoordI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE11HasTexCoordEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE11HasTexCoordEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg3tri31VertexVectorHasPerVertexQualityI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE10HasQualityEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE10HasQualityEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNK3vcg6Point4IhE1VEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point4IhEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((2264|0),(2280|0),145,(1776|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri29VertexVectorHasPerVertexColorI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE8HasColorEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE8HasColorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg6Point3IfE9NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $n = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 $17 = (+__ZN3vcg4math4SqrtEf($16));
 $n = $17;
 $18 = $n;
 $19 = $18 > 0.0;
 if (!($19)) {
  STACKTOP = sp;return ($1|0);
 }
 $20 = $n;
 $21 = +HEAPF32[$1>>2];
 $22 = $21 / $20;
 HEAPF32[$1>>2] = $22;
 $23 = $n;
 $24 = (($1) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25 / $23;
 HEAPF32[$24>>2] = $26;
 $27 = $n;
 $28 = (($1) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $29 / $27;
 HEAPF32[$28>>2] = $30;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg4math4SqrtEf($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (+Math_sqrt((+$1)));
 STACKTOP = sp;return (+$2);
}
function __ZN3vcg3tri30VertexVectorHasPerVertexNormalI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE9HasNormalEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE9HasNormalEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_jRNS3_14PointerUpdaterIP8MyVertexEE($agg$result,$m,$n,$pu) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 $pu = $pu|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__p1$i$i = 0, $__p1$i$i3 = 0, $ai = 0, $ei = 0, $fi = 0, $hi = 0, $i = 0, $last = 0, $siz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p1$i$i3 = sp;
 $66 = sp + 32|0;
 $78 = sp + 672|0;
 $__p1$i$i = sp + 16|0;
 $82 = sp + 24|0;
 $90 = sp + 404|0;
 $131 = sp + 8|0;
 $134 = sp + 708|0;
 $last = sp + 632|0;
 $147 = sp + 636|0;
 $ai = sp + 640|0;
 $148 = sp + 644|0;
 $149 = sp + 76|0;
 $150 = sp + 40|0;
 $153 = sp + 36|0;
 $fi = sp + 68|0;
 $154 = sp + 560|0;
 $ei = sp + 344|0;
 $155 = sp + 652|0;
 $hi = sp + 348|0;
 $156 = sp + 668|0;
 $157 = sp + 356|0;
 $158 = sp + 580|0;
 $144 = $m;
 $145 = $n;
 $146 = $pu;
 $143 = $last;
 $159 = $143;
 $142 = $159;
 $160 = $145;
 $161 = ($160|0)==(0);
 if ($161) {
  $162 = $144;
  $141 = $162;
  $163 = $141;
  $164 = (($163) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  $139 = $163;
  $140 = $165;
  $166 = $140;
  $137 = $agg$result;
  $138 = $166;
  $167 = $137;
  $168 = $138;
  $135 = $167;
  $136 = $168;
  $169 = $135;
  $170 = $136;
  HEAP32[$169>>2] = $170;
  STACKTOP = sp;return;
 }
 $171 = $146;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE5ClearEv($171);
 $172 = $144;
 $117 = $172;
 $173 = $117;
 $174 = HEAP32[$173>>2]|0;
 $175 = (($173) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = ($174|0)==($176|0);
 if ($177) {
  $178 = $146;
  $179 = (($178) + 4|0);
  HEAP32[$179>>2] = 0;
 } else {
  $180 = $144;
  $116 = $180;
  $181 = $116;
  $182 = HEAP32[$181>>2]|0;
  $114 = $181;
  $115 = $182;
  $183 = $115;
  $112 = $147;
  $113 = $183;
  $184 = $112;
  $185 = $113;
  $110 = $184;
  $111 = $185;
  $186 = $110;
  $187 = $111;
  HEAP32[$186>>2] = $187;
  $108 = $147;
  $188 = $108;
  $189 = HEAP32[$188>>2]|0;
  $190 = $146;
  $191 = (($190) + 4|0);
  HEAP32[$191>>2] = $189;
  $192 = $144;
  $107 = $192;
  $193 = $107;
  $194 = (($193) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + -36|0);
  $197 = (($196) + 36|0);
  $198 = $146;
  $199 = (($198) + 12|0);
  HEAP32[$199>>2] = $197;
 }
 $200 = $144;
 $201 = $144;
 $96 = $201;
 $202 = $96;
 $203 = (($202) + 4|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = HEAP32[$202>>2]|0;
 $206 = $204;
 $207 = $205;
 $208 = (($206) - ($207))|0;
 $209 = (($208|0) / 36)&-1;
 $210 = $145;
 $211 = (($209) + ($210))|0;
 __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($200,$211);
 $212 = $145;
 $213 = $144;
 $214 = (($213) + 12|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (($215) + ($212))|0;
 HEAP32[$214>>2] = $216;
 $92 = $ai;
 $217 = $92;
 $91 = $217;
 $218 = $144;
 $219 = (($218) + 116|0);
 $89 = $219;
 $220 = $89;
 $88 = $220;
 $221 = $88;
 $87 = $221;
 $222 = $87;
 $223 = HEAP32[$222>>2]|0;
 $85 = $90;
 $86 = $223;
 $224 = $85;
 $225 = $86;
 $83 = $224;
 $84 = $225;
 $226 = $83;
 $227 = $84;
 HEAP32[$226>>2] = $227;
 ;HEAP8[$82+0>>0]=HEAP8[$90+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$90+3>>0]|0;
 $81 = $148;
 $228 = $81;
 ;HEAP8[$__p1$i$i+0>>0]=HEAP8[$82+0>>0]|0;HEAP8[$__p1$i$i+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$__p1$i$i+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$__p1$i$i+3>>0]=HEAP8[$82+3>>0]|0;
 $80 = $228;
 $229 = $80;
 $230 = HEAP32[$__p1$i$i>>2]|0;
 HEAP32[$229>>2] = $230;
 ;HEAP32[$ai+0>>2]=HEAP32[$148+0>>2]|0;
 while(1) {
  $231 = $144;
  $232 = (($231) + 116|0);
  $77 = $232;
  $233 = $77;
  $76 = $233;
  $234 = $76;
  $75 = $234;
  $235 = $75;
  $236 = (($235) + 4|0);
  $74 = $236;
  $237 = $74;
  $73 = $237;
  $238 = $73;
  $72 = $238;
  $239 = $72;
  $71 = $239;
  $240 = $71;
  $69 = $78;
  $70 = $240;
  $241 = $69;
  $242 = $70;
  $67 = $241;
  $68 = $242;
  $243 = $67;
  $244 = $68;
  HEAP32[$243>>2] = $244;
  ;HEAP8[$66+0>>0]=HEAP8[$78+0>>0]|0;HEAP8[$66+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$78+3>>0]|0;
  $65 = $149;
  $245 = $65;
  ;HEAP8[$__p1$i$i3+0>>0]=HEAP8[$66+0>>0]|0;HEAP8[$__p1$i$i3+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$__p1$i$i3+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$__p1$i$i3+3>>0]=HEAP8[$66+3>>0]|0;
  $64 = $245;
  $246 = $64;
  $247 = HEAP32[$__p1$i$i3>>2]|0;
  HEAP32[$246>>2] = $247;
  $62 = $ai;
  $63 = $149;
  $248 = $62;
  $249 = $63;
  $60 = $248;
  $61 = $249;
  $250 = $60;
  $251 = HEAP32[$250>>2]|0;
  $252 = $61;
  $253 = HEAP32[$252>>2]|0;
  $254 = ($251|0)==($253|0);
  $255 = $254 ^ 1;
  if (!($255)) {
   break;
  }
  $58 = $ai;
  $256 = $58;
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + 16|0);
  __ZN3vcg18PointerToAttributeC1ERKS0_($150,$258);
  $259 = $144;
  $57 = $259;
  $260 = $57;
  $261 = (($260) + 4|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = HEAP32[$260>>2]|0;
  $264 = $262;
  $265 = $263;
  $266 = (($264) - ($265))|0;
  $267 = (($266|0) / 36)&-1;
  __THREW__ = 0;
  invoke_vii(422,($150|0),($267|0));
  $268 = __THREW__; __THREW__ = 0;
  $269 = $268&1;
  if ($269) {
   label = 11;
   break;
  }
  __ZN3vcg18PointerToAttributeD1Ev($150);
  $55 = $ai;
  $270 = $55;
  $271 = HEAP32[$270>>2]|0;
  $272 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($271)|0);
  HEAP32[$270>>2] = $272;
 }
 if ((label|0) == 11) {
  $273 = ___cxa_find_matching_catch()|0;
  $274 = tempRet0;
  $151 = $273;
  $152 = $274;
  __THREW__ = 0;
  invoke_vi(416,($150|0));
  $275 = __THREW__; __THREW__ = 0;
  $276 = $275&1;
  if ($276) {
   $458 = ___cxa_find_matching_catch(0|0)|0;
   $459 = tempRet0;
   ___clang_call_terminate($458);
   // unreachable;
  }
  $456 = $151;
  $457 = $152;
  ___resumeException($456|0);
  // unreachable;
 }
 $277 = $144;
 $54 = $277;
 $278 = $54;
 $279 = HEAP32[$278>>2]|0;
 $52 = $278;
 $53 = $279;
 $280 = $53;
 $50 = $153;
 $51 = $280;
 $281 = $50;
 $282 = $51;
 $48 = $281;
 $49 = $282;
 $283 = $48;
 $284 = $49;
 HEAP32[$283>>2] = $284;
 $47 = $153;
 $285 = $47;
 $286 = HEAP32[$285>>2]|0;
 $287 = $146;
 HEAP32[$287>>2] = $286;
 $288 = $144;
 $24 = $288;
 $289 = $24;
 $290 = (($289) + 4|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = (($291) + -36|0);
 $293 = (($292) + 36|0);
 $294 = $146;
 $295 = (($294) + 8|0);
 HEAP32[$295>>2] = $293;
 $296 = $146;
 $297 = (__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE10NeedUpdateEv($296)|0);
 if ($297) {
  $298 = $144;
  $299 = (($298) + 32|0);
  $23 = $299;
  $300 = $23;
  $301 = HEAP32[$300>>2]|0;
  $21 = $300;
  $22 = $301;
  $302 = $22;
  $19 = $fi;
  $20 = $302;
  $303 = $19;
  $304 = $20;
  $17 = $303;
  $18 = $304;
  $305 = $17;
  $306 = $18;
  HEAP32[$305>>2] = $306;
  while(1) {
   $307 = $144;
   $308 = (($307) + 32|0);
   $15 = $308;
   $309 = $15;
   $310 = (($309) + 4|0);
   $311 = HEAP32[$310>>2]|0;
   $13 = $309;
   $14 = $311;
   $312 = $14;
   $11 = $154;
   $12 = $312;
   $313 = $11;
   $314 = $12;
   $9 = $313;
   $10 = $314;
   $315 = $9;
   $316 = $10;
   HEAP32[$315>>2] = $316;
   $6 = $fi;
   $7 = $154;
   $317 = $6;
   $318 = $7;
   $4 = $317;
   $5 = $318;
   $319 = $4;
   $3 = $319;
   $320 = $3;
   $321 = HEAP32[$320>>2]|0;
   $322 = $5;
   $2 = $322;
   $323 = $2;
   $324 = HEAP32[$323>>2]|0;
   $325 = ($321|0)==($324|0);
   $326 = $325 ^ 1;
   if (!($326)) {
    break;
   }
   $0 = $fi;
   $327 = $0;
   $328 = HEAP32[$327>>2]|0;
   $329 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($328)|0);
   if (!($329)) {
    $i = 0;
    while(1) {
     $330 = $i;
     $1 = $fi;
     $331 = $1;
     $332 = HEAP32[$331>>2]|0;
     $333 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($332)|0);
     $334 = ($330|0)<($333|0);
     if (!($334)) {
      break;
     }
     $8 = $fi;
     $335 = $8;
     $336 = HEAP32[$335>>2]|0;
     $337 = $i;
     $338 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($336,$337)|0);
     $339 = ($338|0)!=(0|0);
     if ($339) {
      $340 = $146;
      $16 = $fi;
      $341 = $16;
      $342 = HEAP32[$341>>2]|0;
      $343 = $i;
      $344 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($342,$343)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($340,$344);
     }
     $345 = $i;
     $346 = (($345) + 1)|0;
     $i = $346;
    }
   }
   $25 = $fi;
   $347 = $25;
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + 44|0);
   HEAP32[$347>>2] = $349;
  }
  $350 = $144;
  $351 = (($350) + 16|0);
  $32 = $351;
  $352 = $32;
  $353 = HEAP32[$352>>2]|0;
  $30 = $352;
  $31 = $353;
  $354 = $31;
  $28 = $ei;
  $29 = $354;
  $355 = $28;
  $356 = $29;
  $26 = $355;
  $27 = $356;
  $357 = $26;
  $358 = $27;
  HEAP32[$357>>2] = $358;
  while(1) {
   $359 = $144;
   $360 = (($359) + 16|0);
   $39 = $360;
   $361 = $39;
   $362 = (($361) + 4|0);
   $363 = HEAP32[$362>>2]|0;
   $37 = $361;
   $38 = $363;
   $364 = $38;
   $35 = $155;
   $36 = $364;
   $365 = $35;
   $366 = $36;
   $33 = $365;
   $34 = $366;
   $367 = $33;
   $368 = $34;
   HEAP32[$367>>2] = $368;
   $44 = $ei;
   $45 = $155;
   $369 = $44;
   $370 = $45;
   $42 = $369;
   $43 = $370;
   $371 = $42;
   $41 = $371;
   $372 = $41;
   $373 = HEAP32[$372>>2]|0;
   $374 = $43;
   $40 = $374;
   $375 = $40;
   $376 = HEAP32[$375>>2]|0;
   $377 = ($373|0)==($376|0);
   $378 = $377 ^ 1;
   if (!($378)) {
    break;
   }
   $46 = $ei;
   $379 = $46;
   $380 = HEAP32[$379>>2]|0;
   $381 = (__ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($380)|0);
   if (!($381)) {
    $382 = $144;
    $383 = (__ZN3vcg3tri14HasEVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($382)|0);
    if ($383) {
     $384 = $146;
     $56 = $ei;
     $385 = $56;
     $386 = HEAP32[$385>>2]|0;
     $387 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($386,0)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($384,$387);
     $388 = $146;
     $59 = $ei;
     $389 = $59;
     $390 = HEAP32[$389>>2]|0;
     $391 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($390,1)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($388,$391);
    }
   }
   $79 = $ei;
   $392 = $79;
   $393 = HEAP32[$392>>2]|0;
   $394 = (($393) + 1|0);
   HEAP32[$392>>2] = $394;
  }
  __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2Ev($hi);
  $395 = $144;
  $396 = (($395) + 48|0);
  $95 = $396;
  $397 = $95;
  $398 = HEAP32[$397>>2]|0;
  $93 = $397;
  $94 = $398;
  $399 = $94;
  __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2ESH_($156,$399);
  ;HEAP32[$hi+0>>2]=HEAP32[$156+0>>2]|0;
  while(1) {
   $400 = $144;
   $401 = (($400) + 48|0);
   $99 = $401;
   $402 = $99;
   $403 = (($402) + 4|0);
   $404 = HEAP32[$403>>2]|0;
   $97 = $402;
   $98 = $404;
   $405 = $98;
   __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2ESH_($157,$405);
   $104 = $hi;
   $105 = $157;
   $406 = $104;
   $407 = $105;
   $102 = $406;
   $103 = $407;
   $408 = $102;
   $101 = $408;
   $409 = $101;
   $410 = HEAP32[$409>>2]|0;
   $411 = $103;
   $100 = $411;
   $412 = $100;
   $413 = HEAP32[$412>>2]|0;
   $414 = ($410|0)==($413|0);
   $415 = $414 ^ 1;
   if (!($415)) {
    break;
   }
   $106 = $hi;
   $416 = $106;
   $417 = HEAP32[$416>>2]|0;
   $418 = (__ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($417)|0);
   if (!($418)) {
    $419 = $144;
    $420 = (__ZN3vcg3tri14HasHVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($419)|0);
    if ($420) {
     $421 = $146;
     $109 = $hi;
     $422 = $109;
     $423 = HEAP32[$422>>2]|0;
     $424 = (__ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE3HVpEv($423)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($421,$424);
    }
   }
   $118 = $hi;
   $425 = $118;
   $426 = HEAP32[$425>>2]|0;
   $427 = (($426) + 1|0);
   HEAP32[$425>>2] = $427;
  }
 }
 $428 = $144;
 $119 = $428;
 $429 = $119;
 $430 = (($429) + 4|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = HEAP32[$429>>2]|0;
 $433 = $431;
 $434 = $432;
 $435 = (($433) - ($434))|0;
 $436 = (($435|0) / 36)&-1;
 $437 = $145;
 $438 = (($436) - ($437))|0;
 $siz = $438;
 $439 = $144;
 $126 = $439;
 $440 = $126;
 $441 = HEAP32[$440>>2]|0;
 $124 = $440;
 $125 = $441;
 $442 = $125;
 $122 = $158;
 $123 = $442;
 $443 = $122;
 $444 = $123;
 $120 = $443;
 $121 = $444;
 $445 = $120;
 $446 = $121;
 HEAP32[$445>>2] = $446;
 ;HEAP32[$last+0>>2]=HEAP32[$158+0>>2]|0;
 $447 = $siz;
 $132 = $last;
 $133 = $447;
 $448 = $132;
 $449 = $133;
 ;HEAP8[$131+0>>0]=HEAP8[$134+0>>0]|0;
 $129 = $448;
 $130 = $449;
 $450 = $129;
 $451 = $130;
 $127 = $450;
 $128 = $451;
 $452 = $127;
 $453 = $128;
 $454 = HEAP32[$452>>2]|0;
 $455 = (($454) + (($453*36)|0)|0);
 HEAP32[$452>>2] = $455;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$last+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = (($19) + 4|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$19>>2] = 0;
 $23 = (($19) + 16|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 4)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(423,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 } else {
  $13 = $24;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 36)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + (($39*36)|0)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 36)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -36|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(428,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE10NeedUpdateEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = (($3) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if ($10) {
   $11 = (($3) + 28|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&1;
   if ($13) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = (($3) + 16|0);
  $0 = $14;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($15) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $$expand_i1_val2 = 0;
   $1 = $$expand_i1_val2;
   $$pre_trunc = $1;
   $20 = $$pre_trunc&1;
   STACKTOP = sp;return ($20|0);
  }
 }
 $$expand_i1_val = 1;
 $1 = $$expand_i1_val;
 $$pre_trunc = $1;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 12|0);
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 ___assert_fail((1792|0),(1640|0),174,(2344|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($this,$vp) {
 $this = $this|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $vp;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)>($14>>>0);
  if (!($15)) {
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($5) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17>>>0)>=($19>>>0);
   if (!($20)) {
    ___assert_fail((2040|0),(2056|0),133,(2104|0));
    // unreachable;
   }
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22>>>0)<($24>>>0);
   if (!($25)) {
    ___assert_fail((2112|0),(2056|0),134,(2104|0));
    // unreachable;
   }
   $26 = HEAP32[$5>>2]|0;
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($5) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $28;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($33|0) / 36)&-1;
   $35 = (($26) + (($34*36)|0)|0);
   $36 = $4;
   HEAP32[$36>>2] = $35;
   $37 = (($5) + 16|0);
   $2 = $37;
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($38) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    STACKTOP = sp;return;
   }
   $43 = HEAP32[$5>>2]|0;
   $44 = (($5) + 16|0);
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$5>>2]|0;
   $48 = $46;
   $49 = $47;
   $50 = (($48) - ($49))|0;
   $51 = (($50|0) / 36)&-1;
   $0 = $44;
   $1 = $51;
   $52 = $0;
   $53 = $1;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($43) + (($56*36)|0)|0);
   $58 = $4;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14HasEVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEVAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $j;
 ___assert_fail((1632|0),(1888|0),46,(1808|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri14HasHVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE14HasHVAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE3HVpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((1632|0),(1816|0),160,(2336|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE14HasHVAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__111__wrap_iterIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEVAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 92|0;
 $__v = sp + 52|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 36)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 36)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 36)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 36)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC1EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(429,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(430,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(431,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 36)&-1;
 $35 = (($22) + (($34*36)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*36)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 36)&-1;
 $52 = (($43) + (($51*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC1ERKS4_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   dest=$17+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN8MyVertexC1Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 36|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC1EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC2EjjS4_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   dest=$19+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN8MyVertexC1Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 36|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 92|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -36|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -36|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZN8MyVertexC1ERKS_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -36|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 36)&-1;
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -36|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 36)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 36)&-1;
 $51 = (($42) + (($50*36)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 36)&-1;
 $67 = (($54) + (($66*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 36)&-1;
 $55 = (($42) + (($54*36)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC1ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN8MyVertexC2ERKS_($3,$4);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2ERKS9_($3,$4);
 $5 = (($3) + 32|0);
 $6 = $2;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2ERKS8_($3,$4);
 $5 = (($3) + 28|0);
 $6 = $2;
 $7 = (($6) + 28|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2ERKS7_($3,$4);
 $5 = (($3) + 24|0);
 $6 = $2;
 $7 = (($6) + 24|0);
 __ZN3vcg6Color4IhEC1ERKS1_($5,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC1ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Color4IhEC2ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point4IhEC2ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IhEC2ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 HEAP8[$2>>0] = $4;
 $5 = $1;
 $6 = (($5) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($2) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $1;
 $10 = (($9) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($2) + 2|0);
 HEAP8[$12>>0] = $11;
 $13 = $1;
 $14 = (($13) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($2) + 3|0);
 HEAP8[$16>>0] = $15;
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2ERKS6_($3,$4);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 __ZN3vcg6Point3IfEC1ERKS1_($5,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2ERKS6_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS5_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS5_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS7_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point3IfEC1ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8MyVertexC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2Ev($1);
 $2 = (($1) + 32|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2Ev($1);
 $2 = (($1) + 28|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2Ev($1);
 $2 = (($1) + 24|0);
 __ZN3vcg6Color4IhEC1ENS1_13ColorConstantE($2,-1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC1ENS1_13ColorConstantE($this,$cc) {
 $this = $this|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cc;
 $2 = $0;
 $3 = $1;
 __ZN3vcg6Color4IhEC2ENS1_13ColorConstantE($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2ENS1_13ColorConstantE($this,$cc) {
 $this = $this|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cc;
 $2 = $0;
 __ZN3vcg6Point4IhEC2Ev($2);
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2Ev($1);
 $2 = (($1) + 12|0);
 __ZN3vcg6Point3IfEC1Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC1Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 119304647;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = ($75*36)|0;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + (($85*36)|0)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + (($90*36)|0)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC1ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 64|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 48|0;
 $30 = sp + 100|0;
 $31 = sp + 52|0;
 $34 = $this;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = (($35) + 12|0);
 HEAP32[$38>>2] = 0;
 $39 = (($35) + 16|0);
 $33 = $39;
 $40 = $33;
 $32 = $40;
 $41 = $32;
 $28 = $41;
 $42 = $28;
 $27 = $42;
 $2 = $4;
 $3 = -1;
 $43 = $2;
 $44 = $3;
 $0 = $43;
 $1 = $44;
 $45 = $0;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $46;
 $5 = $29;
 HEAP32[$42>>2] = 0;
 $47 = (($42) + 4|0);
 $8 = $10;
 $9 = -1;
 $48 = $8;
 $49 = $9;
 $6 = $48;
 $7 = $49;
 $50 = $6;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $51;
 $11 = $30;
 HEAP32[$47>>2] = 0;
 $52 = (($42) + 8|0);
 $14 = $16;
 $15 = -1;
 $53 = $14;
 $54 = $15;
 $12 = $53;
 $13 = $54;
 $55 = $12;
 HEAP32[$55>>2] = 0;
 $56 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $56;
 $17 = $31;
 $25 = $52;
 $26 = 0;
 $57 = $25;
 $58 = $26;
 $23 = $57;
 HEAP32[$24>>2] = $58;
 $59 = $23;
 $22 = $24;
 $60 = $22;
 $61 = HEAP32[$60>>2]|0;
 $20 = $59;
 HEAP32[$21>>2] = $61;
 $62 = $20;
 $19 = $62;
 $18 = $21;
 $63 = $18;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = (($35) + 28|0);
 HEAP8[$65>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $__na = 0, $__np = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp;
 $19 = sp + 140|0;
 $33 = $this;
 $34 = $33;
 $35 = HEAP32[$__p>>2]|0;
 $__np = $35;
 $36 = $__np;
 $31 = $agg$result;
 $32 = $36;
 $37 = $31;
 $38 = $32;
 $29 = $37;
 $30 = $38;
 $39 = $29;
 $40 = $30;
 HEAP32[$39>>2] = $40;
 $21 = $agg$result;
 $41 = $21;
 $42 = HEAP32[$41>>2]|0;
 $43 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($42)|0);
 HEAP32[$41>>2] = $43;
 $20 = $34;
 $44 = $20;
 $45 = HEAP32[$44>>2]|0;
 $46 = $__np;
 $47 = ($45|0)==($46|0);
 if ($47) {
  $48 = HEAP32[$agg$result>>2]|0;
  $13 = $34;
  $49 = $13;
  HEAP32[$49>>2] = $48;
 }
 $10 = $34;
 $50 = $10;
 $51 = (($50) + 8|0);
 $9 = $51;
 $52 = $9;
 $8 = $52;
 $53 = $8;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + -1)|0;
 HEAP32[$53>>2] = $55;
 $2 = $34;
 $56 = $2;
 $57 = (($56) + 4|0);
 $1 = $57;
 $58 = $1;
 $0 = $58;
 $59 = $0;
 $__na = $59;
 $7 = $34;
 $60 = $7;
 $61 = (($60) + 4|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $4 = $63;
 $64 = $4;
 $3 = $64;
 $65 = $3;
 $66 = HEAP32[$65>>2]|0;
 $67 = $__np;
 __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($66,$67);
 $68 = $__na;
 $11 = $__p;
 $69 = $11;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 16|0);
 $12 = $71;
 $72 = $12;
 $17 = $68;
 $18 = $72;
 $73 = $17;
 $74 = $18;
 ;HEAP8[$16+0>>0]=HEAP8[$19+0>>0]|0;
 $14 = $73;
 $15 = $74;
 $75 = $15;
 __ZN3vcg18PointerToAttributeD1Ev($75);
 $76 = $__na;
 $77 = $__np;
 $26 = $76;
 $27 = $77;
 $28 = 1;
 $78 = $26;
 $79 = $27;
 $80 = $28;
 $23 = $78;
 $24 = $79;
 $25 = $80;
 $81 = $24;
 $22 = $81;
 $82 = $22;
 __ZdlPv($82);
 STACKTOP = sp;return;
}
function __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__z) {
 $__root = $__root|0;
 $__z = $__z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__removed_black = 0, $__w = 0, $__x = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $13 = sp + 48|0;
 $19 = sp + 72|0;
 $25 = sp + 96|0;
 $32 = sp + 124|0;
 $37 = sp + 144|0;
 $43 = sp + 168|0;
 $50 = sp + 400|0;
 $57 = sp + 224|0;
 $63 = sp + 248|0;
 $69 = sp + 272|0;
 $76 = sp + 300|0;
 $82 = sp + 324|0;
 $88 = sp + 348|0;
 $93 = sp + 372|0;
 $94 = sp + 376|0;
 $95 = sp + 384|0;
 $96 = sp + 4|0;
 $97 = sp + 20|0;
 $98 = sp + 192|0;
 $99 = sp + 196|0;
 $100 = sp + 404|0;
 $101 = sp + 204|0;
 $102 = sp + 412|0;
 $103 = sp + 28|0;
 $104 = sp + 208|0;
 $105 = sp + 428|0;
 $106 = sp + 388|0;
 $89 = $__root;
 $90 = $__z;
 $107 = $90;
 $108 = HEAP32[$107>>2]|0;
 $86 = $88;
 $87 = -1;
 $109 = $86;
 $110 = $87;
 $84 = $109;
 $85 = $110;
 $111 = $84;
 HEAP32[$111>>2] = 0;
 $112 = HEAP32[$88>>2]|0;
 HEAP32[$93>>2] = $112;
 $83 = $93;
 $113 = ($108|0)==(0|0);
 if ($113) {
  label = 7;
 } else {
  $114 = $90;
  $115 = (($114) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $80 = $82;
  $81 = -1;
  $117 = $80;
  $118 = $81;
  $78 = $117;
  $79 = $118;
  $119 = $78;
  HEAP32[$119>>2] = 0;
  $120 = HEAP32[$82>>2]|0;
  HEAP32[$94>>2] = $120;
  $58 = $94;
  $121 = ($116|0)==(0|0);
  if ($121) {
   label = 7;
  } else {
   $123 = $90;
   $124 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($123)|0);
   $125 = $124;
  }
 }
 if ((label|0) == 7) {
  $122 = $90;
  $125 = $122;
 }
 $__y = $125;
 $126 = $__y;
 $127 = HEAP32[$126>>2]|0;
 $55 = $57;
 $56 = -1;
 $128 = $55;
 $129 = $56;
 $53 = $128;
 $54 = $129;
 $130 = $53;
 HEAP32[$130>>2] = 0;
 $131 = HEAP32[$57>>2]|0;
 HEAP32[$95>>2] = $131;
 $52 = $95;
 $132 = ($127|0)!=(0|0);
 if ($132) {
  $133 = $__y;
  $134 = HEAP32[$133>>2]|0;
  $138 = $134;
 } else {
  $135 = $__y;
  $136 = (($135) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137;
 }
 $__x = $138;
 $30 = $32;
 $31 = -1;
 $139 = $30;
 $140 = $31;
 $28 = $139;
 $29 = $140;
 $141 = $28;
 HEAP32[$141>>2] = 0;
 $142 = HEAP32[$32>>2]|0;
 HEAP32[$96>>2] = $142;
 $0 = $96;
 $__w = 0;
 $143 = $__x;
 $3 = $5;
 $4 = -1;
 $144 = $3;
 $145 = $4;
 $1 = $144;
 $2 = $145;
 $146 = $1;
 HEAP32[$146>>2] = 0;
 $147 = HEAP32[$5>>2]|0;
 HEAP32[$97>>2] = $147;
 $6 = $97;
 $148 = ($143|0)!=(0|0);
 if ($148) {
  $149 = $__y;
  $150 = (($149) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $__x;
  $153 = (($152) + 8|0);
  HEAP32[$153>>2] = $151;
 }
 $154 = $__y;
 $7 = $154;
 $155 = $7;
 $156 = $7;
 $157 = (($156) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$158>>2]|0;
 $160 = ($155|0)==($159|0);
 if ($160) {
  $161 = $__x;
  $162 = $__y;
  $163 = (($162) + 8|0);
  $164 = HEAP32[$163>>2]|0;
  HEAP32[$164>>2] = $161;
  $165 = $__y;
  $166 = $89;
  $167 = ($165|0)!=($166|0);
  if ($167) {
   $168 = $__y;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $__w = $172;
  } else {
   $173 = $__x;
   $89 = $173;
  }
 } else {
  $174 = $__x;
  $175 = $__y;
  $176 = (($175) + 8|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + 4|0);
  HEAP32[$178>>2] = $174;
  $179 = $__y;
  $180 = (($179) + 8|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = HEAP32[$181>>2]|0;
  $__w = $182;
 }
 $183 = $__y;
 $184 = (($183) + 12|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&1;
 $187 = $186&1;
 $__removed_black = $187;
 $188 = $__y;
 $189 = $90;
 $190 = ($188|0)!=($189|0);
 if ($190) {
  $191 = $90;
  $192 = (($191) + 8|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $__y;
  $195 = (($194) + 8|0);
  HEAP32[$195>>2] = $193;
  $196 = $90;
  $8 = $196;
  $197 = $8;
  $198 = $8;
  $199 = (($198) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = HEAP32[$200>>2]|0;
  $202 = ($197|0)==($201|0);
  if ($202) {
   $203 = $__y;
   $204 = $__y;
   $205 = (($204) + 8|0);
   $206 = HEAP32[$205>>2]|0;
   HEAP32[$206>>2] = $203;
  } else {
   $207 = $__y;
   $208 = $__y;
   $209 = (($208) + 8|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + 4|0);
   HEAP32[$211>>2] = $207;
  }
  $212 = $90;
  $213 = HEAP32[$212>>2]|0;
  $214 = $__y;
  HEAP32[$214>>2] = $213;
  $215 = $__y;
  $216 = $__y;
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + 8|0);
  HEAP32[$218>>2] = $215;
  $219 = $90;
  $220 = (($219) + 4|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $__y;
  $223 = (($222) + 4|0);
  HEAP32[$223>>2] = $221;
  $224 = $__y;
  $225 = (($224) + 4|0);
  $226 = HEAP32[$225>>2]|0;
  $11 = $13;
  $12 = -1;
  $227 = $11;
  $228 = $12;
  $9 = $227;
  $10 = $228;
  $229 = $9;
  HEAP32[$229>>2] = 0;
  $230 = HEAP32[$13>>2]|0;
  HEAP32[$98>>2] = $230;
  $14 = $98;
  $231 = ($226|0)!=(0|0);
  if ($231) {
   $232 = $__y;
   $233 = $__y;
   $234 = (($233) + 4|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (($235) + 8|0);
   HEAP32[$236>>2] = $232;
  }
  $237 = $90;
  $238 = (($237) + 12|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&1;
  $241 = $__y;
  $242 = (($241) + 12|0);
  $243 = $240&1;
  HEAP8[$242>>0] = $243;
  $244 = $89;
  $245 = $90;
  $246 = ($244|0)==($245|0);
  if ($246) {
   $247 = $__y;
   $89 = $247;
  }
 }
 $248 = $__removed_black;
 $249 = $248&1;
 if (!($249)) {
  STACKTOP = sp;return;
 }
 $250 = $89;
 $17 = $19;
 $18 = -1;
 $251 = $17;
 $252 = $18;
 $15 = $251;
 $16 = $252;
 $253 = $15;
 HEAP32[$253>>2] = 0;
 $254 = HEAP32[$19>>2]|0;
 HEAP32[$99>>2] = $254;
 $20 = $99;
 $255 = ($250|0)!=(0|0);
 if (!($255)) {
  STACKTOP = sp;return;
 }
 $256 = $__x;
 $23 = $25;
 $24 = -1;
 $257 = $23;
 $258 = $24;
 $21 = $257;
 $22 = $258;
 $259 = $21;
 HEAP32[$259>>2] = 0;
 $260 = HEAP32[$25>>2]|0;
 HEAP32[$100>>2] = $260;
 $26 = $100;
 $261 = ($256|0)!=(0|0);
 if ($261) {
  $262 = $__x;
  $263 = (($262) + 12|0);
  HEAP8[$263>>0] = 1;
 } else {
  while(1) {
   $264 = $__w;
   $27 = $264;
   $265 = $27;
   $266 = $27;
   $267 = (($266) + 8|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = HEAP32[$268>>2]|0;
   $270 = ($265|0)==($269|0);
   if ($270) {
    $393 = $__w;
    $394 = (($393) + 12|0);
    $395 = HEAP8[$394>>0]|0;
    $396 = $395&1;
    if (!($396)) {
     $397 = $__w;
     $398 = (($397) + 12|0);
     HEAP8[$398>>0] = 1;
     $399 = $__w;
     $400 = (($399) + 8|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (($401) + 12|0);
     HEAP8[$402>>0] = 0;
     $403 = $__w;
     $404 = (($403) + 8|0);
     $405 = HEAP32[$404>>2]|0;
     __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($405);
     $406 = $89;
     $407 = $__w;
     $408 = (($407) + 4|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = ($406|0)==($409|0);
     if ($410) {
      $411 = $__w;
      $89 = $411;
     }
     $412 = $__w;
     $413 = (($412) + 4|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = HEAP32[$414>>2]|0;
     $__w = $415;
    }
    $416 = $__w;
    $417 = HEAP32[$416>>2]|0;
    $61 = $63;
    $62 = -1;
    $418 = $61;
    $419 = $62;
    $59 = $418;
    $60 = $419;
    $420 = $59;
    HEAP32[$420>>2] = 0;
    $421 = HEAP32[$63>>2]|0;
    HEAP32[$104>>2] = $421;
    $64 = $104;
    $422 = ($417|0)==(0|0);
    if (!($422)) {
     $423 = $__w;
     $424 = HEAP32[$423>>2]|0;
     $425 = (($424) + 12|0);
     $426 = HEAP8[$425>>0]|0;
     $427 = $426&1;
     if (!($427)) {
      label = 93;
      break;
     }
    }
    $428 = $__w;
    $429 = (($428) + 4|0);
    $430 = HEAP32[$429>>2]|0;
    $67 = $69;
    $68 = -1;
    $431 = $67;
    $432 = $68;
    $65 = $431;
    $66 = $432;
    $433 = $65;
    HEAP32[$433>>2] = 0;
    $434 = HEAP32[$69>>2]|0;
    HEAP32[$105>>2] = $434;
    $70 = $105;
    $435 = ($430|0)==(0|0);
    if (!($435)) {
     $436 = $__w;
     $437 = (($436) + 4|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = (($438) + 12|0);
     $440 = HEAP8[$439>>0]|0;
     $441 = $440&1;
     if (!($441)) {
      label = 93;
      break;
     }
    }
    $442 = $__w;
    $443 = (($442) + 12|0);
    HEAP8[$443>>0] = 0;
    $444 = $__w;
    $445 = (($444) + 8|0);
    $446 = HEAP32[$445>>2]|0;
    $__x = $446;
    $447 = $__x;
    $448 = (($447) + 12|0);
    $449 = HEAP8[$448>>0]|0;
    $450 = $449&1;
    if (!($450)) {
     label = 88;
     break;
    }
    $451 = $__x;
    $452 = $89;
    $453 = ($451|0)==($452|0);
    if ($453) {
     label = 88;
     break;
    }
    $456 = $__x;
    $71 = $456;
    $457 = $71;
    $458 = $71;
    $459 = (($458) + 8|0);
    $460 = HEAP32[$459>>2]|0;
    $461 = HEAP32[$460>>2]|0;
    $462 = ($457|0)==($461|0);
    if ($462) {
     $463 = $__x;
     $464 = (($463) + 8|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = (($465) + 4|0);
     $467 = HEAP32[$466>>2]|0;
     $472 = $467;
    } else {
     $468 = $__x;
     $469 = (($468) + 8|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = HEAP32[$470>>2]|0;
     $472 = $471;
    }
    $__w = $472;
   } else {
    $271 = $__w;
    $272 = (($271) + 12|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&1;
    if (!($274)) {
     $275 = $__w;
     $276 = (($275) + 12|0);
     HEAP8[$276>>0] = 1;
     $277 = $__w;
     $278 = (($277) + 8|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + 12|0);
     HEAP8[$280>>0] = 0;
     $281 = $__w;
     $282 = (($281) + 8|0);
     $283 = HEAP32[$282>>2]|0;
     __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($283);
     $284 = $89;
     $285 = $__w;
     $286 = HEAP32[$285>>2]|0;
     $287 = ($284|0)==($286|0);
     if ($287) {
      $288 = $__w;
      $89 = $288;
     }
     $289 = $__w;
     $290 = HEAP32[$289>>2]|0;
     $291 = (($290) + 4|0);
     $292 = HEAP32[$291>>2]|0;
     $__w = $292;
    }
    $293 = $__w;
    $294 = HEAP32[$293>>2]|0;
    $35 = $37;
    $36 = -1;
    $295 = $35;
    $296 = $36;
    $33 = $295;
    $34 = $296;
    $297 = $33;
    HEAP32[$297>>2] = 0;
    $298 = HEAP32[$37>>2]|0;
    HEAP32[$101>>2] = $298;
    $38 = $101;
    $299 = ($294|0)==(0|0);
    if (!($299)) {
     $300 = $__w;
     $301 = HEAP32[$300>>2]|0;
     $302 = (($301) + 12|0);
     $303 = HEAP8[$302>>0]|0;
     $304 = $303&1;
     if (!($304)) {
      label = 67;
      break;
     }
    }
    $305 = $__w;
    $306 = (($305) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $41 = $43;
    $42 = -1;
    $308 = $41;
    $309 = $42;
    $39 = $308;
    $40 = $309;
    $310 = $39;
    HEAP32[$310>>2] = 0;
    $311 = HEAP32[$43>>2]|0;
    HEAP32[$102>>2] = $311;
    $44 = $102;
    $312 = ($307|0)==(0|0);
    if (!($312)) {
     $313 = $__w;
     $314 = (($313) + 4|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = (($315) + 12|0);
     $317 = HEAP8[$316>>0]|0;
     $318 = $317&1;
     if (!($318)) {
      label = 67;
      break;
     }
    }
    $319 = $__w;
    $320 = (($319) + 12|0);
    HEAP8[$320>>0] = 0;
    $321 = $__w;
    $322 = (($321) + 8|0);
    $323 = HEAP32[$322>>2]|0;
    $__x = $323;
    $324 = $__x;
    $325 = $89;
    $326 = ($324|0)==($325|0);
    if ($326) {
     label = 62;
     break;
    }
    $327 = $__x;
    $328 = (($327) + 12|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = $329&1;
    if (!($330)) {
     label = 62;
     break;
    }
    $333 = $__x;
    $45 = $333;
    $334 = $45;
    $335 = $45;
    $336 = (($335) + 8|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = HEAP32[$337>>2]|0;
    $339 = ($334|0)==($338|0);
    if ($339) {
     $340 = $__x;
     $341 = (($340) + 8|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($342) + 4|0);
     $344 = HEAP32[$343>>2]|0;
     $349 = $344;
    } else {
     $345 = $__x;
     $346 = (($345) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = HEAP32[$347>>2]|0;
     $349 = $348;
    }
    $__w = $349;
   }
  }
  if ((label|0) == 62) {
   $331 = $__x;
   $332 = (($331) + 12|0);
   HEAP8[$332>>0] = 1;
  }
  else if ((label|0) == 67) {
   $350 = $__w;
   $351 = (($350) + 4|0);
   $352 = HEAP32[$351>>2]|0;
   $48 = $50;
   $49 = -1;
   $353 = $48;
   $354 = $49;
   $46 = $353;
   $47 = $354;
   $355 = $46;
   HEAP32[$355>>2] = 0;
   $356 = HEAP32[$50>>2]|0;
   HEAP32[$103>>2] = $356;
   $51 = $103;
   $357 = ($352|0)==(0|0);
   if ($357) {
    label = 71;
   } else {
    $358 = $__w;
    $359 = (($358) + 4|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($360) + 12|0);
    $362 = HEAP8[$361>>0]|0;
    $363 = $362&1;
    if ($363) {
     label = 71;
    }
   }
   if ((label|0) == 71) {
    $364 = $__w;
    $365 = HEAP32[$364>>2]|0;
    $366 = (($365) + 12|0);
    HEAP8[$366>>0] = 1;
    $367 = $__w;
    $368 = (($367) + 12|0);
    HEAP8[$368>>0] = 0;
    $369 = $__w;
    __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($369);
    $370 = $__w;
    $371 = (($370) + 8|0);
    $372 = HEAP32[$371>>2]|0;
    $__w = $372;
   }
   $373 = $__w;
   $374 = (($373) + 8|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (($375) + 12|0);
   $377 = HEAP8[$376>>0]|0;
   $378 = $377&1;
   $379 = $__w;
   $380 = (($379) + 12|0);
   $381 = $378&1;
   HEAP8[$380>>0] = $381;
   $382 = $__w;
   $383 = (($382) + 8|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = (($384) + 12|0);
   HEAP8[$385>>0] = 1;
   $386 = $__w;
   $387 = (($386) + 4|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = (($388) + 12|0);
   HEAP8[$389>>0] = 1;
   $390 = $__w;
   $391 = (($390) + 8|0);
   $392 = HEAP32[$391>>2]|0;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($392);
  }
  else if ((label|0) == 88) {
   $454 = $__x;
   $455 = (($454) + 12|0);
   HEAP8[$455>>0] = 1;
  }
  else if ((label|0) == 93) {
   $473 = $__w;
   $474 = HEAP32[$473>>2]|0;
   $74 = $76;
   $75 = -1;
   $475 = $74;
   $476 = $75;
   $72 = $475;
   $73 = $476;
   $477 = $72;
   HEAP32[$477>>2] = 0;
   $478 = HEAP32[$76>>2]|0;
   HEAP32[$106>>2] = $478;
   $77 = $106;
   $479 = ($474|0)==(0|0);
   if ($479) {
    label = 97;
   } else {
    $480 = $__w;
    $481 = HEAP32[$480>>2]|0;
    $482 = (($481) + 12|0);
    $483 = HEAP8[$482>>0]|0;
    $484 = $483&1;
    if ($484) {
     label = 97;
    }
   }
   if ((label|0) == 97) {
    $485 = $__w;
    $486 = (($485) + 4|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = (($487) + 12|0);
    HEAP8[$488>>0] = 1;
    $489 = $__w;
    $490 = (($489) + 12|0);
    HEAP8[$490>>0] = 0;
    $491 = $__w;
    __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($491);
    $492 = $__w;
    $493 = (($492) + 8|0);
    $494 = HEAP32[$493>>2]|0;
    $__w = $494;
   }
   $495 = $__w;
   $496 = (($495) + 8|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = (($497) + 12|0);
   $499 = HEAP8[$498>>0]|0;
   $500 = $499&1;
   $501 = $__w;
   $502 = (($501) + 12|0);
   $503 = $500&1;
   HEAP8[$502>>0] = $503;
   $504 = $__w;
   $505 = (($504) + 8|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = (($506) + 12|0);
   HEAP8[$507>>0] = 1;
   $508 = $__w;
   $509 = HEAP32[$508>>2]|0;
   $510 = (($509) + 12|0);
   HEAP8[$510>>0] = 1;
   $511 = $__w;
   $512 = (($511) + 8|0);
   $513 = HEAP32[$512>>2]|0;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($513);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 44|0;
 $10 = sp + 28|0;
 $7 = $__x;
 $11 = $7;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $__y = $13;
 $14 = $__y;
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $7;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $4 = $6;
 $5 = -1;
 $21 = $4;
 $22 = $5;
 $2 = $21;
 $3 = $22;
 $23 = $2;
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = $24;
 $0 = $10;
 $25 = ($20|0)!=(0|0);
 if ($25) {
  $26 = $7;
  $27 = $7;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  HEAP32[$30>>2] = $26;
 }
 $31 = $7;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $__y;
 $35 = (($34) + 8|0);
 HEAP32[$35>>2] = $33;
 $36 = $7;
 $1 = $36;
 $37 = $1;
 $38 = $1;
 $39 = (($38) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($37|0)==($41|0);
 if ($42) {
  $43 = $__y;
  $44 = $7;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$46>>2] = $43;
  $52 = $7;
  $53 = $__y;
  HEAP32[$53>>2] = $52;
  $54 = $__y;
  $55 = $7;
  $56 = (($55) + 8|0);
  HEAP32[$56>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $47 = $__y;
  $48 = $7;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $47;
  $52 = $7;
  $53 = $__y;
  HEAP32[$53>>2] = $52;
  $54 = $__y;
  $55 = $7;
  $56 = (($55) + 8|0);
  HEAP32[$56>>2] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 44|0;
 $10 = sp + 28|0;
 $7 = $__x;
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $__y = $12;
 $13 = $__y;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 HEAP32[$16>>2] = $15;
 $17 = $7;
 $18 = HEAP32[$17>>2]|0;
 $4 = $6;
 $5 = -1;
 $19 = $4;
 $20 = $5;
 $2 = $19;
 $3 = $20;
 $21 = $2;
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = $22;
 $0 = $10;
 $23 = ($18|0)!=(0|0);
 if ($23) {
  $24 = $7;
  $25 = $7;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8|0);
  HEAP32[$27>>2] = $24;
 }
 $28 = $7;
 $29 = (($28) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $__y;
 $32 = (($31) + 8|0);
 HEAP32[$32>>2] = $30;
 $33 = $7;
 $1 = $33;
 $34 = $1;
 $35 = $1;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($34|0)==($38|0);
 if ($39) {
  $40 = $__y;
  $41 = $7;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$43>>2] = $40;
  $49 = $7;
  $50 = $__y;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $__y;
  $53 = $7;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  STACKTOP = sp;return;
 } else {
  $44 = $__y;
  $45 = $7;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $44;
  $49 = $7;
  $50 = $__y;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $__y;
  $53 = $7;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  STACKTOP = sp;return;
 }
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 36|0);
 $5 = (($4) + ($3)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 2)|0;
 $5 = (($4|0) % 3)&-1;
 STACKTOP = sp;return ($5|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (($4|0) % 3)&-1;
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($f,$j) {
 $f = $f|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $j;
 $2 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 if ($2) {
  $3 = $0;
  $4 = $1;
  $5 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($3,$4)|0);
  $6 = $0;
  $7 = ($5|0)==($6|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((1632|0),(2640|0),60,(2696|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg4face10IsManifoldI6MyFaceEEbRKT_i($f,$j) {
 $f = $f|0;
 $j = $j|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $j;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($3,$4)|0);
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2712|0),(2640|0),42,(2728|0));
  // unreachable;
 }
 $7 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 if (!($7)) {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $24 = $$pre_trunc&1;
  STACKTOP = sp;return ($24|0);
 }
 $8 = $1;
 $9 = $2;
 $10 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($8,$9)|0);
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $23 = 1;
 } else {
  $13 = $1;
  $14 = $1;
  $15 = $2;
  $16 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($14,$15)|0);
  $17 = $1;
  $18 = $2;
  $19 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFiEi($17,$18)|0);
  $20 = $19 << 24 >> 24;
  $21 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($16,$20)|0);
  $22 = ($13|0)==($21|0);
  $23 = $22;
 }
 $$expand_i1_val = $23&1;
 $0 = $$expand_i1_val;
 $$pre_trunc = $0;
 $24 = $$pre_trunc&1;
 STACKTOP = sp;return ($24|0);
}
function __ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFiEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 36|0);
 $5 = (($4) + ($3)|0);
 $6 = HEAP8[$5>>0]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEPKS3_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp;
 $10 = $this;
 $11 = $v;
 $13 = $10;
 $14 = (($13) + 8|0);
 $15 = $11;
 $16 = (($13) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $9 = $17;
 $18 = $9;
 $19 = HEAP32[$18>>2]|0;
 $7 = $18;
 $8 = $19;
 $20 = $8;
 $5 = $12;
 $6 = $20;
 $21 = $5;
 $22 = $6;
 $3 = $21;
 $4 = $22;
 $23 = $3;
 $24 = $4;
 HEAP32[$23>>2] = $24;
 $0 = $12;
 $25 = $0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $15;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = (($29|0) / 44)&-1;
 $1 = $14;
 $2 = $30;
 $31 = $1;
 $32 = $2;
 $33 = HEAP32[$31>>2]|0;
 $34 = (($33) + ($32<<4)|0);
 STACKTOP = sp;return ($34|0);
}
function __ZN3vcg4face3PosI6MyFaceE1VEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg4face3PosI6MyFaceE5VFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($2) + 4|0);
 $6 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($4,$5)|0);
 $7 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($3,$6)|0);
 $8 = (($2) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)!=($9|0);
 if (!($10)) {
  ___assert_fail((2744|0),(2384|0),219,(2808|0));
  // unreachable;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($2) + 4|0);
 $14 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($12,$13)|0);
 $15 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($11,$14)|0);
 $16 = (($2) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==($17|0);
 if (!($18)) {
  $19 = HEAP32[$2>>2]|0;
  $20 = (($2) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($19,$21)|0);
  $23 = (($2) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)==($24|0);
  if (!($25)) {
   ___assert_fail((2744|0),(2384|0),219,(2808|0));
   // unreachable;
  }
 }
 $26 = HEAP32[$2>>2]|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = (($2) + 4|0);
 $29 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($27,$28)|0);
 $30 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($26,$29)|0);
 $31 = (($2) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$2>>2]|0;
  $35 = (($2) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($34,$36)|0);
  $0 = $37;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $38 = HEAP32[$2>>2]|0;
  $39 = HEAP32[$2>>2]|0;
  $40 = (($2) + 4|0);
  $41 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($39,$40)|0);
  $42 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($38,$41)|0);
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return 0|0;
}
function __ZN3vcg4face3PosI6MyFaceEC2EPS2_i($this,$fp,$zp) {
 $this = $this|0;
 $fp = $fp|0;
 $zp = $zp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fp;
 $2 = $zp;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$3>>2]|0;
 $8 = $2;
 $9 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($7,$8)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + 8|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixERKNS1_11__wrap_iterIPS3_EE($this,$cont) {
 $this = $this|0;
 $cont = $cont|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 16|0;
 $11 = $this;
 $12 = $cont;
 $14 = $11;
 $15 = (($14) + 8|0);
 $16 = $12;
 $10 = $16;
 $17 = $10;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($14) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $6 = $20;
 $21 = $6;
 $22 = HEAP32[$21>>2]|0;
 $4 = $21;
 $5 = $22;
 $23 = $5;
 $2 = $13;
 $3 = $23;
 $24 = $2;
 $25 = $3;
 $0 = $24;
 $1 = $25;
 $26 = $0;
 $27 = $1;
 HEAP32[$26>>2] = $27;
 $7 = $13;
 $28 = $7;
 $29 = HEAP32[$28>>2]|0;
 $30 = $18;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32|0) / 44)&-1;
 $8 = $15;
 $9 = $33;
 $34 = $8;
 $35 = $9;
 $36 = HEAP32[$34>>2]|0;
 $37 = (($36) + ($35<<4)|0);
 STACKTOP = sp;return ($37|0);
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg18PointerToAttributeC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg18PointerToAttributeC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC1ERS6_($this,$_c) {
 $this = $this|0;
 $_c = $_c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_c;
 $2 = $0;
 $3 = $1;
 __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC2ERS6_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC1EPvRKi($this,$ah,$n) {
 $this = $this|0;
 $ah = $ah|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ah;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC2EPvRKi($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC2EPvRKi($this,$ah,$n) {
 $this = $this|0;
 $ah = $ah|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ah;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EC2EPvRKi($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EC2EPvRKi($this,$ah,$n) {
 $this = $this|0;
 $ah = $ah|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ah;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0;
 var $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i14 = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i8 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 16|0;
 $9 = sp + 800|0;
 $34 = sp + 24|0;
 $37 = sp + 801|0;
 $70 = sp + 64|0;
 $73 = sp + 802|0;
 $106 = sp + 480|0;
 $107 = sp + 56|0;
 $110 = sp + 496|0;
 $111 = sp + 504|0;
 $__t21$i$i$i = sp + 32|0;
 $114 = sp + 8|0;
 $117 = sp + 536|0;
 $__u1$i = sp + 40|0;
 $119 = sp + 48|0;
 $131 = sp;
 $134 = sp + 803|0;
 $168 = sp + 376|0;
 $__parent = sp + 760|0;
 $__inserted = sp + 804|0;
 $171 = sp + 768|0;
 $__h = sp + 396|0;
 $172 = sp + 384|0;
 $173 = sp + 612|0;
 $176 = sp + 776|0;
 $169 = $this;
 $170 = $__v;
 $177 = $169;
 $178 = $170;
 $179 = (__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($177,$__parent,$178)|0);
 $__child = $179;
 $180 = $__child;
 $181 = HEAP32[$180>>2]|0;
 $__r = $181;
 HEAP8[$__inserted>>0] = 0;
 $182 = $__child;
 $183 = HEAP32[$182>>2]|0;
 $166 = $168;
 $167 = -1;
 $184 = $166;
 $185 = $167;
 $164 = $184;
 $165 = $185;
 $186 = $164;
 HEAP32[$186>>2] = 0;
 $187 = HEAP32[$168>>2]|0;
 HEAP32[$171>>2] = $187;
 $163 = $171;
 $188 = ($183|0)==(0|0);
 if (!($188)) {
  $361 = $__r;
  $155 = $176;
  $156 = $361;
  $362 = $155;
  $363 = $156;
  $153 = $362;
  $154 = $363;
  $364 = $153;
  $365 = $154;
  HEAP32[$364>>2] = $365;
  $160 = $agg$result;
  $161 = $176;
  $162 = $__inserted;
  $366 = $160;
  $367 = $162;
  $368 = $161;
  $157 = $366;
  $158 = $368;
  $159 = $367;
  $369 = $157;
  $370 = $158;
  ;HEAP32[$369+0>>2]=HEAP32[$370+0>>2]|0;
  $371 = (($369) + 4|0);
  $372 = $159;
  $373 = HEAP8[$372>>0]|0;
  $374 = $373&1;
  $375 = $374&1;
  HEAP8[$371>>0] = $375;
  STACKTOP = sp;return;
 }
 $189 = $170;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($173,$177,$189);
 $124 = $173;
 $190 = $124;
 $122 = $172;
 $123 = $190;
 $191 = $122;
 $192 = $123;
 $120 = $191;
 $121 = $192;
 $193 = $120;
 $194 = $121;
 HEAP32[$193>>2] = $194;
 ;HEAP8[$119+0>>0]=HEAP8[$172+0>>0]|0;HEAP8[$119+1>>0]=HEAP8[$172+1>>0]|0;HEAP8[$119+2>>0]=HEAP8[$172+2>>0]|0;HEAP8[$119+3>>0]=HEAP8[$172+3>>0]|0;
 $118 = $__h;
 $195 = $118;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$119+3>>0]|0;
 $116 = $195;
 $196 = $116;
 $115 = $__u1$i;
 $197 = $115;
 $198 = HEAP32[$197>>2]|0;
 $96 = $198;
 $199 = $96;
 $95 = $199;
 $200 = $95;
 $94 = $200;
 $201 = $94;
 $202 = HEAP32[$201>>2]|0;
 $__t$i$i$i = $202;
 $93 = $199;
 $203 = $93;
 $92 = $203;
 $204 = $92;
 HEAP32[$204>>2] = 0;
 $205 = $__t$i$i$i;
 $97 = $__u1$i;
 $206 = $97;
 $207 = HEAP32[$206>>2]|0;
 $100 = $207;
 $208 = $100;
 $99 = $208;
 $209 = $99;
 $98 = $209;
 $210 = $98;
 $211 = (($210) + 4|0);
 $101 = $211;
 $212 = $101;
 ;HEAP32[$117+0>>2]=HEAP32[$212+0>>2]|0;HEAP32[$117+4>>2]=HEAP32[$212+4>>2]|0;
 ;HEAP8[$114+0>>0]=HEAP8[$117+0>>0]|0;HEAP8[$114+1>>0]=HEAP8[$117+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$117+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$117+3>>0]|0;HEAP8[$114+4>>0]=HEAP8[$117+4>>0]|0;HEAP8[$114+5>>0]=HEAP8[$117+5>>0]|0;HEAP8[$114+6>>0]=HEAP8[$117+6>>0]|0;HEAP8[$114+7>>0]=HEAP8[$117+7>>0]|0;
 $112 = $196;
 $113 = $205;
 $213 = $112;
 $214 = $113;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$114+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$114+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$114+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$114+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$114+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$114+7>>0]|0;
 $109 = $213;
 HEAP32[$110>>2] = $214;
 $215 = $109;
 $108 = $110;
 $216 = $108;
 $217 = HEAP32[$216>>2]|0;
 $102 = $__t21$i$i$i;
 $218 = $102;
 ;HEAP32[$111+0>>2]=HEAP32[$218+0>>2]|0;HEAP32[$111+4>>2]=HEAP32[$218+4>>2]|0;
 ;HEAP8[$107+0>>0]=HEAP8[$111+0>>0]|0;HEAP8[$107+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$111+3>>0]|0;HEAP8[$107+4>>0]=HEAP8[$111+4>>0]|0;HEAP8[$107+5>>0]=HEAP8[$111+5>>0]|0;HEAP8[$107+6>>0]=HEAP8[$111+6>>0]|0;HEAP8[$107+7>>0]=HEAP8[$111+7>>0]|0;
 $105 = $215;
 HEAP32[$106>>2] = $217;
 $219 = $105;
 $104 = $106;
 $220 = $104;
 $221 = HEAP32[$220>>2]|0;
 HEAP32[$219>>2] = $221;
 $222 = (($219) + 4|0);
 $103 = $107;
 $223 = $103;
 ;HEAP32[$222+0>>2]=HEAP32[$223+0>>2]|0;HEAP32[$222+4>>2]=HEAP32[$223+4>>2]|0;
 $91 = $173;
 $224 = $91;
 $90 = $224;
 $225 = $90;
 $88 = $225;
 $89 = 0;
 $226 = $88;
 $87 = $226;
 $227 = $87;
 $86 = $227;
 $228 = $86;
 $229 = HEAP32[$228>>2]|0;
 $__tmp$i$i$i2 = $229;
 $230 = $89;
 $67 = $226;
 $231 = $67;
 $66 = $231;
 $232 = $66;
 HEAP32[$232>>2] = $230;
 $233 = $__tmp$i$i$i2;
 $234 = ($233|0)!=(0|0);
 if ($234) {
  $65 = $226;
  $235 = $65;
  $64 = $235;
  $236 = $64;
  $237 = (($236) + 4|0);
  $238 = $__tmp$i$i$i2;
  $82 = $237;
  $83 = $238;
  $239 = $82;
  $240 = (($239) + 4|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $241&1;
  do {
   if ($242) {
    $243 = HEAP32[$239>>2]|0;
    $244 = $83;
    $245 = (($244) + 16|0);
    $81 = $245;
    $246 = $81;
    $71 = $243;
    $72 = $246;
    $247 = $71;
    $248 = $72;
    ;HEAP8[$70+0>>0]=HEAP8[$73+0>>0]|0;
    $68 = $247;
    $69 = $248;
    $249 = $69;
    __THREW__ = 0;
    invoke_vi(416,($249|0));
    $250 = __THREW__; __THREW__ = 0;
    $251 = $250&1;
    if ($251) {
     $252 = ___cxa_find_matching_catch()|0;
     $253 = tempRet0;
     $84 = $252;
     $85 = $253;
     $254 = $84;
     ___cxa_call_unexpected(($254|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $255 = $83;
  $256 = ($255|0)!=(0|0);
  if ($256) {
   $257 = HEAP32[$239>>2]|0;
   $258 = $83;
   $78 = $257;
   $79 = $258;
   $80 = 1;
   $259 = $78;
   $260 = $79;
   $261 = $80;
   $75 = $259;
   $76 = $260;
   $77 = $261;
   $262 = $76;
   $74 = $262;
   $263 = $74;
   __ZdlPv($263);
  }
 }
 $264 = HEAP32[$__parent>>2]|0;
 $265 = $__child;
 $63 = $__h;
 $266 = $63;
 $62 = $266;
 $267 = $62;
 $61 = $267;
 $268 = $61;
 $269 = HEAP32[$268>>2]|0;
 __THREW__ = 0;
 invoke_viiii(432,($177|0),($264|0),($265|0),($269|0));
 $270 = __THREW__; __THREW__ = 0;
 $271 = $270&1;
 if (!($271)) {
  $60 = $__h;
  $272 = $60;
  $59 = $272;
  $273 = $59;
  $58 = $273;
  $274 = $58;
  $275 = HEAP32[$274>>2]|0;
  $__t$i = $275;
  $57 = $272;
  $276 = $57;
  $56 = $276;
  $277 = $56;
  HEAP32[$277>>2] = 0;
  $278 = $__t$i;
  $__r = $278;
  HEAP8[$__inserted>>0] = 1;
  $55 = $__h;
  $279 = $55;
  $54 = $279;
  $280 = $54;
  $52 = $280;
  $53 = 0;
  $281 = $52;
  $51 = $281;
  $282 = $51;
  $50 = $282;
  $283 = $50;
  $284 = HEAP32[$283>>2]|0;
  $__tmp$i$i$i8 = $284;
  $285 = $53;
  $31 = $281;
  $286 = $31;
  $30 = $286;
  $287 = $30;
  HEAP32[$287>>2] = $285;
  $288 = $__tmp$i$i$i8;
  $289 = ($288|0)!=(0|0);
  if ($289) {
   $29 = $281;
   $290 = $29;
   $28 = $290;
   $291 = $28;
   $292 = (($291) + 4|0);
   $293 = $__tmp$i$i$i8;
   $46 = $292;
   $47 = $293;
   $294 = $46;
   $295 = (($294) + 4|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = $296&1;
   do {
    if ($297) {
     $298 = HEAP32[$294>>2]|0;
     $299 = $47;
     $300 = (($299) + 16|0);
     $45 = $300;
     $301 = $45;
     $35 = $298;
     $36 = $301;
     $302 = $35;
     $303 = $36;
     ;HEAP8[$34+0>>0]=HEAP8[$37+0>>0]|0;
     $32 = $302;
     $33 = $303;
     $304 = $33;
     __THREW__ = 0;
     invoke_vi(416,($304|0));
     $305 = __THREW__; __THREW__ = 0;
     $306 = $305&1;
     if ($306) {
      $307 = ___cxa_find_matching_catch()|0;
      $308 = tempRet0;
      $48 = $307;
      $49 = $308;
      $309 = $48;
      ___cxa_call_unexpected(($309|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $310 = $47;
   $311 = ($310|0)!=(0|0);
   if ($311) {
    $312 = HEAP32[$294>>2]|0;
    $313 = $47;
    $42 = $312;
    $43 = $313;
    $44 = 1;
    $314 = $42;
    $315 = $43;
    $316 = $44;
    $39 = $314;
    $40 = $315;
    $41 = $316;
    $317 = $40;
    $38 = $317;
    $318 = $38;
    __ZdlPv($318);
   }
  }
  $361 = $__r;
  $155 = $176;
  $156 = $361;
  $362 = $155;
  $363 = $156;
  $153 = $362;
  $154 = $363;
  $364 = $153;
  $365 = $154;
  HEAP32[$364>>2] = $365;
  $160 = $agg$result;
  $161 = $176;
  $162 = $__inserted;
  $366 = $160;
  $367 = $162;
  $368 = $161;
  $157 = $366;
  $158 = $368;
  $159 = $367;
  $369 = $157;
  $370 = $158;
  ;HEAP32[$369+0>>2]=HEAP32[$370+0>>2]|0;
  $371 = (($369) + 4|0);
  $372 = $159;
  $373 = HEAP8[$372>>0]|0;
  $374 = $373&1;
  $375 = $374&1;
  HEAP8[$371>>0] = $375;
  STACKTOP = sp;return;
 }
 $319 = ___cxa_find_matching_catch()|0;
 $320 = tempRet0;
 $174 = $319;
 $175 = $320;
 $152 = $__h;
 $321 = $152;
 $151 = $321;
 $322 = $151;
 $149 = $322;
 $150 = 0;
 $323 = $149;
 $148 = $323;
 $324 = $148;
 $147 = $324;
 $325 = $147;
 $326 = HEAP32[$325>>2]|0;
 $__tmp$i$i$i = $326;
 $327 = $150;
 $128 = $323;
 $328 = $128;
 $127 = $328;
 $329 = $127;
 HEAP32[$329>>2] = $327;
 $330 = $__tmp$i$i$i;
 $331 = ($330|0)!=(0|0);
 if ($331) {
  $126 = $323;
  $332 = $126;
  $125 = $332;
  $333 = $125;
  $334 = (($333) + 4|0);
  $335 = $__tmp$i$i$i;
  $143 = $334;
  $144 = $335;
  $336 = $143;
  $337 = (($336) + 4|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&1;
  do {
   if ($339) {
    $340 = HEAP32[$336>>2]|0;
    $341 = $144;
    $342 = (($341) + 16|0);
    $142 = $342;
    $343 = $142;
    $132 = $340;
    $133 = $343;
    $344 = $132;
    $345 = $133;
    ;HEAP8[$131+0>>0]=HEAP8[$134+0>>0]|0;
    $129 = $344;
    $130 = $345;
    $346 = $130;
    __THREW__ = 0;
    invoke_vi(416,($346|0));
    $347 = __THREW__; __THREW__ = 0;
    $348 = $347&1;
    if ($348) {
     $349 = ___cxa_find_matching_catch(0|0)|0;
     $350 = tempRet0;
     $145 = $349;
     $146 = $350;
     $351 = $145;
     ___cxa_call_unexpected(($351|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $352 = $144;
  $353 = ($352|0)!=(0|0);
  if ($353) {
   $354 = HEAP32[$336>>2]|0;
   $355 = $144;
   $139 = $354;
   $140 = $355;
   $141 = 1;
   $356 = $139;
   $357 = $140;
   $358 = $141;
   $136 = $356;
   $137 = $357;
   $138 = $358;
   $359 = $137;
   $135 = $359;
   $360 = $135;
   __ZdlPv($360);
  }
 }
 $376 = $174;
 $377 = $175;
 ___resumeException($376|0);
 // unreachable;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 28|0;
 $12 = sp + 44|0;
 $23 = sp + 208|0;
 $27 = sp + 240|0;
 $34 = sp + 156|0;
 $51 = sp + 220|0;
 $52 = sp + 124|0;
 $53 = sp + 228|0;
 $48 = $this;
 $49 = $__parent;
 $50 = $__v;
 $54 = $48;
 $46 = $54;
 $55 = $46;
 $45 = $55;
 $56 = $45;
 $57 = (($56) + 4|0);
 $44 = $57;
 $58 = $44;
 $43 = $58;
 $59 = $43;
 $42 = $59;
 $60 = $42;
 $41 = $60;
 $61 = $41;
 $62 = HEAP32[$61>>2]|0;
 $__nd = $62;
 $63 = $__nd;
 $21 = $23;
 $22 = -1;
 $64 = $21;
 $65 = $22;
 $19 = $64;
 $20 = $65;
 $66 = $19;
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$23>>2]|0;
 HEAP32[$51>>2] = $67;
 $18 = $51;
 $68 = ($63|0)!=(0|0);
 if (!($68)) {
  $40 = $54;
  $141 = $40;
  $142 = (($141) + 4|0);
  $39 = $142;
  $143 = $39;
  $38 = $143;
  $144 = $38;
  $37 = $144;
  $145 = $37;
  $36 = $145;
  $146 = $36;
  $147 = $49;
  HEAP32[$147>>2] = $146;
  $148 = $49;
  $149 = HEAP32[$148>>2]|0;
  $47 = $149;
  $150 = $47;
  STACKTOP = sp;return ($150|0);
 }
 while(1) {
  $17 = $54;
  $69 = $17;
  $70 = (($69) + 8|0);
  $16 = $70;
  $71 = $16;
  $15 = $71;
  $72 = $15;
  $73 = $50;
  $74 = $__nd;
  $75 = (($74) + 16|0);
  $9 = $72;
  $10 = $73;
  $11 = $75;
  $76 = $10;
  $77 = $11;
  __ZN3vcg18PointerToAttributeC1ERKS0_($12,$77);
  __THREW__ = 0;
  $78 = (invoke_iii(433,($76|0),($12|0))|0);
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   label = 4;
   break;
  }
  __ZN3vcg18PointerToAttributeD1Ev($12);
  if ($78) {
   $89 = $__nd;
   $90 = HEAP32[$89>>2]|0;
   $6 = $8;
   $7 = -1;
   $91 = $6;
   $92 = $7;
   $4 = $91;
   $5 = $92;
   $93 = $4;
   HEAP32[$93>>2] = 0;
   $94 = HEAP32[$8>>2]|0;
   HEAP32[$52>>2] = $94;
   $3 = $52;
   $95 = ($90|0)!=(0|0);
   if (!($95)) {
    label = 10;
    break;
   }
   $96 = $__nd;
   $97 = HEAP32[$96>>2]|0;
   $__nd = $97;
  } else {
   $2 = $54;
   $102 = $2;
   $103 = (($102) + 8|0);
   $1 = $103;
   $104 = $1;
   $0 = $104;
   $105 = $0;
   $106 = $__nd;
   $107 = (($106) + 16|0);
   $108 = $50;
   $24 = $105;
   $25 = $107;
   $26 = $108;
   $109 = $25;
   $110 = $26;
   __ZN3vcg18PointerToAttributeC1ERKS0_($27,$110);
   __THREW__ = 0;
   $111 = (invoke_iii(433,($109|0),($27|0))|0);
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    label = 13;
    break;
   }
   __ZN3vcg18PointerToAttributeD1Ev($27);
   if (!($111)) {
    label = 21;
    break;
   }
   $122 = $__nd;
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $32 = $34;
   $33 = -1;
   $125 = $32;
   $126 = $33;
   $30 = $125;
   $31 = $126;
   $127 = $30;
   HEAP32[$127>>2] = 0;
   $128 = HEAP32[$34>>2]|0;
   HEAP32[$53>>2] = $128;
   $35 = $53;
   $129 = ($124|0)!=(0|0);
   if (!($129)) {
    label = 19;
    break;
   }
   $130 = $__nd;
   $131 = (($130) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $__nd = $132;
  }
 }
 if ((label|0) == 4) {
  $81 = ___cxa_find_matching_catch()|0;
  $82 = tempRet0;
  $13 = $81;
  $14 = $82;
  __THREW__ = 0;
  invoke_vi(416,($12|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  } else {
   $85 = $13;
   $86 = $14;
   ___resumeException($85|0);
   // unreachable;
  }
 }
 else if ((label|0) == 10) {
  $98 = $__nd;
  $99 = $49;
  HEAP32[$99>>2] = $98;
  $100 = $49;
  $101 = HEAP32[$100>>2]|0;
  $47 = $101;
  $150 = $47;
  STACKTOP = sp;return ($150|0);
 }
 else if ((label|0) == 13) {
  $114 = ___cxa_find_matching_catch()|0;
  $115 = tempRet0;
  $28 = $114;
  $29 = $115;
  __THREW__ = 0;
  invoke_vi(416,($27|0));
  $116 = __THREW__; __THREW__ = 0;
  $117 = $116&1;
  if ($117) {
   $120 = ___cxa_find_matching_catch(0|0)|0;
   $121 = tempRet0;
   ___clang_call_terminate($120);
   // unreachable;
  } else {
   $118 = $28;
   $119 = $29;
   ___resumeException($118|0);
   // unreachable;
  }
 }
 else if ((label|0) == 19) {
  $133 = $__nd;
  $134 = $49;
  HEAP32[$134>>2] = $133;
  $135 = $49;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + 4|0);
  $47 = $137;
  $150 = $47;
  STACKTOP = sp;return ($150|0);
 }
 else if ((label|0) == 21) {
  $138 = $__nd;
  $139 = $49;
  HEAP32[$139>>2] = $138;
  $140 = $49;
  $47 = $140;
  $150 = $47;
  STACKTOP = sp;return ($150|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d1$i = 0, $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i4$i = 0, $__t21$i$i$i = 0;
 var $__t21$i$i$i$i = 0, $__t21$i$i$i17 = 0, $__t21$i$i$i5$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i15$i = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i26 = 0, $__tmp$i$i$i32 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i6$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1408|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 40|0;
 $9 = sp + 1400|0;
 $34 = sp + 192|0;
 $37 = sp + 1401|0;
 $70 = sp + 632|0;
 $71 = sp + 144|0;
 $74 = sp + 416|0;
 $75 = sp + 424|0;
 $__t21$i$i$i17 = sp + 120|0;
 $78 = sp + 48|0;
 $81 = sp + 456|0;
 $__u1$i = sp + 152|0;
 $83 = sp + 184|0;
 $95 = sp + 16|0;
 $98 = sp + 1402|0;
 $131 = sp + 688|0;
 $132 = sp + 136|0;
 $135 = sp + 696|0;
 $136 = sp + 648|0;
 $__t21$i$i$i5$i = sp + 168|0;
 $139 = sp;
 $142 = sp + 1368|0;
 $__u1$i6$i = sp + 32|0;
 $144 = sp + 24|0;
 $164 = sp + 824|0;
 $165 = sp + 176|0;
 $168 = sp + 840|0;
 $169 = sp + 848|0;
 $__t21$i$i$i$i = sp + 112|0;
 $172 = sp + 104|0;
 $175 = sp + 880|0;
 $__u1$i$i = sp + 64|0;
 $177 = sp + 88|0;
 $183 = sp + 924|0;
 $184 = sp + 928|0;
 $185 = sp + 940|0;
 $198 = sp + 72|0;
 $201 = sp + 1403|0;
 $229 = sp + 1120|0;
 $230 = sp + 56|0;
 $233 = sp + 1136|0;
 $234 = sp + 1144|0;
 $__t21$i$i$i = sp + 8|0;
 $237 = sp + 96|0;
 $240 = sp + 1176|0;
 $241 = sp + 1184|0;
 $__d1$i = sp + 128|0;
 $244 = sp + 80|0;
 $251 = sp + 160|0;
 $254 = sp + 1404|0;
 $__h = sp + 216|0;
 $288 = sp + 904|0;
 $291 = sp + 532|0;
 $292 = sp + 388|0;
 $286 = $this;
 $287 = $__v;
 $294 = $286;
 $285 = $294;
 $295 = $285;
 $296 = (($295) + 4|0);
 $284 = $296;
 $297 = $284;
 $283 = $297;
 $298 = $283;
 $__na = $298;
 $299 = $__na;
 $281 = $299;
 $282 = 1;
 $300 = $281;
 $301 = $282;
 $278 = $300;
 $279 = $301;
 $280 = 0;
 $302 = $279;
 $303 = ($302*44)|0;
 $277 = $303;
 $304 = $277;
 $305 = (__Znwj($304)|0);
 $306 = $__na;
 $275 = $288;
 $276 = $306;
 $307 = $275;
 $308 = $276;
 $273 = $307;
 $274 = $308;
 $309 = $273;
 $310 = $274;
 HEAP32[$309>>2] = $310;
 $311 = (($309) + 4|0);
 HEAP8[$311>>0] = 0;
 ;HEAP8[$244+0>>0]=HEAP8[$288+0>>0]|0;HEAP8[$244+1>>0]=HEAP8[$288+1>>0]|0;HEAP8[$244+2>>0]=HEAP8[$288+2>>0]|0;HEAP8[$244+3>>0]=HEAP8[$288+3>>0]|0;HEAP8[$244+4>>0]=HEAP8[$288+4>>0]|0;HEAP8[$244+5>>0]=HEAP8[$288+5>>0]|0;HEAP8[$244+6>>0]=HEAP8[$288+6>>0]|0;HEAP8[$244+7>>0]=HEAP8[$288+7>>0]|0;
 $242 = $__h;
 $243 = $305;
 $312 = $242;
 $313 = $243;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$244+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$244+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$244+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$244+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$244+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$244+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$244+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$244+7>>0]|0;
 $239 = $312;
 HEAP32[$240>>2] = $313;
 $314 = $239;
 $238 = $240;
 $315 = $238;
 $316 = HEAP32[$315>>2]|0;
 $224 = $__d1$i;
 $317 = $224;
 ;HEAP32[$241+0>>2]=HEAP32[$317+0>>2]|0;HEAP32[$241+4>>2]=HEAP32[$317+4>>2]|0;
 ;HEAP8[$237+0>>0]=HEAP8[$241+0>>0]|0;HEAP8[$237+1>>0]=HEAP8[$241+1>>0]|0;HEAP8[$237+2>>0]=HEAP8[$241+2>>0]|0;HEAP8[$237+3>>0]=HEAP8[$241+3>>0]|0;HEAP8[$237+4>>0]=HEAP8[$241+4>>0]|0;HEAP8[$237+5>>0]=HEAP8[$241+5>>0]|0;HEAP8[$237+6>>0]=HEAP8[$241+6>>0]|0;HEAP8[$237+7>>0]=HEAP8[$241+7>>0]|0;
 $235 = $314;
 $236 = $316;
 $318 = $235;
 $319 = $236;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$237+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$237+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$237+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$237+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$237+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$237+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$237+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$237+7>>0]|0;
 $232 = $318;
 HEAP32[$233>>2] = $319;
 $320 = $232;
 $231 = $233;
 $321 = $231;
 $322 = HEAP32[$321>>2]|0;
 $225 = $__t21$i$i$i;
 $323 = $225;
 ;HEAP32[$234+0>>2]=HEAP32[$323+0>>2]|0;HEAP32[$234+4>>2]=HEAP32[$323+4>>2]|0;
 ;HEAP8[$230+0>>0]=HEAP8[$234+0>>0]|0;HEAP8[$230+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$230+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$230+3>>0]=HEAP8[$234+3>>0]|0;HEAP8[$230+4>>0]=HEAP8[$234+4>>0]|0;HEAP8[$230+5>>0]=HEAP8[$234+5>>0]|0;HEAP8[$230+6>>0]=HEAP8[$234+6>>0]|0;HEAP8[$230+7>>0]=HEAP8[$234+7>>0]|0;
 $228 = $320;
 HEAP32[$229>>2] = $322;
 $324 = $228;
 $227 = $229;
 $325 = $227;
 $326 = HEAP32[$325>>2]|0;
 HEAP32[$324>>2] = $326;
 $327 = (($324) + 4|0);
 $226 = $230;
 $328 = $226;
 ;HEAP32[$327+0>>2]=HEAP32[$328+0>>2]|0;HEAP32[$327+4>>2]=HEAP32[$328+4>>2]|0;
 $329 = $__na;
 $223 = $__h;
 $330 = $223;
 $222 = $330;
 $331 = $222;
 $221 = $331;
 $332 = $221;
 $333 = HEAP32[$332>>2]|0;
 $334 = (($333) + 16|0);
 $220 = $334;
 $335 = $220;
 $336 = $287;
 $189 = $329;
 $190 = $335;
 $191 = $336;
 $337 = $190;
 $338 = ($337|0)==(0|0);
 do {
  if (!($338)) {
   $339 = $191;
   __THREW__ = 0;
   invoke_vii(434,($337|0),($339|0));
   $340 = __THREW__; __THREW__ = 0;
   $341 = $340&1;
   if (!($341)) {
    break;
   }
   $569 = ___cxa_find_matching_catch()|0;
   $570 = tempRet0;
   $289 = $569;
   $290 = $570;
   $272 = $__h;
   $571 = $272;
   $271 = $571;
   $572 = $271;
   $269 = $572;
   $270 = 0;
   $573 = $269;
   $268 = $573;
   $574 = $268;
   $267 = $574;
   $575 = $267;
   $576 = HEAP32[$575>>2]|0;
   $__tmp$i$i$i = $576;
   $577 = $270;
   $248 = $573;
   $578 = $248;
   $247 = $578;
   $579 = $247;
   HEAP32[$579>>2] = $577;
   $580 = $__tmp$i$i$i;
   $581 = ($580|0)!=(0|0);
   if ($581) {
    $246 = $573;
    $582 = $246;
    $245 = $582;
    $583 = $245;
    $584 = (($583) + 4|0);
    $585 = $__tmp$i$i$i;
    $263 = $584;
    $264 = $585;
    $586 = $263;
    $587 = (($586) + 4|0);
    $588 = HEAP8[$587>>0]|0;
    $589 = $588&1;
    do {
     if ($589) {
      $590 = HEAP32[$586>>2]|0;
      $591 = $264;
      $592 = (($591) + 16|0);
      $262 = $592;
      $593 = $262;
      $252 = $590;
      $253 = $593;
      $594 = $252;
      $595 = $253;
      ;HEAP8[$251+0>>0]=HEAP8[$254+0>>0]|0;
      $249 = $594;
      $250 = $595;
      $596 = $250;
      __THREW__ = 0;
      invoke_vi(416,($596|0));
      $597 = __THREW__; __THREW__ = 0;
      $598 = $597&1;
      if ($598) {
       $599 = ___cxa_find_matching_catch(0|0)|0;
       $600 = tempRet0;
       $265 = $599;
       $266 = $600;
       $601 = $265;
       ___cxa_call_unexpected(($601|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $602 = $264;
    $603 = ($602|0)!=(0|0);
    if ($603) {
     $604 = HEAP32[$586>>2]|0;
     $605 = $264;
     $259 = $604;
     $260 = $605;
     $261 = 1;
     $606 = $259;
     $607 = $260;
     $608 = $261;
     $256 = $606;
     $257 = $607;
     $258 = $608;
     $609 = $257;
     $255 = $609;
     $610 = $255;
     __ZdlPv($610);
    }
   }
   $611 = $289;
   $612 = $290;
   ___resumeException($611|0);
   // unreachable;
  }
 } while(0);
 $188 = $__h;
 $342 = $188;
 $187 = $342;
 $343 = $187;
 $186 = $343;
 $344 = $186;
 $345 = (($344) + 4|0);
 $346 = (($345) + 4|0);
 HEAP8[$346>>0] = 1;
 $182 = $__h;
 $347 = $182;
 $180 = $185;
 $181 = $347;
 $348 = $180;
 $349 = $181;
 $178 = $348;
 $179 = $349;
 $350 = $178;
 $351 = $179;
 HEAP32[$350>>2] = $351;
 ;HEAP8[$177+0>>0]=HEAP8[$185+0>>0]|0;HEAP8[$177+1>>0]=HEAP8[$185+1>>0]|0;HEAP8[$177+2>>0]=HEAP8[$185+2>>0]|0;HEAP8[$177+3>>0]=HEAP8[$185+3>>0]|0;
 $176 = $184;
 $352 = $176;
 ;HEAP8[$__u1$i$i+0>>0]=HEAP8[$177+0>>0]|0;HEAP8[$__u1$i$i+1>>0]=HEAP8[$177+1>>0]|0;HEAP8[$__u1$i$i+2>>0]=HEAP8[$177+2>>0]|0;HEAP8[$__u1$i$i+3>>0]=HEAP8[$177+3>>0]|0;
 $174 = $352;
 $353 = $174;
 $173 = $__u1$i$i;
 $354 = $173;
 $355 = HEAP32[$354>>2]|0;
 $154 = $355;
 $356 = $154;
 $153 = $356;
 $357 = $153;
 $152 = $357;
 $358 = $152;
 $359 = HEAP32[$358>>2]|0;
 $__t$i$i$i$i = $359;
 $151 = $356;
 $360 = $151;
 $150 = $360;
 $361 = $150;
 HEAP32[$361>>2] = 0;
 $362 = $__t$i$i$i$i;
 $155 = $__u1$i$i;
 $363 = $155;
 $364 = HEAP32[$363>>2]|0;
 $158 = $364;
 $365 = $158;
 $157 = $365;
 $366 = $157;
 $156 = $366;
 $367 = $156;
 $368 = (($367) + 4|0);
 $159 = $368;
 $369 = $159;
 ;HEAP32[$175+0>>2]=HEAP32[$369+0>>2]|0;HEAP32[$175+4>>2]=HEAP32[$369+4>>2]|0;
 ;HEAP8[$172+0>>0]=HEAP8[$175+0>>0]|0;HEAP8[$172+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$172+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$172+3>>0]=HEAP8[$175+3>>0]|0;HEAP8[$172+4>>0]=HEAP8[$175+4>>0]|0;HEAP8[$172+5>>0]=HEAP8[$175+5>>0]|0;HEAP8[$172+6>>0]=HEAP8[$175+6>>0]|0;HEAP8[$172+7>>0]=HEAP8[$175+7>>0]|0;
 $170 = $353;
 $171 = $362;
 $370 = $170;
 $371 = $171;
 ;HEAP8[$__t21$i$i$i$i+0>>0]=HEAP8[$172+0>>0]|0;HEAP8[$__t21$i$i$i$i+1>>0]=HEAP8[$172+1>>0]|0;HEAP8[$__t21$i$i$i$i+2>>0]=HEAP8[$172+2>>0]|0;HEAP8[$__t21$i$i$i$i+3>>0]=HEAP8[$172+3>>0]|0;HEAP8[$__t21$i$i$i$i+4>>0]=HEAP8[$172+4>>0]|0;HEAP8[$__t21$i$i$i$i+5>>0]=HEAP8[$172+5>>0]|0;HEAP8[$__t21$i$i$i$i+6>>0]=HEAP8[$172+6>>0]|0;HEAP8[$__t21$i$i$i$i+7>>0]=HEAP8[$172+7>>0]|0;
 $167 = $370;
 HEAP32[$168>>2] = $371;
 $372 = $167;
 $166 = $168;
 $373 = $166;
 $374 = HEAP32[$373>>2]|0;
 $160 = $__t21$i$i$i$i;
 $375 = $160;
 ;HEAP32[$169+0>>2]=HEAP32[$375+0>>2]|0;HEAP32[$169+4>>2]=HEAP32[$375+4>>2]|0;
 ;HEAP8[$165+0>>0]=HEAP8[$169+0>>0]|0;HEAP8[$165+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$165+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$165+3>>0]=HEAP8[$169+3>>0]|0;HEAP8[$165+4>>0]=HEAP8[$169+4>>0]|0;HEAP8[$165+5>>0]=HEAP8[$169+5>>0]|0;HEAP8[$165+6>>0]=HEAP8[$169+6>>0]|0;HEAP8[$165+7>>0]=HEAP8[$169+7>>0]|0;
 $163 = $372;
 HEAP32[$164>>2] = $374;
 $376 = $163;
 $162 = $164;
 $377 = $162;
 $378 = HEAP32[$377>>2]|0;
 HEAP32[$376>>2] = $378;
 $379 = (($376) + 4|0);
 $161 = $165;
 $380 = $161;
 ;HEAP32[$379+0>>2]=HEAP32[$380+0>>2]|0;HEAP32[$379+4>>2]=HEAP32[$380+4>>2]|0;
 $149 = $184;
 $381 = $149;
 $147 = $183;
 $148 = $381;
 $382 = $147;
 $383 = $148;
 $145 = $382;
 $146 = $383;
 $384 = $145;
 $385 = $146;
 HEAP32[$384>>2] = $385;
 ;HEAP8[$144+0>>0]=HEAP8[$183+0>>0]|0;HEAP8[$144+1>>0]=HEAP8[$183+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$183+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$183+3>>0]|0;
 $143 = $292;
 $386 = $143;
 ;HEAP8[$__u1$i6$i+0>>0]=HEAP8[$144+0>>0]|0;HEAP8[$__u1$i6$i+1>>0]=HEAP8[$144+1>>0]|0;HEAP8[$__u1$i6$i+2>>0]=HEAP8[$144+2>>0]|0;HEAP8[$__u1$i6$i+3>>0]=HEAP8[$144+3>>0]|0;
 $141 = $386;
 $387 = $141;
 $140 = $__u1$i6$i;
 $388 = $140;
 $389 = HEAP32[$388>>2]|0;
 $121 = $389;
 $390 = $121;
 $120 = $390;
 $391 = $120;
 $119 = $391;
 $392 = $119;
 $393 = HEAP32[$392>>2]|0;
 $__t$i$i$i4$i = $393;
 $118 = $390;
 $394 = $118;
 $117 = $394;
 $395 = $117;
 HEAP32[$395>>2] = 0;
 $396 = $__t$i$i$i4$i;
 $122 = $__u1$i6$i;
 $397 = $122;
 $398 = HEAP32[$397>>2]|0;
 $125 = $398;
 $399 = $125;
 $124 = $399;
 $400 = $124;
 $123 = $400;
 $401 = $123;
 $402 = (($401) + 4|0);
 $126 = $402;
 $403 = $126;
 ;HEAP32[$142+0>>2]=HEAP32[$403+0>>2]|0;HEAP32[$142+4>>2]=HEAP32[$403+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$142+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$142+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$142+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$142+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$142+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$142+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$142+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$142+7>>0]|0;
 $137 = $387;
 $138 = $396;
 $404 = $137;
 $405 = $138;
 ;HEAP8[$__t21$i$i$i5$i+0>>0]=HEAP8[$139+0>>0]|0;HEAP8[$__t21$i$i$i5$i+1>>0]=HEAP8[$139+1>>0]|0;HEAP8[$__t21$i$i$i5$i+2>>0]=HEAP8[$139+2>>0]|0;HEAP8[$__t21$i$i$i5$i+3>>0]=HEAP8[$139+3>>0]|0;HEAP8[$__t21$i$i$i5$i+4>>0]=HEAP8[$139+4>>0]|0;HEAP8[$__t21$i$i$i5$i+5>>0]=HEAP8[$139+5>>0]|0;HEAP8[$__t21$i$i$i5$i+6>>0]=HEAP8[$139+6>>0]|0;HEAP8[$__t21$i$i$i5$i+7>>0]=HEAP8[$139+7>>0]|0;
 $134 = $404;
 HEAP32[$135>>2] = $405;
 $406 = $134;
 $133 = $135;
 $407 = $133;
 $408 = HEAP32[$407>>2]|0;
 $127 = $__t21$i$i$i5$i;
 $409 = $127;
 ;HEAP32[$136+0>>2]=HEAP32[$409+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$409+4>>2]|0;
 ;HEAP8[$132+0>>0]=HEAP8[$136+0>>0]|0;HEAP8[$132+1>>0]=HEAP8[$136+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$136+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$136+3>>0]|0;HEAP8[$132+4>>0]=HEAP8[$136+4>>0]|0;HEAP8[$132+5>>0]=HEAP8[$136+5>>0]|0;HEAP8[$132+6>>0]=HEAP8[$136+6>>0]|0;HEAP8[$132+7>>0]=HEAP8[$136+7>>0]|0;
 $130 = $406;
 HEAP32[$131>>2] = $408;
 $410 = $130;
 $129 = $131;
 $411 = $129;
 $412 = HEAP32[$411>>2]|0;
 HEAP32[$410>>2] = $412;
 $413 = (($410) + 4|0);
 $128 = $132;
 $414 = $128;
 ;HEAP32[$413+0>>2]=HEAP32[$414+0>>2]|0;HEAP32[$413+4>>2]=HEAP32[$414+4>>2]|0;
 $116 = $184;
 $415 = $116;
 $115 = $415;
 $416 = $115;
 $113 = $416;
 $114 = 0;
 $417 = $113;
 $112 = $417;
 $418 = $112;
 $111 = $418;
 $419 = $111;
 $420 = HEAP32[$419>>2]|0;
 $__tmp$i$i$i15$i = $420;
 $421 = $114;
 $92 = $417;
 $422 = $92;
 $91 = $422;
 $423 = $91;
 HEAP32[$423>>2] = $421;
 $424 = $__tmp$i$i$i15$i;
 $425 = ($424|0)!=(0|0);
 if ($425) {
  $90 = $417;
  $426 = $90;
  $89 = $426;
  $427 = $89;
  $428 = (($427) + 4|0);
  $429 = $__tmp$i$i$i15$i;
  $107 = $428;
  $108 = $429;
  $430 = $107;
  $431 = (($430) + 4|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $432&1;
  do {
   if ($433) {
    $434 = HEAP32[$430>>2]|0;
    $435 = $108;
    $436 = (($435) + 16|0);
    $106 = $436;
    $437 = $106;
    $96 = $434;
    $97 = $437;
    $438 = $96;
    $439 = $97;
    ;HEAP8[$95+0>>0]=HEAP8[$98+0>>0]|0;
    $93 = $438;
    $94 = $439;
    $440 = $94;
    __THREW__ = 0;
    invoke_vi(416,($440|0));
    $441 = __THREW__; __THREW__ = 0;
    $442 = $441&1;
    if ($442) {
     $443 = ___cxa_find_matching_catch()|0;
     $444 = tempRet0;
     $109 = $443;
     $110 = $444;
     $445 = $109;
     ___cxa_call_unexpected(($445|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $446 = $108;
  $447 = ($446|0)!=(0|0);
  if ($447) {
   $448 = HEAP32[$430>>2]|0;
   $449 = $108;
   $103 = $448;
   $104 = $449;
   $105 = 1;
   $450 = $103;
   $451 = $104;
   $452 = $105;
   $100 = $450;
   $101 = $451;
   $102 = $452;
   $453 = $101;
   $99 = $453;
   $454 = $99;
   __ZdlPv($454);
  }
 }
 $88 = $292;
 $455 = $88;
 $86 = $291;
 $87 = $455;
 $456 = $86;
 $457 = $87;
 $84 = $456;
 $85 = $457;
 $458 = $84;
 $459 = $85;
 HEAP32[$458>>2] = $459;
 ;HEAP8[$83+0>>0]=HEAP8[$291+0>>0]|0;HEAP8[$83+1>>0]=HEAP8[$291+1>>0]|0;HEAP8[$83+2>>0]=HEAP8[$291+2>>0]|0;HEAP8[$83+3>>0]=HEAP8[$291+3>>0]|0;
 $82 = $agg$result;
 $460 = $82;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$83+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$83+3>>0]|0;
 $80 = $460;
 $461 = $80;
 $79 = $__u1$i;
 $462 = $79;
 $463 = HEAP32[$462>>2]|0;
 $60 = $463;
 $464 = $60;
 $59 = $464;
 $465 = $59;
 $58 = $465;
 $466 = $58;
 $467 = HEAP32[$466>>2]|0;
 $__t$i$i$i = $467;
 $57 = $464;
 $468 = $57;
 $56 = $468;
 $469 = $56;
 HEAP32[$469>>2] = 0;
 $470 = $__t$i$i$i;
 $61 = $__u1$i;
 $471 = $61;
 $472 = HEAP32[$471>>2]|0;
 $64 = $472;
 $473 = $64;
 $63 = $473;
 $474 = $63;
 $62 = $474;
 $475 = $62;
 $476 = (($475) + 4|0);
 $65 = $476;
 $477 = $65;
 ;HEAP32[$81+0>>2]=HEAP32[$477+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$477+4>>2]|0;
 ;HEAP8[$78+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $76 = $461;
 $77 = $470;
 $478 = $76;
 $479 = $77;
 ;HEAP8[$__t21$i$i$i17+0>>0]=HEAP8[$78+0>>0]|0;HEAP8[$__t21$i$i$i17+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$__t21$i$i$i17+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$__t21$i$i$i17+3>>0]=HEAP8[$78+3>>0]|0;HEAP8[$__t21$i$i$i17+4>>0]=HEAP8[$78+4>>0]|0;HEAP8[$__t21$i$i$i17+5>>0]=HEAP8[$78+5>>0]|0;HEAP8[$__t21$i$i$i17+6>>0]=HEAP8[$78+6>>0]|0;HEAP8[$__t21$i$i$i17+7>>0]=HEAP8[$78+7>>0]|0;
 $73 = $478;
 HEAP32[$74>>2] = $479;
 $480 = $73;
 $72 = $74;
 $481 = $72;
 $482 = HEAP32[$481>>2]|0;
 $66 = $__t21$i$i$i17;
 $483 = $66;
 ;HEAP32[$75+0>>2]=HEAP32[$483+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$483+4>>2]|0;
 ;HEAP8[$71+0>>0]=HEAP8[$75+0>>0]|0;HEAP8[$71+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$71+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$71+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$71+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$71+7>>0]=HEAP8[$75+7>>0]|0;
 $69 = $480;
 HEAP32[$70>>2] = $482;
 $484 = $69;
 $68 = $70;
 $485 = $68;
 $486 = HEAP32[$485>>2]|0;
 HEAP32[$484>>2] = $486;
 $487 = (($484) + 4|0);
 $67 = $71;
 $488 = $67;
 ;HEAP32[$487+0>>2]=HEAP32[$488+0>>2]|0;HEAP32[$487+4>>2]=HEAP32[$488+4>>2]|0;
 $55 = $292;
 $489 = $55;
 $54 = $489;
 $490 = $54;
 $52 = $490;
 $53 = 0;
 $491 = $52;
 $51 = $491;
 $492 = $51;
 $50 = $492;
 $493 = $50;
 $494 = HEAP32[$493>>2]|0;
 $__tmp$i$i$i26 = $494;
 $495 = $53;
 $31 = $491;
 $496 = $31;
 $30 = $496;
 $497 = $30;
 HEAP32[$497>>2] = $495;
 $498 = $__tmp$i$i$i26;
 $499 = ($498|0)!=(0|0);
 if ($499) {
  $29 = $491;
  $500 = $29;
  $28 = $500;
  $501 = $28;
  $502 = (($501) + 4|0);
  $503 = $__tmp$i$i$i26;
  $46 = $502;
  $47 = $503;
  $504 = $46;
  $505 = (($504) + 4|0);
  $506 = HEAP8[$505>>0]|0;
  $507 = $506&1;
  do {
   if ($507) {
    $508 = HEAP32[$504>>2]|0;
    $509 = $47;
    $510 = (($509) + 16|0);
    $45 = $510;
    $511 = $45;
    $35 = $508;
    $36 = $511;
    $512 = $35;
    $513 = $36;
    ;HEAP8[$34+0>>0]=HEAP8[$37+0>>0]|0;
    $32 = $512;
    $33 = $513;
    $514 = $33;
    __THREW__ = 0;
    invoke_vi(416,($514|0));
    $515 = __THREW__; __THREW__ = 0;
    $516 = $515&1;
    if ($516) {
     $517 = ___cxa_find_matching_catch()|0;
     $518 = tempRet0;
     $48 = $517;
     $49 = $518;
     $519 = $48;
     ___cxa_call_unexpected(($519|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $520 = $47;
  $521 = ($520|0)!=(0|0);
  if ($521) {
   $522 = HEAP32[$504>>2]|0;
   $523 = $47;
   $42 = $522;
   $43 = $523;
   $44 = 1;
   $524 = $42;
   $525 = $43;
   $526 = $44;
   $39 = $524;
   $40 = $525;
   $41 = $526;
   $527 = $40;
   $38 = $527;
   $528 = $38;
   __ZdlPv($528);
  }
 }
 $293 = 1;
 $27 = $__h;
 $529 = $27;
 $26 = $529;
 $530 = $26;
 $24 = $530;
 $25 = 0;
 $531 = $24;
 $23 = $531;
 $532 = $23;
 $22 = $532;
 $533 = $22;
 $534 = HEAP32[$533>>2]|0;
 $__tmp$i$i$i32 = $534;
 $535 = $25;
 $3 = $531;
 $536 = $3;
 $2 = $536;
 $537 = $2;
 HEAP32[$537>>2] = $535;
 $538 = $__tmp$i$i$i32;
 $539 = ($538|0)!=(0|0);
 if (!($539)) {
  STACKTOP = sp;return;
 }
 $1 = $531;
 $540 = $1;
 $0 = $540;
 $541 = $0;
 $542 = (($541) + 4|0);
 $543 = $__tmp$i$i$i32;
 $18 = $542;
 $19 = $543;
 $544 = $18;
 $545 = (($544) + 4|0);
 $546 = HEAP8[$545>>0]|0;
 $547 = $546&1;
 do {
  if ($547) {
   $548 = HEAP32[$544>>2]|0;
   $549 = $19;
   $550 = (($549) + 16|0);
   $17 = $550;
   $551 = $17;
   $7 = $548;
   $8 = $551;
   $552 = $7;
   $553 = $8;
   ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
   $4 = $552;
   $5 = $553;
   $554 = $5;
   __THREW__ = 0;
   invoke_vi(416,($554|0));
   $555 = __THREW__; __THREW__ = 0;
   $556 = $555&1;
   if ($556) {
    $557 = ___cxa_find_matching_catch()|0;
    $558 = tempRet0;
    $20 = $557;
    $21 = $558;
    $559 = $20;
    ___cxa_call_unexpected(($559|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $560 = $19;
 $561 = ($560|0)!=(0|0);
 if ($561) {
  $562 = HEAP32[$544>>2]|0;
  $563 = $19;
  $14 = $562;
  $15 = $563;
  $16 = 1;
  $564 = $14;
  $565 = $15;
  $566 = $16;
  $11 = $564;
  $12 = $565;
  $13 = $566;
  $567 = $12;
  $10 = $567;
  $568 = $10;
  __ZdlPv($568);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $11 = sp + 40|0;
 $28 = sp + 8|0;
 $33 = sp + 60|0;
 $34 = sp + 124|0;
 $35 = sp + 16|0;
 $29 = $this;
 $30 = $__parent;
 $31 = $__child;
 $32 = $__new_node;
 $36 = $29;
 $26 = $28;
 $27 = -1;
 $37 = $26;
 $38 = $27;
 $24 = $37;
 $25 = $38;
 $39 = $24;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$28>>2]|0;
 HEAP32[$33>>2] = $40;
 $20 = $33;
 $41 = $32;
 HEAP32[$41>>2] = 0;
 $2 = $4;
 $3 = -1;
 $42 = $2;
 $43 = $3;
 $0 = $42;
 $1 = $43;
 $44 = $0;
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$4>>2]|0;
 HEAP32[$34>>2] = $45;
 $5 = $34;
 $46 = $32;
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $30;
 $49 = $32;
 $50 = (($49) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $32;
 $52 = $31;
 HEAP32[$52>>2] = $51;
 $6 = $36;
 $53 = $6;
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $9 = $11;
 $10 = -1;
 $56 = $9;
 $57 = $10;
 $7 = $56;
 $8 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$11>>2]|0;
 HEAP32[$35>>2] = $59;
 $12 = $35;
 $60 = ($55|0)!=(0|0);
 if ($60) {
  $13 = $36;
  $61 = $13;
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $14 = $36;
  $64 = $14;
  HEAP32[$64>>2] = $63;
 }
 $19 = $36;
 $65 = $19;
 $66 = (($65) + 4|0);
 $18 = $66;
 $67 = $18;
 $17 = $67;
 $68 = $17;
 $16 = $68;
 $69 = $16;
 $15 = $69;
 $70 = $15;
 $71 = HEAP32[$70>>2]|0;
 $72 = $31;
 $73 = HEAP32[$72>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($71,$73);
 $23 = $36;
 $74 = $23;
 $75 = (($74) + 8|0);
 $22 = $75;
 $76 = $22;
 $21 = $76;
 $77 = $21;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $13 = sp + 48|0;
 $19 = sp + 32|0;
 $20 = sp + 36|0;
 $15 = $__root;
 $16 = $__x;
 $21 = $16;
 $22 = $15;
 $23 = ($21|0)==($22|0);
 $24 = $16;
 $25 = (($24) + 12|0);
 $26 = $23&1;
 HEAP8[$25>>0] = $26;
 while(1) {
  $27 = $16;
  $28 = $15;
  $29 = ($27|0)!=($28|0);
  if ($29) {
   $30 = $16;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 12|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&1;
   $36 = $35 ^ 1;
   $155 = $36;
  } else {
   $155 = 0;
  }
  if (!($155)) {
   label = 25;
   break;
  }
  $37 = $16;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $14 = $39;
  $40 = $14;
  $41 = $14;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($40|0)==($44|0);
  if ($45) {
   $46 = $16;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $__y = $52;
   $53 = $__y;
   $11 = $13;
   $12 = -1;
   $54 = $11;
   $55 = $12;
   $9 = $54;
   $10 = $55;
   $56 = $9;
   HEAP32[$56>>2] = 0;
   $57 = HEAP32[$13>>2]|0;
   HEAP32[$19>>2] = $57;
   $8 = $19;
   $58 = ($53|0)!=(0|0);
   if (!($58)) {
    label = 11;
    break;
   }
   $59 = $__y;
   $60 = (($59) + 12|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&1;
   if ($62) {
    label = 11;
    break;
   }
   $63 = $16;
   $64 = (($63) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $16 = $65;
   $66 = $16;
   $67 = (($66) + 12|0);
   HEAP8[$67>>0] = 1;
   $68 = $16;
   $69 = (($68) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $16 = $70;
   $71 = $16;
   $72 = $15;
   $73 = ($71|0)==($72|0);
   $74 = $16;
   $75 = (($74) + 12|0);
   $76 = $73&1;
   HEAP8[$75>>0] = $76;
   $77 = $__y;
   $78 = (($77) + 12|0);
   HEAP8[$78>>0] = 1;
  } else {
   $101 = $16;
   $102 = (($101) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$105>>2]|0;
   $__y1 = $106;
   $107 = $__y1;
   $3 = $5;
   $4 = -1;
   $108 = $3;
   $109 = $4;
   $1 = $108;
   $2 = $109;
   $110 = $1;
   HEAP32[$110>>2] = 0;
   $111 = HEAP32[$5>>2]|0;
   HEAP32[$20>>2] = $111;
   $6 = $20;
   $112 = ($107|0)!=(0|0);
   if (!($112)) {
    label = 20;
    break;
   }
   $113 = $__y1;
   $114 = (($113) + 12|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&1;
   if ($116) {
    label = 20;
    break;
   }
   $117 = $16;
   $118 = (($117) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $16 = $119;
   $120 = $16;
   $121 = (($120) + 12|0);
   HEAP8[$121>>0] = 1;
   $122 = $16;
   $123 = (($122) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $16 = $124;
   $125 = $16;
   $126 = $15;
   $127 = ($125|0)==($126|0);
   $128 = $16;
   $129 = (($128) + 12|0);
   $130 = $127&1;
   HEAP8[$129>>0] = $130;
   $131 = $__y1;
   $132 = (($131) + 12|0);
   HEAP8[$132>>0] = 1;
  }
 }
 if ((label|0) == 11) {
  $79 = $16;
  $0 = $79;
  $80 = $0;
  $81 = $0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = ($80|0)==($84|0);
  if (!($85)) {
   $86 = $16;
   $87 = (($86) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $16 = $88;
   $89 = $16;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($89);
  }
  $90 = $16;
  $91 = (($90) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $16 = $92;
  $93 = $16;
  $94 = (($93) + 12|0);
  HEAP8[$94>>0] = 1;
  $95 = $16;
  $96 = (($95) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $16 = $97;
  $98 = $16;
  $99 = (($98) + 12|0);
  HEAP8[$99>>0] = 0;
  $100 = $16;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($100);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $133 = $16;
  $7 = $133;
  $134 = $7;
  $135 = $7;
  $136 = (($135) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($134|0)==($138|0);
  if ($139) {
   $140 = $16;
   $141 = (($140) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $16 = $142;
   $143 = $16;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($143);
  }
  $144 = $16;
  $145 = (($144) + 8|0);
  $146 = HEAP32[$145>>2]|0;
  $16 = $146;
  $147 = $16;
  $148 = (($147) + 12|0);
  HEAP8[$148>>0] = 1;
  $149 = $16;
  $150 = (($149) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $16 = $151;
  $152 = $16;
  $153 = (($152) + 12|0);
  HEAP8[$153>>0] = 0;
  $154 = $16;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($154);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZNK3vcg18PointerToAttributeltES0_($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i = 0;
 var $__result$i$i = 0, $__rhs_sz$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $44 = sp;
 $47 = sp + 356|0;
 $__lhs_sz$i$i = sp + 280|0;
 $__rhs_sz$i$i = sp + 284|0;
 $86 = $this;
 $87 = $86;
 $88 = (($87) + 4|0);
 $85 = $88;
 $89 = $85;
 $84 = $89;
 $90 = $84;
 $83 = $90;
 $91 = $83;
 $82 = $91;
 $92 = $82;
 $81 = $92;
 $93 = $81;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 & 1;
 $97 = ($96|0)!=(0);
 if ($97) {
  $77 = $90;
  $98 = $77;
  $76 = $98;
  $99 = $76;
  $75 = $99;
  $100 = $75;
  $101 = (($100) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $110 = $102;
 } else {
  $80 = $90;
  $103 = $80;
  $79 = $103;
  $104 = $79;
  $78 = $104;
  $105 = $78;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $107 >> 1;
  $110 = $108;
 }
 $109 = ($110|0)==(0);
 if ($109) {
  $111 = (($b) + 4|0);
  $10 = $111;
  $112 = $10;
  $9 = $112;
  $113 = $9;
  $8 = $113;
  $114 = $8;
  $7 = $114;
  $115 = $7;
  $6 = $115;
  $116 = $6;
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $118 & 1;
  $120 = ($119|0)!=(0);
  if ($120) {
   $2 = $113;
   $121 = $2;
   $1 = $121;
   $122 = $1;
   $0 = $122;
   $123 = $0;
   $124 = (($123) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $133 = $125;
  } else {
   $5 = $113;
   $126 = $5;
   $4 = $126;
   $127 = $4;
   $3 = $127;
   $128 = $3;
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $130 >> 1;
   $133 = $131;
  }
  $132 = ($133|0)==(0);
  if ($132) {
   $134 = HEAP32[$87>>2]|0;
   $135 = HEAP32[$b>>2]|0;
   $136 = ($134>>>0)<($135>>>0);
   $258 = $136;
   STACKTOP = sp;return ($258|0);
  }
 }
 $137 = (($87) + 4|0);
 $138 = (($b) + 4|0);
 $73 = $137;
 $74 = $138;
 $139 = $73;
 $140 = $74;
 $69 = $139;
 $70 = $140;
 $141 = $69;
 $67 = $141;
 $142 = $67;
 $66 = $142;
 $143 = $66;
 $65 = $143;
 $144 = $65;
 $64 = $144;
 $145 = $64;
 $146 = HEAP8[$145>>0]|0;
 $147 = $146&255;
 $148 = $147 & 1;
 $149 = ($148|0)!=(0);
 if ($149) {
  $60 = $142;
  $150 = $60;
  $59 = $150;
  $151 = $59;
  $58 = $151;
  $152 = $58;
  $153 = (($152) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $161 = $154;
 } else {
  $63 = $142;
  $155 = $63;
  $62 = $155;
  $156 = $62;
  $61 = $156;
  $157 = $61;
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = $159 >> 1;
  $161 = $160;
 }
 HEAP32[$__lhs_sz$i$i>>2] = $161;
 $162 = $70;
 $57 = $162;
 $163 = $57;
 $56 = $163;
 $164 = $56;
 $55 = $164;
 $165 = $55;
 $54 = $165;
 $166 = $54;
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = $168 & 1;
 $170 = ($169|0)!=(0);
 if ($170) {
  $50 = $163;
  $171 = $50;
  $49 = $171;
  $172 = $49;
  $48 = $172;
  $173 = $48;
  $174 = (($173) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $182 = $175;
 } else {
  $53 = $163;
  $176 = $53;
  $52 = $176;
  $177 = $52;
  $51 = $177;
  $178 = $51;
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 >> 1;
  $182 = $181;
 }
 HEAP32[$__rhs_sz$i$i>>2] = $182;
 $24 = $141;
 $183 = $24;
 $23 = $183;
 $184 = $23;
 $22 = $184;
 $185 = $22;
 $21 = $185;
 $186 = $21;
 $20 = $186;
 $187 = $20;
 $188 = HEAP8[$187>>0]|0;
 $189 = $188&255;
 $190 = $189 & 1;
 $191 = ($190|0)!=(0);
 if ($191) {
  $14 = $184;
  $192 = $14;
  $13 = $192;
  $193 = $13;
  $12 = $193;
  $194 = $12;
  $195 = (($194) + 8|0);
  $196 = HEAP32[$195>>2]|0;
  $203 = $196;
 } else {
  $19 = $184;
  $197 = $19;
  $18 = $197;
  $198 = $18;
  $17 = $198;
  $199 = $17;
  $200 = (($199) + 1|0);
  $16 = $200;
  $201 = $16;
  $15 = $201;
  $202 = $15;
  $203 = $202;
 }
 $11 = $203;
 $204 = $11;
 $205 = $70;
 $38 = $205;
 $206 = $38;
 $37 = $206;
 $207 = $37;
 $36 = $207;
 $208 = $36;
 $35 = $208;
 $209 = $35;
 $34 = $209;
 $210 = $34;
 $211 = HEAP8[$210>>0]|0;
 $212 = $211&255;
 $213 = $212 & 1;
 $214 = ($213|0)!=(0);
 if ($214) {
  $28 = $207;
  $215 = $28;
  $27 = $215;
  $216 = $27;
  $26 = $216;
  $217 = $26;
  $218 = (($217) + 8|0);
  $219 = HEAP32[$218>>2]|0;
  $226 = $219;
 } else {
  $33 = $207;
  $220 = $33;
  $32 = $220;
  $221 = $32;
  $31 = $221;
  $222 = $31;
  $223 = (($222) + 1|0);
  $30 = $223;
  $224 = $30;
  $29 = $224;
  $225 = $29;
  $226 = $225;
 }
 $25 = $226;
 $227 = $25;
 $45 = $__lhs_sz$i$i;
 $46 = $__rhs_sz$i$i;
 $228 = $45;
 $229 = $46;
 ;HEAP8[$44+0>>0]=HEAP8[$47+0>>0]|0;
 $42 = $228;
 $43 = $229;
 $230 = $43;
 $231 = $42;
 $39 = $44;
 $40 = $230;
 $41 = $231;
 $232 = $40;
 $233 = HEAP32[$232>>2]|0;
 $234 = $41;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($233>>>0)<($235>>>0);
 if ($236) {
  $237 = $43;
  $240 = $237;
 } else {
  $238 = $42;
  $240 = $238;
 }
 $239 = HEAP32[$240>>2]|0;
 __THREW__ = 0;
 $241 = (invoke_iiii(435,($204|0),($227|0),($239|0))|0);
 $242 = __THREW__; __THREW__ = 0;
 $243 = $242&1;
 if ($243) {
  $247 = ___cxa_find_matching_catch()|0;
  $248 = tempRet0;
  $71 = $247;
  $72 = $248;
  $249 = $71;
  ___cxa_call_unexpected(($249|0));
  // unreachable;
 }
 $__result$i$i = $241;
 $244 = $__result$i$i;
 $245 = ($244|0)!=(0);
 do {
  if ($245) {
   $246 = $__result$i$i;
   $68 = $246;
  } else {
   $250 = HEAP32[$__lhs_sz$i$i>>2]|0;
   $251 = HEAP32[$__rhs_sz$i$i>>2]|0;
   $252 = ($250>>>0)<($251>>>0);
   if ($252) {
    $68 = -1;
    break;
   }
   $253 = HEAP32[$__lhs_sz$i$i>>2]|0;
   $254 = HEAP32[$__rhs_sz$i$i>>2]|0;
   $255 = ($253>>>0)>($254>>>0);
   if ($255) {
    $68 = 1;
    break;
   } else {
    $68 = 0;
    break;
   }
  }
 } while(0);
 $256 = $68;
 $257 = ($256|0)<(0);
 $258 = $257;
 STACKTOP = sp;return ($258|0);
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC2ERS6_($this,$_c) {
 $this = $this|0;
 $_c = $_c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $_c;
 $10 = $6;
 __ZN3vcg18SimpleTempDataBaseC2Ev($10);
 $11 = (2864 + 8|0);
 HEAP32[$10>>2] = $11;
 $12 = (($10) + 4|0);
 $13 = $7;
 HEAP32[$12>>2] = $13;
 $14 = (($10) + 8|0);
 __THREW__ = 0;
 invoke_vi(436,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $8 = $48;
   $9 = $49;
  } else {
   $17 = (($10) + 20|0);
   HEAP32[$17>>2] = 0;
   $18 = (($10) + 8|0);
   $19 = (($10) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $5 = $20;
   $21 = $5;
   $4 = $21;
   $22 = $4;
   $3 = $22;
   $23 = $3;
   $24 = (($23) + 8|0);
   $2 = $24;
   $25 = $2;
   $1 = $25;
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$22>>2]|0;
   $29 = $27;
   $30 = $28;
   $31 = (($29) - ($30))|0;
   $32 = (($31|0) / 44)&-1;
   __THREW__ = 0;
   invoke_vii(437,($18|0),($32|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $35 = (($10) + 8|0);
    $36 = (($10) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $0 = $37;
    $38 = $0;
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$38>>2]|0;
    $42 = $40;
    $43 = $41;
    $44 = (($42) - ($43))|0;
    $45 = (($44|0) / 44)&-1;
    __THREW__ = 0;
    invoke_vii(438,($35|0),($45|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     STACKTOP = sp;return;
    }
   }
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   $8 = $50;
   $9 = $51;
   __THREW__ = 0;
   invoke_vi(439,($14|0));
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $58 = ___cxa_find_matching_catch(0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(440,($10|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 }
 $56 = $8;
 $57 = $9;
 ___resumeException($56|0);
 // unreachable;
}
function __ZN3vcg18SimpleTempDataBaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (3072 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 16)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC1EjjS9_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(441,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED1Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(442,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 }
 $48 = $11;
 $49 = $12;
 ___resumeException($48|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 16)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + ($39<<4)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 16)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -16|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(443,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg18SimpleTempDataBaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6ResizeEj($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sz;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = $1;
 __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex) {
 $this = $this|0;
 $newVertIndex = $newVertIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $newVertIndex;
 $11 = $9;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = (($11) + 8|0);
  $8 = $13;
  $14 = $8;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$14>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 16)&-1;
  $22 = ($12>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $10;
  $24 = $i;
  $0 = $23;
  $1 = $24;
  $25 = $0;
  $26 = $1;
  $27 = HEAP32[$25>>2]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(-1);
  if ($30) {
   $31 = (($11) + 8|0);
   $32 = $10;
   $33 = $i;
   $2 = $32;
   $3 = $33;
   $34 = $2;
   $35 = $3;
   $36 = HEAP32[$34>>2]|0;
   $37 = (($36) + ($35<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $4 = $31;
   $5 = $38;
   $39 = $4;
   $40 = $5;
   $41 = HEAP32[$39>>2]|0;
   $42 = (($41) + ($40<<4)|0);
   $43 = (($11) + 8|0);
   $44 = $i;
   $6 = $43;
   $7 = $44;
   $45 = $6;
   $46 = $7;
   $47 = HEAP32[$45>>2]|0;
   $48 = (($47) + ($46<<4)|0);
   ;HEAP32[$42+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$42+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$48+12>>2]|0;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return;
}
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6SizeOfEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 16;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE9DataBeginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 4|0;
 $9 = $this;
 $11 = $9;
 $12 = (($11) + 8|0);
 $8 = $12;
 $13 = $8;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($13) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if ($17) {
  $28 = 0;
  STACKTOP = sp;return ($28|0);
 } else {
  $18 = (($11) + 8|0);
  $6 = $18;
  $19 = $6;
  $20 = HEAP32[$19>>2]|0;
  $4 = $19;
  $5 = $20;
  $21 = $5;
  $2 = $10;
  $3 = $21;
  $22 = $2;
  $23 = $3;
  $0 = $22;
  $1 = $23;
  $24 = $0;
  $25 = $1;
  HEAP32[$24>>2] = $25;
  $7 = $10;
  $26 = $7;
  $27 = HEAP32[$26>>2]|0;
  $28 = $27;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE2AtEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $i;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<4)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $21 = $18;
 $22 = (2864 + 8|0);
 HEAP32[$21>>2] = $22;
 $23 = (($21) + 8|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 16)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -16|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(443,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 }
 $13 = $24;
 $56 = (($21) + 8|0);
 __THREW__ = 0;
 invoke_vi(439,($56|0));
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if (!($58)) {
  __ZN3vcg18SimpleTempDataBaseD2Ev($21);
  STACKTOP = sp;return;
 }
 $59 = ___cxa_find_matching_catch()|0;
 $60 = tempRet0;
 $19 = $59;
 $20 = $60;
 __THREW__ = 0;
 invoke_vi(440,($21|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $65 = ___cxa_find_matching_catch(0|0)|0;
  $66 = tempRet0;
  ___clang_call_terminate($65);
  // unreachable;
 }
 $63 = $19;
 $64 = $20;
 ___resumeException($63|0);
 // unreachable;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -16|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 92|0;
 $__v = sp + 52|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 16)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 16)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 16)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC1EjjS9_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(444,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(441,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(442,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC1ERKS9_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC1Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 16|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC1EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC2EjjS9_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC1Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 16|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 64|0;
 $__t$i1 = sp + 40|0;
 $__t$i = sp + 88|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP8[$1>>0] = 0;
 $2 = (($1) + 1|0);
 HEAP8[$2>>0] = 0;
 $3 = (($1) + 2|0);
 HEAP8[$3>>0] = 0;
 $4 = (($1) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 4|0);
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 4|0);
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 268435455;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = $75<<4;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + ($85<<4)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + ($90<<4)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC1ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 12|0;
 $29 = sp + 48|0;
 $30 = sp + 100|0;
 $31 = sp + 52|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $28 = $35;
 $36 = $28;
 $27 = $36;
 $2 = $4;
 $3 = -1;
 $37 = $2;
 $38 = $3;
 $0 = $37;
 $1 = $38;
 $39 = $0;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $40;
 $5 = $29;
 HEAP32[$36>>2] = 0;
 $41 = (($36) + 4|0);
 $8 = $10;
 $9 = -1;
 $42 = $8;
 $43 = $9;
 $6 = $42;
 $7 = $43;
 $44 = $6;
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $45;
 $11 = $30;
 HEAP32[$41>>2] = 0;
 $46 = (($36) + 8|0);
 $14 = $16;
 $15 = -1;
 $47 = $14;
 $48 = $15;
 $12 = $47;
 $13 = $48;
 $49 = $12;
 HEAP32[$49>>2] = 0;
 $50 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $50;
 $17 = $31;
 $25 = $46;
 $26 = 0;
 $51 = $25;
 $52 = $26;
 $23 = $51;
 HEAP32[$24>>2] = $52;
 $53 = $23;
 $22 = $24;
 $54 = $22;
 $55 = HEAP32[$54>>2]|0;
 $20 = $53;
 HEAP32[$21>>2] = $55;
 $56 = $20;
 $19 = $56;
 $18 = $21;
 $57 = $18;
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$56>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN3vcg18SimpleTempDataBaseD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg18SimpleTempDataBaseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg18SimpleTempDataBaseD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(8,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 100|0;
 $__p = sp + 80|0;
 $47 = sp + 196|0;
 $45 = $this;
 $46 = $__v;
 $48 = $45;
 $49 = $46;
 $44 = $48;
 $50 = $44;
 $43 = $50;
 $51 = $43;
 $52 = (($51) + 4|0);
 $42 = $52;
 $53 = $42;
 $41 = $53;
 $54 = $41;
 $40 = $54;
 $55 = $40;
 $39 = $55;
 $56 = $39;
 $57 = HEAP32[$56>>2]|0;
 $22 = $48;
 $58 = $22;
 $59 = (($58) + 4|0);
 $21 = $59;
 $60 = $21;
 $20 = $60;
 $61 = $20;
 $19 = $61;
 $62 = $19;
 $18 = $62;
 $63 = $18;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_SD_SD_($__p,$48,$49,$57,$63);
 $17 = $48;
 $64 = $17;
 $16 = $64;
 $65 = $16;
 $66 = (($65) + 4|0);
 $15 = $66;
 $67 = $15;
 $14 = $67;
 $68 = $14;
 $13 = $68;
 $69 = $13;
 $12 = $69;
 $70 = $12;
 $10 = $47;
 $11 = $70;
 $71 = $10;
 $72 = $11;
 $8 = $71;
 $9 = $72;
 $73 = $8;
 $74 = $9;
 HEAP32[$73>>2] = $74;
 $6 = $__p;
 $7 = $47;
 $75 = $6;
 $76 = $7;
 $4 = $75;
 $5 = $76;
 $77 = $4;
 $78 = HEAP32[$77>>2]|0;
 $79 = $5;
 $80 = HEAP32[$79>>2]|0;
 $81 = ($78|0)==($80|0);
 $82 = $81 ^ 1;
 do {
  if ($82) {
   $3 = $48;
   $83 = $3;
   $84 = (($83) + 8|0);
   $2 = $84;
   $85 = $2;
   $1 = $85;
   $86 = $1;
   $87 = $46;
   $0 = $__p;
   $88 = $0;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 16|0);
   $23 = $86;
   $24 = $87;
   $25 = $90;
   $91 = $24;
   $92 = $25;
   __ZN3vcg18PointerToAttributeC1ERKS0_($26,$92);
   __THREW__ = 0;
   $93 = (invoke_iii(433,($91|0),($26|0))|0);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $27 = $96;
    $28 = $97;
    __THREW__ = 0;
    invoke_vi(416,($26|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $102 = ___cxa_find_matching_catch(0|0)|0;
     $103 = tempRet0;
     ___clang_call_terminate($102);
     // unreachable;
    } else {
     $100 = $27;
     $101 = $28;
     ___resumeException($100|0);
     // unreachable;
    }
   } else {
    __ZN3vcg18PointerToAttributeD1Ev($26);
    if ($93) {
     break;
    }
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $38 = $48;
 $104 = $38;
 $37 = $104;
 $105 = $37;
 $106 = (($105) + 4|0);
 $36 = $106;
 $107 = $36;
 $35 = $107;
 $108 = $35;
 $34 = $108;
 $109 = $34;
 $33 = $109;
 $110 = $33;
 $31 = $agg$result;
 $32 = $110;
 $111 = $31;
 $112 = $32;
 $29 = $111;
 $30 = $112;
 $113 = $29;
 $114 = $30;
 HEAP32[$113>>2] = $114;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_SD_SD_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 24|0;
 $18 = sp + 52|0;
 $23 = sp + 100|0;
 $19 = $this;
 $20 = $__v;
 $21 = $__root;
 $22 = $__result;
 $24 = $19;
 while(1) {
  $25 = $21;
  $16 = $18;
  $17 = -1;
  $26 = $16;
  $27 = $17;
  $14 = $26;
  $15 = $27;
  $28 = $14;
  HEAP32[$28>>2] = 0;
  $29 = HEAP32[$18>>2]|0;
  HEAP32[$23>>2] = $29;
  $3 = $23;
  $30 = ($25|0)!=(0|0);
  if (!($30)) {
   label = 11;
   break;
  }
  $2 = $24;
  $31 = $2;
  $32 = (($31) + 8|0);
  $1 = $32;
  $33 = $1;
  $0 = $33;
  $34 = $0;
  $35 = $21;
  $36 = (($35) + 16|0);
  $37 = $20;
  $4 = $34;
  $5 = $36;
  $6 = $37;
  $38 = $5;
  $39 = $6;
  __ZN3vcg18PointerToAttributeC1ERKS0_($7,$39);
  __THREW__ = 0;
  $40 = (invoke_iii(433,($38|0),($7|0))|0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   break;
  }
  __ZN3vcg18PointerToAttributeD1Ev($7);
  if ($40) {
   $54 = $21;
   $55 = (($54) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $21 = $56;
  } else {
   $51 = $21;
   $22 = $51;
   $52 = $21;
   $53 = HEAP32[$52>>2]|0;
   $21 = $53;
  }
 }
 if ((label|0) == 11) {
  $57 = $22;
  $12 = $agg$result;
  $13 = $57;
  $58 = $12;
  $59 = $13;
  $10 = $58;
  $11 = $59;
  $60 = $10;
  $61 = $11;
  HEAP32[$60>>2] = $61;
  STACKTOP = sp;return;
 }
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 $8 = $43;
 $9 = $44;
 __THREW__ = 0;
 invoke_vi(416,($7|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if ($46) {
  $49 = ___cxa_find_matching_catch(0|0)|0;
  $50 = tempRet0;
  ___clang_call_terminate($49);
  // unreachable;
 } else {
  $47 = $8;
  $48 = $9;
  ___resumeException($47|0);
  // unreachable;
 }
}
function __ZN3vcg18PointerToAttributeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $9;
 $11 = (($10) + 4|0);
 $8 = $11;
 $12 = $8;
 $7 = $12;
 $13 = $7;
 $6 = $13;
 $14 = $6;
 $5 = $14;
 $15 = $5;
 $4 = $15;
 $16 = $4;
 $3 = $16;
 $2 = $13;
 $17 = $2;
 $1 = $17;
 $18 = $1;
 $0 = $18;
 $19 = $0;
 $__a$i$i$i = $19;
 $__i$i$i$i = 0;
 while(1) {
  $20 = $__i$i$i$i;
  $21 = ($20>>>0)<(3);
  if (!($21)) {
   break;
  }
  $22 = $__i$i$i$i;
  $23 = $__a$i$i$i;
  $24 = (($23) + ($22<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = $__i$i$i$i;
  $26 = (($25) + 1)|0;
  $__i$i$i$i = $26;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($m) {
 $m = $m|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 8|0;
 $8 = $m;
 $13 = $8;
 $14 = (__ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_($13)|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (___cxa_allocate_exception(8)|0);
 $$expand_i1_val = 1;
 $12 = $$expand_i1_val;
 $6 = $9;
 $7 = 3376;
 $16 = $6;
 $17 = $7;
 $4 = $16;
 $5 = $17;
 $18 = $4;
 $3 = $18;
 $19 = $3;
 $2 = $19;
 $20 = $2;
 $1 = $20;
 $21 = $1;
 $0 = $21;
 $22 = $5;
 $23 = $5;
 __THREW__ = 0;
 $24 = (invoke_ii(445,($23|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(446,($18|0),($22|0),($24|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 7;
   } else {
    __THREW__ = 0;
    invoke_vii(447,($15|0),($9|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $$expand_i1_val2 = 0;
     $12 = $$expand_i1_val2;
     __THREW__ = 0;
     invoke_viii(448,($15|0),(3168|0),(11|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      // unreachable;
     }
    }
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $10 = $35;
    $11 = $36;
    __THREW__ = 0;
    invoke_vi(397,($9|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $42 = ___cxa_find_matching_catch(0|0)|0;
     $43 = tempRet0;
     ___clang_call_terminate($42);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $10 = $33;
  $11 = $34;
 }
 $$pre_trunc = $12;
 $39 = $$pre_trunc&1;
 if ($39) {
  ___cxa_free_exception(($15|0));
 }
 $40 = $10;
 $41 = $11;
 ___resumeException($40|0);
 // unreachable;
}
function __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($m) {
 $m = $m|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 8|0;
 $8 = $m;
 $13 = $8;
 $14 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($13)|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (___cxa_allocate_exception(8)|0);
 $$expand_i1_val = 1;
 $12 = $$expand_i1_val;
 $6 = $9;
 $7 = 3112;
 $16 = $6;
 $17 = $7;
 $4 = $16;
 $5 = $17;
 $18 = $4;
 $3 = $18;
 $19 = $3;
 $2 = $19;
 $20 = $2;
 $1 = $20;
 $21 = $1;
 $0 = $21;
 $22 = $5;
 $23 = $5;
 __THREW__ = 0;
 $24 = (invoke_ii(445,($23|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(446,($18|0),($22|0),($24|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 7;
   } else {
    __THREW__ = 0;
    invoke_vii(447,($15|0),($9|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $$expand_i1_val2 = 0;
     $12 = $$expand_i1_val2;
     __THREW__ = 0;
     invoke_viii(448,($15|0),(3168|0),(11|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      // unreachable;
     }
    }
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $10 = $35;
    $11 = $36;
    __THREW__ = 0;
    invoke_vi(397,($9|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $42 = ___cxa_find_matching_catch(0|0)|0;
     $43 = tempRet0;
     ___clang_call_terminate($42);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $10 = $33;
  $11 = $34;
 }
 $$pre_trunc = $12;
 $39 = $$pre_trunc&1;
 if ($39) {
  ___cxa_free_exception(($15|0));
 }
 $40 = $10;
 $41 = $11;
 ___resumeException($40|0);
 // unreachable;
}
function __ZN3vcg25MissingComponentExceptionC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $err;
 $2 = $0;
 $3 = $1;
 __ZN3vcg25MissingComponentExceptionC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg25MissingComponentExceptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg25MissingComponentExceptionD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg25MissingComponentExceptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt13runtime_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg25MissingComponentExceptionC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $err;
 $4 = $0;
 $5 = $1;
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($4,$5);
 $6 = (3184 + 8|0);
 HEAP32[$4>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(449,(6896|0),(3208|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $1;
  __THREW__ = 0;
  $11 = (invoke_iii(450,($7|0),($10|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   (invoke_iii(449,($11|0),(3240|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    STACKTOP = sp;return;
   }
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __ZNSt13runtime_errorD2Ev($4);
 $18 = $2;
 $19 = $3;
 ___resumeException($18|0);
 // unreachable;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = $__os;
 $25 = $__str;
 $26 = $24;
 $27 = $25;
 $23 = $27;
 $28 = $23;
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $20 = $30;
 $31 = $20;
 $19 = $31;
 $32 = $19;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 & 1;
 $36 = ($35|0)!=(0);
 if ($36) {
  $13 = $29;
  $37 = $13;
  $12 = $37;
  $38 = $12;
  $11 = $38;
  $39 = $11;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $48 = $41;
 } else {
  $18 = $29;
  $42 = $18;
  $17 = $42;
  $43 = $17;
  $16 = $43;
  $44 = $16;
  $45 = (($44) + 1|0);
  $15 = $45;
  $46 = $15;
  $14 = $46;
  $47 = $14;
  $48 = $47;
 }
 $10 = $48;
 $49 = $10;
 $50 = $25;
 $9 = $50;
 $51 = $9;
 $8 = $51;
 $52 = $8;
 $7 = $52;
 $53 = $7;
 $6 = $53;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 & 1;
 $58 = ($57|0)!=(0);
 if ($58) {
  $2 = $51;
  $59 = $2;
  $1 = $59;
  $60 = $1;
  $0 = $60;
  $61 = $0;
  $62 = (($61) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $70 = $63;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 } else {
  $5 = $51;
  $64 = $5;
  $4 = $64;
  $65 = $4;
  $3 = $65;
  $66 = $3;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 >> 1;
  $70 = $69;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 }
 return 0|0;
}
function __ZN3vcg25MissingComponentExceptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg25MissingComponentExceptionD1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK3vcg25MissingComponentException4whatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (3248|0);
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $5 = sp + 20|0;
 $__s = sp + 40|0;
 $27 = sp + 16|0;
 $28 = sp + 48|0;
 $22 = $__os;
 $23 = $__str;
 $24 = $__len;
 $29 = $22;
 __THREW__ = 0;
 invoke_vii(451,($__s|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 L1: do {
  if ($31) {
   label = 23;
  } else {
   $21 = $__s;
   $32 = $21;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&1;
   L4: do {
    if ($34) {
     $35 = $22;
     $19 = $27;
     $20 = $35;
     $36 = $19;
     $37 = $20;
     $17 = $36;
     $18 = $37;
     $38 = $17;
     $39 = $18;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + -12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($39) + ($42)|0);
     $16 = $43;
     $44 = $16;
     $15 = $44;
     $45 = $15;
     $46 = (($45) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     HEAP32[$38>>2] = $47;
     $48 = $23;
     $49 = $22;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + -12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($49) + ($52)|0);
     $10 = $53;
     $54 = $10;
     $55 = (($54) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 176;
     $58 = ($57|0)==(32);
     if ($58) {
      $59 = $23;
      $60 = $24;
      $61 = (($59) + ($60)|0);
      $112 = $61;
     } else {
      $62 = $23;
      $112 = $62;
     }
     $63 = $23;
     $64 = $24;
     $65 = (($63) + ($64)|0);
     $66 = $22;
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + -12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($66) + ($69)|0);
     $71 = $22;
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + -12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($71) + ($74)|0);
     $8 = $75;
     $76 = $8;
     $77 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $78 = (($76) + 76|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($77,$79)|0);
     do {
      if ($80) {
       $3 = $76;
       $4 = 32;
       $81 = $3;
       __THREW__ = 0;
       invoke_vii(452,($5|0),($81|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        label = 24;
       } else {
        $2 = $5;
        $84 = $2;
        __THREW__ = 0;
        $85 = (invoke_iii(453,($84|0),(11408|0))|0);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if (!($87)) {
         $88 = $4;
         $0 = $85;
         $1 = $88;
         $89 = $0;
         $90 = HEAP32[$89>>2]|0;
         $91 = (($90) + 28|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = $1;
         __THREW__ = 0;
         $94 = (invoke_iii($92|0,($89|0),($93|0))|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if (!($96)) {
          __THREW__ = 0;
          invoke_vi(454,($5|0));
          $105 = __THREW__; __THREW__ = 0;
          $106 = $105&1;
          if ($106) {
           label = 24;
           break;
          }
          $107 = $94 << 24 >> 24;
          $108 = (($76) + 76|0);
          HEAP32[$108>>2] = $107;
          label = 17;
          break;
         }
        }
        $97 = ___cxa_find_matching_catch(0|0,0|0)|0;
        $98 = tempRet0;
        $6 = $97;
        $7 = $98;
        __THREW__ = 0;
        invoke_vi(454,($5|0));
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         $103 = ___cxa_find_matching_catch(0|0,0|0,0|0)|0;
         $104 = tempRet0;
         ___clang_call_terminate($103);
         // unreachable;
        } else {
         $101 = $6;
         $102 = $7;
         $eh$lpad$body$index2Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         break;
        }
       }
      } else {
       label = 17;
      }
     } while(0);
     do {
      if ((label|0) == 17) {
       $109 = (($76) + 76|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = $110&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$27+0>>2]|0;
       invoke_viiiiiii(455,($28|0),($$byval_copy|0),($48|0),($112|0),($65|0),($70|0),($111|0));
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if ($114) {
        label = 24;
       } else {
        $9 = $28;
        $115 = $9;
        $116 = HEAP32[$115>>2]|0;
        $117 = ($116|0)==(0|0);
        if ($117) {
         $118 = $22;
         $119 = HEAP32[$118>>2]|0;
         $120 = (($119) + -12|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = (($118) + ($121)|0);
         $13 = $122;
         $14 = 5;
         $123 = $13;
         $124 = $14;
         $11 = $123;
         $12 = $124;
         $125 = $11;
         $126 = (($125) + 16|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = $12;
         $129 = $127 | $128;
         __THREW__ = 0;
         invoke_vii(456,($125|0),($129|0));
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if ($131) {
          label = 24;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 24) {
      $134 = ___cxa_find_matching_catch(0|0)|0;
      $135 = tempRet0;
      $eh$lpad$body$index2Z2D = $135;$eh$lpad$body$indexZ2D = $134;
     }
     $25 = $eh$lpad$body$indexZ2D;
     $26 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(457,($__s|0));
     $136 = __THREW__; __THREW__ = 0;
     $137 = $136&1;
     if ($137) {
      $155 = ___cxa_find_matching_catch(0|0)|0;
      $156 = tempRet0;
      ___clang_call_terminate($155);
      // unreachable;
     } else {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(457,($__s|0));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   if ($139) {
    label = 23;
   } else {
    $148 = $22;
    STACKTOP = sp;return ($148|0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $132 = ___cxa_find_matching_catch(0|0)|0;
  $133 = tempRet0;
  $25 = $132;
  $26 = $133;
 }
 $140 = $25;
 (___cxa_begin_catch(($140|0))|0);
 $141 = $22;
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + -12|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($141) + ($144)|0);
 __THREW__ = 0;
 invoke_vi(458,($145|0));
 $146 = __THREW__; __THREW__ = 0;
 $147 = $146&1;
 if (!($147)) {
  ___cxa_end_catch();
  $148 = $22;
  STACKTOP = sp;return ($148|0);
 }
 $149 = ___cxa_find_matching_catch()|0;
 $150 = tempRet0;
 $25 = $149;
 $26 = $150;
 __THREW__ = 0;
 invoke_v(459);
 $151 = __THREW__; __THREW__ = 0;
 $152 = $151&1;
 if ($152) {
  $155 = ___cxa_find_matching_catch(0|0)|0;
  $156 = tempRet0;
  ___clang_call_terminate($155);
  // unreachable;
 }
 $153 = $25;
 $154 = $26;
 ___resumeException($153|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $29 = sp + 112|0;
 $40 = sp + 164|0;
 $50 = sp + 204|0;
 $59 = sp + 244|0;
 $65 = sp;
 $66 = sp + 260|0;
 $__sp = sp + 128|0;
 $69 = sp + 8|0;
 $71 = sp + 24|0;
 $60 = $__ob;
 $61 = $__op;
 $62 = $__oe;
 $63 = $__iob;
 $64 = $__fl;
 $72 = HEAP32[$__s>>2]|0;
 $57 = $59;
 $58 = -1;
 $73 = $57;
 $74 = $58;
 $55 = $73;
 $56 = $74;
 $75 = $55;
 HEAP32[$75>>2] = 0;
 $76 = HEAP32[$59>>2]|0;
 HEAP32[$65>>2] = $76;
 $54 = $65;
 $77 = ($72|0)==(0|0);
 if ($77) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $78 = $62;
 $79 = $60;
 $80 = $78;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $__sz = $82;
 $83 = $63;
 $42 = $83;
 $84 = $42;
 $85 = (($84) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $__ns = $86;
 $87 = $__ns;
 $88 = $__sz;
 $89 = ($87|0)>($88|0);
 if ($89) {
  $90 = $__sz;
  $91 = $__ns;
  $92 = (($91) - ($90))|0;
  $__ns = $92;
 } else {
  $__ns = 0;
 }
 $93 = $61;
 $94 = $60;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $__np = $97;
 $98 = $__np;
 $99 = ($98|0)>(0);
 do {
  if ($99) {
   $100 = HEAP32[$__s>>2]|0;
   $101 = $60;
   $102 = $__np;
   $30 = $100;
   $31 = $101;
   $32 = $102;
   $103 = $30;
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + 48|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $31;
   $108 = $32;
   $109 = (FUNCTION_TABLE_iiii[$106 & 1023]($103,$107,$108)|0);
   $110 = $__np;
   $111 = ($109|0)!=($110|0);
   if (!($111)) {
    break;
   }
   $27 = $29;
   $28 = -1;
   $112 = $27;
   $113 = $28;
   $25 = $112;
   $26 = $113;
   $114 = $25;
   HEAP32[$114>>2] = 0;
   $115 = HEAP32[$29>>2]|0;
   HEAP32[$66>>2] = $115;
   $0 = $66;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $116 = $__ns;
 $117 = ($116|0)>(0);
 do {
  if ($117) {
   $118 = $__ns;
   $119 = $64;
   $8 = $__sp;
   $9 = $118;
   $10 = $119;
   $120 = $8;
   $121 = $9;
   $122 = $10;
   $5 = $120;
   $6 = $121;
   $7 = $122;
   $123 = $5;
   $4 = $123;
   $124 = $4;
   $3 = $124;
   $125 = $3;
   $2 = $125;
   $126 = $2;
   $1 = $126;
   $127 = $6;
   $128 = $7;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($123,$127,$128);
   $129 = HEAP32[$__s>>2]|0;
   $24 = $__sp;
   $130 = $24;
   $23 = $130;
   $131 = $23;
   $22 = $131;
   $132 = $22;
   $21 = $132;
   $133 = $21;
   $20 = $133;
   $134 = $20;
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $136 & 1;
   $138 = ($137|0)!=(0);
   if ($138) {
    $14 = $131;
    $139 = $14;
    $13 = $139;
    $140 = $13;
    $12 = $140;
    $141 = $12;
    $142 = (($141) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $150 = $143;
   } else {
    $19 = $131;
    $144 = $19;
    $18 = $144;
    $145 = $18;
    $17 = $145;
    $146 = $17;
    $147 = (($146) + 1|0);
    $16 = $147;
    $148 = $16;
    $15 = $148;
    $149 = $15;
    $150 = $149;
   }
   $11 = $150;
   $151 = $11;
   $152 = $__ns;
   $33 = $129;
   $34 = $151;
   $35 = $152;
   $153 = $33;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 48|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $34;
   $158 = $35;
   __THREW__ = 0;
   $159 = (invoke_iiii($156|0,($153|0),($157|0),($158|0))|0);
   $160 = __THREW__; __THREW__ = 0;
   $161 = $160&1;
   if ($161) {
    $168 = ___cxa_find_matching_catch()|0;
    $169 = tempRet0;
    $67 = $168;
    $68 = $169;
    __THREW__ = 0;
    invoke_vi(397,($__sp|0));
    $170 = __THREW__; __THREW__ = 0;
    $171 = $170&1;
    if ($171) {
     $203 = ___cxa_find_matching_catch(0|0)|0;
     $204 = tempRet0;
     ___clang_call_terminate($203);
     // unreachable;
    }
    $201 = $67;
    $202 = $68;
    ___resumeException($201|0);
    // unreachable;
   }
   $162 = $__ns;
   $163 = ($159|0)!=($162|0);
   if ($163) {
    $38 = $40;
    $39 = -1;
    $164 = $38;
    $165 = $39;
    $36 = $164;
    $37 = $165;
    $166 = $36;
    HEAP32[$166>>2] = 0;
    $167 = HEAP32[$40>>2]|0;
    HEAP32[$69>>2] = $167;
    $41 = $69;
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $70 = 1;
   } else {
    $70 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $70;
   if ((($cleanup$dest|0) == 0)) {
    break;
   } else if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $172 = $62;
 $173 = $61;
 $174 = $172;
 $175 = $173;
 $176 = (($174) - ($175))|0;
 $__np = $176;
 $177 = $__np;
 $178 = ($177|0)>(0);
 do {
  if ($178) {
   $179 = HEAP32[$__s>>2]|0;
   $180 = $61;
   $181 = $__np;
   $43 = $179;
   $44 = $180;
   $45 = $181;
   $182 = $43;
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + 48|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $44;
   $187 = $45;
   $188 = (FUNCTION_TABLE_iiii[$185 & 1023]($182,$186,$187)|0);
   $189 = $__np;
   $190 = ($188|0)!=($189|0);
   if (!($190)) {
    break;
   }
   $48 = $50;
   $49 = -1;
   $191 = $48;
   $192 = $49;
   $46 = $191;
   $47 = $192;
   $193 = $46;
   HEAP32[$193>>2] = 0;
   $194 = HEAP32[$50>>2]|0;
   HEAP32[$71>>2] = $194;
   $51 = $71;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $195 = $63;
 $52 = $195;
 $53 = 0;
 $196 = $52;
 $197 = (($196) + 12|0);
 $198 = HEAP32[$197>>2]|0;
 $__r$i = $198;
 $199 = $53;
 $200 = (($196) + 12|0);
 HEAP32[$200>>2] = $199;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri25FaceVectorHasPerFaceFlagsI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri25FaceVectorHasPerFaceFlagsI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri24FaceVectorHasFFAdjacencyI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC2EPS2_PS4_($this,$_mp,$_intFunc) {
 $this = $this|0;
 $_mp = $_mp|0;
 $_intFunc = $_intFunc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_mp;
 $2 = $_intFunc;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7EdgeLenI6MyMeshfEC2Ef($this,$threshold) {
 $this = $this|0;
 $threshold = +$threshold;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $threshold;
 $2 = $0;
 $3 = $1;
 __ZN3vcg3tri7EdgeLenI6MyMeshfE6setThrEf($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7EdgeLenI6MyMeshfE6setThrEf($this,$threshold) {
 $this = $this|0;
 $threshold = +$threshold;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $threshold;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = $3 * $4;
 HEAPF32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE14FillEdgeVectorERS2_RNSt3__16vectorINS3_5PEdgeENS5_9allocatorIS7_EEEEb($m,$edgeVec,$includeFauxEdge) {
 $m = $m|0;
 $edgeVec = $edgeVec|0;
 $includeFauxEdge = $includeFauxEdge|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $fi = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 184|0;
 $fi = sp;
 $40 = sp + 80|0;
 $41 = sp + 112|0;
 $37 = $m;
 $38 = $edgeVec;
 $42 = $includeFauxEdge&1;
 $39 = $42;
 $43 = $38;
 $44 = $37;
 $45 = (($44) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46*3)|0;
 __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE7reserveEj($43,$47);
 $48 = $37;
 $49 = (($48) + 32|0);
 $36 = $49;
 $50 = $36;
 $51 = HEAP32[$50>>2]|0;
 $34 = $50;
 $35 = $51;
 $52 = $35;
 $32 = $fi;
 $33 = $52;
 $53 = $32;
 $54 = $33;
 $30 = $53;
 $31 = $54;
 $55 = $30;
 $56 = $31;
 HEAP32[$55>>2] = $56;
 while(1) {
  $57 = $37;
  $58 = (($57) + 32|0);
  $16 = $58;
  $59 = $16;
  $60 = (($59) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $14 = $59;
  $15 = $61;
  $62 = $15;
  $12 = $40;
  $13 = $62;
  $63 = $12;
  $64 = $13;
  $10 = $63;
  $11 = $64;
  $65 = $10;
  $66 = $11;
  HEAP32[$65>>2] = $66;
  $8 = $fi;
  $9 = $40;
  $67 = $8;
  $68 = $9;
  $6 = $67;
  $7 = $68;
  $69 = $6;
  $5 = $69;
  $70 = $5;
  $71 = HEAP32[$70>>2]|0;
  $72 = $7;
  $4 = $72;
  $73 = $4;
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71|0)==($74|0);
  $76 = $75 ^ 1;
  if (!($76)) {
   break;
  }
  $3 = $fi;
  $77 = $3;
  $78 = HEAP32[$77>>2]|0;
  $79 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($78)|0);
  if (!($79)) {
   $j = 0;
   while(1) {
    $80 = $j;
    $2 = $fi;
    $81 = $2;
    $82 = HEAP32[$81>>2]|0;
    $83 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($82)|0);
    $84 = ($80|0)<($83|0);
    if (!($84)) {
     break;
    }
    $85 = $39;
    $86 = $85&1;
    if ($86) {
     label = 8;
    } else {
     $0 = $fi;
     $87 = $0;
     $88 = HEAP32[$87>>2]|0;
     $89 = $j;
     $90 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($88,$89)|0);
     if (!($90)) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $91 = $38;
     $1 = $fi;
     $92 = $1;
     $93 = HEAP32[$92>>2]|0;
     $94 = $j;
     __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC1EP6MyFacei($41,$93,$94);
     $27 = $91;
     $28 = $41;
     $95 = $27;
     $96 = (($95) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $26 = $95;
     $98 = $26;
     $99 = (($98) + 8|0);
     $25 = $99;
     $100 = $25;
     $24 = $100;
     $101 = $24;
     $102 = HEAP32[$101>>2]|0;
     $103 = ($97|0)!=($102|0);
     if ($103) {
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC1ERKS9_j($__annotator$i,$95,1);
      $23 = $95;
      $104 = $23;
      $105 = (($104) + 8|0);
      $22 = $105;
      $106 = $22;
      $21 = $106;
      $107 = $21;
      $108 = (($95) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $20 = $109;
      $110 = $20;
      $111 = $28;
      $17 = $107;
      $18 = $110;
      $19 = $111;
      $112 = $18;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = $19;
       ;HEAP32[$112+0>>2]=HEAP32[$114+0>>2]|0;HEAP32[$112+4>>2]=HEAP32[$114+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$114+8>>2]|0;HEAP32[$112+12>>2]=HEAP32[$114+12>>2]|0;
      }
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
      $115 = (($95) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($116) + 16|0);
      HEAP32[$115>>2] = $117;
     } else {
      $118 = $28;
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE21__push_back_slow_pathIKS6_EEvRT_($95,$118);
     }
    }
    $119 = $j;
    $120 = (($119) + 1)|0;
    $j = $120;
   }
  }
  $29 = $fi;
  $121 = $29;
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + 44|0);
  HEAP32[$121>>2] = $123;
 }
 STACKTOP = sp;return;
}
function __ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeeqERKS4_($this,$pe) {
 $this = $this|0;
 $pe = $pe|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pe;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $7 = (($2) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==($11|0);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -16|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 32|0;
 $__t$i4 = sp + 72|0;
 $__t$i3 = sp + 136|0;
 $__t$i2 = sp + 352|0;
 $__t$i1 = sp + 232|0;
 $__t$i = sp + 304|0;
 $60 = $__first;
 $61 = $__last;
 $62 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $63 = $61;
   $64 = $60;
   $65 = $63;
   $66 = $64;
   $67 = (($65) - ($66))|0;
   $68 = (($67|0) / 16)&-1;
   $__len = $68;
   $69 = $__len;
   switch ($69|0) {
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   default: {
   }
   }
   $110 = $__len;
   $111 = ($110|0)<=(30);
   if ($111) {
    label = 12;
    break L1;
   }
   $115 = $60;
   $__m = $115;
   $116 = $61;
   $__lm1 = $116;
   $117 = $__lm1;
   $118 = (($117) + -16|0);
   $__lm1 = $118;
   $119 = $__len;
   $120 = ($119|0)>=(1000);
   if ($120) {
    $121 = $__len;
    $122 = (($121|0) / 2)&-1;
    $__delta = $122;
    $123 = $__delta;
    $124 = $__m;
    $125 = (($124) + ($123<<4)|0);
    $__m = $125;
    $126 = $__delta;
    $127 = (($126|0) / 2)&-1;
    $__delta = $127;
    $128 = $60;
    $129 = $60;
    $130 = $__delta;
    $131 = (($129) + ($130<<4)|0);
    $132 = $__m;
    $133 = $__m;
    $134 = $__delta;
    $135 = (($133) + ($134<<4)|0);
    $136 = $__lm1;
    $137 = $62;
    $138 = (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($128,$131,$132,$135,$136,$137)|0);
    $__n_swaps = $138;
   } else {
    $139 = $__len;
    $140 = (($139|0) / 2)&-1;
    $__delta = $140;
    $141 = $__delta;
    $142 = $__m;
    $143 = (($142) + ($141<<4)|0);
    $__m = $143;
    $144 = $60;
    $145 = $__m;
    $146 = $__lm1;
    $147 = $62;
    $148 = (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($144,$145,$146,$147)|0);
    $__n_swaps = $148;
   }
   $149 = $60;
   $__i = $149;
   $150 = $__lm1;
   $__j = $150;
   $151 = $62;
   $152 = $__i;
   $153 = $__m;
   $49 = $151;
   $50 = $152;
   $51 = $153;
   $154 = $50;
   $155 = $51;
   $156 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($154,$155)|0);
   if ($156) {
    break;
   }
   while(1) {
    $157 = $__i;
    $158 = $__j;
    $159 = (($158) + -16|0);
    $__j = $159;
    $160 = ($157|0)==($159|0);
    if ($160) {
     break;
    }
    $231 = $62;
    $232 = $__j;
    $233 = $__m;
    $24 = $231;
    $25 = $232;
    $26 = $233;
    $234 = $25;
    $235 = $26;
    $236 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($234,$235)|0);
    if ($236) {
     label = 41;
     break L3;
    }
   }
   $161 = $__i;
   $162 = (($161) + 16|0);
   $__i = $162;
   $163 = $61;
   $__j = $163;
   $164 = $62;
   $165 = $60;
   $166 = $__j;
   $167 = (($166) + -16|0);
   $__j = $167;
   $46 = $164;
   $47 = $165;
   $48 = $167;
   $168 = $47;
   $169 = $48;
   $170 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($168,$169)|0);
   if (!($170)) {
    while(1) {
     $171 = $__i;
     $172 = $__j;
     $173 = ($171|0)==($172|0);
     if ($173) {
      label = 22;
      break L1;
     }
     $174 = $62;
     $175 = $60;
     $176 = $__i;
     $43 = $174;
     $44 = $175;
     $45 = $176;
     $177 = $44;
     $178 = $45;
     $179 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($177,$178)|0);
     if ($179) {
      break;
     }
     $193 = $__i;
     $194 = (($193) + 16|0);
     $__i = $194;
    }
    $180 = $__i;
    $181 = $__j;
    $41 = $180;
    $42 = $181;
    $182 = $41;
    $40 = $182;
    $183 = $40;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$183+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$183+12>>2]|0;
    $184 = $41;
    $185 = $42;
    $38 = $185;
    $186 = $38;
    ;HEAP32[$184+0>>2]=HEAP32[$186+0>>2]|0;HEAP32[$184+4>>2]=HEAP32[$186+4>>2]|0;HEAP32[$184+8>>2]=HEAP32[$186+8>>2]|0;HEAP32[$184+12>>2]=HEAP32[$186+12>>2]|0;
    $187 = $42;
    $39 = $__t$i1;
    $188 = $39;
    ;HEAP32[$187+0>>2]=HEAP32[$188+0>>2]|0;HEAP32[$187+4>>2]=HEAP32[$188+4>>2]|0;HEAP32[$187+8>>2]=HEAP32[$188+8>>2]|0;HEAP32[$187+12>>2]=HEAP32[$188+12>>2]|0;
    $189 = $__n_swaps;
    $190 = (($189) + 1)|0;
    $__n_swaps = $190;
    $191 = $__i;
    $192 = (($191) + 16|0);
    $__i = $192;
   }
   $195 = $__i;
   $196 = $__j;
   $197 = ($195|0)==($196|0);
   if ($197) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $198 = $62;
     $199 = $60;
     $200 = $__i;
     $35 = $198;
     $36 = $199;
     $37 = $200;
     $201 = $36;
     $202 = $37;
     $203 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($201,$202)|0);
     $204 = $203 ^ 1;
     if (!($204)) {
      break;
     }
     $205 = $__i;
     $206 = (($205) + 16|0);
     $__i = $206;
    }
    while(1) {
     $207 = $62;
     $208 = $60;
     $209 = $__j;
     $210 = (($209) + -16|0);
     $__j = $210;
     $32 = $207;
     $33 = $208;
     $34 = $210;
     $211 = $33;
     $212 = $34;
     $213 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($211,$212)|0);
     if (!($213)) {
      break;
     }
    }
    $214 = $__i;
    $215 = $__j;
    $216 = ($214>>>0)>=($215>>>0);
    if ($216) {
     break;
    }
    $217 = $__i;
    $218 = $__j;
    $30 = $217;
    $31 = $218;
    $219 = $30;
    $29 = $219;
    $220 = $29;
    ;HEAP32[$__t$i2+0>>2]=HEAP32[$220+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$220+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$220+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$220+12>>2]|0;
    $221 = $30;
    $222 = $31;
    $27 = $222;
    $223 = $27;
    ;HEAP32[$221+0>>2]=HEAP32[$223+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$223+8>>2]|0;HEAP32[$221+12>>2]=HEAP32[$223+12>>2]|0;
    $224 = $31;
    $28 = $__t$i2;
    $225 = $28;
    ;HEAP32[$224+0>>2]=HEAP32[$225+0>>2]|0;HEAP32[$224+4>>2]=HEAP32[$225+4>>2]|0;HEAP32[$224+8>>2]=HEAP32[$225+8>>2]|0;HEAP32[$224+12>>2]=HEAP32[$225+12>>2]|0;
    $226 = $__n_swaps;
    $227 = (($226) + 1)|0;
    $__n_swaps = $227;
    $228 = $__i;
    $229 = (($228) + 16|0);
    $__i = $229;
   }
   $230 = $__i;
   $60 = $230;
  }
  if ((label|0) == 41) {
   label = 0;
   $237 = $__i;
   $238 = $__j;
   $22 = $237;
   $23 = $238;
   $239 = $22;
   $21 = $239;
   $240 = $21;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$240+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$240+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$240+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$240+12>>2]|0;
   $241 = $22;
   $242 = $23;
   $19 = $242;
   $243 = $19;
   ;HEAP32[$241+0>>2]=HEAP32[$243+0>>2]|0;HEAP32[$241+4>>2]=HEAP32[$243+4>>2]|0;HEAP32[$241+8>>2]=HEAP32[$243+8>>2]|0;HEAP32[$241+12>>2]=HEAP32[$243+12>>2]|0;
   $244 = $23;
   $20 = $__t$i3;
   $245 = $20;
   ;HEAP32[$244+0>>2]=HEAP32[$245+0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$244+8>>2]=HEAP32[$245+8>>2]|0;HEAP32[$244+12>>2]=HEAP32[$245+12>>2]|0;
   $246 = $__n_swaps;
   $247 = (($246) + 1)|0;
   $__n_swaps = $247;
  }
  $248 = $__i;
  $249 = (($248) + 16|0);
  $__i = $249;
  $250 = $__i;
  $251 = $__j;
  $252 = ($250>>>0)<($251>>>0);
  if ($252) {
   while(1) {
    while(1) {
     $253 = $62;
     $254 = $__i;
     $255 = $__m;
     $16 = $253;
     $17 = $254;
     $18 = $255;
     $256 = $17;
     $257 = $18;
     $258 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($256,$257)|0);
     if (!($258)) {
      break;
     }
     $259 = $__i;
     $260 = (($259) + 16|0);
     $__i = $260;
    }
    while(1) {
     $261 = $62;
     $262 = $__j;
     $263 = (($262) + -16|0);
     $__j = $263;
     $264 = $__m;
     $13 = $261;
     $14 = $263;
     $15 = $264;
     $265 = $14;
     $266 = $15;
     $267 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($265,$266)|0);
     $268 = $267 ^ 1;
     if (!($268)) {
      break;
     }
    }
    $269 = $__i;
    $270 = $__j;
    $271 = ($269>>>0)>($270>>>0);
    if ($271) {
     break;
    }
    $272 = $__i;
    $273 = $__j;
    $11 = $272;
    $12 = $273;
    $274 = $11;
    $10 = $274;
    $275 = $10;
    ;HEAP32[$__t$i4+0>>2]=HEAP32[$275+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$275+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$275+8>>2]|0;HEAP32[$__t$i4+12>>2]=HEAP32[$275+12>>2]|0;
    $276 = $11;
    $277 = $12;
    $8 = $277;
    $278 = $8;
    ;HEAP32[$276+0>>2]=HEAP32[$278+0>>2]|0;HEAP32[$276+4>>2]=HEAP32[$278+4>>2]|0;HEAP32[$276+8>>2]=HEAP32[$278+8>>2]|0;HEAP32[$276+12>>2]=HEAP32[$278+12>>2]|0;
    $279 = $12;
    $9 = $__t$i4;
    $280 = $9;
    ;HEAP32[$279+0>>2]=HEAP32[$280+0>>2]|0;HEAP32[$279+4>>2]=HEAP32[$280+4>>2]|0;HEAP32[$279+8>>2]=HEAP32[$280+8>>2]|0;HEAP32[$279+12>>2]=HEAP32[$280+12>>2]|0;
    $281 = $__n_swaps;
    $282 = (($281) + 1)|0;
    $__n_swaps = $282;
    $283 = $__m;
    $284 = $__i;
    $285 = ($283|0)==($284|0);
    if ($285) {
     $286 = $__j;
     $__m = $286;
    }
    $287 = $__i;
    $288 = (($287) + 16|0);
    $__i = $288;
   }
  }
  $289 = $__i;
  $290 = $__m;
  $291 = ($289|0)!=($290|0);
  if ($291) {
   $292 = $62;
   $293 = $__m;
   $294 = $__i;
   $0 = $292;
   $1 = $293;
   $2 = $294;
   $295 = $1;
   $296 = $2;
   $297 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($295,$296)|0);
   if ($297) {
    $298 = $__i;
    $299 = $__m;
    $6 = $298;
    $7 = $299;
    $300 = $6;
    $5 = $300;
    $301 = $5;
    ;HEAP32[$__t$i5+0>>2]=HEAP32[$301+0>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$301+4>>2]|0;HEAP32[$__t$i5+8>>2]=HEAP32[$301+8>>2]|0;HEAP32[$__t$i5+12>>2]=HEAP32[$301+12>>2]|0;
    $302 = $6;
    $303 = $7;
    $3 = $303;
    $304 = $3;
    ;HEAP32[$302+0>>2]=HEAP32[$304+0>>2]|0;HEAP32[$302+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$302+8>>2]=HEAP32[$304+8>>2]|0;HEAP32[$302+12>>2]=HEAP32[$304+12>>2]|0;
    $305 = $7;
    $4 = $__t$i5;
    $306 = $4;
    ;HEAP32[$305+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$305+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$305+8>>2]=HEAP32[$306+8>>2]|0;HEAP32[$305+12>>2]=HEAP32[$306+12>>2]|0;
    $307 = $__n_swaps;
    $308 = (($307) + 1)|0;
    $__n_swaps = $308;
   }
  }
  $309 = $__n_swaps;
  $310 = ($309|0)==(0);
  if ($310) {
   $311 = $60;
   $312 = $__i;
   $313 = $62;
   $314 = (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($311,$312,$313)|0);
   $315 = $314&1;
   $__fs = $315;
   $316 = $__i;
   $317 = (($316) + 16|0);
   $318 = $61;
   $319 = $62;
   $320 = (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($317,$318,$319)|0);
   if ($320) {
    $321 = $__fs;
    $322 = $321&1;
    if ($322) {
     label = 64;
     break;
    }
    $323 = $__i;
    $61 = $323;
    continue;
   }
   $324 = $__fs;
   $325 = $324&1;
   if ($325) {
    $326 = $__i;
    $327 = (($326) + 16|0);
    $__i = $327;
    $60 = $327;
    continue;
   }
  }
  $328 = $__i;
  $329 = $60;
  $330 = $328;
  $331 = $329;
  $332 = (($330) - ($331))|0;
  $333 = (($332|0) / 16)&-1;
  $334 = $61;
  $335 = $__i;
  $336 = $334;
  $337 = $335;
  $338 = (($336) - ($337))|0;
  $339 = (($338|0) / 16)&-1;
  $340 = ($333|0)<($339|0);
  if ($340) {
   $341 = $60;
   $342 = $__i;
   $343 = $62;
   __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($341,$342,$343);
   $344 = $__i;
   $345 = (($344) + 16|0);
   $__i = $345;
   $60 = $345;
  } else {
   $346 = $__i;
   $347 = (($346) + 16|0);
   $348 = $61;
   $349 = $62;
   __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($347,$348,$349);
   $350 = $__i;
   $61 = $350;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $70 = $62;
  $71 = $61;
  $72 = (($71) + -16|0);
  $61 = $72;
  $73 = $60;
  $57 = $70;
  $58 = $72;
  $59 = $73;
  $74 = $58;
  $75 = $59;
  $76 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($74,$75)|0);
  if ($76) {
   $77 = $60;
   $78 = $61;
   $55 = $77;
   $56 = $78;
   $79 = $55;
   $54 = $79;
   $80 = $54;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$80+12>>2]|0;
   $81 = $55;
   $82 = $56;
   $52 = $82;
   $83 = $52;
   ;HEAP32[$81+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$83+12>>2]|0;
   $84 = $56;
   $53 = $__t$i;
   $85 = $53;
   ;HEAP32[$84+0>>2]=HEAP32[$85+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$85+8>>2]|0;HEAP32[$84+12>>2]=HEAP32[$85+12>>2]|0;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $86 = $60;
  $87 = $60;
  $88 = (($87) + 16|0);
  $89 = $61;
  $90 = (($89) + -16|0);
  $61 = $90;
  $91 = $62;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($86,$88,$90,$91)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $92 = $60;
  $93 = $60;
  $94 = (($93) + 16|0);
  $95 = $60;
  $96 = (($95) + 32|0);
  $97 = $61;
  $98 = (($97) + -16|0);
  $61 = $98;
  $99 = $62;
  (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($92,$94,$96,$98,$99)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $100 = $60;
  $101 = $60;
  $102 = (($101) + 16|0);
  $103 = $60;
  $104 = (($103) + 32|0);
  $105 = $60;
  $106 = (($105) + 48|0);
  $107 = $61;
  $108 = (($107) + -16|0);
  $61 = $108;
  $109 = $62;
  (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($100,$102,$104,$106,$108,$109)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $112 = $60;
  $113 = $61;
  $114 = $62;
  __ZNSt3__118__insertion_sort_3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($112,$113,$114);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 32|0;
 $__t$i3 = sp + 72|0;
 $__t$i2 = sp + 112|0;
 $__t$i1 = sp + 176|0;
 $__t$i = sp + 216|0;
 $41 = $__x;
 $42 = $__y;
 $43 = $__z;
 $44 = $__c;
 $__r = 0;
 $45 = $44;
 $46 = $42;
 $47 = $41;
 $37 = $45;
 $38 = $46;
 $39 = $47;
 $48 = $38;
 $49 = $39;
 $50 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($48,$49)|0);
 if ($50) {
  $83 = $44;
  $84 = $43;
  $85 = $42;
  $0 = $83;
  $1 = $84;
  $2 = $85;
  $86 = $1;
  $87 = $2;
  $88 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($86,$87)|0);
  if ($88) {
   $89 = $41;
   $90 = $43;
   $6 = $89;
   $7 = $90;
   $91 = $6;
   $5 = $91;
   $92 = $5;
   ;HEAP32[$__t$i4+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$__t$i4+12>>2]=HEAP32[$92+12>>2]|0;
   $93 = $6;
   $94 = $7;
   $3 = $94;
   $95 = $3;
   ;HEAP32[$93+0>>2]=HEAP32[$95+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$95+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$95+8>>2]|0;HEAP32[$93+12>>2]=HEAP32[$95+12>>2]|0;
   $96 = $7;
   $4 = $__t$i4;
   $97 = $4;
   ;HEAP32[$96+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$96+8>>2]=HEAP32[$97+8>>2]|0;HEAP32[$96+12>>2]=HEAP32[$97+12>>2]|0;
   $__r = 1;
   $98 = $__r;
   $40 = $98;
   $124 = $40;
   STACKTOP = sp;return ($124|0);
  }
  $99 = $41;
  $100 = $42;
  $11 = $99;
  $12 = $100;
  $101 = $11;
  $10 = $101;
  $102 = $10;
  ;HEAP32[$__t$i3+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$102+12>>2]|0;
  $103 = $11;
  $104 = $12;
  $8 = $104;
  $105 = $8;
  ;HEAP32[$103+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$105+8>>2]|0;HEAP32[$103+12>>2]=HEAP32[$105+12>>2]|0;
  $106 = $12;
  $9 = $__t$i3;
  $107 = $9;
  ;HEAP32[$106+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$106+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$107+8>>2]|0;HEAP32[$106+12>>2]=HEAP32[$107+12>>2]|0;
  $__r = 1;
  $108 = $44;
  $109 = $43;
  $110 = $42;
  $21 = $108;
  $22 = $109;
  $23 = $110;
  $111 = $22;
  $112 = $23;
  $113 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($111,$112)|0);
  if ($113) {
   $114 = $42;
   $115 = $43;
   $27 = $114;
   $28 = $115;
   $116 = $27;
   $26 = $116;
   $117 = $26;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$117+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$117+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$117+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$117+12>>2]|0;
   $118 = $27;
   $119 = $28;
   $24 = $119;
   $120 = $24;
   ;HEAP32[$118+0>>2]=HEAP32[$120+0>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;
   $121 = $28;
   $25 = $__t$i1;
   $122 = $25;
   ;HEAP32[$121+0>>2]=HEAP32[$122+0>>2]|0;HEAP32[$121+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$121+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$121+12>>2]=HEAP32[$122+12>>2]|0;
   $__r = 2;
  }
  $123 = $__r;
  $40 = $123;
  $124 = $40;
  STACKTOP = sp;return ($124|0);
 } else {
  $51 = $44;
  $52 = $43;
  $53 = $42;
  $34 = $51;
  $35 = $52;
  $36 = $53;
  $54 = $35;
  $55 = $36;
  $56 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($54,$55)|0);
  if (!($56)) {
   $57 = $__r;
   $40 = $57;
   $124 = $40;
   STACKTOP = sp;return ($124|0);
  }
  $58 = $42;
  $59 = $43;
  $32 = $58;
  $33 = $59;
  $60 = $32;
  $31 = $60;
  $61 = $31;
  ;HEAP32[$__t$i+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$61+12>>2]|0;
  $62 = $32;
  $63 = $33;
  $29 = $63;
  $64 = $29;
  ;HEAP32[$62+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$64+12>>2]|0;
  $65 = $33;
  $30 = $__t$i;
  $66 = $30;
  ;HEAP32[$65+0>>2]=HEAP32[$66+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[$66+12>>2]|0;
  $__r = 1;
  $67 = $44;
  $68 = $42;
  $69 = $41;
  $18 = $67;
  $19 = $68;
  $20 = $69;
  $70 = $19;
  $71 = $20;
  $72 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($70,$71)|0);
  if ($72) {
   $73 = $41;
   $74 = $42;
   $16 = $73;
   $17 = $74;
   $75 = $16;
   $15 = $75;
   $76 = $15;
   ;HEAP32[$__t$i2+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$76+12>>2]|0;
   $77 = $16;
   $78 = $17;
   $13 = $78;
   $79 = $13;
   ;HEAP32[$77+0>>2]=HEAP32[$79+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$77+12>>2]=HEAP32[$79+12>>2]|0;
   $80 = $17;
   $14 = $__t$i2;
   $81 = $14;
   ;HEAP32[$80+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$80+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$80+8>>2]=HEAP32[$81+8>>2]|0;HEAP32[$80+12>>2]=HEAP32[$81+12>>2]|0;
   $__r = 2;
  }
  $82 = $__r;
  $40 = $82;
  $124 = $40;
  STACKTOP = sp;return ($124|0);
 }
 return 0|0;
}
function __ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 32|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 16|0;
 $24 = $__x1;
 $25 = $__x2;
 $26 = $__x3;
 $27 = $__x4;
 $28 = $__c;
 $29 = $24;
 $30 = $25;
 $31 = $26;
 $32 = $28;
 $33 = (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($29,$30,$31,$32)|0);
 $__r = $33;
 $34 = $28;
 $35 = $27;
 $36 = $26;
 $21 = $34;
 $22 = $35;
 $23 = $36;
 $37 = $22;
 $38 = $23;
 $39 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($37,$38)|0);
 if (!($39)) {
  $85 = $__r;
  STACKTOP = sp;return ($85|0);
 }
 $40 = $26;
 $41 = $27;
 $19 = $40;
 $20 = $41;
 $42 = $19;
 $18 = $42;
 $43 = $18;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$43+12>>2]|0;
 $44 = $19;
 $45 = $20;
 $16 = $45;
 $46 = $16;
 ;HEAP32[$44+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$46+12>>2]|0;
 $47 = $20;
 $17 = $__t$i;
 $48 = $17;
 ;HEAP32[$47+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$48+12>>2]|0;
 $49 = $__r;
 $50 = (($49) + 1)|0;
 $__r = $50;
 $51 = $28;
 $52 = $26;
 $53 = $25;
 $5 = $51;
 $6 = $52;
 $7 = $53;
 $54 = $6;
 $55 = $7;
 $56 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($54,$55)|0);
 if ($56) {
  $57 = $25;
  $58 = $26;
  $3 = $57;
  $4 = $58;
  $59 = $3;
  $2 = $59;
  $60 = $2;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$60+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$60+12>>2]|0;
  $61 = $3;
  $62 = $4;
  $0 = $62;
  $63 = $0;
  ;HEAP32[$61+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$61+12>>2]=HEAP32[$63+12>>2]|0;
  $64 = $4;
  $1 = $__t$i2;
  $65 = $1;
  ;HEAP32[$64+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$64+12>>2]=HEAP32[$65+12>>2]|0;
  $66 = $__r;
  $67 = (($66) + 1)|0;
  $__r = $67;
  $68 = $28;
  $69 = $25;
  $70 = $24;
  $8 = $68;
  $9 = $69;
  $10 = $70;
  $71 = $9;
  $72 = $10;
  $73 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($71,$72)|0);
  if ($73) {
   $74 = $24;
   $75 = $25;
   $14 = $74;
   $15 = $75;
   $76 = $14;
   $13 = $76;
   $77 = $13;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$77+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$77+12>>2]|0;
   $78 = $14;
   $79 = $15;
   $11 = $79;
   $80 = $11;
   ;HEAP32[$78+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$78+12>>2]=HEAP32[$80+12>>2]|0;
   $81 = $15;
   $12 = $__t$i1;
   $82 = $12;
   ;HEAP32[$81+0>>2]=HEAP32[$82+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$82+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$82+12>>2]|0;
   $83 = $__r;
   $84 = (($83) + 1)|0;
   $__r = $84;
  }
 }
 $85 = $__r;
 STACKTOP = sp;return ($85|0);
}
function __ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 32|0;
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 176|0;
 $32 = $__x1;
 $33 = $__x2;
 $34 = $__x3;
 $35 = $__x4;
 $36 = $__x5;
 $37 = $__c;
 $38 = $32;
 $39 = $33;
 $40 = $34;
 $41 = $35;
 $42 = $37;
 $43 = (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($38,$39,$40,$41,$42)|0);
 $__r = $43;
 $44 = $37;
 $45 = $36;
 $46 = $35;
 $29 = $44;
 $30 = $45;
 $31 = $46;
 $47 = $30;
 $48 = $31;
 $49 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($47,$48)|0);
 if (!($49)) {
  $112 = $__r;
  STACKTOP = sp;return ($112|0);
 }
 $50 = $35;
 $51 = $36;
 $27 = $50;
 $28 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$53+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$53+12>>2]|0;
 $54 = $27;
 $55 = $28;
 $24 = $55;
 $56 = $24;
 ;HEAP32[$54+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$56+12>>2]|0;
 $57 = $28;
 $25 = $__t$i;
 $58 = $25;
 ;HEAP32[$57+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$57+12>>2]=HEAP32[$58+12>>2]|0;
 $59 = $__r;
 $60 = (($59) + 1)|0;
 $__r = $60;
 $61 = $37;
 $62 = $35;
 $63 = $34;
 $13 = $61;
 $14 = $62;
 $15 = $63;
 $64 = $14;
 $65 = $15;
 $66 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($64,$65)|0);
 if ($66) {
  $67 = $34;
  $68 = $35;
  $11 = $67;
  $12 = $68;
  $69 = $11;
  $10 = $69;
  $70 = $10;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$70+12>>2]|0;
  $71 = $11;
  $72 = $12;
  $8 = $72;
  $73 = $8;
  ;HEAP32[$71+0>>2]=HEAP32[$73+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$73+8>>2]|0;HEAP32[$71+12>>2]=HEAP32[$73+12>>2]|0;
  $74 = $12;
  $9 = $__t$i2;
  $75 = $9;
  ;HEAP32[$74+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$74+12>>2]=HEAP32[$75+12>>2]|0;
  $76 = $__r;
  $77 = (($76) + 1)|0;
  $__r = $77;
  $78 = $37;
  $79 = $34;
  $80 = $33;
  $0 = $78;
  $1 = $79;
  $2 = $80;
  $81 = $1;
  $82 = $2;
  $83 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($81,$82)|0);
  if ($83) {
   $84 = $33;
   $85 = $34;
   $6 = $84;
   $7 = $85;
   $86 = $6;
   $5 = $86;
   $87 = $5;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$87+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$87+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$87+12>>2]|0;
   $88 = $6;
   $89 = $7;
   $3 = $89;
   $90 = $3;
   ;HEAP32[$88+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;HEAP32[$88+12>>2]=HEAP32[$90+12>>2]|0;
   $91 = $7;
   $4 = $__t$i3;
   $92 = $4;
   ;HEAP32[$91+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$91+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$91+12>>2]=HEAP32[$92+12>>2]|0;
   $93 = $__r;
   $94 = (($93) + 1)|0;
   $__r = $94;
   $95 = $37;
   $96 = $33;
   $97 = $32;
   $16 = $95;
   $17 = $96;
   $18 = $97;
   $98 = $17;
   $99 = $18;
   $100 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($98,$99)|0);
   if ($100) {
    $101 = $32;
    $102 = $33;
    $22 = $101;
    $23 = $102;
    $103 = $22;
    $21 = $103;
    $104 = $21;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$104+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$104+12>>2]|0;
    $105 = $22;
    $106 = $23;
    $19 = $106;
    $107 = $19;
    ;HEAP32[$105+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$105+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$105+8>>2]=HEAP32[$107+8>>2]|0;HEAP32[$105+12>>2]=HEAP32[$107+12>>2]|0;
    $108 = $23;
    $20 = $__t$i1;
    $109 = $20;
    ;HEAP32[$108+0>>2]=HEAP32[$109+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$109+8>>2]|0;HEAP32[$108+12>>2]=HEAP32[$109+12>>2]|0;
    $110 = $__r;
    $111 = (($110) + 1)|0;
    $__r = $111;
   }
  }
 }
 $112 = $__r;
 STACKTOP = sp;return ($112|0);
}
function __ZNSt3__118__insertion_sort_3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 40|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $9;
 $13 = (($12) + 32|0);
 $__j = $13;
 $14 = $9;
 $15 = $9;
 $16 = (($15) + 16|0);
 $17 = $__j;
 $18 = $11;
 (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($14,$16,$17,$18)|0);
 $19 = $__j;
 $20 = (($19) + 16|0);
 $__i = $20;
 while(1) {
  $21 = $__i;
  $22 = $10;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $11;
  $25 = $__i;
  $26 = $__j;
  $6 = $24;
  $7 = $25;
  $8 = $26;
  $27 = $7;
  $28 = $8;
  $29 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($27,$28)|0);
  if ($29) {
   $30 = $__i;
   $5 = $30;
   $31 = $5;
   ;HEAP32[$__t+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$__t+12>>2]=HEAP32[$31+12>>2]|0;
   $32 = $__j;
   $__k = $32;
   $33 = $__i;
   $__j = $33;
   while(1) {
    $34 = $__j;
    $35 = $__k;
    $0 = $35;
    $36 = $0;
    ;HEAP32[$34+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$36+12>>2]|0;
    $37 = $__k;
    $__j = $37;
    $38 = $__j;
    $39 = $9;
    $40 = ($38|0)!=($39|0);
    if ($40) {
     $41 = $11;
     $42 = $__k;
     $43 = (($42) + -16|0);
     $__k = $43;
     $1 = $41;
     $2 = $__t;
     $3 = $43;
     $44 = $2;
     $45 = $3;
     $46 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($44,$45)|0);
     $52 = $46;
    } else {
     $52 = 0;
    }
    if (!($52)) {
     break;
    }
   }
   $47 = $__j;
   $4 = $__t;
   $48 = $4;
   ;HEAP32[$47+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$48+12>>2]|0;
  }
  $49 = $__i;
  $__j = $49;
  $50 = $__i;
  $51 = (($50) + 16|0);
  $__i = $51;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 120|0;
 $__t = sp + 48|0;
 $18 = $__first;
 $19 = $__last;
 $20 = $__comp;
 $21 = $19;
 $22 = $18;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 switch ($26|0) {
 case 4:  {
  $49 = $18;
  $50 = $18;
  $51 = (($50) + 16|0);
  $52 = $18;
  $53 = (($52) + 32|0);
  $54 = $19;
  $55 = (($54) + -16|0);
  $19 = $55;
  $56 = $20;
  (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($49,$51,$53,$55,$56)|0);
  $$expand_i1_val6 = 1;
  $17 = $$expand_i1_val6;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $17 = $$expand_i1_val;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 2:  {
  $27 = $20;
  $28 = $19;
  $29 = (($28) + -16|0);
  $19 = $29;
  $30 = $18;
  $14 = $27;
  $15 = $29;
  $16 = $30;
  $31 = $15;
  $32 = $16;
  $33 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($31,$32)|0);
  if ($33) {
   $34 = $18;
   $35 = $19;
   $12 = $34;
   $13 = $35;
   $36 = $12;
   $11 = $36;
   $37 = $11;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$37+12>>2]|0;
   $38 = $12;
   $39 = $13;
   $9 = $39;
   $40 = $9;
   ;HEAP32[$38+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;
   $41 = $13;
   $10 = $__t$i;
   $42 = $10;
   ;HEAP32[$41+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$42+12>>2]|0;
  }
  $$expand_i1_val2 = 1;
  $17 = $$expand_i1_val2;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 3:  {
  $43 = $18;
  $44 = $18;
  $45 = (($44) + 16|0);
  $46 = $19;
  $47 = (($46) + -16|0);
  $19 = $47;
  $48 = $20;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($43,$45,$47,$48)|0);
  $$expand_i1_val4 = 1;
  $17 = $$expand_i1_val4;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 5:  {
  $57 = $18;
  $58 = $18;
  $59 = (($58) + 16|0);
  $60 = $18;
  $61 = (($60) + 32|0);
  $62 = $18;
  $63 = (($62) + 48|0);
  $64 = $19;
  $65 = (($64) + -16|0);
  $19 = $65;
  $66 = $20;
  (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($57,$59,$61,$63,$65,$66)|0);
  $$expand_i1_val8 = 1;
  $17 = $$expand_i1_val8;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 default: {
  $67 = $18;
  $68 = (($67) + 32|0);
  $__j = $68;
  $69 = $18;
  $70 = $18;
  $71 = (($70) + 16|0);
  $72 = $__j;
  $73 = $20;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($69,$71,$72,$73)|0);
  $__limit = 8;
  $__count = 0;
  $74 = $__j;
  $75 = (($74) + 16|0);
  $__i = $75;
  while(1) {
   $76 = $__i;
   $77 = $19;
   $78 = ($76|0)!=($77|0);
   if (!($78)) {
    label = 22;
    break;
   }
   $79 = $20;
   $80 = $__i;
   $81 = $__j;
   $2 = $79;
   $3 = $80;
   $4 = $81;
   $82 = $3;
   $83 = $4;
   $84 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($82,$83)|0);
   if ($84) {
    $85 = $__i;
    $1 = $85;
    $86 = $1;
    ;HEAP32[$__t+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$86+8>>2]|0;HEAP32[$__t+12>>2]=HEAP32[$86+12>>2]|0;
    $87 = $__j;
    $__k = $87;
    $88 = $__i;
    $__j = $88;
    while(1) {
     $89 = $__j;
     $90 = $__k;
     $0 = $90;
     $91 = $0;
     ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$89+12>>2]=HEAP32[$91+12>>2]|0;
     $92 = $__k;
     $__j = $92;
     $93 = $__j;
     $94 = $18;
     $95 = ($93|0)!=($94|0);
     if ($95) {
      $96 = $20;
      $97 = $__k;
      $98 = (($97) + -16|0);
      $__k = $98;
      $5 = $96;
      $6 = $__t;
      $7 = $98;
      $99 = $6;
      $100 = $7;
      $101 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($99,$100)|0);
      $115 = $101;
     } else {
      $115 = 0;
     }
     if (!($115)) {
      break;
     }
    }
    $102 = $__j;
    $8 = $__t;
    $103 = $8;
    ;HEAP32[$102+0>>2]=HEAP32[$103+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$102+12>>2]=HEAP32[$103+12>>2]|0;
    $104 = $__count;
    $105 = (($104) + 1)|0;
    $__count = $105;
    $106 = ($105|0)==(8);
    if ($106) {
     label = 18;
     break;
    }
   }
   $111 = $__i;
   $__j = $111;
   $112 = $__i;
   $113 = (($112) + 16|0);
   $__i = $113;
  }
  if ((label|0) == 18) {
   $107 = $__i;
   $108 = (($107) + 16|0);
   $__i = $108;
   $109 = $19;
   $110 = ($108|0)==($109|0);
   $$expand_i1_val10 = $110&1;
   $17 = $$expand_i1_val10;
   $$pre_trunc = $17;
   $114 = $$pre_trunc&1;
   STACKTOP = sp;return ($114|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $17 = $$expand_i1_val12;
   $$pre_trunc = $17;
   $114 = $$pre_trunc&1;
   STACKTOP = sp;return ($114|0);
  }
 }
 }
 return 0|0;
}
function __ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($this,$pe) {
 $this = $this|0;
 $pe = $pe|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $pe;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   $0 = $$expand_i1_val;
  } else {
   $8 = HEAP32[$3>>2]|0;
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)>($10>>>0);
   if ($11) {
    $$expand_i1_val2 = 0;
    $0 = $$expand_i1_val2;
    break;
   } else {
    $12 = (($3) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $2;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($13>>>0)<($16>>>0);
    $$expand_i1_val4 = $17&1;
    $0 = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = $0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 16)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC1EjjS9_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(460,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED1Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(461,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 }
 $48 = $11;
 $49 = $12;
 ___resumeException($48|0);
 // unreachable;
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($2)|0);
 $4 = $1;
 $5 = 262144 << $4;
 $6 = $3 & $5;
 $7 = ($6|0)!=(0);
 STACKTOP = sp;return ($7|0);
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC1EP6MyFacei($this,$pf,$nz) {
 $this = $this|0;
 $pf = $pf|0;
 $nz = $nz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pf;
 $2 = $nz;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC2EP6MyFacei($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC2EP6MyFacei($this,$pf,$nz) {
 $this = $this|0;
 $pf = $pf|0;
 $nz = $nz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pf;
 $2 = $nz;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdge3SetEP6MyFacei($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdge3SetEP6MyFacei($this,$pf,$nz) {
 $this = $this|0;
 $pf = $pf|0;
 $nz = $nz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp;
 $7 = sp + 20|0;
 $5 = $this;
 $6 = $pf;
 HEAP32[$7>>2] = $nz;
 $8 = $5;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((3568|0),(3416|0),75,(3576|0));
  // unreachable;
 }
 $11 = HEAP32[$7>>2]|0;
 $12 = ($11|0)>=(0);
 if (!($12)) {
  ___assert_fail((3584|0),(3416|0),76,(3576|0));
  // unreachable;
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = $6;
 $15 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($14)|0);
 $16 = ($13|0)<($15|0);
 if (!($16)) {
  ___assert_fail((3592|0),(3416|0),77,(3576|0));
  // unreachable;
 }
 $17 = $6;
 $18 = HEAP32[$7>>2]|0;
 $19 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($17,$18)|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$8>>2] = $20;
 $21 = $6;
 $22 = $6;
 $23 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($22,$7)|0);
 $24 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($21,$23)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($8) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$8>>2]|0;
 $28 = (($8) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)!=($29|0);
 if (!($30)) {
  ___assert_fail((3608|0),(3416|0),81,(3576|0));
  // unreachable;
 }
 $31 = HEAP32[$8>>2]|0;
 $32 = (($8) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)>($33>>>0);
 if (!($34)) {
  $46 = $6;
  $47 = (($8) + 8|0);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($8) + 12|0);
  HEAP32[$49>>2] = $48;
  STACKTOP = sp;return;
 }
 $35 = (($8) + 4|0);
 $3 = $8;
 $4 = $35;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$__t$i>>2] = $38;
 $39 = $4;
 $0 = $39;
 $40 = $0;
 $41 = HEAP32[$40>>2]|0;
 $42 = $3;
 HEAP32[$42>>2] = $41;
 $1 = $__t$i;
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = $4;
 HEAP32[$45>>2] = $44;
 $46 = $6;
 $47 = (($8) + 8|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$7>>2]|0;
 $49 = (($8) + 12|0);
 HEAP32[$49>>2] = $48;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC1ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 16)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 16)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 16)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC1EjjS9_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  ;HEAP32[$99+0>>2]=HEAP32[$101+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$101+8>>2]|0;HEAP32[$99+12>>2]=HEAP32[$101+12>>2]|0;
 }
 $102 = (($__v) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 16|0);
 HEAP32[$102>>2] = $104;
 __THREW__ = 0;
 invoke_vii(460,($32|0),($__v|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if (!($106)) {
  __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED1Ev($__v);
  STACKTOP = sp;return;
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $30 = $107;
 $31 = $108;
 __THREW__ = 0;
 invoke_vi(461,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 }
 $111 = $30;
 $112 = $31;
 ___resumeException($111|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC1EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC2EjjS9_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 64|0;
 $__t$i1 = sp + 40|0;
 $__t$i = sp + 88|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 268435455;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = $75<<4;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + ($85<<4)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + ($90<<4)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE10OpenStreamERS3_RNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERiPFbiPKcE($mesh,$stream,$loadmask,$cb) {
 $mesh = $mesh|0;
 $stream = $stream|0;
 $loadmask = $loadmask|0;
 $cb = $cb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0;
 var $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0;
 var $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0;
 var $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0;
 var $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0;
 var $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0;
 var $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0;
 var $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0;
 var $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0;
 var $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0;
 var $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0;
 var $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0;
 var $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0;
 var $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0;
 var $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0;
 var $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0;
 var $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0;
 var $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0;
 var $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0;
 var $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0;
 var $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0;
 var $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0;
 var $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0;
 var $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0;
 var $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0;
 var $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0;
 var $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0;
 var $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0;
 var $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0;
 var $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0;
 var $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0;
 var $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0;
 var $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0;
 var $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0;
 var $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0;
 var $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0;
 var $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0.0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0.0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0;
 var $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0;
 var $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0;
 var $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0;
 var $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0.0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0.0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0;
 var $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0;
 var $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0;
 var $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0;
 var $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0;
 var $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0;
 var $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0;
 var $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0;
 var $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0;
 var $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0;
 var $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0;
 var $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0;
 var $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0;
 var $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0;
 var $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0;
 var $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0;
 var $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0;
 var $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0;
 var $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0.0, $2364 = 0, $2365 = 0, $2366 = 0.0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0;
 var $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0;
 var $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0.0, $2397 = 0, $2398 = 0, $2399 = 0.0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0;
 var $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0;
 var $2429 = 0.0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0.0, $2433 = 0.0, $2434 = 0.0, $2435 = 0.0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0;
 var $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0;
 var $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0;
 var $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0;
 var $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0;
 var $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0;
 var $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0;
 var $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0;
 var $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0;
 var $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0;
 var $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0;
 var $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0;
 var $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0;
 var $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0;
 var $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0;
 var $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0.0, $2716 = 0;
 var $2717 = 0, $2718 = 0.0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0;
 var $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0.0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0.0, $2752 = 0;
 var $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0;
 var $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0.0, $2782 = 0, $2783 = 0, $2784 = 0.0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0;
 var $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0;
 var $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0.0, $2815 = 0, $2816 = 0, $2817 = 0.0, $2818 = 0.0, $2819 = 0.0, $282 = 0, $2820 = 0.0, $2821 = 0.0, $2822 = 0, $2823 = 0, $2824 = 0;
 var $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0;
 var $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0;
 var $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0;
 var $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0;
 var $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0;
 var $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0;
 var $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0;
 var $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0;
 var $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0;
 var $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0;
 var $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0;
 var $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0;
 var $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0;
 var $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0;
 var $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0;
 var $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0;
 var $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0;
 var $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0;
 var $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0;
 var $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0;
 var $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0;
 var $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0;
 var $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0;
 var $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0;
 var $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0;
 var $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0;
 var $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0;
 var $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0;
 var $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0;
 var $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0;
 var $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0;
 var $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0;
 var $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0;
 var $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0;
 var $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0;
 var $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0;
 var $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0;
 var $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0;
 var $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0;
 var $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0;
 var $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0;
 var $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0;
 var $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0;
 var $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0;
 var $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0;
 var $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0;
 var $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0;
 var $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0;
 var $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0;
 var $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0;
 var $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0;
 var $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0;
 var $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0;
 var $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0;
 var $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0;
 var $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0;
 var $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0;
 var $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0;
 var $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0;
 var $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0;
 var $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0;
 var $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0;
 var $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0;
 var $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0;
 var $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0;
 var $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0;
 var $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0;
 var $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0;
 var $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0.0;
 var $4067 = 0, $4068 = 0, $4069 = 0.0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0;
 var $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0.0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0;
 var $4102 = 0.0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0;
 var $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0.0, $4134 = 0, $4135 = 0, $4136 = 0.0, $4137 = 0, $4138 = 0;
 var $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0.0, $4152 = 0, $4153 = 0.0, $4154 = 0, $4155 = 0.0, $4156 = 0;
 var $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0;
 var $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0;
 var $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0;
 var $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0;
 var $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0;
 var $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0;
 var $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0;
 var $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0;
 var $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0;
 var $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0;
 var $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0;
 var $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0.0, $4361 = 0, $4362 = 0, $4363 = 0.0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0;
 var $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0;
 var $4391 = 0, $4392 = 0, $4393 = 0.0, $4394 = 0, $4395 = 0, $4396 = 0.0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0;
 var $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0;
 var $4427 = 0.0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0.0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0;
 var $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0.0, $4462 = 0;
 var $4463 = 0, $4464 = 0.0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0.0, $448 = 0, $4480 = 0;
 var $4481 = 0.0, $4482 = 0, $4483 = 0.0, $4484 = 0, $4485 = 0.0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0;
 var $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0;
 var $__r$i$i = 0, $__r$i$i29 = 0, $__r$i$i82 = 0, $__r$i$i97 = 0, $a = 0, $a13 = 0.0, $b = 0, $b12 = 0.0, $b4 = 0.0, $b8 = 0, $cc = 0, $cc26 = 0, $cleanup$dest = 0, $cleanup$dest24 = 0, $cleanup$dest28 = 0, $color = 0, $color14 = 0, $color25 = 0, $color27 = 0, $color5 = 0;
 var $color9 = 0, $color_elements = 0, $dimension = 0, $f = 0, $f0 = 0, $f17 = 0, $g = 0, $g11 = 0.0, $g3 = 0.0, $g7 = 0, $header = 0, $homogeneousComponents = 0, $i = 0, $indexTriangulatedVect = 0, $isColorDefined = 0, $isNormalDefined = 0, $isTexCoordDefined = 0, $j = 0, $j1 = 0, $j15 = 0;
 var $j16 = 0, $j19 = 0, $j20 = 0, $j22 = 0, $j23 = 0, $k = 0, $loopVect = 0, $nEdges = 0, $nFaces = 0, $nVertices = 0, $nb_color_components = 0, $polygonVect = 0, $q = 0, $qq = 0, $qqi = 0, $qqi21 = 0, $qtmp = 0, $r = 0, $r10 = 0.0, $r2 = 0.0;
 var $r6 = 0, $str = 0, $tokens = 0, $trigs = 0, $u = 0, $vInd = 0, $v_iter = 0, $vertIndices = 0, $vert_per_face = 0, $vert_per_face18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5664|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 5611|0;
 $$byval_copy8 = sp + 5636|0;
 $$byval_copy7 = sp + 5657|0;
 $$byval_copy6 = sp + 5653|0;
 $$byval_copy5 = sp + 5516|0;
 $$byval_copy4 = sp + 5508|0;
 $$byval_copy3 = sp + 5628|0;
 $$byval_copy2 = sp + 5643|0;
 $$byval_copy1 = sp + 5626|0;
 $$byval_copy = sp + 5608|0;
 $32 = sp + 188|0;
 $38 = sp + 212|0;
 $44 = sp + 236|0;
 $49 = sp + 256|0;
 $52 = sp + 268|0;
 $57 = sp + 288|0;
 $58 = sp + 292|0;
 $59 = sp + 296|0;
 $284 = sp + 1196|0;
 $290 = sp + 1220|0;
 $296 = sp + 1244|0;
 $301 = sp + 1264|0;
 $304 = sp + 1276|0;
 $309 = sp + 1296|0;
 $310 = sp + 1300|0;
 $311 = sp + 1304|0;
 $318 = sp + 1332|0;
 $324 = sp + 1356|0;
 $330 = sp + 1380|0;
 $335 = sp + 1400|0;
 $338 = sp + 1412|0;
 $343 = sp + 1432|0;
 $344 = sp + 1436|0;
 $345 = sp + 1440|0;
 $__annotator$i = sp + 5609|0;
 $444 = sp + 5641|0;
 $445 = sp + 5625|0;
 $622 = sp + 5639|0;
 $623 = sp + 5624|0;
 $1162 = sp;
 $1165 = sp + 5637|0;
 $1168 = sp + 4784|0;
 $1170 = sp + 4792|0;
 $1174 = sp + 5661|0;
 $1175 = sp + 5660|0;
 $1210 = sp + 8|0;
 $1213 = sp + 5658|0;
 $1216 = sp + 4996|0;
 $1218 = sp + 5004|0;
 $1222 = sp + 5656|0;
 $1223 = sp + 5654|0;
 $1250 = sp + 5144|0;
 $1256 = sp + 5168|0;
 $1262 = sp + 5192|0;
 $1267 = sp + 5212|0;
 $1270 = sp + 5224|0;
 $1275 = sp + 5244|0;
 $1276 = sp + 5248|0;
 $1277 = sp + 5252|0;
 $tokens = sp + 5284|0;
 $header = sp + 5328|0;
 $1288 = sp + 5344|0;
 $1289 = sp + 5348|0;
 $1290 = sp + 5352|0;
 $1291 = sp + 5356|0;
 $1292 = sp + 5360|0;
 $1293 = sp + 5364|0;
 $v_iter = sp + 5380|0;
 $1294 = sp + 5408|0;
 $color = sp + 5612|0;
 $color5 = sp + 4144|0;
 $color9 = sp + 5620|0;
 $color14 = sp + 56|0;
 $str = sp + 16|0;
 $1295 = sp + 5596|0;
 $vInd = sp + 4128|0;
 $1296 = sp + 96|0;
 $1297 = sp + 36|0;
 $1298 = sp + 88|0;
 $qtmp = sp + 5424|0;
 $1299 = sp + 5036|0;
 $vertIndices = sp + 5024|0;
 $polygonVect = sp + 4976|0;
 $q = sp + 4812|0;
 $indexTriangulatedVect = sp + 2568|0;
 $loopVect = sp + 1848|0;
 $1300 = sp + 5448|0;
 $1301 = sp + 5472|0;
 $cc = sp + 5648|0;
 $color25 = sp + 5492|0;
 $1302 = sp + 5528|0;
 $cc26 = sp + 5632|0;
 $color27 = sp + 5552|0;
 $1303 = sp + 5576|0;
 $1281 = $mesh;
 $1282 = $stream;
 $1283 = $loadmask;
 $1284 = $cb;
 $1279 = $tokens;
 $1304 = $1279;
 $1278 = $1304;
 $1305 = $1278;
 $1274 = $1305;
 $1306 = $1274;
 $1273 = $1306;
 $1248 = $1250;
 $1249 = -1;
 $1307 = $1248;
 $1308 = $1249;
 $1246 = $1307;
 $1247 = $1308;
 $1309 = $1246;
 HEAP32[$1309>>2] = 0;
 $1310 = HEAP32[$1250>>2]|0;
 HEAP32[$1275>>2] = $1310;
 $1251 = $1275;
 HEAP32[$1306>>2] = 0;
 $1311 = (($1306) + 4|0);
 $1254 = $1256;
 $1255 = -1;
 $1312 = $1254;
 $1313 = $1255;
 $1252 = $1312;
 $1253 = $1313;
 $1314 = $1252;
 HEAP32[$1314>>2] = 0;
 $1315 = HEAP32[$1256>>2]|0;
 HEAP32[$1276>>2] = $1315;
 $1257 = $1276;
 HEAP32[$1311>>2] = 0;
 $1316 = (($1306) + 8|0);
 $1260 = $1262;
 $1261 = -1;
 $1317 = $1260;
 $1318 = $1261;
 $1258 = $1317;
 $1259 = $1318;
 $1319 = $1258;
 HEAP32[$1319>>2] = 0;
 $1320 = HEAP32[$1262>>2]|0;
 HEAP32[$1277>>2] = $1320;
 $1263 = $1277;
 $1271 = $1316;
 $1272 = 0;
 $1321 = $1271;
 $1322 = $1272;
 $1269 = $1321;
 HEAP32[$1270>>2] = $1322;
 $1323 = $1269;
 $1268 = $1270;
 $1324 = $1268;
 $1325 = HEAP32[$1324>>2]|0;
 $1266 = $1323;
 HEAP32[$1267>>2] = $1325;
 $1326 = $1266;
 $1265 = $1326;
 $1264 = $1267;
 $1327 = $1264;
 $1328 = HEAP32[$1327>>2]|0;
 HEAP32[$1326>>2] = $1328;
 $1329 = $1282;
 __THREW__ = 0;
 invoke_vii(462,($1329|0),($tokens|0));
 $1330 = __THREW__; __THREW__ = 0;
 $1331 = $1330&1;
 L1: do {
  if ($1331) {
   label = 4;
  } else {
   $1245 = $tokens;
   $1332 = $1245;
   $1333 = HEAP32[$1332>>2]|0;
   $1334 = (($1332) + 4|0);
   $1335 = HEAP32[$1334>>2]|0;
   $1336 = ($1333|0)==($1335|0);
   if ($1336) {
    $1280 = 3;
    $1287 = 1;
    __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($tokens);
    $4502 = $1280;
    STACKTOP = sp;return ($4502|0);
   }
   $isNormalDefined = 0;
   $isColorDefined = 0;
   $isTexCoordDefined = 0;
   $dimension = 3;
   $homogeneousComponents = 0;
   $1243 = $tokens;
   $1244 = 0;
   $1339 = $1243;
   $1340 = $1244;
   $1341 = HEAP32[$1339>>2]|0;
   $1342 = (($1341) + (($1340*12)|0)|0);
   __THREW__ = 0;
   invoke_vii(463,($header|0),($1342|0));
   $1343 = __THREW__; __THREW__ = 0;
   $1344 = $1343&1;
   if ($1344) {
    label = 4;
   } else {
    $1238 = $header;
    $1239 = 3960;
    $1240 = -1;
    $1345 = $1238;
    $1237 = $1345;
    $1346 = $1237;
    $1236 = $1346;
    $1347 = $1236;
    $1235 = $1347;
    $1348 = $1235;
    $1234 = $1348;
    $1349 = $1234;
    $1233 = $1349;
    $1350 = $1233;
    $1351 = HEAP8[$1350>>0]|0;
    $1352 = $1351&255;
    $1353 = $1352 & 1;
    $1354 = ($1353|0)!=(0);
    if ($1354) {
     $1227 = $1347;
     $1355 = $1227;
     $1226 = $1355;
     $1356 = $1226;
     $1225 = $1356;
     $1357 = $1225;
     $1358 = (($1357) + 8|0);
     $1359 = HEAP32[$1358>>2]|0;
     $1366 = $1359;
    } else {
     $1232 = $1347;
     $1360 = $1232;
     $1231 = $1360;
     $1361 = $1231;
     $1230 = $1361;
     $1362 = $1230;
     $1363 = (($1362) + 1|0);
     $1229 = $1363;
     $1364 = $1229;
     $1228 = $1364;
     $1365 = $1228;
     $1366 = $1365;
    }
    $1224 = $1366;
    $1367 = $1224;
    $1204 = $1345;
    $1368 = $1204;
    $1203 = $1368;
    $1369 = $1203;
    $1202 = $1369;
    $1370 = $1202;
    $1201 = $1370;
    $1371 = $1201;
    $1372 = HEAP8[$1371>>0]|0;
    $1373 = $1372&255;
    $1374 = $1373 & 1;
    $1375 = ($1374|0)!=(0);
    if ($1375) {
     $1197 = $1368;
     $1376 = $1197;
     $1196 = $1376;
     $1377 = $1196;
     $1195 = $1377;
     $1378 = $1195;
     $1379 = (($1378) + 4|0);
     $1380 = HEAP32[$1379>>2]|0;
     $1393 = $1380;
    } else {
     $1200 = $1368;
     $1381 = $1200;
     $1199 = $1381;
     $1382 = $1199;
     $1198 = $1382;
     $1383 = $1198;
     $1384 = HEAP8[$1383>>0]|0;
     $1385 = $1384&255;
     $1386 = $1385 >> 1;
     $1393 = $1386;
    }
    $1387 = $1239;
    $1388 = $1240;
    $1389 = $1239;
    __THREW__ = 0;
    $1390 = (invoke_ii(445,($1389|0))|0);
    $1391 = __THREW__; __THREW__ = 0;
    $1392 = $1391&1;
    if ($1392) {
     $1442 = ___cxa_find_matching_catch()|0;
     $1443 = tempRet0;
     $1241 = $1442;
     $1242 = $1443;
     $1444 = $1241;
     ___cxa_call_unexpected(($1444|0));
     // unreachable;
    }
    $1215 = $1367;
    HEAP32[$1216>>2] = $1393;
    $1217 = $1387;
    HEAP32[$1218>>2] = $1388;
    $1219 = $1390;
    $1211 = $1218;
    $1212 = $1216;
    $1394 = $1211;
    $1395 = $1212;
    ;HEAP8[$1210+0>>0]=HEAP8[$1213+0>>0]|0;
    $1208 = $1394;
    $1209 = $1395;
    $1396 = $1209;
    $1397 = $1208;
    $1205 = $1210;
    $1206 = $1396;
    $1207 = $1397;
    $1398 = $1206;
    $1399 = HEAP32[$1398>>2]|0;
    $1400 = $1207;
    $1401 = HEAP32[$1400>>2]|0;
    $1402 = ($1399>>>0)<($1401>>>0);
    if ($1402) {
     $1403 = $1209;
     $1406 = $1403;
    } else {
     $1404 = $1208;
     $1406 = $1404;
    }
    $1405 = HEAP32[$1406>>2]|0;
    HEAP32[$1218>>2] = $1405;
    $1407 = $1219;
    $1408 = HEAP32[$1216>>2]|0;
    $1409 = HEAP32[$1218>>2]|0;
    $1410 = (($1408) - ($1409))|0;
    $1411 = ($1407>>>0)<($1410>>>0);
    if ($1411) {
     $1412 = $1219;
     $1413 = HEAP32[$1218>>2]|0;
     $1414 = (($1413) + ($1412))|0;
     HEAP32[$1218>>2] = $1414;
    } else {
     $1418 = HEAP32[$1216>>2]|0;
     HEAP32[$1218>>2] = $1418;
    }
    $1419 = $1215;
    $1420 = $1215;
    $1421 = HEAP32[$1218>>2]|0;
    $1422 = (($1420) + ($1421)|0);
    $1423 = $1217;
    $1424 = $1217;
    $1425 = $1219;
    $1426 = (($1424) + ($1425)|0);
    __THREW__ = 0;
    ;HEAP8[$$byval_copy+0>>0]=HEAP8[$1222+0>>0]|0;
    ;HEAP8[$$byval_copy1+0>>0]=HEAP8[$1223+0>>0]|0;
    $1427 = (invoke_iiiiiiii(464,($1419|0),($1422|0),($1423|0),($1426|0),(465|0),($$byval_copy|0),($$byval_copy1|0))|0);
    $1428 = __THREW__; __THREW__ = 0;
    $1429 = $1428&1;
    if ($1429) {
     $1415 = ___cxa_find_matching_catch()|0;
     $1416 = tempRet0;
     $1220 = $1415;
     $1221 = $1416;
     $1417 = $1220;
     ___cxa_call_unexpected(($1417|0));
     // unreachable;
    }
    $__r$i$i = $1427;
    $1430 = $1219;
    $1431 = ($1430>>>0)>(0);
    if ($1431) {
     $1432 = $__r$i$i;
     $1433 = $1215;
     $1434 = HEAP32[$1218>>2]|0;
     $1435 = (($1433) + ($1434)|0);
     $1436 = ($1432|0)==($1435|0);
     if ($1436) {
      $1214 = -1;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
    if ((label|0) == 25) {
     $1437 = $__r$i$i;
     $1438 = $1215;
     $1439 = $1437;
     $1440 = $1438;
     $1441 = (($1439) - ($1440))|0;
     $1214 = $1441;
    }
    $1445 = $1214;
    $1446 = ($1445|0)!=(-1);
    L37: do {
     if ($1446) {
      $1190 = $header;
      $1191 = 3960;
      $1192 = -1;
      $1447 = $1190;
      $1189 = $1447;
      $1448 = $1189;
      $1188 = $1448;
      $1449 = $1188;
      $1187 = $1449;
      $1450 = $1187;
      $1186 = $1450;
      $1451 = $1186;
      $1185 = $1451;
      $1452 = $1185;
      $1453 = HEAP8[$1452>>0]|0;
      $1454 = $1453&255;
      $1455 = $1454 & 1;
      $1456 = ($1455|0)!=(0);
      if ($1456) {
       $1179 = $1449;
       $1457 = $1179;
       $1178 = $1457;
       $1458 = $1178;
       $1177 = $1458;
       $1459 = $1177;
       $1460 = (($1459) + 8|0);
       $1461 = HEAP32[$1460>>2]|0;
       $1468 = $1461;
      } else {
       $1184 = $1449;
       $1462 = $1184;
       $1183 = $1462;
       $1463 = $1183;
       $1182 = $1463;
       $1464 = $1182;
       $1465 = (($1464) + 1|0);
       $1181 = $1465;
       $1466 = $1181;
       $1180 = $1466;
       $1467 = $1180;
       $1468 = $1467;
      }
      $1176 = $1468;
      $1469 = $1176;
      $1156 = $1447;
      $1470 = $1156;
      $1155 = $1470;
      $1471 = $1155;
      $1154 = $1471;
      $1472 = $1154;
      $1153 = $1472;
      $1473 = $1153;
      $1474 = HEAP8[$1473>>0]|0;
      $1475 = $1474&255;
      $1476 = $1475 & 1;
      $1477 = ($1476|0)!=(0);
      if ($1477) {
       $1149 = $1470;
       $1478 = $1149;
       $1148 = $1478;
       $1479 = $1148;
       $1147 = $1479;
       $1480 = $1147;
       $1481 = (($1480) + 4|0);
       $1482 = HEAP32[$1481>>2]|0;
       $1495 = $1482;
      } else {
       $1152 = $1470;
       $1483 = $1152;
       $1151 = $1483;
       $1484 = $1151;
       $1150 = $1484;
       $1485 = $1150;
       $1486 = HEAP8[$1485>>0]|0;
       $1487 = $1486&255;
       $1488 = $1487 >> 1;
       $1495 = $1488;
      }
      $1489 = $1191;
      $1490 = $1192;
      $1491 = $1191;
      __THREW__ = 0;
      $1492 = (invoke_ii(445,($1491|0))|0);
      $1493 = __THREW__; __THREW__ = 0;
      $1494 = $1493&1;
      if ($1494) {
       $1544 = ___cxa_find_matching_catch()|0;
       $1545 = tempRet0;
       $1193 = $1544;
       $1194 = $1545;
       $1546 = $1193;
       ___cxa_call_unexpected(($1546|0));
       // unreachable;
      }
      $1167 = $1469;
      HEAP32[$1168>>2] = $1495;
      $1169 = $1489;
      HEAP32[$1170>>2] = $1490;
      $1171 = $1492;
      $1163 = $1170;
      $1164 = $1168;
      $1496 = $1163;
      $1497 = $1164;
      ;HEAP8[$1162+0>>0]=HEAP8[$1165+0>>0]|0;
      $1160 = $1496;
      $1161 = $1497;
      $1498 = $1161;
      $1499 = $1160;
      $1157 = $1162;
      $1158 = $1498;
      $1159 = $1499;
      $1500 = $1158;
      $1501 = HEAP32[$1500>>2]|0;
      $1502 = $1159;
      $1503 = HEAP32[$1502>>2]|0;
      $1504 = ($1501>>>0)<($1503>>>0);
      if ($1504) {
       $1505 = $1161;
       $1508 = $1505;
      } else {
       $1506 = $1160;
       $1508 = $1506;
      }
      $1507 = HEAP32[$1508>>2]|0;
      HEAP32[$1170>>2] = $1507;
      $1509 = $1171;
      $1510 = HEAP32[$1168>>2]|0;
      $1511 = HEAP32[$1170>>2]|0;
      $1512 = (($1510) - ($1511))|0;
      $1513 = ($1509>>>0)<($1512>>>0);
      if ($1513) {
       $1514 = $1171;
       $1515 = HEAP32[$1170>>2]|0;
       $1516 = (($1515) + ($1514))|0;
       HEAP32[$1170>>2] = $1516;
      } else {
       $1520 = HEAP32[$1168>>2]|0;
       HEAP32[$1170>>2] = $1520;
      }
      $1521 = $1167;
      $1522 = $1167;
      $1523 = HEAP32[$1170>>2]|0;
      $1524 = (($1522) + ($1523)|0);
      $1525 = $1169;
      $1526 = $1169;
      $1527 = $1171;
      $1528 = (($1526) + ($1527)|0);
      __THREW__ = 0;
      ;HEAP8[$$byval_copy2+0>>0]=HEAP8[$1174+0>>0]|0;
      ;HEAP8[$$byval_copy3+0>>0]=HEAP8[$1175+0>>0]|0;
      $1529 = (invoke_iiiiiiii(464,($1521|0),($1524|0),($1525|0),($1528|0),(465|0),($$byval_copy2|0),($$byval_copy3|0))|0);
      $1530 = __THREW__; __THREW__ = 0;
      $1531 = $1530&1;
      if ($1531) {
       $1517 = ___cxa_find_matching_catch()|0;
       $1518 = tempRet0;
       $1172 = $1517;
       $1173 = $1518;
       $1519 = $1172;
       ___cxa_call_unexpected(($1519|0));
       // unreachable;
      }
      $__r$i$i29 = $1529;
      $1532 = $1171;
      $1533 = ($1532>>>0)>(0);
      do {
       if ($1533) {
        $1534 = $__r$i$i29;
        $1535 = $1167;
        $1536 = HEAP32[$1170>>2]|0;
        $1537 = (($1535) + ($1536)|0);
        $1538 = ($1534|0)==($1537|0);
        if (!($1538)) {
         label = 46;
         break;
        }
        $1166 = -1;
       } else {
        label = 46;
       }
      } while(0);
      if ((label|0) == 46) {
       $1539 = $__r$i$i29;
       $1540 = $1167;
       $1541 = $1539;
       $1542 = $1540;
       $1543 = (($1541) - ($1542))|0;
       $1166 = $1543;
      }
      $1547 = $1166;
      $1548 = (($1547) - 1)|0;
      $u = $1548;
      while(1) {
       $1549 = $u;
       $1550 = ($1549|0)>=(0);
       if (!($1550)) {
        break;
       }
       $1551 = $u;
       $1145 = $header;
       $1146 = $1551;
       $1552 = $1145;
       $1144 = $1552;
       $1553 = $1144;
       $1143 = $1553;
       $1554 = $1143;
       $1142 = $1554;
       $1555 = $1142;
       $1141 = $1555;
       $1556 = $1141;
       $1557 = HEAP8[$1556>>0]|0;
       $1558 = $1557&255;
       $1559 = $1558 & 1;
       $1560 = ($1559|0)!=(0);
       if ($1560) {
        $1135 = $1553;
        $1561 = $1135;
        $1134 = $1561;
        $1562 = $1134;
        $1133 = $1562;
        $1563 = $1133;
        $1564 = (($1563) + 8|0);
        $1565 = HEAP32[$1564>>2]|0;
        $1574 = $1565;
       } else {
        $1140 = $1553;
        $1566 = $1140;
        $1139 = $1566;
        $1567 = $1139;
        $1138 = $1567;
        $1568 = $1138;
        $1569 = (($1568) + 1|0);
        $1137 = $1569;
        $1570 = $1137;
        $1136 = $1570;
        $1571 = $1136;
        $1574 = $1571;
       }
       $1572 = $1146;
       $1573 = (($1574) + ($1572)|0);
       $1575 = HEAP8[$1573>>0]|0;
       $1576 = $1575 << 24 >> 24;
       $1577 = ($1576|0)==(67);
       if ($1577) {
        $isColorDefined = 1;
       } else {
        $1580 = $u;
        $1131 = $header;
        $1132 = $1580;
        $1581 = $1131;
        $1130 = $1581;
        $1582 = $1130;
        $1129 = $1582;
        $1583 = $1129;
        $1128 = $1583;
        $1584 = $1128;
        $1127 = $1584;
        $1585 = $1127;
        $1586 = HEAP8[$1585>>0]|0;
        $1587 = $1586&255;
        $1588 = $1587 & 1;
        $1589 = ($1588|0)!=(0);
        if ($1589) {
         $1121 = $1582;
         $1590 = $1121;
         $1120 = $1590;
         $1591 = $1120;
         $1119 = $1591;
         $1592 = $1119;
         $1593 = (($1592) + 8|0);
         $1594 = HEAP32[$1593>>2]|0;
         $1603 = $1594;
        } else {
         $1126 = $1582;
         $1595 = $1126;
         $1125 = $1595;
         $1596 = $1125;
         $1124 = $1596;
         $1597 = $1124;
         $1598 = (($1597) + 1|0);
         $1123 = $1598;
         $1599 = $1123;
         $1122 = $1599;
         $1600 = $1122;
         $1603 = $1600;
        }
        $1601 = $1132;
        $1602 = (($1603) + ($1601)|0);
        $1604 = HEAP8[$1602>>0]|0;
        $1605 = $1604 << 24 >> 24;
        $1606 = ($1605|0)==(78);
        if ($1606) {
         $isNormalDefined = 1;
        } else {
         $1607 = $u;
         $1608 = ($1607|0)>(0);
         do {
          if ($1608) {
           $1609 = $u;
           $1610 = (($1609) - 1)|0;
           $1117 = $header;
           $1118 = $1610;
           $1611 = $1117;
           $1116 = $1611;
           $1612 = $1116;
           $1115 = $1612;
           $1613 = $1115;
           $1114 = $1613;
           $1614 = $1114;
           $1113 = $1614;
           $1615 = $1113;
           $1616 = HEAP8[$1615>>0]|0;
           $1617 = $1616&255;
           $1618 = $1617 & 1;
           $1619 = ($1618|0)!=(0);
           if ($1619) {
            $1107 = $1612;
            $1620 = $1107;
            $1106 = $1620;
            $1621 = $1106;
            $1105 = $1621;
            $1622 = $1105;
            $1623 = (($1622) + 8|0);
            $1624 = HEAP32[$1623>>2]|0;
            $1633 = $1624;
           } else {
            $1112 = $1612;
            $1625 = $1112;
            $1111 = $1625;
            $1626 = $1111;
            $1110 = $1626;
            $1627 = $1110;
            $1628 = (($1627) + 1|0);
            $1109 = $1628;
            $1629 = $1109;
            $1108 = $1629;
            $1630 = $1108;
            $1633 = $1630;
           }
           $1631 = $1118;
           $1632 = (($1633) + ($1631)|0);
           $1634 = HEAP8[$1632>>0]|0;
           $1635 = $1634 << 24 >> 24;
           $1636 = ($1635|0)==(83);
           if (!($1636)) {
            label = 75;
            break;
           }
           $1637 = $u;
           $1103 = $header;
           $1104 = $1637;
           $1638 = $1103;
           $1102 = $1638;
           $1639 = $1102;
           $1101 = $1639;
           $1640 = $1101;
           $1100 = $1640;
           $1641 = $1100;
           $1099 = $1641;
           $1642 = $1099;
           $1643 = HEAP8[$1642>>0]|0;
           $1644 = $1643&255;
           $1645 = $1644 & 1;
           $1646 = ($1645|0)!=(0);
           if ($1646) {
            $1093 = $1639;
            $1647 = $1093;
            $1092 = $1647;
            $1648 = $1092;
            $1091 = $1648;
            $1649 = $1091;
            $1650 = (($1649) + 8|0);
            $1651 = HEAP32[$1650>>2]|0;
            $1660 = $1651;
           } else {
            $1098 = $1639;
            $1652 = $1098;
            $1097 = $1652;
            $1653 = $1097;
            $1096 = $1653;
            $1654 = $1096;
            $1655 = (($1654) + 1|0);
            $1095 = $1655;
            $1656 = $1095;
            $1094 = $1656;
            $1657 = $1094;
            $1660 = $1657;
           }
           $1658 = $1104;
           $1659 = (($1660) + ($1658)|0);
           $1661 = HEAP8[$1659>>0]|0;
           $1662 = $1661 << 24 >> 24;
           $1663 = ($1662|0)==(84);
           if (!($1663)) {
            label = 75;
            break;
           }
           $isTexCoordDefined = 1;
          } else {
           label = 75;
          }
         } while(0);
         if ((label|0) == 75) {
          label = 0;
          $1664 = $u;
          $1089 = $header;
          $1090 = $1664;
          $1665 = $1089;
          $1088 = $1665;
          $1666 = $1088;
          $1087 = $1666;
          $1667 = $1087;
          $1086 = $1667;
          $1668 = $1086;
          $1085 = $1668;
          $1669 = $1085;
          $1670 = HEAP8[$1669>>0]|0;
          $1671 = $1670&255;
          $1672 = $1671 & 1;
          $1673 = ($1672|0)!=(0);
          if ($1673) {
           $1079 = $1666;
           $1674 = $1079;
           $1078 = $1674;
           $1675 = $1078;
           $1077 = $1675;
           $1676 = $1077;
           $1677 = (($1676) + 8|0);
           $1678 = HEAP32[$1677>>2]|0;
           $1687 = $1678;
          } else {
           $1084 = $1666;
           $1679 = $1084;
           $1083 = $1679;
           $1680 = $1083;
           $1082 = $1680;
           $1681 = $1082;
           $1682 = (($1681) + 1|0);
           $1081 = $1682;
           $1683 = $1081;
           $1080 = $1683;
           $1684 = $1080;
           $1687 = $1684;
          }
          $1685 = $1090;
          $1686 = (($1687) + ($1685)|0);
          $1688 = HEAP8[$1686>>0]|0;
          $1689 = $1688 << 24 >> 24;
          $1690 = ($1689|0)==(52);
          if ($1690) {
           $homogeneousComponents = 1;
          } else {
           $1691 = $u;
           $1075 = $header;
           $1076 = $1691;
           $1692 = $1075;
           $1074 = $1692;
           $1693 = $1074;
           $1073 = $1693;
           $1694 = $1073;
           $1072 = $1694;
           $1695 = $1072;
           $1071 = $1695;
           $1696 = $1071;
           $1697 = HEAP8[$1696>>0]|0;
           $1698 = $1697&255;
           $1699 = $1698 & 1;
           $1700 = ($1699|0)!=(0);
           if ($1700) {
            $1065 = $1693;
            $1701 = $1065;
            $1064 = $1701;
            $1702 = $1064;
            $1063 = $1702;
            $1703 = $1063;
            $1704 = (($1703) + 8|0);
            $1705 = HEAP32[$1704>>2]|0;
            $1714 = $1705;
           } else {
            $1070 = $1693;
            $1706 = $1070;
            $1069 = $1706;
            $1707 = $1069;
            $1068 = $1707;
            $1708 = $1068;
            $1709 = (($1708) + 1|0);
            $1067 = $1709;
            $1710 = $1067;
            $1066 = $1710;
            $1711 = $1066;
            $1714 = $1711;
           }
           $1712 = $1076;
           $1713 = (($1714) + ($1712)|0);
           $1715 = HEAP8[$1713>>0]|0;
           $1716 = $1715 << 24 >> 24;
           $1717 = ($1716|0)==(110);
           if ($1717) {
            label = 86;
            break;
           }
          }
         }
        }
       }
       $1718 = $u;
       $1719 = (($1718) + -1)|0;
       $u = $1719;
      }
      if ((label|0) == 86) {
       $1280 = 6;
       $1287 = 1;
       break;
      }
      $1062 = $tokens;
      $1720 = $1062;
      $1721 = (($1720) + 4|0);
      $1722 = HEAP32[$1721>>2]|0;
      $1723 = HEAP32[$1720>>2]|0;
      $1724 = $1722;
      $1725 = $1723;
      $1726 = (($1724) - ($1725))|0;
      $1727 = (($1726|0) / 12)&-1;
      $1728 = ($1727|0)==(1);
      do {
       if ($1728) {
        $1729 = $1282;
        __THREW__ = 0;
        invoke_vii(462,($1729|0),($tokens|0));
        $1730 = __THREW__; __THREW__ = 0;
        $1731 = $1730&1;
        if ($1731) {
         label = 56;
         break;
        }
        label = 100;
       } else {
        $1061 = $tokens;
        $1732 = $1061;
        $1733 = HEAP32[$1732>>2]|0;
        $1059 = $1732;
        $1060 = $1733;
        $1734 = $1060;
        $1057 = $1289;
        $1058 = $1734;
        $1735 = $1057;
        $1736 = $1058;
        $1055 = $1735;
        $1056 = $1736;
        $1737 = $1055;
        $1738 = $1056;
        HEAP32[$1737>>2] = $1738;
        $1052 = $1288;
        $1053 = $1289;
        $1054 = 0;
        $1739 = $1052;
        $1740 = $1054;
        $1741 = $1053;
        $1049 = $1739;
        $1050 = $1741;
        $1051 = $1740;
        $1742 = $1049;
        $1743 = $1050;
        $1048 = $1743;
        $1744 = $1048;
        $1745 = HEAP32[$1744>>2]|0;
        HEAP32[$1742>>2] = $1745;
        $1047 = $tokens;
        $1746 = $1047;
        $1747 = HEAP32[$1746>>2]|0;
        $1045 = $1746;
        $1046 = $1747;
        $1748 = $1046;
        $1043 = $1292;
        $1044 = $1748;
        $1749 = $1043;
        $1750 = $1044;
        $1041 = $1749;
        $1042 = $1750;
        $1751 = $1041;
        $1752 = $1042;
        HEAP32[$1751>>2] = $1752;
        $1039 = $1292;
        $1040 = 1;
        $1753 = $1039;
        ;HEAP32[$1291+0>>2]=HEAP32[$1753+0>>2]|0;
        $1754 = $1040;
        $1037 = $1291;
        $1038 = $1754;
        $1755 = $1037;
        $1756 = $1038;
        $1757 = HEAP32[$1755>>2]|0;
        $1758 = (($1757) + (($1756*12)|0)|0);
        HEAP32[$1755>>2] = $1758;
        $1034 = $1290;
        $1035 = $1291;
        $1036 = 0;
        $1759 = $1034;
        $1760 = $1036;
        $1761 = $1035;
        $1031 = $1759;
        $1032 = $1761;
        $1033 = $1760;
        $1762 = $1031;
        $1763 = $1032;
        $1030 = $1763;
        $1764 = $1030;
        $1765 = HEAP32[$1764>>2]|0;
        HEAP32[$1762>>2] = $1765;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$1288+0>>2]|0;
        ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$1290+0>>2]|0;
        invoke_viiii(466,($1293|0),($tokens|0),($$byval_copy4|0),($$byval_copy5|0));
        $1766 = __THREW__; __THREW__ = 0;
        $1767 = $1766&1;
        if ($1767) {
         label = 56;
         break;
        }
        label = 100;
       }
      } while(0);
      L130: do {
       if ((label|0) == 100) {
        $1768 = $1283;
        HEAP32[$1768>>2] = 65;
        $1769 = $isNormalDefined;
        $1770 = $1769&1;
        if ($1770) {
         $1771 = $1283;
         $1772 = HEAP32[$1771>>2]|0;
         $1773 = $1772 | 16;
         HEAP32[$1771>>2] = $1773;
        }
        $1774 = $isTexCoordDefined;
        $1775 = $1774&1;
        if ($1775) {
         $1776 = $1283;
         $1777 = HEAP32[$1776>>2]|0;
         $1778 = $1777 | 32;
         HEAP32[$1776>>2] = $1778;
        }
        $1779 = $isColorDefined;
        $1780 = $1779&1;
        if ($1780) {
         $1781 = $1283;
         $1782 = HEAP32[$1781>>2]|0;
         $1783 = $1782 | 4;
         HEAP32[$1781>>2] = $1783;
         $1784 = $1283;
         $1785 = HEAP32[$1784>>2]|0;
         $1786 = $1785 | 256;
         HEAP32[$1784>>2] = $1786;
        }
        $1787 = $1281;
        __THREW__ = 0;
        invoke_vi(467,($1787|0));
        $1788 = __THREW__; __THREW__ = 0;
        $1789 = $1788&1;
        if ($1789) {
         label = 56;
         break;
        }
        $959 = $tokens;
        $1790 = $959;
        $1791 = (($1790) + 4|0);
        $1792 = HEAP32[$1791>>2]|0;
        $1793 = HEAP32[$1790>>2]|0;
        $1794 = $1792;
        $1795 = $1793;
        $1796 = (($1794) - ($1795))|0;
        $1797 = (($1796|0) / 12)&-1;
        $1798 = ($1797>>>0)<(3);
        if ($1798) {
         $1280 = 2;
         $1287 = 1;
         break L37;
        }
        $955 = $tokens;
        $956 = 0;
        $1799 = $955;
        $1800 = $956;
        $1801 = HEAP32[$1799>>2]|0;
        $1802 = (($1801) + (($1800*12)|0)|0);
        $937 = $1802;
        $1803 = $937;
        $936 = $1803;
        $1804 = $936;
        $935 = $1804;
        $1805 = $935;
        $934 = $1805;
        $1806 = $934;
        $933 = $1806;
        $1807 = $933;
        $932 = $1807;
        $1808 = $932;
        $1809 = HEAP8[$1808>>0]|0;
        $1810 = $1809&255;
        $1811 = $1810 & 1;
        $1812 = ($1811|0)!=(0);
        if ($1812) {
         $926 = $1805;
         $1813 = $926;
         $925 = $1813;
         $1814 = $925;
         $924 = $1814;
         $1815 = $924;
         $1816 = (($1815) + 8|0);
         $1817 = HEAP32[$1816>>2]|0;
         $1824 = $1817;
        } else {
         $931 = $1805;
         $1818 = $931;
         $930 = $1818;
         $1819 = $930;
         $929 = $1819;
         $1820 = $929;
         $1821 = (($1820) + 1|0);
         $928 = $1821;
         $1822 = $928;
         $927 = $1822;
         $1823 = $927;
         $1824 = $1823;
        }
        $923 = $1824;
        $1825 = $923;
        __THREW__ = 0;
        $1826 = (invoke_ii(468,($1825|0))|0);
        $1827 = __THREW__; __THREW__ = 0;
        $1828 = $1827&1;
        if ($1828) {
         label = 56;
         break;
        }
        $nVertices = $1826;
        $904 = $tokens;
        $905 = 1;
        $1829 = $904;
        $1830 = $905;
        $1831 = HEAP32[$1829>>2]|0;
        $1832 = (($1831) + (($1830*12)|0)|0);
        $886 = $1832;
        $1833 = $886;
        $885 = $1833;
        $1834 = $885;
        $884 = $1834;
        $1835 = $884;
        $883 = $1835;
        $1836 = $883;
        $882 = $1836;
        $1837 = $882;
        $881 = $1837;
        $1838 = $881;
        $1839 = HEAP8[$1838>>0]|0;
        $1840 = $1839&255;
        $1841 = $1840 & 1;
        $1842 = ($1841|0)!=(0);
        if ($1842) {
         $875 = $1835;
         $1843 = $875;
         $874 = $1843;
         $1844 = $874;
         $873 = $1844;
         $1845 = $873;
         $1846 = (($1845) + 8|0);
         $1847 = HEAP32[$1846>>2]|0;
         $1854 = $1847;
        } else {
         $880 = $1835;
         $1848 = $880;
         $879 = $1848;
         $1849 = $879;
         $878 = $1849;
         $1850 = $878;
         $1851 = (($1850) + 1|0);
         $877 = $1851;
         $1852 = $877;
         $876 = $1852;
         $1853 = $876;
         $1854 = $1853;
        }
        $872 = $1854;
        $1855 = $872;
        __THREW__ = 0;
        $1856 = (invoke_ii(468,($1855|0))|0);
        $1857 = __THREW__; __THREW__ = 0;
        $1858 = $1857&1;
        if ($1858) {
         label = 56;
         break;
        }
        $nFaces = $1856;
        $853 = $tokens;
        $854 = 2;
        $1859 = $853;
        $1860 = $854;
        $1861 = HEAP32[$1859>>2]|0;
        $1862 = (($1861) + (($1860*12)|0)|0);
        $850 = $1862;
        $1863 = $850;
        $849 = $1863;
        $1864 = $849;
        $848 = $1864;
        $1865 = $848;
        $847 = $1865;
        $1866 = $847;
        $846 = $1866;
        $1867 = $846;
        $845 = $1867;
        $1868 = $845;
        $1869 = HEAP8[$1868>>0]|0;
        $1870 = $1869&255;
        $1871 = $1870 & 1;
        $1872 = ($1871|0)!=(0);
        if ($1872) {
         $839 = $1865;
         $1873 = $839;
         $838 = $1873;
         $1874 = $838;
         $837 = $1874;
         $1875 = $837;
         $1876 = (($1875) + 8|0);
         $1877 = HEAP32[$1876>>2]|0;
         $1884 = $1877;
        } else {
         $844 = $1865;
         $1878 = $844;
         $843 = $1878;
         $1879 = $843;
         $842 = $1879;
         $1880 = $842;
         $1881 = (($1880) + 1|0);
         $841 = $1881;
         $1882 = $841;
         $840 = $1882;
         $1883 = $840;
         $1884 = $1883;
        }
        $836 = $1884;
        $1885 = $836;
        __THREW__ = 0;
        $1886 = (invoke_ii(468,($1885|0))|0);
        $1887 = __THREW__; __THREW__ = 0;
        $1888 = $1887&1;
        if ($1888) {
         label = 56;
         break;
        }
        $nEdges = $1886;
        $1889 = $dimension;
        $1890 = ($1889|0)!=(3);
        if ($1890) {
         $1280 = 4;
         $1287 = 1;
         break L37;
        }
        $1891 = $homogeneousComponents;
        $1892 = $1891&1;
        if ($1892) {
         $1280 = 4;
         $1287 = 1;
         break L37;
        }
        $1893 = $1281;
        $1894 = $nVertices;
        __THREW__ = 0;
        invoke_viii(469,($v_iter|0),($1893|0),($1894|0));
        $1895 = __THREW__; __THREW__ = 0;
        $1896 = $1895&1;
        if ($1896) {
         label = 56;
         break;
        }
        $1897 = $1282;
        __THREW__ = 0;
        invoke_vii(462,($1897|0),($tokens|0));
        $1898 = __THREW__; __THREW__ = 0;
        $1899 = $1898&1;
        if ($1899) {
         label = 56;
         break;
        }
        $k = 0;
        $i = 0;
        L171: while(1) {
         $1900 = $i;
         $1901 = $nVertices;
         $1902 = ($1900>>>0)<($1901>>>0);
         if (!($1902)) {
          label = 343;
          break;
         }
         $1903 = $1284;
         $1904 = ($1903|0)!=(0|0);
         do {
          if ($1904) {
           $1905 = $i;
           $1906 = (($1905>>>0) % 1000)&-1;
           $1907 = ($1906|0)==(0);
           if (!($1907)) {
            break;
           }
           $1908 = $1284;
           $1909 = $i;
           $1910 = ($1909*50)|0;
           $1911 = $nVertices;
           $1912 = (($1910>>>0) / ($1911>>>0))&-1;
           __THREW__ = 0;
           (invoke_iii($1908|0,($1912|0),(3968|0))|0);
           $1913 = __THREW__; __THREW__ = 0;
           $1914 = $1913&1;
           if ($1914) {
            label = 56;
            break L130;
           }
          }
         } while(0);
         $j = 0;
         while(1) {
          $1915 = $j;
          $1916 = ($1915>>>0)<(3);
          if (!($1916)) {
           break;
          }
          $1917 = $k;
          $835 = $tokens;
          $1918 = $835;
          $1919 = (($1918) + 4|0);
          $1920 = HEAP32[$1919>>2]|0;
          $1921 = HEAP32[$1918>>2]|0;
          $1922 = $1920;
          $1923 = $1921;
          $1924 = (($1922) - ($1923))|0;
          $1925 = (($1924|0) / 12)&-1;
          $1926 = ($1917|0)==($1925|0);
          if ($1926) {
           $1927 = $1282;
           __THREW__ = 0;
           invoke_vii(462,($1927|0),($tokens|0));
           $1928 = __THREW__; __THREW__ = 0;
           $1929 = $1928&1;
           if ($1929) {
            label = 56;
            break L130;
           }
           $834 = $tokens;
           $1930 = $834;
           $1931 = (($1930) + 4|0);
           $1932 = HEAP32[$1931>>2]|0;
           $1933 = HEAP32[$1930>>2]|0;
           $1934 = $1932;
           $1935 = $1933;
           $1936 = (($1934) - ($1935))|0;
           $1937 = (($1936|0) / 12)&-1;
           $1938 = ($1937|0)==(0);
           if ($1938) {
            label = 141;
            break L171;
           }
           $k = 0;
          }
          $1939 = $k;
          $779 = $tokens;
          $780 = $1939;
          $1940 = $779;
          $1941 = $780;
          $1942 = HEAP32[$1940>>2]|0;
          $1943 = (($1942) + (($1941*12)|0)|0);
          $776 = $1943;
          $1944 = $776;
          $775 = $1944;
          $1945 = $775;
          $774 = $1945;
          $1946 = $774;
          $773 = $1946;
          $1947 = $773;
          $772 = $1947;
          $1948 = $772;
          $771 = $1948;
          $1949 = $771;
          $1950 = HEAP8[$1949>>0]|0;
          $1951 = $1950&255;
          $1952 = $1951 & 1;
          $1953 = ($1952|0)!=(0);
          if ($1953) {
           $765 = $1946;
           $1954 = $765;
           $764 = $1954;
           $1955 = $764;
           $763 = $1955;
           $1956 = $763;
           $1957 = (($1956) + 8|0);
           $1958 = HEAP32[$1957>>2]|0;
           $1965 = $1958;
          } else {
           $770 = $1946;
           $1959 = $770;
           $769 = $1959;
           $1960 = $769;
           $768 = $1960;
           $1961 = $768;
           $1962 = (($1961) + 1|0);
           $767 = $1962;
           $1963 = $767;
           $766 = $1963;
           $1964 = $766;
           $1965 = $1964;
          }
          $762 = $1965;
          $1966 = $762;
          __THREW__ = 0;
          $1967 = (+invoke_di(470,($1966|0)));
          $1968 = __THREW__; __THREW__ = 0;
          $1969 = $1968&1;
          if ($1969) {
           label = 56;
           break L130;
          }
          $1970 = $1967;
          $744 = $v_iter;
          $1971 = $744;
          $1972 = HEAP32[$1971>>2]|0;
          __THREW__ = 0;
          $1973 = (invoke_ii(471,($1972|0))|0);
          $1974 = __THREW__; __THREW__ = 0;
          $1975 = $1974&1;
          if ($1975) {
           label = 56;
           break L130;
          }
          $1976 = $j;
          __THREW__ = 0;
          $1977 = (invoke_iii(472,($1973|0),($1976|0))|0);
          $1978 = __THREW__; __THREW__ = 0;
          $1979 = $1978&1;
          if ($1979) {
           label = 56;
           break L130;
          }
          HEAPF32[$1977>>2] = $1970;
          $1980 = $k;
          $1981 = (($1980) + 1)|0;
          $k = $1981;
          $1982 = $j;
          $1983 = (($1982) + 1)|0;
          $j = $1983;
         }
         $1984 = $isNormalDefined;
         $1985 = $1984&1;
         if ($1985) {
          $j1 = 0;
          while(1) {
           $1986 = $j1;
           $1987 = ($1986>>>0)<(3);
           if (!($1987)) {
            break;
           }
           $1988 = $k;
           $726 = $tokens;
           $1989 = $726;
           $1990 = (($1989) + 4|0);
           $1991 = HEAP32[$1990>>2]|0;
           $1992 = HEAP32[$1989>>2]|0;
           $1993 = $1991;
           $1994 = $1992;
           $1995 = (($1993) - ($1994))|0;
           $1996 = (($1995|0) / 12)&-1;
           $1997 = ($1988|0)==($1996|0);
           if ($1997) {
            $1998 = $1282;
            __THREW__ = 0;
            invoke_vii(462,($1998|0),($tokens|0));
            $1999 = __THREW__; __THREW__ = 0;
            $2000 = $1999&1;
            if ($2000) {
             label = 56;
             break L130;
            }
            $708 = $tokens;
            $2001 = $708;
            $2002 = (($2001) + 4|0);
            $2003 = HEAP32[$2002>>2]|0;
            $2004 = HEAP32[$2001>>2]|0;
            $2005 = $2003;
            $2006 = $2004;
            $2007 = (($2005) - ($2006))|0;
            $2008 = (($2007|0) / 12)&-1;
            $2009 = ($2008|0)==(0);
            if ($2009) {
             label = 158;
             break L171;
            }
            $k = 0;
           }
           $2010 = $k;
           $704 = $tokens;
           $705 = $2010;
           $2011 = $704;
           $2012 = $705;
           $2013 = HEAP32[$2011>>2]|0;
           $2014 = (($2013) + (($2012*12)|0)|0);
           $703 = $2014;
           $2015 = $703;
           $702 = $2015;
           $2016 = $702;
           $701 = $2016;
           $2017 = $701;
           $700 = $2017;
           $2018 = $700;
           $699 = $2018;
           $2019 = $699;
           $698 = $2019;
           $2020 = $698;
           $2021 = HEAP8[$2020>>0]|0;
           $2022 = $2021&255;
           $2023 = $2022 & 1;
           $2024 = ($2023|0)!=(0);
           if ($2024) {
            $692 = $2017;
            $2025 = $692;
            $691 = $2025;
            $2026 = $691;
            $690 = $2026;
            $2027 = $690;
            $2028 = (($2027) + 8|0);
            $2029 = HEAP32[$2028>>2]|0;
            $2036 = $2029;
           } else {
            $697 = $2017;
            $2030 = $697;
            $696 = $2030;
            $2031 = $696;
            $695 = $2031;
            $2032 = $695;
            $2033 = (($2032) + 1|0);
            $694 = $2033;
            $2034 = $694;
            $693 = $2034;
            $2035 = $693;
            $2036 = $2035;
           }
           $689 = $2036;
           $2037 = $689;
           __THREW__ = 0;
           $2038 = (+invoke_di(470,($2037|0)));
           $2039 = __THREW__; __THREW__ = 0;
           $2040 = $2039&1;
           if ($2040) {
            label = 56;
            break L130;
           }
           $2041 = $2038;
           $671 = $v_iter;
           $2042 = $671;
           $2043 = HEAP32[$2042>>2]|0;
           __THREW__ = 0;
           $2044 = (invoke_ii(473,($2043|0))|0);
           $2045 = __THREW__; __THREW__ = 0;
           $2046 = $2045&1;
           if ($2046) {
            label = 56;
            break L130;
           }
           $2047 = $j1;
           __THREW__ = 0;
           $2048 = (invoke_iii(472,($2044|0),($2047|0))|0);
           $2049 = __THREW__; __THREW__ = 0;
           $2050 = $2049&1;
           if ($2050) {
            label = 56;
            break L130;
           }
           HEAPF32[$2048>>2] = $2041;
           $2051 = $k;
           $2052 = (($2051) + 1)|0;
           $k = $2052;
           $2053 = $j1;
           $2054 = (($2053) + 1)|0;
           $j1 = $2054;
          }
         }
         $2055 = $isColorDefined;
         $2056 = $2055&1;
         if ($2056) {
          $668 = $tokens;
          $2057 = $668;
          $2058 = (($2057) + 4|0);
          $2059 = HEAP32[$2058>>2]|0;
          $2060 = HEAP32[$2057>>2]|0;
          $2061 = $2059;
          $2062 = $2060;
          $2063 = (($2061) - ($2062))|0;
          $2064 = (($2063|0) / 12)&-1;
          $2065 = $k;
          $2066 = (($2064) - ($2065))|0;
          $2067 = $isTexCoordDefined;
          $2068 = $2067&1;
          $2069 = $2068 ? 1 : 0;
          $2070 = $2069<<1;
          $2071 = (($2066) - ($2070))|0;
          $nb_color_components = $2071;
          $2072 = $nb_color_components;
          $2073 = ($2072|0)<(0);
          if ($2073) {
           label = 173;
           break;
          }
          $2074 = $nb_color_components;
          $2075 = ($2074|0)>(4);
          if ($2075) {
           label = 173;
           break;
          }
          $2076 = $nb_color_components;
          $2077 = ($2076|0)>(0);
          if ($2077) {
           $2078 = $1283;
           $2079 = HEAP32[$2078>>2]|0;
           $2080 = $2079 | 4;
           HEAP32[$2078>>2] = $2080;
          }
          $2081 = $1281;
          __THREW__ = 0;
          $2082 = (invoke_ii(474,($2081|0))|0);
          $2083 = __THREW__; __THREW__ = 0;
          $2084 = $2083&1;
          if ($2084) {
           label = 56;
           break L130;
          }
          if ($2082) {
           $2085 = $nb_color_components;
           $2086 = ($2085|0)==(1);
           if ($2086) {
            $667 = $v_iter;
            $2087 = $667;
            $2088 = HEAP32[$2087>>2]|0;
            __THREW__ = 0;
            $2089 = (invoke_ii(475,($2088|0))|0);
            $2090 = __THREW__; __THREW__ = 0;
            $2091 = $2090&1;
            if ($2091) {
             label = 56;
             break L130;
            }
            $2092 = $k;
            $665 = $tokens;
            $666 = $2092;
            $2093 = $665;
            $2094 = $666;
            $2095 = HEAP32[$2093>>2]|0;
            $2096 = (($2095) + (($2094*12)|0)|0);
            $662 = $2096;
            $2097 = $662;
            $661 = $2097;
            $2098 = $661;
            $660 = $2098;
            $2099 = $660;
            $659 = $2099;
            $2100 = $659;
            $658 = $2100;
            $2101 = $658;
            $657 = $2101;
            $2102 = $657;
            $2103 = HEAP8[$2102>>0]|0;
            $2104 = $2103&255;
            $2105 = $2104 & 1;
            $2106 = ($2105|0)!=(0);
            if ($2106) {
             $651 = $2099;
             $2107 = $651;
             $650 = $2107;
             $2108 = $650;
             $649 = $2108;
             $2109 = $649;
             $2110 = (($2109) + 8|0);
             $2111 = HEAP32[$2110>>2]|0;
             $2118 = $2111;
            } else {
             $656 = $2099;
             $2112 = $656;
             $655 = $2112;
             $2113 = $655;
             $654 = $2113;
             $2114 = $654;
             $2115 = (($2114) + 1|0);
             $653 = $2115;
             $2116 = $653;
             $652 = $2116;
             $2117 = $652;
             $2118 = $2117;
            }
            $648 = $2118;
            $2119 = $648;
            __THREW__ = 0;
            $2120 = (invoke_ii(468,($2119|0))|0);
            $2121 = __THREW__; __THREW__ = 0;
            $2122 = $2121&1;
            if ($2122) {
             label = 56;
             break L130;
            }
            __THREW__ = 0;
            invoke_vii(476,($1294|0),($2120|0));
            $2123 = __THREW__; __THREW__ = 0;
            $2124 = $2123&1;
            if ($2124) {
             label = 56;
             break L130;
            }
            __THREW__ = 0;
            invoke_vii(477,($2089|0),($1294|0));
            $2125 = __THREW__; __THREW__ = 0;
            $2126 = $2125&1;
            if ($2126) {
             label = 56;
             break L130;
            }
           } else {
            $2127 = $nb_color_components;
            $2128 = ($2127|0)==(3);
            if ($2128) {
             $2129 = $k;
             $645 = $tokens;
             $646 = $2129;
             $2130 = $645;
             $2131 = $646;
             $2132 = HEAP32[$2130>>2]|0;
             $2133 = (($2132) + (($2131*12)|0)|0);
             $640 = $2133;
             $641 = 3984;
             $642 = 0;
             $2134 = $640;
             $639 = $2134;
             $2135 = $639;
             $638 = $2135;
             $2136 = $638;
             $637 = $2136;
             $2137 = $637;
             $636 = $2137;
             $2138 = $636;
             $635 = $2138;
             $2139 = $635;
             $2140 = HEAP8[$2139>>0]|0;
             $2141 = $2140&255;
             $2142 = $2141 & 1;
             $2143 = ($2142|0)!=(0);
             if ($2143) {
              $629 = $2136;
              $2144 = $629;
              $628 = $2144;
              $2145 = $628;
              $627 = $2145;
              $2146 = $627;
              $2147 = (($2146) + 8|0);
              $2148 = HEAP32[$2147>>2]|0;
              $2155 = $2148;
             } else {
              $634 = $2136;
              $2149 = $634;
              $633 = $2149;
              $2150 = $633;
              $632 = $2150;
              $2151 = $632;
              $2152 = (($2151) + 1|0);
              $631 = $2152;
              $2153 = $631;
              $630 = $2153;
              $2154 = $630;
              $2155 = $2154;
             }
             $626 = $2155;
             $2156 = $626;
             $615 = $2134;
             $2157 = $615;
             $614 = $2157;
             $2158 = $614;
             $613 = $2158;
             $2159 = $613;
             $612 = $2159;
             $2160 = $612;
             $2161 = HEAP8[$2160>>0]|0;
             $2162 = $2161&255;
             $2163 = $2162 & 1;
             $2164 = ($2163|0)!=(0);
             if ($2164) {
              $608 = $2157;
              $2165 = $608;
              $607 = $2165;
              $2166 = $607;
              $606 = $2166;
              $2167 = $606;
              $2168 = (($2167) + 4|0);
              $2169 = HEAP32[$2168>>2]|0;
              $2182 = $2169;
             } else {
              $611 = $2157;
              $2170 = $611;
              $610 = $2170;
              $2171 = $610;
              $609 = $2171;
              $2172 = $609;
              $2173 = HEAP8[$2172>>0]|0;
              $2174 = $2173&255;
              $2175 = $2174 >> 1;
              $2182 = $2175;
             }
             $2176 = $641;
             $2177 = $642;
             $2178 = $641;
             __THREW__ = 0;
             $2179 = (invoke_ii(445,($2178|0))|0);
             $2180 = __THREW__; __THREW__ = 0;
             $2181 = $2180&1;
             if ($2181) {
              label = 207;
              break;
             }
             $617 = $2156;
             $618 = $2182;
             $619 = $2176;
             $620 = $2177;
             $621 = $2179;
             $2183 = $620;
             $2184 = $618;
             $2185 = ($2183>>>0)>($2184>>>0);
             do {
              if ($2185) {
               label = 199;
              } else {
               $2186 = $618;
               $2187 = $620;
               $2188 = (($2186) - ($2187))|0;
               $2189 = $621;
               $2190 = ($2188>>>0)<($2189>>>0);
               if ($2190) {
                label = 199;
                break;
               }
               $2191 = $621;
               $2192 = ($2191|0)==(0);
               if ($2192) {
                $2193 = $620;
                $616 = $2193;
                break;
               }
               $2194 = $617;
               $2195 = $620;
               $2196 = (($2194) + ($2195)|0);
               $2197 = $617;
               $2198 = $618;
               $2199 = (($2197) + ($2198)|0);
               $2200 = $619;
               $2201 = $619;
               $2202 = $621;
               $2203 = (($2201) + ($2202)|0);
               __THREW__ = 0;
               ;HEAP8[$$byval_copy6+0>>0]=HEAP8[$622+0>>0]|0;
               ;HEAP8[$$byval_copy7+0>>0]=HEAP8[$623+0>>0]|0;
               $2204 = (invoke_iiiiiiii(478,($2196|0),($2199|0),($2200|0),($2203|0),(465|0),($$byval_copy6|0),($$byval_copy7|0))|0);
               $2205 = __THREW__; __THREW__ = 0;
               $2206 = $2205&1;
               if ($2206) {
                label = 205;
                break L171;
               }
               $__r$i$i82 = $2204;
               $2207 = $__r$i$i82;
               $2208 = $617;
               $2209 = $618;
               $2210 = (($2208) + ($2209)|0);
               $2211 = ($2207|0)==($2210|0);
               if ($2211) {
                $616 = -1;
                break;
               } else {
                $2215 = $__r$i$i82;
                $2216 = $617;
                $2217 = $2215;
                $2218 = $2216;
                $2219 = (($2217) - ($2218))|0;
                $616 = $2219;
                break;
               }
              }
             } while(0);
             if ((label|0) == 199) {
              label = 0;
              $616 = -1;
             }
             $2223 = $616;
             $2224 = ($2223|0)==(-1);
             if ($2224) {
              $2225 = $k;
              $604 = $tokens;
              $605 = $2225;
              $2226 = $604;
              $2227 = $605;
              $2228 = HEAP32[$2226>>2]|0;
              $2229 = (($2228) + (($2227*12)|0)|0);
              $603 = $2229;
              $2230 = $603;
              $602 = $2230;
              $2231 = $602;
              $601 = $2231;
              $2232 = $601;
              $600 = $2232;
              $2233 = $600;
              $599 = $2233;
              $2234 = $599;
              $598 = $2234;
              $2235 = $598;
              $2236 = HEAP8[$2235>>0]|0;
              $2237 = $2236&255;
              $2238 = $2237 & 1;
              $2239 = ($2238|0)!=(0);
              if ($2239) {
               $592 = $2232;
               $2240 = $592;
               $591 = $2240;
               $2241 = $591;
               $590 = $2241;
               $2242 = $590;
               $2243 = (($2242) + 8|0);
               $2244 = HEAP32[$2243>>2]|0;
               $2251 = $2244;
              } else {
               $597 = $2232;
               $2245 = $597;
               $596 = $2245;
               $2246 = $596;
               $595 = $2246;
               $2247 = $595;
               $2248 = (($2247) + 1|0);
               $594 = $2248;
               $2249 = $594;
               $593 = $2249;
               $2250 = $593;
               $2251 = $2250;
              }
              $589 = $2251;
              $2252 = $589;
              __THREW__ = 0;
              $2253 = (invoke_ii(468,($2252|0))|0);
              $2254 = __THREW__; __THREW__ = 0;
              $2255 = $2254&1;
              if ($2255) {
               label = 56;
               break L130;
              }
              $2256 = $2253&255;
              $r = $2256;
              $2257 = $k;
              $2258 = (($2257) + 1)|0;
              $587 = $tokens;
              $588 = $2258;
              $2259 = $587;
              $2260 = $588;
              $2261 = HEAP32[$2259>>2]|0;
              $2262 = (($2261) + (($2260*12)|0)|0);
              $586 = $2262;
              $2263 = $586;
              $585 = $2263;
              $2264 = $585;
              $584 = $2264;
              $2265 = $584;
              $583 = $2265;
              $2266 = $583;
              $582 = $2266;
              $2267 = $582;
              $581 = $2267;
              $2268 = $581;
              $2269 = HEAP8[$2268>>0]|0;
              $2270 = $2269&255;
              $2271 = $2270 & 1;
              $2272 = ($2271|0)!=(0);
              if ($2272) {
               $575 = $2265;
               $2273 = $575;
               $574 = $2273;
               $2274 = $574;
               $573 = $2274;
               $2275 = $573;
               $2276 = (($2275) + 8|0);
               $2277 = HEAP32[$2276>>2]|0;
               $2284 = $2277;
              } else {
               $580 = $2265;
               $2278 = $580;
               $579 = $2278;
               $2279 = $579;
               $578 = $2279;
               $2280 = $578;
               $2281 = (($2280) + 1|0);
               $577 = $2281;
               $2282 = $577;
               $576 = $2282;
               $2283 = $576;
               $2284 = $2283;
              }
              $572 = $2284;
              $2285 = $572;
              __THREW__ = 0;
              $2286 = (invoke_ii(468,($2285|0))|0);
              $2287 = __THREW__; __THREW__ = 0;
              $2288 = $2287&1;
              if ($2288) {
               label = 56;
               break L130;
              }
              $2289 = $2286&255;
              $g = $2289;
              $2290 = $k;
              $2291 = (($2290) + 2)|0;
              $570 = $tokens;
              $571 = $2291;
              $2292 = $570;
              $2293 = $571;
              $2294 = HEAP32[$2292>>2]|0;
              $2295 = (($2294) + (($2293*12)|0)|0);
              $569 = $2295;
              $2296 = $569;
              $568 = $2296;
              $2297 = $568;
              $567 = $2297;
              $2298 = $567;
              $566 = $2298;
              $2299 = $566;
              $565 = $2299;
              $2300 = $565;
              $564 = $2300;
              $2301 = $564;
              $2302 = HEAP8[$2301>>0]|0;
              $2303 = $2302&255;
              $2304 = $2303 & 1;
              $2305 = ($2304|0)!=(0);
              if ($2305) {
               $558 = $2298;
               $2306 = $558;
               $557 = $2306;
               $2307 = $557;
               $556 = $2307;
               $2308 = $556;
               $2309 = (($2308) + 8|0);
               $2310 = HEAP32[$2309>>2]|0;
               $2317 = $2310;
              } else {
               $563 = $2298;
               $2311 = $563;
               $562 = $2311;
               $2312 = $562;
               $561 = $2312;
               $2313 = $561;
               $2314 = (($2313) + 1|0);
               $560 = $2314;
               $2315 = $560;
               $559 = $2315;
               $2316 = $559;
               $2317 = $2316;
              }
              $555 = $2317;
              $2318 = $555;
              __THREW__ = 0;
              $2319 = (invoke_ii(468,($2318|0))|0);
              $2320 = __THREW__; __THREW__ = 0;
              $2321 = $2320&1;
              if ($2321) {
               label = 56;
               break L130;
              }
              $2322 = $2319&255;
              $b = $2322;
              $2323 = $r;
              $2324 = $g;
              $2325 = $b;
              __THREW__ = 0;
              invoke_viiiii(479,($color|0),($2323|0),($2324|0),($2325|0),-1);
              $2326 = __THREW__; __THREW__ = 0;
              $2327 = $2326&1;
              if ($2327) {
               label = 56;
               break L130;
              }
              $554 = $v_iter;
              $2328 = $554;
              $2329 = HEAP32[$2328>>2]|0;
              __THREW__ = 0;
              $2330 = (invoke_ii(475,($2329|0))|0);
              $2331 = __THREW__; __THREW__ = 0;
              $2332 = $2331&1;
              if ($2332) {
               label = 56;
               break L130;
              }
              __THREW__ = 0;
              invoke_vii(480,($2330|0),($color|0));
              $2333 = __THREW__; __THREW__ = 0;
              $2334 = $2333&1;
              if ($2334) {
               label = 56;
               break L130;
              }
             } else {
              $2335 = $k;
              $552 = $tokens;
              $553 = $2335;
              $2336 = $552;
              $2337 = $553;
              $2338 = HEAP32[$2336>>2]|0;
              $2339 = (($2338) + (($2337*12)|0)|0);
              $551 = $2339;
              $2340 = $551;
              $550 = $2340;
              $2341 = $550;
              $549 = $2341;
              $2342 = $549;
              $548 = $2342;
              $2343 = $548;
              $547 = $2343;
              $2344 = $547;
              $546 = $2344;
              $2345 = $546;
              $2346 = HEAP8[$2345>>0]|0;
              $2347 = $2346&255;
              $2348 = $2347 & 1;
              $2349 = ($2348|0)!=(0);
              if ($2349) {
               $540 = $2342;
               $2350 = $540;
               $539 = $2350;
               $2351 = $539;
               $538 = $2351;
               $2352 = $538;
               $2353 = (($2352) + 8|0);
               $2354 = HEAP32[$2353>>2]|0;
               $2361 = $2354;
              } else {
               $545 = $2342;
               $2355 = $545;
               $544 = $2355;
               $2356 = $544;
               $543 = $2356;
               $2357 = $543;
               $2358 = (($2357) + 1|0);
               $542 = $2358;
               $2359 = $542;
               $541 = $2359;
               $2360 = $541;
               $2361 = $2360;
              }
              $537 = $2361;
              $2362 = $537;
              __THREW__ = 0;
              $2363 = (+invoke_di(470,($2362|0)));
              $2364 = __THREW__; __THREW__ = 0;
              $2365 = $2364&1;
              if ($2365) {
               label = 56;
               break L130;
              }
              $2366 = $2363;
              $r2 = $2366;
              $2367 = $k;
              $2368 = (($2367) + 1)|0;
              $535 = $tokens;
              $536 = $2368;
              $2369 = $535;
              $2370 = $536;
              $2371 = HEAP32[$2369>>2]|0;
              $2372 = (($2371) + (($2370*12)|0)|0);
              $532 = $2372;
              $2373 = $532;
              $531 = $2373;
              $2374 = $531;
              $530 = $2374;
              $2375 = $530;
              $529 = $2375;
              $2376 = $529;
              $528 = $2376;
              $2377 = $528;
              $527 = $2377;
              $2378 = $527;
              $2379 = HEAP8[$2378>>0]|0;
              $2380 = $2379&255;
              $2381 = $2380 & 1;
              $2382 = ($2381|0)!=(0);
              if ($2382) {
               $521 = $2375;
               $2383 = $521;
               $520 = $2383;
               $2384 = $520;
               $519 = $2384;
               $2385 = $519;
               $2386 = (($2385) + 8|0);
               $2387 = HEAP32[$2386>>2]|0;
               $2394 = $2387;
              } else {
               $526 = $2375;
               $2388 = $526;
               $525 = $2388;
               $2389 = $525;
               $524 = $2389;
               $2390 = $524;
               $2391 = (($2390) + 1|0);
               $523 = $2391;
               $2392 = $523;
               $522 = $2392;
               $2393 = $522;
               $2394 = $2393;
              }
              $518 = $2394;
              $2395 = $518;
              __THREW__ = 0;
              $2396 = (+invoke_di(470,($2395|0)));
              $2397 = __THREW__; __THREW__ = 0;
              $2398 = $2397&1;
              if ($2398) {
               label = 56;
               break L130;
              }
              $2399 = $2396;
              $g3 = $2399;
              $2400 = $k;
              $2401 = (($2400) + 2)|0;
              $516 = $tokens;
              $517 = $2401;
              $2402 = $516;
              $2403 = $517;
              $2404 = HEAP32[$2402>>2]|0;
              $2405 = (($2404) + (($2403*12)|0)|0);
              $509 = $2405;
              $2406 = $509;
              $508 = $2406;
              $2407 = $508;
              $507 = $2407;
              $2408 = $507;
              $506 = $2408;
              $2409 = $506;
              $505 = $2409;
              $2410 = $505;
              $504 = $2410;
              $2411 = $504;
              $2412 = HEAP8[$2411>>0]|0;
              $2413 = $2412&255;
              $2414 = $2413 & 1;
              $2415 = ($2414|0)!=(0);
              if ($2415) {
               $498 = $2408;
               $2416 = $498;
               $497 = $2416;
               $2417 = $497;
               $496 = $2417;
               $2418 = $496;
               $2419 = (($2418) + 8|0);
               $2420 = HEAP32[$2419>>2]|0;
               $2427 = $2420;
              } else {
               $503 = $2408;
               $2421 = $503;
               $502 = $2421;
               $2422 = $502;
               $501 = $2422;
               $2423 = $501;
               $2424 = (($2423) + 1|0);
               $500 = $2424;
               $2425 = $500;
               $499 = $2425;
               $2426 = $499;
               $2427 = $2426;
              }
              $495 = $2427;
              $2428 = $495;
              __THREW__ = 0;
              $2429 = (+invoke_di(470,($2428|0)));
              $2430 = __THREW__; __THREW__ = 0;
              $2431 = $2430&1;
              if ($2431) {
               label = 56;
               break L130;
              }
              $2432 = $2429;
              $b4 = $2432;
              $2433 = $r2;
              $2434 = $g3;
              $2435 = $b4;
              __THREW__ = 0;
              invoke_vidddd(481,($color5|0),(+$2433),(+$2434),(+$2435),1.0);
              $2436 = __THREW__; __THREW__ = 0;
              $2437 = $2436&1;
              if ($2437) {
               label = 56;
               break L130;
              }
              $486 = $v_iter;
              $2438 = $486;
              $2439 = HEAP32[$2438>>2]|0;
              __THREW__ = 0;
              $2440 = (invoke_ii(475,($2439|0))|0);
              $2441 = __THREW__; __THREW__ = 0;
              $2442 = $2441&1;
              if ($2442) {
               label = 56;
               break L130;
              }
              __THREW__ = 0;
              invoke_vii(477,($2440|0),($color5|0));
              $2443 = __THREW__; __THREW__ = 0;
              $2444 = $2443&1;
              if ($2444) {
               label = 56;
               break L130;
              }
             }
            } else {
             $2445 = $nb_color_components;
             $2446 = ($2445|0)==(4);
             if ($2446) {
              $2447 = $k;
              $476 = $tokens;
              $477 = $2447;
              $2448 = $476;
              $2449 = $477;
              $2450 = HEAP32[$2448>>2]|0;
              $2451 = (($2450) + (($2449*12)|0)|0);
              $462 = $2451;
              $463 = 3984;
              $464 = 0;
              $2452 = $462;
              $461 = $2452;
              $2453 = $461;
              $460 = $2453;
              $2454 = $460;
              $459 = $2454;
              $2455 = $459;
              $458 = $2455;
              $2456 = $458;
              $457 = $2456;
              $2457 = $457;
              $2458 = HEAP8[$2457>>0]|0;
              $2459 = $2458&255;
              $2460 = $2459 & 1;
              $2461 = ($2460|0)!=(0);
              if ($2461) {
               $451 = $2454;
               $2462 = $451;
               $450 = $2462;
               $2463 = $450;
               $449 = $2463;
               $2464 = $449;
               $2465 = (($2464) + 8|0);
               $2466 = HEAP32[$2465>>2]|0;
               $2473 = $2466;
              } else {
               $456 = $2454;
               $2467 = $456;
               $455 = $2467;
               $2468 = $455;
               $454 = $2468;
               $2469 = $454;
               $2470 = (($2469) + 1|0);
               $453 = $2470;
               $2471 = $453;
               $452 = $2471;
               $2472 = $452;
               $2473 = $2472;
              }
              $448 = $2473;
              $2474 = $448;
              $437 = $2452;
              $2475 = $437;
              $436 = $2475;
              $2476 = $436;
              $435 = $2476;
              $2477 = $435;
              $434 = $2477;
              $2478 = $434;
              $2479 = HEAP8[$2478>>0]|0;
              $2480 = $2479&255;
              $2481 = $2480 & 1;
              $2482 = ($2481|0)!=(0);
              if ($2482) {
               $430 = $2475;
               $2483 = $430;
               $429 = $2483;
               $2484 = $429;
               $428 = $2484;
               $2485 = $428;
               $2486 = (($2485) + 4|0);
               $2487 = HEAP32[$2486>>2]|0;
               $2500 = $2487;
              } else {
               $433 = $2475;
               $2488 = $433;
               $432 = $2488;
               $2489 = $432;
               $431 = $2489;
               $2490 = $431;
               $2491 = HEAP8[$2490>>0]|0;
               $2492 = $2491&255;
               $2493 = $2492 >> 1;
               $2500 = $2493;
              }
              $2494 = $463;
              $2495 = $464;
              $2496 = $463;
              __THREW__ = 0;
              $2497 = (invoke_ii(445,($2496|0))|0);
              $2498 = __THREW__; __THREW__ = 0;
              $2499 = $2498&1;
              if ($2499) {
               label = 267;
               break;
              }
              $439 = $2474;
              $440 = $2500;
              $441 = $2494;
              $442 = $2495;
              $443 = $2497;
              $2501 = $442;
              $2502 = $440;
              $2503 = ($2501>>>0)>($2502>>>0);
              do {
               if ($2503) {
                label = 259;
               } else {
                $2504 = $440;
                $2505 = $442;
                $2506 = (($2504) - ($2505))|0;
                $2507 = $443;
                $2508 = ($2506>>>0)<($2507>>>0);
                if ($2508) {
                 label = 259;
                 break;
                }
                $2509 = $443;
                $2510 = ($2509|0)==(0);
                if ($2510) {
                 $2511 = $442;
                 $438 = $2511;
                 break;
                }
                $2512 = $439;
                $2513 = $442;
                $2514 = (($2512) + ($2513)|0);
                $2515 = $439;
                $2516 = $440;
                $2517 = (($2515) + ($2516)|0);
                $2518 = $441;
                $2519 = $441;
                $2520 = $443;
                $2521 = (($2519) + ($2520)|0);
                __THREW__ = 0;
                ;HEAP8[$$byval_copy8+0>>0]=HEAP8[$444+0>>0]|0;
                ;HEAP8[$$byval_copy9+0>>0]=HEAP8[$445+0>>0]|0;
                $2522 = (invoke_iiiiiiii(478,($2514|0),($2517|0),($2518|0),($2521|0),(465|0),($$byval_copy8|0),($$byval_copy9|0))|0);
                $2523 = __THREW__; __THREW__ = 0;
                $2524 = $2523&1;
                if ($2524) {
                 label = 265;
                 break L171;
                }
                $__r$i$i97 = $2522;
                $2525 = $__r$i$i97;
                $2526 = $439;
                $2527 = $440;
                $2528 = (($2526) + ($2527)|0);
                $2529 = ($2525|0)==($2528|0);
                if ($2529) {
                 $438 = -1;
                 break;
                } else {
                 $2533 = $__r$i$i97;
                 $2534 = $439;
                 $2535 = $2533;
                 $2536 = $2534;
                 $2537 = (($2535) - ($2536))|0;
                 $438 = $2537;
                 break;
                }
               }
              } while(0);
              if ((label|0) == 259) {
               label = 0;
               $438 = -1;
              }
              $2541 = $438;
              $2542 = ($2541|0)==(-1);
              if ($2542) {
               $2543 = $k;
               $426 = $tokens;
               $427 = $2543;
               $2544 = $426;
               $2545 = $427;
               $2546 = HEAP32[$2544>>2]|0;
               $2547 = (($2546) + (($2545*12)|0)|0);
               $425 = $2547;
               $2548 = $425;
               $424 = $2548;
               $2549 = $424;
               $423 = $2549;
               $2550 = $423;
               $422 = $2550;
               $2551 = $422;
               $421 = $2551;
               $2552 = $421;
               $420 = $2552;
               $2553 = $420;
               $2554 = HEAP8[$2553>>0]|0;
               $2555 = $2554&255;
               $2556 = $2555 & 1;
               $2557 = ($2556|0)!=(0);
               if ($2557) {
                $414 = $2550;
                $2558 = $414;
                $413 = $2558;
                $2559 = $413;
                $412 = $2559;
                $2560 = $412;
                $2561 = (($2560) + 8|0);
                $2562 = HEAP32[$2561>>2]|0;
                $2569 = $2562;
               } else {
                $419 = $2550;
                $2563 = $419;
                $418 = $2563;
                $2564 = $418;
                $417 = $2564;
                $2565 = $417;
                $2566 = (($2565) + 1|0);
                $416 = $2566;
                $2567 = $416;
                $415 = $2567;
                $2568 = $415;
                $2569 = $2568;
               }
               $411 = $2569;
               $2570 = $411;
               __THREW__ = 0;
               $2571 = (invoke_ii(468,($2570|0))|0);
               $2572 = __THREW__; __THREW__ = 0;
               $2573 = $2572&1;
               if ($2573) {
                label = 56;
                break L130;
               }
               $2574 = $2571&255;
               $r6 = $2574;
               $2575 = $k;
               $2576 = (($2575) + 1)|0;
               $409 = $tokens;
               $410 = $2576;
               $2577 = $409;
               $2578 = $410;
               $2579 = HEAP32[$2577>>2]|0;
               $2580 = (($2579) + (($2578*12)|0)|0);
               $408 = $2580;
               $2581 = $408;
               $407 = $2581;
               $2582 = $407;
               $406 = $2582;
               $2583 = $406;
               $405 = $2583;
               $2584 = $405;
               $404 = $2584;
               $2585 = $404;
               $403 = $2585;
               $2586 = $403;
               $2587 = HEAP8[$2586>>0]|0;
               $2588 = $2587&255;
               $2589 = $2588 & 1;
               $2590 = ($2589|0)!=(0);
               if ($2590) {
                $397 = $2583;
                $2591 = $397;
                $396 = $2591;
                $2592 = $396;
                $395 = $2592;
                $2593 = $395;
                $2594 = (($2593) + 8|0);
                $2595 = HEAP32[$2594>>2]|0;
                $2602 = $2595;
               } else {
                $402 = $2583;
                $2596 = $402;
                $401 = $2596;
                $2597 = $401;
                $400 = $2597;
                $2598 = $400;
                $2599 = (($2598) + 1|0);
                $399 = $2599;
                $2600 = $399;
                $398 = $2600;
                $2601 = $398;
                $2602 = $2601;
               }
               $394 = $2602;
               $2603 = $394;
               __THREW__ = 0;
               $2604 = (invoke_ii(468,($2603|0))|0);
               $2605 = __THREW__; __THREW__ = 0;
               $2606 = $2605&1;
               if ($2606) {
                label = 56;
                break L130;
               }
               $2607 = $2604&255;
               $g7 = $2607;
               $2608 = $k;
               $2609 = (($2608) + 2)|0;
               $380 = $tokens;
               $381 = $2609;
               $2610 = $380;
               $2611 = $381;
               $2612 = HEAP32[$2610>>2]|0;
               $2613 = (($2612) + (($2611*12)|0)|0);
               $379 = $2613;
               $2614 = $379;
               $378 = $2614;
               $2615 = $378;
               $377 = $2615;
               $2616 = $377;
               $376 = $2616;
               $2617 = $376;
               $375 = $2617;
               $2618 = $375;
               $374 = $2618;
               $2619 = $374;
               $2620 = HEAP8[$2619>>0]|0;
               $2621 = $2620&255;
               $2622 = $2621 & 1;
               $2623 = ($2622|0)!=(0);
               if ($2623) {
                $368 = $2616;
                $2624 = $368;
                $367 = $2624;
                $2625 = $367;
                $366 = $2625;
                $2626 = $366;
                $2627 = (($2626) + 8|0);
                $2628 = HEAP32[$2627>>2]|0;
                $2635 = $2628;
               } else {
                $373 = $2616;
                $2629 = $373;
                $372 = $2629;
                $2630 = $372;
                $371 = $2630;
                $2631 = $371;
                $2632 = (($2631) + 1|0);
                $370 = $2632;
                $2633 = $370;
                $369 = $2633;
                $2634 = $369;
                $2635 = $2634;
               }
               $365 = $2635;
               $2636 = $365;
               __THREW__ = 0;
               $2637 = (invoke_ii(468,($2636|0))|0);
               $2638 = __THREW__; __THREW__ = 0;
               $2639 = $2638&1;
               if ($2639) {
                label = 56;
                break L130;
               }
               $2640 = $2637&255;
               $b8 = $2640;
               $2641 = $k;
               $2642 = (($2641) + 3)|0;
               $363 = $tokens;
               $364 = $2642;
               $2643 = $363;
               $2644 = $364;
               $2645 = HEAP32[$2643>>2]|0;
               $2646 = (($2645) + (($2644*12)|0)|0);
               $362 = $2646;
               $2647 = $362;
               $361 = $2647;
               $2648 = $361;
               $360 = $2648;
               $2649 = $360;
               $359 = $2649;
               $2650 = $359;
               $358 = $2650;
               $2651 = $358;
               $357 = $2651;
               $2652 = $357;
               $2653 = HEAP8[$2652>>0]|0;
               $2654 = $2653&255;
               $2655 = $2654 & 1;
               $2656 = ($2655|0)!=(0);
               if ($2656) {
                $351 = $2649;
                $2657 = $351;
                $350 = $2657;
                $2658 = $350;
                $349 = $2658;
                $2659 = $349;
                $2660 = (($2659) + 8|0);
                $2661 = HEAP32[$2660>>2]|0;
                $2668 = $2661;
               } else {
                $356 = $2649;
                $2662 = $356;
                $355 = $2662;
                $2663 = $355;
                $354 = $2663;
                $2664 = $354;
                $2665 = (($2664) + 1|0);
                $353 = $2665;
                $2666 = $353;
                $352 = $2666;
                $2667 = $352;
                $2668 = $2667;
               }
               $348 = $2668;
               $2669 = $348;
               __THREW__ = 0;
               $2670 = (invoke_ii(468,($2669|0))|0);
               $2671 = __THREW__; __THREW__ = 0;
               $2672 = $2671&1;
               if ($2672) {
                label = 56;
                break L130;
               }
               $2673 = $2670&255;
               $a = $2673;
               $2674 = $r6;
               $2675 = $g7;
               $2676 = $b8;
               $2677 = $a;
               __THREW__ = 0;
               invoke_viiiii(479,($color9|0),($2674|0),($2675|0),($2676|0),($2677|0));
               $2678 = __THREW__; __THREW__ = 0;
               $2679 = $2678&1;
               if ($2679) {
                label = 56;
                break L130;
               }
               $279 = $v_iter;
               $2680 = $279;
               $2681 = HEAP32[$2680>>2]|0;
               __THREW__ = 0;
               $2682 = (invoke_ii(475,($2681|0))|0);
               $2683 = __THREW__; __THREW__ = 0;
               $2684 = $2683&1;
               if ($2684) {
                label = 56;
                break L130;
               }
               __THREW__ = 0;
               invoke_vii(480,($2682|0),($color9|0));
               $2685 = __THREW__; __THREW__ = 0;
               $2686 = $2685&1;
               if ($2686) {
                label = 56;
                break L130;
               }
              } else {
               $2687 = $k;
               $277 = $tokens;
               $278 = $2687;
               $2688 = $277;
               $2689 = $278;
               $2690 = HEAP32[$2688>>2]|0;
               $2691 = (($2690) + (($2689*12)|0)|0);
               $274 = $2691;
               $2692 = $274;
               $273 = $2692;
               $2693 = $273;
               $272 = $2693;
               $2694 = $272;
               $271 = $2694;
               $2695 = $271;
               $270 = $2695;
               $2696 = $270;
               $269 = $2696;
               $2697 = $269;
               $2698 = HEAP8[$2697>>0]|0;
               $2699 = $2698&255;
               $2700 = $2699 & 1;
               $2701 = ($2700|0)!=(0);
               if ($2701) {
                $263 = $2694;
                $2702 = $263;
                $262 = $2702;
                $2703 = $262;
                $261 = $2703;
                $2704 = $261;
                $2705 = (($2704) + 8|0);
                $2706 = HEAP32[$2705>>2]|0;
                $2713 = $2706;
               } else {
                $268 = $2694;
                $2707 = $268;
                $267 = $2707;
                $2708 = $267;
                $266 = $2708;
                $2709 = $266;
                $2710 = (($2709) + 1|0);
                $265 = $2710;
                $2711 = $265;
                $264 = $2711;
                $2712 = $264;
                $2713 = $2712;
               }
               $260 = $2713;
               $2714 = $260;
               __THREW__ = 0;
               $2715 = (+invoke_di(470,($2714|0)));
               $2716 = __THREW__; __THREW__ = 0;
               $2717 = $2716&1;
               if ($2717) {
                label = 56;
                break L130;
               }
               $2718 = $2715;
               $r10 = $2718;
               $2719 = $k;
               $2720 = (($2719) + 1)|0;
               $256 = $tokens;
               $257 = $2720;
               $2721 = $256;
               $2722 = $257;
               $2723 = HEAP32[$2721>>2]|0;
               $2724 = (($2723) + (($2722*12)|0)|0);
               $255 = $2724;
               $2725 = $255;
               $254 = $2725;
               $2726 = $254;
               $253 = $2726;
               $2727 = $253;
               $252 = $2727;
               $2728 = $252;
               $251 = $2728;
               $2729 = $251;
               $250 = $2729;
               $2730 = $250;
               $2731 = HEAP8[$2730>>0]|0;
               $2732 = $2731&255;
               $2733 = $2732 & 1;
               $2734 = ($2733|0)!=(0);
               if ($2734) {
                $244 = $2727;
                $2735 = $244;
                $243 = $2735;
                $2736 = $243;
                $242 = $2736;
                $2737 = $242;
                $2738 = (($2737) + 8|0);
                $2739 = HEAP32[$2738>>2]|0;
                $2746 = $2739;
               } else {
                $249 = $2727;
                $2740 = $249;
                $248 = $2740;
                $2741 = $248;
                $247 = $2741;
                $2742 = $247;
                $2743 = (($2742) + 1|0);
                $246 = $2743;
                $2744 = $246;
                $245 = $2744;
                $2745 = $245;
                $2746 = $2745;
               }
               $241 = $2746;
               $2747 = $241;
               __THREW__ = 0;
               $2748 = (+invoke_di(470,($2747|0)));
               $2749 = __THREW__; __THREW__ = 0;
               $2750 = $2749&1;
               if ($2750) {
                label = 56;
                break L130;
               }
               $2751 = $2748;
               $g11 = $2751;
               $2752 = $k;
               $2753 = (($2752) + 2)|0;
               $233 = $tokens;
               $234 = $2753;
               $2754 = $233;
               $2755 = $234;
               $2756 = HEAP32[$2754>>2]|0;
               $2757 = (($2756) + (($2755*12)|0)|0);
               $226 = $2757;
               $2758 = $226;
               $225 = $2758;
               $2759 = $225;
               $224 = $2759;
               $2760 = $224;
               $223 = $2760;
               $2761 = $223;
               $222 = $2761;
               $2762 = $222;
               $221 = $2762;
               $2763 = $221;
               $2764 = HEAP8[$2763>>0]|0;
               $2765 = $2764&255;
               $2766 = $2765 & 1;
               $2767 = ($2766|0)!=(0);
               if ($2767) {
                $215 = $2760;
                $2768 = $215;
                $214 = $2768;
                $2769 = $214;
                $213 = $2769;
                $2770 = $213;
                $2771 = (($2770) + 8|0);
                $2772 = HEAP32[$2771>>2]|0;
                $2779 = $2772;
               } else {
                $220 = $2760;
                $2773 = $220;
                $219 = $2773;
                $2774 = $219;
                $218 = $2774;
                $2775 = $218;
                $2776 = (($2775) + 1|0);
                $217 = $2776;
                $2777 = $217;
                $216 = $2777;
                $2778 = $216;
                $2779 = $2778;
               }
               $212 = $2779;
               $2780 = $212;
               __THREW__ = 0;
               $2781 = (+invoke_di(470,($2780|0)));
               $2782 = __THREW__; __THREW__ = 0;
               $2783 = $2782&1;
               if ($2783) {
                label = 56;
                break L130;
               }
               $2784 = $2781;
               $b12 = $2784;
               $2785 = $k;
               $2786 = (($2785) + 3)|0;
               $198 = $tokens;
               $199 = $2786;
               $2787 = $198;
               $2788 = $199;
               $2789 = HEAP32[$2787>>2]|0;
               $2790 = (($2789) + (($2788*12)|0)|0);
               $197 = $2790;
               $2791 = $197;
               $196 = $2791;
               $2792 = $196;
               $195 = $2792;
               $2793 = $195;
               $194 = $2793;
               $2794 = $194;
               $193 = $2794;
               $2795 = $193;
               $192 = $2795;
               $2796 = $192;
               $2797 = HEAP8[$2796>>0]|0;
               $2798 = $2797&255;
               $2799 = $2798 & 1;
               $2800 = ($2799|0)!=(0);
               if ($2800) {
                $186 = $2793;
                $2801 = $186;
                $185 = $2801;
                $2802 = $185;
                $184 = $2802;
                $2803 = $184;
                $2804 = (($2803) + 8|0);
                $2805 = HEAP32[$2804>>2]|0;
                $2812 = $2805;
               } else {
                $191 = $2793;
                $2806 = $191;
                $190 = $2806;
                $2807 = $190;
                $189 = $2807;
                $2808 = $189;
                $2809 = (($2808) + 1|0);
                $188 = $2809;
                $2810 = $188;
                $187 = $2810;
                $2811 = $187;
                $2812 = $2811;
               }
               $183 = $2812;
               $2813 = $183;
               __THREW__ = 0;
               $2814 = (+invoke_di(470,($2813|0)));
               $2815 = __THREW__; __THREW__ = 0;
               $2816 = $2815&1;
               if ($2816) {
                label = 56;
                break L130;
               }
               $2817 = $2814;
               $a13 = $2817;
               $2818 = $r10;
               $2819 = $g11;
               $2820 = $b12;
               $2821 = $a13;
               __THREW__ = 0;
               invoke_vidddd(481,($color14|0),(+$2818),(+$2819),(+$2820),(+$2821));
               $2822 = __THREW__; __THREW__ = 0;
               $2823 = $2822&1;
               if ($2823) {
                label = 56;
                break L130;
               }
               $176 = $v_iter;
               $2824 = $176;
               $2825 = HEAP32[$2824>>2]|0;
               __THREW__ = 0;
               $2826 = (invoke_ii(475,($2825|0))|0);
               $2827 = __THREW__; __THREW__ = 0;
               $2828 = $2827&1;
               if ($2828) {
                label = 56;
                break L130;
               }
               __THREW__ = 0;
               invoke_vii(477,($2826|0),($color14|0));
               $2829 = __THREW__; __THREW__ = 0;
               $2830 = $2829&1;
               if ($2830) {
                label = 56;
                break L130;
               }
              }
             }
            }
           }
          }
          $2831 = $nb_color_components;
          $2832 = $k;
          $2833 = (($2832) + ($2831))|0;
          $k = $2833;
         }
         $2834 = $isTexCoordDefined;
         $2835 = $2834&1;
         if ($2835) {
          $j15 = 0;
          while(1) {
           $2836 = $j15;
           $2837 = ($2836>>>0)<(2);
           if (!($2837)) {
            break;
           }
           $2838 = $k;
           $175 = $tokens;
           $2839 = $175;
           $2840 = (($2839) + 4|0);
           $2841 = HEAP32[$2840>>2]|0;
           $2842 = HEAP32[$2839>>2]|0;
           $2843 = $2841;
           $2844 = $2842;
           $2845 = (($2843) - ($2844))|0;
           $2846 = (($2845|0) / 12)&-1;
           $2847 = ($2838|0)==($2846|0);
           if ($2847) {
            $2848 = $1282;
            __THREW__ = 0;
            invoke_vii(462,($2848|0),($tokens|0));
            $2849 = __THREW__; __THREW__ = 0;
            $2850 = $2849&1;
            if ($2850) {
             label = 56;
             break L130;
            }
            $174 = $tokens;
            $2851 = $174;
            $2852 = (($2851) + 4|0);
            $2853 = HEAP32[$2852>>2]|0;
            $2854 = HEAP32[$2851>>2]|0;
            $2855 = $2853;
            $2856 = $2854;
            $2857 = (($2855) - ($2856))|0;
            $2858 = (($2857|0) / 12)&-1;
            $2859 = ($2858|0)==(0);
            if ($2859) {
             label = 328;
             break L171;
            }
            $k = 0;
           }
           $2860 = $k;
           $146 = $tokens;
           $147 = $2860;
           $2861 = $146;
           $2862 = $147;
           $2863 = HEAP32[$2861>>2]|0;
           $2864 = (($2863) + (($2862*12)|0)|0);
           __THREW__ = 0;
           invoke_vii(463,($str|0),($2864|0));
           $2865 = __THREW__; __THREW__ = 0;
           $2866 = $2865&1;
           if ($2866) {
            label = 56;
            break L130;
           }
           $2867 = $k;
           $2868 = (($2867) + 1)|0;
           $k = $2868;
           $2869 = $1281;
           __THREW__ = 0;
           $2870 = (invoke_ii(482,($2869|0))|0);
           $2871 = __THREW__; __THREW__ = 0;
           $2872 = $2871&1;
           if ($2872) {
            label = 335;
            break L171;
           }
           if ($2870) {
           }
           __THREW__ = 0;
           invoke_vi(397,($str|0));
           $2877 = __THREW__; __THREW__ = 0;
           $2878 = $2877&1;
           if ($2878) {
            label = 56;
            break L130;
           }
           $2879 = $j15;
           $2880 = (($2879) + 1)|0;
           $j15 = $2880;
          }
         }
         $2881 = $i;
         $2882 = (($2881) + 1)|0;
         $i = $2882;
         $143 = $v_iter;
         $144 = 0;
         $2883 = $143;
         ;HEAP32[$1295+0>>2]=HEAP32[$2883+0>>2]|0;
         $142 = $2883;
         $2884 = $142;
         $2885 = HEAP32[$2884>>2]|0;
         $2886 = (($2885) + 36|0);
         HEAP32[$2884>>2] = $2886;
        }
        switch (label|0) {
         case 141: {
          $1280 = 2;
          $1287 = 1;
          break L37;
          break;
         }
         case 158: {
          $1280 = 2;
          $1287 = 1;
          break L37;
          break;
         }
         case 173: {
          $1280 = 2;
          $1287 = 1;
          break L37;
          break;
         }
         case 205: {
          $2212 = ___cxa_find_matching_catch()|0;
          $2213 = tempRet0;
          $624 = $2212;
          $625 = $2213;
          $2214 = $624;
          ___cxa_call_unexpected(($2214|0));
          // unreachable;
          break;
         }
         case 207: {
          $2220 = ___cxa_find_matching_catch()|0;
          $2221 = tempRet0;
          $643 = $2220;
          $644 = $2221;
          $2222 = $643;
          ___cxa_call_unexpected(($2222|0));
          // unreachable;
          break;
         }
         case 265: {
          $2530 = ___cxa_find_matching_catch()|0;
          $2531 = tempRet0;
          $446 = $2530;
          $447 = $2531;
          $2532 = $446;
          ___cxa_call_unexpected(($2532|0));
          // unreachable;
          break;
         }
         case 267: {
          $2538 = ___cxa_find_matching_catch()|0;
          $2539 = tempRet0;
          $465 = $2538;
          $466 = $2539;
          $2540 = $465;
          ___cxa_call_unexpected(($2540|0));
          // unreachable;
          break;
         }
         case 328: {
          $1280 = 2;
          $1287 = 1;
          break L37;
          break;
         }
         case 335: {
          $2873 = ___cxa_find_matching_catch()|0;
          $2874 = tempRet0;
          $1285 = $2873;
          $1286 = $2874;
          __THREW__ = 0;
          invoke_vi(397,($str|0));
          $2875 = __THREW__; __THREW__ = 0;
          $2876 = $2875&1;
          if ($2876) {
           $4507 = ___cxa_find_matching_catch(0|0)|0;
           $4508 = tempRet0;
           ___clang_call_terminate($4507);
           // unreachable;
          } else {
           break L130;
          }
          break;
         }
         case 343: {
          __THREW__ = 0;
          $2887 = (invoke_i(483)|0);
          $2888 = __THREW__; __THREW__ = 0;
          $2889 = $2888&1;
          if ($2889) {
           label = 56;
           break L130;
          }
          L436: do {
           if ($2887) {
            $f = 0;
            L438: while(1) {
             $2890 = $f;
             $2891 = $nFaces;
             $2892 = ($2890>>>0)<($2891>>>0);
             if (!($2892)) {
              label = 400;
              break;
             }
             $2893 = $1284;
             $2894 = ($2893|0)!=(0|0);
             do {
              if ($2894) {
               $2895 = $f;
               $2896 = (($2895>>>0) % 1000)&-1;
               $2897 = ($2896|0)==(0);
               if (!($2897)) {
                break;
               }
               $2898 = $1284;
               $2899 = $f;
               $2900 = ($2899*50)|0;
               $2901 = $nFaces;
               $2902 = (($2900>>>0) / ($2901>>>0))&-1;
               $2903 = (50 + ($2902))|0;
               __THREW__ = 0;
               (invoke_iii($2898|0,($2903|0),(3992|0))|0);
               $2904 = __THREW__; __THREW__ = 0;
               $2905 = $2904&1;
               if ($2905) {
                label = 56;
                break L130;
               }
              }
             } while(0);
             $2906 = $1282;
             __THREW__ = 0;
             invoke_vii(462,($2906|0),($tokens|0));
             $2907 = __THREW__; __THREW__ = 0;
             $2908 = $2907&1;
             if ($2908) {
              label = 56;
              break L130;
             }
             $140 = $tokens;
             $141 = 0;
             $2909 = $140;
             $2910 = $141;
             $2911 = HEAP32[$2909>>2]|0;
             $2912 = (($2911) + (($2910*12)|0)|0);
             $139 = $2912;
             $2913 = $139;
             $138 = $2913;
             $2914 = $138;
             $137 = $2914;
             $2915 = $137;
             $136 = $2915;
             $2916 = $136;
             $135 = $2916;
             $2917 = $135;
             $134 = $2917;
             $2918 = $134;
             $2919 = HEAP8[$2918>>0]|0;
             $2920 = $2919&255;
             $2921 = $2920 & 1;
             $2922 = ($2921|0)!=(0);
             if ($2922) {
              $128 = $2915;
              $2923 = $128;
              $127 = $2923;
              $2924 = $127;
              $126 = $2924;
              $2925 = $126;
              $2926 = (($2925) + 8|0);
              $2927 = HEAP32[$2926>>2]|0;
              $2934 = $2927;
             } else {
              $133 = $2915;
              $2928 = $133;
              $132 = $2928;
              $2929 = $132;
              $131 = $2929;
              $2930 = $131;
              $2931 = (($2930) + 1|0);
              $130 = $2931;
              $2932 = $130;
              $129 = $2932;
              $2933 = $129;
              $2934 = $2933;
             }
             $125 = $2934;
             $2935 = $125;
             __THREW__ = 0;
             $2936 = (invoke_ii(468,($2935|0))|0);
             $2937 = __THREW__; __THREW__ = 0;
             $2938 = $2937&1;
             if ($2938) {
              label = 56;
              break L130;
             }
             $vert_per_face = $2936;
             $2939 = $vert_per_face;
             __THREW__ = 0;
             invoke_vii(484,($vInd|0),($2939|0));
             $2940 = __THREW__; __THREW__ = 0;
             $2941 = $2940&1;
             if ($2941) {
              label = 56;
              break L130;
             }
             $k = 1;
             $j16 = 0;
             while(1) {
              $2942 = $j16;
              $2943 = $vert_per_face;
              $2944 = ($2942|0)<($2943|0);
              if (!($2944)) {
               label = 374;
               break;
              }
              $2945 = $k;
              $124 = $tokens;
              $2946 = $124;
              $2947 = (($2946) + 4|0);
              $2948 = HEAP32[$2947>>2]|0;
              $2949 = HEAP32[$2946>>2]|0;
              $2950 = $2948;
              $2951 = $2949;
              $2952 = (($2950) - ($2951))|0;
              $2953 = (($2952|0) / 12)&-1;
              $2954 = ($2945|0)==($2953|0);
              if ($2954) {
               $2955 = $1282;
               __THREW__ = 0;
               invoke_vii(462,($2955|0),($tokens|0));
               $2956 = __THREW__; __THREW__ = 0;
               $2957 = $2956&1;
               if ($2957) {
                break L438;
               }
               $101 = $tokens;
               $2958 = $101;
               $2959 = (($2958) + 4|0);
               $2960 = HEAP32[$2959>>2]|0;
               $2961 = HEAP32[$2958>>2]|0;
               $2962 = $2960;
               $2963 = $2961;
               $2964 = (($2962) - ($2963))|0;
               $2965 = (($2964|0) / 12)&-1;
               $2966 = ($2965|0)==(0);
               if ($2966) {
                label = 363;
                break;
               }
               $k = 0;
              }
              $2971 = $k;
              $81 = $tokens;
              $82 = $2971;
              $2972 = $81;
              $2973 = $82;
              $2974 = HEAP32[$2972>>2]|0;
              $2975 = (($2974) + (($2973*12)|0)|0);
              $80 = $2975;
              $2976 = $80;
              $79 = $2976;
              $2977 = $79;
              $78 = $2977;
              $2978 = $78;
              $77 = $2978;
              $2979 = $77;
              $76 = $2979;
              $2980 = $76;
              $75 = $2980;
              $2981 = $75;
              $2982 = HEAP8[$2981>>0]|0;
              $2983 = $2982&255;
              $2984 = $2983 & 1;
              $2985 = ($2984|0)!=(0);
              if ($2985) {
               $69 = $2978;
               $2986 = $69;
               $68 = $2986;
               $2987 = $68;
               $67 = $2987;
               $2988 = $67;
               $2989 = (($2988) + 8|0);
               $2990 = HEAP32[$2989>>2]|0;
               $2997 = $2990;
              } else {
               $74 = $2978;
               $2991 = $74;
               $73 = $2991;
               $2992 = $73;
               $72 = $2992;
               $2993 = $72;
               $2994 = (($2993) + 1|0);
               $71 = $2994;
               $2995 = $71;
               $70 = $2995;
               $2996 = $70;
               $2997 = $2996;
              }
              $66 = $2997;
              $2998 = $66;
              __THREW__ = 0;
              $2999 = (invoke_ii(468,($2998|0))|0);
              $3000 = __THREW__; __THREW__ = 0;
              $3001 = $3000&1;
              if ($3001) {
               break L438;
              }
              $3002 = $j16;
              $62 = $vInd;
              $63 = $3002;
              $3003 = $62;
              $3004 = $63;
              $3005 = HEAP32[$3003>>2]|0;
              $3006 = (($3005) + ($3004<<2)|0);
              HEAP32[$3006>>2] = $2999;
              $3007 = $k;
              $3008 = (($3007) + 1)|0;
              $k = $3008;
              $3009 = $j16;
              $3010 = (($3009) + 1)|0;
              $j16 = $3010;
             }
             if ((label|0) == 363) {
              label = 0;
              $1280 = 2;
              $1287 = 1;
             }
             else if ((label|0) == 374) {
              label = 0;
              $3011 = $vert_per_face;
              $3012 = ($3011|0)==(3);
              if ($3012) {
               $3013 = $1281;
               $3014 = $1281;
               $26 = $vInd;
               $27 = 0;
               $3015 = $26;
               $3016 = $27;
               $3017 = HEAP32[$3015>>2]|0;
               $3018 = (($3017) + ($3016<<2)|0);
               $3019 = HEAP32[$3018>>2]|0;
               $24 = $3014;
               $25 = $3019;
               $3020 = $24;
               $3021 = $25;
               $3022 = HEAP32[$3020>>2]|0;
               $3023 = (($3022) + (($3021*36)|0)|0);
               $3024 = $1281;
               $22 = $vInd;
               $23 = 1;
               $3025 = $22;
               $3026 = $23;
               $3027 = HEAP32[$3025>>2]|0;
               $3028 = (($3027) + ($3026<<2)|0);
               $3029 = HEAP32[$3028>>2]|0;
               $4 = $3024;
               $5 = $3029;
               $3030 = $4;
               $3031 = $5;
               $3032 = HEAP32[$3030>>2]|0;
               $3033 = (($3032) + (($3031*36)|0)|0);
               $3034 = $1281;
               $0 = $vInd;
               $1 = 2;
               $3035 = $0;
               $3036 = $1;
               $3037 = HEAP32[$3035>>2]|0;
               $3038 = (($3037) + ($3036<<2)|0);
               $3039 = HEAP32[$3038>>2]|0;
               $2 = $3034;
               $3 = $3039;
               $3040 = $2;
               $3041 = $3;
               $3042 = HEAP32[$3040>>2]|0;
               $3043 = (($3042) + (($3041*36)|0)|0);
               __THREW__ = 0;
               invoke_viiiii(486,($1296|0),($3013|0),($3023|0),($3033|0),($3043|0));
               $3044 = __THREW__; __THREW__ = 0;
               $3045 = $3044&1;
               if ($3045) {
                break;
               }
              }
              $3046 = $vert_per_face;
              $3047 = ($3046|0)==(4);
              if ($3047) {
               $3048 = $1281;
               $3049 = $1281;
               $6 = $vInd;
               $7 = 0;
               $3050 = $6;
               $3051 = $7;
               $3052 = HEAP32[$3050>>2]|0;
               $3053 = (($3052) + ($3051<<2)|0);
               $3054 = HEAP32[$3053>>2]|0;
               $8 = $3049;
               $9 = $3054;
               $3055 = $8;
               $3056 = $9;
               $3057 = HEAP32[$3055>>2]|0;
               $3058 = (($3057) + (($3056*36)|0)|0);
               $3059 = $1281;
               $10 = $vInd;
               $11 = 1;
               $3060 = $10;
               $3061 = $11;
               $3062 = HEAP32[$3060>>2]|0;
               $3063 = (($3062) + ($3061<<2)|0);
               $3064 = HEAP32[$3063>>2]|0;
               $12 = $3059;
               $13 = $3064;
               $3065 = $12;
               $3066 = $13;
               $3067 = HEAP32[$3065>>2]|0;
               $3068 = (($3067) + (($3066*36)|0)|0);
               $3069 = $1281;
               $14 = $vInd;
               $15 = 2;
               $3070 = $14;
               $3071 = $15;
               $3072 = HEAP32[$3070>>2]|0;
               $3073 = (($3072) + ($3071<<2)|0);
               $3074 = HEAP32[$3073>>2]|0;
               $16 = $3069;
               $17 = $3074;
               $3075 = $16;
               $3076 = $17;
               $3077 = HEAP32[$3075>>2]|0;
               $3078 = (($3077) + (($3076*36)|0)|0);
               $3079 = $1281;
               $18 = $vInd;
               $19 = 3;
               $3080 = $18;
               $3081 = $19;
               $3082 = HEAP32[$3080>>2]|0;
               $3083 = (($3082) + ($3081<<2)|0);
               $3084 = HEAP32[$3083>>2]|0;
               $20 = $3079;
               $21 = $3084;
               $3085 = $20;
               $3086 = $21;
               $3087 = HEAP32[$3085>>2]|0;
               $3088 = (($3087) + (($3086*36)|0)|0);
               __THREW__ = 0;
               invoke_viiiiii(487,($1297|0),($3048|0),($3058|0),($3068|0),($3078|0),($3088|0));
               $3089 = __THREW__; __THREW__ = 0;
               $3090 = $3089&1;
               if ($3090) {
                break;
               }
              }
              $1287 = 0;
             }
             __THREW__ = 0;
             invoke_vi(485,($vInd|0));
             $3091 = __THREW__; __THREW__ = 0;
             $3092 = $3091&1;
             if ($3092) {
              label = 56;
              break L130;
             }
             $cleanup$dest = $1287;
             if (!((($cleanup$dest|0) == 0))) {
              break L37;
             }
             $3093 = $f;
             $3094 = (($3093) + 1)|0;
             $f = $3094;
            }
            if ((label|0) == 400) {
             break;
            }
            $2967 = ___cxa_find_matching_catch()|0;
            $2968 = tempRet0;
            $1285 = $2967;
            $1286 = $2968;
            __THREW__ = 0;
            invoke_vi(485,($vInd|0));
            $2969 = __THREW__; __THREW__ = 0;
            $2970 = $2969&1;
            if ($2970) {
             $4507 = ___cxa_find_matching_catch(0|0)|0;
             $4508 = tempRet0;
             ___clang_call_terminate($4507);
             // unreachable;
            } else {
             break L130;
            }
           } else {
            $3095 = $1281;
            $3096 = $nFaces;
            __THREW__ = 0;
            invoke_viii(488,($1298|0),($3095|0),($3096|0));
            $3097 = __THREW__; __THREW__ = 0;
            $3098 = $3097&1;
            if ($3098) {
             label = 56;
             break L130;
            }
            $f0 = 0;
            $61 = $qtmp;
            $3099 = $61;
            $60 = $3099;
            $3100 = $60;
            $56 = $3100;
            $3101 = $56;
            $55 = $3101;
            $30 = $32;
            $31 = -1;
            $3102 = $30;
            $3103 = $31;
            $28 = $3102;
            $29 = $3103;
            $3104 = $28;
            HEAP32[$3104>>2] = 0;
            $3105 = HEAP32[$32>>2]|0;
            HEAP32[$57>>2] = $3105;
            $33 = $57;
            HEAP32[$3101>>2] = 0;
            $3106 = (($3101) + 4|0);
            $36 = $38;
            $37 = -1;
            $3107 = $36;
            $3108 = $37;
            $34 = $3107;
            $35 = $3108;
            $3109 = $34;
            HEAP32[$3109>>2] = 0;
            $3110 = HEAP32[$38>>2]|0;
            HEAP32[$58>>2] = $3110;
            $39 = $58;
            HEAP32[$3106>>2] = 0;
            $3111 = (($3101) + 8|0);
            $42 = $44;
            $43 = -1;
            $3112 = $42;
            $3113 = $43;
            $40 = $3112;
            $41 = $3113;
            $3114 = $40;
            HEAP32[$3114>>2] = 0;
            $3115 = HEAP32[$44>>2]|0;
            HEAP32[$59>>2] = $3115;
            $45 = $59;
            $53 = $3111;
            $54 = 0;
            $3116 = $53;
            $3117 = $54;
            $51 = $3116;
            HEAP32[$52>>2] = $3117;
            $3118 = $51;
            $50 = $52;
            $3119 = $50;
            $3120 = HEAP32[$3119>>2]|0;
            $48 = $3118;
            HEAP32[$49>>2] = $3120;
            $3121 = $48;
            $47 = $3121;
            $46 = $49;
            $3122 = $46;
            $3123 = HEAP32[$3122>>2]|0;
            HEAP32[$3121>>2] = $3123;
            __THREW__ = 0;
            invoke_vi(489,($qtmp|0));
            $3124 = __THREW__; __THREW__ = 0;
            $3125 = $3124&1;
            L508: do {
             if ($3125) {
              label = 409;
             } else {
              $f17 = 0;
              L510: while(1) {
               $3126 = $f17;
               $3127 = $nFaces;
               $3128 = ($3126>>>0)<($3127>>>0);
               if (!($3128)) {
                label = 726;
                break;
               }
               $3129 = $f17;
               $f0 = $3129;
               $3130 = $1282;
               $3131 = HEAP32[$3130>>2]|0;
               $3132 = (($3131) + -12|0);
               $3133 = HEAP32[$3132>>2]|0;
               $3134 = (($3130) + ($3133)|0);
               $65 = $3134;
               $3135 = $65;
               $64 = $3135;
               $3136 = $64;
               $3137 = (($3136) + 16|0);
               $3138 = HEAP32[$3137>>2]|0;
               $3139 = $3138 & 5;
               $3140 = ($3139|0)!=(0);
               if ($3140) {
                label = 408;
                break;
               }
               $3143 = $1284;
               $3144 = ($3143|0)!=(0|0);
               do {
                if ($3144) {
                 $3145 = $f17;
                 $3146 = (($3145>>>0) % 1000)&-1;
                 $3147 = ($3146|0)==(0);
                 if (!($3147)) {
                  break;
                 }
                 $3148 = $1284;
                 $3149 = $f17;
                 $3150 = ($3149*50)|0;
                 $3151 = $nFaces;
                 $3152 = (($3150>>>0) / ($3151>>>0))&-1;
                 $3153 = (50 + ($3152))|0;
                 __THREW__ = 0;
                 (invoke_iii($3148|0,($3153|0),(3992|0))|0);
                 $3154 = __THREW__; __THREW__ = 0;
                 $3155 = $3154&1;
                 if ($3155) {
                  label = 409;
                  break L508;
                 }
                }
               } while(0);
               $3156 = $1282;
               __THREW__ = 0;
               invoke_vii(462,($3156|0),($tokens|0));
               $3157 = __THREW__; __THREW__ = 0;
               $3158 = $3157&1;
               if ($3158) {
                label = 409;
                break L508;
               }
               $83 = $tokens;
               $84 = 0;
               $3159 = $83;
               $3160 = $84;
               $3161 = HEAP32[$3159>>2]|0;
               $3162 = (($3161) + (($3160*12)|0)|0);
               $99 = $3162;
               $3163 = $99;
               $98 = $3163;
               $3164 = $98;
               $97 = $3164;
               $3165 = $97;
               $96 = $3165;
               $3166 = $96;
               $95 = $3166;
               $3167 = $95;
               $94 = $3167;
               $3168 = $94;
               $3169 = HEAP8[$3168>>0]|0;
               $3170 = $3169&255;
               $3171 = $3170 & 1;
               $3172 = ($3171|0)!=(0);
               if ($3172) {
                $88 = $3165;
                $3173 = $88;
                $87 = $3173;
                $3174 = $87;
                $86 = $3174;
                $3175 = $86;
                $3176 = (($3175) + 8|0);
                $3177 = HEAP32[$3176>>2]|0;
                $3184 = $3177;
               } else {
                $93 = $3165;
                $3178 = $93;
                $92 = $3178;
                $3179 = $92;
                $91 = $3179;
                $3180 = $91;
                $3181 = (($3180) + 1|0);
                $90 = $3181;
                $3182 = $90;
                $89 = $3182;
                $3183 = $89;
                $3184 = $3183;
               }
               $85 = $3184;
               $3185 = $85;
               __THREW__ = 0;
               $3186 = (invoke_ii(468,($3185|0))|0);
               $3187 = __THREW__; __THREW__ = 0;
               $3188 = $3187&1;
               if ($3188) {
                label = 409;
                break L508;
               }
               $vert_per_face18 = $3186;
               $3189 = $vert_per_face18;
               $3190 = ($3189|0)<(3);
               if ($3190) {
                label = 421;
                break;
               }
               $k = 1;
               $3191 = $vert_per_face18;
               $3192 = ($3191|0)==(3);
               if ($3192) {
                $j19 = 0;
                while(1) {
                 $3193 = $j19;
                 $3194 = ($3193|0)<(3);
                 if (!($3194)) {
                  break;
                 }
                 $3195 = $k;
                 $100 = $tokens;
                 $3196 = $100;
                 $3197 = (($3196) + 4|0);
                 $3198 = HEAP32[$3197>>2]|0;
                 $3199 = HEAP32[$3196>>2]|0;
                 $3200 = $3198;
                 $3201 = $3199;
                 $3202 = (($3200) - ($3201))|0;
                 $3203 = (($3202|0) / 12)&-1;
                 $3204 = ($3195|0)==($3203|0);
                 if ($3204) {
                  $3205 = $1282;
                  __THREW__ = 0;
                  invoke_vii(462,($3205|0),($tokens|0));
                  $3206 = __THREW__; __THREW__ = 0;
                  $3207 = $3206&1;
                  if ($3207) {
                   label = 409;
                   break L508;
                  }
                  $102 = $tokens;
                  $3208 = $102;
                  $3209 = (($3208) + 4|0);
                  $3210 = HEAP32[$3209>>2]|0;
                  $3211 = HEAP32[$3208>>2]|0;
                  $3212 = $3210;
                  $3213 = $3211;
                  $3214 = (($3212) - ($3213))|0;
                  $3215 = (($3214|0) / 12)&-1;
                  $3216 = ($3215|0)==(0);
                  if ($3216) {
                   label = 428;
                   break L510;
                  }
                  $k = 0;
                 }
                 $3217 = $1281;
                 $3218 = $k;
                 $103 = $tokens;
                 $104 = $3218;
                 $3219 = $103;
                 $3220 = $104;
                 $3221 = HEAP32[$3219>>2]|0;
                 $3222 = (($3221) + (($3220*12)|0)|0);
                 $119 = $3222;
                 $3223 = $119;
                 $118 = $3223;
                 $3224 = $118;
                 $117 = $3224;
                 $3225 = $117;
                 $116 = $3225;
                 $3226 = $116;
                 $115 = $3226;
                 $3227 = $115;
                 $114 = $3227;
                 $3228 = $114;
                 $3229 = HEAP8[$3228>>0]|0;
                 $3230 = $3229&255;
                 $3231 = $3230 & 1;
                 $3232 = ($3231|0)!=(0);
                 if ($3232) {
                  $108 = $3225;
                  $3233 = $108;
                  $107 = $3233;
                  $3234 = $107;
                  $106 = $3234;
                  $3235 = $106;
                  $3236 = (($3235) + 8|0);
                  $3237 = HEAP32[$3236>>2]|0;
                  $3244 = $3237;
                 } else {
                  $113 = $3225;
                  $3238 = $113;
                  $112 = $3238;
                  $3239 = $112;
                  $111 = $3239;
                  $3240 = $111;
                  $3241 = (($3240) + 1|0);
                  $110 = $3241;
                  $3242 = $110;
                  $109 = $3242;
                  $3243 = $109;
                  $3244 = $3243;
                 }
                 $105 = $3244;
                 $3245 = $105;
                 __THREW__ = 0;
                 $3246 = (invoke_ii(468,($3245|0))|0);
                 $3247 = __THREW__; __THREW__ = 0;
                 $3248 = $3247&1;
                 if ($3248) {
                  label = 409;
                  break L508;
                 }
                 $120 = $3217;
                 $121 = $3246;
                 $3249 = $120;
                 $3250 = $121;
                 $3251 = HEAP32[$3249>>2]|0;
                 $3252 = (($3251) + (($3250*36)|0)|0);
                 $3253 = $1281;
                 $3254 = (($3253) + 32|0);
                 $3255 = $f17;
                 $122 = $3254;
                 $123 = $3255;
                 $3256 = $122;
                 $3257 = $123;
                 $3258 = HEAP32[$3256>>2]|0;
                 $3259 = (($3258) + (($3257*44)|0)|0);
                 $3260 = $j19;
                 __THREW__ = 0;
                 $3261 = (invoke_iii(490,($3259|0),($3260|0))|0);
                 $3262 = __THREW__; __THREW__ = 0;
                 $3263 = $3262&1;
                 if ($3263) {
                  label = 409;
                  break L508;
                 }
                 HEAP32[$3261>>2] = $3252;
                 $3264 = $k;
                 $3265 = (($3264) + 1)|0;
                 $k = $3265;
                 $3266 = $j19;
                 $3267 = (($3266) + 1)|0;
                 $j19 = $3267;
                }
               } else {
                $3268 = $vert_per_face18;
                $3269 = (($3268) - 3)|0;
                $trigs = $3269;
                $3270 = $trigs;
                $3271 = $nFaces;
                $3272 = (($3271) + ($3270))|0;
                $nFaces = $3272;
                $3273 = $1281;
                $3274 = $trigs;
                __THREW__ = 0;
                invoke_viii(488,($1299|0),($3273|0),($3274|0));
                $3275 = __THREW__; __THREW__ = 0;
                $3276 = $3275&1;
                if ($3276) {
                 label = 409;
                 break L508;
                }
                $3277 = $vert_per_face18;
                __THREW__ = 0;
                invoke_vii(484,($vertIndices|0),($3277|0));
                $3278 = __THREW__; __THREW__ = 0;
                $3279 = $3278&1;
                if ($3279) {
                 label = 409;
                 break L508;
                }
                $3280 = $vert_per_face18;
                __THREW__ = 0;
                invoke_vii(491,($polygonVect|0),($3280|0));
                $3281 = __THREW__; __THREW__ = 0;
                $3282 = $3281&1;
                if ($3282) {
                 label = 450;
                 break;
                }
                $j20 = 0;
                while(1) {
                 $3283 = $j20;
                 $3284 = $vert_per_face18;
                 $3285 = ($3283|0)<($3284|0);
                 if (!($3285)) {
                  label = 466;
                  break;
                 }
                 $3286 = $k;
                 $145 = $tokens;
                 $3287 = $145;
                 $3288 = (($3287) + 4|0);
                 $3289 = HEAP32[$3288>>2]|0;
                 $3290 = HEAP32[$3287>>2]|0;
                 $3291 = $3289;
                 $3292 = $3290;
                 $3293 = (($3291) - ($3292))|0;
                 $3294 = (($3293|0) / 12)&-1;
                 $3295 = ($3286|0)==($3294|0);
                 if ($3295) {
                  $3296 = $1282;
                  __THREW__ = 0;
                  invoke_vii(462,($3296|0),($tokens|0));
                  $3297 = __THREW__; __THREW__ = 0;
                  $3298 = $3297&1;
                  if ($3298) {
                   label = 451;
                   break L510;
                  }
                  $148 = $tokens;
                  $3299 = $148;
                  $3300 = (($3299) + 4|0);
                  $3301 = HEAP32[$3300>>2]|0;
                  $3302 = HEAP32[$3299>>2]|0;
                  $3303 = $3301;
                  $3304 = $3302;
                  $3305 = (($3303) - ($3304))|0;
                  $3306 = (($3305|0) / 12)&-1;
                  $3307 = ($3306|0)==(0);
                  if ($3307) {
                   label = 449;
                   break;
                  }
                  $k = 0;
                 }
                 $3312 = $k;
                 $149 = $tokens;
                 $150 = $3312;
                 $3313 = $149;
                 $3314 = $150;
                 $3315 = HEAP32[$3313>>2]|0;
                 $3316 = (($3315) + (($3314*12)|0)|0);
                 $165 = $3316;
                 $3317 = $165;
                 $164 = $3317;
                 $3318 = $164;
                 $163 = $3318;
                 $3319 = $163;
                 $162 = $3319;
                 $3320 = $162;
                 $161 = $3320;
                 $3321 = $161;
                 $160 = $3321;
                 $3322 = $160;
                 $3323 = HEAP8[$3322>>0]|0;
                 $3324 = $3323&255;
                 $3325 = $3324 & 1;
                 $3326 = ($3325|0)!=(0);
                 if ($3326) {
                  $154 = $3319;
                  $3327 = $154;
                  $153 = $3327;
                  $3328 = $153;
                  $152 = $3328;
                  $3329 = $152;
                  $3330 = (($3329) + 8|0);
                  $3331 = HEAP32[$3330>>2]|0;
                  $3338 = $3331;
                 } else {
                  $159 = $3319;
                  $3332 = $159;
                  $158 = $3332;
                  $3333 = $158;
                  $157 = $3333;
                  $3334 = $157;
                  $3335 = (($3334) + 1|0);
                  $156 = $3335;
                  $3336 = $156;
                  $155 = $3336;
                  $3337 = $155;
                  $3338 = $3337;
                 }
                 $151 = $3338;
                 $3339 = $151;
                 __THREW__ = 0;
                 $3340 = (invoke_ii(468,($3339|0))|0);
                 $3341 = __THREW__; __THREW__ = 0;
                 $3342 = $3341&1;
                 if ($3342) {
                  label = 451;
                  break L510;
                 }
                 $3343 = $j20;
                 $166 = $vertIndices;
                 $167 = $3343;
                 $3344 = $166;
                 $3345 = $167;
                 $3346 = HEAP32[$3344>>2]|0;
                 $3347 = (($3346) + ($3345<<2)|0);
                 HEAP32[$3347>>2] = $3340;
                 $3348 = $j20;
                 $168 = $polygonVect;
                 $169 = $3348;
                 $3349 = $168;
                 $3350 = $169;
                 $3351 = HEAP32[$3349>>2]|0;
                 $3352 = (($3351) + (($3350*12)|0)|0);
                 $3353 = $1281;
                 $3354 = $j20;
                 $170 = $vertIndices;
                 $171 = $3354;
                 $3355 = $170;
                 $3356 = $171;
                 $3357 = HEAP32[$3355>>2]|0;
                 $3358 = (($3357) + ($3356<<2)|0);
                 $3359 = HEAP32[$3358>>2]|0;
                 $172 = $3353;
                 $173 = $3359;
                 $3360 = $172;
                 $3361 = $173;
                 $3362 = HEAP32[$3360>>2]|0;
                 $3363 = (($3362) + (($3361*36)|0)|0);
                 __THREW__ = 0;
                 $3364 = (invoke_ii(471,($3363|0))|0);
                 $3365 = __THREW__; __THREW__ = 0;
                 $3366 = $3365&1;
                 if ($3366) {
                  label = 451;
                  break L510;
                 }
                 __THREW__ = 0;
                 invoke_vii(492,($3352|0),($3364|0));
                 $3367 = __THREW__; __THREW__ = 0;
                 $3368 = $3367&1;
                 if ($3368) {
                  label = 451;
                  break L510;
                 }
                 $3369 = $k;
                 $3370 = (($3369) + 1)|0;
                 $k = $3370;
                 $3371 = $j20;
                 $3372 = (($3371) + 1)|0;
                 $j20 = $3372;
                }
                if ((label|0) == 449) {
                 label = 0;
                 $1280 = 2;
                 $1287 = 1;
                }
                else if ((label|0) == 466) {
                 label = 0;
                 $3373 = $vert_per_face18;
                 $3374 = ($3373|0)==(4);
                 if ($3374) {
                  __THREW__ = 0;
                  invoke_vii(493,($q|0),4);
                  $3375 = __THREW__; __THREW__ = 0;
                  $3376 = $3375&1;
                  if ($3376) {
                   label = 451;
                   break;
                  }
                  $qqi = 0;
                  while(1) {
                   $3377 = $qqi;
                   $3378 = ($3377|0)<(4);
                   if (!($3378)) {
                    break;
                   }
                   $3379 = $1281;
                   $3380 = $qqi;
                   $177 = $vertIndices;
                   $178 = $3380;
                   $3381 = $177;
                   $3382 = $178;
                   $3383 = HEAP32[$3381>>2]|0;
                   $3384 = (($3383) + ($3382<<2)|0);
                   $3385 = HEAP32[$3384>>2]|0;
                   $179 = $3379;
                   $180 = $3385;
                   $3386 = $179;
                   $3387 = $180;
                   $3388 = HEAP32[$3386>>2]|0;
                   $3389 = (($3388) + (($3387*36)|0)|0);
                   $3390 = $qqi;
                   $181 = $q;
                   $182 = $3390;
                   $3391 = $181;
                   $3392 = $182;
                   $3393 = HEAP32[$3391>>2]|0;
                   $3394 = (($3393) + ($3392<<2)|0);
                   HEAP32[$3394>>2] = $3389;
                   $3395 = $qqi;
                   $3396 = (($3395) + 1)|0;
                   $qqi = $3396;
                  }
                  __THREW__ = 0;
                  invoke_vi(489,($q|0));
                  $3401 = __THREW__; __THREW__ = 0;
                  $3402 = $3401&1;
                  if ($3402) {
                   label = 475;
                   break;
                  }
                  $qqi21 = 0;
                  while(1) {
                   $3403 = $qqi21;
                   $3404 = ($3403|0)<(4);
                   if (!($3404)) {
                    break;
                   }
                   $3405 = $qqi21;
                   $200 = $q;
                   $201 = $3405;
                   $3406 = $200;
                   $3407 = $201;
                   $3408 = HEAP32[$3406>>2]|0;
                   $3409 = (($3408) + ($3407<<2)|0);
                   $3410 = HEAP32[$3409>>2]|0;
                   $3411 = $1281;
                   $202 = $3411;
                   $203 = 0;
                   $3412 = $202;
                   $3413 = $203;
                   $3414 = HEAP32[$3412>>2]|0;
                   $3415 = (($3414) + (($3413*36)|0)|0);
                   $3416 = $3410;
                   $3417 = $3415;
                   $3418 = (($3416) - ($3417))|0;
                   $3419 = (($3418|0) / 36)&-1;
                   $3420 = $qqi21;
                   $204 = $vertIndices;
                   $205 = $3420;
                   $3421 = $204;
                   $3422 = $205;
                   $3423 = HEAP32[$3421>>2]|0;
                   $3424 = (($3423) + ($3422<<2)|0);
                   HEAP32[$3424>>2] = $3419;
                   $3425 = $qqi21;
                   $3426 = (($3425) + 1)|0;
                   $qqi21 = $3426;
                  }
                  $j22 = 0;
                  while(1) {
                   $3427 = $j22;
                   $3428 = ($3427|0)<(2);
                   if (!($3428)) {
                    break;
                   }
                   $3429 = $1281;
                   $206 = $vertIndices;
                   $207 = 0;
                   $3430 = $206;
                   $3431 = $207;
                   $3432 = HEAP32[$3430>>2]|0;
                   $3433 = (($3432) + ($3431<<2)|0);
                   $3434 = HEAP32[$3433>>2]|0;
                   $208 = $3429;
                   $209 = $3434;
                   $3435 = $208;
                   $3436 = $209;
                   $3437 = HEAP32[$3435>>2]|0;
                   $3438 = (($3437) + (($3436*36)|0)|0);
                   $3439 = $1281;
                   $3440 = (($3439) + 32|0);
                   $3441 = $f17;
                   $3442 = $j22;
                   $3443 = (($3441) + ($3442))|0;
                   $210 = $3440;
                   $211 = $3443;
                   $3444 = $210;
                   $3445 = $211;
                   $3446 = HEAP32[$3444>>2]|0;
                   $3447 = (($3446) + (($3445*44)|0)|0);
                   __THREW__ = 0;
                   $3448 = (invoke_iii(490,($3447|0),0)|0);
                   $3449 = __THREW__; __THREW__ = 0;
                   $3450 = $3449&1;
                   if ($3450) {
                    label = 475;
                    break L510;
                   }
                   HEAP32[$3448>>2] = $3438;
                   $3451 = $1281;
                   $3452 = $j22;
                   $3453 = (1 + ($3452))|0;
                   $227 = $vertIndices;
                   $228 = $3453;
                   $3454 = $227;
                   $3455 = $228;
                   $3456 = HEAP32[$3454>>2]|0;
                   $3457 = (($3456) + ($3455<<2)|0);
                   $3458 = HEAP32[$3457>>2]|0;
                   $229 = $3451;
                   $230 = $3458;
                   $3459 = $229;
                   $3460 = $230;
                   $3461 = HEAP32[$3459>>2]|0;
                   $3462 = (($3461) + (($3460*36)|0)|0);
                   $3463 = $1281;
                   $3464 = (($3463) + 32|0);
                   $3465 = $f17;
                   $3466 = $j22;
                   $3467 = (($3465) + ($3466))|0;
                   $231 = $3464;
                   $232 = $3467;
                   $3468 = $231;
                   $3469 = $232;
                   $3470 = HEAP32[$3468>>2]|0;
                   $3471 = (($3470) + (($3469*44)|0)|0);
                   __THREW__ = 0;
                   $3472 = (invoke_iii(490,($3471|0),1)|0);
                   $3473 = __THREW__; __THREW__ = 0;
                   $3474 = $3473&1;
                   if ($3474) {
                    label = 475;
                    break L510;
                   }
                   HEAP32[$3472>>2] = $3462;
                   $3475 = $1281;
                   $3476 = $j22;
                   $3477 = (2 + ($3476))|0;
                   $235 = $vertIndices;
                   $236 = $3477;
                   $3478 = $235;
                   $3479 = $236;
                   $3480 = HEAP32[$3478>>2]|0;
                   $3481 = (($3480) + ($3479<<2)|0);
                   $3482 = HEAP32[$3481>>2]|0;
                   $237 = $3475;
                   $238 = $3482;
                   $3483 = $237;
                   $3484 = $238;
                   $3485 = HEAP32[$3483>>2]|0;
                   $3486 = (($3485) + (($3484*36)|0)|0);
                   $3487 = $1281;
                   $3488 = (($3487) + 32|0);
                   $3489 = $f17;
                   $3490 = $j22;
                   $3491 = (($3489) + ($3490))|0;
                   $239 = $3488;
                   $240 = $3491;
                   $3492 = $239;
                   $3493 = $240;
                   $3494 = HEAP32[$3492>>2]|0;
                   $3495 = (($3494) + (($3493*44)|0)|0);
                   __THREW__ = 0;
                   $3496 = (invoke_iii(490,($3495|0),2)|0);
                   $3497 = __THREW__; __THREW__ = 0;
                   $3498 = $3497&1;
                   if ($3498) {
                    label = 475;
                    break L510;
                   }
                   HEAP32[$3496>>2] = $3486;
                   $3499 = $1281;
                   __THREW__ = 0;
                   $3500 = (invoke_ii(495,($3499|0))|0);
                   $3501 = __THREW__; __THREW__ = 0;
                   $3502 = $3501&1;
                   if ($3502) {
                    label = 475;
                    break L510;
                   }
                   if ($3500) {
                    $3503 = $j22;
                    $3504 = ($3503|0)>(0);
                    if ($3504) {
                     $3505 = $1281;
                     $3506 = (($3505) + 32|0);
                     $3507 = $f17;
                     $3508 = $j22;
                     $3509 = (($3507) + ($3508))|0;
                     $258 = $3506;
                     $259 = $3509;
                     $3510 = $258;
                     $3511 = $259;
                     $3512 = HEAP32[$3510>>2]|0;
                     $3513 = (($3512) + (($3511*44)|0)|0);
                     __THREW__ = 0;
                     invoke_vii(496,($3513|0),0);
                     $3514 = __THREW__; __THREW__ = 0;
                     $3515 = $3514&1;
                     if ($3515) {
                      label = 475;
                      break L510;
                     }
                    }
                    $3516 = $j22;
                    $3517 = $vert_per_face18;
                    $3518 = (($3517) - 3)|0;
                    $3519 = ($3516|0)<($3518|0);
                    if ($3519) {
                     $3520 = $1281;
                     $3521 = (($3520) + 32|0);
                     $3522 = $f17;
                     $3523 = $j22;
                     $3524 = (($3522) + ($3523))|0;
                     $275 = $3521;
                     $276 = $3524;
                     $3525 = $275;
                     $3526 = $276;
                     $3527 = HEAP32[$3525>>2]|0;
                     $3528 = (($3527) + (($3526*44)|0)|0);
                     __THREW__ = 0;
                     invoke_vii(496,($3528|0),2);
                     $3529 = __THREW__; __THREW__ = 0;
                     $3530 = $3529&1;
                     if ($3530) {
                      label = 475;
                      break L510;
                     }
                    }
                    $3531 = $1283;
                    $3532 = HEAP32[$3531>>2]|0;
                    $3533 = $3532 | 131072;
                    HEAP32[$3531>>2] = $3533;
                   }
                   $3534 = $j22;
                   $3535 = (($3534) + 1)|0;
                   $j22 = $3535;
                  }
                  __THREW__ = 0;
                  invoke_vi(494,($q|0));
                  $3536 = __THREW__; __THREW__ = 0;
                  $3537 = $3536&1;
                  if ($3537) {
                   label = 451;
                   break;
                  }
                 } else {
                  $313 = $indexTriangulatedVect;
                  $3538 = $313;
                  $312 = $3538;
                  $3539 = $312;
                  $308 = $3539;
                  $3540 = $308;
                  $307 = $3540;
                  $282 = $284;
                  $283 = -1;
                  $3541 = $282;
                  $3542 = $283;
                  $280 = $3541;
                  $281 = $3542;
                  $3543 = $280;
                  HEAP32[$3543>>2] = 0;
                  $3544 = HEAP32[$284>>2]|0;
                  HEAP32[$309>>2] = $3544;
                  $285 = $309;
                  HEAP32[$3540>>2] = 0;
                  $3545 = (($3540) + 4|0);
                  $288 = $290;
                  $289 = -1;
                  $3546 = $288;
                  $3547 = $289;
                  $286 = $3546;
                  $287 = $3547;
                  $3548 = $286;
                  HEAP32[$3548>>2] = 0;
                  $3549 = HEAP32[$290>>2]|0;
                  HEAP32[$310>>2] = $3549;
                  $291 = $310;
                  HEAP32[$3545>>2] = 0;
                  $3550 = (($3540) + 8|0);
                  $294 = $296;
                  $295 = -1;
                  $3551 = $294;
                  $3552 = $295;
                  $292 = $3551;
                  $293 = $3552;
                  $3553 = $292;
                  HEAP32[$3553>>2] = 0;
                  $3554 = HEAP32[$296>>2]|0;
                  HEAP32[$311>>2] = $3554;
                  $297 = $311;
                  $305 = $3550;
                  $306 = 0;
                  $3555 = $305;
                  $3556 = $306;
                  $303 = $3555;
                  HEAP32[$304>>2] = $3556;
                  $3557 = $303;
                  $302 = $304;
                  $3558 = $302;
                  $3559 = HEAP32[$3558>>2]|0;
                  $300 = $3557;
                  HEAP32[$301>>2] = $3559;
                  $3560 = $300;
                  $299 = $3560;
                  $298 = $301;
                  $3561 = $298;
                  $3562 = HEAP32[$3561>>2]|0;
                  HEAP32[$3560>>2] = $3562;
                  $347 = $loopVect;
                  $3563 = $347;
                  $346 = $3563;
                  $3564 = $346;
                  $342 = $3564;
                  $3565 = $342;
                  $341 = $3565;
                  $316 = $318;
                  $317 = -1;
                  $3566 = $316;
                  $3567 = $317;
                  $314 = $3566;
                  $315 = $3567;
                  $3568 = $314;
                  HEAP32[$3568>>2] = 0;
                  $3569 = HEAP32[$318>>2]|0;
                  HEAP32[$343>>2] = $3569;
                  $319 = $343;
                  HEAP32[$3565>>2] = 0;
                  $3570 = (($3565) + 4|0);
                  $322 = $324;
                  $323 = -1;
                  $3571 = $322;
                  $3572 = $323;
                  $320 = $3571;
                  $321 = $3572;
                  $3573 = $320;
                  HEAP32[$3573>>2] = 0;
                  $3574 = HEAP32[$324>>2]|0;
                  HEAP32[$344>>2] = $3574;
                  $325 = $344;
                  HEAP32[$3570>>2] = 0;
                  $3575 = (($3565) + 8|0);
                  $328 = $330;
                  $329 = -1;
                  $3576 = $328;
                  $3577 = $329;
                  $326 = $3576;
                  $327 = $3577;
                  $3578 = $326;
                  HEAP32[$3578>>2] = 0;
                  $3579 = HEAP32[$330>>2]|0;
                  HEAP32[$345>>2] = $3579;
                  $331 = $345;
                  $339 = $3575;
                  $340 = 0;
                  $3580 = $339;
                  $3581 = $340;
                  $337 = $3580;
                  HEAP32[$338>>2] = $3581;
                  $3582 = $337;
                  $336 = $338;
                  $3583 = $336;
                  $3584 = HEAP32[$3583>>2]|0;
                  $334 = $3582;
                  HEAP32[$335>>2] = $3584;
                  $3585 = $334;
                  $333 = $3585;
                  $332 = $335;
                  $3586 = $332;
                  $3587 = HEAP32[$3586>>2]|0;
                  HEAP32[$3585>>2] = $3587;
                  $392 = $loopVect;
                  $393 = $polygonVect;
                  $3588 = $392;
                  $3589 = (($3588) + 4|0);
                  $3590 = HEAP32[$3589>>2]|0;
                  $391 = $3588;
                  $3591 = $391;
                  $3592 = (($3591) + 8|0);
                  $390 = $3592;
                  $3593 = $390;
                  $389 = $3593;
                  $3594 = $389;
                  $3595 = HEAP32[$3594>>2]|0;
                  $3596 = ($3590|0)!=($3595|0);
                  if ($3596) {
                   __THREW__ = 0;
                   invoke_viii(497,($__annotator$i|0),($3588|0),1);
                   $3597 = __THREW__; __THREW__ = 0;
                   $3598 = $3597&1;
                   if ($3598) {
                    label = 552;
                    break;
                   }
                   $388 = $3588;
                   $3599 = $388;
                   $3600 = (($3599) + 8|0);
                   $387 = $3600;
                   $3601 = $387;
                   $386 = $3601;
                   $3602 = $386;
                   $3603 = (($3588) + 4|0);
                   $3604 = HEAP32[$3603>>2]|0;
                   $385 = $3604;
                   $3605 = $385;
                   $3606 = $393;
                   $382 = $3602;
                   $383 = $3605;
                   $384 = $3606;
                   $3607 = $383;
                   $3608 = ($3607|0)==(0|0);
                   if (!($3608)) {
                    $3609 = $384;
                    __THREW__ = 0;
                    invoke_vii(498,($3607|0),($3609|0));
                    $3610 = __THREW__; __THREW__ = 0;
                    $3611 = $3610&1;
                    if ($3611) {
                     label = 552;
                     break;
                    }
                   }
                   __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
                   $3612 = (($3588) + 4|0);
                   $3613 = HEAP32[$3612>>2]|0;
                   $3614 = (($3613) + 12|0);
                   HEAP32[$3612>>2] = $3614;
                  } else {
                   $3615 = $393;
                   __THREW__ = 0;
                   invoke_vii(499,($3588|0),($3615|0));
                   $3616 = __THREW__; __THREW__ = 0;
                   $3617 = $3616&1;
                   if ($3617) {
                    label = 552;
                    break;
                   }
                  }
                  __THREW__ = 0;
                  invoke_vii(500,($loopVect|0),($indexTriangulatedVect|0));
                  $3618 = __THREW__; __THREW__ = 0;
                  $3619 = $3618&1;
                  if ($3619) {
                   label = 552;
                   break;
                  }
                  $j23 = 0;
                  while(1) {
                   $3620 = $j23;
                   $467 = $indexTriangulatedVect;
                   $3621 = $467;
                   $3622 = (($3621) + 4|0);
                   $3623 = HEAP32[$3622>>2]|0;
                   $3624 = HEAP32[$3621>>2]|0;
                   $3625 = $3623;
                   $3626 = $3624;
                   $3627 = (($3625) - ($3626))|0;
                   $3628 = (($3627|0) / 4)&-1;
                   $3629 = ($3620>>>0)<($3628>>>0);
                   if (!($3629)) {
                    break;
                   }
                   $3630 = $1281;
                   $3631 = $j23;
                   $3632 = (($3631) + 0)|0;
                   $468 = $indexTriangulatedVect;
                   $469 = $3632;
                   $3633 = $468;
                   $3634 = $469;
                   $3635 = HEAP32[$3633>>2]|0;
                   $3636 = (($3635) + ($3634<<2)|0);
                   $3637 = HEAP32[$3636>>2]|0;
                   $470 = $vertIndices;
                   $471 = $3637;
                   $3638 = $470;
                   $3639 = $471;
                   $3640 = HEAP32[$3638>>2]|0;
                   $3641 = (($3640) + ($3639<<2)|0);
                   $3642 = HEAP32[$3641>>2]|0;
                   $472 = $3630;
                   $473 = $3642;
                   $3643 = $472;
                   $3644 = $473;
                   $3645 = HEAP32[$3643>>2]|0;
                   $3646 = (($3645) + (($3644*36)|0)|0);
                   $3647 = $1281;
                   $3648 = (($3647) + 32|0);
                   $3649 = $f17;
                   $3650 = $j23;
                   $3651 = (($3650>>>0) / 3)&-1;
                   $3652 = (($3649) + ($3651))|0;
                   $474 = $3648;
                   $475 = $3652;
                   $3653 = $474;
                   $3654 = $475;
                   $3655 = HEAP32[$3653>>2]|0;
                   $3656 = (($3655) + (($3654*44)|0)|0);
                   __THREW__ = 0;
                   $3657 = (invoke_iii(490,($3656|0),0)|0);
                   $3658 = __THREW__; __THREW__ = 0;
                   $3659 = $3658&1;
                   if ($3659) {
                    label = 552;
                    break L510;
                   }
                   HEAP32[$3657>>2] = $3646;
                   $3660 = $1281;
                   $3661 = $j23;
                   $3662 = (($3661) + 1)|0;
                   $478 = $indexTriangulatedVect;
                   $479 = $3662;
                   $3663 = $478;
                   $3664 = $479;
                   $3665 = HEAP32[$3663>>2]|0;
                   $3666 = (($3665) + ($3664<<2)|0);
                   $3667 = HEAP32[$3666>>2]|0;
                   $480 = $vertIndices;
                   $481 = $3667;
                   $3668 = $480;
                   $3669 = $481;
                   $3670 = HEAP32[$3668>>2]|0;
                   $3671 = (($3670) + ($3669<<2)|0);
                   $3672 = HEAP32[$3671>>2]|0;
                   $482 = $3660;
                   $483 = $3672;
                   $3673 = $482;
                   $3674 = $483;
                   $3675 = HEAP32[$3673>>2]|0;
                   $3676 = (($3675) + (($3674*36)|0)|0);
                   $3677 = $1281;
                   $3678 = (($3677) + 32|0);
                   $3679 = $f17;
                   $3680 = $j23;
                   $3681 = (($3680>>>0) / 3)&-1;
                   $3682 = (($3679) + ($3681))|0;
                   $484 = $3678;
                   $485 = $3682;
                   $3683 = $484;
                   $3684 = $485;
                   $3685 = HEAP32[$3683>>2]|0;
                   $3686 = (($3685) + (($3684*44)|0)|0);
                   __THREW__ = 0;
                   $3687 = (invoke_iii(490,($3686|0),1)|0);
                   $3688 = __THREW__; __THREW__ = 0;
                   $3689 = $3688&1;
                   if ($3689) {
                    label = 552;
                    break L510;
                   }
                   HEAP32[$3687>>2] = $3676;
                   $3690 = $1281;
                   $3691 = $j23;
                   $3692 = (($3691) + 2)|0;
                   $487 = $indexTriangulatedVect;
                   $488 = $3692;
                   $3693 = $487;
                   $3694 = $488;
                   $3695 = HEAP32[$3693>>2]|0;
                   $3696 = (($3695) + ($3694<<2)|0);
                   $3697 = HEAP32[$3696>>2]|0;
                   $489 = $vertIndices;
                   $490 = $3697;
                   $3698 = $489;
                   $3699 = $490;
                   $3700 = HEAP32[$3698>>2]|0;
                   $3701 = (($3700) + ($3699<<2)|0);
                   $3702 = HEAP32[$3701>>2]|0;
                   $491 = $3690;
                   $492 = $3702;
                   $3703 = $491;
                   $3704 = $492;
                   $3705 = HEAP32[$3703>>2]|0;
                   $3706 = (($3705) + (($3704*36)|0)|0);
                   $3707 = $1281;
                   $3708 = (($3707) + 32|0);
                   $3709 = $f17;
                   $3710 = $j23;
                   $3711 = (($3710>>>0) / 3)&-1;
                   $3712 = (($3709) + ($3711))|0;
                   $493 = $3708;
                   $494 = $3712;
                   $3713 = $493;
                   $3714 = $494;
                   $3715 = HEAP32[$3713>>2]|0;
                   $3716 = (($3715) + (($3714*44)|0)|0);
                   __THREW__ = 0;
                   $3717 = (invoke_iii(490,($3716|0),2)|0);
                   $3718 = __THREW__; __THREW__ = 0;
                   $3719 = $3718&1;
                   if ($3719) {
                    label = 552;
                    break L510;
                   }
                   HEAP32[$3717>>2] = $3706;
                   $qq = 0;
                   while(1) {
                    $3720 = $qq;
                    $3721 = ($3720|0)<(3);
                    if (!($3721)) {
                     break;
                    }
                    $3722 = $j23;
                    $3723 = $qq;
                    $3724 = (($3722) + ($3723))|0;
                    $510 = $indexTriangulatedVect;
                    $511 = $3724;
                    $3725 = $510;
                    $3726 = $511;
                    $3727 = HEAP32[$3725>>2]|0;
                    $3728 = (($3727) + ($3726<<2)|0);
                    $3729 = HEAP32[$3728>>2]|0;
                    $3730 = (($3729) + 1)|0;
                    $3731 = $vert_per_face18;
                    $3732 = (($3730|0) % ($3731|0))&-1;
                    $3733 = $j23;
                    $3734 = $qq;
                    $3735 = (($3734) + 1)|0;
                    $3736 = (($3735|0) % 3)&-1;
                    $3737 = (($3733) + ($3736))|0;
                    $512 = $indexTriangulatedVect;
                    $513 = $3737;
                    $3738 = $512;
                    $3739 = $513;
                    $3740 = HEAP32[$3738>>2]|0;
                    $3741 = (($3740) + ($3739<<2)|0);
                    $3742 = HEAP32[$3741>>2]|0;
                    $3743 = ($3732|0)==($3742|0);
                    if ($3743) {
                     $3744 = $1281;
                     $3745 = (($3744) + 32|0);
                     $3746 = $f17;
                     $3747 = $j23;
                     $3748 = (($3747>>>0) / 3)&-1;
                     $3749 = (($3746) + ($3748))|0;
                     $514 = $3745;
                     $515 = $3749;
                     $3750 = $514;
                     $3751 = $515;
                     $3752 = HEAP32[$3750>>2]|0;
                     $3753 = (($3752) + (($3751*44)|0)|0);
                     $3754 = $qq;
                     __THREW__ = 0;
                     invoke_vii(501,($3753|0),($3754|0));
                     $3755 = __THREW__; __THREW__ = 0;
                     $3756 = $3755&1;
                     if ($3756) {
                      label = 552;
                      break L510;
                     }
                    } else {
                     $3763 = $1281;
                     $3764 = (($3763) + 32|0);
                     $3765 = $f17;
                     $3766 = $j23;
                     $3767 = (($3766>>>0) / 3)&-1;
                     $3768 = (($3765) + ($3767))|0;
                     $533 = $3764;
                     $534 = $3768;
                     $3769 = $533;
                     $3770 = $534;
                     $3771 = HEAP32[$3769>>2]|0;
                     $3772 = (($3771) + (($3770*44)|0)|0);
                     $3773 = $qq;
                     __THREW__ = 0;
                     invoke_vii(496,($3772|0),($3773|0));
                     $3774 = __THREW__; __THREW__ = 0;
                     $3775 = $3774&1;
                     if ($3775) {
                      label = 552;
                      break L510;
                     }
                    }
                    $3776 = $qq;
                    $3777 = (($3776) + 1)|0;
                    $qq = $3777;
                   }
                   $3778 = $j23;
                   $3779 = (($3778) + 3)|0;
                   $j23 = $3779;
                  }
                  __THREW__ = 0;
                  invoke_vi(502,($loopVect|0));
                  $3780 = __THREW__; __THREW__ = 0;
                  $3781 = $3780&1;
                  if ($3781) {
                   label = 551;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vi(485,($indexTriangulatedVect|0));
                  $3782 = __THREW__; __THREW__ = 0;
                  $3783 = $3782&1;
                  if ($3783) {
                   label = 451;
                   break;
                  }
                 }
                 $3786 = $trigs;
                 $3787 = $f17;
                 $3788 = (($3787) + ($3786))|0;
                 $f17 = $3788;
                 $1287 = 0;
                }
                __THREW__ = 0;
                invoke_vi(503,($polygonVect|0));
                $3789 = __THREW__; __THREW__ = 0;
                $3790 = $3789&1;
                if ($3790) {
                 label = 450;
                 break;
                }
                __THREW__ = 0;
                invoke_vi(485,($vertIndices|0));
                $3791 = __THREW__; __THREW__ = 0;
                $3792 = $3791&1;
                if ($3792) {
                 label = 409;
                 break L508;
                }
                $cleanup$dest24 = $1287;
                if (!((($cleanup$dest24|0) == 0))) {
                 label = 727;
                 break;
                }
               }
               $647 = $tokens;
               $3797 = $647;
               $3798 = (($3797) + 4|0);
               $3799 = HEAP32[$3798>>2]|0;
               $3800 = HEAP32[$3797>>2]|0;
               $3801 = $3799;
               $3802 = $3800;
               $3803 = (($3801) - ($3802))|0;
               $3804 = (($3803|0) / 12)&-1;
               $3805 = $vert_per_face18;
               $3806 = (($3804) - ($3805))|0;
               $3807 = (($3806) - 1)|0;
               $color_elements = $3807;
               $3808 = $color_elements;
               $3809 = ($3808>>>0)>(0);
               $3810 = $3809&1;
               $3811 = $isColorDefined;
               $3812 = $3811&1;
               $3813 = $3812&1;
               $3814 = $3813 | $3810;
               $3815 = ($3814|0)!=(0);
               $3816 = $3815&1;
               $isColorDefined = $3816;
               $3817 = $isColorDefined;
               $3818 = $3817&1;
               if ($3818) {
                $3819 = $1283;
                $3820 = HEAP32[$3819>>2]|0;
                $3821 = $3820 | 256;
                HEAP32[$3819>>2] = $3821;
               }
               $3822 = $color_elements;
               $3823 = ($3822>>>0)>(0);
               do {
                if ($3823) {
                 $3824 = $1281;
                 __THREW__ = 0;
                 $3825 = (invoke_ii(504,($3824|0))|0);
                 $3826 = __THREW__; __THREW__ = 0;
                 $3827 = $3826&1;
                 if ($3827) {
                  label = 409;
                  break L508;
                 }
                 if (!($3825)) {
                  break;
                 }
                 $3828 = $color_elements;
                 $3829 = ($3828>>>0)>(0);
                 if ($3829) {
                  $3830 = $1283;
                  $3831 = HEAP32[$3830>>2]|0;
                  $3832 = $3831 | 256;
                  HEAP32[$3830>>2] = $3832;
                 }
                 $3833 = $color_elements;
                 if ((($3833|0) == 0)) {
                  while(1) {
                   $3834 = $f0;
                   $3835 = $f17;
                   $3836 = ($3834>>>0)<=($3835>>>0);
                   if (!($3836)) {
                    break;
                   }
                   $3837 = $1281;
                   $3838 = (($3837) + 32|0);
                   $3839 = $f0;
                   $663 = $3838;
                   $664 = $3839;
                   $3840 = $663;
                   $3841 = $664;
                   $3842 = HEAP32[$3840>>2]|0;
                   $3843 = (($3842) + (($3841*44)|0)|0);
                   __THREW__ = 0;
                   $3844 = (invoke_ii(505,($3843|0))|0);
                   $3845 = __THREW__; __THREW__ = 0;
                   $3846 = $3845&1;
                   if ($3846) {
                    label = 409;
                    break L508;
                   }
                   __THREW__ = 0;
                   invoke_vidddd(481,($1300|0),0.66600000858306885,0.66600000858306885,0.66600000858306885,0.66600000858306885);
                   $3847 = __THREW__; __THREW__ = 0;
                   $3848 = $3847&1;
                   if ($3848) {
                    label = 409;
                    break L508;
                   }
                   __THREW__ = 0;
                   invoke_vii(477,($3844|0),($1300|0));
                   $3849 = __THREW__; __THREW__ = 0;
                   $3850 = $3849&1;
                   if ($3850) {
                    label = 409;
                    break L508;
                   }
                   $3851 = $f0;
                   $3852 = (($3851) + 1)|0;
                   $f0 = $3852;
                  }
                 } else if ((($3833|0) == 1)) {
                  while(1) {
                   $3853 = $f0;
                   $3854 = $f17;
                   $3855 = ($3853>>>0)<=($3854>>>0);
                   if (!($3855)) {
                    break;
                   }
                   $3856 = $1281;
                   $3857 = (($3856) + 32|0);
                   $3858 = $f0;
                   $669 = $3857;
                   $670 = $3858;
                   $3859 = $669;
                   $3860 = $670;
                   $3861 = HEAP32[$3859>>2]|0;
                   $3862 = (($3861) + (($3860*44)|0)|0);
                   __THREW__ = 0;
                   $3863 = (invoke_ii(505,($3862|0))|0);
                   $3864 = __THREW__; __THREW__ = 0;
                   $3865 = $3864&1;
                   if ($3865) {
                    label = 409;
                    break L508;
                   }
                   $3866 = $vert_per_face18;
                   $3867 = (($3866) + 1)|0;
                   $672 = $tokens;
                   $673 = $3867;
                   $3868 = $672;
                   $3869 = $673;
                   $3870 = HEAP32[$3868>>2]|0;
                   $3871 = (($3870) + (($3869*12)|0)|0);
                   $688 = $3871;
                   $3872 = $688;
                   $687 = $3872;
                   $3873 = $687;
                   $686 = $3873;
                   $3874 = $686;
                   $685 = $3874;
                   $3875 = $685;
                   $684 = $3875;
                   $3876 = $684;
                   $683 = $3876;
                   $3877 = $683;
                   $3878 = HEAP8[$3877>>0]|0;
                   $3879 = $3878&255;
                   $3880 = $3879 & 1;
                   $3881 = ($3880|0)!=(0);
                   if ($3881) {
                    $677 = $3874;
                    $3882 = $677;
                    $676 = $3882;
                    $3883 = $676;
                    $675 = $3883;
                    $3884 = $675;
                    $3885 = (($3884) + 8|0);
                    $3886 = HEAP32[$3885>>2]|0;
                    $3893 = $3886;
                   } else {
                    $682 = $3874;
                    $3887 = $682;
                    $681 = $3887;
                    $3888 = $681;
                    $680 = $3888;
                    $3889 = $680;
                    $3890 = (($3889) + 1|0);
                    $679 = $3890;
                    $3891 = $679;
                    $678 = $3891;
                    $3892 = $678;
                    $3893 = $3892;
                   }
                   $674 = $3893;
                   $3894 = $674;
                   __THREW__ = 0;
                   $3895 = (invoke_ii(468,($3894|0))|0);
                   $3896 = __THREW__; __THREW__ = 0;
                   $3897 = $3896&1;
                   if ($3897) {
                    label = 409;
                    break L508;
                   }
                   __THREW__ = 0;
                   invoke_vii(476,($1301|0),($3895|0));
                   $3898 = __THREW__; __THREW__ = 0;
                   $3899 = $3898&1;
                   if ($3899) {
                    label = 409;
                    break L508;
                   }
                   __THREW__ = 0;
                   invoke_vii(477,($3863|0),($1301|0));
                   $3900 = __THREW__; __THREW__ = 0;
                   $3901 = $3900&1;
                   if ($3901) {
                    label = 409;
                    break L508;
                   }
                   $3902 = $f0;
                   $3903 = (($3902) + 1)|0;
                   $f0 = $3903;
                  }
                 } else if ((($3833|0) == 3)) {
                  $3904 = $vert_per_face18;
                  $3905 = (($3904) + 1)|0;
                  $706 = $tokens;
                  $707 = $3905;
                  $3906 = $706;
                  $3907 = $707;
                  $3908 = HEAP32[$3906>>2]|0;
                  $3909 = (($3908) + (($3907*12)|0)|0);
                  $3910 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($3909,46,0)|0);
                  $3911 = ($3910|0)==(-1);
                  if ($3911) {
                   __THREW__ = 0;
                   invoke_vii(506,($cc|0),-1);
                   $3912 = __THREW__; __THREW__ = 0;
                   $3913 = $3912&1;
                   if ($3913) {
                    label = 409;
                    break L508;
                   }
                   $3914 = $vert_per_face18;
                   $3915 = (($3914) + 1)|0;
                   $709 = $tokens;
                   $710 = $3915;
                   $3916 = $709;
                   $3917 = $710;
                   $3918 = HEAP32[$3916>>2]|0;
                   $3919 = (($3918) + (($3917*12)|0)|0);
                   $725 = $3919;
                   $3920 = $725;
                   $724 = $3920;
                   $3921 = $724;
                   $723 = $3921;
                   $3922 = $723;
                   $722 = $3922;
                   $3923 = $722;
                   $721 = $3923;
                   $3924 = $721;
                   $720 = $3924;
                   $3925 = $720;
                   $3926 = HEAP8[$3925>>0]|0;
                   $3927 = $3926&255;
                   $3928 = $3927 & 1;
                   $3929 = ($3928|0)!=(0);
                   if ($3929) {
                    $714 = $3922;
                    $3930 = $714;
                    $713 = $3930;
                    $3931 = $713;
                    $712 = $3931;
                    $3932 = $712;
                    $3933 = (($3932) + 8|0);
                    $3934 = HEAP32[$3933>>2]|0;
                    $3941 = $3934;
                   } else {
                    $719 = $3922;
                    $3935 = $719;
                    $718 = $3935;
                    $3936 = $718;
                    $717 = $3936;
                    $3937 = $717;
                    $3938 = (($3937) + 1|0);
                    $716 = $3938;
                    $3939 = $716;
                    $715 = $3939;
                    $3940 = $715;
                    $3941 = $3940;
                   }
                   $711 = $3941;
                   $3942 = $711;
                   __THREW__ = 0;
                   $3943 = (invoke_ii(468,($3942|0))|0);
                   $3944 = __THREW__; __THREW__ = 0;
                   $3945 = $3944&1;
                   if ($3945) {
                    label = 409;
                    break L508;
                   }
                   $3946 = $3943&255;
                   __THREW__ = 0;
                   $3947 = (invoke_iii(507,($cc|0),0)|0);
                   $3948 = __THREW__; __THREW__ = 0;
                   $3949 = $3948&1;
                   if ($3949) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$3947>>0] = $3946;
                   $3950 = $vert_per_face18;
                   $3951 = (($3950) + 2)|0;
                   $727 = $tokens;
                   $728 = $3951;
                   $3952 = $727;
                   $3953 = $728;
                   $3954 = HEAP32[$3952>>2]|0;
                   $3955 = (($3954) + (($3953*12)|0)|0);
                   $743 = $3955;
                   $3956 = $743;
                   $742 = $3956;
                   $3957 = $742;
                   $741 = $3957;
                   $3958 = $741;
                   $740 = $3958;
                   $3959 = $740;
                   $739 = $3959;
                   $3960 = $739;
                   $738 = $3960;
                   $3961 = $738;
                   $3962 = HEAP8[$3961>>0]|0;
                   $3963 = $3962&255;
                   $3964 = $3963 & 1;
                   $3965 = ($3964|0)!=(0);
                   if ($3965) {
                    $732 = $3958;
                    $3966 = $732;
                    $731 = $3966;
                    $3967 = $731;
                    $730 = $3967;
                    $3968 = $730;
                    $3969 = (($3968) + 8|0);
                    $3970 = HEAP32[$3969>>2]|0;
                    $3977 = $3970;
                   } else {
                    $737 = $3958;
                    $3971 = $737;
                    $736 = $3971;
                    $3972 = $736;
                    $735 = $3972;
                    $3973 = $735;
                    $3974 = (($3973) + 1|0);
                    $734 = $3974;
                    $3975 = $734;
                    $733 = $3975;
                    $3976 = $733;
                    $3977 = $3976;
                   }
                   $729 = $3977;
                   $3978 = $729;
                   __THREW__ = 0;
                   $3979 = (invoke_ii(468,($3978|0))|0);
                   $3980 = __THREW__; __THREW__ = 0;
                   $3981 = $3980&1;
                   if ($3981) {
                    label = 409;
                    break L508;
                   }
                   $3982 = $3979&255;
                   __THREW__ = 0;
                   $3983 = (invoke_iii(507,($cc|0),1)|0);
                   $3984 = __THREW__; __THREW__ = 0;
                   $3985 = $3984&1;
                   if ($3985) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$3983>>0] = $3982;
                   $3986 = $vert_per_face18;
                   $3987 = (($3986) + 3)|0;
                   $745 = $tokens;
                   $746 = $3987;
                   $3988 = $745;
                   $3989 = $746;
                   $3990 = HEAP32[$3988>>2]|0;
                   $3991 = (($3990) + (($3989*12)|0)|0);
                   $761 = $3991;
                   $3992 = $761;
                   $760 = $3992;
                   $3993 = $760;
                   $759 = $3993;
                   $3994 = $759;
                   $758 = $3994;
                   $3995 = $758;
                   $757 = $3995;
                   $3996 = $757;
                   $756 = $3996;
                   $3997 = $756;
                   $3998 = HEAP8[$3997>>0]|0;
                   $3999 = $3998&255;
                   $4000 = $3999 & 1;
                   $4001 = ($4000|0)!=(0);
                   if ($4001) {
                    $750 = $3994;
                    $4002 = $750;
                    $749 = $4002;
                    $4003 = $749;
                    $748 = $4003;
                    $4004 = $748;
                    $4005 = (($4004) + 8|0);
                    $4006 = HEAP32[$4005>>2]|0;
                    $4013 = $4006;
                   } else {
                    $755 = $3994;
                    $4007 = $755;
                    $754 = $4007;
                    $4008 = $754;
                    $753 = $4008;
                    $4009 = $753;
                    $4010 = (($4009) + 1|0);
                    $752 = $4010;
                    $4011 = $752;
                    $751 = $4011;
                    $4012 = $751;
                    $4013 = $4012;
                   }
                   $747 = $4013;
                   $4014 = $747;
                   __THREW__ = 0;
                   $4015 = (invoke_ii(468,($4014|0))|0);
                   $4016 = __THREW__; __THREW__ = 0;
                   $4017 = $4016&1;
                   if ($4017) {
                    label = 409;
                    break L508;
                   }
                   $4018 = $4015&255;
                   __THREW__ = 0;
                   $4019 = (invoke_iii(507,($cc|0),2)|0);
                   $4020 = __THREW__; __THREW__ = 0;
                   $4021 = $4020&1;
                   if ($4021) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$4019>>0] = $4018;
                   while(1) {
                    $4022 = $f0;
                    $4023 = $f17;
                    $4024 = ($4022>>>0)<=($4023>>>0);
                    if (!($4024)) {
                     break;
                    }
                    $4025 = $1281;
                    $4026 = (($4025) + 32|0);
                    $4027 = $f0;
                    $777 = $4026;
                    $778 = $4027;
                    $4028 = $777;
                    $4029 = $778;
                    $4030 = HEAP32[$4028>>2]|0;
                    $4031 = (($4030) + (($4029*44)|0)|0);
                    __THREW__ = 0;
                    $4032 = (invoke_ii(505,($4031|0))|0);
                    $4033 = __THREW__; __THREW__ = 0;
                    $4034 = $4033&1;
                    if ($4034) {
                     label = 409;
                     break L508;
                    }
                    ;HEAP8[$4032+0>>0]=HEAP8[$cc+0>>0]|0;HEAP8[$4032+1>>0]=HEAP8[$cc+1>>0]|0;HEAP8[$4032+2>>0]=HEAP8[$cc+2>>0]|0;HEAP8[$4032+3>>0]=HEAP8[$cc+3>>0]|0;
                    $4035 = $f0;
                    $4036 = (($4035) + 1)|0;
                    $f0 = $4036;
                   }
                  } else {
                   $4037 = $vert_per_face18;
                   $4038 = (($4037) + 1)|0;
                   $781 = $tokens;
                   $782 = $4038;
                   $4039 = $781;
                   $4040 = $782;
                   $4041 = HEAP32[$4039>>2]|0;
                   $4042 = (($4041) + (($4040*12)|0)|0);
                   $797 = $4042;
                   $4043 = $797;
                   $796 = $4043;
                   $4044 = $796;
                   $795 = $4044;
                   $4045 = $795;
                   $794 = $4045;
                   $4046 = $794;
                   $793 = $4046;
                   $4047 = $793;
                   $792 = $4047;
                   $4048 = $792;
                   $4049 = HEAP8[$4048>>0]|0;
                   $4050 = $4049&255;
                   $4051 = $4050 & 1;
                   $4052 = ($4051|0)!=(0);
                   if ($4052) {
                    $786 = $4045;
                    $4053 = $786;
                    $785 = $4053;
                    $4054 = $785;
                    $784 = $4054;
                    $4055 = $784;
                    $4056 = (($4055) + 8|0);
                    $4057 = HEAP32[$4056>>2]|0;
                    $4064 = $4057;
                   } else {
                    $791 = $4045;
                    $4058 = $791;
                    $790 = $4058;
                    $4059 = $790;
                    $789 = $4059;
                    $4060 = $789;
                    $4061 = (($4060) + 1|0);
                    $788 = $4061;
                    $4062 = $788;
                    $787 = $4062;
                    $4063 = $787;
                    $4064 = $4063;
                   }
                   $783 = $4064;
                   $4065 = $783;
                   __THREW__ = 0;
                   $4066 = (+invoke_di(470,($4065|0)));
                   $4067 = __THREW__; __THREW__ = 0;
                   $4068 = $4067&1;
                   if ($4068) {
                    label = 409;
                    break L508;
                   }
                   $4069 = $4066;
                   HEAPF32[$color25>>2] = $4069;
                   $4070 = $vert_per_face18;
                   $4071 = (($4070) + 2)|0;
                   $798 = $tokens;
                   $799 = $4071;
                   $4072 = $798;
                   $4073 = $799;
                   $4074 = HEAP32[$4072>>2]|0;
                   $4075 = (($4074) + (($4073*12)|0)|0);
                   $814 = $4075;
                   $4076 = $814;
                   $813 = $4076;
                   $4077 = $813;
                   $812 = $4077;
                   $4078 = $812;
                   $811 = $4078;
                   $4079 = $811;
                   $810 = $4079;
                   $4080 = $810;
                   $809 = $4080;
                   $4081 = $809;
                   $4082 = HEAP8[$4081>>0]|0;
                   $4083 = $4082&255;
                   $4084 = $4083 & 1;
                   $4085 = ($4084|0)!=(0);
                   if ($4085) {
                    $803 = $4078;
                    $4086 = $803;
                    $802 = $4086;
                    $4087 = $802;
                    $801 = $4087;
                    $4088 = $801;
                    $4089 = (($4088) + 8|0);
                    $4090 = HEAP32[$4089>>2]|0;
                    $4097 = $4090;
                   } else {
                    $808 = $4078;
                    $4091 = $808;
                    $807 = $4091;
                    $4092 = $807;
                    $806 = $4092;
                    $4093 = $806;
                    $4094 = (($4093) + 1|0);
                    $805 = $4094;
                    $4095 = $805;
                    $804 = $4095;
                    $4096 = $804;
                    $4097 = $4096;
                   }
                   $800 = $4097;
                   $4098 = $800;
                   __THREW__ = 0;
                   $4099 = (+invoke_di(470,($4098|0)));
                   $4100 = __THREW__; __THREW__ = 0;
                   $4101 = $4100&1;
                   if ($4101) {
                    label = 409;
                    break L508;
                   }
                   $4102 = $4099;
                   $4103 = (($color25) + 4|0);
                   HEAPF32[$4103>>2] = $4102;
                   $4104 = $vert_per_face18;
                   $4105 = (($4104) + 3)|0;
                   $815 = $tokens;
                   $816 = $4105;
                   $4106 = $815;
                   $4107 = $816;
                   $4108 = HEAP32[$4106>>2]|0;
                   $4109 = (($4108) + (($4107*12)|0)|0);
                   $831 = $4109;
                   $4110 = $831;
                   $830 = $4110;
                   $4111 = $830;
                   $829 = $4111;
                   $4112 = $829;
                   $828 = $4112;
                   $4113 = $828;
                   $827 = $4113;
                   $4114 = $827;
                   $826 = $4114;
                   $4115 = $826;
                   $4116 = HEAP8[$4115>>0]|0;
                   $4117 = $4116&255;
                   $4118 = $4117 & 1;
                   $4119 = ($4118|0)!=(0);
                   if ($4119) {
                    $820 = $4112;
                    $4120 = $820;
                    $819 = $4120;
                    $4121 = $819;
                    $818 = $4121;
                    $4122 = $818;
                    $4123 = (($4122) + 8|0);
                    $4124 = HEAP32[$4123>>2]|0;
                    $4131 = $4124;
                   } else {
                    $825 = $4112;
                    $4125 = $825;
                    $824 = $4125;
                    $4126 = $824;
                    $823 = $4126;
                    $4127 = $823;
                    $4128 = (($4127) + 1|0);
                    $822 = $4128;
                    $4129 = $822;
                    $821 = $4129;
                    $4130 = $821;
                    $4131 = $4130;
                   }
                   $817 = $4131;
                   $4132 = $817;
                   __THREW__ = 0;
                   $4133 = (+invoke_di(470,($4132|0)));
                   $4134 = __THREW__; __THREW__ = 0;
                   $4135 = $4134&1;
                   if ($4135) {
                    label = 409;
                    break L508;
                   }
                   $4136 = $4133;
                   $4137 = (($color25) + 8|0);
                   HEAPF32[$4137>>2] = $4136;
                   while(1) {
                    $4138 = $f0;
                    $4139 = $f17;
                    $4140 = ($4138>>>0)<=($4139>>>0);
                    if (!($4140)) {
                     break;
                    }
                    $4141 = $1281;
                    $4142 = (($4141) + 32|0);
                    $4143 = $f0;
                    $832 = $4142;
                    $833 = $4143;
                    $4144 = $832;
                    $4145 = $833;
                    $4146 = HEAP32[$4144>>2]|0;
                    $4147 = (($4146) + (($4145*44)|0)|0);
                    __THREW__ = 0;
                    $4148 = (invoke_ii(505,($4147|0))|0);
                    $4149 = __THREW__; __THREW__ = 0;
                    $4150 = $4149&1;
                    if ($4150) {
                     label = 409;
                     break L508;
                    }
                    $4151 = +HEAPF32[$color25>>2];
                    $4152 = (($color25) + 4|0);
                    $4153 = +HEAPF32[$4152>>2];
                    $4154 = (($color25) + 8|0);
                    $4155 = +HEAPF32[$4154>>2];
                    __THREW__ = 0;
                    invoke_vidddd(481,($1302|0),(+$4151),(+$4153),(+$4155),1.0);
                    $4156 = __THREW__; __THREW__ = 0;
                    $4157 = $4156&1;
                    if ($4157) {
                     label = 409;
                     break L508;
                    }
                    __THREW__ = 0;
                    invoke_vii(477,($4148|0),($1302|0));
                    $4158 = __THREW__; __THREW__ = 0;
                    $4159 = $4158&1;
                    if ($4159) {
                     label = 409;
                     break L508;
                    }
                    $4160 = $f0;
                    $4161 = (($4160) + 1)|0;
                    $f0 = $4161;
                   }
                  }
                 } else if ((($3833|0) == 4)) {
                  $4162 = $vert_per_face18;
                  $4163 = (($4162) + 1)|0;
                  $851 = $tokens;
                  $852 = $4163;
                  $4164 = $851;
                  $4165 = $852;
                  $4166 = HEAP32[$4164>>2]|0;
                  $4167 = (($4166) + (($4165*12)|0)|0);
                  $4168 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($4167,46,0)|0);
                  $4169 = ($4168|0)==(-1);
                  if ($4169) {
                   __THREW__ = 0;
                   invoke_vi(508,($cc26|0));
                   $4170 = __THREW__; __THREW__ = 0;
                   $4171 = $4170&1;
                   if ($4171) {
                    label = 409;
                    break L508;
                   }
                   $4172 = $vert_per_face18;
                   $4173 = (($4172) + 1)|0;
                   $855 = $tokens;
                   $856 = $4173;
                   $4174 = $855;
                   $4175 = $856;
                   $4176 = HEAP32[$4174>>2]|0;
                   $4177 = (($4176) + (($4175*12)|0)|0);
                   $871 = $4177;
                   $4178 = $871;
                   $870 = $4178;
                   $4179 = $870;
                   $869 = $4179;
                   $4180 = $869;
                   $868 = $4180;
                   $4181 = $868;
                   $867 = $4181;
                   $4182 = $867;
                   $866 = $4182;
                   $4183 = $866;
                   $4184 = HEAP8[$4183>>0]|0;
                   $4185 = $4184&255;
                   $4186 = $4185 & 1;
                   $4187 = ($4186|0)!=(0);
                   if ($4187) {
                    $860 = $4180;
                    $4188 = $860;
                    $859 = $4188;
                    $4189 = $859;
                    $858 = $4189;
                    $4190 = $858;
                    $4191 = (($4190) + 8|0);
                    $4192 = HEAP32[$4191>>2]|0;
                    $4199 = $4192;
                   } else {
                    $865 = $4180;
                    $4193 = $865;
                    $864 = $4193;
                    $4194 = $864;
                    $863 = $4194;
                    $4195 = $863;
                    $4196 = (($4195) + 1|0);
                    $862 = $4196;
                    $4197 = $862;
                    $861 = $4197;
                    $4198 = $861;
                    $4199 = $4198;
                   }
                   $857 = $4199;
                   $4200 = $857;
                   __THREW__ = 0;
                   $4201 = (invoke_ii(468,($4200|0))|0);
                   $4202 = __THREW__; __THREW__ = 0;
                   $4203 = $4202&1;
                   if ($4203) {
                    label = 409;
                    break L508;
                   }
                   $4204 = $4201&255;
                   __THREW__ = 0;
                   $4205 = (invoke_iii(507,($cc26|0),0)|0);
                   $4206 = __THREW__; __THREW__ = 0;
                   $4207 = $4206&1;
                   if ($4207) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$4205>>0] = $4204;
                   $4208 = $vert_per_face18;
                   $4209 = (($4208) + 2)|0;
                   $887 = $tokens;
                   $888 = $4209;
                   $4210 = $887;
                   $4211 = $888;
                   $4212 = HEAP32[$4210>>2]|0;
                   $4213 = (($4212) + (($4211*12)|0)|0);
                   $903 = $4213;
                   $4214 = $903;
                   $902 = $4214;
                   $4215 = $902;
                   $901 = $4215;
                   $4216 = $901;
                   $900 = $4216;
                   $4217 = $900;
                   $899 = $4217;
                   $4218 = $899;
                   $898 = $4218;
                   $4219 = $898;
                   $4220 = HEAP8[$4219>>0]|0;
                   $4221 = $4220&255;
                   $4222 = $4221 & 1;
                   $4223 = ($4222|0)!=(0);
                   if ($4223) {
                    $892 = $4216;
                    $4224 = $892;
                    $891 = $4224;
                    $4225 = $891;
                    $890 = $4225;
                    $4226 = $890;
                    $4227 = (($4226) + 8|0);
                    $4228 = HEAP32[$4227>>2]|0;
                    $4235 = $4228;
                   } else {
                    $897 = $4216;
                    $4229 = $897;
                    $896 = $4229;
                    $4230 = $896;
                    $895 = $4230;
                    $4231 = $895;
                    $4232 = (($4231) + 1|0);
                    $894 = $4232;
                    $4233 = $894;
                    $893 = $4233;
                    $4234 = $893;
                    $4235 = $4234;
                   }
                   $889 = $4235;
                   $4236 = $889;
                   __THREW__ = 0;
                   $4237 = (invoke_ii(468,($4236|0))|0);
                   $4238 = __THREW__; __THREW__ = 0;
                   $4239 = $4238&1;
                   if ($4239) {
                    label = 409;
                    break L508;
                   }
                   $4240 = $4237&255;
                   __THREW__ = 0;
                   $4241 = (invoke_iii(507,($cc26|0),1)|0);
                   $4242 = __THREW__; __THREW__ = 0;
                   $4243 = $4242&1;
                   if ($4243) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$4241>>0] = $4240;
                   $4244 = $vert_per_face18;
                   $4245 = (($4244) + 3)|0;
                   $906 = $tokens;
                   $907 = $4245;
                   $4246 = $906;
                   $4247 = $907;
                   $4248 = HEAP32[$4246>>2]|0;
                   $4249 = (($4248) + (($4247*12)|0)|0);
                   $922 = $4249;
                   $4250 = $922;
                   $921 = $4250;
                   $4251 = $921;
                   $920 = $4251;
                   $4252 = $920;
                   $919 = $4252;
                   $4253 = $919;
                   $918 = $4253;
                   $4254 = $918;
                   $917 = $4254;
                   $4255 = $917;
                   $4256 = HEAP8[$4255>>0]|0;
                   $4257 = $4256&255;
                   $4258 = $4257 & 1;
                   $4259 = ($4258|0)!=(0);
                   if ($4259) {
                    $911 = $4252;
                    $4260 = $911;
                    $910 = $4260;
                    $4261 = $910;
                    $909 = $4261;
                    $4262 = $909;
                    $4263 = (($4262) + 8|0);
                    $4264 = HEAP32[$4263>>2]|0;
                    $4271 = $4264;
                   } else {
                    $916 = $4252;
                    $4265 = $916;
                    $915 = $4265;
                    $4266 = $915;
                    $914 = $4266;
                    $4267 = $914;
                    $4268 = (($4267) + 1|0);
                    $913 = $4268;
                    $4269 = $913;
                    $912 = $4269;
                    $4270 = $912;
                    $4271 = $4270;
                   }
                   $908 = $4271;
                   $4272 = $908;
                   __THREW__ = 0;
                   $4273 = (invoke_ii(468,($4272|0))|0);
                   $4274 = __THREW__; __THREW__ = 0;
                   $4275 = $4274&1;
                   if ($4275) {
                    label = 409;
                    break L508;
                   }
                   $4276 = $4273&255;
                   __THREW__ = 0;
                   $4277 = (invoke_iii(507,($cc26|0),2)|0);
                   $4278 = __THREW__; __THREW__ = 0;
                   $4279 = $4278&1;
                   if ($4279) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$4277>>0] = $4276;
                   $4280 = $vert_per_face18;
                   $4281 = (($4280) + 4)|0;
                   $938 = $tokens;
                   $939 = $4281;
                   $4282 = $938;
                   $4283 = $939;
                   $4284 = HEAP32[$4282>>2]|0;
                   $4285 = (($4284) + (($4283*12)|0)|0);
                   $954 = $4285;
                   $4286 = $954;
                   $953 = $4286;
                   $4287 = $953;
                   $952 = $4287;
                   $4288 = $952;
                   $951 = $4288;
                   $4289 = $951;
                   $950 = $4289;
                   $4290 = $950;
                   $949 = $4290;
                   $4291 = $949;
                   $4292 = HEAP8[$4291>>0]|0;
                   $4293 = $4292&255;
                   $4294 = $4293 & 1;
                   $4295 = ($4294|0)!=(0);
                   if ($4295) {
                    $943 = $4288;
                    $4296 = $943;
                    $942 = $4296;
                    $4297 = $942;
                    $941 = $4297;
                    $4298 = $941;
                    $4299 = (($4298) + 8|0);
                    $4300 = HEAP32[$4299>>2]|0;
                    $4307 = $4300;
                   } else {
                    $948 = $4288;
                    $4301 = $948;
                    $947 = $4301;
                    $4302 = $947;
                    $946 = $4302;
                    $4303 = $946;
                    $4304 = (($4303) + 1|0);
                    $945 = $4304;
                    $4305 = $945;
                    $944 = $4305;
                    $4306 = $944;
                    $4307 = $4306;
                   }
                   $940 = $4307;
                   $4308 = $940;
                   __THREW__ = 0;
                   $4309 = (invoke_ii(468,($4308|0))|0);
                   $4310 = __THREW__; __THREW__ = 0;
                   $4311 = $4310&1;
                   if ($4311) {
                    label = 409;
                    break L508;
                   }
                   $4312 = $4309&255;
                   __THREW__ = 0;
                   $4313 = (invoke_iii(507,($cc26|0),3)|0);
                   $4314 = __THREW__; __THREW__ = 0;
                   $4315 = $4314&1;
                   if ($4315) {
                    label = 409;
                    break L508;
                   }
                   HEAP8[$4313>>0] = $4312;
                   while(1) {
                    $4316 = $f0;
                    $4317 = $f17;
                    $4318 = ($4316>>>0)<=($4317>>>0);
                    if (!($4318)) {
                     break;
                    }
                    $4319 = $1281;
                    $4320 = (($4319) + 32|0);
                    $4321 = $f0;
                    $957 = $4320;
                    $958 = $4321;
                    $4322 = $957;
                    $4323 = $958;
                    $4324 = HEAP32[$4322>>2]|0;
                    $4325 = (($4324) + (($4323*44)|0)|0);
                    __THREW__ = 0;
                    $4326 = (invoke_ii(505,($4325|0))|0);
                    $4327 = __THREW__; __THREW__ = 0;
                    $4328 = $4327&1;
                    if ($4328) {
                     label = 409;
                     break L508;
                    }
                    ;HEAP8[$4326+0>>0]=HEAP8[$cc26+0>>0]|0;HEAP8[$4326+1>>0]=HEAP8[$cc26+1>>0]|0;HEAP8[$4326+2>>0]=HEAP8[$cc26+2>>0]|0;HEAP8[$4326+3>>0]=HEAP8[$cc26+3>>0]|0;
                    $4329 = $f0;
                    $4330 = (($4329) + 1)|0;
                    $f0 = $4330;
                   }
                  } else {
                   $4331 = $vert_per_face18;
                   $4332 = (($4331) + 1)|0;
                   $960 = $tokens;
                   $961 = $4332;
                   $4333 = $960;
                   $4334 = $961;
                   $4335 = HEAP32[$4333>>2]|0;
                   $4336 = (($4335) + (($4334*12)|0)|0);
                   $976 = $4336;
                   $4337 = $976;
                   $975 = $4337;
                   $4338 = $975;
                   $974 = $4338;
                   $4339 = $974;
                   $973 = $4339;
                   $4340 = $973;
                   $972 = $4340;
                   $4341 = $972;
                   $971 = $4341;
                   $4342 = $971;
                   $4343 = HEAP8[$4342>>0]|0;
                   $4344 = $4343&255;
                   $4345 = $4344 & 1;
                   $4346 = ($4345|0)!=(0);
                   if ($4346) {
                    $965 = $4339;
                    $4347 = $965;
                    $964 = $4347;
                    $4348 = $964;
                    $963 = $4348;
                    $4349 = $963;
                    $4350 = (($4349) + 8|0);
                    $4351 = HEAP32[$4350>>2]|0;
                    $4358 = $4351;
                   } else {
                    $970 = $4339;
                    $4352 = $970;
                    $969 = $4352;
                    $4353 = $969;
                    $968 = $4353;
                    $4354 = $968;
                    $4355 = (($4354) + 1|0);
                    $967 = $4355;
                    $4356 = $967;
                    $966 = $4356;
                    $4357 = $966;
                    $4358 = $4357;
                   }
                   $962 = $4358;
                   $4359 = $962;
                   __THREW__ = 0;
                   $4360 = (+invoke_di(470,($4359|0)));
                   $4361 = __THREW__; __THREW__ = 0;
                   $4362 = $4361&1;
                   if ($4362) {
                    label = 409;
                    break L508;
                   }
                   $4363 = $4360;
                   HEAPF32[$color27>>2] = $4363;
                   $4364 = $vert_per_face18;
                   $4365 = (($4364) + 2)|0;
                   $977 = $tokens;
                   $978 = $4365;
                   $4366 = $977;
                   $4367 = $978;
                   $4368 = HEAP32[$4366>>2]|0;
                   $4369 = (($4368) + (($4367*12)|0)|0);
                   $993 = $4369;
                   $4370 = $993;
                   $992 = $4370;
                   $4371 = $992;
                   $991 = $4371;
                   $4372 = $991;
                   $990 = $4372;
                   $4373 = $990;
                   $989 = $4373;
                   $4374 = $989;
                   $988 = $4374;
                   $4375 = $988;
                   $4376 = HEAP8[$4375>>0]|0;
                   $4377 = $4376&255;
                   $4378 = $4377 & 1;
                   $4379 = ($4378|0)!=(0);
                   if ($4379) {
                    $982 = $4372;
                    $4380 = $982;
                    $981 = $4380;
                    $4381 = $981;
                    $980 = $4381;
                    $4382 = $980;
                    $4383 = (($4382) + 8|0);
                    $4384 = HEAP32[$4383>>2]|0;
                    $4391 = $4384;
                   } else {
                    $987 = $4372;
                    $4385 = $987;
                    $986 = $4385;
                    $4386 = $986;
                    $985 = $4386;
                    $4387 = $985;
                    $4388 = (($4387) + 1|0);
                    $984 = $4388;
                    $4389 = $984;
                    $983 = $4389;
                    $4390 = $983;
                    $4391 = $4390;
                   }
                   $979 = $4391;
                   $4392 = $979;
                   __THREW__ = 0;
                   $4393 = (+invoke_di(470,($4392|0)));
                   $4394 = __THREW__; __THREW__ = 0;
                   $4395 = $4394&1;
                   if ($4395) {
                    label = 409;
                    break L508;
                   }
                   $4396 = $4393;
                   $4397 = (($color27) + 4|0);
                   HEAPF32[$4397>>2] = $4396;
                   $4398 = $vert_per_face18;
                   $4399 = (($4398) + 3)|0;
                   $994 = $tokens;
                   $995 = $4399;
                   $4400 = $994;
                   $4401 = $995;
                   $4402 = HEAP32[$4400>>2]|0;
                   $4403 = (($4402) + (($4401*12)|0)|0);
                   $1010 = $4403;
                   $4404 = $1010;
                   $1009 = $4404;
                   $4405 = $1009;
                   $1008 = $4405;
                   $4406 = $1008;
                   $1007 = $4406;
                   $4407 = $1007;
                   $1006 = $4407;
                   $4408 = $1006;
                   $1005 = $4408;
                   $4409 = $1005;
                   $4410 = HEAP8[$4409>>0]|0;
                   $4411 = $4410&255;
                   $4412 = $4411 & 1;
                   $4413 = ($4412|0)!=(0);
                   if ($4413) {
                    $999 = $4406;
                    $4414 = $999;
                    $998 = $4414;
                    $4415 = $998;
                    $997 = $4415;
                    $4416 = $997;
                    $4417 = (($4416) + 8|0);
                    $4418 = HEAP32[$4417>>2]|0;
                    $4425 = $4418;
                   } else {
                    $1004 = $4406;
                    $4419 = $1004;
                    $1003 = $4419;
                    $4420 = $1003;
                    $1002 = $4420;
                    $4421 = $1002;
                    $4422 = (($4421) + 1|0);
                    $1001 = $4422;
                    $4423 = $1001;
                    $1000 = $4423;
                    $4424 = $1000;
                    $4425 = $4424;
                   }
                   $996 = $4425;
                   $4426 = $996;
                   __THREW__ = 0;
                   $4427 = (+invoke_di(470,($4426|0)));
                   $4428 = __THREW__; __THREW__ = 0;
                   $4429 = $4428&1;
                   if ($4429) {
                    label = 409;
                    break L508;
                   }
                   $4430 = $4427;
                   $4431 = (($color27) + 8|0);
                   HEAPF32[$4431>>2] = $4430;
                   $4432 = $vert_per_face18;
                   $4433 = (($4432) + 4)|0;
                   $1011 = $tokens;
                   $1012 = $4433;
                   $4434 = $1011;
                   $4435 = $1012;
                   $4436 = HEAP32[$4434>>2]|0;
                   $4437 = (($4436) + (($4435*12)|0)|0);
                   $1027 = $4437;
                   $4438 = $1027;
                   $1026 = $4438;
                   $4439 = $1026;
                   $1025 = $4439;
                   $4440 = $1025;
                   $1024 = $4440;
                   $4441 = $1024;
                   $1023 = $4441;
                   $4442 = $1023;
                   $1022 = $4442;
                   $4443 = $1022;
                   $4444 = HEAP8[$4443>>0]|0;
                   $4445 = $4444&255;
                   $4446 = $4445 & 1;
                   $4447 = ($4446|0)!=(0);
                   if ($4447) {
                    $1016 = $4440;
                    $4448 = $1016;
                    $1015 = $4448;
                    $4449 = $1015;
                    $1014 = $4449;
                    $4450 = $1014;
                    $4451 = (($4450) + 8|0);
                    $4452 = HEAP32[$4451>>2]|0;
                    $4459 = $4452;
                   } else {
                    $1021 = $4440;
                    $4453 = $1021;
                    $1020 = $4453;
                    $4454 = $1020;
                    $1019 = $4454;
                    $4455 = $1019;
                    $4456 = (($4455) + 1|0);
                    $1018 = $4456;
                    $4457 = $1018;
                    $1017 = $4457;
                    $4458 = $1017;
                    $4459 = $4458;
                   }
                   $1013 = $4459;
                   $4460 = $1013;
                   __THREW__ = 0;
                   $4461 = (+invoke_di(470,($4460|0)));
                   $4462 = __THREW__; __THREW__ = 0;
                   $4463 = $4462&1;
                   if ($4463) {
                    label = 409;
                    break L508;
                   }
                   $4464 = $4461;
                   $4465 = (($color27) + 12|0);
                   HEAPF32[$4465>>2] = $4464;
                   while(1) {
                    $4466 = $f0;
                    $4467 = $f17;
                    $4468 = ($4466>>>0)<=($4467>>>0);
                    if (!($4468)) {
                     break;
                    }
                    $4469 = $1281;
                    $4470 = (($4469) + 32|0);
                    $4471 = $f0;
                    $1028 = $4470;
                    $1029 = $4471;
                    $4472 = $1028;
                    $4473 = $1029;
                    $4474 = HEAP32[$4472>>2]|0;
                    $4475 = (($4474) + (($4473*44)|0)|0);
                    __THREW__ = 0;
                    $4476 = (invoke_ii(505,($4475|0))|0);
                    $4477 = __THREW__; __THREW__ = 0;
                    $4478 = $4477&1;
                    if ($4478) {
                     label = 409;
                     break L508;
                    }
                    $4479 = +HEAPF32[$color27>>2];
                    $4480 = (($color27) + 4|0);
                    $4481 = +HEAPF32[$4480>>2];
                    $4482 = (($color27) + 8|0);
                    $4483 = +HEAPF32[$4482>>2];
                    $4484 = (($color27) + 12|0);
                    $4485 = +HEAPF32[$4484>>2];
                    __THREW__ = 0;
                    invoke_vidddd(481,($1303|0),(+$4479),(+$4481),(+$4483),(+$4485));
                    $4486 = __THREW__; __THREW__ = 0;
                    $4487 = $4486&1;
                    if ($4487) {
                     label = 409;
                     break L508;
                    }
                    __THREW__ = 0;
                    invoke_vii(477,($4476|0),($1303|0));
                    $4488 = __THREW__; __THREW__ = 0;
                    $4489 = $4488&1;
                    if ($4489) {
                     label = 409;
                     break L508;
                    }
                    $4490 = $f0;
                    $4491 = (($4490) + 1)|0;
                    $f0 = $4491;
                   }
                  }
                 }
                }
               } while(0);
               $4492 = $f17;
               $4493 = (($4492) + 1)|0;
               $f17 = $4493;
              }
              do {
               if ((label|0) == 408) {
                $1280 = 2;
                $1287 = 1;
                label = 727;
               }
               else if ((label|0) == 421) {
                $1280 = 7;
                $1287 = 1;
                label = 727;
               }
               else if ((label|0) == 428) {
                $1280 = 2;
                $1287 = 1;
                label = 727;
               }
               else if ((label|0) == 450) {
                $3308 = ___cxa_find_matching_catch()|0;
                $3309 = tempRet0;
                $1285 = $3308;
                $1286 = $3309;
               }
               else if ((label|0) == 451) {
                $3310 = ___cxa_find_matching_catch()|0;
                $3311 = tempRet0;
                $1285 = $3310;
                $1286 = $3311;
                label = 571;
               }
               else if ((label|0) == 475) {
                $3397 = ___cxa_find_matching_catch()|0;
                $3398 = tempRet0;
                $1285 = $3397;
                $1286 = $3398;
                __THREW__ = 0;
                invoke_vi(494,($q|0));
                $3399 = __THREW__; __THREW__ = 0;
                $3400 = $3399&1;
                if ($3400) {
                 $4507 = ___cxa_find_matching_catch(0|0)|0;
                 $4508 = tempRet0;
                 ___clang_call_terminate($4507);
                 // unreachable;
                } else {
                 label = 571;
                 break;
                }
               }
               else if ((label|0) == 551) {
                $3757 = ___cxa_find_matching_catch()|0;
                $3758 = tempRet0;
                $1285 = $3757;
                $1286 = $3758;
                label = 564;
               }
               else if ((label|0) == 552) {
                $3759 = ___cxa_find_matching_catch()|0;
                $3760 = tempRet0;
                $1285 = $3759;
                $1286 = $3760;
                __THREW__ = 0;
                invoke_vi(502,($loopVect|0));
                $3761 = __THREW__; __THREW__ = 0;
                $3762 = $3761&1;
                if ($3762) {
                 $4507 = ___cxa_find_matching_catch(0|0)|0;
                 $4508 = tempRet0;
                 ___clang_call_terminate($4507);
                 // unreachable;
                } else {
                 label = 564;
                 break;
                }
               }
               else if ((label|0) == 726) {
                $1287 = 0;
                label = 727;
               }
              } while(0);
              do {
               if ((label|0) == 564) {
                __THREW__ = 0;
                invoke_vi(485,($indexTriangulatedVect|0));
                $3784 = __THREW__; __THREW__ = 0;
                $3785 = $3784&1;
                if ($3785) {
                 $4507 = ___cxa_find_matching_catch(0|0)|0;
                 $4508 = tempRet0;
                 ___clang_call_terminate($4507);
                 // unreachable;
                } else {
                 label = 571;
                 break;
                }
               }
               else if ((label|0) == 727) {
                __THREW__ = 0;
                invoke_vi(494,($qtmp|0));
                $4494 = __THREW__; __THREW__ = 0;
                $4495 = $4494&1;
                if ($4495) {
                 label = 56;
                 break L130;
                }
                $cleanup$dest28 = $1287;
                if (!((($cleanup$dest28|0) == 0))) {
                 break L37;
                }
                break L436;
               }
              } while(0);
              do {
               if ((label|0) == 571) {
                __THREW__ = 0;
                invoke_vi(503,($polygonVect|0));
                $3793 = __THREW__; __THREW__ = 0;
                $3794 = $3793&1;
                if ($3794) {
                 $4507 = ___cxa_find_matching_catch(0|0)|0;
                 $4508 = tempRet0;
                 ___clang_call_terminate($4507);
                 // unreachable;
                } else {
                 break;
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(485,($vertIndices|0));
              $3795 = __THREW__; __THREW__ = 0;
              $3796 = $3795&1;
              if ($3796) {
               $4507 = ___cxa_find_matching_catch(0|0)|0;
               $4508 = tempRet0;
               ___clang_call_terminate($4507);
               // unreachable;
              } else {
               break;
              }
             }
            } while(0);
            if ((label|0) == 409) {
             $3141 = ___cxa_find_matching_catch()|0;
             $3142 = tempRet0;
             $1285 = $3141;
             $1286 = $3142;
            }
            __THREW__ = 0;
            invoke_vi(494,($qtmp|0));
            $4496 = __THREW__; __THREW__ = 0;
            $4497 = $4496&1;
            if ($4497) {
             $4507 = ___cxa_find_matching_catch(0|0)|0;
             $4508 = tempRet0;
             ___clang_call_terminate($4507);
             // unreachable;
            } else {
             break L130;
            }
           }
          } while(0);
          $1280 = 0;
          $1287 = 1;
          break L37;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 56) {
       $1578 = ___cxa_find_matching_catch()|0;
       $1579 = tempRet0;
       $1285 = $1578;
       $1286 = $1579;
      }
      __THREW__ = 0;
      invoke_vi(397,($header|0));
      $4500 = __THREW__; __THREW__ = 0;
      $4501 = $4500&1;
      if ($4501) {
       $4507 = ___cxa_find_matching_catch(0|0)|0;
       $4508 = tempRet0;
       ___clang_call_terminate($4507);
       // unreachable;
      } else {
       break L1;
      }
     } else {
      $1280 = 3;
      $1287 = 1;
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(397,($header|0));
    $4498 = __THREW__; __THREW__ = 0;
    $4499 = $4498&1;
    if ($4499) {
     label = 4;
    } else {
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($tokens);
     $4502 = $1280;
     STACKTOP = sp;return ($4502|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $1337 = ___cxa_find_matching_catch()|0;
  $1338 = tempRet0;
  $1285 = $1337;
  $1286 = $1338;
 }
 __THREW__ = 0;
 invoke_vi(509,($tokens|0));
 $4503 = __THREW__; __THREW__ = 0;
 $4504 = $4503&1;
 if ($4504) {
  $4507 = ___cxa_find_matching_catch(0|0)|0;
  $4508 = tempRet0;
  ___clang_call_terminate($4507);
  // unreachable;
 }
 $4505 = $1285;
 $4506 = $1286;
 ___resumeException($4505|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(510,($3|0),(3664|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 60|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 60|0);
 __THREW__ = 0;
 invoke_vi(399,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 8|0);
 __THREW__ = 0;
 invoke_vi(22,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(14,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (3808 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 32|0);
 __THREW__ = 0;
 invoke_vi(397,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(398,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(22,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__noff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 88|0;
 $6 = sp + 72|0;
 $8 = sp + 56|0;
 $10 = sp + 96|0;
 $30 = sp + 104|0;
 $32 = sp + 120|0;
 $48 = sp + 32|0;
 $50 = sp;
 $53 = sp + 24|0;
 $55 = sp + 48|0;
 $58 = sp + 8|0;
 $60 = sp + 112|0;
 $75 = sp + 80|0;
 $77 = sp + 64|0;
 $80 = sp + 40|0;
 $__noff = sp + 16|0;
 $79 = $this;
 $83 = $80;
 $84 = $83;
 HEAP32[$84>>2] = $0;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $1;
 $81 = $__way;
 $82 = $__wch;
 $87 = $79;
 $88 = (($87) + 44|0);
 $89 = HEAP32[$88>>2]|0;
 $78 = $87;
 $90 = $78;
 $91 = (($90) + 24|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($89>>>0)<($92>>>0);
 if ($93) {
  $2 = $87;
  $94 = $2;
  $95 = (($94) + 24|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($87) + 44|0);
  HEAP32[$97>>2] = $96;
 }
 $98 = $82;
 $99 = $98 & 24;
 $100 = ($99|0)==(0);
 if ($100) {
  $5 = $agg$result;
  $101 = $6;
  $102 = $101;
  HEAP32[$102>>2] = -1;
  $103 = (($101) + 4)|0;
  $104 = $103;
  HEAP32[$104>>2] = -1;
  $105 = $5;
  $106 = $6;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $3 = $105;
  $112 = $4;
  $113 = $112;
  HEAP32[$113>>2] = $108;
  $114 = (($112) + 4)|0;
  $115 = $114;
  HEAP32[$115>>2] = $111;
  $116 = $3;
  ;HEAP32[$116+0>>2]=0|0;HEAP32[$116+4>>2]=0|0;
  $117 = (($116) + 8|0);
  $118 = $4;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = $117;
  $125 = $124;
  HEAP32[$125>>2] = $120;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  STACKTOP = sp;return;
 }
 $128 = $82;
 $129 = $128 & 24;
 $130 = ($129|0)==(24);
 if ($130) {
  $131 = $81;
  $132 = ($131|0)==(1);
  if ($132) {
   $9 = $agg$result;
   $133 = $10;
   $134 = $133;
   HEAP32[$134>>2] = -1;
   $135 = (($133) + 4)|0;
   $136 = $135;
   HEAP32[$136>>2] = -1;
   $137 = $9;
   $138 = $10;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $7 = $137;
   $144 = $8;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $143;
   $148 = $7;
   ;HEAP32[$148+0>>2]=0|0;HEAP32[$148+4>>2]=0|0;
   $149 = (($148) + 8|0);
   $150 = $8;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (($150) + 4)|0;
   $154 = $153;
   $155 = HEAP32[$154>>2]|0;
   $156 = $149;
   $157 = $156;
   HEAP32[$157>>2] = $152;
   $158 = (($156) + 4)|0;
   $159 = $158;
   HEAP32[$159>>2] = $155;
   STACKTOP = sp;return;
  }
 }
 $160 = $81;
 if ((($160|0) == 0)) {
  $161 = $__noff;
  $162 = $161;
  HEAP32[$162>>2] = 0;
  $163 = (($161) + 4)|0;
  $164 = $163;
  HEAP32[$164>>2] = 0;
 } else if ((($160|0) == 1)) {
  $165 = $82;
  $166 = $165 & 8;
  $167 = ($166|0)!=(0);
  if ($167) {
   $11 = $87;
   $168 = $11;
   $169 = (($168) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $12 = $87;
   $171 = $12;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $170;
   $175 = $173;
   $176 = (($174) - ($175))|0;
   $177 = ($176|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = $__noff;
   $180 = $179;
   HEAP32[$180>>2] = $176;
   $181 = (($179) + 4)|0;
   $182 = $181;
   HEAP32[$182>>2] = $178;
  } else {
   $13 = $87;
   $183 = $13;
   $184 = (($183) + 24|0);
   $185 = HEAP32[$184>>2]|0;
   $14 = $87;
   $186 = $14;
   $187 = (($186) + 20|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $185;
   $190 = $188;
   $191 = (($189) - ($190))|0;
   $192 = ($191|0)<(0);
   $193 = $192 << 31 >> 31;
   $194 = $__noff;
   $195 = $194;
   HEAP32[$195>>2] = $191;
   $196 = (($194) + 4)|0;
   $197 = $196;
   HEAP32[$197>>2] = $193;
  }
 } else if ((($160|0) == 2)) {
  $198 = (($87) + 44|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($87) + 32|0);
  $28 = $200;
  $201 = $28;
  $27 = $201;
  $202 = $27;
  $26 = $202;
  $203 = $26;
  $25 = $203;
  $204 = $25;
  $24 = $204;
  $205 = $24;
  $206 = HEAP8[$205>>0]|0;
  $207 = $206&255;
  $208 = $207 & 1;
  $209 = ($208|0)!=(0);
  if ($209) {
   $18 = $202;
   $210 = $18;
   $17 = $210;
   $211 = $17;
   $16 = $211;
   $212 = $16;
   $213 = (($212) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $221 = $214;
  } else {
   $23 = $202;
   $215 = $23;
   $22 = $215;
   $216 = $22;
   $21 = $216;
   $217 = $21;
   $218 = (($217) + 1|0);
   $20 = $218;
   $219 = $20;
   $19 = $219;
   $220 = $19;
   $221 = $220;
  }
  $15 = $221;
  $222 = $15;
  $223 = $199;
  $224 = $222;
  $225 = (($223) - ($224))|0;
  $226 = ($225|0)<(0);
  $227 = $226 << 31 >> 31;
  $228 = $__noff;
  $229 = $228;
  HEAP32[$229>>2] = $225;
  $230 = (($228) + 4)|0;
  $231 = $230;
  HEAP32[$231>>2] = $227;
 } else {
  $31 = $agg$result;
  $232 = $32;
  $233 = $232;
  HEAP32[$233>>2] = -1;
  $234 = (($232) + 4)|0;
  $235 = $234;
  HEAP32[$235>>2] = -1;
  $236 = $31;
  $237 = $32;
  $238 = $237;
  $239 = HEAP32[$238>>2]|0;
  $240 = (($237) + 4)|0;
  $241 = $240;
  $242 = HEAP32[$241>>2]|0;
  $29 = $236;
  $243 = $30;
  $244 = $243;
  HEAP32[$244>>2] = $239;
  $245 = (($243) + 4)|0;
  $246 = $245;
  HEAP32[$246>>2] = $242;
  $247 = $29;
  ;HEAP32[$247+0>>2]=0|0;HEAP32[$247+4>>2]=0|0;
  $248 = (($247) + 8|0);
  $249 = $30;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) + 4)|0;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = $248;
  $256 = $255;
  HEAP32[$256>>2] = $251;
  $257 = (($255) + 4)|0;
  $258 = $257;
  HEAP32[$258>>2] = $254;
  STACKTOP = sp;return;
 }
 $259 = $80;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = (($259) + 4)|0;
 $263 = $262;
 $264 = HEAP32[$263>>2]|0;
 $265 = $__noff;
 $266 = $265;
 $267 = HEAP32[$266>>2]|0;
 $268 = (($265) + 4)|0;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = (_i64Add(($267|0),($270|0),($261|0),($264|0))|0);
 $272 = tempRet0;
 $273 = $__noff;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $__noff;
 $278 = $277;
 $279 = HEAP32[$278>>2]|0;
 $280 = (($277) + 4)|0;
 $281 = $280;
 $282 = HEAP32[$281>>2]|0;
 $283 = ($282|0)<(0);
 if (!($283)) {
  $284 = (($87) + 44|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($87) + 32|0);
  $46 = $286;
  $287 = $46;
  $45 = $287;
  $288 = $45;
  $44 = $288;
  $289 = $44;
  $43 = $289;
  $290 = $43;
  $42 = $290;
  $291 = $42;
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&255;
  $294 = $293 & 1;
  $295 = ($294|0)!=(0);
  if ($295) {
   $36 = $288;
   $296 = $36;
   $35 = $296;
   $297 = $35;
   $34 = $297;
   $298 = $34;
   $299 = (($298) + 8|0);
   $300 = HEAP32[$299>>2]|0;
   $307 = $300;
  } else {
   $41 = $288;
   $301 = $41;
   $40 = $301;
   $302 = $40;
   $39 = $302;
   $303 = $39;
   $304 = (($303) + 1|0);
   $38 = $304;
   $305 = $38;
   $37 = $305;
   $306 = $37;
   $307 = $306;
  }
  $33 = $307;
  $308 = $33;
  $309 = $285;
  $310 = $308;
  $311 = (($309) - ($310))|0;
  $312 = ($311|0)<(0);
  $313 = $312 << 31 >> 31;
  $314 = $__noff;
  $315 = $314;
  $316 = HEAP32[$315>>2]|0;
  $317 = (($314) + 4)|0;
  $318 = $317;
  $319 = HEAP32[$318>>2]|0;
  $320 = ($313|0)<($319|0);
  $321 = ($313|0)==($319|0);
  $322 = ($311>>>0)<($316>>>0);
  $323 = $321 & $322;
  $324 = $320 | $323;
  if (!($324)) {
   $352 = $__noff;
   $353 = $352;
   $354 = HEAP32[$353>>2]|0;
   $355 = (($352) + 4)|0;
   $356 = $355;
   $357 = HEAP32[$356>>2]|0;
   $358 = ($354|0)!=(0);
   $359 = ($357|0)!=(0);
   $360 = $358 | $359;
   if ($360) {
    $361 = $82;
    $362 = $361 & 8;
    $363 = ($362|0)!=(0);
    if ($363) {
     $51 = $87;
     $364 = $51;
     $365 = (($364) + 12|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = ($366|0)==(0|0);
     if ($367) {
      $54 = $agg$result;
      $368 = $55;
      $369 = $368;
      HEAP32[$369>>2] = -1;
      $370 = (($368) + 4)|0;
      $371 = $370;
      HEAP32[$371>>2] = -1;
      $372 = $54;
      $373 = $55;
      $374 = $373;
      $375 = HEAP32[$374>>2]|0;
      $376 = (($373) + 4)|0;
      $377 = $376;
      $378 = HEAP32[$377>>2]|0;
      $52 = $372;
      $379 = $53;
      $380 = $379;
      HEAP32[$380>>2] = $375;
      $381 = (($379) + 4)|0;
      $382 = $381;
      HEAP32[$382>>2] = $378;
      $383 = $52;
      ;HEAP32[$383+0>>2]=0|0;HEAP32[$383+4>>2]=0|0;
      $384 = (($383) + 8|0);
      $385 = $53;
      $386 = $385;
      $387 = HEAP32[$386>>2]|0;
      $388 = (($385) + 4)|0;
      $389 = $388;
      $390 = HEAP32[$389>>2]|0;
      $391 = $384;
      $392 = $391;
      HEAP32[$392>>2] = $387;
      $393 = (($391) + 4)|0;
      $394 = $393;
      HEAP32[$394>>2] = $390;
      STACKTOP = sp;return;
     }
    }
    $395 = $82;
    $396 = $395 & 16;
    $397 = ($396|0)!=(0);
    if ($397) {
     $56 = $87;
     $398 = $56;
     $399 = (($398) + 24|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($400|0)==(0|0);
     if ($401) {
      $59 = $agg$result;
      $402 = $60;
      $403 = $402;
      HEAP32[$403>>2] = -1;
      $404 = (($402) + 4)|0;
      $405 = $404;
      HEAP32[$405>>2] = -1;
      $406 = $59;
      $407 = $60;
      $408 = $407;
      $409 = HEAP32[$408>>2]|0;
      $410 = (($407) + 4)|0;
      $411 = $410;
      $412 = HEAP32[$411>>2]|0;
      $57 = $406;
      $413 = $58;
      $414 = $413;
      HEAP32[$414>>2] = $409;
      $415 = (($413) + 4)|0;
      $416 = $415;
      HEAP32[$416>>2] = $412;
      $417 = $57;
      ;HEAP32[$417+0>>2]=0|0;HEAP32[$417+4>>2]=0|0;
      $418 = (($417) + 8|0);
      $419 = $58;
      $420 = $419;
      $421 = HEAP32[$420>>2]|0;
      $422 = (($419) + 4)|0;
      $423 = $422;
      $424 = HEAP32[$423>>2]|0;
      $425 = $418;
      $426 = $425;
      HEAP32[$426>>2] = $421;
      $427 = (($425) + 4)|0;
      $428 = $427;
      HEAP32[$428>>2] = $424;
      STACKTOP = sp;return;
     }
    }
   }
   $429 = $82;
   $430 = $429 & 8;
   $431 = ($430|0)!=(0);
   if ($431) {
    $61 = $87;
    $432 = $61;
    $433 = (($432) + 8|0);
    $434 = HEAP32[$433>>2]|0;
    $62 = $87;
    $435 = $62;
    $436 = (($435) + 8|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = $__noff;
    $439 = $438;
    $440 = HEAP32[$439>>2]|0;
    $441 = (($438) + 4)|0;
    $442 = $441;
    $443 = HEAP32[$442>>2]|0;
    $444 = (($437) + ($440)|0);
    $445 = (($87) + 44|0);
    $446 = HEAP32[$445>>2]|0;
    $63 = $87;
    $64 = $434;
    $65 = $444;
    $66 = $446;
    $447 = $63;
    $448 = $64;
    $449 = (($447) + 8|0);
    HEAP32[$449>>2] = $448;
    $450 = $65;
    $451 = (($447) + 12|0);
    HEAP32[$451>>2] = $450;
    $452 = $66;
    $453 = (($447) + 16|0);
    HEAP32[$453>>2] = $452;
   }
   $454 = $82;
   $455 = $454 & 16;
   $456 = ($455|0)!=(0);
   if ($456) {
    $67 = $87;
    $457 = $67;
    $458 = (($457) + 20|0);
    $459 = HEAP32[$458>>2]|0;
    $68 = $87;
    $460 = $68;
    $461 = (($460) + 28|0);
    $462 = HEAP32[$461>>2]|0;
    $69 = $87;
    $70 = $459;
    $71 = $462;
    $463 = $69;
    $464 = $70;
    $465 = (($463) + 24|0);
    HEAP32[$465>>2] = $464;
    $466 = (($463) + 20|0);
    HEAP32[$466>>2] = $464;
    $467 = $71;
    $468 = (($463) + 28|0);
    HEAP32[$468>>2] = $467;
    $469 = $__noff;
    $470 = $469;
    $471 = HEAP32[$470>>2]|0;
    $472 = (($469) + 4)|0;
    $473 = $472;
    $474 = HEAP32[$473>>2]|0;
    $72 = $87;
    $73 = $471;
    $475 = $72;
    $476 = $73;
    $477 = (($475) + 24|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478) + ($476)|0);
    HEAP32[$477>>2] = $479;
   }
   $480 = $__noff;
   $481 = $480;
   $482 = HEAP32[$481>>2]|0;
   $483 = (($480) + 4)|0;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $76 = $agg$result;
   $486 = $77;
   $487 = $486;
   HEAP32[$487>>2] = $482;
   $488 = (($486) + 4)|0;
   $489 = $488;
   HEAP32[$489>>2] = $485;
   $490 = $76;
   $491 = $77;
   $492 = $491;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($491) + 4)|0;
   $495 = $494;
   $496 = HEAP32[$495>>2]|0;
   $74 = $490;
   $497 = $75;
   $498 = $497;
   HEAP32[$498>>2] = $493;
   $499 = (($497) + 4)|0;
   $500 = $499;
   HEAP32[$500>>2] = $496;
   $501 = $74;
   ;HEAP32[$501+0>>2]=0|0;HEAP32[$501+4>>2]=0|0;
   $502 = (($501) + 8|0);
   $503 = $75;
   $504 = $503;
   $505 = HEAP32[$504>>2]|0;
   $506 = (($503) + 4)|0;
   $507 = $506;
   $508 = HEAP32[$507>>2]|0;
   $509 = $502;
   $510 = $509;
   HEAP32[$510>>2] = $505;
   $511 = (($509) + 4)|0;
   $512 = $511;
   HEAP32[$512>>2] = $508;
   STACKTOP = sp;return;
  }
 }
 $49 = $agg$result;
 $325 = $50;
 $326 = $325;
 HEAP32[$326>>2] = -1;
 $327 = (($325) + 4)|0;
 $328 = $327;
 HEAP32[$328>>2] = -1;
 $329 = $49;
 $330 = $50;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (($330) + 4)|0;
 $334 = $333;
 $335 = HEAP32[$334>>2]|0;
 $47 = $329;
 $336 = $48;
 $337 = $336;
 HEAP32[$337>>2] = $332;
 $338 = (($336) + 4)|0;
 $339 = $338;
 HEAP32[$339>>2] = $335;
 $340 = $47;
 ;HEAP32[$340+0>>2]=0|0;HEAP32[$340+4>>2]=0|0;
 $341 = (($340) + 8|0);
 $342 = $48;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 $345 = (($342) + 4)|0;
 $346 = $345;
 $347 = HEAP32[$346>>2]|0;
 $348 = $341;
 $349 = $348;
 HEAP32[$349>>2] = $344;
 $350 = (($348) + 4)|0;
 $351 = $350;
 HEAP32[$351>>2] = $347;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 511]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $14;
 $17 = $11;
 $18 = (($17) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($14) + 44|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = (($14) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
   $9 = $14;
   $29 = $9;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($14) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   if ($34) {
    $0 = $14;
    $35 = $0;
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $1 = $14;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($14) + 44|0);
    $42 = HEAP32[$41>>2]|0;
    $2 = $14;
    $3 = $37;
    $4 = $40;
    $5 = $42;
    $43 = $2;
    $44 = $3;
    $45 = (($43) + 8|0);
    HEAP32[$45>>2] = $44;
    $46 = $4;
    $47 = (($43) + 12|0);
    HEAP32[$47>>2] = $46;
    $48 = $5;
    $49 = (($43) + 16|0);
    HEAP32[$49>>2] = $48;
   }
   $6 = $14;
   $50 = $6;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $7 = $14;
   $53 = $7;
   $54 = (($53) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52>>>0)<($55>>>0);
   if (!($56)) {
    break;
   }
   $8 = $14;
   $57 = $8;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($60)|0);
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $62 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = (($21) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $17 = $21;
 $24 = $17;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)<($26>>>0);
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = (($28) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($21) + 44|0);
  HEAP32[$31>>2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $21;
 $35 = $7;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)<($37>>>0);
 do {
  if ($38) {
   $39 = $20;
   $40 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $41 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($39,$40)|0);
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $4 = $21;
    $45 = $4;
    $46 = (($45) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + -1|0);
    $49 = (($21) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = (($51) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $2;
    $55 = (($51) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $3;
    $57 = (($51) + 16|0);
    HEAP32[$57>>2] = $56;
    $58 = $20;
    $59 = (__ZNSt3__111char_traitsIcE7not_eofEi($58)|0);
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;return ($95|0);
   }
   $60 = (($21) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 16;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $20;
    $65 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($64)|0);
    $6 = $21;
    $66 = $6;
    $67 = (($66) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + -1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (__ZNSt3__111char_traitsIcE2eqEcc($65,$70)|0);
    if (!($71)) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = (($72) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $9 = $21;
   $75 = $9;
   $76 = (($75) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + -1|0);
   $79 = (($21) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = (($81) + 8|0);
   HEAP32[$83>>2] = $82;
   $84 = $12;
   $85 = (($81) + 12|0);
   HEAP32[$85>>2] = $84;
   $86 = $13;
   $87 = (($81) + 16|0);
   HEAP32[$87>>2] = $86;
   $88 = $20;
   $89 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($88)|0);
   $15 = $21;
   $90 = $15;
   $91 = (($90) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92>>0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $94 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;return ($95|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = sp;
 $50 = sp + 348|0;
 $83 = sp + 292|0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($85,$86)|0);
 if ($87) {
  $299 = $79;
  $300 = (__ZNSt3__111char_traitsIcE7not_eofEi($299)|0);
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;return ($301|0);
 }
 $76 = $84;
 $88 = $76;
 $89 = (($88) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $75 = $84;
 $91 = $75;
 $92 = (($91) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $90;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = (($97) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $70 = $84;
 $100 = $70;
 $101 = (($100) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($99|0)==($102|0);
 do {
  if ($103) {
   $104 = (($84) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 16;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;return ($301|0);
   }
   $69 = $84;
   $109 = $69;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $40 = $84;
   $112 = $40;
   $113 = (($112) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $111;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $__nout = $117;
   $118 = (($84) + 44|0);
   $119 = HEAP32[$118>>2]|0;
   $7 = $84;
   $120 = $7;
   $121 = (($120) + 20|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $119;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $__hm = $125;
   $126 = (($84) + 32|0);
   __THREW__ = 0;
   invoke_vii(511,($126|0),0);
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = (($84) + 32|0);
    $130 = (($84) + 32|0);
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 1;
    $138 = ($137|0)!=(0);
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = (($145) - 1)|0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(512,($146|0),($147|0),0);
    $148 = __THREW__; __THREW__ = 0;
    $149 = $148&1;
    if (!($149)) {
     $150 = (($84) + 32|0);
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 & 1;
     $159 = ($158|0)!=(0);
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = (($162) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = (($167) + 1|0);
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = (($84) + 32|0);
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179>>0]|0;
     $181 = $180&255;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = (($174) + ($196)|0);
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = (($197) + 24|0);
     HEAP32[$199>>2] = $198;
     $200 = (($197) + 20|0);
     HEAP32[$200>>2] = $198;
     $201 = $36;
     $202 = (($197) + 28|0);
     HEAP32[$202>>2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = (($204) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($205)|0);
     HEAP32[$206>>2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = (($209) + 20|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__hm;
     $213 = (($211) + ($212)|0);
     $214 = (($84) + 44|0);
     HEAP32[$214>>2] = $213;
     break;
    }
   }
   $215 = ___cxa_find_matching_catch(0|0)|0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (___cxa_begin_catch(($217|0))|0);
   $218 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch();
   $301 = $77;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $41 = $84;
 $219 = $41;
 $220 = (($219) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + 1|0);
 HEAP32[$83>>2] = $222;
 $223 = (($84) + 44|0);
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228>>2]|0;
 $230 = $44;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($229>>>0)<($231>>>0);
 if ($232) {
  $233 = $46;
  $236 = $233;
 } else {
  $234 = $45;
  $236 = $234;
 }
 $235 = HEAP32[$236>>2]|0;
 $237 = (($84) + 44|0);
 HEAP32[$237>>2] = $235;
 $238 = (($84) + 48|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 8;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = (($84) + 32|0);
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $249 & 1;
  $251 = ($250|0)!=(0);
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = (($254) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = (($259) + 1|0);
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = (($266) + ($267)|0);
  $269 = (($84) + 44|0);
  $270 = HEAP32[$269>>2]|0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = (($271) + 8|0);
  HEAP32[$273>>2] = $272;
  $274 = $67;
  $275 = (($271) + 12|0);
  HEAP32[$275>>2] = $274;
  $276 = $68;
  $277 = (($271) + 16|0);
  HEAP32[$277>>2] = $276;
 }
 $278 = $79;
 $279 = $278&255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = (($280) + 24|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (($280) + 28|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)==($284|0);
 if ($285) {
  $286 = HEAP32[$280>>2]|0;
  $287 = (($286) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $74;
  $290 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($289)|0);
  $291 = (FUNCTION_TABLE_iii[$288 & 1023]($280,$290)|0);
  $72 = $291;
 } else {
  $292 = $74;
  $293 = (($280) + 24|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + 1|0);
  HEAP32[$293>>2] = $295;
  HEAP8[$294>>0] = $292;
  $296 = $74;
  $297 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($296)|0);
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;return ($301|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($stream,$tokens) {
 $stream = $stream|0;
 $tokens = $tokens|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0;
 var $__annotator$i = 0, $__i$i$i$i = 0, $__old_size$i = 0, $from = 0, $length = 0, $line = 0, $to = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $108 = sp;
 $111 = sp + 892|0;
 $__annotator$i = sp + 893|0;
 $line = sp + 412|0;
 $209 = sp + 744|0;
 $210 = sp + 448|0;
 $205 = $stream;
 $206 = $tokens;
 $204 = $line;
 $211 = $204;
 $203 = $211;
 $212 = $203;
 $202 = $212;
 $213 = $202;
 $201 = $213;
 $214 = $201;
 $200 = $214;
 $215 = $200;
 $199 = $215;
 $198 = $212;
 $216 = $198;
 $197 = $216;
 $217 = $197;
 $196 = $217;
 $218 = $196;
 $__a$i$i$i = $218;
 $__i$i$i$i = 0;
 while(1) {
  $219 = $__i$i$i$i;
  $220 = ($219>>>0)<(3);
  if (!($220)) {
   break;
  }
  $221 = $__i$i$i$i;
  $222 = $__a$i$i$i;
  $223 = (($222) + ($221<<2)|0);
  HEAP32[$223>>2] = 0;
  $224 = $__i$i$i$i;
  $225 = (($224) + 1)|0;
  $__i$i$i$i = $225;
 }
 while(1) {
  $226 = $205;
  __THREW__ = 0;
  (invoke_iiii(513,($226|0),($line|0),10)|0);
  $227 = __THREW__; __THREW__ = 0;
  $228 = $227&1;
  if ($228) {
   label = 55;
   break;
  }
  $194 = $line;
  $195 = 0;
  $229 = $194;
  $193 = $229;
  $230 = $193;
  $192 = $230;
  $231 = $192;
  $191 = $231;
  $232 = $191;
  $190 = $232;
  $233 = $190;
  $234 = HEAP8[$233>>0]|0;
  $235 = $234&255;
  $236 = $235 & 1;
  $237 = ($236|0)!=(0);
  if ($237) {
   $184 = $230;
   $238 = $184;
   $183 = $238;
   $239 = $183;
   $182 = $239;
   $240 = $182;
   $241 = (($240) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $251 = $242;
  } else {
   $189 = $230;
   $243 = $189;
   $188 = $243;
   $244 = $188;
   $187 = $244;
   $245 = $187;
   $246 = (($245) + 1|0);
   $186 = $246;
   $247 = $186;
   $185 = $247;
   $248 = $185;
   $251 = $248;
  }
  $249 = $195;
  $250 = (($251) + ($249)|0);
  $252 = HEAP8[$250>>0]|0;
  $253 = $252 << 24 >> 24;
  $254 = ($253|0)==(35);
  if ($254) {
   label = 21;
  } else {
   $169 = $line;
   $255 = $169;
   $168 = $255;
   $256 = $168;
   $167 = $256;
   $257 = $167;
   $166 = $257;
   $258 = $166;
   $165 = $258;
   $259 = $165;
   $260 = HEAP8[$259>>0]|0;
   $261 = $260&255;
   $262 = $261 & 1;
   $263 = ($262|0)!=(0);
   if ($263) {
    $161 = $256;
    $264 = $161;
    $160 = $264;
    $265 = $160;
    $159 = $265;
    $266 = $159;
    $267 = (($266) + 4|0);
    $268 = HEAP32[$267>>2]|0;
    $276 = $268;
   } else {
    $164 = $256;
    $269 = $164;
    $163 = $269;
    $270 = $163;
    $162 = $270;
    $271 = $162;
    $272 = HEAP8[$271>>0]|0;
    $273 = $272&255;
    $274 = $273 >> 1;
    $276 = $274;
   }
   $275 = ($276|0)==(0);
   if ($275) {
    label = 21;
   } else {
    $157 = $line;
    $158 = 0;
    $277 = $157;
    $156 = $277;
    $278 = $156;
    $155 = $278;
    $279 = $155;
    $154 = $279;
    $280 = $154;
    $153 = $280;
    $281 = $153;
    $282 = HEAP8[$281>>0]|0;
    $283 = $282&255;
    $284 = $283 & 1;
    $285 = ($284|0)!=(0);
    if ($285) {
     $147 = $278;
     $286 = $147;
     $146 = $286;
     $287 = $146;
     $145 = $287;
     $288 = $145;
     $289 = (($288) + 8|0);
     $290 = HEAP32[$289>>2]|0;
     $299 = $290;
    } else {
     $152 = $278;
     $291 = $152;
     $151 = $291;
     $292 = $151;
     $150 = $292;
     $293 = $150;
     $294 = (($293) + 1|0);
     $149 = $294;
     $295 = $149;
     $148 = $295;
     $296 = $148;
     $299 = $296;
    }
    $297 = $158;
    $298 = (($299) + ($297)|0);
    $300 = HEAP8[$298>>0]|0;
    $301 = $300 << 24 >> 24;
    $302 = ($301|0)==(13);
    if ($302) {
     label = 21;
    } else {
     $654 = 0;
    }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   $303 = $205;
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304) + -12|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($303) + ($306)|0);
   $144 = $307;
   $308 = $144;
   $143 = $308;
   $309 = $143;
   $310 = (($309) + 16|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $311 & 2;
   $313 = ($312|0)!=(0);
   $314 = $313 ^ 1;
   $654 = $314;
  }
  if (!($654)) {
   label = 24;
   break;
  }
 }
 L30: do {
  if ((label|0) == 24) {
   $from = 0;
   $to = 0;
   $142 = $line;
   $315 = $142;
   $141 = $315;
   $316 = $141;
   $140 = $316;
   $317 = $140;
   $139 = $317;
   $318 = $139;
   $319 = HEAP8[$318>>0]|0;
   $320 = $319&255;
   $321 = $320 & 1;
   $322 = ($321|0)!=(0);
   if ($322) {
    $135 = $315;
    $323 = $135;
    $134 = $323;
    $324 = $134;
    $133 = $324;
    $325 = $133;
    $326 = (($325) + 4|0);
    $327 = HEAP32[$326>>2]|0;
    $334 = $327;
   } else {
    $138 = $315;
    $328 = $138;
    $137 = $328;
    $329 = $137;
    $136 = $329;
    $330 = $136;
    $331 = HEAP8[$330>>0]|0;
    $332 = $331&255;
    $333 = $332 >> 1;
    $334 = $333;
   }
   $length = $334;
   $335 = $206;
   $122 = $335;
   $336 = $122;
   $121 = $336;
   $337 = $121;
   $338 = (($337) + 4|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = HEAP32[$337>>2]|0;
   $341 = $339;
   $342 = $340;
   $343 = (($341) - ($342))|0;
   $344 = (($343|0) / 12)&-1;
   $__old_size$i = $344;
   $119 = $336;
   $345 = $119;
   $346 = HEAP32[$345>>2]|0;
   $115 = $345;
   $116 = $346;
   $347 = $115;
   while(1) {
    $348 = $116;
    $349 = (($347) + 4|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ($348|0)!=($350|0);
    if (!($351)) {
     break;
    }
    $114 = $347;
    $352 = $114;
    $353 = (($352) + 8|0);
    $113 = $353;
    $354 = $113;
    $112 = $354;
    $355 = $112;
    $356 = (($347) + 4|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + -12|0);
    HEAP32[$356>>2] = $358;
    $105 = $358;
    $359 = $105;
    $109 = $355;
    $110 = $359;
    $360 = $109;
    $361 = $110;
    ;HEAP8[$108+0>>0]=HEAP8[$111+0>>0]|0;
    $106 = $360;
    $107 = $361;
    $362 = $107;
    __THREW__ = 0;
    invoke_vi(397,($362|0));
    $363 = __THREW__; __THREW__ = 0;
    $364 = $363&1;
    if ($364) {
     label = 31;
     break;
    }
   }
   if ((label|0) == 31) {
    $365 = ___cxa_find_matching_catch()|0;
    $366 = tempRet0;
    $117 = $365;
    $118 = $366;
    $367 = $117;
    ___cxa_call_unexpected(($367|0));
    // unreachable;
   }
   $368 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(514,($336|0),($368|0));
   $369 = __THREW__; __THREW__ = 0;
   $370 = $369&1;
   if ($370) {
    $371 = ___cxa_find_matching_catch()|0;
    $372 = tempRet0;
    $123 = $371;
    $124 = $372;
    $373 = $123;
    ___cxa_call_unexpected(($373|0));
    // unreachable;
   }
   $120 = $336;
   while(1) {
    while(1) {
     $374 = $from;
     $375 = $length;
     $376 = ($374|0)!=($375|0);
     if ($376) {
      $377 = $from;
      $103 = $line;
      $104 = $377;
      $378 = $103;
      $102 = $378;
      $379 = $102;
      $101 = $379;
      $380 = $101;
      $100 = $380;
      $381 = $100;
      $99 = $381;
      $382 = $99;
      $383 = HEAP8[$382>>0]|0;
      $384 = $383&255;
      $385 = $384 & 1;
      $386 = ($385|0)!=(0);
      if ($386) {
       $93 = $379;
       $387 = $93;
       $92 = $387;
       $388 = $92;
       $91 = $388;
       $389 = $91;
       $390 = (($389) + 8|0);
       $391 = HEAP32[$390>>2]|0;
       $400 = $391;
      } else {
       $98 = $379;
       $392 = $98;
       $97 = $392;
       $393 = $97;
       $96 = $393;
       $394 = $96;
       $395 = (($394) + 1|0);
       $95 = $395;
       $396 = $95;
       $94 = $396;
       $397 = $94;
       $400 = $397;
      }
      $398 = $104;
      $399 = (($400) + ($398)|0);
      $401 = HEAP8[$399>>0]|0;
      $402 = $401 << 24 >> 24;
      $403 = ($402|0)==(32);
      if ($403) {
       $656 = 1;
      } else {
       $404 = $from;
       $89 = $line;
       $90 = $404;
       $405 = $89;
       $88 = $405;
       $406 = $88;
       $87 = $406;
       $407 = $87;
       $86 = $407;
       $408 = $86;
       $85 = $408;
       $409 = $85;
       $410 = HEAP8[$409>>0]|0;
       $411 = $410&255;
       $412 = $411 & 1;
       $413 = ($412|0)!=(0);
       if ($413) {
        $79 = $406;
        $414 = $79;
        $78 = $414;
        $415 = $78;
        $77 = $415;
        $416 = $77;
        $417 = (($416) + 8|0);
        $418 = HEAP32[$417>>2]|0;
        $427 = $418;
       } else {
        $84 = $406;
        $419 = $84;
        $83 = $419;
        $420 = $83;
        $82 = $420;
        $421 = $82;
        $422 = (($421) + 1|0);
        $81 = $422;
        $423 = $81;
        $80 = $423;
        $424 = $80;
        $427 = $424;
       }
       $425 = $90;
       $426 = (($427) + ($425)|0);
       $428 = HEAP8[$426>>0]|0;
       $429 = $428 << 24 >> 24;
       $430 = ($429|0)==(9);
       if ($430) {
        $656 = 1;
       } else {
        $431 = $from;
        $75 = $line;
        $76 = $431;
        $432 = $75;
        $74 = $432;
        $433 = $74;
        $73 = $433;
        $434 = $73;
        $72 = $434;
        $435 = $72;
        $71 = $435;
        $436 = $71;
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 & 1;
        $440 = ($439|0)!=(0);
        if ($440) {
         $65 = $433;
         $441 = $65;
         $64 = $441;
         $442 = $64;
         $63 = $442;
         $443 = $63;
         $444 = (($443) + 8|0);
         $445 = HEAP32[$444>>2]|0;
         $454 = $445;
        } else {
         $70 = $433;
         $446 = $70;
         $69 = $446;
         $447 = $69;
         $68 = $447;
         $448 = $68;
         $449 = (($448) + 1|0);
         $67 = $449;
         $450 = $67;
         $66 = $450;
         $451 = $66;
         $454 = $451;
        }
        $452 = $76;
        $453 = (($454) + ($452)|0);
        $455 = HEAP8[$453>>0]|0;
        $456 = $455 << 24 >> 24;
        $457 = ($456|0)==(13);
        $656 = $457;
       }
      }
      $655 = $656;
     } else {
      $655 = 0;
     }
     if (!($655)) {
      break;
     }
     $458 = $from;
     $459 = (($458) + 1)|0;
     $from = $459;
    }
    $462 = $from;
    $463 = $length;
    $464 = ($462|0)!=($463|0);
    if ($464) {
     $465 = $from;
     $466 = (($465) + 1)|0;
     $to = $466;
     while(1) {
      $467 = $to;
      $468 = $length;
      $469 = ($467|0)!=($468|0);
      if ($469) {
       $470 = $to;
       $61 = $line;
       $62 = $470;
       $471 = $61;
       $60 = $471;
       $472 = $60;
       $59 = $472;
       $473 = $59;
       $58 = $473;
       $474 = $58;
       $57 = $474;
       $475 = $57;
       $476 = HEAP8[$475>>0]|0;
       $477 = $476&255;
       $478 = $477 & 1;
       $479 = ($478|0)!=(0);
       if ($479) {
        $51 = $472;
        $480 = $51;
        $50 = $480;
        $481 = $50;
        $49 = $481;
        $482 = $49;
        $483 = (($482) + 8|0);
        $484 = HEAP32[$483>>2]|0;
        $493 = $484;
       } else {
        $56 = $472;
        $485 = $56;
        $55 = $485;
        $486 = $55;
        $54 = $486;
        $487 = $54;
        $488 = (($487) + 1|0);
        $53 = $488;
        $489 = $53;
        $52 = $489;
        $490 = $52;
        $493 = $490;
       }
       $491 = $62;
       $492 = (($493) + ($491)|0);
       $494 = HEAP8[$492>>0]|0;
       $495 = $494 << 24 >> 24;
       $496 = ($495|0)!=(32);
       if ($496) {
        $497 = $to;
        $47 = $line;
        $48 = $497;
        $498 = $47;
        $46 = $498;
        $499 = $46;
        $45 = $499;
        $500 = $45;
        $44 = $500;
        $501 = $44;
        $43 = $501;
        $502 = $43;
        $503 = HEAP8[$502>>0]|0;
        $504 = $503&255;
        $505 = $504 & 1;
        $506 = ($505|0)!=(0);
        if ($506) {
         $37 = $499;
         $507 = $37;
         $36 = $507;
         $508 = $36;
         $35 = $508;
         $509 = $35;
         $510 = (($509) + 8|0);
         $511 = HEAP32[$510>>2]|0;
         $520 = $511;
        } else {
         $42 = $499;
         $512 = $42;
         $41 = $512;
         $513 = $41;
         $40 = $513;
         $514 = $40;
         $515 = (($514) + 1|0);
         $39 = $515;
         $516 = $39;
         $38 = $516;
         $517 = $38;
         $520 = $517;
        }
        $518 = $48;
        $519 = (($520) + ($518)|0);
        $521 = HEAP8[$519>>0]|0;
        $522 = $521 << 24 >> 24;
        $523 = ($522|0)!=(9);
        if ($523) {
         $658 = 1;
        } else {
         label = 69;
        }
       } else {
        label = 69;
       }
       if ((label|0) == 69) {
        label = 0;
        $524 = $to;
        $12 = $line;
        $13 = $524;
        $525 = $12;
        $11 = $525;
        $526 = $11;
        $10 = $526;
        $527 = $10;
        $9 = $527;
        $528 = $9;
        $8 = $528;
        $529 = $8;
        $530 = HEAP8[$529>>0]|0;
        $531 = $530&255;
        $532 = $531 & 1;
        $533 = ($532|0)!=(0);
        if ($533) {
         $2 = $526;
         $534 = $2;
         $1 = $534;
         $535 = $1;
         $0 = $535;
         $536 = $0;
         $537 = (($536) + 8|0);
         $538 = HEAP32[$537>>2]|0;
         $547 = $538;
        } else {
         $7 = $526;
         $539 = $7;
         $6 = $539;
         $540 = $6;
         $5 = $540;
         $541 = $5;
         $542 = (($541) + 1|0);
         $4 = $542;
         $543 = $4;
         $3 = $543;
         $544 = $3;
         $547 = $544;
        }
        $545 = $13;
        $546 = (($547) + ($545)|0);
        $548 = HEAP8[$546>>0]|0;
        $549 = $548 << 24 >> 24;
        $550 = ($549|0)==(13);
        $658 = $550;
       }
       $657 = $658;
      } else {
       $657 = 0;
      }
      if (!($657)) {
       break;
      }
      $551 = $to;
      $552 = (($551) + 1)|0;
      $to = $552;
     }
     $553 = $206;
     $554 = $from;
     $555 = $to;
     $556 = $from;
     $557 = (($555) - ($556))|0;
     $17 = $line;
     $18 = $554;
     $19 = $557;
     $558 = $17;
     $559 = $18;
     $560 = $19;
     $16 = $558;
     $561 = $16;
     $15 = $561;
     $562 = $15;
     $14 = $562;
     $563 = $14;
     __THREW__ = 0;
     invoke_viiiii(515,($210|0),($558|0),($559|0),($560|0),($563|0));
     $564 = __THREW__; __THREW__ = 0;
     $565 = $564&1;
     if ($565) {
      label = 55;
      break L30;
     }
     $34 = $210;
     $566 = $34;
     $33 = $566;
     $567 = $33;
     $32 = $567;
     $568 = $32;
     $31 = $568;
     $569 = $31;
     $30 = $569;
     $570 = $30;
     $29 = $570;
     $571 = $29;
     $572 = HEAP8[$571>>0]|0;
     $573 = $572&255;
     $574 = $573 & 1;
     $575 = ($574|0)!=(0);
     if ($575) {
      $23 = $568;
      $576 = $23;
      $22 = $576;
      $577 = $22;
      $21 = $577;
      $578 = $21;
      $579 = (($578) + 8|0);
      $580 = HEAP32[$579>>2]|0;
      $587 = $580;
     } else {
      $28 = $568;
      $581 = $28;
      $27 = $581;
      $582 = $27;
      $26 = $582;
      $583 = $26;
      $584 = (($583) + 1|0);
      $25 = $584;
      $585 = $25;
      $24 = $585;
      $586 = $24;
      $587 = $586;
     }
     $20 = $587;
     $588 = $20;
     $131 = $209;
     $132 = $588;
     $589 = $131;
     $590 = $132;
     $129 = $589;
     $130 = $590;
     $591 = $129;
     $128 = $591;
     $592 = $128;
     $127 = $592;
     $593 = $127;
     $126 = $593;
     $594 = $126;
     $125 = $594;
     $595 = $130;
     $596 = $130;
     __THREW__ = 0;
     $597 = (invoke_ii(445,($596|0))|0);
     $598 = __THREW__; __THREW__ = 0;
     $599 = $598&1;
     if ($599) {
      label = 97;
      break;
     }
     __THREW__ = 0;
     invoke_viii(446,($591|0),($595|0),($597|0));
     $600 = __THREW__; __THREW__ = 0;
     $601 = $600&1;
     if ($601) {
      label = 97;
      break;
     }
     $180 = $553;
     $181 = $209;
     $602 = $180;
     $603 = (($602) + 4|0);
     $604 = HEAP32[$603>>2]|0;
     $179 = $602;
     $605 = $179;
     $606 = (($605) + 8|0);
     $178 = $606;
     $607 = $178;
     $177 = $607;
     $608 = $177;
     $609 = HEAP32[$608>>2]|0;
     $610 = ($604|0)!=($609|0);
     if ($610) {
      __THREW__ = 0;
      invoke_viii(516,($__annotator$i|0),($602|0),1);
      $611 = __THREW__; __THREW__ = 0;
      $612 = $611&1;
      if ($612) {
       label = 98;
       break;
      }
      $176 = $602;
      $613 = $176;
      $614 = (($613) + 8|0);
      $175 = $614;
      $615 = $175;
      $174 = $615;
      $616 = $174;
      $617 = (($602) + 4|0);
      $618 = HEAP32[$617>>2]|0;
      $173 = $618;
      $619 = $173;
      $620 = $181;
      $170 = $616;
      $171 = $619;
      $172 = $620;
      $621 = $171;
      $622 = ($621|0)==(0|0);
      if (!($622)) {
       $623 = $172;
       __THREW__ = 0;
       invoke_vii(463,($621|0),($623|0));
       $624 = __THREW__; __THREW__ = 0;
       $625 = $624&1;
       if ($625) {
        label = 98;
        break;
       }
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
      $626 = (($602) + 4|0);
      $627 = HEAP32[$626>>2]|0;
      $628 = (($627) + 12|0);
      HEAP32[$626>>2] = $628;
     } else {
      $629 = $181;
      __THREW__ = 0;
      invoke_vii(517,($602|0),($629|0));
      $630 = __THREW__; __THREW__ = 0;
      $631 = $630&1;
      if ($631) {
       label = 98;
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(397,($209|0));
     $632 = __THREW__; __THREW__ = 0;
     $633 = $632&1;
     if ($633) {
      label = 97;
      break;
     }
     __THREW__ = 0;
     invoke_vi(397,($210|0));
     $634 = __THREW__; __THREW__ = 0;
     $635 = $634&1;
     if ($635) {
      label = 55;
      break L30;
     }
     $636 = $to;
     $from = $636;
    }
    $645 = $from;
    $646 = $length;
    $647 = ($645>>>0)<($646>>>0);
    if (!($647)) {
     label = 104;
     break;
    }
   }
   do {
    if ((label|0) == 97) {
     $637 = ___cxa_find_matching_catch()|0;
     $638 = tempRet0;
     $207 = $637;
     $208 = $638;
    }
    else if ((label|0) == 98) {
     $639 = ___cxa_find_matching_catch()|0;
     $640 = tempRet0;
     $207 = $639;
     $208 = $640;
     __THREW__ = 0;
     invoke_vi(397,($209|0));
     $641 = __THREW__; __THREW__ = 0;
     $642 = $641&1;
     if ($642) {
      $652 = ___cxa_find_matching_catch(0|0)|0;
      $653 = tempRet0;
      ___clang_call_terminate($652);
      // unreachable;
     } else {
      break;
     }
    }
    else if ((label|0) == 104) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($line);
     STACKTOP = sp;return;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(397,($210|0));
   $643 = __THREW__; __THREW__ = 0;
   $644 = $643&1;
   if ($644) {
    $652 = ___cxa_find_matching_catch(0|0)|0;
    $653 = tempRet0;
    ___clang_call_terminate($652);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  $460 = ___cxa_find_matching_catch()|0;
  $461 = tempRet0;
  $207 = $460;
  $208 = $461;
 }
 __THREW__ = 0;
 invoke_vi(397,($line|0));
 $648 = __THREW__; __THREW__ = 0;
 $649 = $648&1;
 if ($649) {
  $652 = ___cxa_find_matching_catch(0|0)|0;
  $653 = tempRet0;
  ___clang_call_terminate($652);
  // unreachable;
 }
 $650 = $207;
 $651 = $208;
 ___resumeException($650|0);
 // unreachable;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5eraseENS_11__wrap_iterIPKS6_EESC_($agg$result,$this,$__first,$__last) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = sp;
 $36 = sp + 236|0;
 $57 = sp + 140|0;
 $56 = $this;
 $58 = $56;
 $59 = HEAP32[$58>>2]|0;
 $55 = $58;
 $60 = $55;
 $61 = HEAP32[$60>>2]|0;
 $53 = $60;
 $54 = $61;
 $62 = $54;
 $51 = $57;
 $52 = $62;
 $63 = $51;
 $64 = $52;
 $49 = $63;
 $50 = $64;
 $65 = $49;
 $66 = $50;
 HEAP32[$65>>2] = $66;
 $28 = $__first;
 $29 = $57;
 $67 = $28;
 $27 = $67;
 $68 = $27;
 $69 = HEAP32[$68>>2]|0;
 $70 = $29;
 $26 = $70;
 $71 = $26;
 $72 = HEAP32[$71>>2]|0;
 $73 = $69;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 12)&-1;
 $77 = (($59) + (($76*12)|0)|0);
 $__p = $77;
 $78 = $__p;
 $24 = $58;
 $25 = $78;
 $79 = $25;
 $22 = $agg$result;
 $23 = $79;
 $80 = $22;
 $81 = $23;
 $20 = $80;
 $21 = $81;
 $82 = $20;
 $83 = $21;
 HEAP32[$82>>2] = $83;
 $18 = $__first;
 $19 = $__last;
 $84 = $18;
 $85 = $19;
 $16 = $84;
 $17 = $85;
 $86 = $16;
 $15 = $86;
 $87 = $15;
 $88 = HEAP32[$87>>2]|0;
 $89 = $17;
 $14 = $89;
 $90 = $14;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($88|0)==($91|0);
 $93 = $92 ^ 1;
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = $__p;
 $12 = $__last;
 $13 = $__first;
 $95 = $12;
 $11 = $95;
 $96 = $11;
 $97 = HEAP32[$96>>2]|0;
 $98 = $13;
 $10 = $98;
 $99 = $10;
 $100 = HEAP32[$99>>2]|0;
 $101 = $97;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 12)&-1;
 $105 = (($94) + (($104*12)|0)|0);
 $106 = (($58) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $__p;
 $7 = $105;
 $8 = $107;
 $9 = $108;
 $109 = $7;
 $6 = $109;
 $110 = $6;
 $111 = $8;
 $1 = $111;
 $112 = $1;
 $113 = $9;
 $0 = $113;
 $114 = $0;
 $3 = $110;
 $4 = $112;
 $5 = $114;
 while(1) {
  $115 = $3;
  $116 = $4;
  $117 = ($115|0)!=($116|0);
  if (!($117)) {
   break;
  }
  $118 = $5;
  $119 = $3;
  $2 = $119;
  $120 = $2;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($118,$120)|0);
  $121 = $3;
  $122 = (($121) + 12|0);
  $3 = $122;
  $123 = $5;
  $124 = (($123) + 12|0);
  $5 = $124;
 }
 $125 = $5;
 $45 = $58;
 $46 = $125;
 $126 = $45;
 $44 = $126;
 $127 = $44;
 $128 = (($127) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = HEAP32[$127>>2]|0;
 $131 = $129;
 $132 = $130;
 $133 = (($131) - ($132))|0;
 $134 = (($133|0) / 12)&-1;
 $__old_size$i = $134;
 $135 = $46;
 $40 = $126;
 $41 = $135;
 $136 = $40;
 while(1) {
  $137 = $41;
  $138 = (($136) + 4|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($137|0)!=($139|0);
  if (!($140)) {
   break;
  }
  $39 = $136;
  $141 = $39;
  $142 = (($141) + 8|0);
  $38 = $142;
  $143 = $38;
  $37 = $143;
  $144 = $37;
  $145 = (($136) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + -12|0);
  HEAP32[$145>>2] = $147;
  $30 = $147;
  $148 = $30;
  $34 = $144;
  $35 = $148;
  $149 = $34;
  $150 = $35;
  ;HEAP8[$33+0>>0]=HEAP8[$36+0>>0]|0;
  $31 = $149;
  $32 = $150;
  $151 = $32;
  __THREW__ = 0;
  invoke_vi(397,($151|0));
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if ($153) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $154 = ___cxa_find_matching_catch()|0;
  $155 = tempRet0;
  $42 = $154;
  $43 = $155;
  $156 = $42;
  ___cxa_call_unexpected(($156|0));
  // unreachable;
 }
 $157 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(514,($126|0),($157|0));
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $160 = ___cxa_find_matching_catch()|0;
  $161 = tempRet0;
  $47 = $160;
  $48 = $161;
  $162 = $47;
  ___cxa_call_unexpected(($162|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__old_size$i = 0, $__old_size$i1 = 0, $__old_size$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp + 232|0;
 $21 = sp;
 $24 = sp + 233|0;
 $39 = sp + 16|0;
 $42 = sp + 234|0;
 $55 = sp + 228|0;
 $54 = $this;
 $56 = $54;
 $51 = $56;
 $57 = $51;
 $50 = $57;
 $58 = $50;
 $59 = (($58) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$58>>2]|0;
 $62 = $60;
 $63 = $61;
 $64 = (($62) - ($63))|0;
 $65 = (($64|0) / 36)&-1;
 $__old_size$i = $65;
 $48 = $57;
 $66 = $48;
 $67 = HEAP32[$66>>2]|0;
 $46 = $66;
 $47 = $67;
 $68 = $46;
 while(1) {
  $69 = $47;
  $70 = (($68) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)!=($71|0);
  if (!($72)) {
   break;
  }
  $45 = $68;
  $73 = $45;
  $74 = (($73) + 8|0);
  $44 = $74;
  $75 = $44;
  $43 = $75;
  $76 = $43;
  $77 = (($68) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + -36|0);
  HEAP32[$77>>2] = $79;
  $36 = $79;
  $80 = $36;
  $40 = $76;
  $41 = $80;
  $81 = $40;
  $82 = $41;
  ;HEAP8[$39+0>>0]=HEAP8[$42+0>>0]|0;
  $37 = $81;
  $38 = $82;
 }
 $83 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(428,($57|0),($83|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch()|0;
  $87 = tempRet0;
  $52 = $86;
  $53 = $87;
  $88 = $52;
  ___cxa_call_unexpected(($88|0));
  // unreachable;
 }
 $49 = $57;
 $89 = (($56) + 32|0);
 $33 = $89;
 $90 = $33;
 $32 = $90;
 $91 = $32;
 $92 = (($91) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$91>>2]|0;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $98 = (($97|0) / 44)&-1;
 $__old_size$i1 = $98;
 $30 = $90;
 $99 = $30;
 $100 = HEAP32[$99>>2]|0;
 $28 = $99;
 $29 = $100;
 $101 = $28;
 while(1) {
  $102 = $29;
  $103 = (($101) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($102|0)!=($104|0);
  if (!($105)) {
   break;
  }
  $27 = $101;
  $106 = $27;
  $107 = (($106) + 8|0);
  $26 = $107;
  $108 = $26;
  $25 = $108;
  $109 = $25;
  $110 = (($101) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + -44|0);
  HEAP32[$110>>2] = $112;
  $18 = $112;
  $113 = $18;
  $22 = $109;
  $23 = $113;
  $114 = $22;
  $115 = $23;
  ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
  $19 = $114;
  $20 = $115;
 }
 $116 = $__old_size$i1;
 __THREW__ = 0;
 invoke_vii(424,($90|0),($116|0));
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 if ($118) {
  $119 = ___cxa_find_matching_catch()|0;
  $120 = tempRet0;
  $34 = $119;
  $35 = $120;
  $121 = $34;
  ___cxa_call_unexpected(($121|0));
  // unreachable;
 }
 $31 = $90;
 $122 = (($56) + 16|0);
 $15 = $122;
 $123 = $15;
 $14 = $123;
 $124 = $14;
 $125 = (($124) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = HEAP32[$124>>2]|0;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $__old_size$i4 = $130;
 $12 = $123;
 $131 = $12;
 $132 = HEAP32[$131>>2]|0;
 $10 = $131;
 $11 = $132;
 $133 = $10;
 while(1) {
  $134 = $11;
  $135 = (($133) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($134|0)!=($136|0);
  if (!($137)) {
   break;
  }
  $9 = $133;
  $138 = $9;
  $139 = (($138) + 8|0);
  $8 = $139;
  $140 = $8;
  $7 = $140;
  $141 = $7;
  $142 = (($133) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + -1|0);
  HEAP32[$142>>2] = $144;
  $0 = $144;
  $145 = $0;
  $4 = $141;
  $5 = $145;
  $146 = $4;
  $147 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $146;
  $2 = $147;
 }
 $148 = $__old_size$i4;
 __THREW__ = 0;
 invoke_vii(518,($123|0),($148|0));
 $149 = __THREW__; __THREW__ = 0;
 $150 = $149&1;
 if ($150) {
  $151 = ___cxa_find_matching_catch()|0;
  $152 = tempRet0;
  $16 = $151;
  $17 = $152;
  $153 = $16;
  ___cxa_call_unexpected(($153|0));
  // unreachable;
 } else {
  $13 = $123;
  $154 = (($56) + 12|0);
  HEAP32[$154>>2] = 0;
  $155 = (($56) + 28|0);
  HEAP32[$155>>2] = 0;
  $156 = (($56) + 44|0);
  HEAP32[$156>>2] = 0;
  $157 = (($56) + 60|0);
  HEAP32[$157>>2] = 0;
  $158 = (($56) + 300|0);
  HEAP32[$158>>2] = 0;
  $159 = (($56) + 112|0);
  HEAP32[$159>>2] = 0;
  $160 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE1CEv($56)|0);
  __ZN3vcg6Color4IhEC1ENS1_13ColorConstantE($55,-8355712);
  ;HEAP8[$160+0>>0]=HEAP8[$55+0>>0]|0;HEAP8[$160+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$160+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$160+3>>0]=HEAP8[$55+3>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN3vcg6Point3IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1704|0),(1720|0),220,(1776|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg6Color4IhE6ImportIfEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point4IfEixEi($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * 255.0;
 $7 = (~~(($6))&255);
 $8 = (__ZN3vcg6Point4IhEixEi($2,0)|0);
 HEAP8[$8>>0] = $7;
 $9 = $1;
 $10 = (__ZNK3vcg6Point4IfEixEi($9,1)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * 255.0;
 $13 = (~~(($12))&255);
 $14 = (__ZN3vcg6Point4IhEixEi($2,1)|0);
 HEAP8[$14>>0] = $13;
 $15 = $1;
 $16 = (__ZNK3vcg6Point4IfEixEi($15,2)|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * 255.0;
 $19 = (~~(($18))&255);
 $20 = (__ZN3vcg6Point4IhEixEi($2,2)|0);
 HEAP8[$20>>0] = $19;
 $21 = $1;
 $22 = (__ZNK3vcg6Point4IfEixEi($21,3)|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 * 255.0;
 $25 = (~~(($24))&255);
 $26 = (__ZN3vcg6Point4IhEixEi($2,3)|0);
 HEAP8[$26>>0] = $25;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE8ColorMapEi($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $0;
 $2 = (4328 + ($1<<4)|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = (4328 + ($4<<4)|0);
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = (4328 + ($8<<4)|0);
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $0;
 $13 = (4328 + ($12<<4)|0);
 $14 = (($13) + 12|0);
 $15 = +HEAPF32[$14>>2];
 __ZN3vcg6Color4IfEC1Effff($agg$result,$3,$7,$11,$15);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC1Ehhhh($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 $nz = $nz|0;
 $nw = $nw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Color4IhEC2Ehhhh($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhE6ImportIhEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point4IhEixEi($3,0)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (__ZN3vcg6Point4IhEixEi($2,0)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = (__ZNK3vcg6Point4IhEixEi($7,1)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (__ZN3vcg6Point4IhEixEi($2,1)|0);
 HEAP8[$10>>0] = $9;
 $11 = $1;
 $12 = (__ZNK3vcg6Point4IhEixEi($11,2)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (__ZN3vcg6Point4IhEixEi($2,2)|0);
 HEAP8[$14>>0] = $13;
 $15 = $1;
 $16 = (__ZNK3vcg6Point4IhEixEi($15,3)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (__ZN3vcg6Point4IhEixEi($2,3)|0);
 HEAP8[$18>>0] = $17;
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IfEC1Effff($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 $nw = +$nw;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Color4IfEC2Effff($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE11HasPolyInfoEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC1Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE7AddFaceERS2_P8MyVertexS6_S6_($agg$result,$m,$v0,$v1,$v2) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 48|0;
 $17 = sp + 92|0;
 $11 = $m;
 $12 = $v0;
 $13 = $v1;
 $14 = $v2;
 $19 = $11;
 $10 = $19;
 $20 = $10;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$20>>2]|0;
 $24 = $22;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = (($26|0) / 36)&-1;
 $28 = ($27>>>0)>(0);
 if (!($28)) {
  ___assert_fail((4056|0),(2056|0),471,(4280|0));
  // unreachable;
 }
 $29 = $12;
 $30 = $13;
 $31 = ($29|0)!=($30|0);
 if (!($31)) {
  ___assert_fail((4288|0),(2056|0),472,(4280|0));
  // unreachable;
 }
 $32 = $13;
 $33 = $14;
 $34 = ($32|0)!=($33|0);
 if (!($34)) {
  ___assert_fail((4288|0),(2056|0),472,(4280|0));
  // unreachable;
 }
 $35 = $12;
 $36 = $14;
 $37 = ($35|0)!=($36|0);
 if (!($37)) {
  ___assert_fail((4288|0),(2056|0),472,(4280|0));
  // unreachable;
 }
 $38 = $12;
 $39 = $11;
 $9 = $39;
 $40 = $9;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38>>>0)>=($41>>>0);
 if (!($42)) {
  ___assert_fail((4088|0),(2056|0),473,(4280|0));
  // unreachable;
 }
 $43 = $12;
 $44 = $11;
 $8 = $44;
 $45 = $8;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + -36|0);
 $49 = ($43>>>0)<=($48>>>0);
 if (!($49)) {
  ___assert_fail((4088|0),(2056|0),473,(4280|0));
  // unreachable;
 }
 $50 = $13;
 $51 = $11;
 $7 = $51;
 $52 = $7;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($50>>>0)>=($53>>>0);
 if (!($54)) {
  ___assert_fail((4136|0),(2056|0),474,(4280|0));
  // unreachable;
 }
 $55 = $13;
 $56 = $11;
 $6 = $56;
 $57 = $6;
 $58 = (($57) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + -36|0);
 $61 = ($55>>>0)<=($60>>>0);
 if (!($61)) {
  ___assert_fail((4136|0),(2056|0),474,(4280|0));
  // unreachable;
 }
 $62 = $14;
 $63 = $11;
 $4 = $63;
 $64 = $4;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62>>>0)>=($65>>>0);
 if (!($66)) {
  ___assert_fail((4184|0),(2056|0),475,(4280|0));
  // unreachable;
 }
 $67 = $14;
 $68 = $11;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + -36|0);
 $73 = ($67>>>0)<=($72>>>0);
 if (!($73)) {
  ___assert_fail((4184|0),(2056|0),475,(4280|0));
  // unreachable;
 }
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC1Ev($pu);
 $74 = $11;
 __THREW__ = 0;
 invoke_viiii(419,($agg$result|0),($74|0),1,($pu|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if (!($76)) {
  $0 = $agg$result;
  $77 = $0;
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$17>>2] = 3;
  __THREW__ = 0;
  invoke_vii(519,($78|0),($17|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if (!($80)) {
   $81 = $12;
   $1 = $agg$result;
   $82 = $1;
   $83 = HEAP32[$82>>2]|0;
   __THREW__ = 0;
   $84 = (invoke_iii(490,($83|0),0)|0);
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if (!($86)) {
    HEAP32[$84>>2] = $81;
    $87 = $13;
    $3 = $agg$result;
    $88 = $3;
    $89 = HEAP32[$88>>2]|0;
    __THREW__ = 0;
    $90 = (invoke_iii(490,($89|0),1)|0);
    $91 = __THREW__; __THREW__ = 0;
    $92 = $91&1;
    if (!($92)) {
     HEAP32[$90>>2] = $87;
     $93 = $14;
     $5 = $agg$result;
     $94 = $5;
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     $96 = (invoke_iii(490,($95|0),2)|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if (!($98)) {
      HEAP32[$96>>2] = $93;
      $18 = 1;
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev($pu);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $15 = $99;
 $16 = $100;
 __THREW__ = 0;
 invoke_vi(420,($pu|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 }
 $103 = $15;
 $104 = $16;
 ___resumeException($103|0);
 // unreachable;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddQuadFaceERS2_P8MyVertexS6_S6_S6_($agg$result,$m,$v0,$v1,$v2,$v3) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fi = 0, $fi1 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp;
 $fi = sp + 88|0;
 $32 = sp + 152|0;
 $fi1 = sp + 92|0;
 $34 = sp + 160|0;
 $35 = sp + 96|0;
 $25 = $m;
 $26 = $v0;
 $27 = $v1;
 $28 = $v2;
 $29 = $v3;
 $36 = $25;
 $24 = $36;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 36)&-1;
 $45 = ($44>>>0)>(0);
 if (!($45)) {
  ___assert_fail((4056|0),(2056|0),517,(4072|0));
  // unreachable;
 }
 $46 = $26;
 $47 = $25;
 $23 = $47;
 $48 = $23;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($46>>>0)>=($49>>>0);
 if (!($50)) {
  ___assert_fail((4088|0),(2056|0),518,(4072|0));
  // unreachable;
 }
 $51 = $26;
 $52 = $25;
 $22 = $52;
 $53 = $22;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + -36|0);
 $57 = ($51>>>0)<=($56>>>0);
 if (!($57)) {
  ___assert_fail((4088|0),(2056|0),518,(4072|0));
  // unreachable;
 }
 $58 = $27;
 $59 = $25;
 $21 = $59;
 $60 = $21;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58>>>0)>=($61>>>0);
 if (!($62)) {
  ___assert_fail((4136|0),(2056|0),519,(4072|0));
  // unreachable;
 }
 $63 = $27;
 $64 = $25;
 $19 = $64;
 $65 = $19;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + -36|0);
 $69 = ($63>>>0)<=($68>>>0);
 if (!($69)) {
  ___assert_fail((4136|0),(2056|0),519,(4072|0));
  // unreachable;
 }
 $70 = $28;
 $71 = $25;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)>=($73>>>0);
 if (!($74)) {
  ___assert_fail((4184|0),(2056|0),520,(4072|0));
  // unreachable;
 }
 $75 = $28;
 $76 = $25;
 $15 = $76;
 $77 = $15;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + -36|0);
 $81 = ($75>>>0)<=($80>>>0);
 if (!($81)) {
  ___assert_fail((4184|0),(2056|0),520,(4072|0));
  // unreachable;
 }
 $82 = $29;
 $83 = $25;
 $13 = $83;
 $84 = $13;
 $85 = HEAP32[$84>>2]|0;
 $86 = ($82>>>0)>=($85>>>0);
 if (!($86)) {
  ___assert_fail((4232|0),(2056|0),521,(4072|0));
  // unreachable;
 }
 $87 = $29;
 $88 = $25;
 $10 = $88;
 $89 = $10;
 $90 = (($89) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + -36|0);
 $93 = ($87>>>0)<=($92>>>0);
 if (!($93)) {
  ___assert_fail((4232|0),(2056|0),521,(4072|0));
  // unreachable;
 }
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC1Ev($pu);
 __THREW__ = 0;
 $94 = (invoke_i(483)|0);
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 do {
  if (!($96)) {
   if ($94) {
    $97 = $25;
    __THREW__ = 0;
    invoke_viiii(419,($fi|0),($97|0),1,($pu|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     break;
    }
    $8 = $fi;
    $100 = $8;
    $101 = HEAP32[$100>>2]|0;
    HEAP32[$32>>2] = 4;
    __THREW__ = 0;
    invoke_vii(519,($101|0),($32|0));
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    if ($103) {
     break;
    }
    $104 = $26;
    $6 = $fi;
    $105 = $6;
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_iii(490,($106|0),0)|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    HEAP32[$107>>2] = $104;
    $110 = $27;
    $4 = $fi;
    $111 = $4;
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    $113 = (invoke_iii(490,($112|0),1)|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    }
    HEAP32[$113>>2] = $110;
    $116 = $28;
    $2 = $fi;
    $117 = $2;
    $118 = HEAP32[$117>>2]|0;
    __THREW__ = 0;
    $119 = (invoke_iii(490,($118|0),2)|0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     break;
    }
    HEAP32[$119>>2] = $116;
    $122 = $29;
    $0 = $fi;
    $123 = $0;
    $124 = HEAP32[$123>>2]|0;
    __THREW__ = 0;
    $125 = (invoke_iii(490,($124|0),3)|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     break;
    }
    HEAP32[$125>>2] = $122;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$fi+0>>2]|0;
    $33 = 1;
    __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev($pu);
    STACKTOP = sp;return;
   }
   $132 = $25;
   __THREW__ = 0;
   invoke_viiii(419,($fi1|0),($132|0),2,($pu|0));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if (!($134)) {
    $1 = $fi1;
    $135 = $1;
    $136 = HEAP32[$135>>2]|0;
    HEAP32[$34>>2] = 3;
    __THREW__ = 0;
    invoke_vii(519,($136|0),($34|0));
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if (!($138)) {
     $139 = $26;
     $3 = $fi1;
     $140 = $3;
     $141 = HEAP32[$140>>2]|0;
     __THREW__ = 0;
     $142 = (invoke_iii(490,($141|0),0)|0);
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      HEAP32[$142>>2] = $139;
      $145 = $27;
      $5 = $fi1;
      $146 = $5;
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_iii(490,($147|0),1)|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if (!($150)) {
       HEAP32[$148>>2] = $145;
       $151 = $28;
       $7 = $fi1;
       $152 = $7;
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_iii(490,($153|0),2)|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if (!($156)) {
        HEAP32[$154>>2] = $151;
        $9 = $fi1;
        $157 = $9;
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        invoke_vii(496,($158|0),2);
        $159 = __THREW__; __THREW__ = 0;
        $160 = $159&1;
        if (!($160)) {
         $11 = $fi1;
         $161 = $11;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + 44|0);
         HEAP32[$161>>2] = $163;
         $12 = $fi1;
         $164 = $12;
         $165 = HEAP32[$164>>2]|0;
         HEAP32[$35>>2] = 3;
         __THREW__ = 0;
         invoke_vii(519,($165|0),($35|0));
         $166 = __THREW__; __THREW__ = 0;
         $167 = $166&1;
         if (!($167)) {
          $168 = $26;
          $14 = $fi1;
          $169 = $14;
          $170 = HEAP32[$169>>2]|0;
          __THREW__ = 0;
          $171 = (invoke_iii(490,($170|0),0)|0);
          $172 = __THREW__; __THREW__ = 0;
          $173 = $172&1;
          if (!($173)) {
           HEAP32[$171>>2] = $168;
           $174 = $27;
           $16 = $fi1;
           $175 = $16;
           $176 = HEAP32[$175>>2]|0;
           __THREW__ = 0;
           $177 = (invoke_iii(490,($176|0),2)|0);
           $178 = __THREW__; __THREW__ = 0;
           $179 = $178&1;
           if ($179) {
            break;
           }
           HEAP32[$177>>2] = $174;
           $180 = $28;
           $18 = $fi1;
           $181 = $18;
           $182 = HEAP32[$181>>2]|0;
           __THREW__ = 0;
           $183 = (invoke_iii(490,($182|0),3)|0);
           $184 = __THREW__; __THREW__ = 0;
           $185 = $184&1;
           if ($185) {
            break;
           }
           HEAP32[$183>>2] = $180;
           $20 = $fi1;
           $186 = $20;
           $187 = HEAP32[$186>>2]|0;
           __THREW__ = 0;
           invoke_vii(496,($187|0),0);
           $188 = __THREW__; __THREW__ = 0;
           $189 = $188&1;
           if ($189) {
            break;
           }
           ;HEAP32[$agg$result+0>>2]=HEAP32[$fi1+0>>2]|0;
           $33 = 1;
           __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev($pu);
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $30 = $128;
 $31 = $129;
 __THREW__ = 0;
 invoke_vi(420,($pu|0));
 $130 = __THREW__; __THREW__ = 0;
 $131 = $130&1;
 if ($131) {
  $192 = ___cxa_find_matching_catch(0|0)|0;
  $193 = tempRet0;
  ___clang_call_terminate($192);
  // unreachable;
 }
 $190 = $30;
 $191 = $31;
 ___resumeException($190|0);
 // unreachable;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE($q) {
 $q = $q|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Angle0Rad = 0.0, $Angle1Rad = 0.0, $N00 = 0;
 var $N01 = 0, $N10 = 0, $N11 = 0, $P0 = 0, $P1 = 0, $P2 = 0, $P3 = 0, $__p1$i$i$i$i = 0, $__p1$i$i$i$i7 = 0, $qualityImprove = 0, $res = 0, $swapCauseFlip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1440|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy13 = sp + 768|0;
 $$byval_copy12 = sp + 1400|0;
 $$byval_copy11 = sp + 1376|0;
 $$byval_copy10 = sp + 1352|0;
 $$byval_copy9 = sp + 392|0;
 $$byval_copy8 = sp + 1240|0;
 $$byval_copy7 = sp + 244|0;
 $$byval_copy6 = sp + 424|0;
 $$byval_copy5 = sp + 1308|0;
 $$byval_copy4 = sp + 724|0;
 $$byval_copy3 = sp + 736|0;
 $$byval_copy2 = sp + 744|0;
 $$byval_copy1 = sp + 740|0;
 $$byval_copy = sp + 240|0;
 $30 = sp + 48|0;
 $33 = sp + 1421|0;
 $46 = sp + 160|0;
 $49 = sp + 1422|0;
 $52 = sp + 128|0;
 $61 = sp + 152|0;
 $64 = sp + 1425|0;
 $67 = sp + 96|0;
 $68 = sp + 456|0;
 $69 = sp + 460|0;
 $70 = sp + 464|0;
 $71 = sp + 468|0;
 $72 = sp + 472|0;
 $73 = sp + 476|0;
 $74 = sp + 480|0;
 $75 = sp + 380|0;
 $76 = sp + 488|0;
 $77 = sp + 492|0;
 $78 = sp + 496|0;
 $79 = sp + 184|0;
 $80 = sp + 8|0;
 $81 = sp + 176|0;
 $82 = sp + 80|0;
 $87 = sp + 532|0;
 $88 = sp + 536|0;
 $89 = sp + 540|0;
 $90 = sp + 1426|0;
 $91 = sp + 216|0;
 $92 = sp;
 $93 = sp + 144|0;
 $112 = sp + 632|0;
 $113 = sp + 1200|0;
 $119 = sp + 56|0;
 $122 = sp + 1423|0;
 $__p1$i$i$i$i7 = sp + 88|0;
 $125 = sp + 24|0;
 $128 = sp + 1348|0;
 $133 = sp + 1392|0;
 $146 = sp + 788|0;
 $147 = sp + 792|0;
 $__p1$i$i$i$i = sp + 120|0;
 $152 = sp + 64|0;
 $155 = sp + 828|0;
 $160 = sp + 848|0;
 $207 = sp + 192|0;
 $210 = sp + 1430|0;
 $213 = sp + 112|0;
 $222 = sp + 40|0;
 $225 = sp + 1428|0;
 $228 = sp + 208|0;
 $229 = sp + 1140|0;
 $230 = sp + 1144|0;
 $231 = sp + 1148|0;
 $232 = sp + 1152|0;
 $233 = sp + 1156|0;
 $234 = sp + 1160|0;
 $235 = sp + 1164|0;
 $236 = sp + 1168|0;
 $237 = sp + 1172|0;
 $238 = sp + 1176|0;
 $239 = sp + 1196|0;
 $240 = sp + 200|0;
 $241 = sp + 16|0;
 $242 = sp + 104|0;
 $243 = sp + 72|0;
 $248 = sp + 1216|0;
 $249 = sp + 1220|0;
 $250 = sp + 1224|0;
 $251 = sp + 1427|0;
 $252 = sp + 32|0;
 $253 = sp + 168|0;
 $254 = sp + 136|0;
 $257 = sp + 1420|0;
 $262 = sp + 1292|0;
 $263 = sp + 700|0;
 $264 = sp + 1316|0;
 $265 = sp + 1332|0;
 $N00 = sp + 256|0;
 $N01 = sp + 288|0;
 $N10 = sp + 676|0;
 $N11 = sp + 1276|0;
 $266 = sp + 1344|0;
 $267 = sp + 716|0;
 $268 = sp + 720|0;
 $269 = sp + 1360|0;
 $270 = sp + 1368|0;
 $271 = sp + 732|0;
 $272 = sp + 1384|0;
 $273 = sp + 1408|0;
 $274 = sp + 728|0;
 $res = sp + 280|0;
 $275 = sp + 1256|0;
 $276 = sp + 1008|0;
 $277 = sp + 1120|0;
 $278 = sp + 1056|0;
 $279 = sp + 896|0;
 $280 = sp + 544|0;
 $281 = sp + 428|0;
 $282 = sp + 1228|0;
 $283 = sp + 316|0;
 $259 = $q;
 $284 = HEAP8[4048>>0]|0;
 $285 = ($284<<24>>24)==(0);
 do {
  if ($285) {
   $286 = (___cxa_guard_acquire((4048|0))|0);
   $287 = ($286|0)!=(0);
   if ($287) {
    $258 = 4032;
    $288 = $258;
    $256 = $288;
    $289 = $256;
    __THREW__ = 0;
    invoke_vii(520,($289|0),($257|0));
    $290 = __THREW__; __THREW__ = 0;
    $291 = $290&1;
    if ($291) {
     $303 = ___cxa_find_matching_catch()|0;
     $304 = tempRet0;
     $260 = $303;
     $261 = $304;
     ___cxa_guard_abort((4048|0));
     $661 = $260;
     $662 = $261;
     ___resumeException($661|0);
     // unreachable;
    } else {
     (___cxa_atexit((521|0),(4032|0),(___dso_handle|0))|0);
     ___cxa_guard_release((4048|0));
     break;
    }
   }
  }
 } while(0);
 $292 = $259;
 $255 = $292;
 $293 = $255;
 $294 = (($293) + 4|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = HEAP32[$293>>2]|0;
 $297 = $295;
 $298 = $296;
 $299 = (($297) - ($298))|0;
 $300 = (($299|0) / 4)&-1;
 $301 = ($300|0)!=(4);
 if ($301) {
  $194 = 4032;
  $302 = $194;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE5clearEv($302);
  STACKTOP = sp;return;
 }
 $305 = $259;
 $192 = $305;
 $193 = 0;
 $306 = $192;
 $307 = $193;
 $308 = HEAP32[$306>>2]|0;
 $309 = (($308) + ($307<<2)|0);
 $310 = HEAP32[$309>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($262,$310);
 $P0 = $262;
 $311 = $259;
 $190 = $311;
 $191 = 1;
 $312 = $190;
 $313 = $191;
 $314 = HEAP32[$312>>2]|0;
 $315 = (($314) + ($313<<2)|0);
 $316 = HEAP32[$315>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($263,$316);
 $P1 = $263;
 $317 = $259;
 $188 = $317;
 $189 = 2;
 $318 = $188;
 $319 = $189;
 $320 = HEAP32[$318>>2]|0;
 $321 = (($320) + ($319<<2)|0);
 $322 = HEAP32[$321>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($264,$322);
 $P2 = $264;
 $323 = $259;
 $148 = $323;
 $149 = 3;
 $324 = $148;
 $325 = $149;
 $326 = HEAP32[$324>>2]|0;
 $327 = (($326) + ($325<<2)|0);
 $328 = HEAP32[$327>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($265,$328);
 $P3 = $265;
 $329 = $P0;
 $330 = $P1;
 $331 = $P2;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N00,$329,$330,$331);
 $332 = $P0;
 $333 = $P2;
 $334 = $P3;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N01,$332,$333,$334);
 $335 = $P1;
 $336 = $P2;
 $337 = $P3;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N10,$335,$336,$337);
 $338 = $P1;
 $339 = $P3;
 $340 = $P0;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N11,$338,$339,$340);
 $341 = (+__ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($N00,$N01));
 $Angle0Rad = $341;
 $342 = (+__ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($N10,$N11));
 $Angle1Rad = $342;
 $343 = $P0;
 $344 = $P1;
 $345 = $P2;
 $346 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($343,$344,$345));
 HEAPF32[$266>>2] = $346;
 $347 = $P0;
 $348 = $P2;
 $349 = $P3;
 $350 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($347,$348,$349));
 HEAPF32[$267>>2] = $350;
 $120 = $266;
 $121 = $267;
 $351 = $120;
 $352 = $121;
 ;HEAP8[$119+0>>0]=HEAP8[$122+0>>0]|0;
 $117 = $351;
 $118 = $352;
 $353 = $118;
 $354 = $117;
 $114 = $119;
 $115 = $353;
 $116 = $354;
 $355 = $115;
 $356 = +HEAPF32[$355>>2];
 $357 = $116;
 $358 = +HEAPF32[$357>>2];
 $359 = $356 < $358;
 if ($359) {
  $360 = $118;
  $363 = $360;
 } else {
  $361 = $117;
  $363 = $361;
 }
 $362 = +HEAPF32[$363>>2];
 $364 = $P1;
 $365 = $P2;
 $366 = $P3;
 $367 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($364,$365,$366));
 HEAPF32[$268>>2] = $367;
 $368 = $P1;
 $369 = $P3;
 $370 = $P0;
 $371 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($368,$369,$370));
 HEAPF32[$269>>2] = $371;
 $31 = $268;
 $32 = $269;
 $372 = $31;
 $373 = $32;
 ;HEAP8[$30+0>>0]=HEAP8[$33+0>>0]|0;
 $28 = $372;
 $29 = $373;
 $374 = $29;
 $375 = $28;
 $25 = $30;
 $26 = $374;
 $27 = $375;
 $376 = $26;
 $377 = +HEAPF32[$376>>2];
 $378 = $27;
 $379 = +HEAPF32[$378>>2];
 $380 = $377 < $379;
 if ($380) {
  $381 = $29;
  $384 = $381;
 } else {
  $382 = $28;
  $384 = $382;
 }
 $383 = +HEAPF32[$384>>2];
 $385 = $362 < $383;
 $386 = $385&1;
 $qualityImprove = $386;
 $387 = $Angle1Rad;
 $388 = $387;
 $389 = $388 > 1.5707963267948966;
 if ($389) {
  $390 = $Angle0Rad;
  $391 = $390;
  $392 = $391 < 1.5707963267948966;
  $394 = $392;
 } else {
  $394 = 0;
 }
 $393 = $394&1;
 $swapCauseFlip = $393;
 $395 = $qualityImprove;
 $396 = $395&1;
 if ($396) {
  $397 = $swapCauseFlip;
  $398 = $397&1;
  if (!($398)) {
   $399 = $259;
   $24 = $399;
   $400 = $24;
   $401 = HEAP32[$400>>2]|0;
   $22 = $400;
   $23 = $401;
   $402 = $23;
   $20 = $270;
   $21 = $402;
   $403 = $20;
   $404 = $21;
   $18 = $403;
   $19 = $404;
   $405 = $18;
   $406 = $19;
   HEAP32[$405>>2] = $406;
   $407 = $259;
   $17 = $407;
   $408 = $17;
   $409 = HEAP32[$408>>2]|0;
   $15 = $408;
   $16 = $409;
   $410 = $16;
   $13 = $272;
   $14 = $410;
   $411 = $13;
   $412 = $14;
   $11 = $411;
   $12 = $412;
   $413 = $11;
   $414 = $12;
   HEAP32[$413>>2] = $414;
   $2 = $272;
   $3 = 1;
   $415 = $2;
   ;HEAP32[$271+0>>2]=HEAP32[$415+0>>2]|0;
   $416 = $3;
   $0 = $271;
   $1 = $416;
   $417 = $0;
   $418 = $1;
   $419 = HEAP32[$417>>2]|0;
   $420 = (($419) + ($418<<2)|0);
   HEAP32[$417>>2] = $420;
   $421 = $259;
   $10 = $421;
   $422 = $10;
   $423 = (($422) + 4|0);
   $424 = HEAP32[$423>>2]|0;
   $8 = $422;
   $9 = $424;
   $425 = $9;
   $6 = $273;
   $7 = $425;
   $426 = $6;
   $427 = $7;
   $4 = $426;
   $5 = $427;
   $428 = $4;
   $429 = $5;
   HEAP32[$428>>2] = $429;
   ;HEAP8[$93+0>>0]=HEAP8[$270+0>>0]|0;HEAP8[$93+1>>0]=HEAP8[$270+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$270+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$270+3>>0]|0;
   ;HEAP8[$92+0>>0]=HEAP8[$271+0>>0]|0;HEAP8[$92+1>>0]=HEAP8[$271+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$271+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$271+3>>0]|0;
   ;HEAP8[$91+0>>0]=HEAP8[$273+0>>0]|0;HEAP8[$91+1>>0]=HEAP8[$273+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$273+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$273+3>>0]|0;
   $85 = $93;
   $86 = $92;
   $430 = $85;
   $84 = $430;
   $431 = $84;
   $432 = HEAP32[$431>>2]|0;
   $433 = $86;
   $83 = $433;
   $434 = $83;
   $435 = HEAP32[$434>>2]|0;
   $436 = ($432|0)==($435|0);
   do {
    if ($436) {
     ;HEAP32[$274+0>>2]=HEAP32[$91+0>>2]|0;
    } else {
     $36 = $92;
     $37 = $91;
     $437 = $36;
     $35 = $437;
     $438 = $35;
     $439 = HEAP32[$438>>2]|0;
     $440 = $37;
     $34 = $440;
     $441 = $34;
     $442 = HEAP32[$441>>2]|0;
     $443 = ($439|0)==($442|0);
     if ($443) {
      ;HEAP32[$274+0>>2]=HEAP32[$93+0>>2]|0;
      break;
     }
     ;HEAP32[$87+0>>2]=HEAP32[$93+0>>2]|0;
     ;HEAP32[$88+0>>2]=HEAP32[$92+0>>2]|0;
     ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;
     ;HEAP8[$82+0>>0]=HEAP8[$87+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$87+3>>0]|0;
     ;HEAP8[$81+0>>0]=HEAP8[$88+0>>0]|0;HEAP8[$81+1>>0]=HEAP8[$88+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$88+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$88+3>>0]|0;
     ;HEAP8[$80+0>>0]=HEAP8[$89+0>>0]|0;HEAP8[$80+1>>0]=HEAP8[$89+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$89+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$89+3>>0]|0;
     ;HEAP8[$79+0>>0]=HEAP8[$90+0>>0]|0;
     ;HEAP32[$69+0>>2]=HEAP32[$82+0>>2]|0;
     ;HEAP8[$67+0>>0]=HEAP8[$69+0>>0]|0;HEAP8[$67+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$69+3>>0]|0;
     $65 = 1;
     $66 = 0;
     $444 = $65;
     $62 = $67;
     $63 = $444;
     $445 = $62;
     $446 = $63;
     ;HEAP8[$61+0>>0]=HEAP8[$64+0>>0]|0;
     $59 = $445;
     $60 = $446;
     $447 = $59;
     $448 = $60;
     $57 = $447;
     $58 = $448;
     $449 = $57;
     $450 = $58;
     $451 = HEAP32[$449>>2]|0;
     $452 = (($451) + ($450<<2)|0);
     HEAP32[$449>>2] = $452;
     ;HEAP32[$68+0>>2]=HEAP32[$67+0>>2]|0;
     $55 = $68;
     $56 = $81;
     $453 = $55;
     $54 = $453;
     $454 = $54;
     $455 = HEAP32[$454>>2]|0;
     $456 = $56;
     $53 = $456;
     $457 = $53;
     $458 = HEAP32[$457>>2]|0;
     $459 = ($455|0)==($458|0);
     do {
      if ($459) {
       ;HEAP32[$70+0>>2]=HEAP32[$82+0>>2]|0;
       ;HEAP32[$71+0>>2]=HEAP32[$80+0>>2]|0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$70+0>>2]|0;
       ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$71+0>>2]|0;
       __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($274,$$byval_copy,$$byval_copy1);
      } else {
       ;HEAP32[$73+0>>2]=HEAP32[$81+0>>2]|0;
       ;HEAP8[$52+0>>0]=HEAP8[$73+0>>0]|0;HEAP8[$52+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$73+3>>0]|0;
       $50 = 1;
       $51 = 0;
       $460 = $50;
       $47 = $52;
       $48 = $460;
       $461 = $47;
       $462 = $48;
       ;HEAP8[$46+0>>0]=HEAP8[$49+0>>0]|0;
       $44 = $461;
       $45 = $462;
       $463 = $44;
       $464 = $45;
       $42 = $463;
       $43 = $464;
       $465 = $42;
       $466 = $43;
       $467 = HEAP32[$465>>2]|0;
       $468 = (($467) + ($466<<2)|0);
       HEAP32[$465>>2] = $468;
       ;HEAP32[$72+0>>2]=HEAP32[$52+0>>2]|0;
       $40 = $72;
       $41 = $80;
       $469 = $40;
       $39 = $469;
       $470 = $39;
       $471 = HEAP32[$470>>2]|0;
       $472 = $41;
       $38 = $472;
       $473 = $38;
       $474 = HEAP32[$473>>2]|0;
       $475 = ($471|0)==($474|0);
       if ($475) {
        ;HEAP32[$74+0>>2]=HEAP32[$82+0>>2]|0;
        ;HEAP32[$75+0>>2]=HEAP32[$80+0>>2]|0;
        ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$74+0>>2]|0;
        ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$75+0>>2]|0;
        __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($274,$$byval_copy2,$$byval_copy3);
        break;
       } else {
        ;HEAP32[$76+0>>2]=HEAP32[$82+0>>2]|0;
        ;HEAP32[$77+0>>2]=HEAP32[$81+0>>2]|0;
        ;HEAP32[$78+0>>2]=HEAP32[$80+0>>2]|0;
        ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$76+0>>2]|0;
        ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$77+0>>2]|0;
        ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$78+0>>2]|0;
        __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($274,$$byval_copy4,$$byval_copy5,$$byval_copy6);
        break;
       }
      }
     } while(0);
    }
   } while(0);
  }
 }
 $97 = $res;
 $476 = $97;
 $96 = $476;
 $477 = $96;
 $95 = $477;
 $478 = $95;
 $94 = $478;
 $479 = (($477) + 4|0);
 HEAP8[$479>>0] = 0;
 $480 = $259;
 $98 = $480;
 $99 = 0;
 $481 = $98;
 $482 = $99;
 $483 = HEAP32[$481>>2]|0;
 $484 = (($483) + ($482<<2)|0);
 $485 = HEAP32[$484>>2]|0;
 $486 = $259;
 $100 = $486;
 $101 = 2;
 $487 = $100;
 $488 = $101;
 $489 = HEAP32[$487>>2]|0;
 $490 = (($489) + ($488<<2)|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = ($485>>>0)<($491>>>0);
 if ($492) {
  $493 = $259;
  $102 = $493;
  $103 = 0;
  $494 = $102;
  $495 = $103;
  $496 = HEAP32[$494>>2]|0;
  $497 = (($496) + ($495<<2)|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = $259;
  $104 = $499;
  $105 = 2;
  $500 = $104;
  $501 = $105;
  $502 = HEAP32[$500>>2]|0;
  $503 = (($502) + ($501<<2)|0);
  $504 = HEAP32[$503>>2]|0;
  HEAP32[$112>>2] = $498;
  HEAP32[$113>>2] = $504;
  $109 = $276;
  $110 = $112;
  $111 = $113;
  $505 = $109;
  $506 = $110;
  $507 = $111;
  $106 = $505;
  $107 = $506;
  $108 = $507;
  $508 = $106;
  $509 = $107;
  $510 = HEAP32[$509>>2]|0;
  HEAP32[$508>>2] = $510;
  $511 = (($508) + 4|0);
  $512 = $108;
  $513 = HEAP32[$512>>2]|0;
  HEAP32[$511>>2] = $513;
  $131 = 4032;
  $132 = $276;
  $514 = $131;
  $515 = $132;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($133,$514,$515);
  $129 = $275;
  $130 = $133;
  $516 = $129;
  $517 = $130;
  $126 = $516;
  $127 = $517;
  $518 = $126;
  $519 = $127;
  ;HEAP32[$128+0>>2]=HEAP32[$519+0>>2]|0;
  ;HEAP8[$125+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$125+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$128+3>>0]|0;
  $124 = $518;
  $520 = $124;
  ;HEAP8[$__p1$i$i$i$i7+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$__p1$i$i$i$i7+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$__p1$i$i$i$i7+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$__p1$i$i$i$i7+3>>0]=HEAP8[$125+3>>0]|0;
  $123 = $520;
  $521 = $123;
  $522 = HEAP32[$__p1$i$i$i$i7>>2]|0;
  HEAP32[$521>>2] = $522;
  $523 = (($518) + 4|0);
  $524 = $127;
  $525 = (($524) + 4|0);
  $526 = HEAP8[$525>>0]|0;
  $527 = $526&1;
  $528 = $527&1;
  HEAP8[$523>>0] = $528;
  $134 = $res;
  $135 = $275;
  $529 = $134;
  $530 = $135;
  ;HEAP32[$529+0>>2]=HEAP32[$530+0>>2]|0;
  $531 = $135;
  $532 = (($531) + 4|0);
  $533 = HEAP8[$532>>0]|0;
  $534 = $533&1;
  $535 = (($529) + 4|0);
  $536 = $534&1;
  HEAP8[$535>>0] = $536;
 } else {
  $537 = $259;
  $136 = $537;
  $137 = 2;
  $538 = $136;
  $539 = $137;
  $540 = HEAP32[$538>>2]|0;
  $541 = (($540) + ($539<<2)|0);
  $542 = HEAP32[$541>>2]|0;
  $543 = $259;
  $138 = $543;
  $139 = 0;
  $544 = $138;
  $545 = $139;
  $546 = HEAP32[$544>>2]|0;
  $547 = (($546) + ($545<<2)|0);
  $548 = HEAP32[$547>>2]|0;
  HEAP32[$146>>2] = $542;
  HEAP32[$147>>2] = $548;
  $143 = $278;
  $144 = $146;
  $145 = $147;
  $549 = $143;
  $550 = $144;
  $551 = $145;
  $140 = $549;
  $141 = $550;
  $142 = $551;
  $552 = $140;
  $553 = $141;
  $554 = HEAP32[$553>>2]|0;
  HEAP32[$552>>2] = $554;
  $555 = (($552) + 4|0);
  $556 = $142;
  $557 = HEAP32[$556>>2]|0;
  HEAP32[$555>>2] = $557;
  $158 = 4032;
  $159 = $278;
  $558 = $158;
  $559 = $159;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($160,$558,$559);
  $156 = $277;
  $157 = $160;
  $560 = $156;
  $561 = $157;
  $153 = $560;
  $154 = $561;
  $562 = $153;
  $563 = $154;
  ;HEAP32[$155+0>>2]=HEAP32[$563+0>>2]|0;
  ;HEAP8[$152+0>>0]=HEAP8[$155+0>>0]|0;HEAP8[$152+1>>0]=HEAP8[$155+1>>0]|0;HEAP8[$152+2>>0]=HEAP8[$155+2>>0]|0;HEAP8[$152+3>>0]=HEAP8[$155+3>>0]|0;
  $151 = $562;
  $564 = $151;
  ;HEAP8[$__p1$i$i$i$i+0>>0]=HEAP8[$152+0>>0]|0;HEAP8[$__p1$i$i$i$i+1>>0]=HEAP8[$152+1>>0]|0;HEAP8[$__p1$i$i$i$i+2>>0]=HEAP8[$152+2>>0]|0;HEAP8[$__p1$i$i$i$i+3>>0]=HEAP8[$152+3>>0]|0;
  $150 = $564;
  $565 = $150;
  $566 = HEAP32[$__p1$i$i$i$i>>2]|0;
  HEAP32[$565>>2] = $566;
  $567 = (($562) + 4|0);
  $568 = $154;
  $569 = (($568) + 4|0);
  $570 = HEAP8[$569>>0]|0;
  $571 = $570&1;
  $572 = $571&1;
  HEAP8[$567>>0] = $572;
  $161 = $res;
  $162 = $277;
  $573 = $161;
  $574 = $162;
  ;HEAP32[$573+0>>2]=HEAP32[$574+0>>2]|0;
  $575 = $162;
  $576 = (($575) + 4|0);
  $577 = HEAP8[$576>>0]|0;
  $578 = $577&1;
  $579 = (($573) + 4|0);
  $580 = $578&1;
  HEAP8[$579>>0] = $580;
 }
 $581 = (($res) + 4|0);
 $582 = HEAP8[$581>>0]|0;
 $583 = $582&1;
 if ($583) {
  STACKTOP = sp;return;
 }
 $584 = $259;
 $169 = $584;
 $585 = $169;
 $586 = HEAP32[$585>>2]|0;
 $167 = $585;
 $168 = $586;
 $587 = $168;
 $165 = $279;
 $166 = $587;
 $588 = $165;
 $589 = $166;
 $163 = $588;
 $164 = $589;
 $590 = $163;
 $591 = $164;
 HEAP32[$590>>2] = $591;
 $592 = $259;
 $176 = $592;
 $593 = $176;
 $594 = HEAP32[$593>>2]|0;
 $174 = $593;
 $175 = $594;
 $595 = $175;
 $172 = $281;
 $173 = $595;
 $596 = $172;
 $597 = $173;
 $170 = $596;
 $171 = $597;
 $598 = $170;
 $599 = $171;
 HEAP32[$598>>2] = $599;
 $179 = $281;
 $180 = 1;
 $600 = $179;
 ;HEAP32[$280+0>>2]=HEAP32[$600+0>>2]|0;
 $601 = $180;
 $177 = $280;
 $178 = $601;
 $602 = $177;
 $603 = $178;
 $604 = HEAP32[$602>>2]|0;
 $605 = (($604) + ($603<<2)|0);
 HEAP32[$602>>2] = $605;
 $606 = $259;
 $187 = $606;
 $607 = $187;
 $608 = (($607) + 4|0);
 $609 = HEAP32[$608>>2]|0;
 $185 = $607;
 $186 = $609;
 $610 = $186;
 $183 = $282;
 $184 = $610;
 $611 = $183;
 $612 = $184;
 $181 = $611;
 $182 = $612;
 $613 = $181;
 $614 = $182;
 HEAP32[$613>>2] = $614;
 ;HEAP8[$254+0>>0]=HEAP8[$279+0>>0]|0;HEAP8[$254+1>>0]=HEAP8[$279+1>>0]|0;HEAP8[$254+2>>0]=HEAP8[$279+2>>0]|0;HEAP8[$254+3>>0]=HEAP8[$279+3>>0]|0;
 ;HEAP8[$253+0>>0]=HEAP8[$280+0>>0]|0;HEAP8[$253+1>>0]=HEAP8[$280+1>>0]|0;HEAP8[$253+2>>0]=HEAP8[$280+2>>0]|0;HEAP8[$253+3>>0]=HEAP8[$280+3>>0]|0;
 ;HEAP8[$252+0>>0]=HEAP8[$282+0>>0]|0;HEAP8[$252+1>>0]=HEAP8[$282+1>>0]|0;HEAP8[$252+2>>0]=HEAP8[$282+2>>0]|0;HEAP8[$252+3>>0]=HEAP8[$282+3>>0]|0;
 $246 = $254;
 $247 = $253;
 $615 = $246;
 $245 = $615;
 $616 = $245;
 $617 = HEAP32[$616>>2]|0;
 $618 = $247;
 $244 = $618;
 $619 = $244;
 $620 = HEAP32[$619>>2]|0;
 $621 = ($617|0)==($620|0);
 do {
  if ($621) {
   ;HEAP32[$283+0>>2]=HEAP32[$252+0>>2]|0;
  } else {
   $197 = $253;
   $198 = $252;
   $622 = $197;
   $196 = $622;
   $623 = $196;
   $624 = HEAP32[$623>>2]|0;
   $625 = $198;
   $195 = $625;
   $626 = $195;
   $627 = HEAP32[$626>>2]|0;
   $628 = ($624|0)==($627|0);
   if ($628) {
    ;HEAP32[$283+0>>2]=HEAP32[$254+0>>2]|0;
    break;
   }
   ;HEAP32[$248+0>>2]=HEAP32[$254+0>>2]|0;
   ;HEAP32[$249+0>>2]=HEAP32[$253+0>>2]|0;
   ;HEAP32[$250+0>>2]=HEAP32[$252+0>>2]|0;
   ;HEAP8[$243+0>>0]=HEAP8[$248+0>>0]|0;HEAP8[$243+1>>0]=HEAP8[$248+1>>0]|0;HEAP8[$243+2>>0]=HEAP8[$248+2>>0]|0;HEAP8[$243+3>>0]=HEAP8[$248+3>>0]|0;
   ;HEAP8[$242+0>>0]=HEAP8[$249+0>>0]|0;HEAP8[$242+1>>0]=HEAP8[$249+1>>0]|0;HEAP8[$242+2>>0]=HEAP8[$249+2>>0]|0;HEAP8[$242+3>>0]=HEAP8[$249+3>>0]|0;
   ;HEAP8[$241+0>>0]=HEAP8[$250+0>>0]|0;HEAP8[$241+1>>0]=HEAP8[$250+1>>0]|0;HEAP8[$241+2>>0]=HEAP8[$250+2>>0]|0;HEAP8[$241+3>>0]=HEAP8[$250+3>>0]|0;
   ;HEAP8[$240+0>>0]=HEAP8[$251+0>>0]|0;
   ;HEAP32[$230+0>>2]=HEAP32[$243+0>>2]|0;
   ;HEAP8[$228+0>>0]=HEAP8[$230+0>>0]|0;HEAP8[$228+1>>0]=HEAP8[$230+1>>0]|0;HEAP8[$228+2>>0]=HEAP8[$230+2>>0]|0;HEAP8[$228+3>>0]=HEAP8[$230+3>>0]|0;
   $226 = 1;
   $227 = 0;
   $629 = $226;
   $223 = $228;
   $224 = $629;
   $630 = $223;
   $631 = $224;
   ;HEAP8[$222+0>>0]=HEAP8[$225+0>>0]|0;
   $220 = $630;
   $221 = $631;
   $632 = $220;
   $633 = $221;
   $218 = $632;
   $219 = $633;
   $634 = $218;
   $635 = $219;
   $636 = HEAP32[$634>>2]|0;
   $637 = (($636) + ($635<<2)|0);
   HEAP32[$634>>2] = $637;
   ;HEAP32[$229+0>>2]=HEAP32[$228+0>>2]|0;
   $216 = $229;
   $217 = $242;
   $638 = $216;
   $215 = $638;
   $639 = $215;
   $640 = HEAP32[$639>>2]|0;
   $641 = $217;
   $214 = $641;
   $642 = $214;
   $643 = HEAP32[$642>>2]|0;
   $644 = ($640|0)==($643|0);
   do {
    if ($644) {
     ;HEAP32[$231+0>>2]=HEAP32[$243+0>>2]|0;
     ;HEAP32[$232+0>>2]=HEAP32[$241+0>>2]|0;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$231+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$232+0>>2]|0;
     __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($283,$$byval_copy7,$$byval_copy8);
    } else {
     ;HEAP32[$234+0>>2]=HEAP32[$242+0>>2]|0;
     ;HEAP8[$213+0>>0]=HEAP8[$234+0>>0]|0;HEAP8[$213+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$213+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$213+3>>0]=HEAP8[$234+3>>0]|0;
     $211 = 1;
     $212 = 0;
     $645 = $211;
     $208 = $213;
     $209 = $645;
     $646 = $208;
     $647 = $209;
     ;HEAP8[$207+0>>0]=HEAP8[$210+0>>0]|0;
     $205 = $646;
     $206 = $647;
     $648 = $205;
     $649 = $206;
     $203 = $648;
     $204 = $649;
     $650 = $203;
     $651 = $204;
     $652 = HEAP32[$650>>2]|0;
     $653 = (($652) + ($651<<2)|0);
     HEAP32[$650>>2] = $653;
     ;HEAP32[$233+0>>2]=HEAP32[$213+0>>2]|0;
     $201 = $233;
     $202 = $241;
     $654 = $201;
     $200 = $654;
     $655 = $200;
     $656 = HEAP32[$655>>2]|0;
     $657 = $202;
     $199 = $657;
     $658 = $199;
     $659 = HEAP32[$658>>2]|0;
     $660 = ($656|0)==($659|0);
     if ($660) {
      ;HEAP32[$235+0>>2]=HEAP32[$243+0>>2]|0;
      ;HEAP32[$236+0>>2]=HEAP32[$241+0>>2]|0;
      ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$235+0>>2]|0;
      ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$236+0>>2]|0;
      __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($283,$$byval_copy9,$$byval_copy10);
      break;
     } else {
      ;HEAP32[$237+0>>2]=HEAP32[$243+0>>2]|0;
      ;HEAP32[$238+0>>2]=HEAP32[$242+0>>2]|0;
      ;HEAP32[$239+0>>2]=HEAP32[$241+0>>2]|0;
      ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$237+0>>2]|0;
      ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$238+0>>2]|0;
      ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$239+0>>2]|0;
      __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($283,$$byval_copy11,$$byval_copy12,$$byval_copy13);
      break;
     }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC1Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2Ej($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC1Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 262144 << $3;
 $5 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($outlines,$indices) {
 $outlines = $outlines|0;
 $indices = $indices|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i4 = 0, $__old_size$i = 0, $i = 0, $points = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i4 = sp + 260|0;
 $__annotator$i1 = sp + 261|0;
 $__annotator$i = sp + 262|0;
 $43 = sp;
 $46 = sp + 263|0;
 $60 = sp + 152|0;
 $61 = sp + 96|0;
 $62 = sp + 44|0;
 $58 = $outlines;
 $59 = $indices;
 $63 = $59;
 $55 = $63;
 $64 = $55;
 $54 = $64;
 $65 = $54;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$65>>2]|0;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (($71|0) / 4)&-1;
 $__old_size$i = $72;
 $52 = $64;
 $73 = $52;
 $74 = HEAP32[$73>>2]|0;
 $50 = $73;
 $51 = $74;
 $75 = $50;
 while(1) {
  $76 = $51;
  $77 = (($75) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)!=($78|0);
  if (!($79)) {
   break;
  }
  $49 = $75;
  $80 = $49;
  $81 = (($80) + 8|0);
  $48 = $81;
  $82 = $48;
  $47 = $82;
  $83 = $47;
  $84 = (($75) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + -4|0);
  HEAP32[$84>>2] = $86;
  $40 = $86;
  $87 = $40;
  $44 = $83;
  $45 = $87;
  $88 = $44;
  $89 = $45;
  ;HEAP8[$43+0>>0]=HEAP8[$46+0>>0]|0;
  $41 = $88;
  $42 = $89;
 }
 $90 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(522,($64|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $93 = ___cxa_find_matching_catch()|0;
  $94 = tempRet0;
  $56 = $93;
  $57 = $94;
  $95 = $56;
  ___cxa_call_unexpected(($95|0));
  // unreachable;
 }
 $53 = $64;
 $96 = $58;
 $39 = $96;
 $97 = $39;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($97) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($98|0)==($100|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $58;
 $37 = $102;
 $38 = 0;
 $103 = $37;
 $104 = $38;
 $105 = HEAP32[$103>>2]|0;
 $106 = (($105) + (($104*12)|0)|0);
 $points = $106;
 $i = 0;
 while(1) {
  $107 = $i;
  $108 = $points;
  $24 = $108;
  $109 = $24;
  $110 = (($109) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = HEAP32[$109>>2]|0;
  $113 = $111;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = (($115|0) / 12)&-1;
  $117 = (($116) - 2)|0;
  $118 = ($107>>>0)<($117>>>0);
  if (!($118)) {
   break;
  }
  $119 = $59;
  HEAP32[$60>>2] = 0;
  $22 = $119;
  $23 = $60;
  $120 = $22;
  $121 = (($120) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $21 = $120;
  $123 = $21;
  $124 = (($123) + 8|0);
  $20 = $124;
  $125 = $20;
  $19 = $125;
  $126 = $19;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($122|0)!=($127|0);
  if ($128) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC1ERKS3_j($__annotator$i1,$120,1);
   $18 = $120;
   $129 = $18;
   $130 = (($129) + 8|0);
   $17 = $130;
   $131 = $17;
   $16 = $131;
   $132 = $16;
   $133 = (($120) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $15 = $134;
   $135 = $15;
   $136 = $23;
   $12 = $132;
   $13 = $135;
   $14 = $136;
   $137 = $13;
   $138 = ($137|0)==(0|0);
   if (!($138)) {
    $139 = $14;
    $140 = HEAP32[$139>>2]|0;
    HEAP32[$137>>2] = $140;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
   $141 = (($120) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 4|0);
   HEAP32[$141>>2] = $143;
  } else {
   $144 = $23;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($120,$144);
  }
  $145 = $59;
  $146 = $i;
  $147 = (($146) + 1)|0;
  HEAP32[$61>>2] = $147;
  $10 = $145;
  $11 = $61;
  $148 = $10;
  $149 = (($148) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $9 = $148;
  $151 = $9;
  $152 = (($151) + 8|0);
  $8 = $152;
  $153 = $8;
  $7 = $153;
  $154 = $7;
  $155 = HEAP32[$154>>2]|0;
  $156 = ($150|0)!=($155|0);
  if ($156) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC1ERKS3_j($__annotator$i4,$148,1);
   $6 = $148;
   $157 = $6;
   $158 = (($157) + 8|0);
   $5 = $158;
   $159 = $5;
   $4 = $159;
   $160 = $4;
   $161 = (($148) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $3 = $162;
   $163 = $3;
   $164 = $11;
   $0 = $160;
   $1 = $163;
   $2 = $164;
   $165 = $1;
   $166 = ($165|0)==(0|0);
   if (!($166)) {
    $167 = $2;
    $168 = HEAP32[$167>>2]|0;
    HEAP32[$165>>2] = $168;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
   $169 = (($148) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + 4|0);
   HEAP32[$169>>2] = $171;
  } else {
   $172 = $11;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($148,$172);
  }
  $173 = $59;
  $174 = $i;
  $175 = (($174) + 2)|0;
  HEAP32[$62>>2] = $175;
  $35 = $173;
  $36 = $62;
  $176 = $35;
  $177 = (($176) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  $34 = $176;
  $179 = $34;
  $180 = (($179) + 8|0);
  $33 = $180;
  $181 = $33;
  $32 = $181;
  $182 = $32;
  $183 = HEAP32[$182>>2]|0;
  $184 = ($178|0)!=($183|0);
  if ($184) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC1ERKS3_j($__annotator$i,$176,1);
   $31 = $176;
   $185 = $31;
   $186 = (($185) + 8|0);
   $30 = $186;
   $187 = $30;
   $29 = $187;
   $188 = $29;
   $189 = (($176) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $28 = $190;
   $191 = $28;
   $192 = $36;
   $25 = $188;
   $26 = $191;
   $27 = $192;
   $193 = $26;
   $194 = ($193|0)==(0|0);
   if (!($194)) {
    $195 = $27;
    $196 = HEAP32[$195>>2]|0;
    HEAP32[$193>>2] = $196;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $197 = (($176) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + 4|0);
   HEAP32[$197>>2] = $199;
  } else {
   $200 = $36;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($176,$200);
  }
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 262144 << $3;
 $5 = $4 ^ -1;
 $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & $5;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri15HasPerFaceColorI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri25FaceVectorHasPerFaceColorI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = HEAP8[4016>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((4016|0))|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    __THREW__ = 0;
    invoke_vii(506,(4008|0),-1);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     ___cxa_guard_release((4016|0));
     break;
    }
    $10 = ___cxa_find_matching_catch()|0;
    $11 = tempRet0;
    $2 = $10;
    $3 = $11;
    ___cxa_guard_abort((4016|0));
    $12 = $2;
    $13 = $3;
    ___resumeException($12|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((1632|0),(1640|0),75,(4024|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg6Color4IhEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Color4IhEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 144|0;
 $34 = sp + 16|0;
 $36 = sp + 20|0;
 $35 = $this;
 $37 = $35;
 $38 = HEAP32[$37>>2]|0;
 $32 = $34;
 $33 = -1;
 $39 = $32;
 $40 = $33;
 $30 = $39;
 $31 = $40;
 $41 = $30;
 HEAP32[$41>>2] = 0;
 $42 = HEAP32[$34>>2]|0;
 HEAP32[$36>>2] = $42;
 $22 = $36;
 $43 = ($38|0)!=(0|0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $14 = $37;
 $44 = $14;
 $45 = HEAP32[$44>>2]|0;
 $10 = $44;
 $11 = $45;
 $46 = $10;
 while(1) {
  $47 = $11;
  $48 = (($46) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $9 = $46;
  $51 = $9;
  $52 = (($51) + 8|0);
  $8 = $52;
  $53 = $8;
  $7 = $53;
  $54 = $7;
  $55 = (($46) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -12|0);
  HEAP32[$55>>2] = $57;
  $0 = $57;
  $58 = $0;
  $4 = $54;
  $5 = $58;
  $59 = $4;
  $60 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $59;
  $2 = $60;
  $61 = $2;
  __THREW__ = 0;
  invoke_vi(397,($61|0));
  $62 = __THREW__; __THREW__ = 0;
  $63 = $62&1;
  if ($63) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  $12 = $64;
  $13 = $65;
  $66 = $12;
  ___cxa_call_unexpected(($66|0));
  // unreachable;
 }
 $17 = $37;
 $67 = $17;
 $68 = (($67) + 8|0);
 $16 = $68;
 $69 = $16;
 $15 = $69;
 $70 = $15;
 $71 = HEAP32[$37>>2]|0;
 $21 = $37;
 $72 = $21;
 $20 = $72;
 $73 = $20;
 $74 = (($73) + 8|0);
 $19 = $74;
 $75 = $19;
 $18 = $75;
 $76 = $18;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $27 = $70;
 $28 = $71;
 $29 = $82;
 $83 = $27;
 $84 = $28;
 $85 = $29;
 $24 = $83;
 $25 = $84;
 $26 = $85;
 $86 = $25;
 $23 = $86;
 $87 = $23;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point4IhEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri25FaceVectorHasPerFaceColorI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE8HasColorEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE8HasColorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -12|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 12)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 144|0;
 $34 = sp + 16|0;
 $36 = sp + 20|0;
 $35 = $this;
 $37 = $35;
 $38 = HEAP32[$37>>2]|0;
 $32 = $34;
 $33 = -1;
 $39 = $32;
 $40 = $33;
 $30 = $39;
 $31 = $40;
 $41 = $30;
 HEAP32[$41>>2] = 0;
 $42 = HEAP32[$34>>2]|0;
 HEAP32[$36>>2] = $42;
 $22 = $36;
 $43 = ($38|0)!=(0|0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $14 = $37;
 $44 = $14;
 $45 = HEAP32[$44>>2]|0;
 $10 = $44;
 $11 = $45;
 $46 = $10;
 while(1) {
  $47 = $11;
  $48 = (($46) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $9 = $46;
  $51 = $9;
  $52 = (($51) + 8|0);
  $8 = $52;
  $53 = $8;
  $7 = $53;
  $54 = $7;
  $55 = (($46) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -12|0);
  HEAP32[$55>>2] = $57;
  $0 = $57;
  $58 = $0;
  $4 = $54;
  $5 = $58;
  $59 = $4;
  $60 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $59;
  $2 = $60;
  $61 = $2;
  __THREW__ = 0;
  invoke_vi(503,($61|0));
  $62 = __THREW__; __THREW__ = 0;
  $63 = $62&1;
  if ($63) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  $12 = $64;
  $13 = $65;
  $66 = $12;
  ___cxa_call_unexpected(($66|0));
  // unreachable;
 }
 $17 = $37;
 $67 = $17;
 $68 = (($67) + 8|0);
 $16 = $68;
 $69 = $16;
 $15 = $69;
 $70 = $15;
 $71 = HEAP32[$37>>2]|0;
 $21 = $37;
 $72 = $21;
 $20 = $72;
 $73 = $20;
 $74 = (($73) + 8|0);
 $19 = $74;
 $75 = $19;
 $18 = $75;
 $76 = $18;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $27 = $70;
 $28 = $71;
 $29 = $82;
 $83 = $27;
 $84 = $28;
 $85 = $29;
 $24 = $83;
 $25 = $84;
 $26 = $85;
 $86 = $25;
 $23 = $86;
 $87 = $23;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC1ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EjjS3_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$99>>2] = $102;
 }
 $103 = (($__v) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 HEAP32[$103>>2] = $105;
 __THREW__ = 0;
 invoke_vii(523,($32|0),($__v|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if (!($107)) {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev($__v);
  STACKTOP = sp;return;
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(524,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 }
 $112 = $30;
 $113 = $31;
 ___resumeException($112|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 64|0;
 $__t$i1 = sp + 40|0;
 $__t$i = sp + 88|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = $75<<2;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + ($85<<2)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + ($90<<2)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC1ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 12)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 12)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 12)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC1EjjS9_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 12;
 } else {
  $101 = $2;
  __THREW__ = 0;
  invoke_vii(498,($99|0),($101|0));
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $104 = (($__v) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 12|0);
  HEAP32[$104>>2] = $106;
  __THREW__ = 0;
  invoke_vii(525,($32|0),($__v|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch()|0;
 $110 = tempRet0;
 $30 = $109;
 $31 = $110;
 __THREW__ = 0;
 invoke_vi(526,($__v|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 }
 $113 = $30;
 $114 = $31;
 ___resumeException($113|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC1EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 92|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -12|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -12|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC1ERKS6_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -12|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 12)&-1;
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $24 = $38;
 $25 = $39;
 $40 = $24;
 while(1) {
  $41 = $25;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $23 = $40;
  $45 = $23;
  $46 = (($45) + 12|0);
  $22 = $46;
  $47 = $22;
  $21 = $47;
  $48 = $21;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $14 = $53;
  $54 = $14;
  $18 = $50;
  $19 = $54;
  $55 = $18;
  $56 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $55;
  $16 = $56;
  $57 = $16;
  __THREW__ = 0;
  invoke_vi(503,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $26 = $60;
  $27 = $61;
  $62 = $26;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $63 = HEAP32[$34>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $65 = $13;
 $66 = (($65) + 12|0);
 $12 = $66;
 $67 = $12;
 $11 = $67;
 $68 = $11;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$34>>2]|0;
 $10 = $34;
 $72 = $10;
 $9 = $72;
 $73 = $9;
 $74 = (($73) + 12|0);
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $4 = $70;
 $5 = $71;
 $6 = $82;
 $83 = $4;
 $84 = $5;
 $85 = $6;
 $1 = $83;
 $2 = $84;
 $3 = $85;
 $86 = $2;
 $0 = $86;
 $87 = $0;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = ($75*12)|0;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + (($85*12)|0)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + (($90*12)|0)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC1ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__x;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n = 0, $__t21$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 184|0;
 $11 = sp + 52|0;
 $17 = sp + 68|0;
 $23 = sp + 196|0;
 $24 = sp + 8|0;
 $27 = sp + 116|0;
 $28 = sp + 208|0;
 $__t21$i$i = sp + 16|0;
 $31 = sp + 24|0;
 $35 = sp + 152|0;
 $36 = sp + 156|0;
 $37 = sp + 160|0;
 $38 = sp + 209|0;
 $40 = sp;
 $42 = sp + 210|0;
 $48 = sp + 211|0;
 $46 = $this;
 $47 = $__x;
 $51 = $46;
 $52 = $47;
 $45 = $52;
 $53 = $45;
 $54 = (($53) + 8|0);
 $44 = $54;
 $55 = $44;
 $43 = $55;
 $56 = $43;
 $41 = $56;
 $57 = $41;
 ;HEAP8[$40+0>>0]=HEAP8[$42+0>>0]|0;
 $39 = $57;
 $33 = $51;
 $34 = $48;
 $58 = $33;
 $32 = $58;
 $3 = $5;
 $4 = -1;
 $59 = $3;
 $60 = $4;
 $1 = $59;
 $2 = $60;
 $61 = $1;
 HEAP32[$61>>2] = 0;
 $62 = HEAP32[$5>>2]|0;
 HEAP32[$35>>2] = $62;
 $6 = $35;
 HEAP32[$58>>2] = 0;
 $63 = (($58) + 4|0);
 $9 = $11;
 $10 = -1;
 $64 = $9;
 $65 = $10;
 $7 = $64;
 $8 = $65;
 $66 = $7;
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$11>>2]|0;
 HEAP32[$36>>2] = $67;
 $12 = $36;
 HEAP32[$63>>2] = 0;
 $68 = (($58) + 8|0);
 $15 = $17;
 $16 = -1;
 $69 = $15;
 $70 = $16;
 $13 = $69;
 $14 = $70;
 $71 = $13;
 HEAP32[$71>>2] = 0;
 $72 = HEAP32[$17>>2]|0;
 HEAP32[$37>>2] = $72;
 $18 = $37;
 ;HEAP8[$31+0>>0]=HEAP8[$38+0>>0]|0;
 $29 = $68;
 $30 = 0;
 $73 = $29;
 $74 = $30;
 ;HEAP8[$__t21$i$i+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $73;
 HEAP32[$27>>2] = $74;
 $75 = $26;
 $25 = $27;
 $76 = $25;
 $77 = HEAP32[$76>>2]|0;
 $19 = $__t21$i$i;
 ;HEAP8[$24+0>>0]=HEAP8[$28+0>>0]|0;
 $22 = $75;
 HEAP32[$23>>2] = $77;
 $78 = $22;
 $21 = $24;
 $20 = $23;
 $79 = $20;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$78>>2] = $80;
 $81 = $47;
 $0 = $81;
 $82 = $0;
 $83 = (($82) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$82>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $__n = $89;
 $90 = $__n;
 $91 = ($90>>>0)>(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $__n;
 __THREW__ = 0;
 invoke_vii(527,($51|0),($92|0));
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 if (!($94)) {
  $95 = $47;
  $96 = HEAP32[$95>>2]|0;
  $97 = $47;
  $98 = (($97) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  __THREW__ = 0;
  invoke_viii(528,($51|0),($96|0),($99|0));
  $100 = __THREW__; __THREW__ = 0;
  $101 = $100&1;
  if (!($101)) {
   STACKTOP = sp;return;
  }
 }
 $102 = ___cxa_find_matching_catch()|0;
 $103 = tempRet0;
 $49 = $102;
 $50 = $103;
 __THREW__ = 0;
 invoke_vi(529,($51|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if ($105) {
  $108 = ___cxa_find_matching_catch(0|0)|0;
  $109 = tempRet0;
  ___clang_call_terminate($108);
  // unreachable;
 }
 $106 = $49;
 $107 = $50;
 ___resumeException($106|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = (($18) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*12)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = (($14) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*12)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = (($33) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = (($11) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC1ERKS6_j($__annotator,$10,1);
  $18 = $__a;
  $19 = (($10) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  $23 = $1;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $2;
   __ZN3vcg6Point3IfEC1ERKS1_($23,$25);
  }
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $26 = (($10) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  HEAP32[$26>>2] = $28;
  $29 = $8;
  $30 = (($29) + 12|0);
  $8 = $30;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC1ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -4|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 100|0;
 $30 = sp + 48|0;
 $31 = sp + 52|0;
 $32 = $this;
 $33 = $__n;
 $36 = $32;
 $28 = $36;
 $37 = $28;
 $27 = $37;
 $2 = $4;
 $3 = -1;
 $38 = $2;
 $39 = $3;
 $0 = $38;
 $1 = $39;
 $40 = $0;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $41;
 $5 = $29;
 HEAP32[$37>>2] = 0;
 $42 = (($37) + 4|0);
 $8 = $10;
 $9 = -1;
 $43 = $8;
 $44 = $9;
 $6 = $43;
 $7 = $44;
 $45 = $6;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $46;
 $11 = $30;
 HEAP32[$42>>2] = 0;
 $47 = (($37) + 8|0);
 $14 = $16;
 $15 = -1;
 $48 = $14;
 $49 = $15;
 $12 = $48;
 $13 = $49;
 $50 = $12;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $51;
 $17 = $31;
 $25 = $47;
 $26 = 0;
 $52 = $25;
 $53 = $26;
 $23 = $52;
 HEAP32[$24>>2] = $53;
 $54 = $23;
 $22 = $24;
 $55 = $22;
 $56 = HEAP32[$55>>2]|0;
 $20 = $54;
 HEAP32[$21>>2] = $56;
 $57 = $20;
 $19 = $57;
 $18 = $21;
 $58 = $18;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = $33;
 $61 = ($60>>>0)>(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $33;
 __THREW__ = 0;
 invoke_vii(530,($36|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if (!($64)) {
  $65 = $33;
  __THREW__ = 0;
  invoke_vii(531,($36|0),($65|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if (!($67)) {
   STACKTOP = sp;return;
  }
 }
 $68 = ___cxa_find_matching_catch()|0;
 $69 = tempRet0;
 $34 = $68;
 $35 = $69;
 __THREW__ = 0;
 invoke_vi(532,($36|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $74 = ___cxa_find_matching_catch(0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74);
  // unreachable;
 }
 $72 = $34;
 $73 = $35;
 ___resumeException($72|0);
 // unreachable;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = (($18) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = $25<<2;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = (($14) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + ($31<<2)|0);
 $2 = $14;
 $33 = $2;
 $34 = (($33) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC1ERKS5_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP32[$17>>2] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC1ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 100|0;
 $30 = sp + 48|0;
 $31 = sp + 52|0;
 $32 = $this;
 $33 = $__n;
 $36 = $32;
 $28 = $36;
 $37 = $28;
 $27 = $37;
 $2 = $4;
 $3 = -1;
 $38 = $2;
 $39 = $3;
 $0 = $38;
 $1 = $39;
 $40 = $0;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $41;
 $5 = $29;
 HEAP32[$37>>2] = 0;
 $42 = (($37) + 4|0);
 $8 = $10;
 $9 = -1;
 $43 = $8;
 $44 = $9;
 $6 = $43;
 $7 = $44;
 $45 = $6;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $46;
 $11 = $30;
 HEAP32[$42>>2] = 0;
 $47 = (($37) + 8|0);
 $14 = $16;
 $15 = -1;
 $48 = $14;
 $49 = $15;
 $12 = $48;
 $13 = $49;
 $50 = $12;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $51;
 $17 = $31;
 $25 = $47;
 $26 = 0;
 $52 = $25;
 $53 = $26;
 $23 = $52;
 HEAP32[$24>>2] = $53;
 $54 = $23;
 $22 = $24;
 $55 = $22;
 $56 = HEAP32[$55>>2]|0;
 $20 = $54;
 HEAP32[$21>>2] = $56;
 $57 = $20;
 $19 = $57;
 $18 = $21;
 $58 = $18;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = $33;
 $61 = ($60>>>0)>(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $33;
 __THREW__ = 0;
 invoke_vii(527,($36|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if (!($64)) {
  $65 = $33;
  __THREW__ = 0;
  invoke_vii(533,($36|0),($65|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if (!($67)) {
   STACKTOP = sp;return;
  }
 }
 $68 = ___cxa_find_matching_catch()|0;
 $69 = tempRet0;
 $34 = $68;
 $35 = $69;
 __THREW__ = 0;
 invoke_vi(529,($36|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $74 = ___cxa_find_matching_catch(0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74);
  // unreachable;
 }
 $72 = $34;
 $73 = $35;
 ___resumeException($72|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC1ERKS6_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZN3vcg6Point3IfEC1Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC1ERKS1_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($agg$result,$p0,$p1,$p2) {
 $agg$result = $agg$result|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp;
 $0 = $p0;
 $1 = $p1;
 $2 = $p2;
 $5 = $1;
 $6 = $0;
 __ZNK3vcg6Point3IfEmiERKS1_($3,$5,$6);
 $7 = $2;
 $8 = $0;
 __ZNK3vcg6Point3IfEmiERKS1_($4,$7,$8);
 __ZNK3vcg6Point3IfEeoERKS1_($agg$result,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $t = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $1;
 $4 = (+__ZNK3vcg6Point3IfE4NormEv($3));
 $5 = $2;
 $6 = (+__ZNK3vcg6Point3IfE4NormEv($5));
 $7 = $4 * $6;
 $w = $7;
 $8 = $w;
 $9 = $8 == 0.0;
 if ($9) {
  $0 = -1.0;
  $23 = $0;
  STACKTOP = sp;return (+$23);
 }
 $10 = $1;
 $11 = $2;
 $12 = (+__ZNK3vcg6Point3IfEmlERKS1_($10,$11));
 $13 = $w;
 $14 = $12 / $13;
 $t = $14;
 $15 = $t;
 $16 = $15 > 1.0;
 if ($16) {
  $t = 1.0;
 } else {
  $17 = $t;
  $18 = $17 < -1.0;
  if ($18) {
   $t = -1.0;
  }
 }
 $19 = $t;
 $20 = $19;
 $21 = (+Math_acos((+$20)));
 $22 = $21;
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return (+$23);
}
function __ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($p0,$p1,$p2) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0.0, $area2 = 0.0, $b = 0.0, $c = 0.0;
 var $sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $5 = sp + 32|0;
 $6 = sp + 8|0;
 $1 = $p0;
 $2 = $p1;
 $3 = $p2;
 $7 = $2;
 $8 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($4,$7,$8);
 $9 = (+__ZNK3vcg6Point3IfE4NormEv($4));
 $a = $9;
 $10 = $3;
 $11 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($5,$10,$11);
 $12 = (+__ZNK3vcg6Point3IfE4NormEv($5));
 $b = $12;
 $13 = $2;
 $14 = $3;
 __ZNK3vcg6Point3IfEmiERKS1_($6,$13,$14);
 $15 = (+__ZNK3vcg6Point3IfE4NormEv($6));
 $c = $15;
 $16 = $a;
 $17 = $b;
 $18 = $16 + $17;
 $19 = $c;
 $20 = $18 + $19;
 $21 = $20;
 $22 = $21 * 0.5;
 $23 = $22;
 $sum = $23;
 $24 = $sum;
 $25 = $a;
 $26 = $b;
 $27 = $25 + $26;
 $28 = $sum;
 $29 = $27 - $28;
 $30 = $24 * $29;
 $31 = $a;
 $32 = $c;
 $33 = $31 + $32;
 $34 = $sum;
 $35 = $33 - $34;
 $36 = $30 * $35;
 $37 = $b;
 $38 = $c;
 $39 = $37 + $38;
 $40 = $sum;
 $41 = $39 - $40;
 $42 = $36 * $41;
 $area2 = $42;
 $43 = $area2;
 $44 = $43 <= 0.0;
 if ($44) {
  $0 = 0.0;
  $55 = $0;
  STACKTOP = sp;return (+$55);
 } else {
  $45 = $area2;
  $46 = 8.0 * $45;
  $47 = $a;
  $48 = $b;
  $49 = $47 * $48;
  $50 = $c;
  $51 = $49 * $50;
  $52 = $sum;
  $53 = $51 * $52;
  $54 = $46 / $53;
  $0 = $54;
  $55 = $0;
  STACKTOP = sp;return (+$55);
 }
 return +0;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0;
 var $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $__tmp$i$i$i12 = 0, $__tmp$i$i$i7 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 64|0;
 $17 = sp + 768|0;
 $40 = sp + 56|0;
 $43 = sp + 769|0;
 $74 = sp + 340|0;
 $75 = sp + 24|0;
 $78 = sp + 712|0;
 $79 = sp + 720|0;
 $__t21$i$i$i = sp + 16|0;
 $82 = sp + 32|0;
 $85 = sp + 400|0;
 $__u1$i = sp + 8|0;
 $87 = sp + 40|0;
 $94 = sp + 48|0;
 $97 = sp + 770|0;
 $125 = sp;
 $128 = sp + 771|0;
 $160 = sp + 708|0;
 $__parent = sp + 464|0;
 $__inserted = sp + 772|0;
 $163 = sp + 96|0;
 $__h = sp + 380|0;
 $164 = sp + 744|0;
 $165 = sp + 584|0;
 $168 = sp + 156|0;
 $161 = $this;
 $162 = $__v;
 $169 = $161;
 $170 = $162;
 $171 = (__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE12__find_equalIS4_EERPNS_16__tree_node_baseIPvEESF_RKT_($169,$__parent,$170)|0);
 $__child = $171;
 $172 = $__child;
 $173 = HEAP32[$172>>2]|0;
 $__r = $173;
 HEAP8[$__inserted>>0] = 0;
 $174 = $__child;
 $175 = HEAP32[$174>>2]|0;
 $158 = $160;
 $159 = -1;
 $176 = $158;
 $177 = $159;
 $156 = $176;
 $157 = $177;
 $178 = $156;
 HEAP32[$178>>2] = 0;
 $179 = HEAP32[$160>>2]|0;
 HEAP32[$163>>2] = $179;
 $155 = $163;
 $180 = ($175|0)==(0|0);
 if (!($180)) {
  $335 = $__r;
  $147 = $168;
  $148 = $335;
  $336 = $147;
  $337 = $148;
  $145 = $336;
  $146 = $337;
  $338 = $145;
  $339 = $146;
  HEAP32[$338>>2] = $339;
  $152 = $agg$result;
  $153 = $168;
  $154 = $__inserted;
  $340 = $152;
  $341 = $154;
  $342 = $153;
  $149 = $340;
  $150 = $342;
  $151 = $341;
  $343 = $149;
  $344 = $150;
  ;HEAP32[$343+0>>2]=HEAP32[$344+0>>2]|0;
  $345 = (($343) + 4|0);
  $346 = $151;
  $347 = HEAP8[$346>>0]|0;
  $348 = $347&1;
  $349 = $348&1;
  HEAP8[$345>>0] = $349;
  STACKTOP = sp;return;
 }
 $181 = $162;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeERKS4_($165,$169,$181);
 $118 = $165;
 $182 = $118;
 $116 = $164;
 $117 = $182;
 $183 = $116;
 $184 = $117;
 $114 = $183;
 $115 = $184;
 $185 = $114;
 $186 = $115;
 HEAP32[$185>>2] = $186;
 ;HEAP8[$87+0>>0]=HEAP8[$164+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$164+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$164+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$164+3>>0]|0;
 $86 = $__h;
 $187 = $86;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$87+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$87+3>>0]|0;
 $84 = $187;
 $188 = $84;
 $83 = $__u1$i;
 $189 = $83;
 $190 = HEAP32[$189>>2]|0;
 $64 = $190;
 $191 = $64;
 $63 = $191;
 $192 = $63;
 $62 = $192;
 $193 = $62;
 $194 = HEAP32[$193>>2]|0;
 $__t$i$i$i = $194;
 $61 = $191;
 $195 = $61;
 $60 = $195;
 $196 = $60;
 HEAP32[$196>>2] = 0;
 $197 = $__t$i$i$i;
 $65 = $__u1$i;
 $198 = $65;
 $199 = HEAP32[$198>>2]|0;
 $68 = $199;
 $200 = $68;
 $67 = $200;
 $201 = $67;
 $66 = $201;
 $202 = $66;
 $203 = (($202) + 4|0);
 $69 = $203;
 $204 = $69;
 ;HEAP32[$85+0>>2]=HEAP32[$204+0>>2]|0;HEAP32[$85+4>>2]=HEAP32[$204+4>>2]|0;
 ;HEAP8[$82+0>>0]=HEAP8[$85+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$85+3>>0]|0;HEAP8[$82+4>>0]=HEAP8[$85+4>>0]|0;HEAP8[$82+5>>0]=HEAP8[$85+5>>0]|0;HEAP8[$82+6>>0]=HEAP8[$85+6>>0]|0;HEAP8[$82+7>>0]=HEAP8[$85+7>>0]|0;
 $80 = $188;
 $81 = $197;
 $205 = $80;
 $206 = $81;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$82+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$82+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$82+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$82+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$82+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$82+7>>0]|0;
 $77 = $205;
 HEAP32[$78>>2] = $206;
 $207 = $77;
 $76 = $78;
 $208 = $76;
 $209 = HEAP32[$208>>2]|0;
 $70 = $__t21$i$i$i;
 $210 = $70;
 ;HEAP32[$79+0>>2]=HEAP32[$210+0>>2]|0;HEAP32[$79+4>>2]=HEAP32[$210+4>>2]|0;
 ;HEAP8[$75+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$75+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$75+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$75+3>>0]=HEAP8[$79+3>>0]|0;HEAP8[$75+4>>0]=HEAP8[$79+4>>0]|0;HEAP8[$75+5>>0]=HEAP8[$79+5>>0]|0;HEAP8[$75+6>>0]=HEAP8[$79+6>>0]|0;HEAP8[$75+7>>0]=HEAP8[$79+7>>0]|0;
 $73 = $207;
 HEAP32[$74>>2] = $209;
 $211 = $73;
 $72 = $74;
 $212 = $72;
 $213 = HEAP32[$212>>2]|0;
 HEAP32[$211>>2] = $213;
 $214 = (($211) + 4|0);
 $71 = $75;
 $215 = $71;
 ;HEAP32[$214+0>>2]=HEAP32[$215+0>>2]|0;HEAP32[$214+4>>2]=HEAP32[$215+4>>2]|0;
 $33 = $165;
 $216 = $33;
 $32 = $216;
 $217 = $32;
 $30 = $217;
 $31 = 0;
 $218 = $30;
 $29 = $218;
 $219 = $29;
 $28 = $219;
 $220 = $28;
 $221 = HEAP32[$220>>2]|0;
 $__tmp$i$i$i12 = $221;
 $222 = $31;
 $11 = $218;
 $223 = $11;
 $10 = $223;
 $224 = $10;
 HEAP32[$224>>2] = $222;
 $225 = $__tmp$i$i$i12;
 $226 = ($225|0)!=(0|0);
 if ($226) {
  $9 = $218;
  $227 = $9;
  $8 = $227;
  $228 = $8;
  $229 = (($228) + 4|0);
  $230 = $__tmp$i$i$i12;
  $26 = $229;
  $27 = $230;
  $231 = $26;
  $232 = (($231) + 4|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&1;
  if ($234) {
   $235 = HEAP32[$231>>2]|0;
   $236 = $27;
   $237 = (($236) + 16|0);
   $25 = $237;
   $238 = $25;
   $15 = $235;
   $16 = $238;
   $239 = $15;
   $240 = $16;
   ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
   $12 = $239;
   $13 = $240;
  }
  $241 = $27;
  $242 = ($241|0)!=(0|0);
  if ($242) {
   $243 = HEAP32[$231>>2]|0;
   $244 = $27;
   $22 = $243;
   $23 = $244;
   $24 = 1;
   $245 = $22;
   $246 = $23;
   $247 = $24;
   $19 = $245;
   $20 = $246;
   $21 = $247;
   $248 = $20;
   $18 = $248;
   $249 = $18;
   __ZdlPv($249);
  }
 }
 $250 = HEAP32[$__parent>>2]|0;
 $251 = $__child;
 $7 = $__h;
 $252 = $7;
 $6 = $252;
 $253 = $6;
 $5 = $253;
 $254 = $5;
 $255 = HEAP32[$254>>2]|0;
 __THREW__ = 0;
 invoke_viiii(534,($169|0),($250|0),($251|0),($255|0));
 $256 = __THREW__; __THREW__ = 0;
 $257 = $256&1;
 if (!($257)) {
  $4 = $__h;
  $258 = $4;
  $3 = $258;
  $259 = $3;
  $2 = $259;
  $260 = $2;
  $261 = HEAP32[$260>>2]|0;
  $__t$i = $261;
  $1 = $258;
  $262 = $1;
  $0 = $262;
  $263 = $0;
  HEAP32[$263>>2] = 0;
  $264 = $__t$i;
  $__r = $264;
  HEAP8[$__inserted>>0] = 1;
  $59 = $__h;
  $265 = $59;
  $58 = $265;
  $266 = $58;
  $56 = $266;
  $57 = 0;
  $267 = $56;
  $55 = $267;
  $268 = $55;
  $54 = $268;
  $269 = $54;
  $270 = HEAP32[$269>>2]|0;
  $__tmp$i$i$i7 = $270;
  $271 = $57;
  $37 = $267;
  $272 = $37;
  $36 = $272;
  $273 = $36;
  HEAP32[$273>>2] = $271;
  $274 = $__tmp$i$i$i7;
  $275 = ($274|0)!=(0|0);
  if ($275) {
   $35 = $267;
   $276 = $35;
   $34 = $276;
   $277 = $34;
   $278 = (($277) + 4|0);
   $279 = $__tmp$i$i$i7;
   $52 = $278;
   $53 = $279;
   $280 = $52;
   $281 = (($280) + 4|0);
   $282 = HEAP8[$281>>0]|0;
   $283 = $282&1;
   if ($283) {
    $284 = HEAP32[$280>>2]|0;
    $285 = $53;
    $286 = (($285) + 16|0);
    $51 = $286;
    $287 = $51;
    $41 = $284;
    $42 = $287;
    $288 = $41;
    $289 = $42;
    ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
    $38 = $288;
    $39 = $289;
   }
   $290 = $53;
   $291 = ($290|0)!=(0|0);
   if ($291) {
    $292 = HEAP32[$280>>2]|0;
    $293 = $53;
    $48 = $292;
    $49 = $293;
    $50 = 1;
    $294 = $48;
    $295 = $49;
    $296 = $50;
    $45 = $294;
    $46 = $295;
    $47 = $296;
    $297 = $46;
    $44 = $297;
    $298 = $44;
    __ZdlPv($298);
   }
  }
  $335 = $__r;
  $147 = $168;
  $148 = $335;
  $336 = $147;
  $337 = $148;
  $145 = $336;
  $146 = $337;
  $338 = $145;
  $339 = $146;
  HEAP32[$338>>2] = $339;
  $152 = $agg$result;
  $153 = $168;
  $154 = $__inserted;
  $340 = $152;
  $341 = $154;
  $342 = $153;
  $149 = $340;
  $150 = $342;
  $151 = $341;
  $343 = $149;
  $344 = $150;
  ;HEAP32[$343+0>>2]=HEAP32[$344+0>>2]|0;
  $345 = (($343) + 4|0);
  $346 = $151;
  $347 = HEAP8[$346>>0]|0;
  $348 = $347&1;
  $349 = $348&1;
  HEAP8[$345>>0] = $349;
  STACKTOP = sp;return;
 }
 $299 = ___cxa_find_matching_catch()|0;
 $300 = tempRet0;
 $166 = $299;
 $167 = $300;
 $144 = $__h;
 $301 = $144;
 $143 = $301;
 $302 = $143;
 $141 = $302;
 $142 = 0;
 $303 = $141;
 $140 = $303;
 $304 = $140;
 $139 = $304;
 $305 = $139;
 $306 = HEAP32[$305>>2]|0;
 $__tmp$i$i$i = $306;
 $307 = $142;
 $122 = $303;
 $308 = $122;
 $121 = $308;
 $309 = $121;
 HEAP32[$309>>2] = $307;
 $310 = $__tmp$i$i$i;
 $311 = ($310|0)!=(0|0);
 if ($311) {
  $120 = $303;
  $312 = $120;
  $119 = $312;
  $313 = $119;
  $314 = (($313) + 4|0);
  $315 = $__tmp$i$i$i;
  $137 = $314;
  $138 = $315;
  $316 = $137;
  $317 = (($316) + 4|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $318&1;
  if ($319) {
   $320 = HEAP32[$316>>2]|0;
   $321 = $138;
   $322 = (($321) + 16|0);
   $136 = $322;
   $323 = $136;
   $126 = $320;
   $127 = $323;
   $324 = $126;
   $325 = $127;
   ;HEAP8[$125+0>>0]=HEAP8[$128+0>>0]|0;
   $123 = $324;
   $124 = $325;
  }
  $326 = $138;
  $327 = ($326|0)!=(0|0);
  if ($327) {
   $328 = HEAP32[$316>>2]|0;
   $329 = $138;
   $133 = $328;
   $134 = $329;
   $135 = 1;
   $330 = $133;
   $331 = $134;
   $332 = $135;
   $130 = $330;
   $131 = $331;
   $132 = $332;
   $333 = $131;
   $129 = $333;
   $334 = $129;
   __ZdlPv($334);
  }
 }
 $350 = $166;
 $351 = $167;
 ___resumeException($350|0);
 // unreachable;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE12__find_equalIS4_EERPNS_16__tree_node_baseIPvEESF_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 96|0;
 $18 = sp + 68|0;
 $32 = sp + 124|0;
 $49 = sp + 180|0;
 $50 = sp + 92|0;
 $51 = sp + 196|0;
 $46 = $this;
 $47 = $__parent;
 $48 = $__v;
 $52 = $46;
 $44 = $52;
 $53 = $44;
 $43 = $53;
 $54 = $43;
 $55 = (($54) + 4|0);
 $42 = $55;
 $56 = $42;
 $41 = $56;
 $57 = $41;
 $40 = $57;
 $58 = $40;
 $39 = $58;
 $59 = $39;
 $60 = HEAP32[$59>>2]|0;
 $__nd = $60;
 $61 = $__nd;
 $2 = $4;
 $3 = -1;
 $62 = $2;
 $63 = $3;
 $0 = $62;
 $1 = $63;
 $64 = $0;
 HEAP32[$64>>2] = 0;
 $65 = HEAP32[$4>>2]|0;
 HEAP32[$49>>2] = $65;
 $5 = $49;
 $66 = ($61|0)!=(0|0);
 if (!($66)) {
  $38 = $52;
  $151 = $38;
  $152 = (($151) + 4|0);
  $37 = $152;
  $153 = $37;
  $36 = $153;
  $154 = $36;
  $35 = $154;
  $155 = $35;
  $34 = $155;
  $156 = $34;
  $157 = $47;
  HEAP32[$157>>2] = $156;
  $158 = $47;
  $159 = HEAP32[$158>>2]|0;
  $45 = $159;
  $160 = $45;
  STACKTOP = sp;return ($160|0);
 }
 while(1) {
  $8 = $52;
  $67 = $8;
  $68 = (($67) + 8|0);
  $7 = $68;
  $69 = $7;
  $6 = $69;
  $70 = $6;
  $71 = $48;
  $72 = $__nd;
  $73 = (($72) + 16|0);
  $11 = $70;
  $12 = $71;
  $13 = $73;
  $74 = $12;
  $75 = $13;
  $9 = $74;
  $10 = $75;
  $76 = $9;
  $77 = HEAP32[$76>>2]|0;
  $78 = $10;
  $79 = HEAP32[$78>>2]|0;
  $80 = ($77>>>0)<($79>>>0);
  if ($80) {
   $161 = 1;
  } else {
   $81 = $10;
   $82 = HEAP32[$81>>2]|0;
   $83 = $9;
   $84 = HEAP32[$83>>2]|0;
   $85 = ($82>>>0)<($84>>>0);
   if ($85) {
    $162 = 0;
   } else {
    $86 = $9;
    $87 = (($86) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $10;
    $90 = (($89) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($88>>>0)<($91>>>0);
    $162 = $92;
   }
   $161 = $162;
  }
  if ($161) {
   $93 = $__nd;
   $94 = HEAP32[$93>>2]|0;
   $16 = $18;
   $17 = -1;
   $95 = $16;
   $96 = $17;
   $14 = $95;
   $15 = $96;
   $97 = $14;
   HEAP32[$97>>2] = 0;
   $98 = HEAP32[$18>>2]|0;
   HEAP32[$50>>2] = $98;
   $19 = $50;
   $99 = ($94|0)!=(0|0);
   if (!($99)) {
    label = 10;
    break;
   }
   $100 = $__nd;
   $101 = HEAP32[$100>>2]|0;
   $__nd = $101;
  } else {
   $22 = $52;
   $106 = $22;
   $107 = (($106) + 8|0);
   $21 = $107;
   $108 = $21;
   $20 = $108;
   $109 = $20;
   $110 = $__nd;
   $111 = (($110) + 16|0);
   $112 = $48;
   $25 = $109;
   $26 = $111;
   $27 = $112;
   $113 = $26;
   $114 = $27;
   $23 = $113;
   $24 = $114;
   $115 = $23;
   $116 = HEAP32[$115>>2]|0;
   $117 = $24;
   $118 = HEAP32[$117>>2]|0;
   $119 = ($116>>>0)<($118>>>0);
   if ($119) {
    $163 = 1;
   } else {
    $120 = $24;
    $121 = HEAP32[$120>>2]|0;
    $122 = $23;
    $123 = HEAP32[$122>>2]|0;
    $124 = ($121>>>0)<($123>>>0);
    if ($124) {
     $164 = 0;
    } else {
     $125 = $23;
     $126 = (($125) + 4|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $24;
     $129 = (($128) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($127>>>0)<($130>>>0);
     $164 = $131;
    }
    $163 = $164;
   }
   if (!($163)) {
    label = 21;
    break;
   }
   $132 = $__nd;
   $133 = (($132) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $30 = $32;
   $31 = -1;
   $135 = $30;
   $136 = $31;
   $28 = $135;
   $29 = $136;
   $137 = $28;
   HEAP32[$137>>2] = 0;
   $138 = HEAP32[$32>>2]|0;
   HEAP32[$51>>2] = $138;
   $33 = $51;
   $139 = ($134|0)!=(0|0);
   if (!($139)) {
    label = 19;
    break;
   }
   $140 = $__nd;
   $141 = (($140) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $__nd = $142;
  }
 }
 if ((label|0) == 10) {
  $102 = $__nd;
  $103 = $47;
  HEAP32[$103>>2] = $102;
  $104 = $47;
  $105 = HEAP32[$104>>2]|0;
  $45 = $105;
  $160 = $45;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 19) {
  $143 = $__nd;
  $144 = $47;
  HEAP32[$144>>2] = $143;
  $145 = $47;
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + 4|0);
  $45 = $147;
  $160 = $45;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 21) {
  $148 = $__nd;
  $149 = $47;
  HEAP32[$149>>2] = $148;
  $150 = $47;
  $45 = $150;
  $160 = $45;
  STACKTOP = sp;return ($160|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeERKS4_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d1$i = 0;
 var $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i9$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i10$i = 0, $__t21$i$i$i19 = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i12 = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i2$i = 0, $__tmp$i$i$i7 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i11$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 408|0;
 $18 = sp + 32|0;
 $21 = sp + 268|0;
 $22 = sp + 248|0;
 $__t21$i$i$i10$i = sp + 112|0;
 $25 = sp + 64|0;
 $28 = sp + 216|0;
 $__u1$i11$i = sp + 168|0;
 $30 = sp + 192|0;
 $37 = sp + 40|0;
 $40 = sp + 1352|0;
 $76 = sp + 372|0;
 $77 = sp + 24|0;
 $80 = sp + 444|0;
 $81 = sp + 448|0;
 $__t21$i$i$i$i = sp + 120|0;
 $84 = sp + 152|0;
 $87 = sp + 480|0;
 $__u1$i$i = sp + 176|0;
 $89 = sp + 184|0;
 $95 = sp + 520|0;
 $96 = sp + 524|0;
 $97 = sp + 536|0;
 $117 = sp + 620|0;
 $118 = sp + 96|0;
 $121 = sp + 1128|0;
 $122 = sp + 1112|0;
 $__t21$i$i$i19 = sp + 80|0;
 $125 = sp + 136|0;
 $128 = sp + 680|0;
 $__u1$i = sp + 128|0;
 $130 = sp + 144|0;
 $140 = sp;
 $143 = sp + 1353|0;
 $167 = sp + 48|0;
 $170 = sp + 1354|0;
 $196 = sp + 104|0;
 $199 = sp + 1355|0;
 $221 = sp + 1084|0;
 $222 = sp + 88|0;
 $225 = sp + 1100|0;
 $226 = sp + 1104|0;
 $__t21$i$i$i = sp + 16|0;
 $229 = sp + 72|0;
 $232 = sp + 1140|0;
 $233 = sp + 1144|0;
 $__d1$i = sp + 56|0;
 $236 = sp + 8|0;
 $243 = sp + 160|0;
 $246 = sp + 1356|0;
 $__h = sp + 700|0;
 $278 = sp + 728|0;
 $281 = sp + 468|0;
 $282 = sp + 752|0;
 $276 = $this;
 $277 = $__v;
 $284 = $276;
 $275 = $284;
 $285 = $275;
 $286 = (($285) + 4|0);
 $274 = $286;
 $287 = $274;
 $273 = $287;
 $288 = $273;
 $__na = $288;
 $289 = $__na;
 $271 = $289;
 $272 = 1;
 $290 = $271;
 $291 = $272;
 $268 = $290;
 $269 = $291;
 $270 = 0;
 $292 = $269;
 $293 = ($292*24)|0;
 $267 = $293;
 $294 = $267;
 $295 = (__Znwj($294)|0);
 $296 = $__na;
 $265 = $278;
 $266 = $296;
 $297 = $265;
 $298 = $266;
 $263 = $297;
 $264 = $298;
 $299 = $263;
 $300 = $264;
 HEAP32[$299>>2] = $300;
 $301 = (($299) + 4|0);
 HEAP8[$301>>0] = 0;
 ;HEAP8[$236+0>>0]=HEAP8[$278+0>>0]|0;HEAP8[$236+1>>0]=HEAP8[$278+1>>0]|0;HEAP8[$236+2>>0]=HEAP8[$278+2>>0]|0;HEAP8[$236+3>>0]=HEAP8[$278+3>>0]|0;HEAP8[$236+4>>0]=HEAP8[$278+4>>0]|0;HEAP8[$236+5>>0]=HEAP8[$278+5>>0]|0;HEAP8[$236+6>>0]=HEAP8[$278+6>>0]|0;HEAP8[$236+7>>0]=HEAP8[$278+7>>0]|0;
 $234 = $__h;
 $235 = $295;
 $302 = $234;
 $303 = $235;
 ;HEAP8[$__d1$i+0>>0]=HEAP8[$236+0>>0]|0;HEAP8[$__d1$i+1>>0]=HEAP8[$236+1>>0]|0;HEAP8[$__d1$i+2>>0]=HEAP8[$236+2>>0]|0;HEAP8[$__d1$i+3>>0]=HEAP8[$236+3>>0]|0;HEAP8[$__d1$i+4>>0]=HEAP8[$236+4>>0]|0;HEAP8[$__d1$i+5>>0]=HEAP8[$236+5>>0]|0;HEAP8[$__d1$i+6>>0]=HEAP8[$236+6>>0]|0;HEAP8[$__d1$i+7>>0]=HEAP8[$236+7>>0]|0;
 $231 = $302;
 HEAP32[$232>>2] = $303;
 $304 = $231;
 $230 = $232;
 $305 = $230;
 $306 = HEAP32[$305>>2]|0;
 $216 = $__d1$i;
 $307 = $216;
 ;HEAP32[$233+0>>2]=HEAP32[$307+0>>2]|0;HEAP32[$233+4>>2]=HEAP32[$307+4>>2]|0;
 ;HEAP8[$229+0>>0]=HEAP8[$233+0>>0]|0;HEAP8[$229+1>>0]=HEAP8[$233+1>>0]|0;HEAP8[$229+2>>0]=HEAP8[$233+2>>0]|0;HEAP8[$229+3>>0]=HEAP8[$233+3>>0]|0;HEAP8[$229+4>>0]=HEAP8[$233+4>>0]|0;HEAP8[$229+5>>0]=HEAP8[$233+5>>0]|0;HEAP8[$229+6>>0]=HEAP8[$233+6>>0]|0;HEAP8[$229+7>>0]=HEAP8[$233+7>>0]|0;
 $227 = $304;
 $228 = $306;
 $308 = $227;
 $309 = $228;
 ;HEAP8[$__t21$i$i$i+0>>0]=HEAP8[$229+0>>0]|0;HEAP8[$__t21$i$i$i+1>>0]=HEAP8[$229+1>>0]|0;HEAP8[$__t21$i$i$i+2>>0]=HEAP8[$229+2>>0]|0;HEAP8[$__t21$i$i$i+3>>0]=HEAP8[$229+3>>0]|0;HEAP8[$__t21$i$i$i+4>>0]=HEAP8[$229+4>>0]|0;HEAP8[$__t21$i$i$i+5>>0]=HEAP8[$229+5>>0]|0;HEAP8[$__t21$i$i$i+6>>0]=HEAP8[$229+6>>0]|0;HEAP8[$__t21$i$i$i+7>>0]=HEAP8[$229+7>>0]|0;
 $224 = $308;
 HEAP32[$225>>2] = $309;
 $310 = $224;
 $223 = $225;
 $311 = $223;
 $312 = HEAP32[$311>>2]|0;
 $217 = $__t21$i$i$i;
 $313 = $217;
 ;HEAP32[$226+0>>2]=HEAP32[$313+0>>2]|0;HEAP32[$226+4>>2]=HEAP32[$313+4>>2]|0;
 ;HEAP8[$222+0>>0]=HEAP8[$226+0>>0]|0;HEAP8[$222+1>>0]=HEAP8[$226+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$226+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$226+3>>0]|0;HEAP8[$222+4>>0]=HEAP8[$226+4>>0]|0;HEAP8[$222+5>>0]=HEAP8[$226+5>>0]|0;HEAP8[$222+6>>0]=HEAP8[$226+6>>0]|0;HEAP8[$222+7>>0]=HEAP8[$226+7>>0]|0;
 $220 = $310;
 HEAP32[$221>>2] = $312;
 $314 = $220;
 $219 = $221;
 $315 = $219;
 $316 = HEAP32[$315>>2]|0;
 HEAP32[$314>>2] = $316;
 $317 = (($314) + 4|0);
 $218 = $222;
 $318 = $218;
 ;HEAP32[$317+0>>2]=HEAP32[$318+0>>2]|0;HEAP32[$317+4>>2]=HEAP32[$318+4>>2]|0;
 $319 = $__na;
 $189 = $__h;
 $320 = $189;
 $188 = $320;
 $321 = $188;
 $187 = $321;
 $322 = $187;
 $323 = HEAP32[$322>>2]|0;
 $324 = (($323) + 16|0);
 $160 = $324;
 $325 = $160;
 $326 = $277;
 $131 = $319;
 $132 = $325;
 $133 = $326;
 $327 = $132;
 $328 = ($327|0)==(0|0);
 if (!($328)) {
  $329 = $133;
  ;HEAP32[$327+0>>2]=HEAP32[$329+0>>2]|0;HEAP32[$327+4>>2]=HEAP32[$329+4>>2]|0;
 }
 $2 = $__h;
 $330 = $2;
 $1 = $330;
 $331 = $1;
 $0 = $331;
 $332 = $0;
 $333 = (($332) + 4|0);
 $334 = (($333) + 4|0);
 HEAP8[$334>>0] = 1;
 $94 = $__h;
 $335 = $94;
 $92 = $97;
 $93 = $335;
 $336 = $92;
 $337 = $93;
 $90 = $336;
 $91 = $337;
 $338 = $90;
 $339 = $91;
 HEAP32[$338>>2] = $339;
 ;HEAP8[$89+0>>0]=HEAP8[$97+0>>0]|0;HEAP8[$89+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$97+3>>0]|0;
 $88 = $96;
 $340 = $88;
 ;HEAP8[$__u1$i$i+0>>0]=HEAP8[$89+0>>0]|0;HEAP8[$__u1$i$i+1>>0]=HEAP8[$89+1>>0]|0;HEAP8[$__u1$i$i+2>>0]=HEAP8[$89+2>>0]|0;HEAP8[$__u1$i$i+3>>0]=HEAP8[$89+3>>0]|0;
 $86 = $340;
 $341 = $86;
 $85 = $__u1$i$i;
 $342 = $85;
 $343 = HEAP32[$342>>2]|0;
 $66 = $343;
 $344 = $66;
 $65 = $344;
 $345 = $65;
 $64 = $345;
 $346 = $64;
 $347 = HEAP32[$346>>2]|0;
 $__t$i$i$i$i = $347;
 $63 = $344;
 $348 = $63;
 $62 = $348;
 $349 = $62;
 HEAP32[$349>>2] = 0;
 $350 = $__t$i$i$i$i;
 $67 = $__u1$i$i;
 $351 = $67;
 $352 = HEAP32[$351>>2]|0;
 $70 = $352;
 $353 = $70;
 $69 = $353;
 $354 = $69;
 $68 = $354;
 $355 = $68;
 $356 = (($355) + 4|0);
 $71 = $356;
 $357 = $71;
 ;HEAP32[$87+0>>2]=HEAP32[$357+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$357+4>>2]|0;
 ;HEAP8[$84+0>>0]=HEAP8[$87+0>>0]|0;HEAP8[$84+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$84+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$84+3>>0]=HEAP8[$87+3>>0]|0;HEAP8[$84+4>>0]=HEAP8[$87+4>>0]|0;HEAP8[$84+5>>0]=HEAP8[$87+5>>0]|0;HEAP8[$84+6>>0]=HEAP8[$87+6>>0]|0;HEAP8[$84+7>>0]=HEAP8[$87+7>>0]|0;
 $82 = $341;
 $83 = $350;
 $358 = $82;
 $359 = $83;
 ;HEAP8[$__t21$i$i$i$i+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$__t21$i$i$i$i+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$__t21$i$i$i$i+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$__t21$i$i$i$i+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$__t21$i$i$i$i+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$__t21$i$i$i$i+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$__t21$i$i$i$i+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$__t21$i$i$i$i+7>>0]=HEAP8[$84+7>>0]|0;
 $79 = $358;
 HEAP32[$80>>2] = $359;
 $360 = $79;
 $78 = $80;
 $361 = $78;
 $362 = HEAP32[$361>>2]|0;
 $72 = $__t21$i$i$i$i;
 $363 = $72;
 ;HEAP32[$81+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$363+4>>2]|0;
 ;HEAP8[$77+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$77+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$77+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$77+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$77+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$77+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$77+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$77+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $360;
 HEAP32[$76>>2] = $362;
 $364 = $75;
 $74 = $76;
 $365 = $74;
 $366 = HEAP32[$365>>2]|0;
 HEAP32[$364>>2] = $366;
 $367 = (($364) + 4|0);
 $73 = $77;
 $368 = $73;
 ;HEAP32[$367+0>>2]=HEAP32[$368+0>>2]|0;HEAP32[$367+4>>2]=HEAP32[$368+4>>2]|0;
 $61 = $96;
 $369 = $61;
 $59 = $95;
 $60 = $369;
 $370 = $59;
 $371 = $60;
 $57 = $370;
 $58 = $371;
 $372 = $57;
 $373 = $58;
 HEAP32[$372>>2] = $373;
 ;HEAP8[$30+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$30+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$30+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$30+3>>0]=HEAP8[$95+3>>0]|0;
 $29 = $282;
 $374 = $29;
 ;HEAP8[$__u1$i11$i+0>>0]=HEAP8[$30+0>>0]|0;HEAP8[$__u1$i11$i+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$__u1$i11$i+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$__u1$i11$i+3>>0]=HEAP8[$30+3>>0]|0;
 $27 = $374;
 $375 = $27;
 $26 = $__u1$i11$i;
 $376 = $26;
 $377 = HEAP32[$376>>2]|0;
 $7 = $377;
 $378 = $7;
 $6 = $378;
 $379 = $6;
 $5 = $379;
 $380 = $5;
 $381 = HEAP32[$380>>2]|0;
 $__t$i$i$i9$i = $381;
 $4 = $378;
 $382 = $4;
 $3 = $382;
 $383 = $3;
 HEAP32[$383>>2] = 0;
 $384 = $__t$i$i$i9$i;
 $8 = $__u1$i11$i;
 $385 = $8;
 $386 = HEAP32[$385>>2]|0;
 $11 = $386;
 $387 = $11;
 $10 = $387;
 $388 = $10;
 $9 = $388;
 $389 = $9;
 $390 = (($389) + 4|0);
 $12 = $390;
 $391 = $12;
 ;HEAP32[$28+0>>2]=HEAP32[$391+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$391+4>>2]|0;
 ;HEAP8[$25+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$25+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$28+3>>0]|0;HEAP8[$25+4>>0]=HEAP8[$28+4>>0]|0;HEAP8[$25+5>>0]=HEAP8[$28+5>>0]|0;HEAP8[$25+6>>0]=HEAP8[$28+6>>0]|0;HEAP8[$25+7>>0]=HEAP8[$28+7>>0]|0;
 $23 = $375;
 $24 = $384;
 $392 = $23;
 $393 = $24;
 ;HEAP8[$__t21$i$i$i10$i+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$__t21$i$i$i10$i+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$__t21$i$i$i10$i+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$__t21$i$i$i10$i+3>>0]=HEAP8[$25+3>>0]|0;HEAP8[$__t21$i$i$i10$i+4>>0]=HEAP8[$25+4>>0]|0;HEAP8[$__t21$i$i$i10$i+5>>0]=HEAP8[$25+5>>0]|0;HEAP8[$__t21$i$i$i10$i+6>>0]=HEAP8[$25+6>>0]|0;HEAP8[$__t21$i$i$i10$i+7>>0]=HEAP8[$25+7>>0]|0;
 $20 = $392;
 HEAP32[$21>>2] = $393;
 $394 = $20;
 $19 = $21;
 $395 = $19;
 $396 = HEAP32[$395>>2]|0;
 $13 = $__t21$i$i$i10$i;
 $397 = $13;
 ;HEAP32[$22+0>>2]=HEAP32[$397+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$397+4>>2]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $394;
 HEAP32[$17>>2] = $396;
 $398 = $16;
 $15 = $17;
 $399 = $15;
 $400 = HEAP32[$399>>2]|0;
 HEAP32[$398>>2] = $400;
 $401 = (($398) + 4|0);
 $14 = $18;
 $402 = $14;
 ;HEAP32[$401+0>>2]=HEAP32[$402+0>>2]|0;HEAP32[$401+4>>2]=HEAP32[$402+4>>2]|0;
 $56 = $96;
 $403 = $56;
 $55 = $403;
 $404 = $55;
 $53 = $404;
 $54 = 0;
 $405 = $53;
 $52 = $405;
 $406 = $52;
 $51 = $406;
 $407 = $51;
 $408 = HEAP32[$407>>2]|0;
 $__tmp$i$i$i2$i = $408;
 $409 = $54;
 $34 = $405;
 $410 = $34;
 $33 = $410;
 $411 = $33;
 HEAP32[$411>>2] = $409;
 $412 = $__tmp$i$i$i2$i;
 $413 = ($412|0)!=(0|0);
 if ($413) {
  $32 = $405;
  $414 = $32;
  $31 = $414;
  $415 = $31;
  $416 = (($415) + 4|0);
  $417 = $__tmp$i$i$i2$i;
  $49 = $416;
  $50 = $417;
  $418 = $49;
  $419 = (($418) + 4|0);
  $420 = HEAP8[$419>>0]|0;
  $421 = $420&1;
  if ($421) {
   $422 = HEAP32[$418>>2]|0;
   $423 = $50;
   $424 = (($423) + 16|0);
   $48 = $424;
   $425 = $48;
   $38 = $422;
   $39 = $425;
   $426 = $38;
   $427 = $39;
   ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
   $35 = $426;
   $36 = $427;
  }
  $428 = $50;
  $429 = ($428|0)!=(0|0);
  if ($429) {
   $430 = HEAP32[$418>>2]|0;
   $431 = $50;
   $45 = $430;
   $46 = $431;
   $47 = 1;
   $432 = $45;
   $433 = $46;
   $434 = $47;
   $42 = $432;
   $43 = $433;
   $44 = $434;
   $435 = $43;
   $41 = $435;
   $436 = $41;
   __ZdlPv($436);
  }
 }
 $102 = $282;
 $437 = $102;
 $100 = $281;
 $101 = $437;
 $438 = $100;
 $439 = $101;
 $98 = $438;
 $99 = $439;
 $440 = $98;
 $441 = $99;
 HEAP32[$440>>2] = $441;
 ;HEAP8[$130+0>>0]=HEAP8[$281+0>>0]|0;HEAP8[$130+1>>0]=HEAP8[$281+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$281+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$281+3>>0]|0;
 $129 = $agg$result;
 $442 = $129;
 ;HEAP8[$__u1$i+0>>0]=HEAP8[$130+0>>0]|0;HEAP8[$__u1$i+1>>0]=HEAP8[$130+1>>0]|0;HEAP8[$__u1$i+2>>0]=HEAP8[$130+2>>0]|0;HEAP8[$__u1$i+3>>0]=HEAP8[$130+3>>0]|0;
 $127 = $442;
 $443 = $127;
 $126 = $__u1$i;
 $444 = $126;
 $445 = HEAP32[$444>>2]|0;
 $107 = $445;
 $446 = $107;
 $106 = $446;
 $447 = $106;
 $105 = $447;
 $448 = $105;
 $449 = HEAP32[$448>>2]|0;
 $__t$i$i$i = $449;
 $104 = $446;
 $450 = $104;
 $103 = $450;
 $451 = $103;
 HEAP32[$451>>2] = 0;
 $452 = $__t$i$i$i;
 $108 = $__u1$i;
 $453 = $108;
 $454 = HEAP32[$453>>2]|0;
 $111 = $454;
 $455 = $111;
 $110 = $455;
 $456 = $110;
 $109 = $456;
 $457 = $109;
 $458 = (($457) + 4|0);
 $112 = $458;
 $459 = $112;
 ;HEAP32[$128+0>>2]=HEAP32[$459+0>>2]|0;HEAP32[$128+4>>2]=HEAP32[$459+4>>2]|0;
 ;HEAP8[$125+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$125+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$128+3>>0]|0;HEAP8[$125+4>>0]=HEAP8[$128+4>>0]|0;HEAP8[$125+5>>0]=HEAP8[$128+5>>0]|0;HEAP8[$125+6>>0]=HEAP8[$128+6>>0]|0;HEAP8[$125+7>>0]=HEAP8[$128+7>>0]|0;
 $123 = $443;
 $124 = $452;
 $460 = $123;
 $461 = $124;
 ;HEAP8[$__t21$i$i$i19+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$__t21$i$i$i19+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$__t21$i$i$i19+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$__t21$i$i$i19+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$__t21$i$i$i19+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$__t21$i$i$i19+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$__t21$i$i$i19+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$__t21$i$i$i19+7>>0]=HEAP8[$125+7>>0]|0;
 $120 = $460;
 HEAP32[$121>>2] = $461;
 $462 = $120;
 $119 = $121;
 $463 = $119;
 $464 = HEAP32[$463>>2]|0;
 $113 = $__t21$i$i$i19;
 $465 = $113;
 ;HEAP32[$122+0>>2]=HEAP32[$465+0>>2]|0;HEAP32[$122+4>>2]=HEAP32[$465+4>>2]|0;
 ;HEAP8[$118+0>>0]=HEAP8[$122+0>>0]|0;HEAP8[$118+1>>0]=HEAP8[$122+1>>0]|0;HEAP8[$118+2>>0]=HEAP8[$122+2>>0]|0;HEAP8[$118+3>>0]=HEAP8[$122+3>>0]|0;HEAP8[$118+4>>0]=HEAP8[$122+4>>0]|0;HEAP8[$118+5>>0]=HEAP8[$122+5>>0]|0;HEAP8[$118+6>>0]=HEAP8[$122+6>>0]|0;HEAP8[$118+7>>0]=HEAP8[$122+7>>0]|0;
 $116 = $462;
 HEAP32[$117>>2] = $464;
 $466 = $116;
 $115 = $117;
 $467 = $115;
 $468 = HEAP32[$467>>2]|0;
 HEAP32[$466>>2] = $468;
 $469 = (($466) + 4|0);
 $114 = $118;
 $470 = $114;
 ;HEAP32[$469+0>>2]=HEAP32[$470+0>>2]|0;HEAP32[$469+4>>2]=HEAP32[$470+4>>2]|0;
 $159 = $282;
 $471 = $159;
 $158 = $471;
 $472 = $158;
 $156 = $472;
 $157 = 0;
 $473 = $156;
 $155 = $473;
 $474 = $155;
 $154 = $474;
 $475 = $154;
 $476 = HEAP32[$475>>2]|0;
 $__tmp$i$i$i12 = $476;
 $477 = $157;
 $137 = $473;
 $478 = $137;
 $136 = $478;
 $479 = $136;
 HEAP32[$479>>2] = $477;
 $480 = $__tmp$i$i$i12;
 $481 = ($480|0)!=(0|0);
 if ($481) {
  $135 = $473;
  $482 = $135;
  $134 = $482;
  $483 = $134;
  $484 = (($483) + 4|0);
  $485 = $__tmp$i$i$i12;
  $152 = $484;
  $153 = $485;
  $486 = $152;
  $487 = (($486) + 4|0);
  $488 = HEAP8[$487>>0]|0;
  $489 = $488&1;
  if ($489) {
   $490 = HEAP32[$486>>2]|0;
   $491 = $153;
   $492 = (($491) + 16|0);
   $151 = $492;
   $493 = $151;
   $141 = $490;
   $142 = $493;
   $494 = $141;
   $495 = $142;
   ;HEAP8[$140+0>>0]=HEAP8[$143+0>>0]|0;
   $138 = $494;
   $139 = $495;
  }
  $496 = $153;
  $497 = ($496|0)!=(0|0);
  if ($497) {
   $498 = HEAP32[$486>>2]|0;
   $499 = $153;
   $148 = $498;
   $149 = $499;
   $150 = 1;
   $500 = $148;
   $501 = $149;
   $502 = $150;
   $145 = $500;
   $146 = $501;
   $147 = $502;
   $503 = $146;
   $144 = $503;
   $504 = $144;
   __ZdlPv($504);
  }
 }
 $283 = 1;
 $186 = $__h;
 $505 = $186;
 $185 = $505;
 $506 = $185;
 $183 = $506;
 $184 = 0;
 $507 = $183;
 $182 = $507;
 $508 = $182;
 $181 = $508;
 $509 = $181;
 $510 = HEAP32[$509>>2]|0;
 $__tmp$i$i$i7 = $510;
 $511 = $184;
 $164 = $507;
 $512 = $164;
 $163 = $512;
 $513 = $163;
 HEAP32[$513>>2] = $511;
 $514 = $__tmp$i$i$i7;
 $515 = ($514|0)!=(0|0);
 if (!($515)) {
  STACKTOP = sp;return;
 }
 $162 = $507;
 $516 = $162;
 $161 = $516;
 $517 = $161;
 $518 = (($517) + 4|0);
 $519 = $__tmp$i$i$i7;
 $179 = $518;
 $180 = $519;
 $520 = $179;
 $521 = (($520) + 4|0);
 $522 = HEAP8[$521>>0]|0;
 $523 = $522&1;
 if ($523) {
  $524 = HEAP32[$520>>2]|0;
  $525 = $180;
  $526 = (($525) + 16|0);
  $178 = $526;
  $527 = $178;
  $168 = $524;
  $169 = $527;
  $528 = $168;
  $529 = $169;
  ;HEAP8[$167+0>>0]=HEAP8[$170+0>>0]|0;
  $165 = $528;
  $166 = $529;
 }
 $530 = $180;
 $531 = ($530|0)!=(0|0);
 if ($531) {
  $532 = HEAP32[$520>>2]|0;
  $533 = $180;
  $175 = $532;
  $176 = $533;
  $177 = 1;
  $534 = $175;
  $535 = $176;
  $536 = $177;
  $172 = $534;
  $173 = $535;
  $174 = $536;
  $537 = $173;
  $171 = $537;
  $538 = $171;
  __ZdlPv($538);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSD_SD_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $11 = sp + 40|0;
 $28 = sp + 8|0;
 $33 = sp + 60|0;
 $34 = sp + 124|0;
 $35 = sp + 16|0;
 $29 = $this;
 $30 = $__parent;
 $31 = $__child;
 $32 = $__new_node;
 $36 = $29;
 $26 = $28;
 $27 = -1;
 $37 = $26;
 $38 = $27;
 $24 = $37;
 $25 = $38;
 $39 = $24;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$28>>2]|0;
 HEAP32[$33>>2] = $40;
 $20 = $33;
 $41 = $32;
 HEAP32[$41>>2] = 0;
 $2 = $4;
 $3 = -1;
 $42 = $2;
 $43 = $3;
 $0 = $42;
 $1 = $43;
 $44 = $0;
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$4>>2]|0;
 HEAP32[$34>>2] = $45;
 $5 = $34;
 $46 = $32;
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $30;
 $49 = $32;
 $50 = (($49) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $32;
 $52 = $31;
 HEAP32[$52>>2] = $51;
 $6 = $36;
 $53 = $6;
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $9 = $11;
 $10 = -1;
 $56 = $9;
 $57 = $10;
 $7 = $56;
 $8 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$11>>2]|0;
 HEAP32[$35>>2] = $59;
 $12 = $35;
 $60 = ($55|0)!=(0|0);
 if ($60) {
  $13 = $36;
  $61 = $13;
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $14 = $36;
  $64 = $14;
  HEAP32[$64>>2] = $63;
 }
 $19 = $36;
 $65 = $19;
 $66 = (($65) + 4|0);
 $18 = $66;
 $67 = $18;
 $17 = $67;
 $68 = $17;
 $16 = $68;
 $69 = $16;
 $15 = $69;
 $70 = $15;
 $71 = HEAP32[$70>>2]|0;
 $72 = $31;
 $73 = HEAP32[$72>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($71,$73);
 $23 = $36;
 $74 = $23;
 $75 = (($74) + 8|0);
 $22 = $75;
 $76 = $22;
 $21 = $76;
 $77 = $21;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return;
}
function __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($agg$result,$__first,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__n$i$i = 0, $__tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 56|0;
 $8 = sp + 184|0;
 $11 = sp + 16|0;
 $13 = sp + 24|0;
 $15 = sp;
 $24 = sp + 8|0;
 $25 = sp + 128|0;
 $26 = sp + 132|0;
 $27 = sp + 136|0;
 $28 = sp + 48|0;
 $29 = sp + 40|0;
 $30 = sp + 32|0;
 $__tmp = sp + 168|0;
 $34 = sp + 84|0;
 $35 = sp + 124|0;
 $36 = sp + 148|0;
 $37 = sp + 104|0;
 $33 = $__first;
 $38 = $33;
 $39 = HEAP32[$38>>2]|0;
 $0 = $39;
 $40 = $0;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$__tmp>>2] = $41;
 ;HEAP32[$35+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP8[$11+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$11+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$35+3>>0]|0;
 $9 = 1;
 $10 = 0;
 $42 = $9;
 $6 = $11;
 $7 = $42;
 $43 = $6;
 $44 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $43;
 $4 = $44;
 $45 = $3;
 $46 = $4;
 $1 = $45;
 $2 = $46;
 $47 = $1;
 $48 = $2;
 $49 = HEAP32[$47>>2]|0;
 $50 = (($49) + ($48<<2)|0);
 HEAP32[$47>>2] = $50;
 ;HEAP32[$34+0>>2]=HEAP32[$11+0>>2]|0;
 ;HEAP32[$36+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP32[$37+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP8[$30+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$30+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$30+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$30+3>>0]=HEAP8[$34+3>>0]|0;
 ;HEAP8[$29+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$29+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$36+3>>0]|0;
 ;HEAP8[$28+0>>0]=HEAP8[$37+0>>0]|0;HEAP8[$28+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$37+3>>0]|0;
 ;HEAP32[$25+0>>2]=HEAP32[$30+0>>2]|0;
 ;HEAP8[$24+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$24+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$25+3>>0]|0;
 $23 = $24;
 $51 = $23;
 $52 = HEAP32[$51>>2]|0;
 ;HEAP32[$26+0>>2]=HEAP32[$29+0>>2]|0;
 ;HEAP8[$13+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$13+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$26+3>>0]|0;
 $12 = $13;
 $53 = $12;
 $54 = HEAP32[$53>>2]|0;
 ;HEAP32[$27+0>>2]=HEAP32[$28+0>>2]|0;
 ;HEAP8[$15+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$15+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$27+3>>0]|0;
 $14 = $15;
 $55 = $14;
 $56 = HEAP32[$55>>2]|0;
 $16 = $52;
 $17 = $54;
 $18 = $56;
 $57 = $17;
 $58 = $16;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__n$i$i = $62;
 $63 = $18;
 $64 = $16;
 $65 = $__n$i$i;
 $66 = $65<<2;
 _memmove(($63|0),($64|0),($66|0))|0;
 $67 = $18;
 $68 = $__n$i$i;
 $69 = (($67) + ($68<<2)|0);
 $21 = $agg$result;
 $22 = $69;
 $70 = $21;
 $71 = $22;
 $19 = $70;
 $20 = $71;
 $72 = $19;
 $73 = $20;
 HEAP32[$72>>2] = $73;
 $31 = $__tmp;
 $74 = $31;
 $75 = HEAP32[$74>>2]|0;
 $32 = $agg$result;
 $76 = $32;
 $77 = HEAP32[$76>>2]|0;
 HEAP32[$77>>2] = $75;
 STACKTOP = sp;return;
}
function __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($agg$result,$__first,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $__lm1 = 0, $__n$i$i = 0, $__tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 56|0;
 $5 = sp + 48|0;
 $14 = sp + 16|0;
 $15 = sp + 88|0;
 $16 = sp + 92|0;
 $17 = sp + 96|0;
 $18 = sp + 24|0;
 $19 = sp;
 $20 = sp + 8|0;
 $27 = sp + 40|0;
 $30 = sp + 188|0;
 $33 = sp + 32|0;
 $__lm1 = sp + 184|0;
 $34 = sp + 152|0;
 $__tmp = sp + 108|0;
 $35 = sp + 180|0;
 $36 = sp + 156|0;
 $37 = sp + 72|0;
 ;HEAP32[$34+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP8[$33+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$33+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$34+3>>0]|0;
 $31 = 1;
 $32 = 0;
 $38 = $31;
 $39 = (0 - ($38))|0;
 $28 = $33;
 $29 = $39;
 $40 = $28;
 $41 = $29;
 ;HEAP8[$27+0>>0]=HEAP8[$30+0>>0]|0;
 $25 = $40;
 $26 = $41;
 $42 = $25;
 $43 = $26;
 $23 = $42;
 $24 = $43;
 $44 = $23;
 $45 = $24;
 $46 = HEAP32[$44>>2]|0;
 $47 = (($46) + ($45<<2)|0);
 HEAP32[$44>>2] = $47;
 ;HEAP32[$__lm1+0>>2]=HEAP32[$33+0>>2]|0;
 $0 = $__lm1;
 $48 = $0;
 $49 = HEAP32[$48>>2]|0;
 $1 = $49;
 $50 = $1;
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$__tmp>>2] = $51;
 ;HEAP32[$35+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP32[$36+0>>2]=HEAP32[$__lm1+0>>2]|0;
 ;HEAP32[$37+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP8[$20+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$35+3>>0]|0;
 ;HEAP8[$19+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$36+3>>0]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$37+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$37+3>>0]|0;
 ;HEAP32[$15+0>>2]=HEAP32[$20+0>>2]|0;
 ;HEAP8[$14+0>>0]=HEAP8[$15+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$15+3>>0]|0;
 $13 = $14;
 $52 = $13;
 $53 = HEAP32[$52>>2]|0;
 ;HEAP32[$16+0>>2]=HEAP32[$19+0>>2]|0;
 ;HEAP8[$3+0>>0]=HEAP8[$16+0>>0]|0;HEAP8[$3+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$16+3>>0]|0;
 $2 = $3;
 $54 = $2;
 $55 = HEAP32[$54>>2]|0;
 ;HEAP32[$17+0>>2]=HEAP32[$18+0>>2]|0;
 ;HEAP8[$5+0>>0]=HEAP8[$17+0>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $5;
 $56 = $4;
 $57 = HEAP32[$56>>2]|0;
 $6 = $53;
 $7 = $55;
 $8 = $57;
 $58 = $7;
 $59 = $6;
 $60 = $58;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 4)&-1;
 $__n$i$i = $63;
 $64 = $__n$i$i;
 $65 = $8;
 $66 = (0 - ($64))|0;
 $67 = (($65) + ($66<<2)|0);
 $8 = $67;
 $68 = $8;
 $69 = $6;
 $70 = $__n$i$i;
 $71 = $70<<2;
 _memmove(($68|0),($69|0),($71|0))|0;
 $72 = $8;
 $11 = $agg$result;
 $12 = $72;
 $73 = $11;
 $74 = $12;
 $9 = $73;
 $10 = $74;
 $75 = $9;
 $76 = $10;
 HEAP32[$75>>2] = $76;
 $21 = $__tmp;
 $77 = $21;
 $78 = HEAP32[$77>>2]|0;
 $22 = $__first;
 $79 = $22;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$80>>2] = $78;
 STACKTOP = sp;return;
}
function __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($agg$result,$__first,$__middle,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__middle = $__middle|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__d = 0, $__g = 0, $__m1 = 0, $__m2 = 0, $__p = 0, $__p1 = 0, $__p2 = 0, $__t = 0, $__t$i = 0, $__t$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$i = sp + 48|0;
 $19 = sp + 16|0;
 $20 = sp + 8|0;
 $21 = sp;
 $70 = sp + 184|0;
 $71 = sp + 24|0;
 $72 = sp + 300|0;
 $73 = sp + 156|0;
 $__p = sp + 168|0;
 $__t = sp + 160|0;
 $__p1 = sp + 316|0;
 $__p2 = sp + 164|0;
 $74 = sp + 152|0;
 $68 = $__middle;
 $69 = $__first;
 $75 = $68;
 $67 = $75;
 $76 = $67;
 $77 = HEAP32[$76>>2]|0;
 $78 = $69;
 $66 = $78;
 $79 = $66;
 $80 = HEAP32[$79>>2]|0;
 $81 = $77;
 $82 = $80;
 $83 = (($81) - ($82))|0;
 $84 = (($83|0) / 4)&-1;
 $__m1 = $84;
 $2 = $__last;
 $3 = $__middle;
 $85 = $2;
 $1 = $85;
 $86 = $1;
 $87 = HEAP32[$86>>2]|0;
 $88 = $3;
 $0 = $88;
 $89 = $0;
 $90 = HEAP32[$89>>2]|0;
 $91 = $87;
 $92 = $90;
 $93 = (($91) - ($92))|0;
 $94 = (($93|0) / 4)&-1;
 $__m2 = $94;
 $95 = $__m1;
 $96 = $__m2;
 $97 = ($95|0)==($96|0);
 if ($97) {
  ;HEAP32[$70+0>>2]=HEAP32[$__first+0>>2]|0;
  ;HEAP32[$71+0>>2]=HEAP32[$__middle+0>>2]|0;
  ;HEAP32[$72+0>>2]=HEAP32[$__middle+0>>2]|0;
  ;HEAP8[$21+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$70+3>>0]|0;
  ;HEAP8[$20+0>>0]=HEAP8[$71+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$71+3>>0]|0;
  ;HEAP8[$19+0>>0]=HEAP8[$72+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$72+3>>0]|0;
  while(1) {
   $17 = $21;
   $18 = $20;
   $98 = $17;
   $99 = $18;
   $15 = $98;
   $16 = $99;
   $100 = $15;
   $14 = $100;
   $101 = $14;
   $102 = HEAP32[$101>>2]|0;
   $103 = $16;
   $13 = $103;
   $104 = $13;
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)==($105|0);
   $107 = $106 ^ 1;
   if (!($107)) {
    break;
   }
   $4 = $21;
   $108 = $4;
   $109 = HEAP32[$108>>2]|0;
   $5 = $19;
   $110 = $5;
   $111 = HEAP32[$110>>2]|0;
   $9 = $109;
   $10 = $111;
   $112 = $9;
   $8 = $112;
   $113 = $8;
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$__t$i$i>>2] = $114;
   $115 = $10;
   $6 = $115;
   $116 = $6;
   $117 = HEAP32[$116>>2]|0;
   $118 = $9;
   HEAP32[$118>>2] = $117;
   $7 = $__t$i$i;
   $119 = $7;
   $120 = HEAP32[$119>>2]|0;
   $121 = $10;
   HEAP32[$121>>2] = $120;
   $11 = $21;
   $122 = $11;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + 4|0);
   HEAP32[$122>>2] = $124;
   $12 = $19;
   $125 = $12;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 4|0);
   HEAP32[$125>>2] = $127;
  }
  ;HEAP32[$73+0>>2]=HEAP32[$19+0>>2]|0;
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__middle+0>>2]|0;
  STACKTOP = sp;return;
 }
 $128 = $__m1;
 $129 = $__m2;
 $22 = $128;
 $23 = $129;
 while(1) {
  $130 = $22;
  $131 = $23;
  $132 = (($130|0) % ($131|0))&-1;
  $__t$i = $132;
  $133 = $23;
  $22 = $133;
  $134 = $__t$i;
  $23 = $134;
  $135 = $23;
  $136 = ($135|0)!=(0);
  if (!($136)) {
   break;
  }
 }
 $137 = $22;
 $__g = $137;
 $138 = $__g;
 $26 = $__first;
 $27 = $138;
 $139 = $26;
 ;HEAP32[$__p+0>>2]=HEAP32[$139+0>>2]|0;
 $140 = $27;
 $24 = $__p;
 $25 = $140;
 $141 = $24;
 $142 = $25;
 $143 = HEAP32[$141>>2]|0;
 $144 = (($143) + ($142<<2)|0);
 HEAP32[$141>>2] = $144;
 while(1) {
  $32 = $__p;
  $33 = $__first;
  $145 = $32;
  $146 = $33;
  $30 = $145;
  $31 = $146;
  $147 = $30;
  $29 = $147;
  $148 = $29;
  $149 = HEAP32[$148>>2]|0;
  $150 = $31;
  $28 = $150;
  $151 = $28;
  $152 = HEAP32[$151>>2]|0;
  $153 = ($149|0)==($152|0);
  $154 = $153 ^ 1;
  if (!($154)) {
   break;
  }
  $34 = $__p;
  $155 = $34;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + -4|0);
  HEAP32[$155>>2] = $157;
  $35 = $155;
  $158 = $35;
  $159 = HEAP32[$158>>2]|0;
  $36 = $159;
  $160 = $36;
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$__t>>2] = $161;
  ;HEAP32[$__p1+0>>2]=HEAP32[$__p+0>>2]|0;
  $162 = $__m1;
  $39 = $__p1;
  $40 = $162;
  $163 = $39;
  ;HEAP32[$__p2+0>>2]=HEAP32[$163+0>>2]|0;
  $164 = $40;
  $37 = $__p2;
  $38 = $164;
  $165 = $37;
  $166 = $38;
  $167 = HEAP32[$165>>2]|0;
  $168 = (($167) + ($166<<2)|0);
  HEAP32[$165>>2] = $168;
  while(1) {
   $41 = $__p2;
   $169 = $41;
   $170 = HEAP32[$169>>2]|0;
   $42 = $170;
   $171 = $42;
   $172 = HEAP32[$171>>2]|0;
   $43 = $__p1;
   $173 = $43;
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$174>>2] = $172;
   ;HEAP32[$__p1+0>>2]=HEAP32[$__p2+0>>2]|0;
   $46 = $__last;
   $47 = $__p2;
   $175 = $46;
   $45 = $175;
   $176 = $45;
   $177 = HEAP32[$176>>2]|0;
   $178 = $47;
   $44 = $178;
   $179 = $44;
   $180 = HEAP32[$179>>2]|0;
   $181 = $177;
   $182 = $180;
   $183 = (($181) - ($182))|0;
   $184 = (($183|0) / 4)&-1;
   $__d = $184;
   $185 = $__m1;
   $186 = $__d;
   $187 = ($185|0)<($186|0);
   if ($187) {
    $188 = $__m1;
    $48 = $__p2;
    $49 = $188;
    $189 = $48;
    $190 = $49;
    $191 = HEAP32[$189>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$189>>2] = $192;
   } else {
    $193 = $__m1;
    $194 = $__d;
    $195 = (($193) - ($194))|0;
    $52 = $__first;
    $53 = $195;
    $196 = $52;
    ;HEAP32[$74+0>>2]=HEAP32[$196+0>>2]|0;
    $197 = $53;
    $50 = $74;
    $51 = $197;
    $198 = $50;
    $199 = $51;
    $200 = HEAP32[$198>>2]|0;
    $201 = (($200) + ($199<<2)|0);
    HEAP32[$198>>2] = $201;
    ;HEAP32[$__p2+0>>2]=HEAP32[$74+0>>2]|0;
   }
   $58 = $__p2;
   $59 = $__p;
   $202 = $58;
   $203 = $59;
   $56 = $202;
   $57 = $203;
   $204 = $56;
   $55 = $204;
   $205 = $55;
   $206 = HEAP32[$205>>2]|0;
   $207 = $57;
   $54 = $207;
   $208 = $54;
   $209 = HEAP32[$208>>2]|0;
   $210 = ($206|0)==($209|0);
   $211 = $210 ^ 1;
   if (!($211)) {
    break;
   }
  }
  $60 = $__t;
  $212 = $60;
  $213 = HEAP32[$212>>2]|0;
  $61 = $__p1;
  $214 = $61;
  $215 = HEAP32[$214>>2]|0;
  HEAP32[$215>>2] = $213;
 }
 $216 = $__m2;
 $64 = $__first;
 $65 = $216;
 $217 = $64;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$217+0>>2]|0;
 $218 = $65;
 $62 = $agg$result;
 $63 = $218;
 $219 = $62;
 $220 = $63;
 $221 = HEAP32[$219>>2]|0;
 $222 = (($221) + ($220<<2)|0);
 HEAP32[$219>>2] = $222;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfE4NormEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 $17 = (+__ZN3vcg4math4SqrtEf($16));
 STACKTOP = sp;return (+$17);
}
function __ZNK3vcg6Point3IfEmlERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 * $11;
 $13 = $6 + $12;
 $14 = (($2) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $15 * $18;
 $20 = $13 + $19;
 STACKTOP = sp;return (+$20);
}
function __ZNK3vcg6Point3IfEeoERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = (($5) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $4 * $7;
 $9 = (($2) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 * $13;
 $15 = $8 - $14;
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = +HEAPF32[$2>>2];
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 * $24;
 $26 = $20 - $25;
 $27 = +HEAPF32[$2>>2];
 $28 = $1;
 $29 = (($28) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 * $30;
 $32 = (($2) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = +HEAPF32[$34>>2];
 $36 = $33 * $35;
 $37 = $31 - $36;
 __ZN3vcg6Point3IfEC1Efff($agg$result,$15,$26,$37);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 104|0;
 $29 = sp + 48|0;
 $26 = $this;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $24 = $31;
 $32 = $24;
 $33 = (($32) + 4|0);
 $23 = $33;
 $34 = $23;
 $22 = $34;
 $35 = $22;
 $21 = $35;
 $36 = $21;
 $20 = $36;
 $37 = $20;
 $38 = HEAP32[$37>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($30,$38);
 $2 = $30;
 $39 = $2;
 $40 = (($39) + 8|0);
 $1 = $40;
 $41 = $1;
 $0 = $41;
 $42 = $0;
 HEAP32[$42>>2] = 0;
 $7 = $30;
 $43 = $7;
 $44 = (($43) + 4|0);
 $6 = $44;
 $45 = $6;
 $5 = $45;
 $46 = $5;
 $4 = $46;
 $47 = $4;
 $3 = $47;
 $48 = $3;
 $8 = $30;
 $49 = $8;
 HEAP32[$49>>2] = $48;
 $11 = $13;
 $12 = -1;
 $50 = $11;
 $51 = $12;
 $9 = $50;
 $10 = $51;
 $52 = $9;
 HEAP32[$52>>2] = 0;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$29>>2] = $53;
 $14 = $29;
 $19 = $30;
 $54 = $19;
 $55 = (($54) + 4|0);
 $18 = $55;
 $56 = $18;
 $17 = $56;
 $57 = $17;
 $16 = $57;
 $58 = $16;
 $15 = $58;
 $59 = $15;
 HEAP32[$59>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 112|0;
 $22 = sp + 76|0;
 $27 = sp + 100|0;
 $23 = $this;
 $24 = $__nd;
 $28 = $23;
 $29 = $24;
 $20 = $22;
 $21 = -1;
 $30 = $20;
 $31 = $21;
 $18 = $30;
 $19 = $31;
 $32 = $18;
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $33;
 $17 = $27;
 $34 = ($29|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $24;
 $36 = HEAP32[$35>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($28,$36);
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($28,$39);
 $2 = $28;
 $40 = $2;
 $41 = (($40) + 4|0);
 $1 = $41;
 $42 = $1;
 $0 = $42;
 $43 = $0;
 $__na = $43;
 $44 = $__na;
 $45 = $24;
 $46 = (($45) + 16|0);
 $3 = $46;
 $47 = $3;
 $7 = $44;
 $8 = $47;
 $48 = $7;
 $49 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $48;
 $5 = $49;
 $50 = $__na;
 $51 = $24;
 $14 = $50;
 $15 = $51;
 $16 = 1;
 $52 = $14;
 $53 = $15;
 $54 = $16;
 $11 = $52;
 $12 = $53;
 $13 = $54;
 $55 = $12;
 $10 = $55;
 $56 = $10;
 __ZdlPv($56);
 STACKTOP = sp;return;
}
function __ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC1ERKS6_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__comp;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS6_($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS6_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $8 = sp + 36|0;
 $9 = sp + 117|0;
 $__t21$i = sp + 16|0;
 $12 = sp;
 $27 = sp + 116|0;
 $25 = $this;
 $26 = $__comp;
 $28 = $25;
 $29 = (($28) + 4|0);
 $24 = $29;
 $30 = $24;
 $23 = $30;
 $31 = $23;
 $22 = $31;
 $32 = $22;
 $21 = $32;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 HEAP32[$34>>2] = 0;
 $35 = (($28) + 8|0);
 ;HEAP8[$12+0>>0]=HEAP8[$27+0>>0]|0;
 $10 = $35;
 $11 = 0;
 $36 = $10;
 $37 = $11;
 ;HEAP8[$__t21$i+0>>0]=HEAP8[$12+0>>0]|0;
 $7 = $36;
 HEAP32[$8>>2] = $37;
 $38 = $7;
 $6 = $8;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $0 = $__t21$i;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $38;
 HEAP32[$4>>2] = $40;
 $41 = $3;
 $2 = $5;
 $1 = $4;
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $17 = $28;
 $44 = $17;
 $45 = (($44) + 4|0);
 $16 = $45;
 $46 = $16;
 $15 = $46;
 $47 = $15;
 $14 = $47;
 $48 = $14;
 $13 = $48;
 $49 = $13;
 $18 = $28;
 $50 = $18;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -4|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE5AllocERKi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $10 = sp + 36|0;
 $16 = sp + 128|0;
 $21 = sp + 80|0;
 $24 = sp + 92|0;
 $29 = sp + 100|0;
 $30 = sp + 48|0;
 $31 = sp + 52|0;
 $32 = $this;
 $33 = $__n;
 $36 = $32;
 $28 = $36;
 $37 = $28;
 $27 = $37;
 $2 = $4;
 $3 = -1;
 $38 = $2;
 $39 = $3;
 $0 = $38;
 $1 = $39;
 $40 = $0;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$4>>2]|0;
 HEAP32[$29>>2] = $41;
 $5 = $29;
 HEAP32[$37>>2] = 0;
 $42 = (($37) + 4|0);
 $8 = $10;
 $9 = -1;
 $43 = $8;
 $44 = $9;
 $6 = $43;
 $7 = $44;
 $45 = $6;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$10>>2]|0;
 HEAP32[$30>>2] = $46;
 $11 = $30;
 HEAP32[$42>>2] = 0;
 $47 = (($37) + 8|0);
 $14 = $16;
 $15 = -1;
 $48 = $14;
 $49 = $15;
 $12 = $48;
 $13 = $49;
 $50 = $12;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$16>>2]|0;
 HEAP32[$31>>2] = $51;
 $17 = $31;
 $25 = $47;
 $26 = 0;
 $52 = $25;
 $53 = $26;
 $23 = $52;
 HEAP32[$24>>2] = $53;
 $54 = $23;
 $22 = $24;
 $55 = $22;
 $56 = HEAP32[$55>>2]|0;
 $20 = $54;
 HEAP32[$21>>2] = $56;
 $57 = $20;
 $19 = $57;
 $18 = $21;
 $58 = $18;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = $33;
 $61 = ($60>>>0)>(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $33;
 __THREW__ = 0;
 invoke_vii(535,($36|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if (!($64)) {
  $65 = $33;
  __THREW__ = 0;
  invoke_vii(536,($36|0),($65|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if (!($67)) {
   STACKTOP = sp;return;
  }
 }
 $68 = ___cxa_find_matching_catch()|0;
 $69 = tempRet0;
 $34 = $68;
 $35 = $69;
 __THREW__ = 0;
 invoke_vi(537,($36|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $74 = ___cxa_find_matching_catch(0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74);
  // unreachable;
 }
 $72 = $34;
 $73 = $35;
 ___resumeException($72|0);
 // unreachable;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = (($18) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = $25<<2;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = (($14) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + ($31<<2)|0);
 $2 = $14;
 $33 = $2;
 $34 = (($33) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC1ERKS3_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP32[$17>>2] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IfEC2Effff($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 $nw = +$nw;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Point4IfEC2Effff($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IfEC2Effff($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 $nw = +$nw;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = $2;
 $8 = (($5) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $3;
 $10 = (($5) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = $4;
 $12 = (($5) + 12|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point4IhEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((2264|0),(2280|0),140,(1776|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg6Color4IhEC2Ehhhh($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 $nz = $nz|0;
 $nw = $nw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Point4IhEC2Ehhhh($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IhEC2Ehhhh($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 $nz = $nz|0;
 $nw = $nw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 HEAP8[$5>>0] = $6;
 $7 = $2;
 $8 = (($5) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $3;
 $10 = (($5) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $4;
 $12 = (($5) + 3|0);
 HEAP8[$12>>0] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len1 = 0, $__len2 = 0;
 var $__m1 = 0, $__m2 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $2 = $15;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = $4;
  $2 = $24;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $25 = $4;
 $26 = $__len2;
 $27 = (($26) - 1)|0;
 $28 = (0 - ($27))|0;
 $29 = (($25) + ($28)|0);
 $__s = $29;
 L9: while(1) {
  while(1) {
   $30 = $3;
   $31 = $__s;
   $32 = ($30|0)==($31|0);
   if ($32) {
    label = 8;
    break L9;
   }
   $34 = $7;
   $35 = $3;
   $36 = HEAP8[$35>>0]|0;
   $37 = $5;
   $38 = HEAP8[$37>>0]|0;
   $39 = (FUNCTION_TABLE_iii[$34 & 1023]($36,$38)|0);
   if ($39) {
    break;
   }
   $40 = $3;
   $41 = (($40) + 1|0);
   $3 = $41;
  }
  $42 = $3;
  $__m1 = $42;
  $43 = $5;
  $__m2 = $43;
  while(1) {
   $44 = $__m2;
   $45 = (($44) + 1|0);
   $__m2 = $45;
   $46 = $6;
   $47 = ($45|0)==($46|0);
   if ($47) {
    label = 14;
    break L9;
   }
   $49 = $__m1;
   $50 = (($49) + 1|0);
   $__m1 = $50;
   $51 = $7;
   $52 = $__m1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $__m2;
   $55 = HEAP8[$54>>0]|0;
   $56 = (FUNCTION_TABLE_iii[$51 & 1023]($53,$55)|0);
   if (!($56)) {
    break;
   }
  }
  $57 = $3;
  $58 = (($57) + 1|0);
  $3 = $58;
 }
 if ((label|0) == 8) {
  $33 = $4;
  $2 = $33;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 14) {
  $48 = $3;
  $2 = $48;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 return 0|0;
}
function __ZNK3vcg6Point4IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((2264|0),(2280|0),140,(1776|0));
 // unreachable;
 return 0|0;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 296|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l1 = 0, $__l2 = 0, $__len1 = 0;
 var $__len2 = 0, $__m1 = 0, $__m2 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $4;
  $2 = $15;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = $4;
  $2 = $24;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $25 = $3;
 $26 = $__len2;
 $27 = (($26) - 1)|0;
 $28 = (($25) + ($27)|0);
 $__s = $28;
 $29 = $4;
 $__l1 = $29;
 $30 = $6;
 $__l2 = $30;
 $31 = $__l2;
 $32 = (($31) + -1|0);
 $__l2 = $32;
 L9: while(1) {
  while(1) {
   $33 = $__s;
   $34 = $__l1;
   $35 = ($33|0)==($34|0);
   if ($35) {
    label = 8;
    break L9;
   }
   $37 = $7;
   $38 = $__l1;
   $39 = (($38) + -1|0);
   $__l1 = $39;
   $40 = HEAP8[$39>>0]|0;
   $41 = $__l2;
   $42 = HEAP8[$41>>0]|0;
   $43 = (FUNCTION_TABLE_iii[$37 & 1023]($40,$42)|0);
   if ($43) {
    break;
   }
  }
  $44 = $__l1;
  $__m1 = $44;
  $45 = $__l2;
  $__m2 = $45;
  while(1) {
   $46 = $__m2;
   $47 = $5;
   $48 = ($46|0)==($47|0);
   if ($48) {
    label = 14;
    break L9;
   }
   $50 = $7;
   $51 = $__m1;
   $52 = (($51) + -1|0);
   $__m1 = $52;
   $53 = HEAP8[$52>>0]|0;
   $54 = $__m2;
   $55 = (($54) + -1|0);
   $__m2 = $55;
   $56 = HEAP8[$55>>0]|0;
   $57 = (FUNCTION_TABLE_iii[$50 & 1023]($53,$56)|0);
   if (!($57)) {
    break;
   }
  }
 }
 if ((label|0) == 8) {
  $36 = $4;
  $2 = $36;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 14) {
  $49 = $__m1;
  $2 = $49;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 return 0|0;
}
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm) {
 $__is = $__is|0;
 $__str = $__str|0;
 $__dlm = $__dlm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__ch = 0, $__err = 0, $__extr = 0, $__i = 0, $__m$i = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $8 = sp + 225|0;
 $48 = sp + 226|0;
 $49 = sp + 227|0;
 $__sen = sp + 229|0;
 $51 = $__is;
 $52 = $__str;
 $53 = $__dlm;
 $56 = $51;
 __THREW__ = 0;
 invoke_viii(538,($__sen|0),($56|0),1);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 L1: do {
  if (!($58)) {
   $50 = $__sen;
   $59 = $50;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&1;
   if ($61) {
    $62 = $52;
    $47 = $62;
    $63 = $47;
    $46 = $63;
    $41 = $63;
    $64 = $41;
    $40 = $64;
    $65 = $40;
    $39 = $65;
    $66 = $39;
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 & 1;
    $70 = ($69|0)!=(0);
    if ($70) {
     $29 = $63;
     $71 = $29;
     $28 = $71;
     $72 = $28;
     $27 = $72;
     $73 = $27;
     $74 = (($73) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     HEAP8[$48>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($75,$48);
     $32 = $63;
     $33 = 0;
     $76 = $32;
     $77 = $33;
     $31 = $76;
     $78 = $31;
     $30 = $78;
     $79 = $30;
     $80 = (($79) + 4|0);
     HEAP32[$80>>2] = $77;
    } else {
     $38 = $63;
     $81 = $38;
     $37 = $81;
     $82 = $37;
     $36 = $82;
     $83 = $36;
     $84 = (($83) + 1|0);
     $35 = $84;
     $85 = $35;
     $34 = $85;
     $86 = $34;
     HEAP8[$49>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($86,$49);
     $44 = $63;
     $45 = 0;
     $87 = $44;
     $88 = $45;
     $89 = $88 << 1;
     $90 = $89&255;
     $43 = $87;
     $91 = $43;
     $42 = $91;
     $92 = $42;
     HEAP8[$92>>0] = $90;
    }
    $__err = 0;
    $__extr = 0;
    while(1) {
     $93 = $51;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + -12|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($93) + ($96)|0);
     $26 = $97;
     $98 = $26;
     $25 = $98;
     $99 = $25;
     $100 = (($99) + 24|0);
     $101 = HEAP32[$100>>2]|0;
     $24 = $101;
     $102 = $24;
     $103 = (($102) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($102) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104|0)==($106|0);
     if ($107) {
      $108 = HEAP32[$102>>2]|0;
      $109 = (($108) + 40|0);
      $110 = HEAP32[$109>>2]|0;
      __THREW__ = 0;
      $111 = (invoke_ii($110|0,($102|0))|0);
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       break L1;
      }
      $23 = $111;
     } else {
      $114 = (($102) + 12|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$114>>2] = $116;
      $117 = HEAP8[$115>>0]|0;
      $118 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($117)|0);
      $23 = $118;
     }
     $119 = $23;
     $__i = $119;
     $120 = $__i;
     $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $122 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($120,$121)|0);
     if ($122) {
      label = 16;
      break;
     }
     $136 = $__extr;
     $137 = (($136) + 1)|0;
     $__extr = $137;
     $138 = $__i;
     $139 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($138)|0);
     $__ch = $139;
     $140 = $__ch;
     $141 = $53;
     $142 = (__ZNSt3__111char_traitsIcE2eqEcc($140,$141)|0);
     if ($142) {
      label = 22;
      break;
     }
     $143 = $52;
     $144 = $__ch;
     __THREW__ = 0;
     invoke_vii(511,($143|0),($144|0));
     $145 = __THREW__; __THREW__ = 0;
     $146 = $145&1;
     if ($146) {
      break L1;
     }
     $147 = $52;
     $22 = $147;
     $148 = $22;
     $21 = $148;
     $149 = $21;
     $20 = $149;
     $150 = $20;
     $19 = $150;
     $151 = $19;
     $152 = HEAP8[$151>>0]|0;
     $153 = $152&255;
     $154 = $153 & 1;
     $155 = ($154|0)!=(0);
     if ($155) {
      $15 = $148;
      $156 = $15;
      $14 = $156;
      $157 = $14;
      $13 = $157;
      $158 = $13;
      $159 = (($158) + 4|0);
      $160 = HEAP32[$159>>2]|0;
      $177 = $160;
     } else {
      $18 = $148;
      $161 = $18;
      $17 = $161;
      $162 = $17;
      $16 = $162;
      $163 = $16;
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = $165 >> 1;
      $177 = $166;
     }
     $167 = $52;
     $12 = $167;
     $168 = $12;
     $11 = $168;
     $169 = $11;
     $10 = $169;
     $170 = $10;
     $9 = $170;
     $171 = $9;
     $7 = $171;
     $172 = $7;
     ;HEAP8[$6+0>>0]=HEAP8[$8+0>>0]|0;
     $5 = $172;
     $173 = $5;
     $4 = $173;
     $__m$i = -1;
     $174 = $__m$i;
     $175 = (($174) - 16)|0;
     $176 = ($177|0)==($175|0);
     if ($176) {
      label = 28;
      break;
     }
    }
    if ((label|0) == 16) {
     $123 = $__err;
     $124 = $123 | 2;
     $__err = $124;
    }
    else if ((label|0) == 22) {
    }
    else if ((label|0) == 28) {
     $178 = $__err;
     $179 = $178 | 4;
     $__err = $179;
    }
    $180 = $__extr;
    $181 = ($180|0)==(0);
    if ($181) {
     $182 = $__err;
     $183 = $182 | 4;
     $__err = $183;
    }
    $184 = $51;
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + -12|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($184) + ($187)|0);
    $189 = $__err;
    $2 = $188;
    $3 = $189;
    $190 = $2;
    $191 = $3;
    $0 = $190;
    $1 = $191;
    $192 = $0;
    $193 = (($192) + 16|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $1;
    $196 = $194 | $195;
    __THREW__ = 0;
    invoke_vii(456,($192|0),($196|0));
    $197 = __THREW__; __THREW__ = 0;
    $198 = $197&1;
    if ($198) {
     break;
    }
   }
   $135 = $51;
   STACKTOP = sp;return ($135|0);
  }
 } while(0);
 $125 = ___cxa_find_matching_catch(0|0)|0;
 $126 = tempRet0;
 $54 = $125;
 $55 = $126;
 $127 = $54;
 (___cxa_begin_catch(($127|0))|0);
 $128 = $51;
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + -12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 __THREW__ = 0;
 invoke_vi(458,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if (!($134)) {
  ___cxa_end_catch();
  $135 = $51;
  STACKTOP = sp;return ($135|0);
 }
 $199 = ___cxa_find_matching_catch()|0;
 $200 = tempRet0;
 $54 = $199;
 $55 = $200;
 __THREW__ = 0;
 invoke_v(459);
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $205 = ___cxa_find_matching_catch(0|0)|0;
  $206 = tempRet0;
  ___clang_call_terminate($205);
  // unreachable;
 }
 $203 = $54;
 $204 = $55;
 ___resumeException($203|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC1ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 $4 = $1;
 $5 = $3;
 $6 = $2;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($4,$6,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 12)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 12)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 12)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC1EjjS8_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 12;
 } else {
  $101 = $2;
  __THREW__ = 0;
  invoke_vii(463,($99|0),($101|0));
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $104 = (($__v) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 12|0);
  HEAP32[$104>>2] = $106;
  __THREW__ = 0;
  invoke_vii(539,($32|0),($__v|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch()|0;
 $110 = tempRet0;
 $30 = $109;
 $31 = $110;
 __THREW__ = 0;
 invoke_vi(540,($__v|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 }
 $113 = $30;
 $114 = $31;
 ___resumeException($113|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC1EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 92|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -12|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -12|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -12|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $24 = $38;
 $25 = $39;
 $40 = $24;
 while(1) {
  $41 = $25;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $23 = $40;
  $45 = $23;
  $46 = (($45) + 12|0);
  $22 = $46;
  $47 = $22;
  $21 = $47;
  $48 = $21;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $14 = $53;
  $54 = $14;
  $18 = $50;
  $19 = $54;
  $55 = $18;
  $56 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $55;
  $16 = $56;
  $57 = $16;
  __THREW__ = 0;
  invoke_vi(397,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $26 = $60;
  $27 = $61;
  $62 = $26;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $63 = HEAP32[$34>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $65 = $13;
 $66 = (($65) + 12|0);
 $12 = $66;
 $67 = $12;
 $11 = $67;
 $68 = $11;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$34>>2]|0;
 $10 = $34;
 $72 = $10;
 $9 = $72;
 $73 = $9;
 $74 = (($73) + 12|0);
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $4 = $70;
 $5 = $71;
 $6 = $82;
 $83 = $4;
 $84 = $5;
 $85 = $6;
 $1 = $83;
 $2 = $84;
 $3 = $85;
 $86 = $2;
 $0 = $86;
 $87 = $0;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 80|0;
 $8 = sp + 28|0;
 $27 = sp + 104|0;
 $36 = sp + 64|0;
 $41 = sp;
 $42 = sp + 72|0;
 $37 = $this;
 $38 = $__cap;
 $39 = $__start;
 $40 = $__a;
 $43 = $37;
 $44 = (($43) + 12|0);
 $34 = $36;
 $35 = -1;
 $45 = $34;
 $46 = $35;
 $32 = $45;
 $33 = $46;
 $47 = $32;
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$36>>2]|0;
 HEAP32[$41>>2] = $48;
 $16 = $41;
 $49 = $40;
 $10 = $44;
 $11 = 0;
 $12 = $49;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $7 = $50;
 HEAP32[$8>>2] = $51;
 $9 = $52;
 $53 = $7;
 $6 = $8;
 $54 = $6;
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $0 = $56;
 $57 = $0;
 $3 = $53;
 HEAP32[$4>>2] = $55;
 $5 = $57;
 $58 = $3;
 $2 = $4;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = (($58) + 4|0);
 $62 = $5;
 $1 = $62;
 $63 = $1;
 HEAP32[$61>>2] = $63;
 $64 = $38;
 $65 = ($64|0)!=(0);
 if ($65) {
  $15 = $43;
  $66 = $15;
  $67 = (($66) + 12|0);
  $14 = $67;
  $68 = $14;
  $13 = $68;
  $69 = $13;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $38;
  $21 = $71;
  $22 = $72;
  $73 = $21;
  $74 = $22;
  $18 = $73;
  $19 = $74;
  $20 = 0;
  $75 = $19;
  $76 = ($75*12)|0;
  $17 = $76;
  $77 = $17;
  $78 = (__Znwj($77)|0);
  $83 = $78;
 } else {
  $25 = $27;
  $26 = -1;
  $79 = $25;
  $80 = $26;
  $23 = $79;
  $24 = $80;
  $81 = $23;
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$27>>2]|0;
  HEAP32[$42>>2] = $82;
  $28 = $42;
  $83 = 0;
 }
 HEAP32[$43>>2] = $83;
 $84 = HEAP32[$43>>2]|0;
 $85 = $39;
 $86 = (($84) + (($85*12)|0)|0);
 $87 = (($43) + 8|0);
 HEAP32[$87>>2] = $86;
 $88 = (($43) + 4|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[$43>>2]|0;
 $90 = $38;
 $91 = (($89) + (($90*12)|0)|0);
 $31 = $43;
 $92 = $31;
 $93 = (($92) + 12|0);
 $30 = $93;
 $94 = $30;
 $29 = $94;
 $95 = $29;
 HEAP32[$95>>2] = $91;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = (($134) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = (($134) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = (($134) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = (($134) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = (($159) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = (($134) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = (($176) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = (($134) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = (($134) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = (($200) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = (($205) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = (($134) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = (($223) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = (($228) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = (($134) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = (($236) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = (($236) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = (($236) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = (($134) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = (($134) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = (($258) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = (($134) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = (($280) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = (($285) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = (($134) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = (($134) + 32|0);
 $295 = (($134) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = (($134) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = (($325) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = (($330) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = (($134) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = (($348) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = (($353) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = (($134) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = (($370) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = (($381) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = (($381) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = (($381) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = (($134) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if ($390) {
  $391 = $__sz;
  $116 = $134;
  $117 = $391;
  $392 = $116;
  $393 = $117;
  $394 = (($392) + 24|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) + ($393)|0);
  HEAP32[$394>>2] = $396;
 }
 STACKTOP = sp;return;
}
function __ZN6MyMeshD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p1$i$i = 0, $__p1$i$i1 = 0, $__p1$i$i11 = 0, $__p1$i$i16 = 0;
 var $__p1$i$i21 = 0, $__p1$i$i26 = 0, $__p1$i$i31 = 0, $__p1$i$i6 = 0, $fi = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p1$i$i31 = sp + 112|0;
 $32 = sp + 96|0;
 $44 = sp + 236|0;
 $__p1$i$i26 = sp + 120|0;
 $47 = sp + 32|0;
 $55 = sp + 284|0;
 $__p1$i$i21 = sp + 80|0;
 $64 = sp + 40|0;
 $76 = sp + 372|0;
 $__p1$i$i16 = sp + 88|0;
 $79 = sp + 48|0;
 $87 = sp + 420|0;
 $__p1$i$i11 = sp + 72|0;
 $96 = sp + 8|0;
 $108 = sp + 508|0;
 $__p1$i$i6 = sp + 24|0;
 $111 = sp + 64|0;
 $119 = sp + 556|0;
 $__p1$i$i1 = sp + 16|0;
 $128 = sp + 56|0;
 $140 = sp + 644|0;
 $__p1$i$i = sp + 104|0;
 $143 = sp;
 $151 = sp + 692|0;
 $i = sp + 208|0;
 $155 = sp + 180|0;
 $156 = sp + 600|0;
 $159 = sp + 712|0;
 $160 = sp + 468|0;
 $161 = sp + 720|0;
 $162 = sp + 392|0;
 $163 = sp + 736|0;
 $164 = sp + 484|0;
 $fi = sp + 744|0;
 $165 = sp + 192|0;
 $166 = sp + 404|0;
 $154 = $this;
 $167 = $154;
 $153 = $i;
 $168 = $153;
 $152 = $168;
 $169 = (($167) + 116|0);
 $150 = $169;
 $170 = $150;
 $149 = $170;
 $171 = $149;
 $148 = $171;
 $172 = $148;
 $173 = HEAP32[$172>>2]|0;
 $146 = $151;
 $147 = $173;
 $174 = $146;
 $175 = $147;
 $144 = $174;
 $145 = $175;
 $176 = $144;
 $177 = $145;
 HEAP32[$176>>2] = $177;
 ;HEAP8[$143+0>>0]=HEAP8[$151+0>>0]|0;HEAP8[$143+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$143+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$143+3>>0]=HEAP8[$151+3>>0]|0;
 $142 = $155;
 $178 = $142;
 ;HEAP8[$__p1$i$i+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$__p1$i$i+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$__p1$i$i+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$__p1$i$i+3>>0]=HEAP8[$143+3>>0]|0;
 $141 = $178;
 $179 = $141;
 $180 = HEAP32[$__p1$i$i>>2]|0;
 HEAP32[$179>>2] = $180;
 ;HEAP32[$i+0>>2]=HEAP32[$155+0>>2]|0;
 while(1) {
  $181 = (($167) + 116|0);
  $139 = $181;
  $182 = $139;
  $138 = $182;
  $183 = $138;
  $137 = $183;
  $184 = $137;
  $185 = (($184) + 4|0);
  $136 = $185;
  $186 = $136;
  $135 = $186;
  $187 = $135;
  $134 = $187;
  $188 = $134;
  $133 = $188;
  $189 = $133;
  $131 = $140;
  $132 = $189;
  $190 = $131;
  $191 = $132;
  $129 = $190;
  $130 = $191;
  $192 = $129;
  $193 = $130;
  HEAP32[$192>>2] = $193;
  ;HEAP8[$128+0>>0]=HEAP8[$140+0>>0]|0;HEAP8[$128+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$140+3>>0]|0;
  $127 = $156;
  $194 = $127;
  ;HEAP8[$__p1$i$i1+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$__p1$i$i1+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$__p1$i$i1+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$__p1$i$i1+3>>0]=HEAP8[$128+3>>0]|0;
  $126 = $194;
  $195 = $126;
  $196 = HEAP32[$__p1$i$i1>>2]|0;
  HEAP32[$195>>2] = $196;
  $124 = $i;
  $125 = $156;
  $197 = $124;
  $198 = $125;
  $122 = $197;
  $123 = $198;
  $199 = $122;
  $200 = HEAP32[$199>>2]|0;
  $201 = $123;
  $202 = HEAP32[$201>>2]|0;
  $203 = ($200|0)==($202|0);
  $204 = $203 ^ 1;
  if (!($204)) {
   label = 12;
   break;
  }
  $121 = $i;
  $205 = $121;
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + 16|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ($208|0)==(0|0);
  if (!($209)) {
   $210 = HEAP32[$208>>2]|0;
   $211 = (($210) + 4|0);
   $212 = HEAP32[$211>>2]|0;
   __THREW__ = 0;
   invoke_vi($212|0,($208|0));
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    label = 11;
    break;
   }
  }
  $120 = $i;
  $215 = $120;
  $216 = HEAP32[$215>>2]|0;
  $217 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($216)|0);
  HEAP32[$215>>2] = $217;
 }
 L12: do {
  if ((label|0) == 12) {
   $223 = (($167) + 128|0);
   $118 = $223;
   $224 = $118;
   $117 = $224;
   $225 = $117;
   $116 = $225;
   $226 = $116;
   $227 = HEAP32[$226>>2]|0;
   $114 = $119;
   $115 = $227;
   $228 = $114;
   $229 = $115;
   $112 = $228;
   $113 = $229;
   $230 = $112;
   $231 = $113;
   HEAP32[$230>>2] = $231;
   ;HEAP8[$111+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$111+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$111+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$111+3>>0]=HEAP8[$119+3>>0]|0;
   $110 = $159;
   $232 = $110;
   ;HEAP8[$__p1$i$i6+0>>0]=HEAP8[$111+0>>0]|0;HEAP8[$__p1$i$i6+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$__p1$i$i6+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$__p1$i$i6+3>>0]=HEAP8[$111+3>>0]|0;
   $109 = $232;
   $233 = $109;
   $234 = HEAP32[$__p1$i$i6>>2]|0;
   HEAP32[$233>>2] = $234;
   ;HEAP32[$i+0>>2]=HEAP32[$159+0>>2]|0;
   while(1) {
    $235 = (($167) + 128|0);
    $107 = $235;
    $236 = $107;
    $106 = $236;
    $237 = $106;
    $105 = $237;
    $238 = $105;
    $239 = (($238) + 4|0);
    $104 = $239;
    $240 = $104;
    $103 = $240;
    $241 = $103;
    $102 = $241;
    $242 = $102;
    $101 = $242;
    $243 = $101;
    $99 = $108;
    $100 = $243;
    $244 = $99;
    $245 = $100;
    $97 = $244;
    $98 = $245;
    $246 = $97;
    $247 = $98;
    HEAP32[$246>>2] = $247;
    ;HEAP8[$96+0>>0]=HEAP8[$108+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$108+3>>0]|0;
    $95 = $160;
    $248 = $95;
    ;HEAP8[$__p1$i$i11+0>>0]=HEAP8[$96+0>>0]|0;HEAP8[$__p1$i$i11+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$__p1$i$i11+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$__p1$i$i11+3>>0]=HEAP8[$96+3>>0]|0;
    $94 = $248;
    $249 = $94;
    $250 = HEAP32[$__p1$i$i11>>2]|0;
    HEAP32[$249>>2] = $250;
    $92 = $i;
    $93 = $160;
    $251 = $92;
    $252 = $93;
    $90 = $251;
    $91 = $252;
    $253 = $90;
    $254 = HEAP32[$253>>2]|0;
    $255 = $91;
    $256 = HEAP32[$255>>2]|0;
    $257 = ($254|0)==($256|0);
    $258 = $257 ^ 1;
    if (!($258)) {
     break;
    }
    $89 = $i;
    $259 = $89;
    $260 = HEAP32[$259>>2]|0;
    $261 = (($260) + 16|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = ($262|0)==(0|0);
    if (!($263)) {
     $264 = HEAP32[$262>>2]|0;
     $265 = (($264) + 4|0);
     $266 = HEAP32[$265>>2]|0;
     __THREW__ = 0;
     invoke_vi($266|0,($262|0));
     $267 = __THREW__; __THREW__ = 0;
     $268 = $267&1;
     if ($268) {
      label = 11;
      break L12;
     }
    }
    $88 = $i;
    $269 = $88;
    $270 = HEAP32[$269>>2]|0;
    $271 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($270)|0);
    HEAP32[$269>>2] = $271;
   }
   $272 = (($167) + 140|0);
   $86 = $272;
   $273 = $86;
   $85 = $273;
   $274 = $85;
   $84 = $274;
   $275 = $84;
   $276 = HEAP32[$275>>2]|0;
   $82 = $87;
   $83 = $276;
   $277 = $82;
   $278 = $83;
   $80 = $277;
   $81 = $278;
   $279 = $80;
   $280 = $81;
   HEAP32[$279>>2] = $280;
   ;HEAP8[$79+0>>0]=HEAP8[$87+0>>0]|0;HEAP8[$79+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$87+3>>0]|0;
   $78 = $161;
   $281 = $78;
   ;HEAP8[$__p1$i$i16+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$__p1$i$i16+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$__p1$i$i16+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$__p1$i$i16+3>>0]=HEAP8[$79+3>>0]|0;
   $77 = $281;
   $282 = $77;
   $283 = HEAP32[$__p1$i$i16>>2]|0;
   HEAP32[$282>>2] = $283;
   ;HEAP32[$i+0>>2]=HEAP32[$161+0>>2]|0;
   while(1) {
    $284 = (($167) + 140|0);
    $75 = $284;
    $285 = $75;
    $74 = $285;
    $286 = $74;
    $73 = $286;
    $287 = $73;
    $288 = (($287) + 4|0);
    $72 = $288;
    $289 = $72;
    $71 = $289;
    $290 = $71;
    $70 = $290;
    $291 = $70;
    $69 = $291;
    $292 = $69;
    $67 = $76;
    $68 = $292;
    $293 = $67;
    $294 = $68;
    $65 = $293;
    $66 = $294;
    $295 = $65;
    $296 = $66;
    HEAP32[$295>>2] = $296;
    ;HEAP8[$64+0>>0]=HEAP8[$76+0>>0]|0;HEAP8[$64+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$76+3>>0]|0;
    $63 = $162;
    $297 = $63;
    ;HEAP8[$__p1$i$i21+0>>0]=HEAP8[$64+0>>0]|0;HEAP8[$__p1$i$i21+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$__p1$i$i21+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$__p1$i$i21+3>>0]=HEAP8[$64+3>>0]|0;
    $62 = $297;
    $298 = $62;
    $299 = HEAP32[$__p1$i$i21>>2]|0;
    HEAP32[$298>>2] = $299;
    $60 = $i;
    $61 = $162;
    $300 = $60;
    $301 = $61;
    $58 = $300;
    $59 = $301;
    $302 = $58;
    $303 = HEAP32[$302>>2]|0;
    $304 = $59;
    $305 = HEAP32[$304>>2]|0;
    $306 = ($303|0)==($305|0);
    $307 = $306 ^ 1;
    if (!($307)) {
     break;
    }
    $57 = $i;
    $308 = $57;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($309) + 16|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = ($311|0)==(0|0);
    if (!($312)) {
     $313 = HEAP32[$311>>2]|0;
     $314 = (($313) + 4|0);
     $315 = HEAP32[$314>>2]|0;
     __THREW__ = 0;
     invoke_vi($315|0,($311|0));
     $316 = __THREW__; __THREW__ = 0;
     $317 = $316&1;
     if ($317) {
      label = 11;
      break L12;
     }
    }
    $56 = $i;
    $318 = $56;
    $319 = HEAP32[$318>>2]|0;
    $320 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($319)|0);
    HEAP32[$318>>2] = $320;
   }
   $321 = (($167) + 152|0);
   $54 = $321;
   $322 = $54;
   $53 = $322;
   $323 = $53;
   $52 = $323;
   $324 = $52;
   $325 = HEAP32[$324>>2]|0;
   $50 = $55;
   $51 = $325;
   $326 = $50;
   $327 = $51;
   $48 = $326;
   $49 = $327;
   $328 = $48;
   $329 = $49;
   HEAP32[$328>>2] = $329;
   ;HEAP8[$47+0>>0]=HEAP8[$55+0>>0]|0;HEAP8[$47+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$55+3>>0]|0;
   $46 = $163;
   $330 = $46;
   ;HEAP8[$__p1$i$i26+0>>0]=HEAP8[$47+0>>0]|0;HEAP8[$__p1$i$i26+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$__p1$i$i26+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$__p1$i$i26+3>>0]=HEAP8[$47+3>>0]|0;
   $45 = $330;
   $331 = $45;
   $332 = HEAP32[$__p1$i$i26>>2]|0;
   HEAP32[$331>>2] = $332;
   ;HEAP32[$i+0>>2]=HEAP32[$163+0>>2]|0;
   while(1) {
    $333 = (($167) + 152|0);
    $43 = $333;
    $334 = $43;
    $42 = $334;
    $335 = $42;
    $41 = $335;
    $336 = $41;
    $337 = (($336) + 4|0);
    $40 = $337;
    $338 = $40;
    $39 = $338;
    $339 = $39;
    $38 = $339;
    $340 = $38;
    $37 = $340;
    $341 = $37;
    $35 = $44;
    $36 = $341;
    $342 = $35;
    $343 = $36;
    $33 = $342;
    $34 = $343;
    $344 = $33;
    $345 = $34;
    HEAP32[$344>>2] = $345;
    ;HEAP8[$32+0>>0]=HEAP8[$44+0>>0]|0;HEAP8[$32+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$44+3>>0]|0;
    $31 = $164;
    $346 = $31;
    ;HEAP8[$__p1$i$i31+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$__p1$i$i31+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$__p1$i$i31+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$__p1$i$i31+3>>0]=HEAP8[$32+3>>0]|0;
    $30 = $346;
    $347 = $30;
    $348 = HEAP32[$__p1$i$i31>>2]|0;
    HEAP32[$347>>2] = $348;
    $28 = $i;
    $29 = $164;
    $349 = $28;
    $350 = $29;
    $26 = $349;
    $27 = $350;
    $351 = $26;
    $352 = HEAP32[$351>>2]|0;
    $353 = $27;
    $354 = HEAP32[$353>>2]|0;
    $355 = ($352|0)==($354|0);
    $356 = $355 ^ 1;
    if (!($356)) {
     break;
    }
    $25 = $i;
    $357 = $25;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($358) + 16|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ($360|0)==(0|0);
    if (!($361)) {
     $362 = HEAP32[$360>>2]|0;
     $363 = (($362) + 4|0);
     $364 = HEAP32[$363>>2]|0;
     __THREW__ = 0;
     invoke_vi($364|0,($360|0));
     $365 = __THREW__; __THREW__ = 0;
     $366 = $365&1;
     if ($366) {
      label = 11;
      break L12;
     }
    }
    $24 = $i;
    $367 = $24;
    $368 = HEAP32[$367>>2]|0;
    $369 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($368)|0);
    HEAP32[$367>>2] = $369;
   }
   $23 = $fi;
   $370 = $23;
   $22 = $370;
   $371 = (($167) + 32|0);
   $21 = $371;
   $372 = $21;
   $373 = HEAP32[$372>>2]|0;
   $19 = $372;
   $20 = $373;
   $374 = $20;
   $17 = $165;
   $18 = $374;
   $375 = $17;
   $376 = $18;
   $15 = $375;
   $16 = $376;
   $377 = $15;
   $378 = $16;
   HEAP32[$377>>2] = $378;
   ;HEAP32[$fi+0>>2]=HEAP32[$165+0>>2]|0;
   while(1) {
    $379 = (($167) + 32|0);
    $14 = $379;
    $380 = $14;
    $381 = (($380) + 4|0);
    $382 = HEAP32[$381>>2]|0;
    $12 = $380;
    $13 = $382;
    $383 = $13;
    $10 = $166;
    $11 = $383;
    $384 = $10;
    $385 = $11;
    $8 = $384;
    $9 = $385;
    $386 = $8;
    $387 = $9;
    HEAP32[$386>>2] = $387;
    $6 = $fi;
    $7 = $166;
    $388 = $6;
    $389 = $7;
    $4 = $388;
    $5 = $389;
    $390 = $4;
    $3 = $390;
    $391 = $3;
    $392 = HEAP32[$391>>2]|0;
    $393 = $5;
    $2 = $393;
    $394 = $2;
    $395 = HEAP32[$394>>2]|0;
    $396 = ($392|0)==($395|0);
    $397 = $396 ^ 1;
    if (!($397)) {
     break;
    }
    $1 = $fi;
    $398 = $1;
    $399 = HEAP32[$398>>2]|0;
    __THREW__ = 0;
    invoke_vi(542,($399|0));
    $400 = __THREW__; __THREW__ = 0;
    $401 = $400&1;
    if ($401) {
     label = 11;
     break L12;
    }
    $0 = $fi;
    $402 = $0;
    $403 = HEAP32[$402>>2]|0;
    $404 = (($403) + 44|0);
    HEAP32[$402>>2] = $404;
   }
   $405 = (($167) + 164|0);
   __THREW__ = 0;
   invoke_vi(541,($405|0));
   $406 = __THREW__; __THREW__ = 0;
   $407 = $406&1;
   if ($407) {
    $438 = ___cxa_find_matching_catch()|0;
    $439 = tempRet0;
    $157 = $438;
    $158 = $439;
    label = 62;
    break;
   }
   $408 = (($167) + 152|0);
   __THREW__ = 0;
   invoke_vi(543,($408|0));
   $409 = __THREW__; __THREW__ = 0;
   $410 = $409&1;
   if ($410) {
    $440 = ___cxa_find_matching_catch()|0;
    $441 = tempRet0;
    $157 = $440;
    $158 = $441;
    label = 65;
    break;
   }
   $411 = (($167) + 140|0);
   __THREW__ = 0;
   invoke_vi(543,($411|0));
   $412 = __THREW__; __THREW__ = 0;
   $413 = $412&1;
   if ($413) {
    $445 = ___cxa_find_matching_catch()|0;
    $446 = tempRet0;
    $157 = $445;
    $158 = $446;
    label = 68;
    break;
   }
   $414 = (($167) + 128|0);
   __THREW__ = 0;
   invoke_vi(543,($414|0));
   $415 = __THREW__; __THREW__ = 0;
   $416 = $415&1;
   if ($416) {
    $450 = ___cxa_find_matching_catch()|0;
    $451 = tempRet0;
    $157 = $450;
    $158 = $451;
    label = 71;
    break;
   }
   $417 = (($167) + 116|0);
   __THREW__ = 0;
   invoke_vi(543,($417|0));
   $418 = __THREW__; __THREW__ = 0;
   $419 = $418&1;
   if ($419) {
    $455 = ___cxa_find_matching_catch()|0;
    $456 = tempRet0;
    $157 = $455;
    $158 = $456;
    label = 74;
    break;
   }
   $420 = (($167) + 100|0);
   __THREW__ = 0;
   invoke_vi(509,($420|0));
   $421 = __THREW__; __THREW__ = 0;
   $422 = $421&1;
   if ($422) {
    $460 = ___cxa_find_matching_catch()|0;
    $461 = tempRet0;
    $157 = $460;
    $158 = $461;
    label = 77;
    break;
   }
   $423 = (($167) + 88|0);
   __THREW__ = 0;
   invoke_vi(509,($423|0));
   $424 = __THREW__; __THREW__ = 0;
   $425 = $424&1;
   if ($425) {
    $465 = ___cxa_find_matching_catch()|0;
    $466 = tempRet0;
    $157 = $465;
    $158 = $466;
    label = 80;
    break;
   }
   $426 = (($167) + 64|0);
   __THREW__ = 0;
   invoke_vi(544,($426|0));
   $427 = __THREW__; __THREW__ = 0;
   $428 = $427&1;
   if ($428) {
    $470 = ___cxa_find_matching_catch()|0;
    $471 = tempRet0;
    $157 = $470;
    $158 = $471;
    label = 83;
    break;
   }
   $429 = (($167) + 48|0);
   __THREW__ = 0;
   invoke_vi(545,($429|0));
   $430 = __THREW__; __THREW__ = 0;
   $431 = $430&1;
   if ($431) {
    $475 = ___cxa_find_matching_catch()|0;
    $476 = tempRet0;
    $157 = $475;
    $158 = $476;
    label = 86;
    break;
   }
   $432 = (($167) + 32|0);
   __THREW__ = 0;
   invoke_vi(546,($432|0));
   $433 = __THREW__; __THREW__ = 0;
   $434 = $433&1;
   if ($434) {
    $480 = ___cxa_find_matching_catch()|0;
    $481 = tempRet0;
    $157 = $480;
    $158 = $481;
    label = 89;
    break;
   }
   $435 = (($167) + 16|0);
   __THREW__ = 0;
   invoke_vi(547,($435|0));
   $436 = __THREW__; __THREW__ = 0;
   $437 = $436&1;
   if ($437) {
    $485 = ___cxa_find_matching_catch()|0;
    $486 = tempRet0;
    $157 = $485;
    $158 = $486;
    break;
   } else {
    __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED1Ev($167);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   $218 = ___cxa_find_matching_catch()|0;
   $219 = tempRet0;
   $157 = $218;
   $158 = $219;
   $220 = (($167) + 164|0);
   __THREW__ = 0;
   invoke_vi(541,($220|0));
   $221 = __THREW__; __THREW__ = 0;
   $222 = $221&1;
   if ($222) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 62;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 62) {
   $442 = (($167) + 152|0);
   __THREW__ = 0;
   invoke_vi(543,($442|0));
   $443 = __THREW__; __THREW__ = 0;
   $444 = $443&1;
   if ($444) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 65;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 65) {
   $447 = (($167) + 140|0);
   __THREW__ = 0;
   invoke_vi(543,($447|0));
   $448 = __THREW__; __THREW__ = 0;
   $449 = $448&1;
   if ($449) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 68;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 68) {
   $452 = (($167) + 128|0);
   __THREW__ = 0;
   invoke_vi(543,($452|0));
   $453 = __THREW__; __THREW__ = 0;
   $454 = $453&1;
   if ($454) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 71;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 71) {
   $457 = (($167) + 116|0);
   __THREW__ = 0;
   invoke_vi(543,($457|0));
   $458 = __THREW__; __THREW__ = 0;
   $459 = $458&1;
   if ($459) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 74;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 74) {
   $462 = (($167) + 100|0);
   __THREW__ = 0;
   invoke_vi(509,($462|0));
   $463 = __THREW__; __THREW__ = 0;
   $464 = $463&1;
   if ($464) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 77;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 77) {
   $467 = (($167) + 88|0);
   __THREW__ = 0;
   invoke_vi(509,($467|0));
   $468 = __THREW__; __THREW__ = 0;
   $469 = $468&1;
   if ($469) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 80;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 80) {
   $472 = (($167) + 64|0);
   __THREW__ = 0;
   invoke_vi(544,($472|0));
   $473 = __THREW__; __THREW__ = 0;
   $474 = $473&1;
   if ($474) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 83;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 83) {
   $477 = (($167) + 48|0);
   __THREW__ = 0;
   invoke_vi(545,($477|0));
   $478 = __THREW__; __THREW__ = 0;
   $479 = $478&1;
   if ($479) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 86;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 86) {
   $482 = (($167) + 32|0);
   __THREW__ = 0;
   invoke_vi(546,($482|0));
   $483 = __THREW__; __THREW__ = 0;
   $484 = $483&1;
   if ($484) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    label = 89;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 89) {
   $487 = (($167) + 16|0);
   __THREW__ = 0;
   invoke_vi(547,($487|0));
   $488 = __THREW__; __THREW__ = 0;
   $489 = $488&1;
   if ($489) {
    $494 = ___cxa_find_matching_catch(0|0)|0;
    $495 = tempRet0;
    ___clang_call_terminate($494);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(548,($167|0));
 $490 = __THREW__; __THREW__ = 0;
 $491 = $490&1;
 if ($491) {
  $494 = ___cxa_find_matching_catch(0|0)|0;
  $495 = tempRet0;
  ___clang_call_terminate($494);
  // unreachable;
 }
 $492 = $157;
 $493 = $158;
 ___resumeException($492|0);
 // unreachable;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4ShotIfNS_8Matrix44IfEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4Box3IfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4Box3IfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI8MyVertexNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI8MyVertexNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -36|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 36)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6MyEdgeNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6MyEdgeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -1|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $25 = $62;
 $26 = $63;
 $27 = $73;
 $74 = $25;
 $75 = $26;
 $76 = $27;
 $22 = $74;
 $23 = $75;
 $24 = $76;
 $77 = $23;
 $21 = $77;
 $78 = $21;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6MyFaceNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6MyFaceNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -44|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 44)&-1;
 $25 = $62;
 $26 = $63;
 $27 = $74;
 $75 = $25;
 $76 = $26;
 $77 = $27;
 $22 = $75;
 $23 = $76;
 $24 = $77;
 $78 = $23;
 $21 = $78;
 $79 = $21;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 20|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 $38 = $31;
 $28 = $37;
 $29 = $38;
 $39 = $28;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $40;
 $20 = $34;
 $41 = ($36|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $12 = $35;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 $10 = $42;
 $11 = $43;
 $44 = $10;
 while(1) {
  $45 = $11;
  $46 = (($44) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($45|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $9 = $44;
  $49 = $9;
  $50 = (($49) + 8|0);
  $8 = $50;
  $51 = $8;
  $7 = $51;
  $52 = $7;
  $53 = (($44) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + -1|0);
  HEAP32[$53>>2] = $55;
  $0 = $55;
  $56 = $0;
  $4 = $52;
  $5 = $56;
  $57 = $4;
  $58 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $57;
  $2 = $58;
 }
 $15 = $35;
 $59 = $15;
 $60 = (($59) + 8|0);
 $14 = $60;
 $61 = $14;
 $13 = $61;
 $62 = $13;
 $63 = HEAP32[$35>>2]|0;
 $19 = $35;
 $64 = $19;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $16 = $67;
 $68 = $16;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $25 = $62;
 $26 = $63;
 $27 = $73;
 $74 = $25;
 $75 = $26;
 $76 = $27;
 $22 = $74;
 $23 = $75;
 $24 = $76;
 $77 = $23;
 $21 = $77;
 $78 = $21;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZN3vcg4Box3IfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 112|0;
 $22 = sp + 76|0;
 $27 = sp + 100|0;
 $23 = $this;
 $24 = $__nd;
 $28 = $23;
 $29 = $24;
 $20 = $22;
 $21 = -1;
 $30 = $20;
 $31 = $21;
 $18 = $30;
 $19 = $31;
 $32 = $18;
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $33;
 $17 = $27;
 $34 = ($29|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $24;
 $36 = HEAP32[$35>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($28,$36);
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($28,$39);
 $3 = $28;
 $40 = $3;
 $41 = (($40) + 4|0);
 $2 = $41;
 $42 = $2;
 $1 = $42;
 $43 = $1;
 $__na = $43;
 $44 = $__na;
 $45 = $24;
 $46 = (($45) + 16|0);
 $0 = $46;
 $47 = $0;
 $7 = $44;
 $8 = $47;
 $48 = $7;
 $49 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $48;
 $5 = $49;
 $50 = $5;
 __THREW__ = 0;
 invoke_vi(416,($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $25 = $60;
  $26 = $61;
  $62 = $25;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $53 = $__na;
 $54 = $24;
 $14 = $53;
 $15 = $54;
 $16 = 1;
 $55 = $14;
 $56 = $15;
 $57 = $16;
 $11 = $55;
 $12 = $56;
 $13 = $57;
 $58 = $12;
 $10 = $58;
 $59 = $10;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 56|0);
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6MyMeshC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 724|0;
 $4 = sp + 725|0;
 $7 = sp + 726|0;
 $10 = sp + 727|0;
 $16 = sp + 60|0;
 $22 = sp + 84|0;
 $28 = sp + 108|0;
 $33 = sp + 128|0;
 $36 = sp + 140|0;
 $41 = sp + 160|0;
 $42 = sp + 164|0;
 $43 = sp + 168|0;
 $50 = sp + 196|0;
 $56 = sp + 220|0;
 $62 = sp + 244|0;
 $67 = sp + 264|0;
 $70 = sp + 276|0;
 $75 = sp + 296|0;
 $76 = sp + 300|0;
 $77 = sp + 304|0;
 $84 = sp + 672|0;
 $90 = sp + 716|0;
 $96 = sp + 380|0;
 $101 = sp + 400|0;
 $104 = sp + 412|0;
 $109 = sp + 432|0;
 $110 = sp + 436|0;
 $111 = sp + 440|0;
 $118 = sp + 468|0;
 $124 = sp + 492|0;
 $130 = sp + 516|0;
 $135 = sp + 536|0;
 $138 = sp + 548|0;
 $143 = sp + 568|0;
 $144 = sp + 572|0;
 $145 = sp + 576|0;
 $152 = sp + 604|0;
 $158 = sp + 628|0;
 $164 = sp + 652|0;
 $169 = sp + 28|0;
 $172 = sp + 676|0;
 $177 = sp + 692|0;
 $178 = sp + 348|0;
 $179 = sp + 700|0;
 $182 = $this;
 $185 = $182;
 $181 = $185;
 $186 = $181;
 $180 = $186;
 $187 = $180;
 $176 = $187;
 $188 = $176;
 $175 = $188;
 $150 = $152;
 $151 = -1;
 $189 = $150;
 $190 = $151;
 $148 = $189;
 $149 = $190;
 $191 = $148;
 HEAP32[$191>>2] = 0;
 $192 = HEAP32[$152>>2]|0;
 HEAP32[$177>>2] = $192;
 $153 = $177;
 HEAP32[$188>>2] = 0;
 $193 = (($188) + 4|0);
 $156 = $158;
 $157 = -1;
 $194 = $156;
 $195 = $157;
 $154 = $194;
 $155 = $195;
 $196 = $154;
 HEAP32[$196>>2] = 0;
 $197 = HEAP32[$158>>2]|0;
 HEAP32[$178>>2] = $197;
 $159 = $178;
 HEAP32[$193>>2] = 0;
 $198 = (($188) + 8|0);
 $162 = $164;
 $163 = -1;
 $199 = $162;
 $200 = $163;
 $160 = $199;
 $161 = $200;
 $201 = $160;
 HEAP32[$201>>2] = 0;
 $202 = HEAP32[$164>>2]|0;
 HEAP32[$179>>2] = $202;
 $165 = $179;
 $173 = $198;
 $174 = 0;
 $203 = $173;
 $204 = $174;
 $171 = $203;
 HEAP32[$172>>2] = $204;
 $205 = $171;
 $170 = $172;
 $206 = $170;
 $207 = HEAP32[$206>>2]|0;
 $168 = $205;
 HEAP32[$169>>2] = $207;
 $208 = $168;
 $167 = $208;
 $166 = $169;
 $209 = $166;
 $210 = HEAP32[$209>>2]|0;
 HEAP32[$208>>2] = $210;
 $211 = (($185) + 16|0);
 $147 = $211;
 $212 = $147;
 $146 = $212;
 $213 = $146;
 $142 = $213;
 $214 = $142;
 $141 = $214;
 $116 = $118;
 $117 = -1;
 $215 = $116;
 $216 = $117;
 $114 = $215;
 $115 = $216;
 $217 = $114;
 HEAP32[$217>>2] = 0;
 $218 = HEAP32[$118>>2]|0;
 HEAP32[$143>>2] = $218;
 $119 = $143;
 HEAP32[$214>>2] = 0;
 $219 = (($214) + 4|0);
 $122 = $124;
 $123 = -1;
 $220 = $122;
 $221 = $123;
 $120 = $220;
 $121 = $221;
 $222 = $120;
 HEAP32[$222>>2] = 0;
 $223 = HEAP32[$124>>2]|0;
 HEAP32[$144>>2] = $223;
 $125 = $144;
 HEAP32[$219>>2] = 0;
 $224 = (($214) + 8|0);
 $128 = $130;
 $129 = -1;
 $225 = $128;
 $226 = $129;
 $126 = $225;
 $127 = $226;
 $227 = $126;
 HEAP32[$227>>2] = 0;
 $228 = HEAP32[$130>>2]|0;
 HEAP32[$145>>2] = $228;
 $131 = $145;
 $139 = $224;
 $140 = 0;
 $229 = $139;
 $230 = $140;
 $137 = $229;
 HEAP32[$138>>2] = $230;
 $231 = $137;
 $136 = $138;
 $232 = $136;
 $233 = HEAP32[$232>>2]|0;
 $134 = $231;
 HEAP32[$135>>2] = $233;
 $234 = $134;
 $133 = $234;
 $132 = $135;
 $235 = $132;
 $236 = HEAP32[$235>>2]|0;
 HEAP32[$234>>2] = $236;
 $237 = (($185) + 32|0);
 $113 = $237;
 $238 = $113;
 $112 = $238;
 $239 = $112;
 $108 = $239;
 $240 = $108;
 $107 = $240;
 $82 = $84;
 $83 = -1;
 $241 = $82;
 $242 = $83;
 $80 = $241;
 $81 = $242;
 $243 = $80;
 HEAP32[$243>>2] = 0;
 $244 = HEAP32[$84>>2]|0;
 HEAP32[$109>>2] = $244;
 $85 = $109;
 HEAP32[$240>>2] = 0;
 $245 = (($240) + 4|0);
 $88 = $90;
 $89 = -1;
 $246 = $88;
 $247 = $89;
 $86 = $246;
 $87 = $247;
 $248 = $86;
 HEAP32[$248>>2] = 0;
 $249 = HEAP32[$90>>2]|0;
 HEAP32[$110>>2] = $249;
 $91 = $110;
 HEAP32[$245>>2] = 0;
 $250 = (($240) + 8|0);
 $94 = $96;
 $95 = -1;
 $251 = $94;
 $252 = $95;
 $92 = $251;
 $93 = $252;
 $253 = $92;
 HEAP32[$253>>2] = 0;
 $254 = HEAP32[$96>>2]|0;
 HEAP32[$111>>2] = $254;
 $97 = $111;
 $105 = $250;
 $106 = 0;
 $255 = $105;
 $256 = $106;
 $103 = $255;
 HEAP32[$104>>2] = $256;
 $257 = $103;
 $102 = $104;
 $258 = $102;
 $259 = HEAP32[$258>>2]|0;
 $100 = $257;
 HEAP32[$101>>2] = $259;
 $260 = $100;
 $99 = $260;
 $98 = $101;
 $261 = $98;
 $262 = HEAP32[$261>>2]|0;
 HEAP32[$260>>2] = $262;
 $263 = (($185) + 48|0);
 __THREW__ = 0;
 invoke_vi(549,($263|0));
 $264 = __THREW__; __THREW__ = 0;
 $265 = $264&1;
 do {
  if ($265) {
   $349 = ___cxa_find_matching_catch()|0;
   $350 = tempRet0;
   $183 = $349;
   $184 = $350;
  } else {
   $266 = (($185) + 64|0);
   __THREW__ = 0;
   invoke_vi(550,($266|0));
   $267 = __THREW__; __THREW__ = 0;
   $268 = $267&1;
   do {
    if ($268) {
     $351 = ___cxa_find_matching_catch()|0;
     $352 = tempRet0;
     $183 = $351;
     $184 = $352;
    } else {
     $269 = (($185) + 88|0);
     $79 = $269;
     $270 = $79;
     $78 = $270;
     $271 = $78;
     $74 = $271;
     $272 = $74;
     $73 = $272;
     $48 = $50;
     $49 = -1;
     $273 = $48;
     $274 = $49;
     $46 = $273;
     $47 = $274;
     $275 = $46;
     HEAP32[$275>>2] = 0;
     $276 = HEAP32[$50>>2]|0;
     HEAP32[$75>>2] = $276;
     $51 = $75;
     HEAP32[$272>>2] = 0;
     $277 = (($272) + 4|0);
     $54 = $56;
     $55 = -1;
     $278 = $54;
     $279 = $55;
     $52 = $278;
     $53 = $279;
     $280 = $52;
     HEAP32[$280>>2] = 0;
     $281 = HEAP32[$56>>2]|0;
     HEAP32[$76>>2] = $281;
     $57 = $76;
     HEAP32[$277>>2] = 0;
     $282 = (($272) + 8|0);
     $60 = $62;
     $61 = -1;
     $283 = $60;
     $284 = $61;
     $58 = $283;
     $59 = $284;
     $285 = $58;
     HEAP32[$285>>2] = 0;
     $286 = HEAP32[$62>>2]|0;
     HEAP32[$77>>2] = $286;
     $63 = $77;
     $71 = $282;
     $72 = 0;
     $287 = $71;
     $288 = $72;
     $69 = $287;
     HEAP32[$70>>2] = $288;
     $289 = $69;
     $68 = $70;
     $290 = $68;
     $291 = HEAP32[$290>>2]|0;
     $66 = $289;
     HEAP32[$67>>2] = $291;
     $292 = $66;
     $65 = $292;
     $64 = $67;
     $293 = $64;
     $294 = HEAP32[$293>>2]|0;
     HEAP32[$292>>2] = $294;
     $295 = (($185) + 100|0);
     $45 = $295;
     $296 = $45;
     $44 = $296;
     $297 = $44;
     $40 = $297;
     $298 = $40;
     $39 = $298;
     $14 = $16;
     $15 = -1;
     $299 = $14;
     $300 = $15;
     $12 = $299;
     $13 = $300;
     $301 = $12;
     HEAP32[$301>>2] = 0;
     $302 = HEAP32[$16>>2]|0;
     HEAP32[$41>>2] = $302;
     $17 = $41;
     HEAP32[$298>>2] = 0;
     $303 = (($298) + 4|0);
     $20 = $22;
     $21 = -1;
     $304 = $20;
     $305 = $21;
     $18 = $304;
     $19 = $305;
     $306 = $18;
     HEAP32[$306>>2] = 0;
     $307 = HEAP32[$22>>2]|0;
     HEAP32[$42>>2] = $307;
     $23 = $42;
     HEAP32[$303>>2] = 0;
     $308 = (($298) + 8|0);
     $26 = $28;
     $27 = -1;
     $309 = $26;
     $310 = $27;
     $24 = $309;
     $25 = $310;
     $311 = $24;
     HEAP32[$311>>2] = 0;
     $312 = HEAP32[$28>>2]|0;
     HEAP32[$43>>2] = $312;
     $29 = $43;
     $37 = $308;
     $38 = 0;
     $313 = $37;
     $314 = $38;
     $35 = $313;
     HEAP32[$36>>2] = $314;
     $315 = $35;
     $34 = $36;
     $316 = $34;
     $317 = HEAP32[$316>>2]|0;
     $32 = $315;
     HEAP32[$33>>2] = $317;
     $318 = $32;
     $31 = $318;
     $30 = $33;
     $319 = $30;
     $320 = HEAP32[$319>>2]|0;
     HEAP32[$318>>2] = $320;
     $321 = (($185) + 116|0);
     $11 = $321;
     $322 = $11;
     $9 = $322;
     $323 = $9;
     __THREW__ = 0;
     invoke_vii(551,($323|0),($10|0));
     $324 = __THREW__; __THREW__ = 0;
     $325 = $324&1;
     do {
      if ($325) {
       $353 = ___cxa_find_matching_catch()|0;
       $354 = tempRet0;
       $183 = $353;
       $184 = $354;
      } else {
       $326 = (($185) + 128|0);
       $8 = $326;
       $327 = $8;
       $6 = $327;
       $328 = $6;
       __THREW__ = 0;
       invoke_vii(551,($328|0),($7|0));
       $329 = __THREW__; __THREW__ = 0;
       $330 = $329&1;
       do {
        if ($330) {
         $355 = ___cxa_find_matching_catch()|0;
         $356 = tempRet0;
         $183 = $355;
         $184 = $356;
        } else {
         $331 = (($185) + 140|0);
         $5 = $331;
         $332 = $5;
         $3 = $332;
         $333 = $3;
         __THREW__ = 0;
         invoke_vii(551,($333|0),($4|0));
         $334 = __THREW__; __THREW__ = 0;
         $335 = $334&1;
         do {
          if ($335) {
           $357 = ___cxa_find_matching_catch()|0;
           $358 = tempRet0;
           $183 = $357;
           $184 = $358;
          } else {
           $336 = (($185) + 152|0);
           $2 = $336;
           $337 = $2;
           $0 = $337;
           $338 = $0;
           __THREW__ = 0;
           invoke_vii(551,($338|0),($1|0));
           $339 = __THREW__; __THREW__ = 0;
           $340 = $339&1;
           do {
            if ($340) {
             $359 = ___cxa_find_matching_catch()|0;
             $360 = tempRet0;
             $183 = $359;
             $184 = $360;
            } else {
             $341 = (($185) + 164|0);
             __THREW__ = 0;
             invoke_vi(552,($341|0));
             $342 = __THREW__; __THREW__ = 0;
             $343 = $342&1;
             do {
              if ($343) {
               $361 = ___cxa_find_matching_catch()|0;
               $362 = tempRet0;
               $183 = $361;
               $184 = $362;
              } else {
               $344 = (($185) + 296|0);
               __THREW__ = 0;
               invoke_vi(508,($344|0));
               $345 = __THREW__; __THREW__ = 0;
               $346 = $345&1;
               if (!($346)) {
                __THREW__ = 0;
                invoke_vi(467,($185|0));
                $347 = __THREW__; __THREW__ = 0;
                $348 = $347&1;
                if (!($348)) {
                 STACKTOP = sp;return;
                }
               }
               $363 = ___cxa_find_matching_catch()|0;
               $364 = tempRet0;
               $183 = $363;
               $184 = $364;
               __THREW__ = 0;
               invoke_vi(541,($341|0));
               $365 = __THREW__; __THREW__ = 0;
               $366 = $365&1;
               if ($366) {
                $391 = ___cxa_find_matching_catch(0|0)|0;
                $392 = tempRet0;
                ___clang_call_terminate($391);
                // unreachable;
               } else {
                break;
               }
              }
             } while(0);
             __THREW__ = 0;
             invoke_vi(543,($336|0));
             $367 = __THREW__; __THREW__ = 0;
             $368 = $367&1;
             if ($368) {
              $391 = ___cxa_find_matching_catch(0|0)|0;
              $392 = tempRet0;
              ___clang_call_terminate($391);
              // unreachable;
             } else {
              break;
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(543,($331|0));
           $369 = __THREW__; __THREW__ = 0;
           $370 = $369&1;
           if ($370) {
            $391 = ___cxa_find_matching_catch(0|0)|0;
            $392 = tempRet0;
            ___clang_call_terminate($391);
            // unreachable;
           } else {
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(543,($326|0));
         $371 = __THREW__; __THREW__ = 0;
         $372 = $371&1;
         if ($372) {
          $391 = ___cxa_find_matching_catch(0|0)|0;
          $392 = tempRet0;
          ___clang_call_terminate($391);
          // unreachable;
         } else {
          break;
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(543,($321|0));
       $373 = __THREW__; __THREW__ = 0;
       $374 = $373&1;
       if ($374) {
        $391 = ___cxa_find_matching_catch(0|0)|0;
        $392 = tempRet0;
        ___clang_call_terminate($391);
        // unreachable;
       } else {
        break;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(509,($295|0));
     $375 = __THREW__; __THREW__ = 0;
     $376 = $375&1;
     if ($376) {
      $391 = ___cxa_find_matching_catch(0|0)|0;
      $392 = tempRet0;
      ___clang_call_terminate($391);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(509,($269|0));
     $377 = __THREW__; __THREW__ = 0;
     $378 = $377&1;
     if ($378) {
      $391 = ___cxa_find_matching_catch(0|0)|0;
      $392 = tempRet0;
      ___clang_call_terminate($391);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(544,($266|0));
     $379 = __THREW__; __THREW__ = 0;
     $380 = $379&1;
     if ($380) {
      $391 = ___cxa_find_matching_catch(0|0)|0;
      $392 = tempRet0;
      ___clang_call_terminate($391);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(545,($263|0));
   $381 = __THREW__; __THREW__ = 0;
   $382 = $381&1;
   if ($382) {
    $391 = ___cxa_find_matching_catch(0|0)|0;
    $392 = tempRet0;
    ___clang_call_terminate($391);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(546,($237|0));
 $383 = __THREW__; __THREW__ = 0;
 $384 = $383&1;
 if ($384) {
  $391 = ___cxa_find_matching_catch(0|0)|0;
  $392 = tempRet0;
  ___clang_call_terminate($391);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(547,($211|0));
 $385 = __THREW__; __THREW__ = 0;
 $386 = $385&1;
 if ($386) {
  $391 = ___cxa_find_matching_catch(0|0)|0;
  $392 = tempRet0;
  ___clang_call_terminate($391);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(548,($185|0));
 $387 = __THREW__; __THREW__ = 0;
 $388 = $387&1;
 if ($388) {
  $391 = ___cxa_find_matching_catch(0|0)|0;
  $392 = tempRet0;
  ___clang_call_terminate($391);
  // unreachable;
 }
 $389 = $183;
 $390 = $184;
 ___resumeException($389|0);
 // unreachable;
}
function __ZN3vcg4Box3IfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4Box3IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4ShotIfNS_8Matrix44IfEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN3vcg6CameraIfEC1Ev($3);
 $4 = (($3) + 56|0);
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC1Ev($4);
 $5 = (($3) + 56|0);
 __THREW__ = 0;
 invoke_vi(553,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(554,($4|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN3vcg6CameraIfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6CameraIfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_E11SetIdentityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 __ZN3vcg8Matrix44IfE11SetIdentityEv($2);
 $3 = (($2) + 64|0);
 __ZN3vcg6Point3IfEC1Efff($1,0.0,0.0,0.0);
 (__ZN3vcg6Point3IfEaSERKS1_($3,$1)|0);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE11SetIdentityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfE11SetDiagonalEf($1,1.0);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE11SetDiagonalEf($this,$k) {
 $this = $this|0;
 $k = +$k;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $k;
 $2 = $0;
 __ZN3vcg8Matrix44IfE7SetZeroEv($2);
 $3 = $1;
 $4 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,0,0)|0);
 HEAPF32[$4>>2] = $3;
 $5 = $1;
 $6 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,1,1)|0);
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,2,2)|0);
 HEAPF32[$8>>2] = $7;
 $9 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,3,3)|0);
 HEAPF32[$9>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE7SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 dest=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE9ElementAtEii($this,$row,$col) {
 $this = $this|0;
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $row;
 $2 = $col;
 $3 = $0;
 $4 = $1;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  ___assert_fail((6696|0),(6720|0),249,(6768|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ($6|0)<(4);
 if (!($7)) {
  ___assert_fail((6696|0),(6720|0),249,(6768|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  ___assert_fail((6784|0),(6720|0),250,(6768|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)<(4);
 if ($11) {
  $12 = $1;
  $13 = $12 << 2;
  $14 = $2;
  $15 = (($13) + ($14))|0;
  $16 = (($3) + ($15<<2)|0);
  STACKTOP = sp;return ($16|0);
 } else {
  ___assert_fail((6784|0),(6720|0),250,(6768|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN3vcg8Matrix44IfEC1Ev($3);
 $4 = (($3) + 64|0);
 __THREW__ = 0;
 invoke_vi(555,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(556,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 }
 $11 = $1;
 $12 = $2;
 ___resumeException($11|0);
 // unreachable;
}
function __ZN3vcg8Matrix44IfEC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg6CameraIfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = (($1) + 4|0);
 __ZN3vcg6Point2IiEC1Eii($2,0,0);
 $3 = (($1) + 12|0);
 __ZN3vcg6Point2IfEC1Eff($3,0.0,0.0);
 $4 = (($1) + 20|0);
 __ZN3vcg6Point2IfEC1Eff($4,0.0,0.0);
 $5 = (($1) + 28|0);
 __ZN3vcg6Point2IfEC1Eff($5,0.0,0.0);
 $6 = (($1) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 36|0);
 $8 = (($7) + 12|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = (($1) + 36|0);
 $10 = (($9) + 8|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = (($1) + 36|0);
 $12 = (($11) + 4|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = (($1) + 36|0);
 HEAPF32[$13>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IiEC1Eii($this,$nx,$ny) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg6Point2IiEC2Eii($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IiEC2Eii($this,$nx,$ny) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC1ERKS4_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__comp;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $8 = sp + 36|0;
 $9 = sp + 117|0;
 $__t21$i = sp + 16|0;
 $12 = sp;
 $27 = sp + 116|0;
 $25 = $this;
 $26 = $__comp;
 $28 = $25;
 $29 = (($28) + 4|0);
 $24 = $29;
 $30 = $24;
 $23 = $30;
 $31 = $23;
 $22 = $31;
 $32 = $22;
 $21 = $32;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 HEAP32[$34>>2] = 0;
 $35 = (($28) + 8|0);
 ;HEAP8[$12+0>>0]=HEAP8[$27+0>>0]|0;
 $10 = $35;
 $11 = 0;
 $36 = $10;
 $37 = $11;
 ;HEAP8[$__t21$i+0>>0]=HEAP8[$12+0>>0]|0;
 $7 = $36;
 HEAP32[$8>>2] = $37;
 $38 = $7;
 $6 = $8;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $0 = $__t21$i;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $38;
 HEAP32[$4>>2] = $40;
 $41 = $3;
 $2 = $5;
 $1 = $4;
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $17 = $28;
 $44 = $17;
 $45 = (($44) + 4|0);
 $16 = $45;
 $46 = $16;
 $15 = $46;
 $47 = $15;
 $14 = $47;
 $48 = $14;
 $13 = $48;
 $49 = $13;
 $18 = $28;
 $50 = $18;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN3vcg4Box3IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC1Ev($1);
 $2 = (($1) + 12|0);
 __ZN3vcg6Point3IfEC1Ev($2);
 $3 = (__ZN3vcg6Point3IfE1XEv($1)|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = (($1) + 12|0);
 $5 = (__ZN3vcg6Point3IfE1XEv($4)|0);
 HEAPF32[$5>>2] = -1.0;
 $6 = (__ZN3vcg6Point3IfE1YEv($1)|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = (($1) + 12|0);
 $8 = (__ZN3vcg6Point3IfE1YEv($7)|0);
 HEAPF32[$8>>2] = -1.0;
 $9 = (__ZN3vcg6Point3IfE1ZEv($1)|0);
 HEAPF32[$9>>2] = 1.0;
 $10 = (($1) + 12|0);
 $11 = (__ZN3vcg6Point3IfE1ZEv($10)|0);
 HEAPF32[$11>>2] = -1.0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfE1XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfE1YEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Point3IfE1ZEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $11 = sp + 88|0;
 $17 = sp + 60|0;
 $20 = sp + 32|0;
 $21 = sp + 68|0;
 $22 = sp + 36|0;
 $23 = $this;
 $24 = $23;
 $19 = $24;
 $25 = $19;
 $18 = $25;
 $15 = $17;
 $16 = -1;
 $26 = $15;
 $27 = $16;
 $13 = $26;
 $14 = $27;
 $28 = $13;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$17>>2]|0;
 HEAP32[$20>>2] = $29;
 $0 = $20;
 HEAP32[$25>>2] = 0;
 $30 = (($25) + 4|0);
 $3 = $5;
 $4 = -1;
 $31 = $3;
 $32 = $4;
 $1 = $31;
 $2 = $32;
 $33 = $1;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$5>>2]|0;
 HEAP32[$21>>2] = $34;
 $6 = $21;
 HEAP32[$30>>2] = 0;
 $35 = (($25) + 8|0);
 $9 = $11;
 $10 = -1;
 $36 = $9;
 $37 = $10;
 $7 = $36;
 $8 = $37;
 $38 = $7;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$11>>2]|0;
 HEAP32[$22>>2] = $39;
 $12 = $22;
 __ZNSt3__117__compressed_pairIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEEC2ESH_($35,0);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairIPN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEEC2ESH_($this,$__t1) {
 $this = $this|0;
 $__t1 = $__t1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $6 = sp + 12|0;
 $5 = $this;
 HEAP32[$6>>2] = $__t1;
 $7 = $5;
 $4 = $6;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $2 = $7;
 HEAP32[$3>>2] = $9;
 $10 = $2;
 $1 = $10;
 $0 = $3;
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(7520,$0,7576);
 HEAP32[6808>>2] = ((8768 + 12|0));
 HEAP32[((6808 + 8|0))>>2] = ((8768 + 32|0));
 HEAP32[((6808 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(394,(((6808 + 8|0))|0),(7520|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6808 + 8|0)));
  ___resumeException($3|0);
  // unreachable;
 }
 HEAP32[((6808 + 80|0))>>2] = 0;
 HEAP32[((6808 + 84|0))>>2] = -1;
 $5 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(7624,$5,((7576 + 8|0)));
 HEAP32[6896>>2] = ((8848 + 12|0));
 HEAP32[((6896 + 4|0))>>2] = ((8848 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((6896 + 4|0))|0),(7624|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6896 + 4|0)));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((6896 + 76|0))>>2] = 0;
 HEAP32[((6896 + 80|0))>>2] = -1;
 $10 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(7672,$10,((7576 + 16|0)));
 HEAP32[6984>>2] = ((8848 + 12|0));
 HEAP32[((6984 + 4|0))>>2] = ((8848 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((6984 + 4|0))|0),(7672|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6984 + 4|0)));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[((6984 + 76|0))>>2] = 0;
 HEAP32[((6984 + 80|0))>>2] = -1;
 $15 = HEAP32[6984>>2]|0;
 $16 = (($15) + -12|0);
 $17 = HEAP32[$16>>2]|0;
 $$sum = (($17) + 24)|0;
 $18 = (6984 + ($$sum)|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[7072>>2] = ((8848 + 12|0));
 HEAP32[((7072 + 4|0))>>2] = ((8848 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((7072 + 4|0))|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((7072 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 HEAP32[((7072 + 76|0))>>2] = 0;
 HEAP32[((7072 + 80|0))>>2] = -1;
 $24 = HEAP32[6808>>2]|0;
 $25 = (($24) + -12|0);
 $26 = HEAP32[$25>>2]|0;
 $$sum5 = (($26) + 72)|0;
 $27 = (6808 + ($$sum5)|0);
 HEAP32[$27>>2] = 6896;
 $28 = HEAP32[6984>>2]|0;
 $29 = (($28) + -12|0);
 $30 = HEAP32[$29>>2]|0;
 $$sum6 = (($30) + 4)|0;
 $31 = (6984 + ($$sum6)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 | 8192;
 HEAP32[$31>>2] = $33;
 $34 = HEAP32[6984>>2]|0;
 $35 = (($34) + -12|0);
 $36 = HEAP32[$35>>2]|0;
 $$sum7 = (($36) + 72)|0;
 $37 = (6984 + ($$sum7)|0);
 HEAP32[$37>>2] = 6896;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(7720,$0,((7576 + 24|0)));
 HEAP32[7160>>2] = ((8808 + 12|0));
 HEAP32[((7160 + 8|0))>>2] = ((8808 + 32|0));
 HEAP32[((7160 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(394,(((7160 + 8|0))|0),(7720|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((7160 + 8|0)));
  ___resumeException($40|0);
  // unreachable;
 }
 HEAP32[((7160 + 80|0))>>2] = 0;
 HEAP32[((7160 + 84|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7776,$5,((7576 + 32|0)));
 HEAP32[7248>>2] = ((8888 + 12|0));
 HEAP32[((7248 + 4|0))>>2] = ((8888 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((7248 + 4|0))|0),(7776|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((7248 + 4|0)));
  ___resumeException($44|0);
  // unreachable;
 }
 HEAP32[((7248 + 76|0))>>2] = 0;
 HEAP32[((7248 + 80|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7824,$10,((7576 + 40|0)));
 HEAP32[7336>>2] = ((8888 + 12|0));
 HEAP32[((7336 + 4|0))>>2] = ((8888 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((7336 + 4|0))|0),(7824|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((7336 + 4|0)));
  ___resumeException($48|0);
  // unreachable;
 }
 HEAP32[((7336 + 76|0))>>2] = 0;
 HEAP32[((7336 + 80|0))>>2] = -1;
 $50 = HEAP32[7336>>2]|0;
 $51 = (($50) + -12|0);
 $52 = HEAP32[$51>>2]|0;
 $$sum8 = (($52) + 24)|0;
 $53 = (7336 + ($$sum8)|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[7424>>2] = ((8888 + 12|0));
 HEAP32[((7424 + 4|0))>>2] = ((8888 + 32|0));
 __THREW__ = 0;
 invoke_vii(394,(((7424 + 4|0))|0),($54|0));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((7424 + 4|0)));
  ___resumeException($57|0);
  // unreachable;
 } else {
  HEAP32[((7424 + 76|0))>>2] = 0;
  HEAP32[((7424 + 80|0))>>2] = -1;
  $59 = HEAP32[7160>>2]|0;
  $60 = (($59) + -12|0);
  $61 = HEAP32[$60>>2]|0;
  $$sum9 = (($61) + 72)|0;
  $62 = (7160 + ($$sum9)|0);
  HEAP32[$62>>2] = 7248;
  $63 = HEAP32[7336>>2]|0;
  $64 = (($63) + -12|0);
  $65 = HEAP32[$64>>2]|0;
  $$sum10 = (($65) + 4)|0;
  $66 = (7336 + ($$sum10)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 | 8192;
  HEAP32[$66>>2] = $68;
  $69 = HEAP32[7336>>2]|0;
  $70 = (($69) + -12|0);
  $71 = HEAP32[$70>>2]|0;
  $$sum11 = (($71) + 72)|0;
  $72 = (7336 + ($$sum11)|0);
  HEAP32[$72>>2] = 7248;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(557,(6896|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(557,(7072|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(558,(7248|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(558,(7424|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((7872 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(453,($0|0),(11480|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11480)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((7984 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(52,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11480)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(8088);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((8128 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(453,($0|0),(11472|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11472)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((8240 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(71,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11472)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(8088);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((559|0),(7512|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19856 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(560,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19880 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(560,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19880 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(560,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
  ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$what_arg>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = $3&255;
  $9 = $8 >>> 1;
  $11 = $9;
 } else {
  $6 = (($what_arg) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 }
 $10 = ($11|0)==(0);
 if ($10) {
  $17 = $1;
 } else {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,8384)|0);
  $$pre = HEAP32[$ec>>2]|0;
  $17 = $$pre;
 }
 $12 = (($ec) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
 $18 = HEAP8[$0>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $25 = (($0) + 1|0);
  $26 = $18&255;
  $27 = $26 >>> 1;
  $28 = $25;$29 = $27;
 } else {
  $21 = (($0) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $28 = $22;$29 = $24;
 }
 __THREW__ = 0;
 (invoke_iiii(393,($what_arg|0),($28|0),($29|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(561,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $19;$$01 = $18;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(562,($this|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  HEAP32[$this>>2] = ((8392 + 8|0));
  $7 = (($this) + 8|0);
  $8 = $ec;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $7;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $$0 = $21;$$01 = $20;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((8536|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((8560|0),(8536|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((8536|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(563,(8536|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(564,(8536|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(563,(8536|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(565,(8560|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(564,(8536|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(563,(8536|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(565,(8560|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(566);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(459);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(567,($0|0),(8608|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((19936 + 8|0));
  ___cxa_throw(($0|0),(19984|0),(354|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(567,($0|0),(8608|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((20000 + 8|0));
  ___cxa_throw(($0|0),(20048|0),(354|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,0);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__str) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(0);
  // unreachable;
 }
 if ($2) {
  $11 = (($__str) + 1|0);
  $13 = $11;
 } else {
  $9 = (($__str) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($8) - ($__pos))|0;
 $15 = ($14>>>0)<($__n>>>0);
 $16 = $15 ? $14 : $__n;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$12,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = (0 - ($0))|0;
 $scevgep = (($__last) + ($15)|0);
 $scevgep3 = $scevgep;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $16 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $16;
  $17 = (($$02) + 1|0);
  $18 = (($__p$01) + 1|0);
  $19 = ($17|0)==($__last|0);
  if ($19) {
   break;
  } else {
   $$02 = $17;$__p$01 = $18;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($scevgep3)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$11,$12)|0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(412,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = $8 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
    break;
   } else {
    $37 = (($this) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $40 = $8 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $44 = $8&255;
  $45 = $44 >>> 1;
  $47 = $45;
 } else {
  $42 = (($this) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $47 = $43;
 }
 $46 = (($47) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $48 = (($21) + 1)|0;
  $49 = $48 | 1;
  HEAP32[$this>>2] = $49;
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $15;
  $51 = (($this) + 8|0);
  HEAP32[$51>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $52 = $15 << 1;
  $53 = $52&255;
  HEAP8[$this>>0] = $53;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($this) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $9;$13 = $7;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $6;$13 = $4;
 }
 $10 = ($11>>>0)>($__pos>>>0);
 if (!($10)) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($11) - ($__pos))|0;
 $15 = $__c&255;
 $16 = (_memchr($12,$15,$14)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $18 = $16;
 $19 = $13;
 $20 = (($18) - ($19))|0;
 $$0$i = $20;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep = (($scevgep) + ($17)|0);
 $uglygep4 = $uglygep;
 $18 = $uglygep4 >>> 2;
 $19 = (($18) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $20 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $20;
  $21 = (($$02) + 4|0);
  $22 = (($__p$01) + 4|0);
  $23 = ($21|0)==($__last|0);
  if ($23) {
   break;
  } else {
   $$02 = $21;$__p$01 = $22;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($19<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(412,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = $8 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $8 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $45 = $8&255;
  $46 = $45 >>> 1;
  $48 = $46;
 } else {
  $43 = (($this) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $48 = $44;
 }
 $47 = (($48) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$47)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $49 = (($21) + 1)|0;
  $50 = $49 | 1;
  HEAP32[$this>>2] = $50;
  $51 = (($this) + 4|0);
  HEAP32[$51>>2] = $15;
  $52 = (($this) + 8|0);
  HEAP32[$52>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $53 = $15 << 1;
  $54 = $53&255;
  HEAP8[$this>>0] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = 1;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = (8984);
 __THREW__ = 0;
 invoke_viii(568,($13|0),(9040|0),($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($20|0);
  // unreachable;
 } else {
  ___cxa_throw(($13|0),(9088|0),(98|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9024 + 8|0));
 __THREW__ = 0;
 invoke_vii(569,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 32|0);
 $4 = (($this) + 36|0);
 $i$01 = $1;
 while(1) {
  $5 = (($i$01) + -1)|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $12 = ($5|0)==(0);
  if ($12) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8640 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8640 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8640 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8640 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8704 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8704 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8704 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8704 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $95 = (($__is) + ($3)|0);
  $96 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($95,$96);
  STACKTOP = sp;return;
 }
 $$sum13 = (($3) + 72)|0;
 $7 = (($__is) + ($$sum13)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 do {
  if (!($__noskipws)) {
   $10 = HEAP32[$__is>>2]|0;
   $11 = (($10) + -12|0);
   $12 = HEAP32[$11>>2]|0;
   $$sum14 = (($12) + 4)|0;
   $13 = (($__is) + ($$sum14)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$sum15 = (($12) + 28)|0;
    $17 = (($__is) + ($$sum15)|0);
    __ZNSt3__16localeC2ERKS0_($0,$17);
    __THREW__ = 0;
    $18 = (invoke_iii(453,($0|0),(11408|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     __ZNSt3__16localeD2Ev($0);
     ___resumeException($59|0);
     // unreachable;
    }
    __ZNSt3__16localeD2Ev($0);
    $21 = HEAP32[$__is>>2]|0;
    $22 = (($21) + -12|0);
    $23 = HEAP32[$22>>2]|0;
    $$sum$i$i = (($23) + 24)|0;
    $24 = (($__is) + ($$sum$i$i)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($18) + 8|0);
    $28 = $25;
    while(1) {
     $27 = ($28|0)==(0|0);
     if ($27) {
      break;
     }
     $29 = (($28) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($28) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$28>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
      $38 = ($37|0)==(-1);
      $$ = $38 ? 0 : $28;
      $39 = ($$|0)==(0|0);
      if ($39) {
       break;
      } else {
       $41 = $$;
      }
     } else {
      $41 = $28;
     }
     $40 = (($41) + 12|0);
     $42 = HEAP32[$40>>2]|0;
     $43 = (($41) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42|0)==($44|0);
     if ($45) {
      $46 = HEAP32[$41>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_ii[$48 & 1023]($41)|0);
      $$0$i$i = $49;
     } else {
      $50 = HEAP8[$42>>0]|0;
      $51 = $50&255;
      $$0$i$i = $51;
     }
     $52 = $$0$i$i&255;
     $isascii1$i = ($52<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 20;
      break;
     }
     $sext = $$0$i$i << 24;
     $53 = $sext >> 24;
     $54 = HEAP32[$26>>2]|0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56 & 8192;
     $58 = ($57<<16>>16)==(0);
     if ($58) {
      label = 20;
      break;
     }
     $61 = HEAP32[$40>>2]|0;
     $62 = HEAP32[$43>>2]|0;
     $63 = ($61|0)==($62|0);
     if ($63) {
      $64 = HEAP32[$41>>2]|0;
      $65 = (($64) + 40|0);
      $66 = HEAP32[$65>>2]|0;
      (FUNCTION_TABLE_ii[$66 & 1023]($41)|0);
      $28 = $41;
      continue;
     } else {
      $67 = (($61) + 1|0);
      HEAP32[$40>>2] = $67;
      $28 = $41;
      continue;
     }
    }
    if ((label|0) == 20) {
     $68 = ($41|0)==(0|0);
     if (!($68)) {
      $69 = (($41) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($41) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if (!($73)) {
       break;
      }
      $74 = HEAP32[$41>>2]|0;
      $75 = (($74) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 1023]($41)|0);
      $78 = ($77|0)==(-1);
      $79 = ($41|0)==(0|0);
      $80 = $78 | $79;
      if (!($80)) {
       break;
      }
     }
    }
    $81 = HEAP32[$__is>>2]|0;
    $82 = (($81) + -12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($__is) + ($83)|0);
    $$sum17 = (($83) + 16)|0;
    $85 = (($__is) + ($$sum17)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86 | 6;
    __ZNSt3__18ios_base5clearEj($84,$87);
   }
  }
 } while(0);
 $88 = HEAP32[$__is>>2]|0;
 $89 = (($88) + -12|0);
 $90 = HEAP32[$89>>2]|0;
 $$sum16 = (($90) + 16)|0;
 $91 = (($__is) + ($$sum16)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0);
 $94 = $93&1;
 HEAP8[$this>>0] = $94;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(570,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(456,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(458,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(459);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(571,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(456,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(458,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(459);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(456,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(459);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(456,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(459);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (8928|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,8944,35);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[8992>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((8992|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[8984>>2] = ((9680 + 8|0));
   (___cxa_atexit((102|0),(8984|0),(___dso_handle|0))|0);
   ___cxa_guard_release((8992|0));
  }
 }
 STACKTOP = sp;return (8984|0);
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((9000 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(453,($3|0),(11408|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(453,($4|0),(11552|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(572,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02676 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off035 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$036 = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$332 = 0;
 var $__n_does_match$4 = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$331 = 0, $__n_might_match$4 = 0, $__st$061 = 0, $__st$133 = 0, $__st$246 = 0, $__st$32577 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(573);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$062 = $__kb;$__n_does_match$060 = 0;$__n_might_match$059 = $3;$__st$061 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$062>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$062) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$061>>0] = 2;
    $33 = (($__n_might_match$059) + -1)|0;
    $34 = (($__n_does_match$060) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$061>>0] = 1;
    $__n_does_match$1 = $__n_does_match$060;$__n_might_match$1 = $__n_might_match$059;
   }
   $35 = (($__ky$062) + 12|0);
   $36 = (($__st$061) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$062 = $35;$__n_does_match$060 = $__n_does_match$1;$__n_might_match$059 = $__n_might_match$1;$__st$061 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i16 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $54;
    }
   } else {
    $$pre$i2$i$i16 = $54;
   }
  }
  $68 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 66;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
  }
  while(1) {
   $91 = HEAP8[$__st$133>>0]|0;
   $92 = ($91<<24>>24)==(1);
   do {
    if ($92) {
     $93 = HEAP8[$__ky1$036>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      $98 = (($__ky1$036) + 1|0);
      $100 = $98;
     } else {
      $96 = (($__ky1$036) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $100 = $97;
     }
     $99 = (($100) + ($__indx$0)|0);
     $101 = HEAP8[$99>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $101;
     } else {
      $102 = HEAP32[$__ct>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      __THREW__ = 0;
      $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $105;
      }
     }
     $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($108)) {
      HEAP8[$__st$133>>0] = 0;
      $120 = (($__n_might_match$331) + -1)|0;
      $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $120;
      break;
     }
     $109 = HEAP8[$__ky1$036>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $114 = $109&255;
      $115 = $114 >>> 1;
      $117 = $115;
     } else {
      $112 = (($__ky1$036) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $117 = $113;
     }
     $116 = ($117|0)==($$pre|0);
     if ($116) {
      HEAP8[$__st$133>>0] = 2;
      $118 = (($__n_might_match$331) + -1)|0;
      $119 = (($__n_does_match$332) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
    }
   } while(0);
   $121 = (($__ky1$036) + 12|0);
   $122 = ($121|0)==($__ke|0);
   if ($122) {
    break;
   }
   $123 = (($__st$133) + 1|0);
   $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $121;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $123;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $124 = HEAP32[$__b>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$124>>2]|0;
   $131 = (($130) + 40|0);
   $132 = HEAP32[$131>>2]|0;
   __THREW__ = 0;
   (invoke_ii($132|0,($124|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 6;
    break;
   }
  } else {
   $135 = (($126) + 1|0);
   HEAP32[$125>>2] = $135;
  }
  $136 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($136>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$4;$__st$246 = $__status$0;
  }
  while(1) {
   $137 = HEAP8[$__st$246>>0]|0;
   $138 = ($137<<24>>24)==(2);
   if ($138) {
    $139 = HEAP8[$__ky2$047>>0]|0;
    $140 = $139 & 1;
    $141 = ($140<<24>>24)==(0);
    if ($141) {
     $144 = $139&255;
     $145 = $144 >>> 1;
     $147 = $145;
    } else {
     $142 = (($__ky2$047) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $147 = $143;
    }
    $146 = ($147|0)==($$pre|0);
    if ($146) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246>>0] = 0;
     $148 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $148;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $149 = (($__ky2$047) + 12|0);
   $150 = (($__st$246) + 1|0);
   $151 = ($149|0)==($__ke|0);
   if ($151) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$047 = $149;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $150;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 66) {
  $152 = ($70|0)==(0|0);
  do {
   if ($152) {
    $166 = 0;
    label = 72;
   } else {
    $153 = (($70) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($70) + 16|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($154|0)==($156|0);
    if ($157) {
     $158 = HEAP32[$70>>2]|0;
     $159 = (($158) + 36|0);
     $160 = HEAP32[$159>>2]|0;
     __THREW__ = 0;
     $161 = (invoke_ii($160|0,($70|0))|0);
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if (!($163)) {
      $164 = ($161|0)==(-1);
      if ($164) {
       HEAP32[$__b>>2] = 0;
       $166 = 0;
       label = 72;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $166 = $$pre$i$i$i12;
       label = 72;
       break;
      }
     }
    } else {
     $166 = $70;
     label = 72;
    }
   }
  } while(0);
  L91: do {
   if ((label|0) == 72) {
    $165 = ($166|0)==(0|0);
    do {
     if ($68) {
      label = 78;
     } else {
      $167 = (($$pre$i2$i$i16) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (($$pre$i2$i$i16) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if (!($171)) {
       if ($165) {
        break;
       } else {
        label = 80;
        break;
       }
      }
      $172 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $173 = (($172) + 36|0);
      $174 = HEAP32[$173>>2]|0;
      __THREW__ = 0;
      $175 = (invoke_ii($174|0,($$pre$i2$i$i16|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      $177 = $176&1;
      if ($177) {
       break L91;
      }
      $178 = ($175|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 78;
       break;
      } else {
       if ($165) {
        break;
       } else {
        label = 80;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 78) {
     if ($165) {
      label = 80;
     }
    }
    if ((label|0) == 80) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L107: do {
     if ($23) {
      label = 85;
     } else {
      $181 = HEAP8[$__status$0>>0]|0;
      $182 = ($181<<24>>24)==(2);
      if ($182) {
       $$024 = $__kb;
      } else {
       $$02676 = $__kb;$__st$32577 = $__status$0;
       while(1) {
        $186 = (($$02676) + 12|0);
        $187 = ($186|0)==($__ke|0);
        $184 = (($__st$32577) + 1|0);
        if ($187) {
         label = 85;
         break L107;
        }
        $183 = HEAP8[$184>>0]|0;
        $185 = ($183<<24>>24)==(2);
        if ($185) {
         $$024 = $186;
         break;
        } else {
         $$02676 = $186;$__st$32577 = $184;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$024 = $__ke;
    }
    $190 = ($18|0)==(0|0);
    if ($190) {
     STACKTOP = sp;return ($$024|0);
    }
    __THREW__ = 0;
    invoke_vi(574,($18|0));
    $191 = __THREW__; __THREW__ = 0;
    $192 = $191&1;
    if ($192) {
     $193 = ___cxa_find_matching_catch(0|0)|0;
     $194 = tempRet0;
     ___clang_call_terminate($193);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$024|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(574,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(575,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(576,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(577,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(578,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(579,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi32Z2D;
     } else {
      $71 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(580,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP8[$__in_units>>0]|0;
    $114 = ($113<<24>>24)==(0);
    if (!($114)) {
     $115 = HEAP32[$__g_end>>2]|0;
     $116 = $115;
     $117 = $__g;
     $118 = (($116) - ($117))|0;
     $119 = ($118|0)<(160);
     if ($119) {
      $120 = HEAP32[$__dc>>2]|0;
      $121 = (($115) + 4|0);
      HEAP32[$__g_end>>2] = $121;
      HEAP32[$115>>2] = $120;
     }
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(581,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP8[$__in_units>>0]|0;
    $114 = ($113<<24>>24)==(0);
    if (!($114)) {
     $115 = HEAP32[$__g_end>>2]|0;
     $116 = $115;
     $117 = $__g;
     $118 = (($116) - ($117))|0;
     $119 = ($118|0)<(160);
     if ($119) {
      $120 = HEAP32[$__dc>>2]|0;
      $121 = (($115) + 4|0);
      HEAP32[$__g_end>>2] = $121;
      HEAP32[$115>>2] = $120;
     }
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(582,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP8[$__in_units>>0]|0;
    $114 = ($113<<24>>24)==(0);
    if (!($114)) {
     $115 = HEAP32[$__g_end>>2]|0;
     $116 = $115;
     $117 = $__g;
     $118 = (($116) - ($117))|0;
     $119 = ($118|0)<(160);
     if ($119) {
      $120 = HEAP32[$__dc>>2]|0;
      $121 = (($115) + 4|0);
      HEAP32[$__g_end>>2] = $121;
      HEAP32[$115>>2] = $120;
     }
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(583,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi40Z2D = 0, $$pre$phi42Z2D = 0, $$pre39 = 0, $$pre41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 188|0;
 $0 = sp + 200|0;
 $__buf = sp + 8|0;
 $__a_end = sp + 4|0;
 $__g = sp + 24|0;
 $__g_end = sp + 184|0;
 $__dc = sp + 204|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(452,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(453,($0|0),(11408|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(9920|0),(((9920 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(512,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 39;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre41 = (($__buf) + 8|0);
      $$pre$phi40Z2D = $19;$$pre$phi42Z2D = $$pre41;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre39 = (($__buf) + 1|0);
      $$pre$phi40Z2D = $$pre39;$$pre$phi42Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i8 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i8|0)==(0|0);
      if ($22) {
       $36 = 0;
      } else {
       $23 = (($$pre$i$i$i8) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i8) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i8>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 38;
         break;
        }
        $34 = ($31|0)==(-1);
        if ($34) {
         HEAP32[$__b>>2] = 0;
         $36 = 0;
        } else {
         $36 = $$pre$i$i$i8;
        }
       } else {
        $36 = $$pre$i$i$i8;
       }
      }
      $35 = ($36|0)==(0|0);
      $37 = HEAP32[$__e>>2]|0;
      $38 = ($37|0)==(0|0);
      do {
       if ($38) {
        label = 20;
       } else {
        $39 = (($37) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (($37) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($40|0)==($42|0);
        if (!($43)) {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
        $44 = HEAP32[$37>>2]|0;
        $45 = (($44) + 36|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_ii($46|0,($37|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 38;
         break L14;
        }
        $50 = ($47|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 20;
         break;
        } else {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 20) {
       label = 0;
       if ($35) {
        $$pre$i2$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(512,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 38;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i24 = (($74) + -1)|0;
        $75 = $phitmp$i24;
       }
       __THREW__ = 0;
       invoke_viii(512,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 38;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi40Z2D;
       } else {
        $81 = HEAP32[$$pre$phi42Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($36) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($36) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = HEAP32[$36>>2]|0;
       $100 = (($99) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_ii($101|0,($36|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 38;
        break;
       } else {
        $$0$i$i = $102;
       }
      } else {
       $105 = HEAP8[$95>>0]|0;
       $106 = $105&255;
       $$0$i$i = $106;
      }
      $107 = $$0$i$i&255;
      $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $109 = ($108|0)==(0);
      if (!($109)) {
       $$pre$i2$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $110 = HEAP32[$94>>2]|0;
      $111 = HEAP32[$96>>2]|0;
      $112 = ($110|0)==($111|0);
      if ($112) {
       $113 = HEAP32[$36>>2]|0;
       $114 = (($113) + 40|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       (invoke_ii($115|0,($36|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 38;
        break;
       } else {
        $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $118 = (($110) + 1|0);
       HEAP32[$94>>2] = $118;
       $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 38) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $119 = HEAP32[$__a_end>>2]|0;
     $120 = $119;
     $121 = $__a$2;
     $122 = (($120) - ($121))|0;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($122|0),0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      label = 39;
     } else {
      $125 = HEAP8[$__buf>>0]|0;
      $126 = $125 & 1;
      $127 = ($126<<24>>24)==(0);
      if ($127) {
       $132 = $$pre$phi40Z2D;
      } else {
       $128 = HEAP32[$$pre$phi42Z2D>>2]|0;
       $132 = $128;
      }
      __THREW__ = 0;
      $129 = (invoke_i(584)|0);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       label = 39;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $133 = (invoke_iiiii(585,($132|0),($129|0),(9960|0),($vararg_buffer|0))|0);
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        label = 39;
       } else {
        $136 = ($133|0)==(1);
        if (!($136)) {
         HEAP32[$__err>>2] = 4;
        }
        $137 = ($36|0)==(0|0);
        if ($137) {
         $151 = 0;
        } else {
         $138 = (($36) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($36) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if ($142) {
          $143 = HEAP32[$36>>2]|0;
          $144 = (($143) + 36|0);
          $145 = HEAP32[$144>>2]|0;
          __THREW__ = 0;
          $146 = (invoke_ii($145|0,($36|0))|0);
          $147 = __THREW__; __THREW__ = 0;
          $148 = $147&1;
          if ($148) {
           label = 39;
           break;
          }
          $149 = ($146|0)==(-1);
          if ($149) {
           HEAP32[$__b>>2] = 0;
           $151 = 0;
          } else {
           $151 = $36;
          }
         } else {
          $151 = $36;
         }
        }
        $150 = ($151|0)==(0|0);
        $152 = ($$pre$i2$i$i|0)==(0|0);
        do {
         if ($152) {
          label = 66;
         } else {
          $153 = (($$pre$i2$i$i) + 12|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = (($$pre$i2$i$i) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($154|0)==($156|0);
          if (!($157)) {
           if (!($150)) {
            break;
           }
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $158 = HEAP32[$$pre$i2$i$i>>2]|0;
          $159 = (($158) + 36|0);
          $160 = HEAP32[$159>>2]|0;
          __THREW__ = 0;
          $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
          $162 = __THREW__; __THREW__ = 0;
          $163 = $162&1;
          if ($163) {
           label = 39;
           break L8;
          }
          $164 = ($161|0)==(-1);
          if ($164) {
           HEAP32[$__e>>2] = 0;
           label = 66;
           break;
          }
          $165 = ($$pre$i2$i$i|0)==(0|0);
          $tmp$i$i = $150 ^ $165;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 66) {
         if (!($150)) {
          HEAP32[$agg$result>>2] = $151;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $166 = HEAP32[$__err>>2]|0;
        $167 = $166 | 2;
        HEAP32[$__err>>2] = $167;
        HEAP32[$agg$result>>2] = $151;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (9920 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (9920 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(586,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11304>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((11304|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(587,2147483647,(11312|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((11304|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[11296>>2] = $4;
     ___cxa_guard_release((11304|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[11296>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(453,($3|0),(11400|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(453,($4|0),(11560|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(588,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03078 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off039 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$040 = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0;
 var $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$336 = 0, $__n_does_match$4 = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$335 = 0, $__n_might_match$4 = 0, $__st$065 = 0, $__st$137 = 0, $__st$250 = 0, $__st$32979 = 0, $__statbuf = 0;
 var $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(573);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$066 = $__kb;$__n_does_match$064 = 0;$__n_might_match$063 = $3;$__st$065 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$066>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$066) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$065>>0] = 2;
    $33 = (($__n_might_match$063) + -1)|0;
    $34 = (($__n_does_match$064) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$065>>0] = 1;
    $__n_does_match$1 = $__n_does_match$064;$__n_might_match$1 = $__n_might_match$063;
   }
   $35 = (($__ky$066) + 12|0);
   $36 = (($__st$065) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$066 = $35;$__n_does_match$064 = $__n_does_match$1;$__n_might_match$063 = $__n_might_match$1;$__st$065 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i19 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i19 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 68;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
  }
  while(1) {
   $90 = HEAP8[$__st$137>>0]|0;
   $91 = ($90<<24>>24)==(1);
   do {
    if ($91) {
     $92 = HEAP8[$__ky1$040>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     if ($94) {
      $97 = (($__ky1$040) + 4|0);
      $99 = $97;
     } else {
      $95 = (($__ky1$040) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $99 = $96;
     }
     $98 = (($99) + ($__indx$0<<2)|0);
     $100 = HEAP32[$98>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $100;
     } else {
      $101 = HEAP32[$__ct>>2]|0;
      $102 = (($101) + 28|0);
      $103 = HEAP32[$102>>2]|0;
      __THREW__ = 0;
      $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $104;
      }
     }
     $107 = ($__c$0|0)==($__kc$0|0);
     if (!($107)) {
      HEAP8[$__st$137>>0] = 0;
      $119 = (($__n_might_match$335) + -1)|0;
      $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $119;
      break;
     }
     $108 = HEAP8[$__ky1$040>>0]|0;
     $109 = $108 & 1;
     $110 = ($109<<24>>24)==(0);
     if ($110) {
      $113 = $108&255;
      $114 = $113 >>> 1;
      $116 = $114;
     } else {
      $111 = (($__ky1$040) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $116 = $112;
     }
     $115 = ($116|0)==($$pre|0);
     if ($115) {
      HEAP8[$__st$137>>0] = 2;
      $117 = (($__n_might_match$335) + -1)|0;
      $118 = (($__n_does_match$336) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
    }
   } while(0);
   $120 = (($__ky1$040) + 12|0);
   $121 = ($120|0)==($__ke|0);
   if ($121) {
    break;
   }
   $122 = (($__st$137) + 1|0);
   $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $120;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $122;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $123 = HEAP32[$__b>>2]|0;
  $124 = (($123) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$123>>2]|0;
   $130 = (($129) + 40|0);
   $131 = HEAP32[$130>>2]|0;
   __THREW__ = 0;
   (invoke_ii($131|0,($123|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 6;
    break;
   }
  } else {
   $134 = (($125) + 4|0);
   HEAP32[$124>>2] = $134;
  }
  $135 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($135>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$4;$__st$250 = $__status$0;
  }
  while(1) {
   $136 = HEAP8[$__st$250>>0]|0;
   $137 = ($136<<24>>24)==(2);
   if ($137) {
    $138 = HEAP8[$__ky2$051>>0]|0;
    $139 = $138 & 1;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $143 = $138&255;
     $144 = $143 >>> 1;
     $146 = $144;
    } else {
     $141 = (($__ky2$051) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $146 = $142;
    }
    $145 = ($146|0)==($$pre|0);
    if ($145) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250>>0] = 0;
     $147 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $147;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $148 = (($__ky2$051) + 12|0);
   $149 = (($__st$250) + 1|0);
   $150 = ($148|0)==($__ke|0);
   if ($150) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$051 = $148;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $149;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 68) {
  $151 = ($71|0)==(0|0);
  do {
   if ($151) {
    $195 = 1;
    label = 75;
   } else {
    $152 = (($71) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($71) + 16|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($153|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$71>>2]|0;
     $158 = (($157) + 36|0);
     $159 = HEAP32[$158>>2]|0;
     __THREW__ = 0;
     $160 = (invoke_ii($159|0,($71|0))|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     if ($162) {
      break;
     } else {
      $$0$i$i$i$i11 = $160;
     }
    } else {
     $163 = HEAP32[$153>>2]|0;
     $$0$i$i$i$i11 = $163;
    }
    $164 = ($$0$i$i$i$i11|0)==(-1);
    if ($164) {
     HEAP32[$__b>>2] = 0;
     $195 = 1;
     label = 75;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $195 = $phitmp$i$i$i14;
     label = 75;
     break;
    }
   }
  } while(0);
  L97: do {
   if ((label|0) == 75) {
    $165 = ($$pre$i3$i$i19|0)==(0|0);
    do {
     if ($165) {
      label = 81;
     } else {
      $166 = (($$pre$i3$i$i19) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($$pre$i3$i$i19) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($167|0)==($169|0);
      if ($170) {
       $171 = HEAP32[$$pre$i3$i$i19>>2]|0;
       $172 = (($171) + 36|0);
       $173 = HEAP32[$172>>2]|0;
       __THREW__ = 0;
       $174 = (invoke_ii($173|0,($$pre$i3$i$i19|0))|0);
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if ($176) {
        break L97;
       } else {
        $$0$i$i1$i$i17 = $174;
       }
      } else {
       $177 = HEAP32[$167>>2]|0;
       $$0$i$i1$i$i17 = $177;
      }
      $178 = ($$0$i$i1$i$i17|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 81;
       break;
      } else {
       if ($195) {
        break;
       } else {
        label = 83;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 81) {
     if ($195) {
      label = 83;
     }
    }
    if ((label|0) == 83) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L113: do {
     if ($23) {
      label = 88;
     } else {
      $181 = HEAP8[$__status$0>>0]|0;
      $182 = ($181<<24>>24)==(2);
      if ($182) {
       $$028 = $__kb;
      } else {
       $$03078 = $__kb;$__st$32979 = $__status$0;
       while(1) {
        $186 = (($$03078) + 12|0);
        $187 = ($186|0)==($__ke|0);
        $184 = (($__st$32979) + 1|0);
        if ($187) {
         label = 88;
         break L113;
        }
        $183 = HEAP8[$184>>0]|0;
        $185 = ($183<<24>>24)==(2);
        if ($185) {
         $$028 = $186;
         break;
        } else {
         $$03078 = $186;$__st$32979 = $184;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 88) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$028 = $__ke;
    }
    $190 = ($18|0)==(0|0);
    if ($190) {
     STACKTOP = sp;return ($$028|0);
    }
    __THREW__ = 0;
    invoke_vi(574,($18|0));
    $191 = __THREW__; __THREW__ = 0;
    $192 = $191&1;
    if ($192) {
     $193 = ___cxa_find_matching_catch(0|0)|0;
     $194 = tempRet0;
     ___clang_call_terminate($193);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$028|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(574,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(575,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(576,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(577,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(578,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(579,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(580,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi35Z2D;
     } else {
      $71 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP8[$__in_units>>0]|0;
    $113 = ($112<<24>>24)==(0);
    if (!($113)) {
     $114 = HEAP32[$__g_end>>2]|0;
     $115 = $114;
     $116 = $__g;
     $117 = (($115) - ($116))|0;
     $118 = ($117|0)<(160);
     if ($118) {
      $119 = HEAP32[$__dc>>2]|0;
      $120 = (($114) + 4|0);
      HEAP32[$__g_end>>2] = $120;
      HEAP32[$114>>2] = $119;
     }
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(581,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi35Z2D;
     } else {
      $71 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP8[$__in_units>>0]|0;
    $113 = ($112<<24>>24)==(0);
    if (!($113)) {
     $114 = HEAP32[$__g_end>>2]|0;
     $115 = $114;
     $116 = $__g;
     $117 = (($115) - ($116))|0;
     $118 = ($117|0)<(160);
     if ($118) {
      $119 = HEAP32[$__dc>>2]|0;
      $120 = (($114) + 4|0);
      HEAP32[$__g_end>>2] = $120;
      HEAP32[$114>>2] = $119;
     }
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(582,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(512,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi35Z2D;
     } else {
      $71 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP8[$__in_units>>0]|0;
    $113 = ($112<<24>>24)==(0);
    if (!($113)) {
     $114 = HEAP32[$__g_end>>2]|0;
     $115 = $114;
     $116 = $__g;
     $117 = (($115) - ($116))|0;
     $118 = ($117|0)<(160);
     if ($118) {
      $119 = HEAP32[$__dc>>2]|0;
      $120 = (($114) + 4|0);
      HEAP32[$__g_end>>2] = $120;
      HEAP32[$114>>2] = $119;
     }
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(583,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 188|0;
 $0 = sp + 8|0;
 $__buf = sp + 176|0;
 $__a_end = sp + 4|0;
 $__g = sp + 16|0;
 $__g_end = sp + 304|0;
 $__dc = sp + 308|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(452,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(453,($0|0),(11400|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(9920|0),(((9920 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(512,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 40;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre42 = (($__buf) + 8|0);
      $$pre$phi41Z2D = $19;$$pre$phi43Z2D = $$pre42;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre40 = (($__buf) + 1|0);
      $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i9 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i9|0)==(0|0);
      if ($22) {
       $167 = 1;$95 = 0;
      } else {
       $23 = (($$pre$i$i$i9) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i9) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i9>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 39;
         break;
        } else {
         $$0$i$i$i$i7 = $31;
        }
       } else {
        $34 = HEAP32[$24>>2]|0;
        $$0$i$i$i$i7 = $34;
       }
       $35 = ($$0$i$i$i$i7|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $167 = 1;$95 = 0;
       } else {
        $167 = 0;$95 = $$pre$i$i$i9;
       }
      }
      $36 = HEAP32[$__e>>2]|0;
      $37 = ($36|0)==(0|0);
      do {
       if ($37) {
        label = 21;
       } else {
        $38 = (($36) + 12|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = (($36) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($39|0)==($41|0);
        if ($42) {
         $43 = HEAP32[$36>>2]|0;
         $44 = (($43) + 36|0);
         $45 = HEAP32[$44>>2]|0;
         __THREW__ = 0;
         $46 = (invoke_ii($45|0,($36|0))|0);
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          label = 39;
          break L14;
         } else {
          $$0$i$i1$i$i13 = $46;
         }
        } else {
         $49 = HEAP32[$39>>2]|0;
         $$0$i$i1$i$i13 = $49;
        }
        $50 = ($$0$i$i1$i$i13|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($167) {
          $168 = $36;
          break;
         } else {
          $$pre$i3$i$i = $36;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($167) {
        $$pre$i3$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(512,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 39;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i28 = (($74) + -1)|0;
        $75 = $phitmp$i28;
       }
       __THREW__ = 0;
       invoke_viii(512,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 39;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi41Z2D;
       } else {
        $81 = HEAP32[$$pre$phi43Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($95) + 12|0);
      $96 = HEAP32[$94>>2]|0;
      $97 = (($95) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$95>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($95|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 39;
        break;
       } else {
        $$0$i$i = $103;
       }
      } else {
       $106 = HEAP32[$96>>2]|0;
       $$0$i$i = $106;
      }
      $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $108 = ($107|0)==(0);
      if (!($108)) {
       $$pre$i3$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $109 = HEAP32[$94>>2]|0;
      $110 = HEAP32[$97>>2]|0;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = HEAP32[$95>>2]|0;
       $113 = (($112) + 40|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       (invoke_ii($114|0,($95|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $117 = (($109) + 4|0);
       HEAP32[$94>>2] = $117;
       $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $118 = HEAP32[$__a_end>>2]|0;
     $119 = $118;
     $120 = $__a$2;
     $121 = (($119) - ($120))|0;
     __THREW__ = 0;
     invoke_viii(512,($__buf|0),($121|0),0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      label = 40;
     } else {
      $124 = HEAP8[$__buf>>0]|0;
      $125 = $124 & 1;
      $126 = ($125<<24>>24)==(0);
      if ($126) {
       $131 = $$pre$phi41Z2D;
      } else {
       $127 = HEAP32[$$pre$phi43Z2D>>2]|0;
       $131 = $127;
      }
      __THREW__ = 0;
      $128 = (invoke_i(584)|0);
      $129 = __THREW__; __THREW__ = 0;
      $130 = $129&1;
      if ($130) {
       label = 40;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $132 = (invoke_iiiii(585,($131|0),($128|0),(9960|0),($vararg_buffer|0))|0);
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 40;
       } else {
        $135 = ($132|0)==(1);
        if (!($135)) {
         HEAP32[$__err>>2] = 4;
        }
        $136 = ($95|0)==(0|0);
        if ($136) {
         $166 = 0;$169 = 1;
        } else {
         $137 = (($95) + 12|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = (($95) + 16|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($138|0)==($140|0);
         if ($141) {
          $142 = HEAP32[$95>>2]|0;
          $143 = (($142) + 36|0);
          $144 = HEAP32[$143>>2]|0;
          __THREW__ = 0;
          $145 = (invoke_ii($144|0,($95|0))|0);
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if ($147) {
           label = 40;
           break;
          } else {
           $$0$i$i$i$i = $145;
          }
         } else {
          $148 = HEAP32[$138>>2]|0;
          $$0$i$i$i$i = $148;
         }
         $149 = ($$0$i$i$i$i|0)==(-1);
         if ($149) {
          HEAP32[$__b>>2] = 0;
          $166 = 0;$169 = 1;
         } else {
          $166 = $95;$169 = 0;
         }
        }
        $150 = ($$pre$i3$i$i|0)==(0|0);
        do {
         if ($150) {
          label = 68;
         } else {
          $151 = (($$pre$i3$i$i) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($$pre$i3$i$i) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$$pre$i3$i$i>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 40;
            break L8;
           } else {
            $$0$i$i1$i$i = $159;
           }
          } else {
           $162 = HEAP32[$152>>2]|0;
           $$0$i$i1$i$i = $162;
          }
          $163 = ($$0$i$i1$i$i|0)==(-1);
          if ($163) {
           HEAP32[$__e>>2] = 0;
           label = 68;
           break;
          }
          if ($169) {
           HEAP32[$agg$result>>2] = $166;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 68) {
         if (!($169)) {
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $164 = HEAP32[$__err>>2]|0;
        $165 = $164 | 2;
        HEAP32[$__err>>2] = $165;
        HEAP32[$agg$result>>2] = $166;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (9920 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (9920 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(453,($__loc|0),(11408|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9920|0),(((9920 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(453,($__loc|0),(11552|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(453,($__loc|0),(11408|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9920|0),(((9920 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(453,($__loc|0),(11552|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (9920 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(453,($__loc|0),(11400|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9920|0),(((9920 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(453,($__loc|0),(11560|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(453,($__loc|0),(11400|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9920|0),(((9920 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(453,($__loc|0),(11560|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (9920 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(453,($1|0),(11552|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $59 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
  $$0 = $57;$$01 = $58;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
 }
 $26 = (($__nm) + 4|0);
 $28 = $20;$38 = $$ph;
 L17: while(1) {
  $27 = $28 & 1;
  $29 = ($27<<24>>24)==(0);
  if ($29) {
   $32 = $28&255;
   $33 = $32 >>> 1;
   $35 = $$pre$phi4Z2D;$36 = $33;
  } else {
   $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $31 = HEAP32[$26>>2]|0;
   $35 = $30;$36 = $31;
  }
  $34 = (($35) + ($36)|0);
  $37 = ($38|0)==($34|0);
  if ($37) {
   label = 24;
   break;
  }
  $39 = HEAP8[$38>>0]|0;
  $40 = HEAP32[$__s>>2]|0;
  $41 = ($40|0)==(0|0);
  do {
   if (!($41)) {
    $42 = (($40) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($40) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if (!($46)) {
     $47 = (($43) + 1|0);
     HEAP32[$42>>2] = $47;
     HEAP8[$43>>0] = $39;
     break;
    }
    $48 = HEAP32[$40>>2]|0;
    $49 = (($48) + 52|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $39&255;
    __THREW__ = 0;
    $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 23;
     break L17;
    }
    $55 = ($52|0)==(-1);
    if ($55) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $56 = (($38) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $28 = $$pre;$38 = $56;
 }
 if ((label|0) == 23) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  $$0 = $60;$$01 = $61;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $62 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $62;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10200+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10200+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10200+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10200+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10200+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10200+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,10104,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(589,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(586,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11408)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11552)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L24: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$010)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$12 = $84 ? $79 : $89;
        $90 = (($$12) + ($__dg$010)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$09|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 1|0);
         HEAP32[$__oe>>2] = $95;
         HEAP8[$94>>0] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$010>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $106 = HEAP8[$__p$011>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 28|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 1|0);
       HEAP32[$__oe>>2] = $114;
       HEAP8[$113>>0] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$011) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$09 = $115;$__dg$010 = $__dg$1;$__p$011 = $116;
       } else {
        break L24;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120)|0);
    $122 = HEAP32[$__oe>>2]|0;
    $123 = ($121|0)==($122|0);
    if (!($123)) {
     $124 = (($122) + -1|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP8[$$012$i$i>>0]|0;
       $127 = HEAP8[$128>>0]|0;
       HEAP8[$$012$i$i>>0] = $127;
       HEAP8[$128>>0] = $126;
       $129 = (($$012$i$i) + 1|0);
       $130 = (($128) + -1|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $133 = HEAP32[$__oe>>2]|0;
  $storemerge = $133;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $134 = $__np;
  $135 = $__nb;
  $136 = (($134) - ($135))|0;
  $137 = (($__ob) + ($136)|0);
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,10112,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(589,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10200+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10200+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10200+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10200+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10200+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10200+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,10104,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(589,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,10112,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(589,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 68|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,10120,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(584)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(590,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(584)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(590,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$69 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(573);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$69 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$69 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 1;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(573);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $88 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $52 = $$pre10;$63 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(452,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $88 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(591,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $76 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($76)|0);
     $$0 = $74;$$01 = $75;$78 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(455,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $88 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if (!($62)) {
      __THREW__ = 0;
      invoke_vi(574,($63|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $66 = ___cxa_find_matching_catch(0|0)|0;
       $67 = tempRet0;
       ___clang_call_terminate($66);
       // unreachable;
      }
     }
     $68 = ($69|0)==(0|0);
     if ($68) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(574,($69|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      $72 = ___cxa_find_matching_catch(0|0)|0;
      $73 = tempRet0;
      ___clang_call_terminate($72);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$78 = $88;
 }
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  __THREW__ = 0;
  invoke_vi(574,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 $83 = ($69|0)==(0|0);
 if ($83) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(574,($69|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 } else {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(592,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(586,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(586,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$47 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11408)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11552)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$034 = $42;
        while(1) {
         $55 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(584)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(593,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$034) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$034;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$034 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$126 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(584)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(594,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$126) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$126 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$019)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$47 = $116 ? $111 : $121;
        $122 = (($$47) + ($__dg$019)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$018|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 1|0);
         HEAP32[$__oe>>2] = $127;
         HEAP8[$126>>0] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$019>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$019))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
        }
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $138 = HEAP8[$__p$020>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 28|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 1|0);
       HEAP32[$__oe>>2] = $146;
       HEAP8[$145>>0] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$020) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$018 = $147;$__dg$019 = $__dg$1;$__p$020 = $148;
       } else {
        break L41;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152)|0);
    $154 = HEAP32[$__oe>>2]|0;
    $155 = ($153|0)==($154|0);
    if (!($155)) {
     $156 = (($154) + -1|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP8[$$012$i$i7>>0]|0;
       $159 = HEAP8[$160>>0]|0;
       HEAP8[$$012$i$i7>>0] = $159;
       HEAP8[$160>>0] = $158;
       $161 = (($$012$i$i7) + 1|0);
       $162 = (($160) + -1|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        break;
       }
      }
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L63: do {
    if ($164) {
     $__nf$214 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$214>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 51;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 28|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 1|0);
      HEAP32[$__oe>>2] = $183;
      HEAP8[$182>>0] = $179;
      $184 = (($__nf$214) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$214 = $184;
      } else {
       $__nf$3 = $184;
       break L63;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 51) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 1|0);
      HEAP32[$__oe>>2] = $174;
      HEAP8[$173>>0] = $170;
      $175 = (($__nf$214) + 1|0);
      $__nf$3 = $175;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$__oe>>2]|0;
   $187 = HEAP32[$0>>2]|0;
   $188 = (($187) + 32|0);
   $189 = HEAP32[$188>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($189|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,10128,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(584)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(590,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(584)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(590,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(573);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$60 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 1;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(573);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $66 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $50 = $$pre10;$60 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $50 = $38;$60 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(452,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $66 = $60;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(591,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $64 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
     $$0 = $62;$$01 = $63;$65 = $60;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(455,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $66 = $60;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$agg$result>>2] = $59;
     _free($60);
     _free($61);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$65 = $66;
 }
 _free($65);
 _free($61);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 54|0;
 $__nar = sp + 60|0;
 $__o = sp + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10208+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(453,($0|0),(11408|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(453,($1|0),(11560|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $57 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  $$0 = $55;$$01 = $56;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
 }
 $27 = $20;$37 = $$ph;
 while(1) {
  $26 = $27 & 1;
  $28 = ($26<<24>>24)==(0);
  if ($28) {
   $31 = $27&255;
   $32 = $31 >>> 1;
   $34 = $$pre$phiZ2D;$35 = $32;
  } else {
   $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = $29;$35 = $30;
  }
  $33 = (($34) + ($35<<2)|0);
  $36 = ($37|0)==($33|0);
  if ($36) {
   label = 24;
   break;
  }
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$__s>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = (($39) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$39>>2]|0;
    $47 = (($46) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 23;
     break;
    } else {
     $$0$i$i = $49;
    }
   } else {
    $52 = (($42) + 4|0);
    HEAP32[$41>>2] = $52;
    HEAP32[$42>>2] = $38;
    $$0$i$i = $38;
   }
   $53 = ($$0$i$i|0)==(-1);
   if ($53) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $54 = (($37) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $27 = $$pre;$37 = $54;
 }
 if ((label|0) == 23) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  $$0 = $58;$$01 = $59;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $60 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $60;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10200+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10200+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10200+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10200+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10200+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10200+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,10104,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(595,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11400)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11560)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $137 = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$09)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$11 = $84 ? $79 : $89;
        $90 = (($$11) + ($__dg$09)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$08|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 4|0);
         HEAP32[$__oe>>2] = $95;
         HEAP32[$94>>2] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$09>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $106 = HEAP8[$__p$010>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 44|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 4|0);
       HEAP32[$__oe>>2] = $114;
       HEAP32[$113>>2] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$010) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$08 = $115;$__dg$09 = $__dg$1;$__p$010 = $116;
       } else {
        $123 = $114;
        break L26;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $123 = $$pre;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120<<2)|0);
    $122 = ($121|0)==($123|0);
    if ($122) {
     $137 = $123;
    } else {
     $124 = (($123) + -4|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP32[$$012$i$i>>2]|0;
       $127 = HEAP32[$128>>2]|0;
       HEAP32[$$012$i$i>>2] = $127;
       HEAP32[$128>>2] = $126;
       $129 = (($$012$i$i) + 4|0);
       $130 = (($128) + -4|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        $137 = $123;
        break;
       }
      }
     } else {
      $137 = $123;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $133 = $__np;
 $134 = $__nb;
 $135 = (($133) - ($134))|0;
 $136 = (($__ob) + ($135<<2)|0);
 $storemerge = $136;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,10112,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(595,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10200+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10200+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10200+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10200+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10200+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10200+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,10104,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(595,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,10112,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(595,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 296|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,10120,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(584)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(590,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(584)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(590,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(573);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 3;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(573);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $70 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $52 = $$pre8;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(452,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $70 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(596,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $67 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
     $$0 = $65;$$01 = $66;$69 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(597,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $70 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if ($62) {
      _free($64);
      STACKTOP = sp;return;
     }
     _free($63);
     _free($64);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$69 = $70;
 }
 $68 = ($69|0)==(0|0);
 if (!($68)) {
  _free($69);
 }
 _free($64);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$46 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0;
 var $__p$019 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11400)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11560)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$033 = $42;
        while(1) {
         $55 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(584)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(593,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$033) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$033;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$033 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$125 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(584)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(594,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$125) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$125 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $201 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$018)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$46 = $116 ? $111 : $121;
        $122 = (($$46) + ($__dg$018)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$017|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 4|0);
         HEAP32[$__oe>>2] = $127;
         HEAP32[$126>>2] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$018>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$018))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
        }
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $138 = HEAP8[$__p$019>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 44|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 4|0);
       HEAP32[$__oe>>2] = $146;
       HEAP32[$145>>2] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$019) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$017 = $147;$__dg$018 = $__dg$1;$__p$019 = $148;
       } else {
        $155 = $146;
        break L41;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $155 = $$pre;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152<<2)|0);
    $154 = ($153|0)==($155|0);
    if ($154) {
     $201 = $155;
    } else {
     $156 = (($155) + -4|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP32[$$012$i$i7>>2]|0;
       $159 = HEAP32[$160>>2]|0;
       HEAP32[$$012$i$i7>>2] = $159;
       HEAP32[$160>>2] = $158;
       $161 = (($$012$i$i7) + 4|0);
       $162 = (($160) + -4|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        $201 = $155;
        break;
       }
      }
     } else {
      $201 = $155;
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L64: do {
    if ($164) {
     $__nf$213 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$213>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 52;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 44|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 4|0);
      HEAP32[$__oe>>2] = $183;
      HEAP32[$182>>2] = $179;
      $184 = (($__nf$213) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$213 = $184;
      } else {
       $189 = $183;$__nf$3 = $184;
       break L64;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 52) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 4|0);
      HEAP32[$__oe>>2] = $174;
      HEAP32[$173>>2] = $170;
      $175 = (($__nf$213) + 1|0);
      $189 = $174;$__nf$3 = $175;
      break;
     }
    } else {
     $189 = $201;$__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$0>>2]|0;
   $187 = (($186) + 48|0);
   $188 = HEAP32[$187>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($188|0,($0|0),($__nf$3|0),($__ne|0),($189|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193<<2)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199<<2)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 288|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,10128,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(584)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(590,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(584)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(590,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(573);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$61 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 3;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(573);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $68 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $50 = $$pre8;$61 = $42;$__ob$0 = $42;
    label = 20;
   }
  } else {
   $50 = $38;$61 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(452,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $68 = $61;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(596,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $65 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
     $$0 = $63;$$01 = $64;$67 = $61;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(597,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $68 = $61;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $59;
     HEAP32[$agg$result>>2] = $59;
     $60 = ($61|0)==(0|0);
     if ($60) {
      _free($62);
      STACKTOP = sp;return;
     }
     _free($61);
     _free($62);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$67 = $68;
 }
 $66 = ($67|0)==(0|0);
 if (!($66)) {
  _free($67);
 }
 _free($62);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 164|0;
 $__nar = sp + 172|0;
 $__o = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 156|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10208+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(453,($0|0),(11400|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20<<2)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i24 = 0, $$0$ph$be = 0, $$0$ph37 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i15 = 0, $$pre$i$i$i6 = 0, $$pre$i2$i$i19 = 0, $$pre$i2$i$i1939 = 0, $$pre$i2$i$i1940 = 0, $$pre38 = 0, $$pre38$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i22 = 0, $isascii1$i3 = 0, $sext = 0, $tmp$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(453,($0|0),(11408|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $40 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 62;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph37 = $__fmtb;$$pre38 = 0;
   L6: while(1) {
    $11 = $$pre38;
    while(1) {
     $10 = ($11|0)==(0);
     if (!($10)) {
      label = 62;
      break L4;
     }
     $12 = HEAP32[$__b>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $25 = 0;
     } else {
      $14 = (($12) + 12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($12) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($15|0)==($17|0);
      if ($18) {
       $19 = HEAP32[$12>>2]|0;
       $20 = (($19) + 36|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (FUNCTION_TABLE_ii[$21 & 1023]($12)|0);
       $23 = ($22|0)==(-1);
       if ($23) {
        HEAP32[$__b>>2] = 0;
        $25 = 0;
       } else {
        $25 = $12;
       }
      } else {
       $25 = $12;
      }
     }
     $24 = ($25|0)==(0|0);
     $26 = HEAP32[$__e>>2]|0;
     $27 = ($26|0)==(0|0);
     do {
      if ($27) {
       label = 15;
      } else {
       $28 = (($26) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($26) + 16|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       if ($32) {
        $33 = HEAP32[$26>>2]|0;
        $34 = (($33) + 36|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (FUNCTION_TABLE_ii[$35 & 1023]($26)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         HEAP32[$__e>>2] = 0;
         label = 15;
         break;
        }
       }
       if ($24) {
        $64 = $26;
       } else {
        label = 16;
        break L6;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($24) {
       label = 16;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $41 = HEAP8[$$0$ph37>>0]|0;
     $42 = HEAP32[$4>>2]|0;
     $43 = (($42) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
     $46 = ($45<<24>>24)==(37);
     if ($46) {
      label = 19;
      break;
     }
     $68 = HEAP8[$$0$ph37>>0]|0;
     $isascii1$i = ($68<<24>>24)>(-1);
     if ($isascii1$i) {
      $69 = $68 << 24 >> 24;
      $70 = HEAP32[$9>>2]|0;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 & 8192;
      $74 = ($73<<16>>16)==(0);
      if (!($74)) {
       $$0$pn = $$0$ph37;
       label = 30;
       break;
      }
     }
     $133 = (($25) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($25) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$25>>2]|0;
      $139 = (($138) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (FUNCTION_TABLE_ii[$140 & 1023]($25)|0);
      $$0$i$i24 = $141;
     } else {
      $142 = HEAP8[$134>>0]|0;
      $143 = $142&255;
      $$0$i$i24 = $143;
     }
     $144 = $$0$i$i24&255;
     $145 = HEAP32[$4>>2]|0;
     $146 = (($145) + 12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
     $149 = HEAP8[$$0$ph37>>0]|0;
     $150 = HEAP32[$4>>2]|0;
     $151 = (($150) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (FUNCTION_TABLE_iii[$152 & 1023]($4,$149)|0);
     $154 = ($148<<24>>24)==($153<<24>>24);
     if ($154) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $11 = 4;
    }
    L34: do {
     if ((label|0) == 19) {
      label = 0;
      $47 = (($$0$ph37) + 1|0);
      $48 = ($47|0)==($__fmte|0);
      if ($48) {
       label = 20;
       break L6;
      }
      $49 = HEAP8[$47>>0]|0;
      $50 = HEAP32[$4>>2]|0;
      $51 = (($50) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
      if ((($53<<24>>24) == 48) | (($53<<24>>24) == 69)) {
       $54 = (($$0$ph37) + 2|0);
       $55 = ($54|0)==($__fmte|0);
       if ($55) {
        label = 23;
        break L6;
       }
       $56 = HEAP8[$54>>0]|0;
       $57 = HEAP32[$4>>2]|0;
       $58 = (($57) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
       $$1 = $54;$__cmd$0 = $60;$__opt$0 = $53;
      } else {
       $$1 = $47;$__cmd$0 = $53;$__opt$0 = 0;
      }
      $61 = HEAP32[$this>>2]|0;
      $62 = (($61) + 36|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$2>>2] = $25;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$63 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 1|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 30) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP8[$$2>>0]|0;
       $isascii1$i3 = ($76<<24>>24)>(-1);
       if (!($isascii1$i3)) {
        $$2$lcssa = $$2;
        break;
       }
       $77 = $76 << 24 >> 24;
       $78 = (($70) + ($77<<1)|0);
       $79 = HEAP16[$78>>1]|0;
       $80 = $79 & 8192;
       $81 = ($80<<16>>16)==(0);
       if ($81) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 30;
       }
      }
      $$pre$i$i$i15 = $25;$$pre$i2$i$i19 = $64;$96 = $64;
      while(1) {
       $82 = ($$pre$i$i$i15|0)==(0|0);
       if ($82) {
        $94 = 0;
       } else {
        $83 = (($$pre$i$i$i15) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($$pre$i$i$i15) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84|0)==($86|0);
        if ($87) {
         $88 = HEAP32[$$pre$i$i$i15>>2]|0;
         $89 = (($88) + 36|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (FUNCTION_TABLE_ii[$90 & 1023]($$pre$i$i$i15)|0);
         $92 = ($91|0)==(-1);
         if ($92) {
          HEAP32[$__b>>2] = 0;
          $94 = 0;
         } else {
          $94 = $$pre$i$i$i15;
         }
        } else {
         $94 = $$pre$i$i$i15;
        }
       }
       $93 = ($94|0)==(0|0);
       $95 = ($96|0)==(0|0);
       do {
        if ($95) {
         $$pre$i2$i$i1940 = $$pre$i2$i$i19;
         label = 43;
        } else {
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($96) + 16|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ($98|0)==($100|0);
         if (!($101)) {
          if ($93) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$190 = $96;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
         $102 = HEAP32[$96>>2]|0;
         $103 = (($102) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 1023]($96)|0);
         $106 = ($105|0)==(-1);
         if ($106) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1940 = 0;
          label = 43;
          break;
         } else {
          $107 = ($$pre$i2$i$i19|0)==(0|0);
          $tmp$i$i21 = $93 ^ $107;
          if ($tmp$i$i21) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$190 = $$pre$i2$i$i19;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($93) {
         $$0$ph$be = $$2$lcssa;
         break L34;
        } else {
         $$pre$i2$i$i1939 = $$pre$i2$i$i1940;$190 = 0;
        }
       }
       $108 = (($94) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($94) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$94>>2]|0;
        $114 = (($113) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($94)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP8[$109>>0]|0;
        $118 = $117&255;
        $$0$i$i = $118;
       }
       $119 = $$0$i$i&255;
       $isascii1$i22 = ($119<<24>>24)>(-1);
       if (!($isascii1$i22)) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $sext = $$0$i$i << 24;
       $120 = $sext >> 24;
       $121 = HEAP32[$9>>2]|0;
       $122 = (($121) + ($120<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123 & 8192;
       $125 = ($124<<16>>16)==(0);
       if ($125) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $126 = HEAP32[$108>>2]|0;
       $127 = HEAP32[$110>>2]|0;
       $128 = ($126|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$94>>2]|0;
        $130 = (($129) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        (FUNCTION_TABLE_ii[$131 & 1023]($94)|0);
        $$pre$i$i$i15 = $94;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$96 = $190;
        continue;
       } else {
        $132 = (($126) + 1|0);
        HEAP32[$108>>2] = $132;
        $$pre$i$i$i15 = $94;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$96 = $190;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $155 = HEAP32[$133>>2]|0;
      $156 = HEAP32[$135>>2]|0;
      $157 = ($155|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$25>>2]|0;
       $159 = (($158) + 40|0);
       $160 = HEAP32[$159>>2]|0;
       (FUNCTION_TABLE_ii[$160 & 1023]($25)|0);
      } else {
       $161 = (($155) + 1|0);
       HEAP32[$133>>2] = $161;
      }
      $162 = (($$0$ph37) + 1|0);
      $$0$ph$be = $162;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 62;
     break L4;
    }
    $$pre38$pre = HEAP32[$__err>>2]|0;
    $$0$ph37 = $$0$ph$be;$$pre38 = $$pre38$pre;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $25;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $25;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i6 = $$pre;
 }
 $163 = ($$pre$i$i$i6|0)==(0|0);
 if ($163) {
  $175 = 0;
 } else {
  $164 = (($$pre$i$i$i6) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($$pre$i$i$i6) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($165|0)==($167|0);
  if ($168) {
   $169 = HEAP32[$$pre$i$i$i6>>2]|0;
   $170 = (($169) + 36|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (FUNCTION_TABLE_ii[$171 & 1023]($$pre$i$i$i6)|0);
   $173 = ($172|0)==(-1);
   if ($173) {
    HEAP32[$__b>>2] = 0;
    $175 = 0;
   } else {
    $175 = $$pre$i$i$i6;
   }
  } else {
   $175 = $$pre$i$i$i6;
  }
 }
 $174 = ($175|0)==(0|0);
 $176 = HEAP32[$__e>>2]|0;
 $177 = ($176|0)==(0|0);
 do {
  if ($177) {
   label = 72;
  } else {
   $178 = (($176) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($176) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($179|0)==($181|0);
   if ($182) {
    $183 = HEAP32[$176>>2]|0;
    $184 = (($183) + 36|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (FUNCTION_TABLE_ii[$185 & 1023]($176)|0);
    $187 = ($186|0)==(-1);
    if ($187) {
     HEAP32[$__e>>2] = 0;
     label = 72;
     break;
    }
   }
   if ($174) {
    HEAP32[$agg$result>>2] = $175;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($174)) {
   HEAP32[$agg$result>>2] = $175;
   STACKTOP = sp;return;
  }
 }
 $188 = HEAP32[$__err>>2]|0;
 $189 = $188 | 2;
 HEAP32[$__err>>2] = $189;
 HEAP32[$agg$result>>2] = $175;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,10312,((10312 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(453,($1|0),(11408|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(0,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(0,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(0,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(0,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,10336,((10336 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,10352,((10352 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(0,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,10360,((10360 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,10320,((10320 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,10328,((10328 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(31);
  if ($6) {
   HEAP32[$__d>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(12);
  if ($6) {
   HEAP32[$__h>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $71 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i3;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i9 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 1023]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i16;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$ph$be = 0, $$0$ph42 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0;
 var $$pre$i3$i$i1144 = 0, $$pre$i3$i$i1145 = 0, $$pre43 = 0, $$pre43$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(453,($0|0),(11400|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $39 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($39)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 66;
  } else {
   $$0$ph42 = $__fmtb;$$pre43 = 0;
   L6: while(1) {
    $10 = $$pre43;
    while(1) {
     $9 = ($10|0)==(0);
     if (!($9)) {
      label = 66;
      break L4;
     }
     $11 = HEAP32[$__b>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      $183 = 1;$63 = 0;
     } else {
      $13 = (($11) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (($11) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14|0)==($16|0);
      if ($17) {
       $18 = HEAP32[$11>>2]|0;
       $19 = (($18) + 36|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (FUNCTION_TABLE_ii[$20 & 1023]($11)|0);
       $$0$i$i$i$i = $21;
      } else {
       $22 = HEAP32[$14>>2]|0;
       $$0$i$i$i$i = $22;
      }
      $23 = ($$0$i$i$i$i|0)==(-1);
      if ($23) {
       HEAP32[$__b>>2] = 0;
       $183 = 1;$63 = 0;
      } else {
       $183 = 0;$63 = $11;
      }
     }
     $24 = HEAP32[$__e>>2]|0;
     $25 = ($24|0)==(0|0);
     do {
      if ($25) {
       label = 18;
      } else {
       $26 = (($24) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($24) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[$24>>2]|0;
        $32 = (($31) + 36|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (FUNCTION_TABLE_ii[$33 & 1023]($24)|0);
        $$0$i$i1$i$i = $34;
       } else {
        $35 = HEAP32[$27>>2]|0;
        $$0$i$i1$i$i = $35;
       }
       $36 = ($$0$i$i1$i$i|0)==(-1);
       if ($36) {
        HEAP32[$__e>>2] = 0;
        label = 18;
        break;
       } else {
        if ($183) {
         $64 = $24;
         break;
        } else {
         label = 20;
         break L6;
        }
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      if ($183) {
       label = 20;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $40 = HEAP32[$$0$ph42>>2]|0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($41) + 52|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      label = 23;
      break;
     }
     $68 = HEAP32[$$0$ph42>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (FUNCTION_TABLE_iiii[$71 & 1023]($4,8192,$68)|0);
     if ($72) {
      $$0$pn = $$0$ph42;
      label = 33;
      break;
     }
     $127 = (($63) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($63) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$63>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_ii[$134 & 1023]($63)|0);
      $$0$i$i15 = $135;
     } else {
      $136 = HEAP32[$128>>2]|0;
      $$0$i$i15 = $136;
     }
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (FUNCTION_TABLE_iii[$139 & 1023]($4,$$0$i$i15)|0);
     $141 = HEAP32[$$0$ph42>>2]|0;
     $142 = HEAP32[$4>>2]|0;
     $143 = (($142) + 28|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (FUNCTION_TABLE_iii[$144 & 1023]($4,$141)|0);
     $146 = ($140|0)==($145|0);
     if ($146) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $10 = 4;
    }
    L38: do {
     if ((label|0) == 23) {
      label = 0;
      $46 = (($$0$ph42) + 4|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       label = 24;
       break L6;
      }
      $48 = HEAP32[$46>>2]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = (($49) + 52|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      if ((($52<<24>>24) == 48) | (($52<<24>>24) == 69)) {
       $53 = (($$0$ph42) + 8|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        label = 27;
        break L6;
       }
       $55 = HEAP32[$53>>2]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = (($56) + 52|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $$1 = $53;$__cmd$0 = $59;$__opt$0 = $52;
      } else {
       $$1 = $46;$__cmd$0 = $52;$__opt$0 = 0;
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = (($60) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$2>>2] = $63;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$62 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 4|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $73 = ($$2|0)==($__fmte|0);
       if ($73) {
        $$2$lcssa = $__fmte;
        break;
       }
       $74 = HEAP32[$$2>>2]|0;
       $75 = HEAP32[$4>>2]|0;
       $76 = (($75) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (FUNCTION_TABLE_iiii[$77 & 1023]($4,8192,$74)|0);
       if ($78) {
        $$0$pn = $$2;
        label = 33;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i5 = $63;$$pre$i3$i$i11 = $64;$92 = $64;
      while(1) {
       $79 = ($$pre$i$i$i5|0)==(0|0);
       if ($79) {
        $104 = 1;$106 = 0;
       } else {
        $80 = (($$pre$i$i$i5) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($$pre$i$i$i5) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if ($84) {
         $85 = HEAP32[$$pre$i$i$i5>>2]|0;
         $86 = (($85) + 36|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (FUNCTION_TABLE_ii[$87 & 1023]($$pre$i$i$i5)|0);
         $$0$i$i$i$i3 = $88;
        } else {
         $89 = HEAP32[$81>>2]|0;
         $$0$i$i$i$i3 = $89;
        }
        $90 = ($$0$i$i$i$i3|0)==(-1);
        if ($90) {
         HEAP32[$__b>>2] = 0;
         $104 = 1;$106 = 0;
        } else {
         $104 = 0;$106 = $$pre$i$i$i5;
        }
       }
       $91 = ($92|0)==(0|0);
       do {
        if ($91) {
         $$pre$i3$i$i1145 = $$pre$i3$i$i11;
         label = 48;
        } else {
         $93 = (($92) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($92) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$92>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
          $$0$i$i1$i$i9 = $101;
         } else {
          $102 = HEAP32[$94>>2]|0;
          $$0$i$i1$i$i9 = $102;
         }
         $103 = ($$0$i$i1$i$i9|0)==(-1);
         if ($103) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1145 = 0;
          label = 48;
          break;
         } else {
          $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
          $tmp$i$i14 = $104 ^ $phitmp$i4$i$i12;
          if ($tmp$i$i14) {
           $$pre$i3$i$i1144 = $$pre$i3$i$i11;$184 = $$pre$i3$i$i11;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L38;
          }
         }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        if ($104) {
         $$0$ph$be = $$2$lcssa;
         break L38;
        } else {
         $$pre$i3$i$i1144 = $$pre$i3$i$i1145;$184 = 0;
        }
       }
       $105 = (($106) + 12|0);
       $107 = HEAP32[$105>>2]|0;
       $108 = (($106) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$106>>2]|0;
        $112 = (($111) + 36|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (FUNCTION_TABLE_ii[$113 & 1023]($106)|0);
        $$0$i$i = $114;
       } else {
        $115 = HEAP32[$107>>2]|0;
        $$0$i$i = $115;
       }
       $116 = HEAP32[$4>>2]|0;
       $117 = (($116) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (FUNCTION_TABLE_iiii[$118 & 1023]($4,8192,$$0$i$i)|0);
       if (!($119)) {
        $$0$ph$be = $$2$lcssa;
        break L38;
       }
       $120 = HEAP32[$105>>2]|0;
       $121 = HEAP32[$108>>2]|0;
       $122 = ($120|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$106>>2]|0;
        $124 = (($123) + 40|0);
        $125 = HEAP32[$124>>2]|0;
        (FUNCTION_TABLE_ii[$125 & 1023]($106)|0);
        $$pre$i$i$i5 = $106;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$92 = $184;
        continue;
       } else {
        $126 = (($120) + 4|0);
        HEAP32[$105>>2] = $126;
        $$pre$i$i$i5 = $106;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$92 = $184;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $147 = HEAP32[$127>>2]|0;
      $148 = HEAP32[$129>>2]|0;
      $149 = ($147|0)==($148|0);
      if ($149) {
       $150 = HEAP32[$63>>2]|0;
       $151 = (($150) + 40|0);
       $152 = HEAP32[$151>>2]|0;
       (FUNCTION_TABLE_ii[$152 & 1023]($63)|0);
      } else {
       $153 = (($147) + 4|0);
       HEAP32[$127>>2] = $153;
      }
      $154 = (($$0$ph42) + 4|0);
      $$0$ph$be = $154;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 66;
     break L4;
    }
    $$pre43$pre = HEAP32[$__err>>2]|0;
    $$0$ph42 = $$0$ph$be;$$pre43 = $$pre43$pre;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $63;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $63;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $63;
    break;
   }
  }
 } while(0);
 if ((label|0) == 66) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i20 = $$pre;
 }
 $155 = ($$pre$i$i$i20|0)==(0|0);
 if ($155) {
  $182 = 0;$185 = 1;
 } else {
  $156 = (($$pre$i$i$i20) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($$pre$i$i$i20) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($157|0)==($159|0);
  if ($160) {
   $161 = HEAP32[$$pre$i$i$i20>>2]|0;
   $162 = (($161) + 36|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (FUNCTION_TABLE_ii[$163 & 1023]($$pre$i$i$i20)|0);
   $$0$i$i$i$i18 = $164;
  } else {
   $165 = HEAP32[$157>>2]|0;
   $$0$i$i$i$i18 = $165;
  }
  $166 = ($$0$i$i$i$i18|0)==(-1);
  if ($166) {
   HEAP32[$__b>>2] = 0;
   $182 = 0;$185 = 1;
  } else {
   $182 = $$pre$i$i$i20;$185 = 0;
  }
 }
 $167 = HEAP32[$__e>>2]|0;
 $168 = ($167|0)==(0|0);
 do {
  if ($168) {
   label = 79;
  } else {
   $169 = (($167) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($167) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($170|0)==($172|0);
   if ($173) {
    $174 = HEAP32[$167>>2]|0;
    $175 = (($174) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (FUNCTION_TABLE_ii[$176 & 1023]($167)|0);
    $$0$i$i1$i$i24 = $177;
   } else {
    $178 = HEAP32[$170>>2]|0;
    $$0$i$i1$i$i24 = $178;
   }
   $179 = ($$0$i$i1$i$i24|0)==(-1);
   if ($179) {
    HEAP32[$__e>>2] = 0;
    label = 79;
    break;
   }
   if ($185) {
    HEAP32[$agg$result>>2] = $182;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  if (!($185)) {
   HEAP32[$agg$result>>2] = $182;
   STACKTOP = sp;return;
  }
 }
 $180 = HEAP32[$__err>>2]|0;
 $181 = $180 | 2;
 HEAP32[$__err>>2] = $181;
 HEAP32[$agg$result>>2] = $182;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,10464,((10464 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11400|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11400|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(453,($0|0),(11400|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(453,($1|0),(11400|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,10632,((10632 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,10560,((10560 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(0,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,10528,((10528 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,10608,((10608 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(0,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(0,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(0,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(0,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,10496,((10496 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(31);
  if ($6) {
   HEAP32[$__d>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(12);
  if ($6) {
   HEAP32[$__h>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 1023]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(584)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(598,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $25 = $5;
  HEAP32[$agg$result>>2] = $25;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$22 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $26 = $22;$27 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $22;
     $$7$i = $21 ? 0 : $9;
     $26 = $$$i;$27 = $$7$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $26 = $22;$27 = $9;
     break;
    }
   }
  } while(0);
  $23 = (($$01$i$i) + 1|0);
  $24 = ($23|0)==($4|0);
  if ($24) {
   $25 = $26;
   break;
  } else {
   $$01$i$i = $23;$22 = $26;$9 = $27;
  }
 }
 HEAP32[$agg$result>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $9;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$9 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(599,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if ($22) {
   ___resumeException($20|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(586,($11|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(586,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(12288);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$115 = 0, $$116 = 0, $$1213 = 0, $$1214 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 8|0;
 $__wn = sp + 4|0;
 $__loc = sp + 20|0;
 $__neg = sp + 240|0;
 $0 = sp + 16|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 600;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(452,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$115 = $32;$$1213 = $33;$105 = 600;$106 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(453,($__loc|0),(11408|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L4: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(601,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 32|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(11024|0),(((11024 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       if ($24) {
        $25 = (($23) + 2)|0;
        $26 = (_malloc($25)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         __THREW__ = 0;
         invoke_v(573);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          $30 = ___cxa_find_matching_catch()|0;
          $31 = tempRet0;
          $$0 = $30;$$01 = $31;
          break;
         } else {
          $38 = 0;$__nc$0 = 0;
         }
        } else {
         $38 = $26;$__nc$0 = $26;
        }
       } else {
        $38 = 0;$__nc$0 = $__nbuf;
       }
       $39 = HEAP8[$__neg>>0]|0;
       $40 = ($39<<24>>24)==(0);
       if ($40) {
        $__nc$1 = $__nc$0;
       } else {
        $41 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $41;
       }
       $42 = ($20>>>0)<($19>>>0);
       if ($42) {
        $43 = (($__atoms) + 10|0);
        $44 = $__atoms;
        $__nc$27 = $__nc$1;$__w$08 = $20;
        while(1) {
         $45 = HEAP8[$__w$08>>0]|0;
         $$01$i = $__atoms;
         while(1) {
          $48 = HEAP8[$$01$i>>0]|0;
          $49 = ($48<<24>>24)==($45<<24>>24);
          $47 = (($$01$i) + 1|0);
          if ($49) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $46 = ($47|0)==($43|0);
          if ($46) {
           $$0$lcssa$i = $43;
           break;
          } else {
           $$01$i = $47;
          }
         }
         $50 = $$0$lcssa$i;
         $51 = (($50) - ($44))|0;
         $52 = (11024 + ($51)|0);
         $53 = HEAP8[$52>>0]|0;
         HEAP8[$__nc$27>>0] = $53;
         $54 = (($__w$08) + 1|0);
         $55 = (($__nc$27) + 1|0);
         $56 = HEAP32[$__wn>>2]|0;
         $57 = ($54>>>0)<($56>>>0);
         if ($57) {
          $__nc$27 = $55;$__w$08 = $54;
         } else {
          $__nc$2$lcssa = $55;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $58 = (_sscanf($__nbuf,11040,$vararg_buffer)|0);
       $59 = ($58|0)==(1);
       if (!($59)) {
        __THREW__ = 0;
        invoke_vi(602,(11048|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $36 = ___cxa_find_matching_catch()|0;
         $37 = tempRet0;
         _free($38);
         $$0 = $36;$$01 = $37;
         break;
        }
       }
       _free($38);
      }
      $62 = HEAP32[$__b>>2]|0;
      $63 = ($62|0)==(0|0);
      do {
       if ($63) {
        $77 = 0;
       } else {
        $64 = (($62) + 12|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($62) + 16|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($65|0)==($67|0);
        if ($68) {
         $69 = HEAP32[$62>>2]|0;
         $70 = (($69) + 36|0);
         $71 = HEAP32[$70>>2]|0;
         __THREW__ = 0;
         $72 = (invoke_ii($71|0,($62|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          label = 11;
          break L4;
         }
         $75 = ($72|0)==(-1);
         if ($75) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i;
          break;
         }
        } else {
         $77 = $62;
        }
       }
      } while(0);
      $76 = ($77|0)==(0|0);
      $78 = HEAP32[$__e>>2]|0;
      $79 = ($78|0)==(0|0);
      do {
       if ($79) {
        label = 36;
       } else {
        $80 = (($78) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($78) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if (!($84)) {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
        $85 = HEAP32[$78>>2]|0;
        $86 = (($85) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 11;
         break L4;
        }
        $91 = ($88|0)==(-1);
        if ($91) {
         HEAP32[$__e>>2] = 0;
         label = 36;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 36) {
       if ($76) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       $92 = HEAP32[$__err>>2]|0;
       $93 = $92 | 2;
       HEAP32[$__err>>2] = $93;
      }
      $94 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $94;
      $95 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
      $96 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $97 = ($96|0)==(0|0);
      if ($97) {
       STACKTOP = sp;return;
      }
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $$0 = $34;$$01 = $35;
   }
   $103 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $104 = ($$pre|0)==(0|0);
   if ($104) {
    $$116 = $$0;$$1214 = $$01;
    ___resumeException($$116|0);
    // unreachable;
   } else {
    $$pre18 = HEAP32[$1>>2]|0;
    $$115 = $$0;$$1213 = $$01;$105 = $$pre18;$106 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($105|0,($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $109 = ___cxa_find_matching_catch(0|0)|0;
  $110 = tempRet0;
  ___clang_call_terminate($109);
  // unreachable;
 } else {
  $$116 = $$115;$$1214 = $$1213;
  ___resumeException($$116|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i115 = 0, $$0$i$i125 = 0, $$0$i$i142 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i60 = 0, $$0$i$i79 = 0, $$0$i$i82 = 0, $$0$i$i99 = 0, $$283 = 0, $$284 = 0, $$285 = 0, $$286 = 0;
 var $$287 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i129 = 0, $$pre$i$i$i146 = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i65 = 0, $$pre$i$i$i89 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i133 = 0, $$pre$i2$i$i150 = 0, $$pre$i2$i$i150238 = 0, $$pre$i2$i$i150239 = 0, $$pre$i2$i$i244$ph = 0, $$pre$i2$i$i244281 = 0;
 var $$pre$i2$i$i39 = 0, $$pre$i2$i$i39235 = 0, $$pre$i2$i$i39237 = 0, $$pre$i2$i$i69 = 0, $$pre$i2$i$i69242$ph = 0, $$pre$i2$i$i69242278 = 0, $$pre$i2$i$i93 = 0, $$pre268 = 0, $$pre269 = 0, $$pre270 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$sum = 0, $$sum274 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0;
 var $__p$0227 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0229 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i123 = 0, $isascii1$i156 = 0, $isascii1$i48 = 0, $isascii1$i58 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0;
 var $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond292 = 0, $or$cond7$not = 0, $or$cond8 = 0, $sext = 0, $sext194 = 0, $sext195 = 0, $sext196 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i135 = 0, $tmp$i$i152 = 0, $tmp$i$i41 = 0, $tmp$i$i71 = 0, $tmp$i$i95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 24|0;
 $__gb = sp + 472|0;
 $__gn = sp + 440|0;
 $__ge = sp + 468|0;
 $__pat = sp + 480|0;
 $__dp = sp + 492|0;
 $__ts = sp + 493|0;
 $__grp = sp;
 $__sym = sp + 444|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 456|0;
 $__spaces = sp + 424|0;
 $__fd = sp + 436|0;
 $__et = sp + 484|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 600;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(603,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $69 = ___cxa_find_matching_catch()|0;
   $70 = tempRet0;
   $lpad$phi$index = $69;$lpad$phi$index7 = $70;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 1|0);
   $8 = (($__nsn) + 4|0);
   $9 = (($__nsn) + 8|0);
   $10 = (($__psn) + 1|0);
   $11 = (($__psn) + 4|0);
   $12 = (($__psn) + 8|0);
   $13 = $__flags & 512;
   $14 = ($13|0)!=(0);
   $15 = (($__sym) + 1|0);
   $16 = (($__sym) + 8|0);
   $17 = (($__sym) + 4|0);
   $18 = (($__spaces) + 1|0);
   $19 = (($__spaces) + 8|0);
   $20 = (($__spaces) + 4|0);
   $21 = (($__pat) + 3|0);
   $22 = (($__grp) + 4|0);
   $874 = $__gbuf;$__p$0227 = 0;$__trailing_sign$0229 = 0;
   L3: while(1) {
    $23 = HEAP32[$__b>>2]|0;
    $24 = ($23|0)==(0|0);
    do {
     if ($24) {
      $38 = 0;
     } else {
      $25 = (($23) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($23) + 16|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($26|0)==($28|0);
      if ($29) {
       $30 = HEAP32[$23>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($23|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 24;
        break L3;
       }
       $36 = ($33|0)==(-1);
       if ($36) {
        HEAP32[$__b>>2] = 0;
        $38 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $38 = $$pre$i$i$i19;
        break;
       }
      } else {
       $38 = $23;
      }
     }
    } while(0);
    $37 = ($38|0)==(0|0);
    $39 = HEAP32[$__e>>2]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      label = 15;
     } else {
      $41 = (($39) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($39) + 16|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)==($44|0);
      if (!($45)) {
       if ($37) {
        $875 = $39;
        break;
       } else {
        $862 = $874;$876 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
        label = 280;
        break L3;
       }
      }
      $46 = HEAP32[$39>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($39|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 24;
       break L3;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($37) {
        $875 = $39;
        break;
       } else {
        $862 = $874;$876 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
        label = 280;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($37) {
      $862 = $874;$876 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
      label = 280;
      break;
     } else {
      $875 = 0;
     }
    }
    $53 = (($__pat) + ($__p$0227)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    L25: do {
     switch ($55|0) {
     case 1:  {
      $cond = ($__p$0227|0)==(3);
      if ($cond) {
       $862 = $874;$876 = $875;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
       label = 280;
       break L3;
      }
      $78 = HEAP32[$__b>>2]|0;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$78>>2]|0;
       $85 = (($84) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($78|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 24;
        break L3;
       } else {
        $$0$i$i29 = $87;
       }
      } else {
       $90 = HEAP8[$80>>0]|0;
       $91 = $90&255;
       $$0$i$i29 = $91;
      }
      $92 = $$0$i$i29&255;
      $isascii1$i = ($92<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L3;
      }
      $sext196 = $$0$i$i29 << 24;
      $93 = $sext196 >> 24;
      $94 = HEAP32[$6>>2]|0;
      $95 = (($94) + ($93<<1)|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96 & 8192;
      $98 = ($97<<16>>16)==(0);
      if ($98) {
       label = 40;
       break L3;
      }
      $99 = HEAP32[$__b>>2]|0;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($99) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($101|0)==($103|0);
      if ($104) {
       $105 = HEAP32[$99>>2]|0;
       $106 = (($105) + 40|0);
       $107 = HEAP32[$106>>2]|0;
       __THREW__ = 0;
       $108 = (invoke_ii($107|0,($99|0))|0);
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
        break L3;
       } else {
        $$0$i$i32 = $108;
       }
      } else {
       $111 = (($101) + 1|0);
       HEAP32[$100>>2] = $111;
       $112 = HEAP8[$101>>0]|0;
       $113 = $112&255;
       $$0$i$i32 = $113;
      }
      $114 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(511,($__spaces|0),($114|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       label = 24;
       break L3;
      } else {
       label = 41;
      }
      break;
     }
     case 4:  {
      $56 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i133 = $875;$539 = $875;$592 = $874;$__ng$0 = 0;
      L39: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $537 = 0;
        } else {
         $524 = (($522) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = (($522) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = (($529) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 20;
           break L3;
          }
          $535 = ($532|0)==(-1);
          if ($535) {
           HEAP32[$__b>>2] = 0;
           $537 = 0;
           break;
          } else {
           $$pre$i$i$i129 = HEAP32[$__b>>2]|0;
           $537 = $$pre$i$i$i129;
           break;
          }
         } else {
          $537 = $522;
         }
        }
       } while(0);
       $536 = ($537|0)==(0|0);
       $538 = ($539|0)==(0|0);
       do {
        if ($538) {
         $882 = $$pre$i2$i$i133;
         label = 198;
        } else {
         $540 = (($539) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($539) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if (!($544)) {
          if ($536) {
           $883 = $$pre$i2$i$i133;$884 = $539;
           break;
          } else {
           $$pre$i2$i$i93 = $$pre$i2$i$i133;
           break L39;
          }
         }
         $545 = HEAP32[$539>>2]|0;
         $546 = (($545) + 36|0);
         $547 = HEAP32[$546>>2]|0;
         __THREW__ = 0;
         $548 = (invoke_ii($547|0,($539|0))|0);
         $549 = __THREW__; __THREW__ = 0;
         $550 = $549&1;
         if ($550) {
          label = 20;
          break L3;
         }
         $551 = ($548|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $882 = 0;
          label = 198;
          break;
         } else {
          $552 = ($$pre$i2$i$i133|0)==(0|0);
          $tmp$i$i135 = $536 ^ $552;
          if ($tmp$i$i135) {
           $883 = $$pre$i2$i$i133;$884 = $$pre$i2$i$i133;
           break;
          } else {
           $$pre$i2$i$i93 = $$pre$i2$i$i133;
           break L39;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($536) {
         $$pre$i2$i$i93 = $882;
         break;
        } else {
         $883 = $882;$884 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($553) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = (($559) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 20;
         break L3;
        } else {
         $$0$i$i125 = $562;
        }
       } else {
        $565 = HEAP8[$555>>0]|0;
        $566 = $565&255;
        $$0$i$i125 = $566;
       }
       $567 = $$0$i$i125&255;
       $isascii1$i123 = ($567<<24>>24)>(-1);
       if ($isascii1$i123) {
        $sext194 = $$0$i$i125 << 24;
        $568 = $sext194 >> 24;
        $569 = HEAP32[$6>>2]|0;
        $570 = (($569) + ($568<<1)|0);
        $571 = HEAP16[$570>>1]|0;
        $572 = $571 & 2048;
        $573 = ($572<<16>>16)==(0);
        if ($573) {
         label = 209;
        } else {
         $574 = HEAP32[$__wn>>2]|0;
         $575 = HEAP32[$0>>2]|0;
         $576 = ($574|0)==($575|0);
         if ($576) {
          __THREW__ = 0;
          invoke_viii(604,($__wb|0),($__wn|0),($0|0));
          $577 = __THREW__; __THREW__ = 0;
          $578 = $577&1;
          if ($578) {
           label = 20;
           break L3;
          }
          $$pre272 = HEAP32[$__wn>>2]|0;
          $580 = $$pre272;
         } else {
          $580 = $574;
         }
         $579 = (($580) + 1|0);
         HEAP32[$__wn>>2] = $579;
         HEAP8[$580>>0] = $567;
         $581 = (($__ng$0) + 1)|0;
         $885 = $592;$__ng$1 = $581;
        }
       } else {
        label = 209;
       }
       if ((label|0) == 209) {
        label = 0;
        $582 = HEAP8[$__grp>>0]|0;
        $583 = $582 & 1;
        $584 = ($583<<24>>24)==(0);
        if ($584) {
         $586 = $582&255;
         $587 = $586 >>> 1;
         $588 = $587;
        } else {
         $585 = HEAP32[$22>>2]|0;
         $588 = $585;
        }
        $notlhs = ($588|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond7$not = $notrhs & $notlhs;
        $589 = ($567<<24>>24)==($56<<24>>24);
        $or$cond292 = $or$cond7$not & $589;
        if (!($or$cond292)) {
         $$pre$i2$i$i93 = $883;
         break;
        }
        $590 = HEAP32[$__ge>>2]|0;
        $591 = ($592|0)==($590|0);
        if ($591) {
         __THREW__ = 0;
         invoke_viii(605,($__gb|0),($__gn|0),($__ge|0));
         $593 = __THREW__; __THREW__ = 0;
         $594 = $593&1;
         if ($594) {
          label = 20;
          break L3;
         }
         $$pre273 = HEAP32[$__gn>>2]|0;
         $596 = $$pre273;
        } else {
         $596 = $592;
        }
        $595 = (($596) + 4|0);
        HEAP32[$__gn>>2] = $595;
        HEAP32[$596>>2] = $__ng$0;
        $885 = $595;$__ng$1 = 0;
       }
       $597 = HEAP32[$__b>>2]|0;
       $598 = (($597) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = (($597) + 16|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = ($599|0)==($601|0);
       if ($602) {
        $603 = HEAP32[$597>>2]|0;
        $604 = (($603) + 40|0);
        $605 = HEAP32[$604>>2]|0;
        __THREW__ = 0;
        (invoke_ii($605|0,($597|0))|0);
        $606 = __THREW__; __THREW__ = 0;
        $607 = $606&1;
        if ($607) {
         label = 20;
         break L3;
        } else {
         $$pre$i2$i$i133 = $883;$539 = $884;$592 = $885;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $608 = (($599) + 1|0);
        HEAP32[$598>>2] = $608;
        $$pre$i2$i$i133 = $883;$539 = $884;$592 = $885;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $609 = HEAP32[$__gb>>2]|0;
      $610 = ($609|0)==($592|0);
      $611 = ($__ng$0|0)==(0);
      $or$cond8 = $610 | $611;
      if ($or$cond8) {
       $886 = $592;
      } else {
       $612 = HEAP32[$__ge>>2]|0;
       $613 = ($592|0)==($612|0);
       if ($613) {
        __THREW__ = 0;
        invoke_viii(605,($__gb|0),($__gn|0),($__ge|0));
        $614 = __THREW__; __THREW__ = 0;
        $615 = $614&1;
        if ($615) {
         label = 24;
         break L3;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $617 = $$pre271;
       } else {
        $617 = $592;
       }
       $616 = (($617) + 4|0);
       HEAP32[$__gn>>2] = $616;
       HEAP32[$617>>2] = $__ng$0;
       $886 = $616;
      }
      $618 = HEAP32[$__fd>>2]|0;
      $619 = ($618|0)>(0);
      if ($619) {
       $620 = HEAP32[$__b>>2]|0;
       $621 = ($620|0)==(0|0);
       do {
        if ($621) {
         $635 = 0;
        } else {
         $622 = (($620) + 12|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = (($620) + 16|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = ($623|0)==($625|0);
         if ($626) {
          $627 = HEAP32[$620>>2]|0;
          $628 = (($627) + 36|0);
          $629 = HEAP32[$628>>2]|0;
          __THREW__ = 0;
          $630 = (invoke_ii($629|0,($620|0))|0);
          $631 = __THREW__; __THREW__ = 0;
          $632 = $631&1;
          if ($632) {
           label = 24;
           break L3;
          }
          $633 = ($630|0)==(-1);
          if ($633) {
           HEAP32[$__b>>2] = 0;
           $635 = 0;
           break;
          } else {
           $$pre$i$i$i89 = HEAP32[$__b>>2]|0;
           $635 = $$pre$i$i$i89;
           break;
          }
         } else {
          $635 = $620;
         }
        }
       } while(0);
       $634 = ($635|0)==(0|0);
       $636 = ($$pre$i2$i$i93|0)==(0|0);
       do {
        if ($636) {
         label = 238;
        } else {
         $637 = (($$pre$i2$i$i93) + 12|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = (($$pre$i2$i$i93) + 16|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = ($638|0)==($640|0);
         if (!($641)) {
          if ($634) {
           $888 = $$pre$i2$i$i93;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
         $642 = HEAP32[$$pre$i2$i$i93>>2]|0;
         $643 = (($642) + 36|0);
         $644 = HEAP32[$643>>2]|0;
         __THREW__ = 0;
         $645 = (invoke_ii($644|0,($$pre$i2$i$i93|0))|0);
         $646 = __THREW__; __THREW__ = 0;
         $647 = $646&1;
         if ($647) {
          label = 24;
          break L3;
         }
         $648 = ($645|0)==(-1);
         if ($648) {
          HEAP32[$__e>>2] = 0;
          label = 238;
          break;
         } else {
          $649 = ($$pre$i2$i$i93|0)==(0|0);
          $tmp$i$i95 = $634 ^ $649;
          if ($tmp$i$i95) {
           $888 = $$pre$i2$i$i93;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        if ($634) {
         label = 244;
         break L3;
        } else {
         $888 = 0;
        }
       }
       $650 = HEAP32[$__b>>2]|0;
       $651 = (($650) + 12|0);
       $652 = HEAP32[$651>>2]|0;
       $653 = (($650) + 16|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = ($652|0)==($654|0);
       if ($655) {
        $656 = HEAP32[$650>>2]|0;
        $657 = (($656) + 36|0);
        $658 = HEAP32[$657>>2]|0;
        __THREW__ = 0;
        $659 = (invoke_ii($658|0,($650|0))|0);
        $660 = __THREW__; __THREW__ = 0;
        $661 = $660&1;
        if ($661) {
         label = 24;
         break L3;
        } else {
         $$0$i$i82 = $659;
        }
       } else {
        $662 = HEAP8[$652>>0]|0;
        $663 = $662&255;
        $$0$i$i82 = $663;
       }
       $664 = $$0$i$i82&255;
       $665 = HEAP8[$__dp>>0]|0;
       $666 = ($664<<24>>24)==($665<<24>>24);
       if (!($666)) {
        label = 244;
        break L3;
       }
       $669 = HEAP32[$__b>>2]|0;
       $670 = (($669) + 12|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = (($669) + 16|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = ($671|0)==($673|0);
       if ($674) {
        $675 = HEAP32[$669>>2]|0;
        $676 = (($675) + 40|0);
        $677 = HEAP32[$676>>2]|0;
        __THREW__ = 0;
        (invoke_ii($677|0,($669|0))|0);
        $678 = __THREW__; __THREW__ = 0;
        $679 = $678&1;
        if ($679) {
         label = 24;
         break L3;
        } else {
         $$pre$i2$i$i69 = $888;$698 = $888;$758 = $618;
        }
       } else {
        $680 = (($671) + 1|0);
        HEAP32[$670>>2] = $680;
        $$pre$i2$i$i69 = $888;$698 = $888;$758 = $618;
       }
       while(1) {
        $681 = HEAP32[$__b>>2]|0;
        $682 = ($681|0)==(0|0);
        do {
         if ($682) {
          $696 = 0;
         } else {
          $683 = (($681) + 12|0);
          $684 = HEAP32[$683>>2]|0;
          $685 = (($681) + 16|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = ($684|0)==($686|0);
          if ($687) {
           $688 = HEAP32[$681>>2]|0;
           $689 = (($688) + 36|0);
           $690 = HEAP32[$689>>2]|0;
           __THREW__ = 0;
           $691 = (invoke_ii($690|0,($681|0))|0);
           $692 = __THREW__; __THREW__ = 0;
           $693 = $692&1;
           if ($693) {
            label = 21;
            break L3;
           }
           $694 = ($691|0)==(-1);
           if ($694) {
            HEAP32[$__b>>2] = 0;
            $696 = 0;
            break;
           } else {
            $$pre$i$i$i65 = HEAP32[$__b>>2]|0;
            $696 = $$pre$i$i$i65;
            break;
           }
          } else {
           $696 = $681;
          }
         }
        } while(0);
        $695 = ($696|0)==(0|0);
        $697 = ($698|0)==(0|0);
        do {
         if ($697) {
          $$pre$i2$i$i69242$ph = $$pre$i2$i$i69;
          label = 260;
         } else {
          $699 = (($698) + 12|0);
          $700 = HEAP32[$699>>2]|0;
          $701 = (($698) + 16|0);
          $702 = HEAP32[$701>>2]|0;
          $703 = ($700|0)==($702|0);
          if (!($703)) {
           if ($695) {
            $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$889 = $698;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
          $704 = HEAP32[$698>>2]|0;
          $705 = (($704) + 36|0);
          $706 = HEAP32[$705>>2]|0;
          __THREW__ = 0;
          $707 = (invoke_ii($706|0,($698|0))|0);
          $708 = __THREW__; __THREW__ = 0;
          $709 = $708&1;
          if ($709) {
           label = 21;
           break L3;
          }
          $710 = ($707|0)==(-1);
          if ($710) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i69242$ph = 0;
           label = 260;
           break;
          } else {
           $711 = ($$pre$i2$i$i69|0)==(0|0);
           $tmp$i$i71 = $695 ^ $711;
           if ($tmp$i$i71) {
            $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$889 = $$pre$i2$i$i69;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 260) {
         label = 0;
         if ($695) {
          label = 267;
          break L3;
         } else {
          $$pre$i2$i$i69242278 = $$pre$i2$i$i69242$ph;$889 = 0;
         }
        }
        $712 = HEAP32[$__b>>2]|0;
        $713 = (($712) + 12|0);
        $714 = HEAP32[$713>>2]|0;
        $715 = (($712) + 16|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = ($714|0)==($716|0);
        if ($717) {
         $718 = HEAP32[$712>>2]|0;
         $719 = (($718) + 36|0);
         $720 = HEAP32[$719>>2]|0;
         __THREW__ = 0;
         $721 = (invoke_ii($720|0,($712|0))|0);
         $722 = __THREW__; __THREW__ = 0;
         $723 = $722&1;
         if ($723) {
          label = 21;
          break L3;
         } else {
          $$0$i$i60 = $721;
         }
        } else {
         $724 = HEAP8[$714>>0]|0;
         $725 = $724&255;
         $$0$i$i60 = $725;
        }
        $726 = $$0$i$i60&255;
        $isascii1$i58 = ($726<<24>>24)>(-1);
        if (!($isascii1$i58)) {
         label = 267;
         break L3;
        }
        $sext = $$0$i$i60 << 24;
        $727 = $sext >> 24;
        $728 = HEAP32[$6>>2]|0;
        $729 = (($728) + ($727<<1)|0);
        $730 = HEAP16[$729>>1]|0;
        $731 = $730 & 2048;
        $732 = ($731<<16>>16)==(0);
        if ($732) {
         label = 267;
         break L3;
        }
        $735 = HEAP32[$__wn>>2]|0;
        $736 = HEAP32[$0>>2]|0;
        $737 = ($735|0)==($736|0);
        if ($737) {
         __THREW__ = 0;
         invoke_viii(604,($__wb|0),($__wn|0),($0|0));
         $738 = __THREW__; __THREW__ = 0;
         $739 = $738&1;
         if ($739) {
          label = 21;
          break L3;
         }
        }
        $740 = HEAP32[$__b>>2]|0;
        $741 = (($740) + 12|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = (($740) + 16|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = ($742|0)==($744|0);
        if ($745) {
         $746 = HEAP32[$740>>2]|0;
         $747 = (($746) + 36|0);
         $748 = HEAP32[$747>>2]|0;
         __THREW__ = 0;
         $749 = (invoke_ii($748|0,($740|0))|0);
         $750 = __THREW__; __THREW__ = 0;
         $751 = $750&1;
         if ($751) {
          label = 21;
          break L3;
         } else {
          $$0$i$i53 = $749;
         }
        } else {
         $752 = HEAP8[$742>>0]|0;
         $753 = $752&255;
         $$0$i$i53 = $753;
        }
        $754 = $$0$i$i53&255;
        $755 = HEAP32[$__wn>>2]|0;
        $756 = (($755) + 1|0);
        HEAP32[$__wn>>2] = $756;
        HEAP8[$755>>0] = $754;
        $757 = (($758) + -1)|0;
        HEAP32[$__fd>>2] = $757;
        $759 = HEAP32[$__b>>2]|0;
        $760 = (($759) + 12|0);
        $761 = HEAP32[$760>>2]|0;
        $762 = (($759) + 16|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = ($761|0)==($763|0);
        if ($764) {
         $765 = HEAP32[$759>>2]|0;
         $766 = (($765) + 40|0);
         $767 = HEAP32[$766>>2]|0;
         __THREW__ = 0;
         (invoke_ii($767|0,($759|0))|0);
         $768 = __THREW__; __THREW__ = 0;
         $769 = $768&1;
         if ($769) {
          label = 21;
          break L3;
         }
        } else {
         $771 = (($761) + 1|0);
         HEAP32[$760>>2] = $771;
        }
        $770 = ($757|0)>(0);
        if ($770) {
         $$pre$i2$i$i69 = $$pre$i2$i$i69242278;$698 = $889;$758 = $757;
        } else {
         $887 = $$pre$i2$i$i69242278;
         break;
        }
       }
      } else {
       $887 = $$pre$i2$i$i93;
      }
      $772 = HEAP32[$__wn>>2]|0;
      $773 = HEAP32[$__wb>>2]|0;
      $774 = ($772|0)==($773|0);
      if ($774) {
       label = 278;
       break L3;
      } else {
       $877 = $887;$878 = $886;$__trailing_sign$1 = $__trailing_sign$0229;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      if ($192) {
       $194 = $190&255;
       $195 = $194 >>> 1;
       $205 = $195;
      } else {
       $193 = HEAP32[$11>>2]|0;
       $205 = $193;
      }
      $196 = HEAP8[$__nsn>>0]|0;
      $197 = $196 & 1;
      $198 = ($197<<24>>24)==(0);
      if ($198) {
       $200 = $196&255;
       $201 = $200 >>> 1;
       $203 = $201;
      } else {
       $199 = HEAP32[$8>>2]|0;
       $203 = $199;
      }
      $202 = (0 - ($203))|0;
      $204 = ($205|0)==($202|0);
      if ($204) {
       $877 = $875;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
      } else {
       if ($192) {
        $207 = $190&255;
        $208 = $207 >>> 1;
        $210 = $208;
       } else {
        $206 = HEAP32[$11>>2]|0;
        $210 = $206;
       }
       $209 = ($210|0)==(0);
       if (!($209)) {
        if ($198) {
         $212 = $196&255;
         $213 = $212 >>> 1;
         $215 = $213;
        } else {
         $211 = HEAP32[$8>>2]|0;
         $215 = $211;
        }
        $214 = ($215|0)==(0);
        if (!($214)) {
         $297 = HEAP32[$__b>>2]|0;
         $298 = (($297) + 12|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = (($297) + 16|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ($299|0)==($301|0);
         if ($302) {
          $303 = HEAP32[$297>>2]|0;
          $304 = (($303) + 36|0);
          $305 = HEAP32[$304>>2]|0;
          __THREW__ = 0;
          $306 = (invoke_ii($305|0,($297|0))|0);
          $307 = __THREW__; __THREW__ = 0;
          $308 = $307&1;
          if ($308) {
           label = 24;
           break L3;
          }
          $$pre270 = HEAP8[$__psn>>0]|0;
          $$0$i$i106 = $306;$313 = $$pre270;
         } else {
          $309 = HEAP8[$299>>0]|0;
          $310 = $309&255;
          $$0$i$i106 = $310;$313 = $190;
         }
         $311 = $$0$i$i106&255;
         $312 = $313 & 1;
         $314 = ($312<<24>>24)==(0);
         $315 = HEAP32[$12>>2]|0;
         $$284 = $314 ? $10 : $315;
         $316 = HEAP8[$$284>>0]|0;
         $317 = ($311<<24>>24)==($316<<24>>24);
         $318 = HEAP32[$__b>>2]|0;
         $319 = (($318) + 12|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = (($318) + 16|0);
         $322 = HEAP32[$321>>2]|0;
         $323 = ($320|0)==($322|0);
         if ($317) {
          if ($323) {
           $324 = HEAP32[$318>>2]|0;
           $325 = (($324) + 40|0);
           $326 = HEAP32[$325>>2]|0;
           __THREW__ = 0;
           (invoke_ii($326|0,($318|0))|0);
           $327 = __THREW__; __THREW__ = 0;
           $328 = $327&1;
           if ($328) {
            label = 24;
            break L3;
           }
          } else {
           $329 = (($320) + 1|0);
           HEAP32[$319>>2] = $329;
          }
          $330 = HEAP8[$__psn>>0]|0;
          $331 = $330 & 1;
          $332 = ($331<<24>>24)==(0);
          if ($332) {
           $334 = $330&255;
           $335 = $334 >>> 1;
           $337 = $335;
          } else {
           $333 = HEAP32[$11>>2]|0;
           $337 = $333;
          }
          $336 = ($337>>>0)>(1);
          $__psn$__trailing_sign$05 = $336 ? $__psn : $__trailing_sign$0229;
          $877 = $875;$878 = $874;$__trailing_sign$1 = $__psn$__trailing_sign$05;
          break L25;
         }
         if ($323) {
          $338 = HEAP32[$318>>2]|0;
          $339 = (($338) + 36|0);
          $340 = HEAP32[$339>>2]|0;
          __THREW__ = 0;
          $341 = (invoke_ii($340|0,($318|0))|0);
          $342 = __THREW__; __THREW__ = 0;
          $343 = $342&1;
          if ($343) {
           label = 24;
           break L3;
          } else {
           $$0$i$i115 = $341;
          }
         } else {
          $344 = HEAP8[$320>>0]|0;
          $345 = $344&255;
          $$0$i$i115 = $345;
         }
         $346 = $$0$i$i115&255;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         $350 = HEAP32[$9>>2]|0;
         $$285 = $349 ? $7 : $350;
         $351 = HEAP8[$$285>>0]|0;
         $352 = ($346<<24>>24)==($351<<24>>24);
         if (!($352)) {
          label = 132;
          break L3;
         }
         $353 = HEAP32[$__b>>2]|0;
         $354 = (($353) + 12|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($353) + 16|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($355|0)==($357|0);
         if ($358) {
          $359 = HEAP32[$353>>2]|0;
          $360 = (($359) + 40|0);
          $361 = HEAP32[$360>>2]|0;
          __THREW__ = 0;
          (invoke_ii($361|0,($353|0))|0);
          $362 = __THREW__; __THREW__ = 0;
          $363 = $362&1;
          if ($363) {
           label = 24;
           break L3;
          }
         } else {
          $364 = (($355) + 1|0);
          HEAP32[$354>>2] = $364;
         }
         HEAP8[$__neg>>0] = 1;
         $365 = HEAP8[$__nsn>>0]|0;
         $366 = $365 & 1;
         $367 = ($366<<24>>24)==(0);
         if ($367) {
          $369 = $365&255;
          $370 = $369 >>> 1;
          $372 = $370;
         } else {
          $368 = HEAP32[$8>>2]|0;
          $372 = $368;
         }
         $371 = ($372>>>0)>(1);
         $__nsn$__trailing_sign$06 = $371 ? $__nsn : $__trailing_sign$0229;
         $877 = $875;$878 = $874;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
         break L25;
        }
       }
       if ($192) {
        $217 = $190&255;
        $218 = $217 >>> 1;
        $220 = $218;
       } else {
        $216 = HEAP32[$11>>2]|0;
        $220 = $216;
       }
       $219 = ($220|0)==(0);
       $221 = HEAP32[$__b>>2]|0;
       $222 = (($221) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($221) + 16|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($223|0)==($225|0);
       if ($219) {
        if ($226) {
         $262 = HEAP32[$221>>2]|0;
         $263 = (($262) + 36|0);
         $264 = HEAP32[$263>>2]|0;
         __THREW__ = 0;
         $265 = (invoke_ii($264|0,($221|0))|0);
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          label = 24;
          break L3;
         }
         $$pre268 = HEAP8[$__nsn>>0]|0;
         $$0$i$i99 = $265;$272 = $$pre268;
        } else {
         $268 = HEAP8[$223>>0]|0;
         $269 = $268&255;
         $$0$i$i99 = $269;$272 = $196;
        }
        $270 = $$0$i$i99&255;
        $271 = $272 & 1;
        $273 = ($271<<24>>24)==(0);
        $274 = HEAP32[$9>>2]|0;
        $$283 = $273 ? $7 : $274;
        $275 = HEAP8[$$283>>0]|0;
        $276 = ($270<<24>>24)==($275<<24>>24);
        if (!($276)) {
         $877 = $875;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
         break L25;
        }
        $277 = HEAP32[$__b>>2]|0;
        $278 = (($277) + 12|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 16|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279|0)==($281|0);
        if ($282) {
         $283 = HEAP32[$277>>2]|0;
         $284 = (($283) + 40|0);
         $285 = HEAP32[$284>>2]|0;
         __THREW__ = 0;
         (invoke_ii($285|0,($277|0))|0);
         $286 = __THREW__; __THREW__ = 0;
         $287 = $286&1;
         if ($287) {
          label = 24;
          break L3;
         }
        } else {
         $288 = (($279) + 1|0);
         HEAP32[$278>>2] = $288;
        }
        HEAP8[$__neg>>0] = 1;
        $289 = HEAP8[$__nsn>>0]|0;
        $290 = $289 & 1;
        $291 = ($290<<24>>24)==(0);
        if ($291) {
         $293 = $289&255;
         $294 = $293 >>> 1;
         $296 = $294;
        } else {
         $292 = HEAP32[$8>>2]|0;
         $296 = $292;
        }
        $295 = ($296>>>0)>(1);
        $__nsn$__trailing_sign$0 = $295 ? $__nsn : $__trailing_sign$0229;
        $877 = $875;$878 = $874;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L25;
       }
       if ($226) {
        $227 = HEAP32[$221>>2]|0;
        $228 = (($227) + 36|0);
        $229 = HEAP32[$228>>2]|0;
        __THREW__ = 0;
        $230 = (invoke_ii($229|0,($221|0))|0);
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        if ($232) {
         label = 24;
         break L3;
        }
        $$pre269 = HEAP8[$__psn>>0]|0;
        $$0$i$i79 = $230;$237 = $$pre269;
       } else {
        $233 = HEAP8[$223>>0]|0;
        $234 = $233&255;
        $$0$i$i79 = $234;$237 = $190;
       }
       $235 = $$0$i$i79&255;
       $236 = $237 & 1;
       $238 = ($236<<24>>24)==(0);
       $239 = HEAP32[$12>>2]|0;
       $$ = $238 ? $10 : $239;
       $240 = HEAP8[$$>>0]|0;
       $241 = ($235<<24>>24)==($240<<24>>24);
       if (!($241)) {
        HEAP8[$__neg>>0] = 1;
        $877 = $875;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
        break L25;
       }
       $242 = HEAP32[$__b>>2]|0;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 16|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($244|0)==($246|0);
       if ($247) {
        $248 = HEAP32[$242>>2]|0;
        $249 = (($248) + 40|0);
        $250 = HEAP32[$249>>2]|0;
        __THREW__ = 0;
        (invoke_ii($250|0,($242|0))|0);
        $251 = __THREW__; __THREW__ = 0;
        $252 = $251&1;
        if ($252) {
         label = 24;
         break L3;
        }
       } else {
        $253 = (($244) + 1|0);
        HEAP32[$243>>2] = $253;
       }
       $254 = HEAP8[$__psn>>0]|0;
       $255 = $254 & 1;
       $256 = ($255<<24>>24)==(0);
       if ($256) {
        $258 = $254&255;
        $259 = $258 >>> 1;
        $261 = $259;
       } else {
        $257 = HEAP32[$11>>2]|0;
        $261 = $257;
       }
       $260 = ($261>>>0)>(1);
       $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0229;
       $877 = $875;$878 = $874;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $375 = ($__trailing_sign$0229|0)!=(0|0);
      $376 = ($__p$0227>>>0)<(2);
      $or$cond = $375 | $376;
      if (!($or$cond)) {
       $377 = ($__p$0227|0)==(2);
       if ($377) {
        $378 = HEAP8[$21>>0]|0;
        $379 = ($378<<24>>24)!=(0);
        $380 = $379;
       } else {
        $380 = 0;
       }
       $brmerge = $14 | $380;
       if (!($brmerge)) {
        $877 = $875;$878 = $874;$__trailing_sign$1 = 0;
        break L25;
       }
      }
      $381 = HEAP8[$__sym>>0]|0;
      $382 = $381 & 1;
      $383 = ($382<<24>>24)==(0);
      $384 = HEAP32[$16>>2]|0;
      $$286 = $383 ? $15 : $384;
      $385 = ($__p$0227|0)==(0);
      L260: do {
       if ($385) {
        $$pre$i2$i$i150 = $875;$437 = $381;$447 = $$286;$465 = $875;
       } else {
        $386 = (($__p$0227) + -1)|0;
        $387 = (($__pat) + ($386)|0);
        $388 = HEAP8[$387>>0]|0;
        $switch = ($388&255)<(2);
        if ($switch) {
         $389 = $381&255;
         $390 = $389 >>> 1;
         $391 = HEAP32[$16>>2]|0;
         $392 = HEAP32[$17>>2]|0;
         $395 = $$286;
         while(1) {
          $$287 = $383 ? $15 : $391;
          $$288 = $383 ? $390 : $392;
          $393 = (($$287) + ($$288)|0);
          $394 = ($395|0)==($393|0);
          if ($394) {
           break;
          }
          $396 = HEAP8[$395>>0]|0;
          $isascii1$i156 = ($396<<24>>24)>(-1);
          if (!($isascii1$i156)) {
           break;
          }
          $397 = $396 << 24 >> 24;
          $398 = HEAP32[$6>>2]|0;
          $399 = (($398) + ($397<<1)|0);
          $400 = HEAP16[$399>>1]|0;
          $401 = $400 & 8192;
          $402 = ($401<<16>>16)==(0);
          $403 = (($395) + 1|0);
          if ($402) {
           break;
          } else {
           $395 = $403;
          }
         }
         $$289 = $383 ? $15 : $391;
         $404 = $395;
         $405 = $$289;
         $406 = (($404) - ($405))|0;
         $407 = HEAP8[$__spaces>>0]|0;
         $408 = $407 & 1;
         $409 = ($408<<24>>24)==(0);
         if ($409) {
          $411 = $407&255;
          $412 = $411 >>> 1;
          $414 = $412;
         } else {
          $410 = HEAP32[$20>>2]|0;
          $414 = $410;
         }
         $413 = ($406>>>0)>($414>>>0);
         L272: do {
          if (!($413)) {
           if ($409) {
            $418 = $407&255;
            $419 = $418 >>> 1;
            $$sum274 = (($419) - ($406))|0;
            $420 = ((($__spaces) + ($$sum274)|0) + 1|0);
            $421 = $407&255;
            $422 = $421 >>> 1;
            $424 = $18;$425 = $422;$427 = $420;
           } else {
            $415 = HEAP32[$19>>2]|0;
            $416 = HEAP32[$20>>2]|0;
            $$sum = (($416) - ($406))|0;
            $417 = (($415) + ($$sum)|0);
            $424 = $415;$425 = $416;$427 = $417;
           }
           $423 = (($424) + ($425)|0);
           $$290 = $383 ? $15 : $391;
           $426 = ($427|0)==($423|0);
           if ($426) {
            $$pre$i2$i$i150 = $875;$437 = $381;$447 = $395;$465 = $875;
            break L260;
           } else {
            $429 = $427;$431 = $$290;
           }
           while(1) {
            $428 = HEAP8[$429>>0]|0;
            $430 = HEAP8[$431>>0]|0;
            $432 = ($428<<24>>24)==($430<<24>>24);
            if (!($432)) {
             break L272;
            }
            $433 = (($429) + 1|0);
            $434 = (($431) + 1|0);
            $435 = ($433|0)==($423|0);
            if ($435) {
             $$pre$i2$i$i150 = $875;$437 = $381;$447 = $395;$465 = $875;
             break L260;
            } else {
             $429 = $433;$431 = $434;
            }
           }
          }
         } while(0);
         $$291 = $383 ? $15 : $391;
         $$pre$i2$i$i150 = $875;$437 = $381;$447 = $$291;$465 = $875;
        } else {
         $$pre$i2$i$i150 = $875;$437 = $381;$447 = $$286;$465 = $875;
        }
       }
      } while(0);
      L282: while(1) {
       $436 = $437 & 1;
       $438 = ($436<<24>>24)==(0);
       if ($438) {
        $441 = $437&255;
        $442 = $441 >>> 1;
        $444 = $15;$445 = $442;
       } else {
        $439 = HEAP32[$16>>2]|0;
        $440 = HEAP32[$17>>2]|0;
        $444 = $439;$445 = $440;
       }
       $443 = (($444) + ($445)|0);
       $446 = ($447|0)==($443|0);
       if ($446) {
        $880 = $$pre$i2$i$i150;
        break;
       }
       $448 = HEAP32[$__b>>2]|0;
       $449 = ($448|0)==(0|0);
       do {
        if ($449) {
         $463 = 0;
        } else {
         $450 = (($448) + 12|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = (($448) + 16|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ($451|0)==($453|0);
         if ($454) {
          $455 = HEAP32[$448>>2]|0;
          $456 = (($455) + 36|0);
          $457 = HEAP32[$456>>2]|0;
          __THREW__ = 0;
          $458 = (invoke_ii($457|0,($448|0))|0);
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           label = 22;
           break L3;
          }
          $461 = ($458|0)==(-1);
          if ($461) {
           HEAP32[$__b>>2] = 0;
           $463 = 0;
           break;
          } else {
           $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
           $463 = $$pre$i$i$i146;
           break;
          }
         } else {
          $463 = $448;
         }
        }
       } while(0);
       $462 = ($463|0)==(0|0);
       $464 = ($465|0)==(0|0);
       do {
        if ($464) {
         $$pre$i2$i$i150239 = $$pre$i2$i$i150;
         label = 170;
        } else {
         $466 = (($465) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($465) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if (!($470)) {
          if ($462) {
           $$pre$i2$i$i150238 = $$pre$i2$i$i150;$881 = $465;
           break;
          } else {
           $880 = $$pre$i2$i$i150;
           break L282;
          }
         }
         $471 = HEAP32[$465>>2]|0;
         $472 = (($471) + 36|0);
         $473 = HEAP32[$472>>2]|0;
         __THREW__ = 0;
         $474 = (invoke_ii($473|0,($465|0))|0);
         $475 = __THREW__; __THREW__ = 0;
         $476 = $475&1;
         if ($476) {
          label = 22;
          break L3;
         }
         $477 = ($474|0)==(-1);
         if ($477) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i150239 = 0;
          label = 170;
          break;
         } else {
          $478 = ($$pre$i2$i$i150|0)==(0|0);
          $tmp$i$i152 = $462 ^ $478;
          if ($tmp$i$i152) {
           $$pre$i2$i$i150238 = $$pre$i2$i$i150;$881 = $$pre$i2$i$i150;
           break;
          } else {
           $880 = $$pre$i2$i$i150;
           break L282;
          }
         }
        }
       } while(0);
       if ((label|0) == 170) {
        label = 0;
        if ($462) {
         $880 = $$pre$i2$i$i150239;
         break;
        } else {
         $$pre$i2$i$i150238 = $$pre$i2$i$i150239;$881 = 0;
        }
       }
       $479 = HEAP32[$__b>>2]|0;
       $480 = (($479) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($479) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = (($485) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        __THREW__ = 0;
        $488 = (invoke_ii($487|0,($479|0))|0);
        $489 = __THREW__; __THREW__ = 0;
        $490 = $489&1;
        if ($490) {
         label = 22;
         break L3;
        } else {
         $$0$i$i142 = $488;
        }
       } else {
        $491 = HEAP8[$481>>0]|0;
        $492 = $491&255;
        $$0$i$i142 = $492;
       }
       $493 = $$0$i$i142&255;
       $494 = HEAP8[$447>>0]|0;
       $495 = ($493<<24>>24)==($494<<24>>24);
       if (!($495)) {
        $880 = $$pre$i2$i$i150238;
        break;
       }
       $496 = HEAP32[$__b>>2]|0;
       $497 = (($496) + 12|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = (($496) + 16|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ($498|0)==($500|0);
       if ($501) {
        $502 = HEAP32[$496>>2]|0;
        $503 = (($502) + 40|0);
        $504 = HEAP32[$503>>2]|0;
        __THREW__ = 0;
        (invoke_ii($504|0,($496|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 22;
         break L3;
        }
       } else {
        $507 = (($498) + 1|0);
        HEAP32[$497>>2] = $507;
       }
       $508 = (($447) + 1|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i150 = $$pre$i2$i$i150238;$437 = $$pre;$447 = $508;$465 = $881;
      }
      if ($14) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       if ($511) {
        $514 = $509&255;
        $515 = $514 >>> 1;
        $517 = $15;$518 = $515;
       } else {
        $512 = HEAP32[$16>>2]|0;
        $513 = HEAP32[$17>>2]|0;
        $517 = $512;$518 = $513;
       }
       $516 = (($517) + ($518)|0);
       $519 = ($447|0)==($516|0);
       if ($519) {
        $877 = $880;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
       } else {
        label = 185;
        break L3;
       }
      } else {
       $877 = $880;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
      }
      break;
     }
     default: {
      $877 = $875;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
     }
     }
    } while(0);
    L324: do {
     if ((label|0) == 41) {
      label = 0;
      $119 = ($__p$0227|0)==(3);
      if ($119) {
       $862 = $874;$876 = $875;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
       label = 280;
       break L3;
      } else {
       $$pre$i2$i$i39 = $875;$137 = $875;
      }
      while(1) {
       $120 = HEAP32[$__b>>2]|0;
       $121 = ($120|0)==(0|0);
       do {
        if ($121) {
         $135 = 0;
        } else {
         $122 = (($120) + 12|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (($120) + 16|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = ($123|0)==($125|0);
         if ($126) {
          $127 = HEAP32[$120>>2]|0;
          $128 = (($127) + 36|0);
          $129 = HEAP32[$128>>2]|0;
          __THREW__ = 0;
          $130 = (invoke_ii($129|0,($120|0))|0);
          $131 = __THREW__; __THREW__ = 0;
          $132 = $131&1;
          if ($132) {
           label = 23;
           break L3;
          }
          $133 = ($130|0)==(-1);
          if ($133) {
           HEAP32[$__b>>2] = 0;
           $135 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $135 = $$pre$i$i$i35;
           break;
          }
         } else {
          $135 = $120;
         }
        }
       } while(0);
       $134 = ($135|0)==(0|0);
       $136 = ($137|0)==(0|0);
       do {
        if ($136) {
         $$pre$i2$i$i39235 = $$pre$i2$i$i39;
         label = 54;
        } else {
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($137) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if (!($142)) {
          if ($134) {
           $$pre$i2$i$i39237 = $$pre$i2$i$i39;$879 = $137;
           break;
          } else {
           $877 = $$pre$i2$i$i39;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
           break L324;
          }
         }
         $143 = HEAP32[$137>>2]|0;
         $144 = (($143) + 36|0);
         $145 = HEAP32[$144>>2]|0;
         __THREW__ = 0;
         $146 = (invoke_ii($145|0,($137|0))|0);
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 23;
          break L3;
         }
         $149 = ($146|0)==(-1);
         if ($149) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i39235 = 0;
          label = 54;
          break;
         } else {
          $150 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $134 ^ $150;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39237 = $$pre$i2$i$i39;$879 = $$pre$i2$i$i39;
           break;
          } else {
           $877 = $$pre$i2$i$i39;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
           break L324;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($134) {
         $877 = $$pre$i2$i$i39235;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
         break L324;
        } else {
         $$pre$i2$i$i39237 = $$pre$i2$i$i39235;$879 = 0;
        }
       }
       $151 = HEAP32[$__b>>2]|0;
       $152 = (($151) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($151) + 16|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($153|0)==($155|0);
       if ($156) {
        $157 = HEAP32[$151>>2]|0;
        $158 = (($157) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($151|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         label = 23;
         break L3;
        } else {
         $$0$i$i45 = $160;
        }
       } else {
        $163 = HEAP8[$153>>0]|0;
        $164 = $163&255;
        $$0$i$i45 = $164;
       }
       $165 = $$0$i$i45&255;
       $isascii1$i48 = ($165<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $877 = $$pre$i2$i$i39237;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
        break L324;
       }
       $sext195 = $$0$i$i45 << 24;
       $166 = $sext195 >> 24;
       $167 = HEAP32[$6>>2]|0;
       $168 = (($167) + ($166<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 & 8192;
       $171 = ($170<<16>>16)==(0);
       if ($171) {
        $877 = $$pre$i2$i$i39237;$878 = $874;$__trailing_sign$1 = $__trailing_sign$0229;
        break L324;
       }
       $172 = HEAP32[$__b>>2]|0;
       $173 = (($172) + 12|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 16|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($174|0)==($176|0);
       if ($177) {
        $178 = HEAP32[$172>>2]|0;
        $179 = (($178) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        __THREW__ = 0;
        $181 = (invoke_ii($180|0,($172|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         label = 23;
         break L3;
        } else {
         $$0$i$i50 = $181;
        }
       } else {
        $184 = (($174) + 1|0);
        HEAP32[$173>>2] = $184;
        $185 = HEAP8[$174>>0]|0;
        $186 = $185&255;
        $$0$i$i50 = $186;
       }
       $187 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(511,($__spaces|0),($187|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 23;
        break L3;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39237;$137 = $879;
       }
      }
     }
    } while(0);
    $777 = (($__p$0227) + 1)|0;
    $778 = ($777>>>0)<(4);
    if ($778) {
     $874 = $878;$__p$0227 = $777;$__trailing_sign$0229 = $__trailing_sign$1;
    } else {
     $862 = $878;$876 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 280;
     break;
    }
   }
   L359:    switch (label|0) {
    case 20: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
     break;
    }
    case 21: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
     break;
    }
    case 22: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
     break;
    }
    case 23: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
     break;
    }
    case 24: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L1;
     break;
    }
    case 40: {
     $117 = HEAP32[$__err>>2]|0;
     $118 = $117 | 4;
     HEAP32[$__err>>2] = $118;
     $$0 = 0;
     break;
    }
    case 132: {
     $373 = HEAP32[$__err>>2]|0;
     $374 = $373 | 4;
     HEAP32[$__err>>2] = $374;
     $$0 = 0;
     break;
    }
    case 185: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 244: {
     $667 = HEAP32[$__err>>2]|0;
     $668 = $667 | 4;
     HEAP32[$__err>>2] = $668;
     $$0 = 0;
     break;
    }
    case 267: {
     $733 = HEAP32[$__err>>2]|0;
     $734 = $733 | 4;
     HEAP32[$__err>>2] = $734;
     $$0 = 0;
     break;
    }
    case 278: {
     $775 = HEAP32[$__err>>2]|0;
     $776 = $775 | 4;
     HEAP32[$__err>>2] = $776;
     $$0 = 0;
     break;
    }
    case 280: {
     $779 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L372: do {
      if (!($779)) {
       $780 = (($__trailing_sign$0$lcssa) + 1|0);
       $781 = (($__trailing_sign$0$lcssa) + 8|0);
       $782 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $876;$808 = $876;$__i$0 = 1;
       L374: while(1) {
        $783 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $784 = $783 & 1;
        $785 = ($784<<24>>24)==(0);
        if ($785) {
         $787 = $783&255;
         $788 = $787 >>> 1;
         $790 = $788;
        } else {
         $786 = HEAP32[$782>>2]|0;
         $790 = $786;
        }
        $789 = ($__i$0>>>0)<($790>>>0);
        if (!($789)) {
         break L372;
        }
        $791 = HEAP32[$__b>>2]|0;
        $792 = ($791|0)==(0|0);
        do {
         if ($792) {
          $806 = 0;
         } else {
          $793 = (($791) + 12|0);
          $794 = HEAP32[$793>>2]|0;
          $795 = (($791) + 16|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = ($794|0)==($796|0);
          if ($797) {
           $798 = HEAP32[$791>>2]|0;
           $799 = (($798) + 36|0);
           $800 = HEAP32[$799>>2]|0;
           __THREW__ = 0;
           $801 = (invoke_ii($800|0,($791|0))|0);
           $802 = __THREW__; __THREW__ = 0;
           $803 = $802&1;
           if ($803) {
            label = 19;
            break L374;
           }
           $804 = ($801|0)==(-1);
           if ($804) {
            HEAP32[$__b>>2] = 0;
            $806 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $806 = $$pre$i$i$i;
            break;
           }
          } else {
           $806 = $791;
          }
         }
        } while(0);
        $805 = ($806|0)==(0|0);
        $807 = ($808|0)==(0|0);
        do {
         if ($807) {
          $$pre$i2$i$i244$ph = $$pre$i2$i$i;
          label = 298;
         } else {
          $809 = (($808) + 12|0);
          $810 = HEAP32[$809>>2]|0;
          $811 = (($808) + 16|0);
          $812 = HEAP32[$811>>2]|0;
          $813 = ($810|0)==($812|0);
          if (!($813)) {
           if ($805) {
            $$pre$i2$i$i244281 = $$pre$i2$i$i;$890 = $808;
            break;
           } else {
            label = 306;
            break L374;
           }
          }
          $814 = HEAP32[$808>>2]|0;
          $815 = (($814) + 36|0);
          $816 = HEAP32[$815>>2]|0;
          __THREW__ = 0;
          $817 = (invoke_ii($816|0,($808|0))|0);
          $818 = __THREW__; __THREW__ = 0;
          $819 = $818&1;
          if ($819) {
           label = 19;
           break L374;
          }
          $820 = ($817|0)==(-1);
          if ($820) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i244$ph = 0;
           label = 298;
           break;
          } else {
           $821 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $805 ^ $821;
           if ($tmp$i$i) {
            $$pre$i2$i$i244281 = $$pre$i2$i$i;$890 = $$pre$i2$i$i;
            break;
           } else {
            label = 306;
            break L374;
           }
          }
         }
        } while(0);
        if ((label|0) == 298) {
         label = 0;
         if ($805) {
          label = 306;
          break;
         } else {
          $$pre$i2$i$i244281 = $$pre$i2$i$i244$ph;$890 = 0;
         }
        }
        $822 = HEAP32[$__b>>2]|0;
        $823 = (($822) + 12|0);
        $824 = HEAP32[$823>>2]|0;
        $825 = (($822) + 16|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = ($824|0)==($826|0);
        if ($827) {
         $828 = HEAP32[$822>>2]|0;
         $829 = (($828) + 36|0);
         $830 = HEAP32[$829>>2]|0;
         __THREW__ = 0;
         $831 = (invoke_ii($830|0,($822|0))|0);
         $832 = __THREW__; __THREW__ = 0;
         $833 = $832&1;
         if ($833) {
          label = 19;
          break;
         } else {
          $$0$i$i = $831;
         }
        } else {
         $834 = HEAP8[$824>>0]|0;
         $835 = $834&255;
         $$0$i$i = $835;
        }
        $836 = $$0$i$i&255;
        $837 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $838 = $837 & 1;
        $839 = ($838<<24>>24)==(0);
        if ($839) {
         $842 = $780;
        } else {
         $840 = HEAP32[$781>>2]|0;
         $842 = $840;
        }
        $841 = (($842) + ($__i$0)|0);
        $843 = HEAP8[$841>>0]|0;
        $844 = ($836<<24>>24)==($843<<24>>24);
        if (!($844)) {
         label = 306;
         break;
        }
        $847 = (($__i$0) + 1)|0;
        $848 = HEAP32[$__b>>2]|0;
        $849 = (($848) + 12|0);
        $850 = HEAP32[$849>>2]|0;
        $851 = (($848) + 16|0);
        $852 = HEAP32[$851>>2]|0;
        $853 = ($850|0)==($852|0);
        if ($853) {
         $854 = HEAP32[$848>>2]|0;
         $855 = (($854) + 40|0);
         $856 = HEAP32[$855>>2]|0;
         __THREW__ = 0;
         (invoke_ii($856|0,($848|0))|0);
         $857 = __THREW__; __THREW__ = 0;
         $858 = $857&1;
         if ($858) {
          label = 19;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i244281;$808 = $890;$__i$0 = $847;
          continue;
         }
        } else {
         $859 = (($850) + 1|0);
         HEAP32[$849>>2] = $859;
         $$pre$i2$i$i = $$pre$i2$i$i244281;$808 = $890;$__i$0 = $847;
         continue;
        }
       }
       if ((label|0) == 19) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $lpad$phi$index = $57;$lpad$phi$index7 = $58;
        break L1;
       }
       else if ((label|0) == 306) {
        $845 = HEAP32[$__err>>2]|0;
        $846 = $845 | 4;
        HEAP32[$__err>>2] = $846;
        $$0 = 0;
        break L359;
       }
      }
     } while(0);
     $860 = HEAP32[$__gb>>2]|0;
     $861 = ($860|0)==($862|0);
     if ($861) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$860,$862,$__et);
      $863 = HEAP32[$__et>>2]|0;
      $864 = ($863|0)==(0);
      if ($864) {
       $$0 = 1;
      } else {
       $865 = HEAP32[$__err>>2]|0;
       $866 = $865 | 4;
       HEAP32[$__err>>2] = $866;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $867 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $868 = ($867|0)==(0|0);
   if ($868) {
    STACKTOP = sp;return ($$0|0);
   }
   $869 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($869|0,($867|0));
   $870 = __THREW__; __THREW__ = 0;
   $871 = $870&1;
   if ($871) {
    $872 = ___cxa_find_matching_catch(0|0)|0;
    $873 = tempRet0;
    ___clang_call_terminate($872);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $71 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $73 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($73|0,($71|0));
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $76 = ___cxa_find_matching_catch(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(606,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(20088|0),(357|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0113 = 0, $$0114 = 0, $$015 = 0, $$016 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 8|0;
 $__wn = sp + 24|0;
 $__loc = sp + 20|0;
 $__neg = sp + 128|0;
 $0 = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 600;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(452,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0113 = $32;$$015 = $31;$95 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(453,($__loc|0),(11408|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(601,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(511,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      L18: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP8[$__w$05>>0]|0;
         $46 = ($45<<24>>24)==($36<<24>>24);
         $44 = (($__w$05) + 1|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L18;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(607,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $64 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $64 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $64 = $$pre$i$i$i;
         break;
        }
       } else {
        $64 = $49;
       }
      }
     } while(0);
     $63 = ($64|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 29;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($63) {
         break;
        } else {
         label = 31;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 29;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $63 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($63) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      STACKTOP = sp;return;
     }
     $85 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($85|0,($83|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0114 = $91;$$016 = $90;
   ___resumeException($$016|0);
   // unreachable;
  } else {
   $$0113 = $91;$$015 = $90;$95 = $$pre;
  }
 }
 $94 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($94|0,($95|0));
 $96 = __THREW__; __THREW__ = 0;
 $97 = $96&1;
 if ($97) {
  $98 = ___cxa_find_matching_catch(0|0)|0;
  $99 = tempRet0;
  ___clang_call_terminate($98);
  // unreachable;
 } else {
  $$0114 = $$0113;$$016 = $$015;
  ___resumeException($$016|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10848)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 1|0);
   HEAP8[$38>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP8[$36>>0] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 1|0);
   HEAP8[$74>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP8[$72>>0] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10784)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 1|0);
   HEAP8[$97>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP8[$95>>0] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 1|0);
   HEAP8[$111>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP8[$109>>0] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP8[$__dp>>0] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP8[$__ts>>0] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 1|0);
   HEAP8[$147>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(600|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 574;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(600|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 574;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0;
 var $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 464|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 576|0;
 $0 = sp + 56|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 600;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(452,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$113 = $33;$$1211 = $34;$107 = 600;$108 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(453,($__loc|0),(11400|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(609,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 48|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(11104|0),(((11104 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       if ($24) {
        $25 = $23 >> 2;
        $26 = (($25) + 2)|0;
        $27 = (_malloc($26)|0);
        $28 = ($27|0)==(0|0);
        if ($28) {
         __THREW__ = 0;
         invoke_v(573);
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if ($30) {
          $31 = ___cxa_find_matching_catch()|0;
          $32 = tempRet0;
          $$0 = $31;$$01 = $32;
          break;
         } else {
          $39 = 0;$__nc$0 = 0;
         }
        } else {
         $39 = $27;$__nc$0 = $27;
        }
       } else {
        $39 = 0;$__nc$0 = $__nbuf;
       }
       $40 = HEAP8[$__neg>>0]|0;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $__nc$1 = $__nc$0;
       } else {
        $42 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $42;
       }
       $43 = ($20>>>0)<($19>>>0);
       if ($43) {
        $44 = (($__atoms) + 40|0);
        $45 = $__atoms;
        $__nc$26 = $__nc$1;$__w$07 = $20;
        while(1) {
         $46 = HEAP32[$__w$07>>2]|0;
         $$01$i = $__atoms;
         while(1) {
          $49 = HEAP32[$$01$i>>2]|0;
          $50 = ($49|0)==($46|0);
          $48 = (($$01$i) + 4|0);
          if ($50) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $47 = ($48|0)==($44|0);
          if ($47) {
           $$0$lcssa$i = $44;
           break;
          } else {
           $$01$i = $48;
          }
         }
         $51 = $$0$lcssa$i;
         $52 = (($51) - ($45))|0;
         $53 = $52 >> 2;
         $54 = (11104 + ($53)|0);
         $55 = HEAP8[$54>>0]|0;
         HEAP8[$__nc$26>>0] = $55;
         $56 = (($__w$07) + 4|0);
         $57 = (($__nc$26) + 1|0);
         $58 = HEAP32[$__wn>>2]|0;
         $59 = ($56>>>0)<($58>>>0);
         if ($59) {
          $__nc$26 = $57;$__w$07 = $56;
         } else {
          $__nc$2$lcssa = $57;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $60 = (_sscanf($__nbuf,11040,$vararg_buffer)|0);
       $61 = ($60|0)==(1);
       if (!($61)) {
        __THREW__ = 0;
        invoke_vi(602,(11048|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         $37 = ___cxa_find_matching_catch()|0;
         $38 = tempRet0;
         _free($39);
         $$0 = $37;$$01 = $38;
         break;
        }
       }
       _free($39);
      }
      $64 = HEAP32[$__b>>2]|0;
      $65 = ($64|0)==(0|0);
      do {
       if ($65) {
        $113 = 1;
       } else {
        $66 = (($64) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($64) + 16|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($67|0)==($69|0);
        if ($70) {
         $71 = HEAP32[$64>>2]|0;
         $72 = (($71) + 36|0);
         $73 = HEAP32[$72>>2]|0;
         __THREW__ = 0;
         $74 = (invoke_ii($73|0,($64|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 11;
          break L3;
         } else {
          $$0$i$i$i$i = $74;
         }
        } else {
         $77 = HEAP32[$67>>2]|0;
         $$0$i$i$i$i = $77;
        }
        $78 = ($$0$i$i$i$i|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $113 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $113 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $79 = HEAP32[$__e>>2]|0;
      $80 = ($79|0)==(0|0);
      do {
       if ($80) {
        label = 37;
       } else {
        $81 = (($79) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($79) + 16|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        if ($85) {
         $86 = HEAP32[$79>>2]|0;
         $87 = (($86) + 36|0);
         $88 = HEAP32[$87>>2]|0;
         __THREW__ = 0;
         $89 = (invoke_ii($88|0,($79|0))|0);
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if ($91) {
          label = 11;
          break L3;
         } else {
          $$0$i$i1$i$i = $89;
         }
        } else {
         $92 = HEAP32[$82>>2]|0;
         $$0$i$i1$i$i = $92;
        }
        $93 = ($$0$i$i1$i$i|0)==(-1);
        if ($93) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        } else {
         if ($113) {
          break;
         } else {
          label = 39;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       if ($113) {
        label = 39;
       }
      }
      if ((label|0) == 39) {
       $94 = HEAP32[$__err>>2]|0;
       $95 = $94 | 2;
       HEAP32[$__err>>2] = $95;
      }
      $96 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $96;
      $97 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
      $98 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $99 = ($98|0)==(0|0);
      if ($99) {
       STACKTOP = sp;return;
      }
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $$0 = $35;$$01 = $36;
   }
   $105 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $106 = ($$pre|0)==(0|0);
   if ($106) {
    $$114 = $$0;$$1212 = $$01;
    ___resumeException($$114|0);
    // unreachable;
   } else {
    $$pre16 = HEAP32[$1>>2]|0;
    $$113 = $$0;$$1211 = $$01;$107 = $$pre16;$108 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($107|0,($108|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch(0|0)|0;
  $112 = tempRet0;
  ___clang_call_terminate($111);
  // unreachable;
 } else {
  $$114 = $$113;$$1212 = $$1211;
  ___resumeException($$114|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i$i$i144 = 0, $$0$i$i$i$i169 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i78 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i118 = 0, $$0$i$i1$i$i150 = 0, $$0$i$i1$i$i175 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i84 = 0, $$0$i$i105 = 0, $$0$i$i108 = 0, $$0$i$i130 = 0;
 var $$0$i$i141 = 0, $$0$i$i165 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i72 = 0, $$0$i$i75 = 0, $$0$i$i96 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$295 = 0, $$296 = 0, $$297 = 0, $$298 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0;
 var $$pre$i$i$i146 = 0, $$pre$i$i$i171 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i80 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i120 = 0, $$pre$i3$i$i152 = 0, $$pre$i3$i$i177 = 0, $$pre$i3$i$i177258 = 0, $$pre$i3$i$i177259 = 0, $$pre$i3$i$i264$ph = 0, $$pre$i3$i$i264291 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47255 = 0, $$pre$i3$i$i47257 = 0, $$pre$i3$i$i86 = 0, $$pre$i3$i$i86262$ph = 0, $$pre$i3$i$i86262288 = 0, $$pre276 = 0;
 var $$pre277 = 0, $$pre278 = 0, $$pre279 = 0, $$pre280 = 0, $$pre281 = 0, $$pre282 = 0, $$pre283 = 0, $$sum = 0, $$sum284 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0245 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0;
 var $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0247 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond299 = 0, $or$cond7$not = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i115 = 0, $phitmp$i$i$i147 = 0, $phitmp$i$i$i172 = 0;
 var $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i81 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i153 = 0, $phitmp$i4$i$i178 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i87 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i155 = 0, $tmp$i$i180 = 0, $tmp$i$i50 = 0, $tmp$i$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 492|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 48|0;
 $__gn = sp + 44|0;
 $__ge = sp + 36|0;
 $__pat = sp + 84|0;
 $__dp = sp + 488|0;
 $__ts = sp + 496|0;
 $__grp = sp + 56|0;
 $__sym = sp + 24|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 68|0;
 $__spaces = sp;
 $__fd = sp + 40|0;
 $__et = sp + 80|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 600;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(610,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $lpad$phi$index = $66;$lpad$phi$index8 = $67;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $853 = $__gbuf;$__p$0245 = 0;$__trailing_sign$0247 = 0;
   L4: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $854 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i18 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i18 = $31;
      }
      $32 = ($$0$i$i$i$i18|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $854 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $854 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i24 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i24 = $46;
      }
      $47 = ($$0$i$i1$i$i24|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($854) {
        $856 = $33;
        break;
       } else {
        $841 = $853;$855 = $33;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
        label = 292;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($854) {
      $841 = $853;$855 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
      label = 292;
      break;
     } else {
      $856 = 0;
     }
    }
    $48 = (($__pat) + ($__p$0245)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    L28: do {
     switch ($50|0) {
     case 0:  {
      label = 43;
      break;
     }
     case 4:  {
      $51 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i152 = $856;$529 = $856;$581 = $853;$__ng$0 = 0;
      L30: while(1) {
       $513 = HEAP32[$__b>>2]|0;
       $514 = ($513|0)==(0|0);
       do {
        if ($514) {
         $543 = 1;
        } else {
         $515 = (($513) + 12|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (($513) + 16|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = ($516|0)==($518|0);
         if ($519) {
          $520 = HEAP32[$513>>2]|0;
          $521 = (($520) + 36|0);
          $522 = HEAP32[$521>>2]|0;
          __THREW__ = 0;
          $523 = (invoke_ii($522|0,($513|0))|0);
          $524 = __THREW__; __THREW__ = 0;
          $525 = $524&1;
          if ($525) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i144 = $523;
          }
         } else {
          $526 = HEAP32[$516>>2]|0;
          $$0$i$i$i$i144 = $526;
         }
         $527 = ($$0$i$i$i$i144|0)==(-1);
         if ($527) {
          HEAP32[$__b>>2] = 0;
          $543 = 1;
          break;
         } else {
          $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i147 = ($$pre$i$i$i146|0)==(0|0);
          $543 = $phitmp$i$i$i147;
          break;
         }
        }
       } while(0);
       $528 = ($529|0)==(0|0);
       do {
        if ($528) {
         $862 = $$pre$i3$i$i152;
         label = 208;
        } else {
         $530 = (($529) + 12|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = (($529) + 16|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = ($531|0)==($533|0);
         if ($534) {
          $535 = HEAP32[$529>>2]|0;
          $536 = (($535) + 36|0);
          $537 = HEAP32[$536>>2]|0;
          __THREW__ = 0;
          $538 = (invoke_ii($537|0,($529|0))|0);
          $539 = __THREW__; __THREW__ = 0;
          $540 = $539&1;
          if ($540) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i150 = $538;
          }
         } else {
          $541 = HEAP32[$531>>2]|0;
          $$0$i$i1$i$i150 = $541;
         }
         $542 = ($$0$i$i1$i$i150|0)==(-1);
         if ($542) {
          HEAP32[$__e>>2] = 0;
          $862 = 0;
          label = 208;
          break;
         } else {
          $phitmp$i4$i$i153 = ($$pre$i3$i$i152|0)==(0|0);
          $tmp$i$i155 = $543 ^ $phitmp$i4$i$i153;
          if ($tmp$i$i155) {
           $863 = $$pre$i3$i$i152;$864 = $$pre$i3$i$i152;
           break;
          } else {
           $$pre$i3$i$i120 = $$pre$i3$i$i152;
           break L30;
          }
         }
        }
       } while(0);
       if ((label|0) == 208) {
        label = 0;
        if ($543) {
         $$pre$i3$i$i120 = $862;
         break;
        } else {
         $863 = $862;$864 = 0;
        }
       }
       $544 = HEAP32[$__b>>2]|0;
       $545 = (($544) + 12|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($544) + 16|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = ($546|0)==($548|0);
       if ($549) {
        $550 = HEAP32[$544>>2]|0;
        $551 = (($550) + 36|0);
        $552 = HEAP32[$551>>2]|0;
        __THREW__ = 0;
        $553 = (invoke_ii($552|0,($544|0))|0);
        $554 = __THREW__; __THREW__ = 0;
        $555 = $554&1;
        if ($555) {
         label = 21;
         break L4;
        } else {
         $$0$i$i141 = $553;
        }
       } else {
        $556 = HEAP32[$546>>2]|0;
        $$0$i$i141 = $556;
       }
       $557 = HEAP32[$__ct>>2]|0;
       $558 = (($557) + 12|0);
       $559 = HEAP32[$558>>2]|0;
       __THREW__ = 0;
       $560 = (invoke_iiii($559|0,($__ct|0),2048,($$0$i$i141|0))|0);
       $561 = __THREW__; __THREW__ = 0;
       $562 = $561&1;
       if ($562) {
        label = 21;
        break L4;
       }
       if ($560) {
        $563 = HEAP32[$__wn>>2]|0;
        $564 = HEAP32[$0>>2]|0;
        $565 = ($563|0)==($564|0);
        if ($565) {
         __THREW__ = 0;
         invoke_viii(612,($__wb|0),($__wn|0),($0|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          label = 21;
          break L4;
         }
         $$pre282 = HEAP32[$__wn>>2]|0;
         $569 = $$pre282;
        } else {
         $569 = $563;
        }
        $568 = (($569) + 4|0);
        HEAP32[$__wn>>2] = $568;
        HEAP32[$569>>2] = $$0$i$i141;
        $570 = (($__ng$0) + 1)|0;
        $865 = $581;$__ng$1 = $570;
       } else {
        $571 = HEAP8[$__grp>>0]|0;
        $572 = $571 & 1;
        $573 = ($572<<24>>24)==(0);
        if ($573) {
         $575 = $571&255;
         $576 = $575 >>> 1;
         $577 = $576;
        } else {
         $574 = HEAP32[$17>>2]|0;
         $577 = $574;
        }
        $notlhs = ($577|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond7$not = $notrhs & $notlhs;
        $578 = ($$0$i$i141|0)==($51|0);
        $or$cond299 = $or$cond7$not & $578;
        if (!($or$cond299)) {
         $$pre$i3$i$i120 = $863;
         break;
        }
        $579 = HEAP32[$__ge>>2]|0;
        $580 = ($581|0)==($579|0);
        if ($580) {
         __THREW__ = 0;
         invoke_viii(605,($__gb|0),($__gn|0),($__ge|0));
         $582 = __THREW__; __THREW__ = 0;
         $583 = $582&1;
         if ($583) {
          label = 21;
          break L4;
         }
         $$pre283 = HEAP32[$__gn>>2]|0;
         $585 = $$pre283;
        } else {
         $585 = $581;
        }
        $584 = (($585) + 4|0);
        HEAP32[$__gn>>2] = $584;
        HEAP32[$585>>2] = $__ng$0;
        $865 = $584;$__ng$1 = 0;
       }
       $586 = HEAP32[$__b>>2]|0;
       $587 = (($586) + 12|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = (($586) + 16|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = ($588|0)==($590|0);
       if ($591) {
        $592 = HEAP32[$586>>2]|0;
        $593 = (($592) + 40|0);
        $594 = HEAP32[$593>>2]|0;
        __THREW__ = 0;
        (invoke_ii($594|0,($586|0))|0);
        $595 = __THREW__; __THREW__ = 0;
        $596 = $595&1;
        if ($596) {
         label = 21;
         break L4;
        } else {
         $$pre$i3$i$i152 = $863;$529 = $864;$581 = $865;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $597 = (($588) + 4|0);
        HEAP32[$587>>2] = $597;
        $$pre$i3$i$i152 = $863;$529 = $864;$581 = $865;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $598 = HEAP32[$__gb>>2]|0;
      $599 = ($598|0)==($581|0);
      $600 = ($__ng$0|0)==(0);
      $or$cond8 = $599 | $600;
      if ($or$cond8) {
       $866 = $581;
      } else {
       $601 = HEAP32[$__ge>>2]|0;
       $602 = ($581|0)==($601|0);
       if ($602) {
        __THREW__ = 0;
        invoke_viii(605,($__gb|0),($__gn|0),($__ge|0));
        $603 = __THREW__; __THREW__ = 0;
        $604 = $603&1;
        if ($604) {
         label = 26;
         break L4;
        }
        $$pre281 = HEAP32[$__gn>>2]|0;
        $606 = $$pre281;
       } else {
        $606 = $581;
       }
       $605 = (($606) + 4|0);
       HEAP32[$__gn>>2] = $605;
       HEAP32[$606>>2] = $__ng$0;
       $866 = $605;
      }
      $607 = HEAP32[$__fd>>2]|0;
      $608 = ($607|0)>(0);
      if ($608) {
       $609 = HEAP32[$__b>>2]|0;
       $610 = ($609|0)==(0|0);
       do {
        if ($610) {
         $868 = 1;
        } else {
         $611 = (($609) + 12|0);
         $612 = HEAP32[$611>>2]|0;
         $613 = (($609) + 16|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = ($612|0)==($614|0);
         if ($615) {
          $616 = HEAP32[$609>>2]|0;
          $617 = (($616) + 36|0);
          $618 = HEAP32[$617>>2]|0;
          __THREW__ = 0;
          $619 = (invoke_ii($618|0,($609|0))|0);
          $620 = __THREW__; __THREW__ = 0;
          $621 = $620&1;
          if ($621) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i112 = $619;
          }
         } else {
          $622 = HEAP32[$612>>2]|0;
          $$0$i$i$i$i112 = $622;
         }
         $623 = ($$0$i$i$i$i112|0)==(-1);
         if ($623) {
          HEAP32[$__b>>2] = 0;
          $868 = 1;
          break;
         } else {
          $$pre$i$i$i114 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0|0);
          $868 = $phitmp$i$i$i115;
          break;
         }
        }
       } while(0);
       $624 = ($$pre$i3$i$i120|0)==(0|0);
       do {
        if ($624) {
         label = 249;
        } else {
         $625 = (($$pre$i3$i$i120) + 12|0);
         $626 = HEAP32[$625>>2]|0;
         $627 = (($$pre$i3$i$i120) + 16|0);
         $628 = HEAP32[$627>>2]|0;
         $629 = ($626|0)==($628|0);
         if ($629) {
          $630 = HEAP32[$$pre$i3$i$i120>>2]|0;
          $631 = (($630) + 36|0);
          $632 = HEAP32[$631>>2]|0;
          __THREW__ = 0;
          $633 = (invoke_ii($632|0,($$pre$i3$i$i120|0))|0);
          $634 = __THREW__; __THREW__ = 0;
          $635 = $634&1;
          if ($635) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i118 = $633;
          }
         } else {
          $636 = HEAP32[$626>>2]|0;
          $$0$i$i1$i$i118 = $636;
         }
         $637 = ($$0$i$i1$i$i118|0)==(-1);
         if ($637) {
          HEAP32[$__e>>2] = 0;
          label = 249;
          break;
         } else {
          if ($868) {
           $869 = $$pre$i3$i$i120;
           break;
          } else {
           label = 255;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 249) {
        label = 0;
        if ($868) {
         label = 255;
         break L4;
        } else {
         $869 = 0;
        }
       }
       $638 = HEAP32[$__b>>2]|0;
       $639 = (($638) + 12|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($638) + 16|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = ($640|0)==($642|0);
       if ($643) {
        $644 = HEAP32[$638>>2]|0;
        $645 = (($644) + 36|0);
        $646 = HEAP32[$645>>2]|0;
        __THREW__ = 0;
        $647 = (invoke_ii($646|0,($638|0))|0);
        $648 = __THREW__; __THREW__ = 0;
        $649 = $648&1;
        if ($649) {
         label = 26;
         break L4;
        } else {
         $$0$i$i105 = $647;
        }
       } else {
        $650 = HEAP32[$640>>2]|0;
        $$0$i$i105 = $650;
       }
       $651 = HEAP32[$__dp>>2]|0;
       $652 = ($$0$i$i105|0)==($651|0);
       if (!($652)) {
        label = 255;
        break L4;
       }
       $655 = HEAP32[$__b>>2]|0;
       $656 = (($655) + 12|0);
       $657 = HEAP32[$656>>2]|0;
       $658 = (($655) + 16|0);
       $659 = HEAP32[$658>>2]|0;
       $660 = ($657|0)==($659|0);
       if ($660) {
        $661 = HEAP32[$655>>2]|0;
        $662 = (($661) + 40|0);
        $663 = HEAP32[$662>>2]|0;
        __THREW__ = 0;
        (invoke_ii($663|0,($655|0))|0);
        $664 = __THREW__; __THREW__ = 0;
        $665 = $664&1;
        if ($665) {
         label = 26;
         break L4;
        } else {
         $$pre$i3$i$i86 = $869;$683 = $869;$740 = $607;
        }
       } else {
        $666 = (($657) + 4|0);
        HEAP32[$656>>2] = $666;
        $$pre$i3$i$i86 = $869;$683 = $869;$740 = $607;
       }
       while(1) {
        $667 = HEAP32[$__b>>2]|0;
        $668 = ($667|0)==(0|0);
        do {
         if ($668) {
          $697 = 1;
         } else {
          $669 = (($667) + 12|0);
          $670 = HEAP32[$669>>2]|0;
          $671 = (($667) + 16|0);
          $672 = HEAP32[$671>>2]|0;
          $673 = ($670|0)==($672|0);
          if ($673) {
           $674 = HEAP32[$667>>2]|0;
           $675 = (($674) + 36|0);
           $676 = HEAP32[$675>>2]|0;
           __THREW__ = 0;
           $677 = (invoke_ii($676|0,($667|0))|0);
           $678 = __THREW__; __THREW__ = 0;
           $679 = $678&1;
           if ($679) {
            label = 22;
            break L4;
           } else {
            $$0$i$i$i$i78 = $677;
           }
          } else {
           $680 = HEAP32[$670>>2]|0;
           $$0$i$i$i$i78 = $680;
          }
          $681 = ($$0$i$i$i$i78|0)==(-1);
          if ($681) {
           HEAP32[$__b>>2] = 0;
           $697 = 1;
           break;
          } else {
           $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i81 = ($$pre$i$i$i80|0)==(0|0);
           $697 = $phitmp$i$i$i81;
           break;
          }
         }
        } while(0);
        $682 = ($683|0)==(0|0);
        do {
         if ($682) {
          $$pre$i3$i$i86262$ph = $$pre$i3$i$i86;
          label = 272;
         } else {
          $684 = (($683) + 12|0);
          $685 = HEAP32[$684>>2]|0;
          $686 = (($683) + 16|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = ($685|0)==($687|0);
          if ($688) {
           $689 = HEAP32[$683>>2]|0;
           $690 = (($689) + 36|0);
           $691 = HEAP32[$690>>2]|0;
           __THREW__ = 0;
           $692 = (invoke_ii($691|0,($683|0))|0);
           $693 = __THREW__; __THREW__ = 0;
           $694 = $693&1;
           if ($694) {
            label = 22;
            break L4;
           } else {
            $$0$i$i1$i$i84 = $692;
           }
          } else {
           $695 = HEAP32[$685>>2]|0;
           $$0$i$i1$i$i84 = $695;
          }
          $696 = ($$0$i$i1$i$i84|0)==(-1);
          if ($696) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i86262$ph = 0;
           label = 272;
           break;
          } else {
           $phitmp$i4$i$i87 = ($$pre$i3$i$i86|0)==(0|0);
           $tmp$i$i89 = $697 ^ $phitmp$i4$i$i87;
           if ($tmp$i$i89) {
            $$pre$i3$i$i86262288 = $$pre$i3$i$i86;$870 = $$pre$i3$i$i86;
            break;
           } else {
            label = 279;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($697) {
          label = 279;
          break L4;
         } else {
          $$pre$i3$i$i86262288 = $$pre$i3$i$i86262$ph;$870 = 0;
         }
        }
        $698 = HEAP32[$__b>>2]|0;
        $699 = (($698) + 12|0);
        $700 = HEAP32[$699>>2]|0;
        $701 = (($698) + 16|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = ($700|0)==($702|0);
        if ($703) {
         $704 = HEAP32[$698>>2]|0;
         $705 = (($704) + 36|0);
         $706 = HEAP32[$705>>2]|0;
         __THREW__ = 0;
         $707 = (invoke_ii($706|0,($698|0))|0);
         $708 = __THREW__; __THREW__ = 0;
         $709 = $708&1;
         if ($709) {
          label = 22;
          break L4;
         } else {
          $$0$i$i72 = $707;
         }
        } else {
         $710 = HEAP32[$700>>2]|0;
         $$0$i$i72 = $710;
        }
        $711 = HEAP32[$__ct>>2]|0;
        $712 = (($711) + 12|0);
        $713 = HEAP32[$712>>2]|0;
        __THREW__ = 0;
        $714 = (invoke_iiii($713|0,($__ct|0),2048,($$0$i$i72|0))|0);
        $715 = __THREW__; __THREW__ = 0;
        $716 = $715&1;
        if ($716) {
         label = 22;
         break L4;
        }
        if (!($714)) {
         label = 279;
         break L4;
        }
        $719 = HEAP32[$__wn>>2]|0;
        $720 = HEAP32[$0>>2]|0;
        $721 = ($719|0)==($720|0);
        if ($721) {
         __THREW__ = 0;
         invoke_viii(612,($__wb|0),($__wn|0),($0|0));
         $722 = __THREW__; __THREW__ = 0;
         $723 = $722&1;
         if ($723) {
          label = 22;
          break L4;
         }
        }
        $724 = HEAP32[$__b>>2]|0;
        $725 = (($724) + 12|0);
        $726 = HEAP32[$725>>2]|0;
        $727 = (($724) + 16|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = ($726|0)==($728|0);
        if ($729) {
         $730 = HEAP32[$724>>2]|0;
         $731 = (($730) + 36|0);
         $732 = HEAP32[$731>>2]|0;
         __THREW__ = 0;
         $733 = (invoke_ii($732|0,($724|0))|0);
         $734 = __THREW__; __THREW__ = 0;
         $735 = $734&1;
         if ($735) {
          label = 22;
          break L4;
         } else {
          $$0$i$i64 = $733;
         }
        } else {
         $736 = HEAP32[$726>>2]|0;
         $$0$i$i64 = $736;
        }
        $737 = HEAP32[$__wn>>2]|0;
        $738 = (($737) + 4|0);
        HEAP32[$__wn>>2] = $738;
        HEAP32[$737>>2] = $$0$i$i64;
        $739 = (($740) + -1)|0;
        HEAP32[$__fd>>2] = $739;
        $741 = HEAP32[$__b>>2]|0;
        $742 = (($741) + 12|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = (($741) + 16|0);
        $745 = HEAP32[$744>>2]|0;
        $746 = ($743|0)==($745|0);
        if ($746) {
         $747 = HEAP32[$741>>2]|0;
         $748 = (($747) + 40|0);
         $749 = HEAP32[$748>>2]|0;
         __THREW__ = 0;
         (invoke_ii($749|0,($741|0))|0);
         $750 = __THREW__; __THREW__ = 0;
         $751 = $750&1;
         if ($751) {
          label = 22;
          break L4;
         }
        } else {
         $753 = (($743) + 4|0);
         HEAP32[$742>>2] = $753;
        }
        $752 = ($739|0)>(0);
        if ($752) {
         $$pre$i3$i$i86 = $$pre$i3$i$i86262288;$683 = $870;$740 = $739;
        } else {
         $867 = $$pre$i3$i$i86262288;
         break;
        }
       }
      } else {
       $867 = $$pre$i3$i$i120;
      }
      $754 = HEAP32[$__wn>>2]|0;
      $755 = HEAP32[$__wb>>2]|0;
      $756 = ($754|0)==($755|0);
      if ($756) {
       label = 290;
       break L4;
      } else {
       $857 = $867;$858 = $866;$__trailing_sign$1 = $__trailing_sign$0247;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0245|0)==(3);
      if ($cond) {
       $841 = $853;$855 = $856;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
       label = 292;
       break L4;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        label = 26;
        break L4;
       } else {
        $$0$i$i33 = $84;
       }
      } else {
       $87 = HEAP32[$77>>2]|0;
       $$0$i$i33 = $87;
      }
      $88 = HEAP32[$__ct>>2]|0;
      $89 = (($88) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      __THREW__ = 0;
      $91 = (invoke_iiii($90|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       label = 26;
       break L4;
      }
      if (!($91)) {
       label = 42;
       break L4;
      }
      $94 = HEAP32[$__b>>2]|0;
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 40|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($94|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 26;
        break L4;
       } else {
        $$0$i$i37 = $103;
       }
      } else {
       $106 = (($96) + 4|0);
       HEAP32[$95>>2] = $106;
       $107 = HEAP32[$96>>2]|0;
       $$0$i$i37 = $107;
      }
      __THREW__ = 0;
      invoke_vii(611,($__spaces|0),($$0$i$i37|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       label = 26;
       break L4;
      } else {
       label = 43;
      }
      break;
     }
     case 3:  {
      $179 = HEAP8[$__psn>>0]|0;
      $180 = $179 & 1;
      $181 = ($180<<24>>24)==(0);
      if ($181) {
       $183 = $179&255;
       $184 = $183 >>> 1;
       $194 = $184;
      } else {
       $182 = HEAP32[$8>>2]|0;
       $194 = $182;
      }
      $185 = HEAP8[$__nsn>>0]|0;
      $186 = $185 & 1;
      $187 = ($186<<24>>24)==(0);
      if ($187) {
       $189 = $185&255;
       $190 = $189 >>> 1;
       $192 = $190;
      } else {
       $188 = HEAP32[$6>>2]|0;
       $192 = $188;
      }
      $191 = (0 - ($192))|0;
      $193 = ($194|0)==($191|0);
      if ($193) {
       $857 = $856;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
      } else {
       if ($181) {
        $196 = $179&255;
        $197 = $196 >>> 1;
        $199 = $197;
       } else {
        $195 = HEAP32[$8>>2]|0;
        $199 = $195;
       }
       $198 = ($199|0)==(0);
       if (!($198)) {
        if ($187) {
         $201 = $185&255;
         $202 = $201 >>> 1;
         $204 = $202;
        } else {
         $200 = HEAP32[$6>>2]|0;
         $204 = $200;
        }
        $203 = ($204|0)==(0);
        if (!($203)) {
         $282 = HEAP32[$__b>>2]|0;
         $283 = (($282) + 12|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = (($282) + 16|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ($284|0)==($286|0);
         if ($287) {
          $288 = HEAP32[$282>>2]|0;
          $289 = (($288) + 36|0);
          $290 = HEAP32[$289>>2]|0;
          __THREW__ = 0;
          $291 = (invoke_ii($290|0,($282|0))|0);
          $292 = __THREW__; __THREW__ = 0;
          $293 = $292&1;
          if ($293) {
           label = 26;
           break L4;
          }
          $$pre278 = HEAP8[$__psn>>0]|0;
          $$0$i$i108 = $291;$296 = $$pre278;
         } else {
          $294 = HEAP32[$284>>2]|0;
          $$0$i$i108 = $294;$296 = $179;
         }
         $295 = $296 & 1;
         $297 = ($295<<24>>24)==(0);
         $298 = HEAP32[$9>>2]|0;
         $$293 = $297 ? $8 : $298;
         $299 = HEAP32[$$293>>2]|0;
         $300 = ($$0$i$i108|0)==($299|0);
         $301 = HEAP32[$__b>>2]|0;
         $302 = (($301) + 12|0);
         $303 = HEAP32[$302>>2]|0;
         $304 = (($301) + 16|0);
         $305 = HEAP32[$304>>2]|0;
         $306 = ($303|0)==($305|0);
         if ($300) {
          if ($306) {
           $307 = HEAP32[$301>>2]|0;
           $308 = (($307) + 40|0);
           $309 = HEAP32[$308>>2]|0;
           __THREW__ = 0;
           (invoke_ii($309|0,($301|0))|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 26;
            break L4;
           }
          } else {
           $312 = (($303) + 4|0);
           HEAP32[$302>>2] = $312;
          }
          $313 = HEAP8[$__psn>>0]|0;
          $314 = $313 & 1;
          $315 = ($314<<24>>24)==(0);
          if ($315) {
           $317 = $313&255;
           $318 = $317 >>> 1;
           $320 = $318;
          } else {
           $316 = HEAP32[$8>>2]|0;
           $320 = $316;
          }
          $319 = ($320>>>0)>(1);
          $__psn$__trailing_sign$05 = $319 ? $__psn : $__trailing_sign$0247;
          $857 = $856;$858 = $853;$__trailing_sign$1 = $__psn$__trailing_sign$05;
          break L28;
         }
         if ($306) {
          $321 = HEAP32[$301>>2]|0;
          $322 = (($321) + 36|0);
          $323 = HEAP32[$322>>2]|0;
          __THREW__ = 0;
          $324 = (invoke_ii($323|0,($301|0))|0);
          $325 = __THREW__; __THREW__ = 0;
          $326 = $325&1;
          if ($326) {
           label = 26;
           break L4;
          } else {
           $$0$i$i130 = $324;
          }
         } else {
          $327 = HEAP32[$303>>2]|0;
          $$0$i$i130 = $327;
         }
         $328 = HEAP8[$__nsn>>0]|0;
         $329 = $328 & 1;
         $330 = ($329<<24>>24)==(0);
         $331 = HEAP32[$7>>2]|0;
         $$294 = $330 ? $6 : $331;
         $332 = HEAP32[$$294>>2]|0;
         $333 = ($$0$i$i130|0)==($332|0);
         if (!($333)) {
          label = 135;
          break L4;
         }
         $334 = HEAP32[$__b>>2]|0;
         $335 = (($334) + 12|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = (($334) + 16|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($336|0)==($338|0);
         if ($339) {
          $340 = HEAP32[$334>>2]|0;
          $341 = (($340) + 40|0);
          $342 = HEAP32[$341>>2]|0;
          __THREW__ = 0;
          (invoke_ii($342|0,($334|0))|0);
          $343 = __THREW__; __THREW__ = 0;
          $344 = $343&1;
          if ($344) {
           label = 26;
           break L4;
          }
         } else {
          $345 = (($336) + 4|0);
          HEAP32[$335>>2] = $345;
         }
         HEAP8[$__neg>>0] = 1;
         $346 = HEAP8[$__nsn>>0]|0;
         $347 = $346 & 1;
         $348 = ($347<<24>>24)==(0);
         if ($348) {
          $350 = $346&255;
          $351 = $350 >>> 1;
          $353 = $351;
         } else {
          $349 = HEAP32[$6>>2]|0;
          $353 = $349;
         }
         $352 = ($353>>>0)>(1);
         $__nsn$__trailing_sign$06 = $352 ? $__nsn : $__trailing_sign$0247;
         $857 = $856;$858 = $853;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
         break L28;
        }
       }
       if ($181) {
        $206 = $179&255;
        $207 = $206 >>> 1;
        $209 = $207;
       } else {
        $205 = HEAP32[$8>>2]|0;
        $209 = $205;
       }
       $208 = ($209|0)==(0);
       $210 = HEAP32[$__b>>2]|0;
       $211 = (($210) + 12|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($210) + 16|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($212|0)==($214|0);
       if ($208) {
        if ($215) {
         $249 = HEAP32[$210>>2]|0;
         $250 = (($249) + 36|0);
         $251 = HEAP32[$250>>2]|0;
         __THREW__ = 0;
         $252 = (invoke_ii($251|0,($210|0))|0);
         $253 = __THREW__; __THREW__ = 0;
         $254 = $253&1;
         if ($254) {
          label = 26;
          break L4;
         }
         $$pre276 = HEAP8[$__nsn>>0]|0;
         $$0$i$i96 = $252;$257 = $$pre276;
        } else {
         $255 = HEAP32[$212>>2]|0;
         $$0$i$i96 = $255;$257 = $185;
        }
        $256 = $257 & 1;
        $258 = ($256<<24>>24)==(0);
        $259 = HEAP32[$7>>2]|0;
        $$292 = $258 ? $6 : $259;
        $260 = HEAP32[$$292>>2]|0;
        $261 = ($$0$i$i96|0)==($260|0);
        if (!($261)) {
         $857 = $856;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
         break L28;
        }
        $262 = HEAP32[$__b>>2]|0;
        $263 = (($262) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($262) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = (($268) + 40|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         (invoke_ii($270|0,($262|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 26;
          break L4;
         }
        } else {
         $273 = (($264) + 4|0);
         HEAP32[$263>>2] = $273;
        }
        HEAP8[$__neg>>0] = 1;
        $274 = HEAP8[$__nsn>>0]|0;
        $275 = $274 & 1;
        $276 = ($275<<24>>24)==(0);
        if ($276) {
         $278 = $274&255;
         $279 = $278 >>> 1;
         $281 = $279;
        } else {
         $277 = HEAP32[$6>>2]|0;
         $281 = $277;
        }
        $280 = ($281>>>0)>(1);
        $__nsn$__trailing_sign$0 = $280 ? $__nsn : $__trailing_sign$0247;
        $857 = $856;$858 = $853;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       if ($215) {
        $216 = HEAP32[$210>>2]|0;
        $217 = (($216) + 36|0);
        $218 = HEAP32[$217>>2]|0;
        __THREW__ = 0;
        $219 = (invoke_ii($218|0,($210|0))|0);
        $220 = __THREW__; __THREW__ = 0;
        $221 = $220&1;
        if ($221) {
         label = 26;
         break L4;
        }
        $$pre277 = HEAP8[$__psn>>0]|0;
        $$0$i$i75 = $219;$224 = $$pre277;
       } else {
        $222 = HEAP32[$212>>2]|0;
        $$0$i$i75 = $222;$224 = $179;
       }
       $223 = $224 & 1;
       $225 = ($223<<24>>24)==(0);
       $226 = HEAP32[$9>>2]|0;
       $$ = $225 ? $8 : $226;
       $227 = HEAP32[$$>>2]|0;
       $228 = ($$0$i$i75|0)==($227|0);
       if (!($228)) {
        HEAP8[$__neg>>0] = 1;
        $857 = $856;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
        break L28;
       }
       $229 = HEAP32[$__b>>2]|0;
       $230 = (($229) + 12|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 16|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($231|0)==($233|0);
       if ($234) {
        $235 = HEAP32[$229>>2]|0;
        $236 = (($235) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        __THREW__ = 0;
        (invoke_ii($237|0,($229|0))|0);
        $238 = __THREW__; __THREW__ = 0;
        $239 = $238&1;
        if ($239) {
         label = 26;
         break L4;
        }
       } else {
        $240 = (($231) + 4|0);
        HEAP32[$230>>2] = $240;
       }
       $241 = HEAP8[$__psn>>0]|0;
       $242 = $241 & 1;
       $243 = ($242<<24>>24)==(0);
       if ($243) {
        $245 = $241&255;
        $246 = $245 >>> 1;
        $248 = $246;
       } else {
        $244 = HEAP32[$8>>2]|0;
        $248 = $244;
       }
       $247 = ($248>>>0)>(1);
       $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0247;
       $857 = $856;$858 = $853;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $356 = ($__trailing_sign$0247|0)!=(0|0);
      $357 = ($__p$0245>>>0)<(2);
      $or$cond = $356 | $357;
      if (!($or$cond)) {
       $358 = ($__p$0245|0)==(2);
       if ($358) {
        $359 = HEAP8[$16>>0]|0;
        $360 = ($359<<24>>24)!=(0);
        $361 = $360;
       } else {
        $361 = 0;
       }
       $brmerge = $11 | $361;
       if (!($brmerge)) {
        $857 = $856;$858 = $853;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $362 = HEAP8[$__sym>>0]|0;
      $363 = $362 & 1;
      $364 = ($363<<24>>24)==(0);
      $365 = HEAP32[$13>>2]|0;
      $$295 = $364 ? $12 : $365;
      $366 = ($__p$0245|0)==(0);
      L268: do {
       if ($366) {
        $$pre$i3$i$i177 = $856;$430 = $362;$440 = $$295;$457 = $856;
       } else {
        $367 = (($__p$0245) + -1)|0;
        $368 = (($__pat) + ($367)|0);
        $369 = HEAP8[$368>>0]|0;
        $switch = ($369&255)<(2);
        if ($switch) {
         $371 = $362;$381 = $$295;
         while(1) {
          $370 = $371 & 1;
          $372 = ($370<<24>>24)==(0);
          if ($372) {
           $375 = $371&255;
           $376 = $375 >>> 1;
           $378 = $12;$379 = $376;
          } else {
           $373 = HEAP32[$13>>2]|0;
           $374 = HEAP32[$12>>2]|0;
           $378 = $373;$379 = $374;
          }
          $377 = (($378) + ($379<<2)|0);
          $380 = ($381|0)==($377|0);
          if ($380) {
           $391 = $371;
           break;
          }
          $382 = HEAP32[$381>>2]|0;
          $383 = HEAP32[$__ct>>2]|0;
          $384 = (($383) + 12|0);
          $385 = HEAP32[$384>>2]|0;
          __THREW__ = 0;
          $386 = (invoke_iiii($385|0,($__ct|0),8192,($382|0))|0);
          $387 = __THREW__; __THREW__ = 0;
          $388 = $387&1;
          if ($388) {
           label = 23;
           break L4;
          }
          if (!($386)) {
           label = 149;
           break;
          }
          $389 = (($381) + 4|0);
          $$pre279 = HEAP8[$__sym>>0]|0;
          $371 = $$pre279;$381 = $389;
         }
         if ((label|0) == 149) {
          label = 0;
          $$pre280 = HEAP8[$__sym>>0]|0;
          $391 = $$pre280;
         }
         $390 = $391 & 1;
         $392 = ($390<<24>>24)==(0);
         $393 = HEAP32[$13>>2]|0;
         $$296 = $392 ? $12 : $393;
         $394 = $381;
         $395 = $$296;
         $396 = (($394) - ($395))|0;
         $397 = $396 >> 2;
         $398 = HEAP8[$__spaces>>0]|0;
         $399 = $398 & 1;
         $400 = ($399<<24>>24)==(0);
         if ($400) {
          $402 = $398&255;
          $403 = $402 >>> 1;
          $405 = $403;
         } else {
          $401 = HEAP32[$14>>2]|0;
          $405 = $401;
         }
         $404 = ($397>>>0)>($405>>>0);
         L286: do {
          if (!($404)) {
           if ($400) {
            $409 = $398&255;
            $410 = $409 >>> 1;
            $$sum284 = (($410) - ($397))|0;
            $411 = (($14) + ($$sum284<<2)|0);
            $412 = $398&255;
            $413 = $412 >>> 1;
            $415 = $14;$416 = $413;$419 = $411;
           } else {
            $406 = HEAP32[$15>>2]|0;
            $407 = HEAP32[$14>>2]|0;
            $$sum = (($407) - ($397))|0;
            $408 = (($406) + ($$sum<<2)|0);
            $415 = $406;$416 = $407;$419 = $408;
           }
           $414 = (($415) + ($416<<2)|0);
           $417 = HEAP32[$13>>2]|0;
           $$297 = $392 ? $12 : $417;
           $418 = ($419|0)==($414|0);
           if ($418) {
            $$pre$i3$i$i177 = $856;$430 = $391;$440 = $381;$457 = $856;
            break L268;
           } else {
            $421 = $419;$423 = $$297;
           }
           while(1) {
            $420 = HEAP32[$421>>2]|0;
            $422 = HEAP32[$423>>2]|0;
            $424 = ($420|0)==($422|0);
            if (!($424)) {
             break L286;
            }
            $425 = (($421) + 4|0);
            $426 = ($425|0)==($414|0);
            if ($426) {
             $$pre$i3$i$i177 = $856;$430 = $391;$440 = $381;$457 = $856;
             break L268;
            }
            $427 = (($423) + 4|0);
            $421 = $425;$423 = $427;
           }
          }
         } while(0);
         $428 = HEAP32[$13>>2]|0;
         $$298 = $392 ? $12 : $428;
         $$pre$i3$i$i177 = $856;$430 = $391;$440 = $$298;$457 = $856;
        } else {
         $$pre$i3$i$i177 = $856;$430 = $362;$440 = $$295;$457 = $856;
        }
       }
      } while(0);
      L297: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $12;$438 = $435;
       } else {
        $432 = HEAP32[$13>>2]|0;
        $433 = HEAP32[$12>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438<<2)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        $860 = $$pre$i3$i$i177;
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $471 = 1;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 24;
           break L4;
          } else {
           $$0$i$i$i$i169 = $451;
          }
         } else {
          $454 = HEAP32[$444>>2]|0;
          $$0$i$i$i$i169 = $454;
         }
         $455 = ($$0$i$i$i$i169|0)==(-1);
         if ($455) {
          HEAP32[$__b>>2] = 0;
          $471 = 1;
          break;
         } else {
          $$pre$i$i$i171 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i172 = ($$pre$i$i$i171|0)==(0|0);
          $471 = $phitmp$i$i$i172;
          break;
         }
        }
       } while(0);
       $456 = ($457|0)==(0|0);
       do {
        if ($456) {
         $$pre$i3$i$i177259 = $$pre$i3$i$i177;
         label = 179;
        } else {
         $458 = (($457) + 12|0);
         $459 = HEAP32[$458>>2]|0;
         $460 = (($457) + 16|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ($459|0)==($461|0);
         if ($462) {
          $463 = HEAP32[$457>>2]|0;
          $464 = (($463) + 36|0);
          $465 = HEAP32[$464>>2]|0;
          __THREW__ = 0;
          $466 = (invoke_ii($465|0,($457|0))|0);
          $467 = __THREW__; __THREW__ = 0;
          $468 = $467&1;
          if ($468) {
           label = 24;
           break L4;
          } else {
           $$0$i$i1$i$i175 = $466;
          }
         } else {
          $469 = HEAP32[$459>>2]|0;
          $$0$i$i1$i$i175 = $469;
         }
         $470 = ($$0$i$i1$i$i175|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i177259 = 0;
          label = 179;
          break;
         } else {
          $phitmp$i4$i$i178 = ($$pre$i3$i$i177|0)==(0|0);
          $tmp$i$i180 = $471 ^ $phitmp$i4$i$i178;
          if ($tmp$i$i180) {
           $$pre$i3$i$i177258 = $$pre$i3$i$i177;$861 = $$pre$i3$i$i177;
           break;
          } else {
           $860 = $$pre$i3$i$i177;
           break L297;
          }
         }
        }
       } while(0);
       if ((label|0) == 179) {
        label = 0;
        if ($471) {
         $860 = $$pre$i3$i$i177259;
         break;
        } else {
         $$pre$i3$i$i177258 = $$pre$i3$i$i177259;$861 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 24;
         break L4;
        } else {
         $$0$i$i165 = $481;
        }
       } else {
        $484 = HEAP32[$474>>2]|0;
        $$0$i$i165 = $484;
       }
       $485 = HEAP32[$440>>2]|0;
       $486 = ($$0$i$i165|0)==($485|0);
       if (!($486)) {
        $860 = $$pre$i3$i$i177258;
        break;
       }
       $487 = HEAP32[$__b>>2]|0;
       $488 = (($487) + 12|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = (($487) + 16|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = ($489|0)==($491|0);
       if ($492) {
        $493 = HEAP32[$487>>2]|0;
        $494 = (($493) + 40|0);
        $495 = HEAP32[$494>>2]|0;
        __THREW__ = 0;
        (invoke_ii($495|0,($487|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 24;
         break L4;
        }
       } else {
        $498 = (($489) + 4|0);
        HEAP32[$488>>2] = $498;
       }
       $499 = (($440) + 4|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i177 = $$pre$i3$i$i177258;$430 = $$pre;$440 = $499;$457 = $861;
      }
      if ($11) {
       $500 = HEAP8[$__sym>>0]|0;
       $501 = $500 & 1;
       $502 = ($501<<24>>24)==(0);
       if ($502) {
        $505 = $500&255;
        $506 = $505 >>> 1;
        $508 = $12;$509 = $506;
       } else {
        $503 = HEAP32[$13>>2]|0;
        $504 = HEAP32[$12>>2]|0;
        $508 = $503;$509 = $504;
       }
       $507 = (($508) + ($509<<2)|0);
       $510 = ($440|0)==($507|0);
       if ($510) {
        $857 = $860;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
       } else {
        label = 194;
        break L4;
       }
      } else {
       $857 = $860;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
      }
      break;
     }
     default: {
      $857 = $856;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
     }
     }
    } while(0);
    L341: do {
     if ((label|0) == 43) {
      label = 0;
      $112 = ($__p$0245|0)==(3);
      if ($112) {
       $841 = $853;$855 = $856;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
       label = 292;
       break L4;
      } else {
       $$pre$i3$i$i47 = $856;$129 = $856;
      }
      while(1) {
       $113 = HEAP32[$__b>>2]|0;
       $114 = ($113|0)==(0|0);
       do {
        if ($114) {
         $143 = 1;
        } else {
         $115 = (($113) + 12|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($113) + 16|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         if ($119) {
          $120 = HEAP32[$113>>2]|0;
          $121 = (($120) + 36|0);
          $122 = HEAP32[$121>>2]|0;
          __THREW__ = 0;
          $123 = (invoke_ii($122|0,($113|0))|0);
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i39 = $123;
          }
         } else {
          $126 = HEAP32[$116>>2]|0;
          $$0$i$i$i$i39 = $126;
         }
         $127 = ($$0$i$i$i$i39|0)==(-1);
         if ($127) {
          HEAP32[$__b>>2] = 0;
          $143 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $143 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $128 = ($129|0)==(0|0);
       do {
        if ($128) {
         $$pre$i3$i$i47255 = $$pre$i3$i$i47;
         label = 57;
        } else {
         $130 = (($129) + 12|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($129) + 16|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($131|0)==($133|0);
         if ($134) {
          $135 = HEAP32[$129>>2]|0;
          $136 = (($135) + 36|0);
          $137 = HEAP32[$136>>2]|0;
          __THREW__ = 0;
          $138 = (invoke_ii($137|0,($129|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i45 = $138;
          }
         } else {
          $141 = HEAP32[$131>>2]|0;
          $$0$i$i1$i$i45 = $141;
         }
         $142 = ($$0$i$i1$i$i45|0)==(-1);
         if ($142) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i47255 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
          $tmp$i$i50 = $143 ^ $phitmp$i4$i$i48;
          if ($tmp$i$i50) {
           $$pre$i3$i$i47257 = $$pre$i3$i$i47;$859 = $$pre$i3$i$i47;
           break;
          } else {
           $857 = $$pre$i3$i$i47;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
           break L341;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($143) {
         $857 = $$pre$i3$i$i47255;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
         break L341;
        } else {
         $$pre$i3$i$i47257 = $$pre$i3$i$i47255;$859 = 0;
        }
       }
       $144 = HEAP32[$__b>>2]|0;
       $145 = (($144) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($144) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$144>>2]|0;
        $151 = (($150) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        __THREW__ = 0;
        $153 = (invoke_ii($152|0,($144|0))|0);
        $154 = __THREW__; __THREW__ = 0;
        $155 = $154&1;
        if ($155) {
         label = 25;
         break L4;
        } else {
         $$0$i$i54 = $153;
        }
       } else {
        $156 = HEAP32[$146>>2]|0;
        $$0$i$i54 = $156;
       }
       $157 = HEAP32[$__ct>>2]|0;
       $158 = (($157) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       __THREW__ = 0;
       $160 = (invoke_iiii($159|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 25;
        break L4;
       }
       if (!($160)) {
        $857 = $$pre$i3$i$i47257;$858 = $853;$__trailing_sign$1 = $__trailing_sign$0247;
        break L341;
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = (($163) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($163) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = (($169) + 40|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 25;
         break L4;
        } else {
         $$0$i$i59 = $172;
        }
       } else {
        $175 = (($165) + 4|0);
        HEAP32[$164>>2] = $175;
        $176 = HEAP32[$165>>2]|0;
        $$0$i$i59 = $176;
       }
       __THREW__ = 0;
       invoke_vii(611,($__spaces|0),($$0$i$i59|0));
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        label = 25;
        break L4;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47257;$129 = $859;
       }
      }
     }
    } while(0);
    $759 = (($__p$0245) + 1)|0;
    $760 = ($759>>>0)<(4);
    if ($760) {
     $853 = $858;$__p$0245 = $759;$__trailing_sign$0247 = $__trailing_sign$1;
    } else {
     $841 = $858;$855 = $857;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 292;
     break;
    }
   }
   L378:    switch (label|0) {
    case 21: {
     $54 = ___cxa_find_matching_catch()|0;
     $55 = tempRet0;
     $lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
     break;
    }
    case 22: {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
     break;
    }
    case 23: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
     break;
    }
    case 24: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
     break;
    }
    case 25: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
     break;
    }
    case 26: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L1;
     break;
    }
    case 42: {
     $110 = HEAP32[$__err>>2]|0;
     $111 = $110 | 4;
     HEAP32[$__err>>2] = $111;
     $$0 = 0;
     break;
    }
    case 135: {
     $354 = HEAP32[$__err>>2]|0;
     $355 = $354 | 4;
     HEAP32[$__err>>2] = $355;
     $$0 = 0;
     break;
    }
    case 194: {
     $511 = HEAP32[$__err>>2]|0;
     $512 = $511 | 4;
     HEAP32[$__err>>2] = $512;
     $$0 = 0;
     break;
    }
    case 255: {
     $653 = HEAP32[$__err>>2]|0;
     $654 = $653 | 4;
     HEAP32[$__err>>2] = $654;
     $$0 = 0;
     break;
    }
    case 279: {
     $717 = HEAP32[$__err>>2]|0;
     $718 = $717 | 4;
     HEAP32[$__err>>2] = $718;
     $$0 = 0;
     break;
    }
    case 290: {
     $757 = HEAP32[$__err>>2]|0;
     $758 = $757 | 4;
     HEAP32[$__err>>2] = $758;
     $$0 = 0;
     break;
    }
    case 292: {
     $761 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L392: do {
      if (!($761)) {
       $762 = (($__trailing_sign$0$lcssa) + 4|0);
       $763 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $855;$788 = $855;$__i$0 = 1;
       L394: while(1) {
        $764 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $765 = $764 & 1;
        $766 = ($765<<24>>24)==(0);
        if ($766) {
         $768 = $764&255;
         $769 = $768 >>> 1;
         $771 = $769;
        } else {
         $767 = HEAP32[$762>>2]|0;
         $771 = $767;
        }
        $770 = ($__i$0>>>0)<($771>>>0);
        if (!($770)) {
         break L392;
        }
        $772 = HEAP32[$__b>>2]|0;
        $773 = ($772|0)==(0|0);
        do {
         if ($773) {
          $802 = 1;
         } else {
          $774 = (($772) + 12|0);
          $775 = HEAP32[$774>>2]|0;
          $776 = (($772) + 16|0);
          $777 = HEAP32[$776>>2]|0;
          $778 = ($775|0)==($777|0);
          if ($778) {
           $779 = HEAP32[$772>>2]|0;
           $780 = (($779) + 36|0);
           $781 = HEAP32[$780>>2]|0;
           __THREW__ = 0;
           $782 = (invoke_ii($781|0,($772|0))|0);
           $783 = __THREW__; __THREW__ = 0;
           $784 = $783&1;
           if ($784) {
            label = 20;
            break L394;
           } else {
            $$0$i$i$i$i = $782;
           }
          } else {
           $785 = HEAP32[$775>>2]|0;
           $$0$i$i$i$i = $785;
          }
          $786 = ($$0$i$i$i$i|0)==(-1);
          if ($786) {
           HEAP32[$__b>>2] = 0;
           $802 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $802 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $787 = ($788|0)==(0|0);
        do {
         if ($787) {
          $$pre$i3$i$i264$ph = $$pre$i3$i$i;
          label = 311;
         } else {
          $789 = (($788) + 12|0);
          $790 = HEAP32[$789>>2]|0;
          $791 = (($788) + 16|0);
          $792 = HEAP32[$791>>2]|0;
          $793 = ($790|0)==($792|0);
          if ($793) {
           $794 = HEAP32[$788>>2]|0;
           $795 = (($794) + 36|0);
           $796 = HEAP32[$795>>2]|0;
           __THREW__ = 0;
           $797 = (invoke_ii($796|0,($788|0))|0);
           $798 = __THREW__; __THREW__ = 0;
           $799 = $798&1;
           if ($799) {
            label = 20;
            break L394;
           } else {
            $$0$i$i1$i$i = $797;
           }
          } else {
           $800 = HEAP32[$790>>2]|0;
           $$0$i$i1$i$i = $800;
          }
          $801 = ($$0$i$i1$i$i|0)==(-1);
          if ($801) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i264$ph = 0;
           label = 311;
           break;
          } else {
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $802 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            $$pre$i3$i$i264291 = $$pre$i3$i$i;$871 = $$pre$i3$i$i;
            break;
           } else {
            label = 319;
            break L394;
           }
          }
         }
        } while(0);
        if ((label|0) == 311) {
         label = 0;
         if ($802) {
          label = 319;
          break;
         } else {
          $$pre$i3$i$i264291 = $$pre$i3$i$i264$ph;$871 = 0;
         }
        }
        $803 = HEAP32[$__b>>2]|0;
        $804 = (($803) + 12|0);
        $805 = HEAP32[$804>>2]|0;
        $806 = (($803) + 16|0);
        $807 = HEAP32[$806>>2]|0;
        $808 = ($805|0)==($807|0);
        if ($808) {
         $809 = HEAP32[$803>>2]|0;
         $810 = (($809) + 36|0);
         $811 = HEAP32[$810>>2]|0;
         __THREW__ = 0;
         $812 = (invoke_ii($811|0,($803|0))|0);
         $813 = __THREW__; __THREW__ = 0;
         $814 = $813&1;
         if ($814) {
          label = 20;
          break;
         } else {
          $$0$i$i = $812;
         }
        } else {
         $815 = HEAP32[$805>>2]|0;
         $$0$i$i = $815;
        }
        $816 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $817 = $816 & 1;
        $818 = ($817<<24>>24)==(0);
        if ($818) {
         $821 = $762;
        } else {
         $819 = HEAP32[$763>>2]|0;
         $821 = $819;
        }
        $820 = (($821) + ($__i$0<<2)|0);
        $822 = HEAP32[$820>>2]|0;
        $823 = ($$0$i$i|0)==($822|0);
        if (!($823)) {
         label = 319;
         break;
        }
        $826 = (($__i$0) + 1)|0;
        $827 = HEAP32[$__b>>2]|0;
        $828 = (($827) + 12|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = (($827) + 16|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = ($829|0)==($831|0);
        if ($832) {
         $833 = HEAP32[$827>>2]|0;
         $834 = (($833) + 40|0);
         $835 = HEAP32[$834>>2]|0;
         __THREW__ = 0;
         (invoke_ii($835|0,($827|0))|0);
         $836 = __THREW__; __THREW__ = 0;
         $837 = $836&1;
         if ($837) {
          label = 20;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i264291;$788 = $871;$__i$0 = $826;
          continue;
         }
        } else {
         $838 = (($829) + 4|0);
         HEAP32[$828>>2] = $838;
         $$pre$i3$i$i = $$pre$i3$i$i264291;$788 = $871;$__i$0 = $826;
         continue;
        }
       }
       if ((label|0) == 20) {
        $52 = ___cxa_find_matching_catch()|0;
        $53 = tempRet0;
        $lpad$phi$index = $52;$lpad$phi$index8 = $53;
        break L1;
       }
       else if ((label|0) == 319) {
        $824 = HEAP32[$__err>>2]|0;
        $825 = $824 | 4;
        HEAP32[$__err>>2] = $825;
        $$0 = 0;
        break L378;
       }
      }
     } while(0);
     $839 = HEAP32[$__gb>>2]|0;
     $840 = ($839|0)==($841|0);
     if ($840) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$839,$841,$__et);
      $842 = HEAP32[$__et>>2]|0;
      $843 = ($842|0)==(0);
      if ($843) {
       $$0 = 1;
      } else {
       $844 = HEAP32[$__err>>2]|0;
       $845 = $844 | 4;
       HEAP32[$__err>>2] = $845;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $846 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $847 = ($846|0)==(0|0);
   if ($847) {
    STACKTOP = sp;return ($$0|0);
   }
   $848 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($848|0,($846|0));
   $849 = __THREW__; __THREW__ = 0;
   $850 = $849&1;
   if ($850) {
    $851 = ___cxa_find_matching_catch(0|0)|0;
    $852 = tempRet0;
    ___clang_call_terminate($851);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $68 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $70 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($70|0,($68|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 420|0;
 $__loc = sp;
 $__neg = sp + 424|0;
 $0 = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 600;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(452,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $32;$$014 = $31;$94 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(453,($__loc|0),(11400|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(609,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 44|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(611,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -4|0);
      $42 = ($39>>>0)<($41>>>0);
      L17: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP32[$__w$05>>2]|0;
         $46 = ($45|0)==($36|0);
         $44 = (($__w$05) + 4|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L17;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(613,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $99 = 1;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L3;
        } else {
         $$0$i$i$i$i = $59;
        }
       } else {
        $62 = HEAP32[$52>>2]|0;
        $$0$i$i$i$i = $62;
       }
       $63 = ($$0$i$i$i$i|0)==(-1);
       if ($63) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $64 = ($8|0)==(0|0);
     do {
      if ($64) {
       label = 30;
      } else {
       $65 = (($8) + 12|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($8) + 16|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($66|0)==($68|0);
       if ($69) {
        $70 = HEAP32[$8>>2]|0;
        $71 = (($70) + 36|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_ii($72|0,($8|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L3;
        } else {
         $$0$i$i1$i$i = $73;
        }
       } else {
        $76 = HEAP32[$66>>2]|0;
        $$0$i$i1$i$i = $76;
       }
       $77 = ($$0$i$i1$i$i|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($99) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $78 = HEAP32[$__err>>2]|0;
      $79 = $78 | 2;
      HEAP32[$__err>>2] = $79;
     }
     $80 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $80;
     $81 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($81)|0);
     $82 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      STACKTOP = sp;return;
     }
     $84 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($84|0,($82|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $91 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($91)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0113 = $90;$$015 = $89;
   ___resumeException($$015|0);
   // unreachable;
  } else {
   $$0112 = $90;$$014 = $89;$94 = $$pre;
  }
 }
 $93 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($93|0,($94|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $97 = ___cxa_find_matching_catch(0|0)|0;
  $98 = tempRet0;
  ___clang_call_terminate($97);
  // unreachable;
 } else {
  $$0113 = $$0112;$$015 = $$014;
  ___resumeException($$015|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($17) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($17) + ($13))|0;
 $39 = HEAP8[$this>>0]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this>>0] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10976)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 4|0);
   HEAP32[$38>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$36>>2] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 4|0);
   HEAP32[$74>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$72>>2] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10912)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 4|0);
   HEAP32[$97>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 4|0);
   HEAP32[$111>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP32[$109>>2] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP32[$__dp>>2] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP32[$__ts>>2] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$145>>2] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(600|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 574;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 84|0;
 $__bb = sp + 48|0;
 $__digits = sp + 184|0;
 $__loc = sp + 76|0;
 $__pat = sp + 52|0;
 $__dp = sp + 284|0;
 $__ts = sp + 388|0;
 $__grp = sp + 64|0;
 $__sym = sp + 20|0;
 $__sn = sp + 32|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 288|0;
 $__mi = sp + 56|0;
 $__me = sp + 16|0;
 $0 = sp + 44|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,11160,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(584)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(590,($__bb|0),($3|0),(11160|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(573);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(573);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(452,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(453,($__loc|0),(11408|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(615,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(573);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(616,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(455,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
   _free($110);
   _free($111);
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 92|0;
 $3 = sp + 40|0;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 28|0;
 $10 = sp + 4|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10848)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 1|0);
     HEAP8[$26>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP8[$24>>0] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(608,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 1|0);
     HEAP8[$43>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP8[$41>>0] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(608,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10784)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 1|0);
     HEAP8[$102>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP8[$100>>0] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(608,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 1|0);
     HEAP8[$119>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP8[$117>>0] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(608,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP8[$__dp>>0] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP8[$__ts>>0] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 1|0);
   HEAP8[$155>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP8[$153>>0] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0;
 var $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$050;
   }
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$01$i$i15>>0] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i15) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i17 = $59;
       break;
      } else {
       $$01$i$i15 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$050) + 1|0);
   $$$0 = $__neg ? $62 : $$050;
   $63 = ($$$0>>>0)<($__de>>>0);
   L28: do {
    if ($63) {
     $__d$029 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$029>>0]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L28;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$029) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$029;
       break L28;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$029 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($74)|0);
     $scevgep59 = $scevgep;
     $75 = ($scevgep59>>>0)<($13>>>0);
     $umax = $75 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $79 = $61;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $76 = (($__d$132) + -1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($79) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$79>>0] = $77;
      $80 = (($__f$033) + -1)|0;
      $81 = ($76>>>0)>($$$0>>>0);
      $82 = ($80|0)>(0);
      $or$cond = $81 & $82;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $79 = $$pre;$__d$132 = $76;$__f$033 = $80;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($82) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $90 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 1023]($__ct,48)|0);
     $90 = $86;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $87 = ($__f$0$lcssa71|0)>(0);
    $88 = HEAP32[$__me>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__me>>2] = $89;
    if ($87) {
     $91 = $88;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$91>>0] = $90;
      $92 = (($__f$139) + -1)|0;
      $93 = ($92|0)>(0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = (($94) + 1|0);
      HEAP32[$__me>>2] = $95;
      if ($93) {
       $91 = $94;$__f$139 = $92;
      } else {
       $$lcssa38 = $94;
       break;
      }
     }
    } else {
     $$lcssa38 = $88;
    }
    HEAP8[$$lcssa38>>0] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $96 = ($__d$2|0)==($$$0|0);
   if ($96) {
    $97 = HEAP32[$__ct>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (FUNCTION_TABLE_iii[$99 & 1023]($__ct,48)|0);
    $101 = HEAP32[$__me>>2]|0;
    $102 = (($101) + 1|0);
    HEAP32[$__me>>2] = $102;
    HEAP8[$101>>0] = $100;
   } else {
    $103 = HEAP8[$__grp>>0]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $107 = $103&255;
     $108 = $107 >>> 1;
     $110 = $108;
    } else {
     $106 = HEAP32[$11>>2]|0;
     $110 = $106;
    }
    $109 = ($110|0)==(0);
    if ($109) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($105) {
      $113 = $9;
     } else {
      $111 = HEAP32[$10>>2]|0;
      $113 = $111;
     }
     $112 = HEAP8[$113>>0]|0;
     $114 = $112 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $114;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $115 = ($__ng$044|0)==($__gl$046|0);
     if ($115) {
      $116 = HEAP32[$__me>>2]|0;
      $117 = (($116) + 1|0);
      HEAP32[$__me>>2] = $117;
      HEAP8[$116>>0] = $__ts;
      $118 = (($__ig$045) + 1)|0;
      $119 = HEAP8[$__grp>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $123 = $119&255;
       $124 = $123 >>> 1;
       $126 = $124;
      } else {
       $122 = HEAP32[$11>>2]|0;
       $126 = $122;
      }
      $125 = ($118>>>0)<($126>>>0);
      if ($125) {
       if ($121) {
        $129 = $9;
       } else {
        $127 = HEAP32[$10>>2]|0;
        $129 = $127;
       }
       $128 = (($129) + ($118)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($130<<24>>24)==(127);
       if ($131) {
        $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
       } else {
        if ($121) {
         $134 = $9;
        } else {
         $132 = HEAP32[$10>>2]|0;
         $134 = $132;
        }
        $133 = (($134) + ($118)|0);
        $135 = HEAP8[$133>>0]|0;
        $136 = $135 << 24 >> 24;
        $__gl$1 = $136;$__ig$1 = $118;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $118;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $137 = (($__d$343) + -1|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = HEAP32[$__me>>2]|0;
     $140 = (($139) + 1|0);
     HEAP32[$__me>>2] = $140;
     HEAP8[$139>>0] = $138;
     $141 = (($__ng$1) + 1)|0;
     $142 = ($137|0)==($$$0|0);
     if ($142) {
      break;
     } else {
      $__d$343 = $137;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $141;
     }
    }
   }
   $143 = HEAP32[$__me>>2]|0;
   $144 = ($61|0)==($143|0);
   if ($144) {
    $$2 = $$$0;
   } else {
    $145 = (($143) + -1|0);
    $146 = ($145>>>0)>($61>>>0);
    if ($146) {
     $$012$i$i = $61;$149 = $145;
     while(1) {
      $147 = HEAP8[$$012$i$i>>0]|0;
      $148 = HEAP8[$149>>0]|0;
      HEAP8[$$012$i$i>>0] = $148;
      HEAP8[$149>>0] = $147;
      $150 = (($$012$i$i) + 1|0);
      $151 = (($149) + -1|0);
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $$012$i$i = $150;$149 = $151;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$050;
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $153 = (($__p$049) + 1)|0;
  $exitcond = ($153|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $153;
  }
 }
 $154 = HEAP8[$__sn>>0]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $158 = $154&255;
  $159 = $158 >>> 1;
  $161 = $159;
 } else {
  $157 = HEAP32[$2>>2]|0;
  $161 = $157;
 }
 $160 = ($161>>>0)>(1);
 if ($160) {
  if ($156) {
   $164 = $154&255;
   $165 = $164 >>> 1;
   $$pn = $0;$168 = $0;$169 = $165;
  } else {
   $162 = HEAP32[$1>>2]|0;
   $163 = HEAP32[$2>>2]|0;
   $$pn = $162;$168 = $162;$169 = $163;
  }
  $166 = (($$pn) + 1|0);
  $167 = (($168) + ($169)|0);
  $170 = HEAP32[$__me>>2]|0;
  $171 = ($166|0)==($167|0);
  if ($171) {
   $$0$lcssa$i$i = $170;
  } else {
   $$01$i$i = $170;$173 = $166;
   while(1) {
    $172 = HEAP8[$173>>0]|0;
    HEAP8[$$01$i$i>>0] = $172;
    $174 = (($173) + 1|0);
    $175 = (($$01$i$i) + 1|0);
    $176 = ($174|0)==($167|0);
    if ($176) {
     $$0$lcssa$i$i = $175;
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $177 = $__flags & 176;
 if ((($177|0) == 32)) {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  STACKTOP = sp;return;
 } else if ((($177|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $__loc = sp + 24|0;
 $__pat = sp + 12|0;
 $__dp = sp + 64|0;
 $__ts = sp + 65|0;
 $__grp = sp;
 $__sym = sp + 52|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 68|0;
 $__mi = sp + 44|0;
 $__me = sp + 48|0;
 $0 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(453,($__loc|0),(11408|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(615,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(573);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(616,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(455,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $122 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch()|0;
 $91 = tempRet0;
 $$1 = $90;$$12 = $91;
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 444|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $__buf = sp + 896|0;
 $__bb = sp + 424|0;
 $__digits = sp + 24|0;
 $__loc = sp + 428|0;
 $__pat = sp + 436|0;
 $__dp = sp + 888|0;
 $__ts = sp + 892|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__sn = sp + 472|0;
 $__fd = sp + 484|0;
 $__mbuf = sp + 488|0;
 $__mi = sp + 16|0;
 $__me = sp + 432|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,11160,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(584)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(590,($__bb|0),($3|0),(11160|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(573);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(573);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $112 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $112 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $112 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(452,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $112;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(453,($__loc|0),(11400|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(617,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(573);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $96 = 0;$__mb$0 = 0;
         }
        } else {
         $96 = $83;$__mb$0 = $83;
        }
       } else {
        $96 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(618,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(597,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($96|0)==(0|0);
         if (!($109)) {
          _free($96);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $111 = ($112|0)==(0|0);
         if ($111) {
          _free($113);
          STACKTOP = sp;return;
         }
         _free($112);
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $95 = ($96|0)==(0|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($96);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$116 = $112;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$116 = $119;$117 = $118;
 }
 $115 = ($116|0)==(0|0);
 if ($115) {
  _free($117);
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($116);
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 92|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 $10 = sp + 28|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10976)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$24>>2] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(614,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[$41>>2] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(614,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 4|0);
   HEAP32[$79>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$77>>2] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10912)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 4|0);
     HEAP32[$102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$100>>2] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(614,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 4|0);
     HEAP32[$119>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$117>>2] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(614,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(608,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 4|0);
   HEAP32[$155>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$153>>2] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(614,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $87$phi = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0;
 var $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0;
 var $scevgep70 = 0, $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $52 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($52)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $53 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$55 = $51;
     while(1) {
      $54 = HEAP32[$55>>2]|0;
      HEAP32[$$01$i$i19>>2] = $54;
      $56 = (($55) + 4|0);
      $57 = ($56|0)==($46|0);
      if ($57) {
       break;
      }
      $58 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $58;$55 = $56;
     }
     $59 = (($53) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($59<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$059) + 4|0);
   $$$0 = $__neg ? $61 : $$059;
   $62 = ($$$0>>>0)<($__de>>>0);
   L32: do {
    if ($62) {
     $__d$034 = $$$0;
     while(1) {
      $65 = HEAP32[$__d$034>>2]|0;
      $66 = HEAP32[$__ct>>2]|0;
      $67 = (($66) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiii[$68 & 1023]($__ct,2048,$65)|0);
      $64 = (($__d$034) + 4|0);
      if (!($69)) {
       $__d$0$lcssa = $__d$034;
       break L32;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $70 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($70) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $71 = (($__d$137) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($74) + 4|0);
      HEAP32[$74>>2] = $72;
      $75 = (($__f$038) + -1)|0;
      $76 = ($71>>>0)>($$$0>>>0);
      $77 = ($75|0)>(0);
      $or$cond = $76 & $77;
      if ($or$cond) {
       $74 = $73;$__d$137 = $71;$__f$038 = $75;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $73;
     if ($77) {
      $__d$1$lcssa79 = $71;$__f$0$lcssa77 = $75;
      label = 34;
     } else {
      $78 = HEAP32[$__me>>2]|0;
      $79 = (($78) + 4|0);
      HEAP32[$__me>>2] = $79;
      $$lcssa44 = $78;$__d$1$lcssa7880 = $71;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $80 = HEAP32[$__ct>>2]|0;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_iii[$82 & 1023]($__ct,48)|0);
     $84 = ($__f$0$lcssa77|0)>(0);
     $85 = HEAP32[$__me>>2]|0;
     $86 = (($85) + 4|0);
     HEAP32[$__me>>2] = $86;
     if ($84) {
      $87 = $85;$91 = $86;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$87>>2] = $83;
       $88 = (($__f$145) + -1)|0;
       $89 = ($88|0)>(0);
       $90 = (($91) + 4|0);
       if ($89) {
        $87$phi = $91;$91 = $90;$__f$145 = $88;$87 = $87$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($85) + ($$sum75<<2)|0);
      $scevgep70 = (($85) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $85;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $92 = ($__d$2|0)==($$$0|0);
   if ($92) {
    $93 = HEAP32[$__ct>>2]|0;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 1023]($__ct,48)|0);
    $97 = HEAP32[$__me>>2]|0;
    $98 = (($97) + 4|0);
    HEAP32[$__me>>2] = $98;
    HEAP32[$97>>2] = $96;
    $140 = $98;
   } else {
    $99 = HEAP8[$__grp>>0]|0;
    $100 = $99 & 1;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     $103 = $99&255;
     $104 = $103 >>> 1;
     $106 = $104;
    } else {
     $102 = HEAP32[$9>>2]|0;
     $106 = $102;
    }
    $105 = ($106|0)==(0);
    if ($105) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($101) {
      $109 = $7;
     } else {
      $107 = HEAP32[$8>>2]|0;
      $109 = $107;
     }
     $108 = HEAP8[$109>>0]|0;
     $110 = $108 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $110;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $111 = ($__ng$054|0)==($__gl$056|0);
     $112 = HEAP32[$__me>>2]|0;
     if ($111) {
      $113 = (($112) + 4|0);
      HEAP32[$__me>>2] = $113;
      HEAP32[$112>>2] = $__ts;
      $114 = (($__ig$055) + 1)|0;
      $115 = HEAP8[$__grp>>0]|0;
      $116 = $115 & 1;
      $117 = ($116<<24>>24)==(0);
      if ($117) {
       $119 = $115&255;
       $120 = $119 >>> 1;
       $122 = $120;
      } else {
       $118 = HEAP32[$9>>2]|0;
       $122 = $118;
      }
      $121 = ($114>>>0)<($122>>>0);
      if ($121) {
       if ($117) {
        $125 = $7;
       } else {
        $123 = HEAP32[$8>>2]|0;
        $125 = $123;
       }
       $124 = (($125) + ($114)|0);
       $126 = HEAP8[$124>>0]|0;
       $127 = ($126<<24>>24)==(127);
       if ($127) {
        $136 = $113;$__gl$1 = -1;$__ig$1 = $114;$__ng$1 = 0;
       } else {
        if ($117) {
         $130 = $7;
        } else {
         $128 = HEAP32[$8>>2]|0;
         $130 = $128;
        }
        $129 = (($130) + ($114)|0);
        $131 = HEAP8[$129>>0]|0;
        $132 = $131 << 24 >> 24;
        $136 = $113;$__gl$1 = $132;$__ig$1 = $114;$__ng$1 = 0;
       }
      } else {
       $136 = $113;$__gl$1 = $__gl$056;$__ig$1 = $114;$__ng$1 = 0;
      }
     } else {
      $136 = $112;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $133 = (($__d$353) + -4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($136) + 4|0);
     HEAP32[$__me>>2] = $135;
     HEAP32[$136>>2] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      $140 = $135;
      break;
     } else {
      $__d$353 = $133;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $137;
     }
    }
   }
   $139 = ($60|0)==($140|0);
   if ($139) {
    $$2 = $$$0;
   } else {
    $141 = (($140) + -4|0);
    $142 = ($141>>>0)>($60>>>0);
    if ($142) {
     $$012$i$i = $60;$145 = $141;
     while(1) {
      $143 = HEAP32[$$012$i$i>>2]|0;
      $144 = HEAP32[$145>>2]|0;
      HEAP32[$$012$i$i>>2] = $144;
      HEAP32[$145>>2] = $143;
      $146 = (($$012$i$i) + 4|0);
      $147 = (($145) + -4|0);
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $$012$i$i = $146;$145 = $147;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $149 = (($__p$058) + 1)|0;
  $exitcond = ($149|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $149;
  }
 }
 $150 = HEAP8[$__sn>>0]|0;
 $151 = $150 & 1;
 $152 = ($151<<24>>24)==(0);
 if ($152) {
  $154 = $150&255;
  $155 = $154 >>> 1;
  $157 = $155;
 } else {
  $153 = HEAP32[$0>>2]|0;
  $157 = $153;
 }
 $156 = ($157>>>0)>(1);
 if ($156) {
  if ($152) {
   $160 = $150&255;
   $161 = $160 >>> 1;
   $$pn = $0;$164 = $0;$165 = $161;
  } else {
   $158 = HEAP32[$1>>2]|0;
   $159 = HEAP32[$0>>2]|0;
   $$pn = $158;$164 = $158;$165 = $159;
  }
  $162 = (($$pn) + 4|0);
  $163 = (($164) + ($165<<2)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($162|0)==($163|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$promoted4$i$i = $162;
   $$sum = (($165) + -1)|0;
   $scevgep$i$i = (($164) + ($$sum<<2)|0);
   $168 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($168)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $169 = $uglygep5$i$i >>> 2;
   $$01$i$i = $166;$171 = $162;
   while(1) {
    $170 = HEAP32[$171>>2]|0;
    HEAP32[$$01$i$i>>2] = $170;
    $172 = (($171) + 4|0);
    $173 = (($$01$i$i) + 4|0);
    $174 = ($172|0)==($163|0);
    if ($174) {
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
   $175 = (($169) + 1)|0;
   $scevgep6$i$i = (($166) + ($175<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $176 = $__flags & 176;
 if ((($176|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($176|0) == 32)) {
  $177 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $177;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 456|0;
 $__loc = sp + 440|0;
 $__pat = sp + 28|0;
 $__dp = sp + 24|0;
 $__ts = sp + 436|0;
 $__grp = sp + 444|0;
 $__sym = sp + 460|0;
 $__sn = sp + 8|0;
 $__fd = sp + 4|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 20|0;
 $__me = sp + 432|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(453,($__loc|0),(11400|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(617,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(573);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$98 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$98 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$98 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(618,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(597,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($98|0)==(0|0);
       if ($123) {
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
        $124 = HEAP32[$__loc>>2]|0;
        (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
        STACKTOP = sp;return;
       }
       _free($98);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $97 = ($98|0)==(0|0);
     if ($97) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($98);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $125 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $$1 = $91;$$12 = $92;
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(511,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(619,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(511,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((13056 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $22;$25 = ((13056 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$04$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$04$i16|0);
    $or$cond2$i17 = $30 | $32;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$03$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(511,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$03$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$03$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(602,(12288|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(619,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((13160 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$04$i = $56;$78 = ((13160 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$04$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$04$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$04$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$04$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$04$i|0);
  $or$cond2$i = $88 | $90;
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$03$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(611,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$03$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$03$i = $98;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(602,(12288|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch()|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch()|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch()|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11488 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(584)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(598,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(567,($0|0),(11288|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((19936 + 8|0));
  ___cxa_throw(($0|0),(19984|0),(354|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((11320 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(620,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  $$1 = $84;$$12 = $83;
  ___resumeException($$12|0);
  // unreachable;
 }
 $5 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(446,($5|0),(11312|0),1);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $86;$$01 = $85;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($this) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($8|0);
  if (!($11)) {
   $__new_last2$i$i$i = $8;
   $scevgep$i$i$i = (($10) + -4|0);
   $12 = (0 - ($__new_last2$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep$i$i$i) + ($12)|0);
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $13 = $uglygep3$i$i$i >>> 2;
   $14 = $13 ^ -1;
   $scevgep4$i$i$i = (($10) + ($14<<2)|0);
   HEAP32[$9>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((16216 + 4|0))>>2] = 0;
  HEAP32[16216>>2] = ((9768 + 8|0));
  __THREW__ = 0;
  invoke_vii(621,($this|0),(16216|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  do {
   if ($16) {
    label = 41;
   } else {
    HEAP32[((16208 + 4|0))>>2] = 0;
    HEAP32[16208>>2] = ((9808 + 8|0));
    __THREW__ = 0;
    invoke_vii(622,($this|0),(16208|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 41;
    } else {
     __ZNSt3__15ctypeIcEC2EPKtbj(16192,0,0,1);
     __THREW__ = 0;
     invoke_vii(623,($this|0),(16192|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      label = 41;
     } else {
      HEAP32[((16184 + 4|0))>>2] = 0;
      HEAP32[16184>>2] = ((12376 + 8|0));
      __THREW__ = 0;
      invoke_vii(624,($this|0),(16184|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 41;
      } else {
       HEAP32[((16176 + 4|0))>>2] = 0;
       HEAP32[16176>>2] = ((12592 + 8|0));
       __THREW__ = 0;
       invoke_vii(625,($this|0),(16176|0));
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        label = 41;
       } else {
        __THREW__ = 0;
        invoke_vii(626,(16160|0),1);
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(627,($this|0),(16160|0));
         $27 = __THREW__; __THREW__ = 0;
         $28 = $27&1;
         if ($28) {
          label = 41;
         } else {
          HEAP32[((16152 + 4|0))>>2] = 0;
          HEAP32[16152>>2] = ((12816 + 8|0));
          __THREW__ = 0;
          invoke_vii(628,($this|0),(16152|0));
          $29 = __THREW__; __THREW__ = 0;
          $30 = $29&1;
          if ($30) {
           label = 41;
          } else {
           HEAP32[((16144 + 4|0))>>2] = 0;
           HEAP32[16144>>2] = ((12936 + 8|0));
           __THREW__ = 0;
           invoke_vii(629,($this|0),(16144|0));
           $31 = __THREW__; __THREW__ = 0;
           $32 = $31&1;
           if ($32) {
            label = 41;
           } else {
            HEAP32[((16120 + 4|0))>>2] = 0;
            HEAP32[16120>>2] = ((11568 + 8|0));
            HEAP8[((16120 + 8|0))>>0] = 46;
            HEAP8[((16120 + 9|0))>>0] = 44;
            ;HEAP32[((16120 + 12|0))+0>>2]=0|0;HEAP32[((16120 + 12|0))+4>>2]=0|0;HEAP32[((16120 + 12|0))+8>>2]=0|0;
            __THREW__ = 0;
            invoke_vii(630,($this|0),(16120|0));
            $33 = __THREW__; __THREW__ = 0;
            $34 = $33&1;
            if ($34) {
             label = 41;
            } else {
             HEAP32[((16088 + 4|0))>>2] = 0;
             HEAP32[16088>>2] = ((11608 + 8|0));
             HEAP32[((16088 + 8|0))>>2] = 46;
             HEAP32[((16088 + 12|0))>>2] = 44;
             ;HEAP32[((16088 + 16|0))+0>>2]=0|0;HEAP32[((16088 + 16|0))+4>>2]=0|0;HEAP32[((16088 + 16|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(631,($this|0),(16088|0));
             $35 = __THREW__; __THREW__ = 0;
             $36 = $35&1;
             if ($36) {
              label = 41;
             } else {
              HEAP32[((16080 + 4|0))>>2] = 0;
              HEAP32[16080>>2] = ((9848 + 8|0));
              __THREW__ = 0;
              invoke_vii(632,($this|0),(16080|0));
              $37 = __THREW__; __THREW__ = 0;
              $38 = $37&1;
              if ($38) {
               label = 41;
              } else {
               HEAP32[((16072 + 4|0))>>2] = 0;
               HEAP32[16072>>2] = ((9968 + 8|0));
               __THREW__ = 0;
               invoke_vii(633,($this|0),(16072|0));
               $39 = __THREW__; __THREW__ = 0;
               $40 = $39&1;
               if ($40) {
                label = 41;
               } else {
                HEAP32[((16064 + 4|0))>>2] = 0;
                HEAP32[16064>>2] = ((10040 + 8|0));
                __THREW__ = 0;
                invoke_vii(634,($this|0),(16064|0));
                $41 = __THREW__; __THREW__ = 0;
                $42 = $41&1;
                if ($42) {
                 label = 41;
                } else {
                 HEAP32[((16056 + 4|0))>>2] = 0;
                 HEAP32[16056>>2] = ((10136 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(635,($this|0),(16056|0));
                 $43 = __THREW__; __THREW__ = 0;
                 $44 = $43&1;
                 if ($44) {
                  label = 41;
                 } else {
                  HEAP32[((16048 + 4|0))>>2] = 0;
                  HEAP32[16048>>2] = ((10728 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(636,($this|0),(16048|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16040 + 4|0))>>2] = 0;
                  HEAP32[16040>>2] = ((10792 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(637,($this|0),(16040|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16032 + 4|0))>>2] = 0;
                  HEAP32[16032>>2] = ((10856 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(638,($this|0),(16032|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16024 + 4|0))>>2] = 0;
                  HEAP32[16024>>2] = ((10920 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(639,($this|0),(16024|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16016 + 4|0))>>2] = 0;
                  HEAP32[16016>>2] = ((10984 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(640,($this|0),(16016|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16008 + 4|0))>>2] = 0;
                  HEAP32[16008>>2] = ((11064 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(641,($this|0),(16008|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16000 + 4|0))>>2] = 0;
                  HEAP32[16000>>2] = ((11120 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(642,($this|0),(16000|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15992 + 4|0))>>2] = 0;
                  HEAP32[15992>>2] = ((11168 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(643,($this|0),(15992|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15976 + 4|0))>>2] = 0;
                  HEAP32[15976>>2] = ((10216 + 8|0));
                  HEAP32[((15976 + 8|0))>>2] = ((10216 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(644,($this|0),(15976|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15960 + 4|0))>>2] = 0;
                  HEAP32[15960>>2] = ((10368 + 8|0));
                  HEAP32[((15960 + 8|0))>>2] = ((10368 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(645,($this|0),(15960|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15944 + 4|0))>>2] = 0;
                  HEAP32[15944>>2] = ((12312 + 8|0));
                  __THREW__ = 0;
                  $65 = (invoke_i(584)|0);
                  $66 = __THREW__; __THREW__ = 0;
                  $67 = $66&1;
                  if ($67) {
                   $68 = ___cxa_find_matching_catch()|0;
                   $69 = tempRet0;
                   $eh$lpad$body$index3Z2D = $69;$eh$lpad$body$indexZ2D = $68;
                   break;
                  }
                  HEAP32[((15944 + 8|0))>>2] = $65;
                  HEAP32[15944>>2] = ((10664 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(646,($this|0),(15944|0));
                  $70 = __THREW__; __THREW__ = 0;
                  $71 = $70&1;
                  if ($71) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15928 + 4|0))>>2] = 0;
                  HEAP32[15928>>2] = ((12312 + 8|0));
                  __THREW__ = 0;
                  $72 = (invoke_i(584)|0);
                  $73 = __THREW__; __THREW__ = 0;
                  $74 = $73&1;
                  if ($74) {
                   $75 = ___cxa_find_matching_catch()|0;
                   $76 = tempRet0;
                   $eh$lpad$body$index3Z2D = $76;$eh$lpad$body$indexZ2D = $75;
                   break;
                  }
                  HEAP32[((15928 + 8|0))>>2] = $72;
                  HEAP32[15928>>2] = ((10696 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(647,($this|0),(15928|0));
                  $77 = __THREW__; __THREW__ = 0;
                  $78 = $77&1;
                  if ($78) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15920 + 4|0))>>2] = 0;
                  HEAP32[15920>>2] = ((11208 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(648,($this|0),(15920|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15912 + 4|0))>>2] = 0;
                  HEAP32[15912>>2] = ((11248 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(649,($this|0),(15912|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 41;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 41) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $eh$lpad$body$index3Z2D = $88;$eh$lpad$body$indexZ2D = $87;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 $$1 = $$0;$$12 = $$01;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9800)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9840)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11400)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11472)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11480)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11536)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11552)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11560)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9912)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10032)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10096)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10192)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10784)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10848)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10912)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10976)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11016)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11096)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11152)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11200)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10304)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10456)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10688)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10720)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11240)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11280)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11360>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((11360|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(650)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((11360|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[11352>>2] = 11344;
     ___cxa_guard_release((11360|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[11352>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(651,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre2 = HEAP32[$0>>2]|0;
    $16 = $$pre2;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if ($14) {
    ___resumeException($12|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
  $19 = (($20) + ($id<<2)|0);
  HEAP32[$19>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
 $$pre = HEAP32[$0>>2]|0;
 $20 = $$pre;
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11320 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $18;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $11 = $$pre;$13 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $11;$6 = $13;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $__new_last2$i$i = $10;
 $scevgep$i$i = (($1) + -4|0);
 $12 = (0 - ($__new_last2$i$i))|0;
 $uglygep$i$i = (($scevgep$i$i) + ($12)|0);
 $uglygep3$i$i = $uglygep$i$i;
 $13 = $uglygep3$i$i >>> 2;
 $14 = $13 ^ -1;
 $scevgep4$i$i = (($1) + ($14<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(20184|0),(361|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (($3) + ($id<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(15752,1);
 HEAP32[11344>>2] = 15752;
 STACKTOP = sp;return (11344|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[11368>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return (11368|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11384>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((11384|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(652)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((11384|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[11376>>2] = 11368;
     ___cxa_guard_release((11384|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[11376>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(653)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (654);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,655);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11392>>2]|0;HEAP32[11392>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $1 = (($0) + ($c<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & $m;
 $4 = ($3<<16>>16)!=(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(656)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0;
 var $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $6 = (($5) + ($4<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7;
  } else {
   $8 = 0;
  }
  HEAP16[$$03>>1] = $8;
  $9 = (($$012) + 4|0);
  $10 = (($$03) + 2|0);
  $11 = ($9|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$012 = $9;$$03 = $10;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = (($$01) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $5 = (($4) + ($3<<1)|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & $m;
    $8 = ($7<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($8) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $2;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(657)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$01>>2] = $8;
  $9 = (($$01) + 4|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(658)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$01>>2] = $8;
  $9 = (($$01) + 4|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((11416 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$2>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11416 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c&255;
 $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c << 24 >> 24;
 $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((11488 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(584)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(659,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(586,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     } else if ((($26|0) == -1)) {
      label = 16;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(660,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(586,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L24: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012>>0]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97>>0] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L24;
         }
         $100 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre99;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L29: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L29;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(586,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L56: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(660,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(586,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L56;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L56;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch()|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(586,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(586,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(661,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(586,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre113;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(662,($70|0),($$pre113|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(586,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L22: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216>>0]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L22;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(586,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L37: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(662,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(586,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else if ((($47|0) == -1)) {
         label = 27;
         break;
        } else if ((($47|0) == -2)) {
         label = 28;
         break;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L37;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(586,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(586,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(660,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(586,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(586,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27>>0] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(586,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(663,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(586,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(586,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(586,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(586,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(664,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(586,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(586,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(586,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(586,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11568 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11608 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,11648,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(11656)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,11656,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,11680,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(11688)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,11688,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0 = 8;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 8)) {
  $$0 = 16;
 } else {
  $$0 = 10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11720>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[11712>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((11720|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[11712>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[18920>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18920|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18752|0),0,168)|0;
   (___cxa_atexit((665|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18920|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(666,(18752|0),(18928|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(666,(((18752 + 12|0))|0),(18936|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(666,(((18752 + 24|0))|0),(18944|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(666,(((18752 + 36|0))|0),(18952|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(666,(((18752 + 48|0))|0),(18968|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(666,(((18752 + 60|0))|0),(18984|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(666,(((18752 + 72|0))|0),(18992|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(666,(((18752 + 84|0))|0),(19008|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(666,(((18752 + 96|0))|0),(19016|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(666,(((18752 + 108|0))|0),(19024|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(666,(((18752 + 120|0))|0),(19032|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(666,(((18752 + 132|0))|0),(19040|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(666,(((18752 + 144|0))|0),(19048|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(666,(((18752 + 156|0))|0),(19056|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[11712>>2] = 18752;
               ___cxa_guard_release((11720|0));
               $36 = HEAP32[11712>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((11720|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11736>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[11728>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((11736|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[11728>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[18384>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18384|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18216|0),0,168)|0;
   (___cxa_atexit((667|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18384|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(668,(18216|0),(18392|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(668,(((18216 + 12|0))|0),(18424|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(668,(((18216 + 24|0))|0),(18456|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(668,(((18216 + 36|0))|0),(18488|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(668,(((18216 + 48|0))|0),(18528|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(668,(((18216 + 60|0))|0),(18568|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(668,(((18216 + 72|0))|0),(18600|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(668,(((18216 + 84|0))|0),(18640|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(668,(((18216 + 96|0))|0),(18656|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(668,(((18216 + 108|0))|0),(18672|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(668,(((18216 + 120|0))|0),(18688|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(668,(((18216 + 132|0))|0),(18704|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(668,(((18216 + 144|0))|0),(18720|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(668,(((18216 + 156|0))|0),(18736|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[11728>>2] = 18216;
               ___cxa_guard_release((11736|0));
               $36 = HEAP32[11728>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((11736|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11752>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[11744>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((11752|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[11744>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[17992>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17992|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17704|0),0,288)|0;
   (___cxa_atexit((669|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17992|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(666,(17704|0),(18000|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(666,(((17704 + 12|0))|0),(18008|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(666,(((17704 + 24|0))|0),(18024|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(666,(((17704 + 36|0))|0),(18032|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(666,(((17704 + 48|0))|0),(18040|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(666,(((17704 + 60|0))|0),(18048|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(666,(((17704 + 72|0))|0),(18056|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(666,(((17704 + 84|0))|0),(18064|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(666,(((17704 + 96|0))|0),(18072|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(666,(((17704 + 108|0))|0),(18088|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(666,(((17704 + 120|0))|0),(18096|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(666,(((17704 + 132|0))|0),(18112|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(666,(((17704 + 144|0))|0),(18128|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(666,(((17704 + 156|0))|0),(18136|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(666,(((17704 + 168|0))|0),(18144|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(666,(((17704 + 180|0))|0),(18152|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 192|0))|0),(18040|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 204|0))|0),(18160|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 216|0))|0),(18168|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 228|0))|0),(18176|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 240|0))|0),(18184|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 252|0))|0),(18192|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 264|0))|0),(18200|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(666,(((17704 + 276|0))|0),(18208|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[11744>>2] = 17704;
                  ___cxa_guard_release((11752|0));
                  $56 = HEAP32[11744>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((11752|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11768>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[11760>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((11768|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[11760>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[17152>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17152|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16864|0),0,288)|0;
   (___cxa_atexit((670|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17152|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(668,(16864|0),(17160|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(668,(((16864 + 12|0))|0),(17192|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(668,(((16864 + 24|0))|0),(17232|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(668,(((16864 + 36|0))|0),(17256|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(668,(((16864 + 48|0))|0),(17576|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(668,(((16864 + 60|0))|0),(17280|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(668,(((16864 + 72|0))|0),(17304|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(668,(((16864 + 84|0))|0),(17328|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(668,(((16864 + 96|0))|0),(17360|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(668,(((16864 + 108|0))|0),(17400|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(668,(((16864 + 120|0))|0),(17432|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(668,(((16864 + 132|0))|0),(17472|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(668,(((16864 + 144|0))|0),(17512|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(668,(((16864 + 156|0))|0),(17528|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(668,(((16864 + 168|0))|0),(17544|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(668,(((16864 + 180|0))|0),(17560|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 192|0))|0),(17576|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 204|0))|0),(17592|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 216|0))|0),(17608|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 228|0))|0),(17624|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 240|0))|0),(17640|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 252|0))|0),(17656|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 264|0))|0),(17672|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(668,(((16864 + 276|0))|0),(17688|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[11760>>2] = 16864;
                  ___cxa_guard_release((11768|0));
                  $56 = HEAP32[11760>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((11768|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11784>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[11776>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((11784|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[11776>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[16840>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16840|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16552|0),0,288)|0;
   (___cxa_atexit((671|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16840|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(666,(16552|0),(16848|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11784|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(666,(((16552 + 12|0))|0),(16856|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11784|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[11776>>2] = 16552;
 ___cxa_guard_release((11784|0));
 $12 = HEAP32[11776>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11800>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[11792>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((11800|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[11792>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[16512>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16512|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16224|0),0,288)|0;
   (___cxa_atexit((672|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16512|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(668,(16224|0),(16520|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11800|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(668,(((16224 + 12|0))|0),(16536|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11800|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[11792>>2] = 16224;
 ___cxa_guard_release((11800|0));
 $12 = HEAP32[11792>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11824>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11808|0);
 }
 $2 = (___cxa_guard_acquire((11824|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11808|0);
 }
 __THREW__ = 0;
 invoke_viii(446,(11808|0),(11832|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11824|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((397|0),(11808|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11824|0));
 STACKTOP = sp;return (11808|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11864>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11848|0);
 }
 $2 = (___cxa_guard_acquire((11864|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11848|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(673,(11872|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(674,(11848|0),(11872|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((675|0),(11848|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11864|0));
   STACKTOP = sp;return (11848|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11864|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11928>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11912|0);
 }
 $2 = (___cxa_guard_acquire((11928|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11912|0);
 }
 __THREW__ = 0;
 invoke_viii(446,(11912|0),(11936|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11928|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((397|0),(11912|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11928|0));
 STACKTOP = sp;return (11912|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11968>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11952|0);
 }
 $2 = (___cxa_guard_acquire((11968|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11952|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(673,(11976|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(674,(11952|0),(11976|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((675|0),(11952|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11968|0));
   STACKTOP = sp;return (11952|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11968|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12032>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12016|0);
 }
 $2 = (___cxa_guard_acquire((12032|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12016|0);
 }
 __THREW__ = 0;
 invoke_viii(446,(12016|0),(12040|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((12032|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((397|0),(12016|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12032|0));
 STACKTOP = sp;return (12016|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12080>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12064|0);
 }
 $2 = (___cxa_guard_acquire((12080|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12064|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(673,(12088|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(674,(12064|0),(12088|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((675|0),(12064|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12080|0));
   STACKTOP = sp;return (12064|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((12080|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12192>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12176|0);
 }
 $2 = (___cxa_guard_acquire((12192|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12176|0);
 }
 __THREW__ = 0;
 invoke_viii(446,(12176|0),(12200|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((12192|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((397|0),(12176|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12192|0));
 STACKTOP = sp;return (12176|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12232>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12216|0);
 }
 $2 = (___cxa_guard_acquire((12232|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12216|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(673,(12240|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(674,(12216|0),(12240|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((675|0),(12216|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12232|0));
   STACKTOP = sp;return (12216|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((12232|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (+_strtold_l($__a,$__p2,$3));
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
 }
 $10 = $4;
 $$0 = $10;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(4294967295);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(4294967295);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(65535);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = $6&65535;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ($6|0)==(34);
 if ($10) {
  HEAP32[$__err>>2] = 4;
  $11 = ($5|0)>(0);
  $12 = ($5|0)==(0);
  $13 = ($4>>>0)>(0);
  $14 = $12 & $13;
  $15 = $11 | $14;
  $16 = $15 ? -1 : 0;
  $17 = $15 ? 2147483647 : -2147483648;
  tempRet0 = $17;
  STACKTOP = sp;return ($16|0);
 } else {
  $18 = $5;$19 = $4;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($6|0)==(34);
 do {
  if ($10) {
   HEAP32[$__err>>2] = 4;
   $21 = ($5|0)>(0);
   $22 = ($5|0)==(0);
   $23 = ($4>>>0)>(0);
   $24 = $22 & $23;
   $25 = $21 | $24;
   if ($25) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $11 = ($5|0)<(-1);
   $12 = ($5|0)==(-1);
   $13 = ($4>>>0)<(2147483648);
   $14 = $12 & $13;
   $15 = $11 | $14;
   if ($15) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $16 = ($5|0)>(0);
   $17 = ($5|0)==(0);
   $18 = ($4>>>0)>(2147483647);
   $19 = $17 & $18;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = ($14>>>0)>(1073741823);
 if ($15) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $16 = (($4) - ($11))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)<(536870911);
 if ($18) {
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($14>>>0);
  $21 = $20 ? $14 : $19;
  $$0$i = $21;
 } else {
  $$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($this) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($8|0);
 if ($12) {
  $13 = (($11) + 112|0);
  HEAP8[$13>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($8);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $9 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   $6 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $6;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $9 = $__a;
    break;
   } else {
    $7 = $__cap << 2;
    $8 = (__Znwj($7)|0);
    $9 = $8;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $9;
 $10 = (($9) + ($__start<<2)|0);
 $11 = (($this) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = (($this) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = (($9) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $4 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $4;
 if ($or$cond$i$i) {
  $5 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $5;
 } else {
  $6 = $__n << 2;
  $7 = (__Znwj($6)|0);
  $$0$i$i = $7;
 }
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $9 = (($$0$i$i) + ($__n<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(676,($this|0),($__n|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($6|0);
  // unreachable;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = (($this) + 16|0);
 $9 = ($8|0)==($0|0);
 if ($9) {
  $10 = (($this) + 128|0);
  HEAP8[$10>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16224 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(16224);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16552 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16552);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16864 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(16864);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17704 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(17704);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((18216 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(18216);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18752 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(18752);
 STACKTOP = sp;return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 19272;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 19280 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (19064 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$443 = 0, $$444 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$842 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1045 = 0, $s$1046 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524>>0]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(4);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 31;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78>>0]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81>>0]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85>>0]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(4);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$89>>0]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $s$5$lcssa = $100;
     label = 26;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$444 = $$2;$$842 = $$6;$s$1046 = $s$7;
    label = 48;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (19064 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$444 = $ws;$$842 = $$24;$s$1046 = $s$2;
    label = 48;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (19064 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $109 = HEAP8[$s$8>>0]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 38;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119>>0]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 41;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129>>0]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 44;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 47;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 47;
 }
 else if ((label|0) == 41) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 47;
 }
 else if ((label|0) == 44) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 47;
 }
 if ((label|0) == 47) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$444 = $$4;$$842 = $$8;$s$1046 = $s$10;
   label = 48;
  } else {
   $$443 = $$4;$s$1045 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $143 = HEAP8[$s$1046>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$444|0)==(0|0);
   if (!($145)) {
    HEAP32[$$444>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$842))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$443 = $$444;$s$1045 = $s$1046;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$443|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1045;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (19064 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($35>>>0)>($$414>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi241Z2D = 0, $$pre221 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre237 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0130 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0136 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0135 = 0, $pos$1 = 0, $pos$2 = 0, $s$0128 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0129 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph160 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0130 = 0;$p$0136 = $fmt;$pos$0135 = 0;$s$0128 = 0;$wcs$0129 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0136>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = (($p$0136) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $65 = (($p$0136) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else if ((($45<<24>>24) == 37)) {
        break L8;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0136) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0136) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;$s$1 = 0;$wcs$1 = 0;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0128;$wcs$1 = $wcs$0129;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0135;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $103 = ($pos$0135|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $106 = $pos$0135&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0135&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0135;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0135;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre234 = HEAP32[$3>>2]|0;
       if ($123) {
        $128 = $$pre234;
       } else {
        $124 = (($$pre234) + -1|0);
        HEAP32[$3>>2] = $124;
        $128 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $127 = $128;
       $129 = $126;
       $130 = (($125) + ($pos$0135))|0;
       $131 = (($130) + ($127))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $140 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre235 = HEAP32[$4>>2]|0;
       $140 = $$pre235;
      }
      $139 = ($140|0)==(0|0);
      if (!($139)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L65: do {
       switch ($$|0) {
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L77: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi241Z2D = $155;$p$7$ph = $153;
          } else if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi241Z2D = $158;$p$7$ph = $156;
          } else {
           $$pre239 = $invert$0 ^ 1;
           $$pre240 = $$pre239&255;
           $$pre$phi241Z2D = $$pre240;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi241Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L77;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi241Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L96: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $180;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$3$ph = $wcs$2;
          L102: while(1) {
           $182 = ($wcs$3$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$3$ph160 = 0;
              break L102;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$3$ph160 = $wcs$3$ph;
               break L102;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$3$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$3$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$3$ph = $235;
          }
          L126: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$3$ph160 = $wcs$3$ph;
               break L126;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$3$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph160;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph160;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$2$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L96;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$2$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$2$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $140;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L96;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $278 = $$pre237;
           }
          } else {
           $263 = $140;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L96;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre221 = HEAP32[$4>>2]|0;
            $263 = $$pre221;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre236 = HEAP32[$3>>2]|0;
        if ($289) {
         $294 = $$pre236;
        } else {
         $290 = (($$pre236) + -1|0);
         HEAP32[$3>>2] = $290;
         $294 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $293 = $294;
        $295 = $292;
        $296 = (($293) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $300 = ($wcs$4|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$3|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $303 = (($s$3) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L184: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0130))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0136) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0135) + 1)|0;
    $matches$1 = $matches$0130;$p$11 = $47;$pos$2 = $64;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   } else {
    $p$1 = $p$0136;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre238 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre238;
    } else {
     $33 = (($$pre238) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0135))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0130;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0130 = $matches$1;$p$0136 = $341;$pos$0135 = $pos$2;$s$0128 = $s$5;$wcs$0129 = $wcs$6;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$6 = $s$0128;$wcs$7 = $wcs$0129;
   label = 162;
  } else {
   $matches$3 = $matches$0130;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0130|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0130))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 677;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort_message(19456,$vararg_buffer10);
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort_message(19456,$vararg_buffer10);
  // unreachable;
 }
 $4 = (($2) + 80|0);
 $5 = (($2) + 48|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 & -256;
 $13 = ($12|0)==(1126902528);
 $14 = ($11|0)==(1129074247);
 $15 = $13 & $14;
 if (!($15)) {
  $36 = HEAP32[19296>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $36;
  _abort_message(19416,$vararg_buffer7);
  // unreachable;
 }
 $16 = ($8|0)==(1126902529);
 $17 = ($11|0)==(1129074247);
 $18 = $16 & $17;
 if ($18) {
  $19 = (($2) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = $4;
 }
 HEAP32[$thrown_object>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[19848>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 1023](19848,$22,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[19296>>2]|0;
  $31 = HEAP32[$29>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _abort_message(19320,$vararg_buffer);
  // unreachable;
 } else {
  $35 = HEAP32[19296>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $35;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  _abort_message(19368,$vararg_buffer3);
  // unreachable;
 }
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((19480|0),(678|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[19472>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(19488,$vararg_buffer);
  // unreachable;
 }
 return 0|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((19472|0),(679|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(19544,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[19472>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(19600,$vararg_buffer);
  // unreachable;
 }
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((19656 + 8|0));
  ___cxa_throw(($7|0),(19712|0),(351|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19656 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (19680|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(680,(19728|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(680,(19768|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(459);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(681)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[4822]|0;HEAP32[4822] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19824>>2]|0;HEAP32[19824>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19856 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19880 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20104 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (20128|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,20240,20296,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 1023]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,20240,20408,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(19712|0),(351|0));
 // unreachable;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[20656>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((20656 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((20656 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[20656>>2] = $22;
     } else {
      $23 = HEAP32[((20656 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((20656 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((20656 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((20656 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[20656>>2] = $74;
      } else {
       $75 = HEAP32[((20656 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((20656 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((20656 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((20656 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[20656>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[20656>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((20656 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((20656 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((20656 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((20656 + 8|0))>>2] = $81;
     HEAP32[((20656 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((20656 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((20656 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((20656 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((20656 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((20656 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((20656 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((20656 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((20656 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((20656 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((20656 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((20656 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((20656 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((20656 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[20656>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[20656>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((20656 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((20656 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((20656 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((20656 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((20656 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((20656 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((20656 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((20656 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((20656 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((20656 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((20656 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((20656 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((20656 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((20656 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((20656 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((20656 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((20656 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((20656 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[20656>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[20656>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((20656 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((20656 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((20656 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((20656 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((20656 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((20656 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((20656 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((20656 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((20656 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((20656 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((20656 + 20|0))>>2] = $516;
   HEAP32[((20656 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((20656 + 8|0))>>2] = 0;
   HEAP32[((20656 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((20656 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((20656 + 12|0))>>2] = $530;
  $531 = HEAP32[((20656 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((20656 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[21128>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((21128 + 8|0))>>2] = $540;
    HEAP32[((21128 + 4|0))>>2] = $540;
    HEAP32[((21128 + 12|0))>>2] = -1;
    HEAP32[((21128 + 16|0))>>2] = -1;
    HEAP32[((21128 + 20|0))>>2] = 0;
    HEAP32[((20656 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[21128>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((21128 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((20656 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((20656 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((20656 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((20656 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((20656 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((20656 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((21128 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((20656 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((20656 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((21128 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((20656 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((20656 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((20656 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((20656 + 432|0))>>2] = $633;
  $634 = HEAP32[((20656 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((20656 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((20656 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((20656 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((20656 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((20656 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((20656 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((20656 + 460|0))>>2] = 0;
    $641 = HEAP32[21128>>2]|0;
    HEAP32[((20656 + 36|0))>>2] = $641;
    HEAP32[((20656 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((20656 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((20656 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((20656 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((20656 + 24|0))>>2] = $654;
    HEAP32[((20656 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((21128 + 16|0))>>2]|0;
    HEAP32[((20656 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((20656 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((20656 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((20656 + 24|0))>>2] = $684;
       HEAP32[((20656 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((21128 + 16|0))>>2]|0;
       HEAP32[((20656 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((20656 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((20656 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((20656 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((20656 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((20656 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((20656 + 12|0))>>2] = $732;
        HEAP32[((20656 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((20656 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((20656 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((20656 + 8|0))>>2] = $738;
         HEAP32[((20656 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((20656 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((20656 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[20656>>2]|0;
            $765 = $764 & $763;
            HEAP32[20656>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((20656 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((20656 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((20656 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((20656 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((20656 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((20656 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((20656 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((20656 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((20656 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((20656 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((20656 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[20656>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[20656>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((20656 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((20656 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((20656 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((20656 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((20656 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((20656 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((20656 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((20656 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((20656 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((20656 + 24|0))>>2] = $958;
    HEAP32[((20656 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((21128 + 16|0))>>2]|0;
    HEAP32[((20656 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((20656 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((20656 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((20656 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((20656 + 448|0))+12>>2]|0;
    HEAP32[((20656 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((20656 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((20656 + 460|0))>>2] = 0;
    HEAP32[((20656 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((20656 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[20656>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[20656>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((20656 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((20656 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((20656 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((20656 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((20656 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((20656 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((20656 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((20656 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((20656 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((20656 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((20656 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((20656 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((20656 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((20656 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((20656 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((20656 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[20656>>2]|0;
     $36 = $35 & $34;
     HEAP32[20656>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((20656 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((20656 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((20656 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((20656 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((20656 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((20656 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((20656 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((20656 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((20656 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((20656 + 12|0))>>2] = $122;
   HEAP32[((20656 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((20656 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20656 + 20|0))>>2] = 0;
   HEAP32[((20656 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((20656 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((20656 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((20656 + 8|0))>>2] = $130;
   HEAP32[((20656 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((20656 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((20656 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[20656>>2]|0;
     $154 = $153 & $152;
     HEAP32[20656>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((20656 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((20656 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((20656 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((20656 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((20656 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((20656 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((20656 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((20656 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((20656 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((20656 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((20656 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((20656 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((20656 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[20656>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[20656>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((20656 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((20656 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((20656 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((20656 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((20656 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((20656 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((20656 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((20656 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((20656 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((20656 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((20656 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((20656 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((20656 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((21128 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((20656 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((20656 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((20656 + 24|0))>>2] = $38;
  HEAP32[((20656 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((20656 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((20656 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((20656 + 8|0))>>2] = $storemerge21;
  HEAP32[((20656 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((20656 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[20656>>2]|0;
    $90 = $89 & $88;
    HEAP32[20656>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((20656 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((20656 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((20656 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((20656 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((20656 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((20656 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((20656 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((20656 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((20656 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((20656 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((20656 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[20656>>2]|0;
     $32 = $31 & $30;
     HEAP32[20656>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((20656 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((20656 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((20656 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((20656 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((20656 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((20656 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((20656 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((20656 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((20656 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((20656 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((20656 + 12|0))>>2] = $117;
   HEAP32[((20656 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((20656 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20656 + 20|0))>>2] = 0;
   HEAP32[((20656 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((20656 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((20656 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((20656 + 8|0))>>2] = $125;
   HEAP32[((20656 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((20656 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[20656>>2]|0;
     $148 = $147 & $146;
     HEAP32[20656>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((20656 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((20656 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((20656 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((20656 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((20656 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((20656 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((20656 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((20656 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((20656 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((20656 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[20656>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[20656>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((20656 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((20656 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((20656 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((20656 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((20656 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((20656 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((20656 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((20656 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (21152 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (21152 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (21416 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (21152 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (21152 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (21152 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (21152 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (21152 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (21152 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (21152 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (21152 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (21432 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (21448 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L71: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L71;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L84: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.7976931348623157E+308;
       $265 = $264 * 1.7976931348623157E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.2250738585072014E-308;
       $278 = $277 * 2.2250738585072014E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L173: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L173;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L187: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L187;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.7976931348623157E+308;
     $448 = $447 * 1.7976931348623157E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.2250738585072014E-308;
     $460 = $459 * 2.2250738585072014E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (21464 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (21464 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (21464 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L285: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L285;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L316: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (21456 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L316;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((21496 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 21984;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((21984 + 1|0)) : ((21984 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((21984 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 22008 : 22016;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 22024 : 22032;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (22040 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (22040 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (22040 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (22040 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L228: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L228;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(22056,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(22056,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 21960;$z$2 = $2;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 21976 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 21960;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 21960 : ((21960 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((21960 + 1|0));
     label = 89;
    }
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 21960;
    label = 89;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 21960;
     label = 94;
    } else {
     $$13 = $252 ? 21960 : ((21960 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21960;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21960;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (22040 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21960;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (21960 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21960;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 21960;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L481: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L481;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L481;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=22064+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 STACKTOP = sp;return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vid(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=+a2;
    FUNCTION_TABLE_vid[index&511](a1|0,+a2);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&1023](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_di(index,a1) {
    index = index|0;
    a1=a1|0;
    return +FUNCTION_TABLE_di[index&511](a1|0);
  }


  function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
    FUNCTION_TABLE_vidddd[index&511](a1|0,+a2,+a3,+a4,+a5);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&1023]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1023]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b6(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(6);return 0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(8); }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(9); }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
  function b12(p0) { p0 = p0|0; nullFunc_di(12);return +0; }
  function b13(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(16); }
  function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(20);return +0; }
  function b21() { ; nullFunc_i(21);return 0; }
  function _clock__wrapper() { ; return _clock()|0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b22(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b24() { ; nullFunc_v(24); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b25(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(25);return 0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26); }
  function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,__ZN3vcg6Color4IhEC1Ehhhh,b1,b1,b1,b1,b1,b1,__ZN3vcg3tri9AllocatorI6MyMeshE7AddFaceERS2_P8MyVertexS6_S6_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,__ZN3vcg3tri7EdgeLenI6MyMeshfEC1Ef,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED1Ev,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED0Ev,b3,b3,b3,b3,b3,__ZN3vcg18SimpleTempDataBaseD1Ev,__ZN3vcg18SimpleTempDataBaseD0Ev,b3,__ZN3vcg25MissingComponentExceptionD1Ev,__ZN3vcg25MissingComponentExceptionD0Ev,b3,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3
  ,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
  ,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3
  ,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3
  ,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3
  ,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3
  ,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev
  ,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,_exit__wrapper,__ZN6MyMeshD1Ev,b3,b3
  ,__ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,b3,b3,b3,b3,b3,__ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3vcg18PointerToAttributeD1Ev,b3,__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED1Ev
  ,b3,__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED1Ev,__ZN3vcg9TexCoord2IfLi1EEC1Ev,b3,b3,b3,b3,b3,__ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED1Ev,b3,b3,b3,__ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED1Ev,b3,b3,b3,b3,__ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC1Ev,b3,b3,__ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED1Ev,__ZN3vcg18SimpleTempDataBaseD2Ev,b3,__ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED1Ev,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__16localeD2Ev,b3,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,__ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED1Ev,b3,b3,b3,b3,b3,__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev,b3,b3,b3,__ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE,b3,b3,b3,b3,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED1Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED1Ev,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED1Ev,b3,b3,b3,b3,__ZN3vcg6Color4IhEC1Ev
  ,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED1Ev,b3,b3,__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED1Ev,b3,__ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED1Ev,b3,b3,__ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev,b3,b3,__ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev,b3,b3,b3,b3,__ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev,b3
  ,b3,__ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED1Ev,__ZN3vcg4ShotIfNS_8Matrix44IfEEED1Ev,__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE7DeallocEv,__ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED1Ev,__ZN3vcg4Box3IfED1Ev,__ZNSt3__113__vector_baseIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev,__ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED1Ev,__ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED1Ev,__ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED1Ev,__ZNSt3__16vectorIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEEC2Ev,__ZN3vcg4Box3IfEC1Ev,b3,__ZN3vcg4ShotIfNS_8Matrix44IfEEEC1Ev,__ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_E11SetIdentityEv,__ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED1Ev,__ZN3vcg6Point3IfEC1Ev,__ZN3vcg8Matrix44IfED1Ev,b3,b3,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_freelocale__wrapper,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor120,b3,___cxx_global_array_dtor105,b3,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6ResizeEj,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE7ReorderERNS2_IjNS4_IjEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4
  ,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv
  ,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4
  ,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi
  ,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,__ZNSt3__18ios_base4initEPv,b4,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC1ERS6_,b4,b4,b4,b4,b4
  ,b4,b4,b4,__ZN3vcg18PointerToAttribute6ResizeEj,__ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj,__ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b4,__ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b4,b4,b4,__ZN3vcg18PointerToAttributeC1ERKS0_,b4,b4,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE7reserveEj,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj,b4,b4,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE,b4,__ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEE18__construct_at_endEj,b4,b4,__ZN3vcg25MissingComponentExceptionC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4
  ,b4,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,b4,b4,b4,__ZNSt3__18ios_base5clearEj,b4,b4,b4,__ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE,b4,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE8ColorMapEi,__ZN3vcg6Color4IhE6ImportIfEEvRKNS0_IT_EE,b4
  ,b4,__ZN3vcg6Color4IhE6ImportIhEEvRKNS0_IT_EE,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEEC1Ej,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC1Ej,__ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC1Ej,b4,b4,__ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetFEi,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC1ERKS6_,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_,__ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE,__ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearFEi,b4,b4,b4,b4,__ZN3vcg6Color4IhEC1ENS1_13ColorConstantE,b4,b4
  ,b4,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj,b4,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_,__ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5AllocERKi,__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC1ERKS6_,b4,__ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b4,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8allocateEj,b4,b4,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8allocateEj,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE18__construct_at_endEj,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endEj,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj,b4,b4
  ,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC1ERKS4_,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,b4
  ,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_
  ,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,__ZNK3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6SizeOfEv,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE9DataBeginEv,b5,b5,b5,b5,b5,b5,__ZNK3vcg25MissingComponentException4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b5,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b5,b5,b5
  ,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b5,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b5,b5,b5,b5,__ZNKSt13runtime_error4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__119__iostream_category4nameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv
  ,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b5
  ,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b5,b5,b5,b5
  ,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b5,b5,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv
  ,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5
  ,b5,b5,b5,b5,__ZNKSt8bad_cast4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_strlen__wrapper,b5,b5,b5,__ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2FNEv,__ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2VNEv
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv,b5,b5,b5,b5,b5,__Znwj,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111char_traitsIcE6lengthEPKc,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_atoi,b5,b5,__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv,b5,__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv,__ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_,__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv,b5,b5,b5
  ,b5,b5,b5,__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3vcg3tri15HasPerFaceColorI6MyMeshEEbRKT_,__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE1CEv,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b5,b5,b5,b5,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_uselocale__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_wcslen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b7,b7,b7
  ,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b7,b7,b7,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b7,b7,b7,b7,b7,b7,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b7,b7,b7,b7
  ,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b7,b7
  ,b7,b7,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b7,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b7,b7,__ZNKSt3__15ctypeIcE9do_narrowEcc,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__15ctypeIwE5do_isEtw,b7,b7,b7,b7,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b7,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b7,b7,__ZNKSt3__15ctypeIwE9do_narrowEwc,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_sn_write,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_newlocale__wrapper,b7,b7,b7,b7,_vasprintf,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b7,b7,b7,b7,b7,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,_wcrtomb,b7,b7,_mbtowc,_mbrlen,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_do_read,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b8,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiid = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b10,b10,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b10,b10,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE];
  var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb
  ,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b11
  ,b11,b11,b11,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,__ZN3vcg3tri9AllocatorI6MyMeshE11AddQuadFaceERS2_P8MyVertexS6_S6_S6_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_di = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_atof,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12];
  var FUNCTION_TABLE_vidddd = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,__ZN3vcg6Color4IfEC1Effff,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,b14
  ,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b14,b14,b14,b14,b14,b14,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b14,b14,b14,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,b14,b14,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiid = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b15,b15,b15,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_viiiiiiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b17,b17,b17,b17,b17,b17,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b17,b17,b17,b17,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b17,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,b18,b18,b18,b18,b18,b18,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE2AtEj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b18,__ZNSt3__111__stdoutbufIwE8overflowEj,b18,b18,b18,b18,b18,b18,__ZNSt3__110__stdinbufIwE9pbackfailEj,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj
  ,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b18,__ZNSt3__111__stdoutbufIcE8overflowEi,b18,b18,b18,b18,b18,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE10do_toupperEc,b18,__ZNKSt3__15ctypeIcE10do_tolowerEc,b18,__ZNKSt3__15ctypeIcE8do_widenEc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE10do_toupperEw,b18,__ZNKSt3__15ctypeIwE10do_tolowerEw,b18,__ZNKSt3__15ctypeIwE8do_widenEc,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_printf__wrapper,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeeqERKS4_,b18,b18,b18,__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi,__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK3vcg18PointerToAttributeltES0_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,b18,b18,__ZNKSt3__16locale9use_facetERNS0_2idE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__111char_traitsIcE2eqEcc,b18,b18,b18,b18,b18,b18,__ZN3vcg6Point3IfEixEi,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3vcg6Point4IhEixEi,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_isxdigit_l,_isdigit_l,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b19,b19,b19,b19,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b19,b19,b19,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b19,b19,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19
  ,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE7OpenMemERS3_PKcjRiPFbiS7_E,b19,b19,b19,b19
  ,b19,b19,b19,__ZN3vcg3tri7RefineEI6MyMeshNS0_8MidPointIS2_NS0_16BaseInterpolatorIS2_EEEENS0_7EdgeLenIS2_fEEEEbRT_RT0_RT1_bPFbiPKcE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,_wcsnrtombs,b19,_mbsnrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_diii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_i = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,_clock__wrapper,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE11HasPolyInfoEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16__clocEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16locale5__imp12make_classicEv,b21,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b21,b21,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_get_globals_fast,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE10OpenStreamERS3_RNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERiPFbiPKcE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b22,b22,b22,b22,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b22,b22,b22,b22,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22
  ,_mbsrtowcs,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_catgets__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,_mbrtowc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22];
  var FUNCTION_TABLE_viii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__114error_category23default_error_conditionEi,b23,b23,__ZNKSt3__119__iostream_category7messageEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,__ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC1EPS2_PS4_,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri14UpdateTopologyI6MyMeshE14FillEdgeVectorERS2_RNSt3__16vectorINS3_5PEdgeENS5_9allocatorIS7_EEEEb,__ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri9AllocatorI6MyMeshE19AddPerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEENS0_7TriMeshINSt3__16vectorIS6_NSA_9allocatorIS6_EEEENSB_I6MyFaceNSC_ISF_EEEENSB_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EERS2_NSA_12basic_stringIcNSA_11char_traitsIcEENSC_IcEEEE,b23,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_,b23,b23,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_,__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC1EPvRKi,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b23,___cxa_throw__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC1ERKS8_j,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b23,b23,b23,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC1ERKS8_j,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b23,b23,b23,b23,b23,b23,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_v = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_pure_virtual__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZL25default_terminate_handlerv,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_end_catch__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_rethrow__wrapper,b24,b24
  ,b24,b24,b24,b24,__ZSt17__throw_bad_allocv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_iiiiiiiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b25,b25
  ,b25,b25,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_viiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b26,b26,b26,b26,__ZNKSt3__17collateIwE12do_transformEPKwS3_
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,___assert_fail__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_jRNS3_14PointerUpdaterIP8MyVertexEE,b26
  ,__ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_jRNS3_14PointerUpdaterIP6MyFaceEE,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5eraseENS_11__wrap_iterIPKS6_EESC_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSD_SD_,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _refine: _refine, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _realloc: _realloc, _bitshift64Lshr: _bitshift64Lshr, _allocator: _allocator, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_vidddd: dynCall_vidddd, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__refine = asm["_refine"]; asm["_refine"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__refine.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__allocator = asm["_allocator"]; asm["_allocator"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__allocator.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _refine = Module["_refine"] = asm["_refine"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _allocator = Module["_allocator"] = asm["_allocator"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



